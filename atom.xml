<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2017-05-29T06:41:00.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深拷贝/浅拷贝和赋值</title>
    <link href="https://ttxsgoto.github.io/2017/05/24/copy-deepcopy/"/>
    <id>https://ttxsgoto.github.io/2017/05/24/copy-deepcopy/</id>
    <published>2017-05-24T13:38:11.000Z</published>
    <updated>2017-05-29T06:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h4><ul>
<li>赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变类型的值时，对应内部的引用发生变化；其中可变类型(列表，字典)，不可变类型(数字，字符串，元祖)</li>
<li>浅拷贝：只拷贝父对象，不会拷贝对象的内部的子对象,只是原对象元素的引用，下列操作相当于浅拷贝<pre><code>- 使用切片操作[:]
- 使用list/dir/set
- 使用copy.copy()
</code></pre></li>
<li>深拷贝：拷贝对象及其子对象,创建一个新的对象，不使用原来的对应对象引用</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>], (<span class="number">7</span>,<span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: l2 = l1</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: id(l1), id(l2)</div><div class="line">Out[<span class="number">3</span>]: (<span class="number">4360956240</span>, <span class="number">4360956240</span>)	<span class="comment"># 指向相同的内存地址</span></div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: l1[<span class="number">3</span>].append(<span class="number">6</span>)</div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: l1</div><div class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: l2</div><div class="line">Out[<span class="number">6</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">7</span>]: id(l1), id(l2)</div><div class="line">Out[<span class="number">7</span>]: (<span class="number">4360956240</span>, <span class="number">4360956240</span>)</div><div class="line"> </div><div class="line">In [<span class="number">8</span>]: l2[<span class="number">0</span>] = <span class="number">0</span></div><div class="line"> </div><div class="line">In [<span class="number">9</span>]: l2</div><div class="line">Out[<span class="number">9</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">10</span>]: l1</div><div class="line">Out[<span class="number">10</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">11</span>]: l1 <span class="keyword">is</span> l2</div><div class="line">Out[<span class="number">11</span>]: <span class="keyword">True</span></div><div class="line"> </div><div class="line">In [<span class="number">12</span>]: id(l1[<span class="number">3</span>])</div><div class="line">Out[<span class="number">12</span>]: <span class="number">4360955808</span></div><div class="line"> </div><div class="line">In [<span class="number">13</span>]: id(l2[<span class="number">3</span>])</div><div class="line">Out[<span class="number">13</span>]: <span class="number">4360955808</span></div></pre></td></tr></table></figure>
<h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"> </div><div class="line">l1 = [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</div><div class="line"> </div><div class="line"><span class="comment"># l2 = list(l1)	# 相当于浅拷贝操作,l1 l2代表不同的列表，但两者引用同一个列表和元祖，如下图一</span></div><div class="line">l2 = copy.copy(l1)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">'=================《流畅的python》第217页 浅拷贝================='</span></div><div class="line"><span class="keyword">print</span> <span class="string">'id-----'</span>,id(l1[<span class="number">1</span>]), id(l2[<span class="number">1</span>])	<span class="comment"># 4318639744 4318639744</span></div><div class="line"><span class="keyword">print</span> <span class="string">'id-----'</span>,id(l1), id(l2)	<span class="comment"># 4318640104 4318555600</span></div><div class="line"> </div><div class="line">l1.append(<span class="number">100</span>) <span class="comment"># [3, [66, 55, 44], (7, 8, 9), 100]</span></div><div class="line">l1[<span class="number">1</span>].remove(<span class="number">55</span>) <span class="comment">#  [3, [66, 44], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l1----&gt;'</span>, l1 <span class="comment"># [3, [66, 44], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l2----&gt;'</span>, l2 <span class="comment"># [3, [66, 44], (7, 8, 9)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'============================================='</span></div><div class="line">l2[<span class="number">1</span>] += [<span class="number">33</span>, <span class="number">22</span>] <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9)]</span></div><div class="line">l2[<span class="number">2</span>] += (<span class="number">10</span>, <span class="number">11</span>) <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l1====&gt;'</span>, l1 <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l2====&gt;'</span>, l2 <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'================= 如下图二===================='</span></div></pre></td></tr></table></figure>
<p><img src="https://ttxsgoto.github.io/img/copy/copy01.png" alt="图一"><br><img src="https://ttxsgoto.github.io/img/copy/copy02.png" alt="图二"></p>
<h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> passengers <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.passengers = []</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.passengers = list(passengers)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.passengers.append(name)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.passengers.remove(name)</div><div class="line"> </div><div class="line">bus1 = Bus([<span class="string">'AAA'</span>, <span class="string">'BBB'</span>, <span class="string">'CCC'</span>])</div><div class="line">bus2 = copy.copy(bus1)</div><div class="line">bus3 = copy.deepcopy(bus1)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> id(bus1), id(bus2), id(bus3)</div><div class="line"><span class="comment"># 4318715792 4318757008 4318757072</span></div><div class="line"> </div><div class="line">bus1.drop(<span class="string">'AAA'</span>)</div><div class="line"><span class="keyword">print</span> bus2.passengers</div><div class="line"><span class="comment"># [u'BBB', u'CCC']</span></div><div class="line"><span class="keyword">print</span> id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</div><div class="line"><span class="comment"># 4560506320 4560506320 4560590464 bus2是bus1的浅复制的副本,所以id相同</span></div><div class="line"><span class="keyword">print</span> bus3.passengers</div><div class="line"><span class="comment"># [u'AAA', u'BBB', u'CCC']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念说明&quot;&gt;&lt;a href=&quot;#概念说明&quot; class=&quot;headerlink&quot; title=&quot;概念说明&quot;&gt;&lt;/a&gt;概念说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="copy" scheme="https://ttxsgoto.github.io/tags/copy/"/>
    
  </entry>
  
  <entry>
    <title>描述符</title>
    <link href="https://ttxsgoto.github.io/2017/05/16/descriptor/"/>
    <id>https://ttxsgoto.github.io/2017/05/16/descriptor/</id>
    <published>2017-05-16T12:24:28.000Z</published>
    <updated>2017-05-17T04:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述符说明"><a href="#描述符说明" class="headerlink" title="描述符说明"></a>描述符说明</h3><pre><code>- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符
- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写
- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中
  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找
  顺序为a.__dict__[&apos;x&apos;],然后是type(a).__dict__[&apos;x&apos;].如果还是没找
  到就往上级(父类)中查找最后查找是否有__getattr__
- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用
  描述符的__get__()方法，对于设置和删除也是同样的原理
- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;
- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;
</code></pre><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><pre><code>- 描述符作为属性访问时,是被自动调用
- 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__[&apos;x&apos;].__get__(None, Class)
- 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__[&apos;x&apos;].__get__(object, type(object))
</code></pre><h3 id="描述符用途-使用场景"><a href="#描述符用途-使用场景" class="headerlink" title="描述符用途,使用场景"></a>描述符用途,使用场景</h3><pre><code>- 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符
- 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符
- 描述符会&apos;劫持&apos;那些本是self.__dict__的操作
- 把一个类的操作托付给另外一个类
- 静态方法,类方法,parperty都是构建描述符的类
</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 属性进行相应的处理而不会对整体有影响</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.age = age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__-----'</span>, self, instance, owner</div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.age]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__-----'</span>, self, instance, value</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> type(eval(str(value))) == float:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Age must int and not negative '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.age] = value # 修改dict中对应的属性值</span></div><div class="line">        self.age = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.age</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SexType</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.sex = sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.sex]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'M'</span>, <span class="string">'W'</span>]:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The value must be M/W '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.sex] = value # 修改dict中对应的属性值</span></div><div class="line">        self.sex = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.sex</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    age = Integer(<span class="string">'age'</span>)</div><div class="line">    sex = SexType(<span class="string">'sex'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.sex = sex</div><div class="line">        self.age = age</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Person info --name:&#123;&#125;,--sex:&#123;&#125;,--age:&#123;&#125;'</span>.format(self.name, self.sex, self.age)</div><div class="line"> </div><div class="line">A = Person(name=<span class="string">'ttxsgoto'</span>, sex=<span class="string">'W'</span>, age= <span class="number">15</span> )</div><div class="line"> </div><div class="line"><span class="keyword">print</span> A.__dict__</div><div class="line"><span class="keyword">print</span> Person.__dict__</div><div class="line"><span class="keyword">print</span> A.info</div><div class="line"> </div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">'''</span></div><div class="line">&#123;'name': 'ttxsgoto'&#125;</div><div class="line">&#123;'info': &lt;property object at 0x1028ad418&gt;, '__module__': '__main__', 'age': &lt;__main__.Integer object at 0x1028b30d0&gt;, 'sex': &lt;__main__.SexType object at 0x1028b3110&gt;, '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x1028b2578&gt;&#125;</div><div class="line">__get__----- &lt;__main__.Integer object at 0x1028b30d0&gt; &lt;__main__.Person object at 0x1028b3150&gt; &lt;class '__main__.Person'&gt;</div><div class="line">Person info --name:ttxsgoto,--sex:W,--age:15</div><div class="line">'''</div></pre></td></tr></table></figure>
<h4 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数据描述符和非数据描述符的区别</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Access</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, var=None, name=<span class="string">'var'</span>)</span>:</span></div><div class="line">        self.var = var</div><div class="line">        self.name = name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__----'</span>, self, instance, owner, self.name</div><div class="line">        <span class="keyword">return</span> self.var</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span>  <span class="comment"># 含有__set__方法为数据描述符</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__----'</span>, self, instance, value</div><div class="line">        self.var = value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    x = Access(<span class="number">10</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.x = x</div><div class="line"> </div><div class="line">t = MyClass(<span class="number">100</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'----\n'</span>, t.x</div><div class="line"><span class="keyword">print</span> <span class="string">'====\n'</span>, t.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'xxxx\n'</span>, MyClass.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'yyyy\n'</span>, MyClass.x</div><div class="line"> </div><div class="line"><span class="comment">########### 数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">__set__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; 100</div><div class="line">----</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x10687c2d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10687b320&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="comment">########### 非数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">----</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;'x': 100&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x1012502d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10124f050&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x1012502d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">10</div><div class="line">'''</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;描述符说明&quot;&gt;&lt;a href=&quot;#描述符说明&quot; class=&quot;headerlink&quot; title=&quot;描述符说明&quot;&gt;&lt;/a&gt;描述符说明&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="descriptor" scheme="https://ttxsgoto.github.io/tags/descriptor/"/>
    
  </entry>
  
  <entry>
    <title>ModelSerializer常用方法</title>
    <link href="https://ttxsgoto.github.io/2017/05/14/rest-framwork-serializers/"/>
    <id>https://ttxsgoto.github.io/2017/05/14/rest-framwork-serializers/</id>
    <published>2017-05-14T12:13:22.000Z</published>
    <updated>2017-05-14T12:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ModelSerializer属性方法"><a href="#ModelSerializer属性方法" class="headerlink" title="ModelSerializer属性方法"></a>ModelSerializer属性方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    other_name = serializers.CharField(source=<span class="string">'name'</span>, read_only=<span class="keyword">True</span>)   <span class="comment"># 新添加fields中字段,该serializer对应的model中字段</span></div><div class="line">    other_field = serializers.SerializerMethodField()   <span class="comment"># 添加不是该model中的字段</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Account <span class="comment"># 指定model</span></div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'account_name'</span>, <span class="string">'users'</span>, <span class="string">'created'</span>)  <span class="comment"># 包括的字段</span></div><div class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 显示所有字段</span></div><div class="line">        exclude = (<span class="string">'users'</span>,)    <span class="comment"># 排除不显示的字段,和fields不能同时使用</span></div><div class="line">        depth = <span class="number">1</span>   <span class="comment"># 展示ForeignKey对应的数据，设置展示深度</span></div><div class="line">        read_only_fields = (<span class="string">'account_name'</span>,)    <span class="comment"># 设置只读字段</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_other_field</span><span class="params">(self, obj)</span>:</span><span class="comment"># (dept为外键字段)</span></div><div class="line">        <span class="keyword">return</span> obj.dept.name <span class="keyword">if</span> obj.dept <span class="keyword">else</span> <span class="string">''</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ModelSerializer属性方法&quot;&gt;&lt;a href=&quot;#ModelSerializer属性方法&quot; class=&quot;headerlink&quot; title=&quot;ModelSerializer属性方法&quot;&gt;&lt;/a&gt;ModelSerializer属性方法&lt;/h3&gt;&lt;figu
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>Rest_framwork笔记</title>
    <link href="https://ttxsgoto.github.io/2017/05/14/rest-framwork-note/"/>
    <id>https://ttxsgoto.github.io/2017/05/14/rest-framwork-note/</id>
    <published>2017-05-14T11:36:53.000Z</published>
    <updated>2017-05-14T12:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现restful操作步骤"><a href="#实现restful操作步骤" class="headerlink" title="实现restful操作步骤"></a>实现restful操作步骤</h3><p>0.setting.py 添加设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">	<span class="string">'rest_framework'</span>,</div><div class="line">        <span class="string">'app'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>1.serializer序列化models<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line"> </div><div class="line"><span class="comment">#使用模型序列化ModelSerializer</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户管理</div><div class="line">    """</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span>   <span class="comment"># 方法重写</span></div><div class="line">        user = User.objects.create(**validated_data)</div><div class="line">        <span class="keyword">return</span> user</div><div class="line"> </div><div class="line"><span class="comment">#简单的默认create()和update()方法的实现</span></div></pre></td></tr></table></figure></p>
<p>2.viewSet中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">queryset = user.objects.all()       <span class="comment"># 取数据all</span></div><div class="line">serializer_class = UserSerializer   <span class="comment"># 将序列化的数据给</span></div><div class="line"> </div><div class="line"><span class="comment"># 或者返回数据列表</span></div><div class="line">departments = Department.objects.all()</div><div class="line">response.data.update(&#123;<span class="string">'departments'</span>: DepartmentSerializer(list(departments), many=<span class="keyword">True</span>).data&#125;)</div></pre></td></tr></table></figure></p>
<p>3.注册router<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line">router =  routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>, UserViewSet)</div></pre></td></tr></table></figure></p>
<h3 id="实例化-Serializer-类和模型实例化-ModelSerializer-类"><a href="#实例化-Serializer-类和模型实例化-ModelSerializer-类" class="headerlink" title="实例化(Serializer)类和模型实例化(ModelSerializer)类"></a>实例化(Serializer)类和模型实例化(ModelSerializer)类</h3><p>serializers.py  #序列化类的快捷方式，同时包括create,update方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers	    <span class="comment"># 序列化</span></div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User	<span class="comment"># 导入model</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户管理</div><div class="line">    """</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User  <span class="comment"># 定义models</span></div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'first_name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>)	<span class="comment"># 字段</span></div></pre></td></tr></table></figure></p>
<h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.data #可以处理任何数据，对post，put，patch等方法也起作用</div></pre></td></tr></table></figure>
<h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from rest_framework.response import Response</div><div class="line">return Response()	</div><div class="line"># 根据客户端的请求来渲染成指定的内容类型,用于未渲染内容和内容协商来决定正确的内容类型并把它返回给客户端的模板响应(TemplateResponse).</div></pre></td></tr></table></figure>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># REST框架为每个状态码提供了明确的标识符，如HTTP_400_BAD_REQUEST等</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,request)</span>:</span></div><div class="line">	<span class="keyword">return</span> Response(data, status=status.HTTP_201_CREATED)</div></pre></td></tr></table></figure>
<h3 id="装饰API视图"><a href="#装饰API视图" class="headerlink" title="装饰API视图"></a>装饰API视图</h3><ul>
<li>@app_view 用在基于视图的方法上</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"> </div><div class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">print</span> request.method</div><div class="line">    <span class="keyword">print</span> request.DATA</div><div class="line">    <span class="keyword">return</span> Response([&#123;<span class="string">'asset'</span>: <span class="string">'1'</span>,<span class="string">'status'</span>: <span class="string">'ok'</span>&#125;])</div><div class="line"> </div><div class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_api</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Respose(serializer.data)</div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Response(data,status=status.HTTP_206_PARTIAL_CONTENT)</div><div class="line"> </div><div class="line"><span class="comment">#urls.py中设置</span></div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"> </div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<ul>
<li>APIView 用在基于视图的类</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 基于视图的类</span></div><div class="line">views.py中</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(APIView)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,format=None)</span>:</span></div><div class="line">    	objectall = User.objects.all()</div><div class="line">        serializer = UserSerializer(objectall)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, formate=None)</span>:</span></div><div class="line">    	<span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="comment"># urls.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"> </div><div class="line">    url(<span class="string">r'^app/user/$'</span>, UserView.as_view()),</div><div class="line">    url(<span class="string">r'^app/user/(?P&lt;pk&gt;[0-9]+)$'</span>, UserView.as_view()),</div><div class="line"> </div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<ul>
<li>使用基于视图的一般类(generic class)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line">    queryset = info.objects.all()    <span class="comment">#models对象</span></div><div class="line">    serializer_class = UserSerializer	<span class="comment">#序列化的类</span></div></pre></td></tr></table></figure>
<h3 id="授权-Authentication-与权限-Permissions"><a href="#授权-Authentication-与权限-Permissions" class="headerlink" title="授权(Authentication)与权限(Permissions)"></a>授权(Authentication)与权限(Permissions)</h3><ul>
<li>数据总是和创建者联系在一起</li>
<li>只有授权用户才能创建对应的数据</li>
<li>只有对应的数据的创建者才能更新或删除它</li>
<li>没有授权的请求应该只有只读权限</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissons</div><div class="line"> </div><div class="line">urls.py中</div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]</div><div class="line"><span class="comment">################################</span></div><div class="line"><span class="comment"># 在浏览器API中添加登录</span></div><div class="line">urls.py</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</div><div class="line"> </div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]	<span class="comment"># 为api添加一个包括登录和退出视图的url样式</span></div><div class="line"> </div><div class="line"><span class="comment"># api-auth部分可以是任何你想要的url，唯一的限制为include中的链接必须使用‘rest_framework’名字空间，在Django1.9+ rest框架会设置名字空间，所以必须写</span></div></pre></td></tr></table></figure>
<h3 id="URL模式命名"><a href="#URL模式命名" class="headerlink" title="URL模式命名"></a>URL模式命名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url(<span class="string">r'^app/user/$'</span>, UserView.as_view(), name=<span class="string">'user_add'</span>), <span class="comment"># name指定url名称</span></div></pre></td></tr></table></figure>
<h3 id="添加分页"><a href="#添加分页" class="headerlink" title="添加分页"></a>添加分页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setting.py中</span></div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'base.serializers.PlugPageNumberPagination'</span>,</div><div class="line">    <span class="string">'MAX_PAGE_SIZE'</span>: <span class="number">50</span>,</div><div class="line">    <span class="string">'PAGE_SIZE'</span>:     <span class="number">15</span>  <span class="comment"># default page size</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="视图集-ViewSets-和路由-Routers"><a href="#视图集-ViewSets-和路由-Routers" class="headerlink" title="视图集(ViewSets)和路由(Routers)"></a>视图集(ViewSets)和路由(Routers)</h3><p>视图集让开发者把精力集中在构建状态和交互的api模型，而且他可以基于一般规范自动构建url<br>一个viewset类只绑定一个方法集合，当它初始化一个视图集合时，一般使用为处理复杂的url定义的Router类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserviewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">	queryset = User.objects.all()</div><div class="line">	serializer_class = UserSerializer</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self,request)</span>:</span></div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> data</div></pre></td></tr></table></figure></p>
<h3 id="明确绑定视图集到URL"><a href="#明确绑定视图集到URL" class="headerlink" title="明确绑定视图集到URL"></a>明确绑定视图集到URL</h3><p>定义URLConf时，处理方法只绑定了动作，我们必须从我们的视图集(ViewSets)创建一个视图集合，在urls.py文件中，我们将ViewSet类绑定到具体视图的集合</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># urls.py中</div><div class="line">from rest_framework.urlpatterns import format_suffix_patterns</div><div class="line"> </div><div class="line">user_list = UserView.as_view(&#123;</div><div class="line">    'get':'list',</div><div class="line">    'post':'creat',</div><div class="line">&#125;)</div><div class="line">url(r'^user/$, user_list)),</div><div class="line"> </div><div class="line"># 或者：</div><div class="line">list_create = &#123;</div><div class="line">    'get': 'list',</div><div class="line">    'post': 'create',</div><div class="line">&#125;</div><div class="line"> url(r'^user/$', UserView.as_view(list_create)),</div></pre></td></tr></table></figure>
<h3 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h3><p>使用Router类可以自动将资源和视图(views),链接(urls)联系起来，我们只需要用一个路由注册合适的视图集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># urls.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line"> </div><div class="line">router =  routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>,views.UserViewSet)</div><div class="line">router.register(<span class="string">r'groups'</span>,views.GroupsViewSet)</div><div class="line"> </div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.django-rest-framework.org/" target="_blank" rel="external">http://www.django-rest-framework.org/</a><br><a href="https://github.com/tomchristie/rest-framework-tutorial" target="_blank" rel="external">https://github.com/tomchristie/rest-framework-tutorial</a><br><a href="http://www.cnblogs.com/loveis715/p/4669091.html" target="_blank" rel="external">http://www.cnblogs.com/loveis715/p/4669091.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实现restful操作步骤&quot;&gt;&lt;a href=&quot;#实现restful操作步骤&quot; class=&quot;headerlink&quot; title=&quot;实现restful操作步骤&quot;&gt;&lt;/a&gt;实现restful操作步骤&lt;/h3&gt;&lt;p&gt;0.setting.py 添加设置&lt;br&gt;&lt;figu
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>装饰器</title>
    <link href="https://ttxsgoto.github.io/2017/05/13/decorator/"/>
    <id>https://ttxsgoto.github.io/2017/05/13/decorator/</id>
    <published>2017-05-13T02:57:35.000Z</published>
    <updated>2017-05-22T12:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><pre><code>- 能把装饰的函数替换成其他函数
- 装饰器在加载/导入模块时立即执行,被装饰的函数在被调用的时候运行
</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre><code>- 当函数离开创建环境后,依然持有其上下文状态
- 要形成闭包，首先需要一个嵌套的函数，即函数中定义了另一个函数，子函数引用父函
  数的变量,子函数称为闭包;
- Python中函数也是对象，所以函数也有很多属性，和闭包相关的属性是 
  __closure__,__closure__ 属性定义的是一个包含 cell 对象的元组，其中元组
  中的每一个cell对象用来保存作用域中变量的值
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding: utf_8</div><div class="line"> </div><div class="line">def func(n):</div><div class="line">    print 'id(n)----&gt; &#123;&#125;'.format(id(n))</div><div class="line"> </div><div class="line">    def new_power(x):</div><div class="line">        return x**n</div><div class="line">    print 'id(new_power)----&gt; &#123;&#125;'.format(id(new_power))</div><div class="line">    return new_power</div><div class="line"> </div><div class="line">first = func(5) # 在调用func函数时产生一个闭包new_power,并且已拥有局部变量n的值,即使func生命周期结束后,值n依然存在,因为n被new_power引用,所以不会被回收</div><div class="line"> </div><div class="line">print id(first)</div><div class="line">del func</div><div class="line">print first(2)</div><div class="line">print first.__closure__, first.__closure__[0].cell_contents # 函数也为对象,其中的闭包属性</div><div class="line">##### 运行结果 #####</div><div class="line">id(n)----&gt; 140676064892712</div><div class="line">id(new_power)----&gt; 4357115728</div><div class="line">4357115728</div><div class="line">32</div></pre></td></tr></table></figure>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>装饰器就是执行一个函数,当执行到@auth时，内部的动作为：</p>
<pre><code>- 执行auth函数，并将@auth下面的函数作为auth函数的参数，即@auth == auth(f1)
- 将执行完的auth函数返回值赋给@auth下面的函数的函数名，即 f1 = auth(f1),相当于执行inner函数
</code></pre><h3 id="装饰器实例"><a href="#装饰器实例" class="headerlink" title="装饰器实例"></a>装饰器实例</h3><h4 id="函数-无参数-的装饰器"><a href="#函数-无参数-的装饰器" class="headerlink" title="函数(无参数)的装饰器"></a>函数(无参数)的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span>    <span class="comment">#执行函数前执行动作</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span>    <span class="comment">#执行函数后执行动作</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">     </div><div class="line"><span class="meta">@auth  #@auth ==&gt; f1 = auth(f1) ==&gt;f1() 相当于执行inner函数，func为f1函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"This is f1 function"</span></div><div class="line"> </div><div class="line">f1()</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">This <span class="keyword">is</span> f1 function</div><div class="line">after</div></pre></td></tr></table></figure>
<h4 id="函数含有-一个-多个-参数的装饰器"><a href="#函数含有-一个-多个-参数的装饰器" class="headerlink" title="函数含有(一个/多个)参数的装饰器"></a>函数含有(一个/多个)参数的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_arg</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># 传递一个/多个参数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span></div><div class="line">        ret1,ret2 = func(*args, **kwargs)  <span class="comment"># 相当于f2(*args, **kwargs)函数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span></div><div class="line">        <span class="keyword">return</span> ret1,ret2</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth_arg</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span>  args,kwargs</div><div class="line">    <span class="keyword">return</span> args,kwargs</div><div class="line"> </div><div class="line">key1 = <span class="string">'ttxsgoto'</span></div><div class="line">dict1 = &#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line">ret1, ret2 = f2(key1, **dict1)</div><div class="line"><span class="keyword">print</span> ret1, ret2</div><div class="line"></div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">(<span class="string">'ttxsgoto'</span>,) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div><div class="line">after</div><div class="line">(<span class="string">'ttxsgoto'</span>,) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="有参数的装饰器"><a href="#有参数的装饰器" class="headerlink" title="有参数的装饰器"></a>有参数的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_arg</span><span class="params">(list1=[])</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> list1:</div><div class="line">        <span class="keyword">print</span> <span class="string">'None ....'</span></div><div class="line">        <span class="keyword">raise</span> Exception(<span class="string">'LIST is  Null '</span>)</div><div class="line">    new_list = []</div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> list1:</div><div class="line">        li += <span class="string">'a'</span></div><div class="line">        new_list.append(li)</div><div class="line">    <span class="keyword">print</span> new_list</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Before'</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">in_inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            ret1, ret2 = func(*args, **kwargs)</div><div class="line">            <span class="keyword">return</span> ret1, ret2</div><div class="line">        <span class="keyword">return</span> in_inner</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth_arg(list1=['a', '1'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"f3 ---"</span>, args, kwargs</div><div class="line">    <span class="keyword">return</span> args, kwargs</div><div class="line"> </div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">dict1=&#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> f3(a, **dict1)</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">[<span class="string">'aa'</span>, <span class="string">'1a'</span>]</div><div class="line">Before</div><div class="line">f3 --- ([<span class="number">1</span>, <span class="number">2</span>],) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="多装饰器"><a href="#多装饰器" class="headerlink" title="多装饰器"></a>多装饰器</h4><ul>
<li>在foo函数上层包裹了一层w1，又包裹了一次w2，一个嵌套一个函数，执行</li>
<li>可用于登录后再判断有没有权限，可以使用两个装饰器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before01"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after01"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before02"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after02"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@w2</span></div><div class="line"><span class="meta">@w1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"foo"</span></div><div class="line"> </div><div class="line">foo() <span class="comment">#先执行w1，在执行w2，嵌套执行，foo = w2(w1(foo)))</span></div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before02</div><div class="line">before01</div><div class="line">foo</div><div class="line">after01</div><div class="line">after02</div></pre></td></tr></table></figure>
<h4 id="函数的类装饰器-1"><a href="#函数的类装饰器-1" class="headerlink" title="函数的类装饰器(1)"></a>函数的类装饰器(1)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法</div><div class="line">    '''</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></div><div class="line">    	<span class="keyword">print</span> <span class="string">"__init__  function"</span></div><div class="line">        self.func = func</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Before..."</span></div><div class="line">        self.func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"After..."</span></div><div class="line"> </div><div class="line"><span class="meta">@Foo</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'bar funtion()'</span></div><div class="line"> </div><div class="line">bar()</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">__init__  function</div><div class="line">Before...</div><div class="line">bar funtion()</div><div class="line">After...</div></pre></td></tr></table></figure>
<h4 id="函数的类装饰器-2"><a href="#函数的类装饰器-2" class="headerlink" title="函数的类装饰器(2)"></a>函数的类装饰器(2)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorate</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,arg_list=[])</span>:</span></div><div class="line">        self.arg_list = arg_list</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.arg_list:</div><div class="line">                <span class="keyword">print</span> <span class="string">'None ....'</span></div><div class="line">                <span class="keyword">raise</span> Exception(<span class="string">'LIST is  Null '</span>)</div><div class="line">        new_list = []</div><div class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> self.arg_list:</div><div class="line">            li += <span class="string">'a'</span></div><div class="line">            new_list.append(li)</div><div class="line">        <span class="keyword">print</span> new_list</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            ret1, ret2 = func(*args, **kwargs)</div><div class="line">            <span class="keyword">return</span> ret1, ret2</div><div class="line">        <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@Decorate(arg_list=['a', 'b'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"f3  function"</span>, args, kwargs</div><div class="line">    <span class="keyword">return</span> args, kwargs</div><div class="line"> </div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">dict1=&#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line">ret = f3(a, **dict1)</div><div class="line"><span class="keyword">print</span> ret</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">[<span class="string">'aa'</span>, <span class="string">'ba'</span>]</div><div class="line">f3  function ([<span class="number">1</span>, <span class="number">2</span>],) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div><div class="line">(([<span class="number">1</span>, <span class="number">2</span>],), &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;)</div></pre></td></tr></table></figure>
<h3 id="装饰器的不足"><a href="#装饰器的不足" class="headerlink" title="装饰器的不足"></a>装饰器的不足</h3><p>使用装饰器极大地复用了代码，缺点就是原函数的元信息丢失<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)	#保持原函数信息一致，如果没有该装饰器，返回为inner函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"This is f1 function"</span></div><div class="line"> </div><div class="line">f1()</div><div class="line"><span class="keyword">print</span> f1, f1.__name__</div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">This <span class="keyword">is</span> f1 function</div><div class="line">after</div><div class="line">&lt;function inner at <span class="number">0x10e55b140</span>&gt; inner	<span class="comment">#这些显示为inner函数,本来调用的是f1函数</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）&lt;/p&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="decorator" scheme="https://ttxsgoto.github.io/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>多线程-threading</title>
    <link href="https://ttxsgoto.github.io/2017/04/17/threading/"/>
    <id>https://ttxsgoto.github.io/2017/04/17/threading/</id>
    <published>2017-04-17T12:37:11.000Z</published>
    <updated>2017-04-17T12:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程5种状态"><a href="#线程5种状态" class="headerlink" title="线程5种状态"></a>线程5种状态</h4><ul>
<li>新建</li>
<li>就绪</li>
<li>运行</li>
<li>阻塞</li>
<li>死亡</li>
</ul>
<p>阻塞的三种情况：</p>
<ul>
<li>同步阻塞：是指处于竞争锁定的状态，线程请求锁定时将进入这个状态，一旦成功获得锁定又恢复到运行状态；</li>
<li>等待阻塞：是指等待其他线程通知的状态，线程获得条件锁定后，调用“等待”将进入这个状态，一旦其他线程发出通知，线程将进入同步阻塞状态，再次竞争条件锁定；</li>
<li>其他阻塞：是指调用time.sleep()、anotherthread.join()或等待IO时的阻塞，这个状态下线程不会释放已获得的锁定。</li>
</ul>
<h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><p>在python虚拟机中的访问由全局解释器锁（GIL）控制，由于有了这把锁能保证同一时刻只有一个线程在运行，在多线程环境下，python虚拟机按照如下方式运行：</p>
<ol>
<li>设置GIL</li>
<li>切换到一个线程中运行</li>
<li>运行：<br> a指定数量的字节码的指令，或者<br> b线程主动让出控制（可以调用time.sleep(0)）</li>
<li>把线程设置为睡眠状态</li>
<li>解锁GIL</li>
<li>在重复以上所有步骤</li>
</ol>
<h4 id="threading-Thread模块"><a href="#threading-Thread模块" class="headerlink" title="threading.Thread模块"></a>threading.Thread模块</h4><p>threading.Thread 作用：创建线程实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- start()    开始一个线程的执行</div><div class="line">- run()    定义线程的功能的函数（一般会被子类重写）</div><div class="line">- join(timeout=<span class="keyword">None</span>)  程序挂起，直到子线程结束，在执行主线程，如果给了timeout，则最多阻塞timeout秒</div><div class="line">- getName()    返回线程的名字</div><div class="line">- setName()    设置线程的名字</div><div class="line">- isAlive()    检查线程是否成活</div><div class="line">- isDaemon()   是否等待线程执行完成后在执行主进程，默认为false</div><div class="line">- setDeaemon() 设置为daemoe模式，setDeaemon(<span class="keyword">True</span>)，不等子线程执行完成，直接执行主线程；如果在主线程没有结束时，子线程会执行直到主线程结束，子线程也结束</div></pre></td></tr></table></figure></p>
<h4 id="多线程运行方式"><a href="#多线程运行方式" class="headerlink" title="多线程运行方式"></a>多线程运行方式</h4><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><p>target传入函数名称，args传递给函数的参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime,sleep</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunction</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="keyword">print</span> item</div><div class="line">        sleep(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"before"</span></div><div class="line"> </div><div class="line">t1 = Thread(target=myfunction,args=(<span class="string">'hello'</span>,))</div><div class="line"><span class="keyword">print</span> t1.getName() <span class="comment">#Thread-1</span></div><div class="line"><span class="keyword">print</span> t1.isDaemon() <span class="comment">#默认为false</span></div><div class="line"><span class="comment">#t1.setDaemon(True)  #设置为setDaemon模式</span></div><div class="line">t1.start()</div><div class="line">t1.join(timeout=<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"after"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Over"</span></div><div class="line">sleep(<span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<h5 id="类继承调用"><a href="#类继承调用" class="headerlink" title="类继承调用"></a>类继承调用</h5><p>使用Threading创建线程，从threading.Thread继承，然后重写init方法和run方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span><span class="params">(Thread)</span>:</span> <span class="comment">#继承父类的threading.Thread</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,threadid,threadname,counter)</span>:</span></div><div class="line">        Thread.__init__(self)</div><div class="line">        self.threadid = threadid</div><div class="line">        self.threadname = threadname</div><div class="line">        self.counter = counter</div><div class="line">         </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span> <span class="comment">#把要执行的代码写在run函数中，线程创建后会直接运行run函数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Starting %s \n"</span> %self.threadname</div><div class="line">        print_time(self.name,self.counter,self.threadid) <span class="comment">#函数调用</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Exiting %s"</span> %self.threadname</div><div class="line">         </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName,delay,counter)</span>:</span></div><div class="line">    <span class="keyword">while</span> counter :</div><div class="line">        time.sleep(delay)</div><div class="line">        <span class="keyword">print</span> counter,<span class="string">"%s: %s"</span> %(threadName,time.ctime())</div><div class="line">        counter -=<span class="number">1</span></div><div class="line">         </div><div class="line">t1 = mythread(<span class="number">2</span>,<span class="string">"线程一"</span>,<span class="number">1</span>)</div><div class="line">t1.start()</div></pre></td></tr></table></figure></p>
<h4 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h4><p>优点：</p>
<ol>
<li>解耦：两者都只依赖于缓冲区，不相互依赖</li>
<li>支持并发：生产者把制造出来的数据往缓冲区一丢，就可以再去生产下一个数据，即不用依赖消费者的处理速度</li>
<li>支持忙闲不均</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time,random</div><div class="line"><span class="keyword">import</span> Queue</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">proudcer</span><span class="params">(name,que)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">if</span> que.qsize() &lt; <span class="number">3</span>:</div><div class="line">            que.put(<span class="string">'生产包子'</span>)</div><div class="line">            <span class="keyword">print</span> <span class="string">"%s:生产了一个包子...."</span> %name</div><div class="line">        time.sleep(random.randrange(<span class="number">5</span>))</div><div class="line">         </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(name,que)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            que.get_nowait() <span class="comment">#不等待队列是否有值</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"%s:消费了一个包子...."</span> %name</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">print</span> <span class="string">u'没有包子可消费了 .....'</span></div><div class="line">        time.sleep(random.randrange(<span class="number">3</span>))</div><div class="line">         </div><div class="line"><span class="comment">#实例化生产者</span></div><div class="line">q = Queue.Queue()</div><div class="line">p1 = threading.Thread(target=proudcer,args=(<span class="string">"生产者01"</span>,q))</div><div class="line">p2 = threading.Thread(target=proudcer,args=(<span class="string">"生产者02"</span>,q))</div><div class="line">p1.start()</div><div class="line">p2.start()</div><div class="line"> </div><div class="line"><span class="comment">#实例化消费者</span></div><div class="line">c1 = threading.Thread(target=consumer,args=(<span class="string">"消费者01"</span>,q))</div><div class="line">c2 = threading.Thread(target=consumer,args=(<span class="string">"消费者02"</span>,q))</div><div class="line">c1.start()</div><div class="line">c2.start()</div></pre></td></tr></table></figure>
<h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>线程锁,保证数据安全，多个线程都同时修改某个变量，有可能出现问题，Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法</p>
<p>运行：任何时刻只能有一个线程在执行</p>
<p>定义和方法:</p>
<pre><code>lock = threading.Lock() #线程锁定义
lock.acquire() #获取锁，开始独占cpu
slock.release() #释放锁，可以被其他使用cpu资源,必须在获得锁定后再使用，否则抛出异常
slock.locked()  #主程序判断locked()状态
Lock= threading.RLock() #可重入锁，多把锁时引用，释放时也应该释放对应的多把锁
lock = threading.BoundedSemaphore(4) #同时允许多少个线程进行数据修改信号量：同一时刻，允许几个线程运行
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">data = <span class="number">0</span></div><div class="line">lock = threading.Lock() <span class="comment">#定义锁</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> data</div><div class="line">    <span class="keyword">print</span> <span class="string">"%s acquire lock ..."</span> %threading.currentThread().getName()</div><div class="line">    <span class="comment">#print "acquire-----%s" %lock.acquire()</span></div><div class="line">    <span class="keyword">if</span> lock.acquire(): <span class="comment">#调用锁，返回是否获得锁</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"%s get the lock."</span> %threading.currentThread().getName()</div><div class="line">        data += <span class="number">1</span></div><div class="line">        <span class="keyword">print</span> data</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"%s release lock..."</span> %threading.currentThread().getName()</div><div class="line">        lock.release() <span class="comment"># 调用release()将释放锁</span></div><div class="line">         </div><div class="line">t1 = threading.Thread(target=func)</div><div class="line">t2 = threading.Thread(target=func)</div><div class="line">t3 = threading.Thread(target=func)</div><div class="line">t1.start()</div><div class="line">t2.start()</div><div class="line">t3.start()</div></pre></td></tr></table></figure>
<h4 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">event = threading.Event()</div><div class="line">event.wait()    #将阻塞线程放置为阻塞状态，等待设置处理</div><div class="line">event.set()   #event内置了一个初始为false的标示，当调用set时，设置为true，开始处理</div><div class="line">event.clear()    #将set标示位清空，设置为false</div><div class="line">event.isSet()    #判断set标示位是否为true</div></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html" target="_blank" rel="external">http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;线程5种状态&quot;&gt;&lt;a href=&quot;#线程5种状态&quot; class=&quot;headerlink&quot; title=&quot;线程5种状态&quot;&gt;&lt;/a&gt;线程5种状态&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新建&lt;/li&gt;
&lt;li&gt;就绪&lt;/li&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;li&gt;阻塞&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="threading" scheme="https://ttxsgoto.github.io/tags/threading/"/>
    
  </entry>
  
  <entry>
    <title>importlib模块</title>
    <link href="https://ttxsgoto.github.io/2017/04/16/importlib/"/>
    <id>https://ttxsgoto.github.io/2017/04/16/importlib/</id>
    <published>2017-04-16T07:44:11.000Z</published>
    <updated>2017-04-17T07:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过字符串导入模块，动态导入模块，3种方式,记录如下：</p>
<p>方式一：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">os1 = __import__('os')</div><div class="line">os1.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import imp</div><div class="line">os2 = imp.load_module('os',*imp.find_module('os'))</div><div class="line">os2.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>
<p>方式三：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module = importlib.import_module('os')</div><div class="line">os_path =  getattr(module,'path')</div><div class="line">os_path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过字符串导入模块，动态导入模块，3种方式,记录如下：&lt;/p&gt;
&lt;p&gt;方式一：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cla
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="importlib" scheme="https://ttxsgoto.github.io/tags/importlib/"/>
    
  </entry>
  
  <entry>
    <title>datetime模块</title>
    <link href="https://ttxsgoto.github.io/2017/04/10/datetime/"/>
    <id>https://ttxsgoto.github.io/2017/04/10/datetime/</id>
    <published>2017-04-10T13:51:17.000Z</published>
    <updated>2017-04-10T12:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.</p>
<h4 id="时间转换为字符串-格式化输出"><a href="#时间转换为字符串-格式化输出" class="headerlink" title="时间转换为字符串(格式化输出)"></a>时间转换为字符串(格式化输出)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line"><span class="comment"># strftime参数，strftime(format[, tuple]) -&gt; string</span></div><div class="line">python中时间日期格式化符号：</div><div class="line">%y 两位数的年份表示（<span class="number">00</span><span class="number">-99</span>）</div><div class="line">%Y 四位数的年份表示（<span class="number">000</span><span class="number">-9999</span>）</div><div class="line">%m 月份（<span class="number">01</span><span class="number">-12</span>）</div><div class="line">%d 月内中的一天（<span class="number">0</span><span class="number">-31</span>）</div><div class="line">%H <span class="number">24</span>小时制小时数（<span class="number">0</span><span class="number">-23</span>）</div><div class="line">%I <span class="number">12</span>小时制小时数（<span class="number">01</span><span class="number">-12</span>）</div><div class="line">%M 分钟数（<span class="number">00</span><span class="number">-59</span>）</div><div class="line">%S 秒（<span class="number">00</span><span class="number">-59</span>）</div><div class="line">%a 本地简化星期名称</div><div class="line">%A 本地完整星期名称</div><div class="line">%b 本地简化的月份名称</div><div class="line">%B 本地完整的月份名称</div><div class="line">%c 本地相应的日期表示和时间表示</div><div class="line">%j 年内的一天（<span class="number">001</span><span class="number">-366</span>）</div><div class="line">%p 本地A.M.或P.M.的等价符</div><div class="line">%U 一年中的星期数（<span class="number">00</span><span class="number">-53</span>）星期天为星期的开始</div><div class="line">%w 星期（<span class="number">0</span><span class="number">-6</span>），星期天为星期的开始</div><div class="line">%W 一年中的星期数（<span class="number">00</span><span class="number">-53</span>）星期一为星期的开始</div><div class="line">%x 本地相应的日期表示</div><div class="line">%X 本地相应的时间表示</div><div class="line">%Z 当前时区的名称</div><div class="line">%% %号本身</div></pre></td></tr></table></figure>
<h4 id="字符串和datetime转换"><a href="#字符串和datetime转换" class="headerlink" title="字符串和datetime转换"></a>字符串和datetime转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">把str转换为datetime,转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: <span class="keyword">print</span> datetime.now()</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">03.619051</span></div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: type(datetime.now())</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: str = <span class="string">'2017-04-10 21:13:14'</span></div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: type(str)</div><div class="line">Out[<span class="number">5</span>]: str</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: daytime = datetime.strptime(str,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</div><div class="line"> </div><div class="line">In [<span class="number">7</span>]: daytime</div><div class="line">Out[<span class="number">7</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">8</span>]: <span class="keyword">print</span> daytime</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">14</span></div><div class="line"> </div><div class="line">In [<span class="number">9</span>]: type(daytime)</div><div class="line">Out[<span class="number">9</span>]: datetime.datetime</div></pre></td></tr></table></figure>
<h4 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入。</div><div class="line">如果仅导入import datetime，则需要使用datetime.datetime.now()返回当前日期和时间，其类型是datetime</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now = datetime.now()</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: now</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">241762</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> now</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">11</span>:<span class="number">07.241762</span></div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: type(now)</div><div class="line">Out[<span class="number">5</span>]: datetime.datetime</div></pre></td></tr></table></figure>
<h4 id="特定时间"><a href="#特定时间" class="headerlink" title="特定时间"></a>特定时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: day = datetime(<span class="number">2017</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: day</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> day</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h4 id="时间加减"><a href="#时间加减" class="headerlink" title="时间加减"></a>时间加减</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，需要导入timedelta</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now = datetime.now()</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: now</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: now+timedelta(hours=<span class="number">2</span>)</div><div class="line">Out[<span class="number">4</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: now-timedelta(days=<span class="number">2</span>)</div><div class="line">Out[<span class="number">5</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">21</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: now+timedelta(days=<span class="number">1</span>,hours=<span class="number">1</span>)</div><div class="line">Out[<span class="number">6</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.&lt;/p&gt;
&lt;h4 id=&quot;时间转换为字符串-格式化输出&quot;&gt;&lt;a href=&quot;#时间转换为字符串-格式化输出&quot; class=&quot;he
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="datetime" scheme="https://ttxsgoto.github.io/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>django Models</title>
    <link href="https://ttxsgoto.github.io/2017/04/05/django-models-basic/"/>
    <id>https://ttxsgoto.github.io/2017/04/05/django-models-basic/</id>
    <published>2017-04-05T12:07:24.000Z</published>
    <updated>2017-04-05T13:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">1、models.AutoField 自增列 = int(11)</div><div class="line">　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。</div><div class="line">2、models.CharField　　字符串字段</div><div class="line">　　必须 max_length 参数</div><div class="line">3、models.BooleanField　　布尔类型=tinyint(1)</div><div class="line">　　不能为空，Blank=True</div><div class="line">4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar</div><div class="line">　　继承CharField，所以必须 max_lenght 参数</div><div class="line">5、models.DateField　　日期类型 date</div><div class="line">　　对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。</div><div class="line">6、models.DateTimeField　　日期类型 datetime</div><div class="line">　　同DateField的参数</div><div class="line">7、models.Decimal　　十进制小数类型 = decimal</div><div class="line">　　必须指定整数位max_digits和小数位decimal_places</div><div class="line">8、models.EmailField　　字符串类型（正则表达式邮箱） =varchar</div><div class="line">　　对字符串进行正则表达式</div><div class="line">9、models.FloatField　　浮点类型 = double</div><div class="line">10、models.IntegerField　　整形</div><div class="line">11、models.BigIntegerField　　长整形</div><div class="line">　　integer_field_ranges = &#123;</div><div class="line">　　　　&apos;SmallIntegerField&apos;: (-32768, 32767),</div><div class="line">　　　　&apos;IntegerField&apos;: (-2147483648, 2147483647),</div><div class="line">　　　　&apos;BigIntegerField&apos;: (-9223372036854775808, 9223372036854775807),</div><div class="line">　　　　&apos;PositiveSmallIntegerField&apos;: (0, 32767),</div><div class="line">　　　　&apos;PositiveIntegerField&apos;: (0, 2147483647),</div><div class="line">　　&#125;</div><div class="line">12、models.IPAddressField　　字符串类型（ip4正则表达式）</div><div class="line">13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）</div><div class="line">　　参数protocol可以是：both、ipv4、ipv6</div><div class="line">　　验证时，会根据设置报错</div><div class="line">14、models.NullBooleanField　　允许为空的布尔类型</div><div class="line">15、models.PositiveIntegerFiel　　正Integer</div><div class="line">16、models.PositiveSmallIntegerField　　正smallInteger</div><div class="line">17、models.SlugField　　减号、下划线、字母、数字</div><div class="line">18、models.SmallIntegerField　　数字</div><div class="line">　　数据库中的字段有：tinyint、smallint、int、bigint</div><div class="line">19、models.TextField　　字符串=longtext</div><div class="line">20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]</div><div class="line">21、models.URLField　　字符串，地址正则表达式</div><div class="line">22、models.BinaryField　　二进制&lt;br&gt;23、models.ImageField   图片&lt;br&gt;24、models.FilePathField 文件</div><div class="line"> </div><div class="line">更多字段：</div><div class="line">1、null=True 数据库中字段是否可以为空,默认为False</div><div class="line">2、blank=True 表单验证允许该字段为空，如果为blank=False，表示该字段必填</div><div class="line">　　django的 Admin 中添加数据时是否可允许空值,True允许为空，False时，表示该字段为必填</div><div class="line">3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列</div><div class="line">4、auto_now 和 auto_now_add</div><div class="line">　　auto_now   自动创建---无论添加或修改，都是当前操作的时间</div><div class="line">　　auto_now_add  自动创建---永远是创建时的时间</div><div class="line">5、choices</div><div class="line">GENDER_CHOICE = (</div><div class="line">        (u&apos;M&apos;, u&apos;Male&apos;),</div><div class="line">        (u&apos;F&apos;, u&apos;Female&apos;),</div><div class="line">    )</div><div class="line">  如：gender = models.CharField(max_length=2,choices = GENDER_CHOICE)</div><div class="line">6、max_length</div><div class="line">7、default　　设置默认值</div><div class="line">8、verbose_name　　Admin中字段的显示名称，类似于设置别名</div><div class="line">9、name|db_column　　数据库中的字段名称</div><div class="line">10、unique=True　　不允许重复，整表唯一</div><div class="line">11、db_index = True　　数据库索引</div><div class="line">12、editable=True　　在Admin里是否可编辑</div><div class="line">13、error_messages=None　　错误提示</div><div class="line">14、auto_created=False　　自动创建</div><div class="line">15、help_text　　在Admin中提示帮助信息，即使字段不在表单中使用，它对生成文档也很用</div><div class="line">16、validators=[]</div><div class="line">17、upload-to</div><div class="line">18、db_table=&apos;xxx&apos; 重新设置表名称</div><div class="line">19、related_name=&apos;xxxx&apos;  是将外键中的 &quot;topping_set&quot; (取自 类 的名字), 设置为自定义的对象集描述符，一般用于当一个对象要被另一个对象关联不止一次时使用，这个参数才真正有用，如下：</div><div class="line">    models.ForeignKey(Category, related_name=&quot;primary_storys&quot;)</div><div class="line">    models.ForeignKey(Category, related_name=&quot;secondary_storys&quot;)</div><div class="line">20、related_query_name=&apos;xxxx&apos;    用于目标模型的反向过滤</div><div class="line"> </div><div class="line">元选项（非必须）</div><div class="line">class Meta:</div><div class="line">        verbose_name = u&apos;企业/组织&apos;          #别名</div><div class="line">        verbose_name_plural = u&apos;企业/组织&apos;   #复数别名</div><div class="line">        db_table = &apos;organs_organ&apos;          #数据库表名</div><div class="line">        ordering = (&apos;codename&apos;, )          #排序</div><div class="line">字段说明链接：</div><div class="line">http://python.usyiyi.cn/translate/django_182/ref/models/fields.html#common-model-field-options</div></pre></td></tr></table></figure>
<h4 id="数据库表关系"><a href="#数据库表关系" class="headerlink" title="数据库表关系"></a>数据库表关系</h4><ul>
<li>一对多，models.ForeignKey(A)<br>  当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）</li>
<li>一对一，models.OneToOneField(B)<br>  在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失）</li>
<li>多对多，authors = models.ManyToManyField(C)<br>  在某表中创建一行数据是，有一个可以多选的下拉框</li>
</ul>
<h4 id="模型的属性"><a href="#模型的属性" class="headerlink" title="模型的属性"></a>模型的属性</h4><p>objects 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问；也可以自定义方法；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line">    username = models.CharField(<span class="string">u'用户名'</span>, max_length=<span class="number">255</span>)</div><div class="line">    email = models.EmailField(<span class="string">u'Email'</span>)</div><div class="line">    is_active = models.BooleanField(<span class="string">u'是否激活'</span>, default=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    objects = UserManager()</div><div class="line"> </div><div class="line"><span class="comment"># managers.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span><span class="params">(Manager)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(BaseManager, self).__init__()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_staff</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">from</span> .models <span class="keyword">import</span> Staff</div><div class="line">        staff = Staff(**kwargs)</div><div class="line">        staff.save()</div><div class="line">        <span class="keyword">return</span> staff</div><div class="line"><span class="comment"># 调用</span></div><div class="line">User.objects.create_staff(**kwargs)</div></pre></td></tr></table></figure></p>
<h4 id="模型的方法"><a href="#模型的方法" class="headerlink" title="模型的方法"></a>模型的方法</h4><p>可以在模型上定义自定义的方法来给你的对象添加自定义的“底层”功能。Manager 方法用于“表范围”的事务，模型的方法应该着眼于特定的模型实例。</p>
<p>管理器方法可以通过self.model 来得到它所属的模型类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line">    username = models.CharField(<span class="string">u'用户名'</span>, max_length=<span class="number">255</span>)</div><div class="line">    email = models.EmailField(<span class="string">u'Email'</span>)</div><div class="line">    is_active = models.BooleanField(<span class="string">u'是否激活'</span>, default=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_true</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.is_active <span class="keyword">else</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line"><span class="comment"># views.py	仅仅为了说明，下面例子没有任何意义</span></div><div class="line">user = User.objects.get(id=id)</div><div class="line"><span class="keyword">if</span> user.is_true():</div><div class="line">    <span class="keyword">return</span> <span class="string">'right'</span></div></pre></td></tr></table></figure></p>
<h4 id="get-filter-区别"><a href="#get-filter-区别" class="headerlink" title="get()/filter()区别"></a>get()/filter()区别</h4><ul>
<li>models.objects.get() 获取到的是一个对象，如果没有抛出DoesNotExist异常；</li>
<li>get()得到的对象，更新需要obj.name=name, obj.save()</li>
<li>models.objects.filter()数据过滤，得到是一个查询集-对象列表，如果没有返回[]</li>
<li>filter()得到的对象，更新时直接models.objects.filter().update()</li>
</ul>
<h4 id="model-object-create-model-save-区别"><a href="#model-object-create-model-save-区别" class="headerlink" title="model.object.create()/model.save()区别"></a>model.object.create()/model.save()区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Account.objects.create(**kwargs) <span class="comment">#调用save()方法，保存到数据库，返回实例object</span></div><div class="line">Account(**kwargs)    		 <span class="comment">#为类对象，没有调用save()方法，没有保存到数据库，直到调用save()方法将数据保存</span></div></pre></td></tr></table></figure>
<h4 id="模型继承"><a href="#模型继承" class="headerlink" title="模型继承"></a>模型继承</h4><h5 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h5><p>只想使用父类来持有一些信息，不想在每个子模型中都定义一次，这个类永远不会单独使用<br>编写完基类之后，在 Meta类中设置 abstract=True ，该类就不能创建任何数据表，如果抽象化基础类和它的子类有相同的项，那么将会出现error（并且Django将返回一个exception），例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(models.Model)</span>:</span></div><div class="line">    created_time = models.DateTimeField(<span class="string">u'创建时间'</span>, auto_now_add=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        abstract = <span class="keyword">True</span></div><div class="line">        ordering = [<span class="string">'-created_time'</span>]</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span><span class="params">(BaseModel)</span>:</span></div><div class="line">    name = models.CharField(<span class="string">u'部门名称'</span>, max_length=<span class="number">100</span>, default=<span class="string">''</span>)</div><div class="line">    contact = models.CharField(<span class="string">u'联系电话'</span>, max_length=<span class="number">20</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    desc = models.TextField(<span class="string">u'描述'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">u'部门'</span></div><div class="line">        verbose_name_plural = <span class="string">u'部门'</span></div><div class="line">        db_table = <span class="string">'department'</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">u'%s'</span> % self.name</div></pre></td></tr></table></figure></p>
<p>在 ForeignKey或 ManyToManyField字段上使用 related_name属性，你必须总是为该字段指定一个唯一的反向名称</p>
<h5 id="多表继承"><a href="#多表继承" class="headerlink" title="多表继承"></a>多表继承</h5><p>继承一个已经存在的模型且想让每个模型具有它自己的数据库表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">50</span>)</div><div class="line">    address = models.CharField(max_length=<span class="number">80</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></div><div class="line">    serves_hot_dogs = models.BooleanField(default=<span class="keyword">False</span>)</div><div class="line">    serves_pizza = models.BooleanField(default=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
<h5 id="代理继承"><a href="#代理继承" class="headerlink" title="代理继承"></a>代理继承</h5><p>只是想改变模块Python 级别的行为，而不用修改模型的字段,更改默认的manager，或者添加一个新的方法；为原始模型创建一个代理，你可以创建，删除，更新代理 model 的实例，而且所有的数据都可以像使用原始 model 一样被保存<br>不同之处在于：你可以在代理 model 中改变默认的排序设置和默认的 manager ，更不会对原始 model 产生影响<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        proxy = <span class="keyword">True</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedPerson</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        ordering = [<span class="string">"last_name"</span>]</div><div class="line">        proxy = <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h4 id="多对多表结构中添加字段"><a href="#多对多表结构中添加字段" class="headerlink" title="多对多表结构中添加字段"></a>多对多表结构中添加字段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">128</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">128</span>)</div><div class="line">    members = models.ManyToManyField(Person, through=<span class="string">'Membership'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span><span class="params">(models.Model)</span>:</span></div><div class="line">    person = models.ForeignKey(Person)</div><div class="line">    group = models.ForeignKey(Group)</div><div class="line">    date_joined = models.DateField()</div><div class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ringo = Person.objects.create(name=<span class="string">"Ringo Starr"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>paul = Person.objects.create(name=<span class="string">"Paul McCartney"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles = Group.objects.create(name=<span class="string">"The Beatles"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m1 = Membership(person=ringo, group=beatles,</div><div class="line"><span class="meta">... </span>    date_joined=date(<span class="number">1962</span>, <span class="number">8</span>, <span class="number">16</span>),</div><div class="line"><span class="meta">... </span>    invite_reason=<span class="string">"Needed a new drummer."</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m1.save()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles.members.all()</div><div class="line">[&lt;Person: Ringo Starr&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ringo.group_set.all()</div><div class="line">[&lt;Group: The Beatles&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m2 = Membership.objects.create(person=paul, group=beatles,</div><div class="line"><span class="meta">... </span>    date_joined=date(<span class="number">1960</span>, <span class="number">8</span>, <span class="number">1</span>),</div><div class="line"><span class="meta">... </span>    invite_reason=<span class="string">"Wanted to form a band."</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles.members.all()</div><div class="line">[&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]</div></pre></td></tr></table></figure>
<h4 id="关联对象查询"><a href="#关联对象查询" class="headerlink" title="关联对象查询"></a>关联对象查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">100</span>)</div><div class="line">    tagline = models.TextField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">50</span>)</div><div class="line">    email = models.EmailField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></div><div class="line">    blog = models.ForeignKey(Blog)</div><div class="line">    headline = models.CharField(max_length=<span class="number">255</span>)</div><div class="line">    body_text = models.TextField()</div><div class="line">    pub_date = models.DateField()</div><div class="line">    mod_date = models.DateField()</div><div class="line">    authors = models.ManyToManyField(Author)</div><div class="line">    n_comments = models.IntegerField()</div><div class="line">    n_pingbacks = models.IntegerField()</div><div class="line">    rating = models.IntegerField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.headline</div></pre></td></tr></table></figure>
<h5 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h5><p>正向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e.blog <span class="comment"># Returns the related Blog object.</span></div></pre></td></tr></table></figure></p>
<p>反向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 管理器的名字为entry_set,其中entry为源模型的小写名称，当然这个名称也可以自定义，通过在ForeignKey 定义时设置related_name 参数来覆盖foo_set 的名称。例如，如果Entry 模型改成blog = ForeignKey(Blog, related_name='entries')，相对于的管理器也应该为entries</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = Blog.objects.get(id=<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.all() <span class="comment"># Returns all Entry objects related to Blog.</span></div><div class="line"></div><div class="line"><span class="comment"># b.entry_set is a Manager that returns QuerySets.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.filter(headline__contains=<span class="string">'Lennon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.count()</div></pre></td></tr></table></figure></p>
<h5 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h5><p>多对多关系的两端都会自动获得访问另一端的API。这些API 的工作方式与一对多关系一样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">e = Entry.objects.get(id=<span class="number">3</span>)</div><div class="line">e.authors.all() <span class="comment"># Returns all Author objects for this Entry.</span></div><div class="line">e.authors.count()</div><div class="line">e.authors.filter(name__contains=<span class="string">'John'</span>)</div><div class="line"> </div><div class="line">a = Author.objects.get(id=<span class="number">5</span>)</div><div class="line">a.entry_set.all() <span class="comment"># Returns all Entry objects for this Author.</span></div></pre></td></tr></table></figure></p>
<h5 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h5><p>正向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryDetail</span><span class="params">(models.Model)</span>:</span></div><div class="line">    entry = models.OneToOneField(Entry)</div><div class="line">    details = models.TextField()</div><div class="line"> </div><div class="line">ed = EntryDetail.objects.get(id=<span class="number">2</span>)</div><div class="line">ed.entry <span class="comment"># Returns the related Entry object.</span></div></pre></td></tr></table></figure></p>
<p>反向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一对一关系中的关联模型同样具有一个管理器对象，但是该管理器表示一个单一的对象而不是对象的集合；如果没有对象赋值给这个关联关系，Django 将引发一个DoesNotExist 异常；</span></div><div class="line">e = Entry.objects.get(id=<span class="number">2</span>)</div><div class="line">e.entrydetail <span class="comment"># returns the related EntryDetail object</span></div></pre></td></tr></table></figure></p>
<h4 id="select-for-update"><a href="#select-for-update" class="headerlink" title="select_for_update()"></a>select_for_update()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用于事务，返回一个for update 锁</div><div class="line">Returns a new QuerySet instance that will select objects with a FOR UPDATE lock.</div><div class="line">因QuerySet的延迟查询特性, copy一份用于update, 以便于不影响初始查询的candidates集</div></pre></td></tr></table></figure>
<h4 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h4><p>使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">objList = [a, b, c,] <span class="comment">#none are saved</span></div><div class="line">objList = model(record=record, receiver=receiver) <span class="comment"># 上述两种格式都是批量创建对象的数据格式</span></div><div class="line">model.objects.bulk_create(objList)</div></pre></td></tr></table></figure></p>
<h4 id="执行原始sql"><a href="#执行原始sql" class="headerlink" title="执行原始sql"></a>执行原始sql</h4><p>在模型查询API不够用的情况下，你可以使用原始的SQL语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.objects.raw(<span class="string">'SELECT id, first_name, last_name, birth_date FROM myapp_person'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;字段&quot;&gt;&lt;a href=&quot;#字段&quot; class=&quot;headerlink&quot; title=&quot;字段&quot;&gt;&lt;/a&gt;字段&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="models" scheme="https://ttxsgoto.github.io/tags/models/"/>
    
  </entry>
  
  <entry>
    <title>re模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/30/re/"/>
    <id>https://ttxsgoto.github.io/2017/03/30/re/</id>
    <published>2017-03-30T13:18:15.000Z</published>
    <updated>2017-03-30T13:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；</p>
<h4 id="匹配使用函数"><a href="#匹配使用函数" class="headerlink" title="匹配使用函数"></a>匹配使用函数</h4><ul>
<li>re.match(pattern, string[, flags]):从第一个字符开始匹配,匹配成功就返回,不关心后面的内容;</li>
<li>re.search(pattern, string[, flags]):扫描整个string查找匹配,匹配成功就返回,不关心后面的内容;</li>
<li>re.split(pattern, string[, maxsplit]):按能够匹配的子串将string分割后返回列表;</li>
<li>re.findall(pattern, string[, flags]):搜索string，以列表形式返回全部能匹配的子串;</li>
<li>re.finditer(pattern, string[, flags]):搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器;</li>
<li>re.sub(pattern, repl, string[, count]):使用repl替换string中每一个匹配的子串后返回替换后的字符串;</li>
<li>re.subn(pattern, repl, string[, count]):返回 (sub(repl, string[, count]), 替换次数);</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="string">'''</span></div><div class="line">    Describe:</div><div class="line">    re.compile(string[,flag])   #返回pattern对象</div><div class="line">    pattern = re.compile(r'hello')</div><div class="line">    flag参数是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M</div><div class="line">    re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）</div><div class="line">    re.M(全拼：MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）</div><div class="line">    re.S(全拼：DOTALL): 点任意匹配模式，改变'.'的行为</div><div class="line">    re.L(全拼：LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</div><div class="line">    re.U(全拼：UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</div><div class="line">    re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.match(pattern, string[, flags])</div><div class="line">    这个方法将会从string（我们要匹配的字符串）的开头开始，</div><div class="line">    尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，</div><div class="line">    立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。</div><div class="line">    两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止,不再对string向后匹配。</div><div class="line">    :return:</div><div class="line">    从第一个字符开始匹配,一旦匹配成功就返回,不关心后面的内容</div><div class="line">    ============match属性和方法==============</div><div class="line">    # 属性</div><div class="line">    1.string: 匹配时使用的文本。</div><div class="line">    2.re: 匹配时使用的Pattern对象。</div><div class="line">    3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class="line">    4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class="line">    5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</div><div class="line">    6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</div><div class="line"> </div><div class="line">    # 方法</div><div class="line">    1.group([group1, …]):获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</div><div class="line">    2.groups([default]):以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</div><div class="line">    3.groupdict([default]):返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</div><div class="line">    4.start([group]):返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</div><div class="line">    5.end([group]):返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</div><div class="line">    6.span([group]):返回(start(group), end(group))。</div><div class="line">    7.expand(template):将匹配到的分组代入template中然后返回。template中可以使用\id或\g、\g引用分组，但不能使用编号0。\id与\g是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g0。</div><div class="line">    """</div><div class="line"> </div><div class="line">    pattern = re.compile(<span class="string">r'hello'</span>)  <span class="comment">#把正则表达式编译成一个正则表达式对象,再使用</span></div><div class="line">    result1 = re.match(pattern, <span class="string">'hello'</span>)</div><div class="line">    result2 = re.match(pattern, <span class="string">'hello0 xxx'</span>)</div><div class="line">    result3 = re.match(pattern, <span class="string">'heloo xxx'</span>)</div><div class="line">    result4 = re.match(pattern, <span class="string">'hello xxx'</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">print</span> result1,result2,result3,result4   <span class="comment">#re对象，&lt;_sre.SRE_Match object at 0x1053d55e0&gt; &lt;_sre.SRE_Match object at 0x1053ba098&gt; None &lt;_sre.SRE_Match object at 0x1053ba100&gt;</span></div><div class="line">    <span class="keyword">if</span> result1:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result1.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result1 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result2:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result2.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result2 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result3:					<span class="comment">#result3 faild</span></div><div class="line">        <span class="keyword">print</span> result3.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result3 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result4:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result4.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result4 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">print</span> <span class="string">'======================================='</span></div><div class="line">    m = re.match(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, <span class="string">'hello world!!!'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'m.string:'</span>, m.string                             <span class="comment">#m.string: hello world!!!</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.re:'</span>, m.re                                     <span class="comment">#m.re: &lt;_sre.SRE_Pattern object at 0x103d62690&gt;</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.pos'</span>, m.pos                                    <span class="comment">#m.pos 0</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.endpos'</span>, m.endpos                              <span class="comment">#m.endpos 14</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.lastindex:'</span>, m.lastindex                       <span class="comment">#m.lastindex: 3</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.lastgroup:'</span>, m.lastgroup                       <span class="comment">#m.lastgroup: sign</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.group():'</span>, m.group()                           <span class="comment">#m.group(): hello world!!!</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.group(1,2):'</span>, m.group(<span class="number">1</span>,<span class="number">2</span>)                     <span class="comment">#m.group(1,2): ('hello', 'world')</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.groups():'</span>, m.groups()                         <span class="comment">#m.groups(): ('hello', 'world', '!!!')</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.groupdict()'</span>, m.groupdict()                    <span class="comment">#m.groupdict() &#123;'sign': '!!!'&#125;</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.start(2):'</span>, m.start(<span class="number">2</span>)                         <span class="comment">#m.start(2): 6</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.end(2):'</span>, m.end(<span class="number">2</span>)                             <span class="comment">#m.end(2): 11</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.span(2):'</span>, m.span(<span class="number">2</span>)                           <span class="comment">#m.span(2): (6, 11)</span></div><div class="line">    <span class="keyword">print</span> <span class="string">r"m.expand(r'\g \g\g'):"</span>, m.expand(<span class="string">r'\2 \1\3'</span>)    <span class="comment">#m.expand(r'\g \g\g'): world hello!!!</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.search(pattern, string[, flags])</div><div class="line">    search()会扫描整个string查找匹配;</div><div class="line">    match（）只有在0位置匹配成功的话才有返回，</div><div class="line">    如果不是开始位置匹配成功的话，match()就返回None。</div><div class="line">    search方法的返回对象同样match()返回对象的方法和属性</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'world'</span>)</div><div class="line">    match = re.search(pattern, <span class="string">'hello world!!!! world'</span>)</div><div class="line">    <span class="keyword">if</span> match:</div><div class="line">        <span class="comment"># 使用Match获得分组信息</span></div><div class="line">        <span class="keyword">print</span> match.group()     <span class="comment">#world</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.split(pattern, string[, maxsplit])</div><div class="line">    按照能够匹配的子串将string分割后返回列表。</div><div class="line">    maxsplit用于指定最大分割次数，不指定将全部分割</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">print</span> re.split(pattern, <span class="string">'xxxx1wsd2dsafds4dafd8'</span>,maxsplit=<span class="number">10</span>)    <span class="comment">#['xxxx', 'wsd', 'dsafds', 'dafd', '']</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findall</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.findall(pattern, string[, flags])</div><div class="line">    搜索string，以列表形式返回全部能匹配的子串</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">print</span> re.findall(pattern, <span class="string">'xxxx1wsd2dsafds4dafd8'</span>,)     <span class="comment">#['1', '2', '4', '8']</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">finditer</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.finditer(pattern, string[, flags])</div><div class="line">    搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(pattern, <span class="string">'one1two2three3four4'</span>):</div><div class="line">        <span class="keyword">print</span> m.group(),    <span class="comment">#1 2 3 4</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.sub(pattern, repl, string[, count])</div><div class="line">    使用repl替换string中每一个匹配的子串后返回替换后的字符串</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'(\w+)-(\w+)'</span>)</div><div class="line">    s = <span class="string">'I-can, hello world!'</span></div><div class="line">    <span class="keyword">print</span> re.sub(pattern,<span class="string">r'\2 \1'</span>, s)   <span class="comment">#can I, hello world!</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subn</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.subn(pattern, repl, string[, count])</div><div class="line">    返回 (sub(repl, string[, count]), 替换次数)</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'(\w+)-(\w+)'</span>)</div><div class="line">    s = <span class="string">'I-can, hello-world!'</span></div><div class="line">    <span class="keyword">print</span> re.subn(pattern, <span class="string">r'\2 \1'</span>, s)     <span class="comment">#('can I, world hello!', 2)</span></div><div class="line"> </div><div class="line"> </div><div class="line">match()</div><div class="line">search()</div><div class="line">split()</div><div class="line">findall()</div><div class="line">finditer()</div><div class="line">sub()</div><div class="line">subn()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；&lt;/p&gt;
&lt;h4 id=&quot;匹配使用函数&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="re" scheme="https://ttxsgoto.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Tmux日常</title>
    <link href="https://ttxsgoto.github.io/2017/03/29/tmux/"/>
    <id>https://ttxsgoto.github.io/2017/03/29/tmux/</id>
    <published>2017-03-29T13:06:09.000Z</published>
    <updated>2017-03-30T13:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Mac中</div><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class="line">brew install tmux</div><div class="line"># Ubuntu中</div><div class="line">apt-get install tmux</div></pre></td></tr></table></figure>
<p>Session可以包含多个Window, 每个Window又可以包含多个Pane</p>
<h4 id="Session操作"><a href="#Session操作" class="headerlink" title="Session操作"></a>Session操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tmux new -s xxx #新建session会话</div><div class="line">C-b : new -s abc # 在当前session中新建一个session，并保证之前session依然存在</div><div class="line">tmux a -t xxx #进入xxx会话</div><div class="line">C-b ? #列出所有快捷键，按q返回</div><div class="line">C-b d #当前会话，返回shell；tmux attach 重新进入之前的会话</div><div class="line">C-b s #选择并切换会话，在开启多个会话时使用</div></pre></td></tr></table></figure>
<h4 id="Window操作"><a href="#Window操作" class="headerlink" title="Window操作"></a>Window操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C-b c 创建一个新窗口</div><div class="line">C-b &amp; 关闭当前窗口</div><div class="line">C-b w 列出所有的窗口选择</div><div class="line">C-b 窗口号(例如窗口号为1的, 则C-b 1)</div><div class="line">C-b , 重命名当前窗口，便于识别各个窗口</div></pre></td></tr></table></figure>
<h4 id="Pane操作"><a href="#Pane操作" class="headerlink" title="Pane操作"></a>Pane操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C-b % 横向分Terminal</div><div class="line">C-b &quot; 纵向分Terminal</div><div class="line">C-b 方向键 在自由选择各面板</div><div class="line">C-b x 关闭当前pane</div><div class="line">C-b q 显示面板编号</div></pre></td></tr></table></figure>
<h4 id="配置文件-tmux-conf"><a href="#配置文件-tmux-conf" class="headerlink" title="配置文件(~/.tmux.conf)"></a>配置文件(~/.tmux.conf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">#设置前缀为Ctrl + a</div><div class="line">set -g prefix C-a</div><div class="line"> </div><div class="line">#解除Ctrl+b 与前缀的对应关系</div><div class="line">unbind C-b</div><div class="line"> </div><div class="line">#将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息</div><div class="line">bind r source-file ~/.tmux.conf \; display &quot;~/.tmux Reloaded!&quot;</div><div class="line"> </div><div class="line">#window 水平分割和纵向分割</div><div class="line">bind | split-window -h -c</div><div class="line">bind - split-window -v -c</div><div class="line"> </div><div class="line">#方向移动设置</div><div class="line">#up</div><div class="line">bind -n C-k select-pane -U</div><div class="line">#down</div><div class="line">bind -n C-j select-pane -D</div><div class="line">#left</div><div class="line">bind -n C-h select-pane -L</div><div class="line">#right</div><div class="line">bind -n C-l select-pane -R</div><div class="line"> </div><div class="line">#设置鼠标操作</div><div class="line">#set -g mouse on</div><div class="line"> </div><div class="line"># 设置终端类型为256色</div><div class="line">#set -g default-terminal &quot;screen-256color&quot;</div><div class="line"> </div><div class="line"># 设置窗口分割的边框颜色</div><div class="line">set -g pane-border-fg green</div><div class="line">set -g pane-border-bg black</div><div class="line"> </div><div class="line"># 设置当前窗口分割的边框颜色</div><div class="line">#set -g pane-active-border-fg white</div><div class="line">#set -g pane-active-border-bg yellow</div><div class="line"> </div><div class="line">set -g status-bg colour236</div><div class="line">set -g status-fg colour68</div><div class="line"> </div><div class="line">#copy-mode 将快捷键设置为vi 模式</div><div class="line">setw -g mode-keys vi</div><div class="line"> </div><div class="line"># 设置状态栏左部宽度  默认为10</div><div class="line">set -g status-left-length 35</div><div class="line"># 设置状态栏左部显示内容。</div><div class="line">set -g status-left &quot;#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]&quot;</div><div class="line"># 设置状态栏右部宽度</div><div class="line">set -g status-right-length 48</div><div class="line"># 设置状态栏右部内容，这里设置为时间信息</div><div class="line">set -g status-right &quot;#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep &apos;inet.*netmask.*broadcast&apos; | awk &apos;&#123;print $2&#125;&apos;)&quot;</div><div class="line"># 窗口信息居中显示</div><div class="line">set -g status-justify centre</div><div class="line"># 设置状态栏更新时间 每60秒更新一次，默认是15秒更新</div><div class="line">set -g status-interval 60</div></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf" target="_blank" rel="external">https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf</a><br><a href="https://github.com/wklken/k-tmux/blob/master/tmux.conf" target="_blank" rel="external">https://github.com/wklken/k-tmux/blob/master/tmux.conf</a><br><a href="https://my.oschina.net/am313/blog/865915" target="_blank" rel="external">https://my.oschina.net/am313/blog/865915</a><br><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="external">https://gist.github.com/ryerh/14b7c24dfd623ef8edc7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="tmux" scheme="https://ttxsgoto.github.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>django测试</title>
    <link href="https://ttxsgoto.github.io/2017/03/28/django-test/"/>
    <id>https://ttxsgoto.github.io/2017/03/28/django-test/</id>
    <published>2017-03-28T12:55:48.000Z</published>
    <updated>2017-03-28T13:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Python单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：</p>
<p><img src="https://ttxsgoto.github.io/img/django/django_test01.png" alt=""></p>
<p><strong>SimpleTestCase</strong>:扩展了unittest.TestCase的一些基本功能</p>
<ul>
<li>保存和恢复python警告机制状态</li>
<li>使用client Client</li>
<li>自定义测试时间URL maps</li>
<li>使用modified settings运行测试的能力</li>
</ul>
<p><strong>TransactionTestCase</strong>:事务测试类，继承SimpleTestCase</p>
<p><strong>TestCase</strong>:用来测试网站正常转换unittest.TestCase到Django TestCase</p>
<ul>
<li>自动加载fixtures</li>
<li>将测试包含在两个嵌套的atomic块中：一个用于整个类，一个用于每个测试</li>
<li>创建一个TestClient实例</li>
<li>Django特定的断言用于测试重定向和形式错误</li>
</ul>
<p><strong>LiveServerTestCase</strong>:基本上与TransactionTestCase相同，具有一个额外的功能：它在设置的后台启动一个活动的Django服务器，并在卸载时将其关闭</p>
<h4 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h4><ul>
<li>setUp():每个测试函数运行前执行</li>
<li>tearDown():每个测试函数运行完成后执行</li>
<li>setUpClass(cls):必须使用@classmethod装饰器，所有test函数运行前执行一次</li>
<li>tearDownClass(cls):必须使用@classmethod装饰器，所有test函数运行完成后执行一次</li>
</ul>
<p><strong>默认测试客户端</strong><br>django.test.*TestCase实例中的每个测试用例都可以访问Django测试客户端的实例。此客户端可以作为self.client访问。每个测试都重新创建此客户端，因此您不必担心从一个测试到另一个测试的状态（例如Cookie）<br>实例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> Client</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_details</span><span class="params">(self)</span>:</span></div><div class="line">        client = Client()</div><div class="line">        response = client.get(<span class="string">'/customer/details/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index</span><span class="params">(self)</span>:</span></div><div class="line">        client = Client()</div><div class="line">        response = client.get(<span class="string">'/customer/index/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line"> </div><div class="line"><span class="comment">################等同于如下################</span></div><div class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_details</span><span class="params">(self)</span>:</span></div><div class="line">        response = self.client.get(<span class="string">'/customer/details/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index</span><span class="params">(self)</span>:</span></div><div class="line">        response = self.client.get(<span class="string">'/customer/index/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div></pre></td></tr></table></figure></p>
<h4 id="测试客户端"><a href="#测试客户端" class="headerlink" title="测试客户端"></a>测试客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from django.test import Client</div><div class="line">&gt;&gt;&gt; c = Client()</div><div class="line">&gt;&gt;&gt; response = c.post(&apos;/login/&apos;, &#123;&apos;username&apos;: &apos;john&apos;, &apos;password&apos;: &apos;smith&apos;&#125;)</div><div class="line">&gt;&gt;&gt; response.status_code</div><div class="line">200</div><div class="line">&gt;&gt;&gt; response = c.get(&apos;/customer/details/&apos;)</div><div class="line">&gt;&gt;&gt; response.content    # 返回数据主体</div></pre></td></tr></table></figure>
<h4 id="测试响应属性"><a href="#测试响应属性" class="headerlink" title="测试响应属性"></a>测试响应属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- client:用于生成导致响应的请求的测试客户端</div><div class="line">- content:响应的主体</div><div class="line">- context:用于呈现产生响应内容的模板的模板Context实例</div><div class="line">- request:响应的请求数据</div><div class="line">- wsgi_request:由生成响应的测试处理程序生成的WSGIRequest实例</div><div class="line">- status_code:响应http状态码</div><div class="line">- templates:用于渲染最终内容的Template实例列表，按渲染顺序排列</div><div class="line">- resolver_match:响应的实例ResolverMatch</div></pre></td></tr></table></figure>
<h4 id="常用断言（runtests-case-py）"><a href="#常用断言（runtests-case-py）" class="headerlink" title="常用断言（runtests/case.py）"></a>常用断言（runtests/case.py）</h4><ul>
<li>self.assertEqual(first, second)</li>
<li>self.assertNotEqual(first, second)</li>
<li>self.assertFalse(expr)</li>
<li>self.assertTrue(expr)</li>
<li>self.assertEqual(first, second)</li>
<li>self.assertNotEqual(first, second)</li>
<li>self.assertSequenceEqual(seq1, seq2)</li>
<li>self.assertListEqual(list1, list2):</li>
<li>self.assertTupleEqual(tuple1, tuple2):</li>
<li>self.assertDictEqual(dic1, dic2):</li>
<li>self.assertSetEqual(set1, set2):</li>
<li>self.assertIn(mem, container):</li>
<li>self.assertIs(expr1, expr2)</li>
<li>self.assertIsNotNone(obj):</li>
<li>self.assertIsNone(obj)</li>
<li>self.assertIsInstance(obj, cls)</li>
</ul>
<h4 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h4><p>unittest库提供@skipIf和@skipUnless装饰器，如果提前知道这些测试在某些条件下会失败，可以跳过测试</p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manage.py test runtests.test_user</div><div class="line">python manage.py test xxx.test		#执行xxx项目下的testx里的测试</div><div class="line">python manage.py test animals.tests.AnimalTestCase	#单独执行某个test case</div></pre></td></tr></table></figure>
<h4 id="测试数据库"><a href="#测试数据库" class="headerlink" title="测试数据库"></a>测试数据库</h4><p>测试需要数据库，django会为测试单独生成数据库。不管你的测试是否通过,当你所有的测试都执行过后,这个测试数据库就会被销毁</p>
<p>默认情况下,测试数据库的名字是test_DATABASE_NAME,DATABASE_NAME是你在settings.py里配置的数据库名.如果 你需要给测试数据库一个其他的名字,在settings.py中指定TEST_DATABASE_NAME的值。使用sqlite3时，数据库是在内存中创建的</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://docs.djangoproject.com/en/1.10/topics/testing/tools/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.10/topics/testing/tools/</a><br><a href="http://python.usyiyi.cn/django/topics/testing/tools.html" target="_blank" rel="external">http://python.usyiyi.cn/django/topics/testing/tools.html</a><br><a href="http://www.cnblogs.com/linxiyue/p/3886035.html" target="_blank" rel="external">http://www.cnblogs.com/linxiyue/p/3886035.html</a><br><a href="http://www.weiguda.com/blog/31/" target="_blank" rel="external">http://www.weiguda.com/blog/31/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;Python单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ht
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="TestCase" scheme="https://ttxsgoto.github.io/tags/TestCase/"/>
    
      <category term="unittest" scheme="https://ttxsgoto.github.io/tags/unittest/"/>
    
  </entry>
  
  <entry>
    <title>API接口认证</title>
    <link href="https://ttxsgoto.github.io/2017/03/27/API-auth/"/>
    <id>https://ttxsgoto.github.io/2017/03/27/API-auth/</id>
    <published>2017-03-27T14:09:52.000Z</published>
    <updated>2017-03-27T14:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>之前写过一篇文章<a href="https://ttxsgoto.github.io/2017/03/26/API/">《简单API的实现》</a>，这篇文章说明了通过api方式把数据传递给服务端处理，但这过程中没有认证功能，无论谁发任何内容，都一并接收，这样明显存在不安全性，这篇文章在原来的基础上，添加了接口认证功能。</p>
<h4 id="接口认证方式"><a href="#接口认证方式" class="headerlink" title="接口认证方式"></a>接口认证方式</h4><p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">客户端：</div><div class="line">    - 通过定义密钥</div><div class="line">    - 将密钥加密发送给服务端</div><div class="line">服务端：</div><div class="line">    - 服务端定义相同的密钥</div><div class="line">    - 通过相同的加密算法，得到一个值</div><div class="line">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比</div><div class="line">缺点：</div><div class="line">    - 密钥固定不变，加密后的值固定不变，易暴露，安全性低</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">客户端：</div><div class="line">    - 通过定义密钥</div><div class="line">    - 将秘钥和当前时间戳一起加密，得到一个值</div><div class="line">    - 将加密后密钥和时间戳一起发送给服务端</div><div class="line">服务端：</div><div class="line">    - 服务端定义相同的密钥</div><div class="line">    - 将当前服务器端时间和发送过来的客户端时间进行对比，设置可接受的时间范围如：120s；如果服务器当前时间-发送过来的客户端&gt;120s ，即返回false</div><div class="line">    - 将服务端的密钥和客户端时间进行相同的加密算法，得到一个值</div><div class="line">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比，是否一致</div><div class="line">优点：</div><div class="line">    - 加密后的密钥每次不同，不易破解</div><div class="line">    - 设置有效时长，增加安全性</div><div class="line">缺点：</div><div class="line">    - 客户端时间和服务端时间不能相差太大，如太大造成认证失败，不易排查问题，最好使用同一时钟服务器进行同步</div></pre></td></tr></table></figure></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>客户端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> platform</div><div class="line"><span class="keyword">import</span> psutil</div><div class="line"><span class="keyword">import</span> urllib,urllib2</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</div><div class="line">  </div><div class="line">sys_info=&#123;&#125;</div><div class="line">sys_info[<span class="string">'system'</span>] = [] </div><div class="line">sys_info[<span class="string">'cpu'</span>] = []</div><div class="line">sys_info[<span class="string">'mem'</span>] = [] </div><div class="line">sys_info[<span class="string">'disk'</span>] = []</div><div class="line">sys_info[<span class="string">'wip'</span>] = []</div><div class="line">sys_info[<span class="string">'apikey'</span>] = []</div><div class="line">  </div><div class="line"><span class="comment">#系统信息</span></div><div class="line">system=sys_info[<span class="string">'system'</span>].append(platform.uname()[<span class="number">0</span>])</div><div class="line">  </div><div class="line"><span class="comment">#cpu个数</span></div><div class="line">cpu_count=sys_info[<span class="string">'cpu'</span>].append(cpu_count())</div><div class="line">  </div><div class="line"><span class="comment">#内存</span></div><div class="line">mem = psutil.virtual_memory()</div><div class="line">mem_info = sys_info[<span class="string">'mem'</span>].append(mem.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line">  </div><div class="line"><span class="comment">#磁盘空间</span></div><div class="line">sdiskusage = psutil.disk_usage(<span class="string">'/'</span>)</div><div class="line">disk_info =sys_info[<span class="string">'disk'</span>].append(sdiskusage.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line">  </div><div class="line"><span class="comment">#外网ip</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_ip</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">"http://ip.cip.cc"</span></div><div class="line">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class="line">    <span class="keyword">return</span>  wip</div><div class="line">sys_info[<span class="string">'wip'</span>].append(pub_ip())</div><div class="line"> </div><div class="line"><span class="comment">#认证密钥</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Api_key</span><span class="params">()</span>:</span></div><div class="line">    client_key = <span class="string">"ddfd-grgf-dsgf-dgfd"</span>    <span class="comment">#客户端定义的key</span></div><div class="line">    hash_obj = hashlib.md5()     <span class="comment">#使用md5加密，也可以使用sha256</span></div><div class="line">    time_span = time.time()</div><div class="line">    hash_obj.update(<span class="string">"%s|%f"</span> %(client_key,time_span))    <span class="comment">#更新消息，这个update整个文件</span></div><div class="line">    encryption = hash_obj.hexdigest()    <span class="comment">#计算消息摘要</span></div><div class="line">    result = <span class="string">"%s|%f"</span> %(encryption,time_span)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">sys_info[<span class="string">'apikey'</span>].append(Api_key())</div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> json.dumps(sys_info,indent=<span class="number">4</span>,ensure_ascii=<span class="keyword">False</span>)</div><div class="line">    data = urllib.urlencode(query=sys_info)</div><div class="line">    <span class="keyword">print</span> data</div><div class="line">    respose = urllib.urlopen(url=<span class="string">"http://127.0.0.1:8090/serveradd/"</span>, data=data)</div></pre></td></tr></table></figure>
<ul>
<li>服务端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">############### urls.py ################</span></div><div class="line">url(<span class="string">r'^serveradd/$'</span>,<span class="string">'app.views.serveradd'</span>),</div><div class="line"> </div><div class="line"><span class="comment">############### views.py ################</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_valid</span><span class="params">(data)</span>:</span></div><div class="line">    <span class="keyword">import</span> time,hashlib</div><div class="line">    server_key = <span class="string">"ddfd-grgf-dsgf-dgfd"</span>    <span class="comment">#服务端定义的key，也可定义在其他位置</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        encryption , time_span = data.split(<span class="string">"|"</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"-------&gt;"</span> ,encryption</div><div class="line">        <span class="keyword">print</span> <span class="string">"-------&gt;"</span> ,time_span</div><div class="line">        time_span = float(time_span)</div><div class="line">        <span class="comment">#time.sleep(6)    #模拟认证超时时间</span></div><div class="line">        now_time = time.time()</div><div class="line">        <span class="keyword">if</span> (now_time - time_span) &gt; <span class="number">5</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"超时，认证失败"</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        hash_obj = hashlib.md5()    <span class="comment">#使用md5加密</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"hash_obj------------"</span>,hash_obj</div><div class="line">         </div><div class="line">        hash_obj.update(<span class="string">"%s|%f"</span> %(server_key,time_span))     <span class="comment">#更新消息，这个update整个文件</span></div><div class="line">        <span class="keyword">print</span> hash_obj.hexdigest()    <span class="comment">#计算消息摘要</span></div><div class="line">        <span class="keyword">if</span> hash_obj.hexdigest() == encryption:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"客户端和服务端密钥不一致，认证失败."</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">except</span> Exception,e:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_auth</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(req)</span>:</span></div><div class="line">        request_dict = req.POST</div><div class="line">        api_key = request_dict.get(<span class="string">'apikey'</span>)</div><div class="line">        api_key = api_key[<span class="number">2</span>:<span class="number">-2</span>]</div><div class="line">        <span class="keyword">print</span> api_key</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> api_key:</div><div class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"Unauthorized."</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> api_valid(api_key):</div><div class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"Unauthorized."</span>)</div><div class="line">        <span class="keyword">return</span> func(req)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"> </div><div class="line"><span class="meta">@api_auth</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveradd</span><span class="params">(req)</span>:</span></div><div class="line">    <span class="keyword">if</span> req.method == <span class="string">'GET'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"GET method"</span></div><div class="line">    <span class="keyword">elif</span> req.method == <span class="string">'POST'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"POST method"</span></div><div class="line">        request_dict = req.POST</div><div class="line">        system = request_dict.get(<span class="string">'system'</span>)</div><div class="line">        wip = request_dict.get(<span class="string">'wip'</span>)</div><div class="line">        data = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> request_dict.items()&#125;</div><div class="line">        host = Host.objects.filter(wip=wip).first()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> host:</div><div class="line">            host = Host(**data)</div><div class="line">        host.save(force_insert=<span class="keyword">True</span>)</div><div class="line">    	data = &#123;</div><div class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</div><div class="line">            <span class="string">'status'</span>: <span class="string">'ok'</span></div><div class="line">            &#125;</div><div class="line">    <span class="keyword">return</span> HttpResponse(data)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#### 结果说明</div><div class="line">1.认证成功，内容如下：</div><div class="line">POST method-------</div><div class="line">&lt;QueryDict: &#123;u&apos;apikey&apos;: [u&quot;[&apos;a73421ee7c21d9d590b956f07ed16ca2|1477795149.448697&apos;]&quot;], u&apos;mem&apos;: [u&apos;[4L]&apos;], u&apos;system&apos;: [u&quot;[&apos;Darwin&apos;]&quot;], u&apos;wip&apos;: [u&quot;[&apos;14.196.121.237&apos;]&quot;], u&apos;disk&apos;: [u&apos;[232]&apos;], u&apos;cpu&apos;: [u&apos;[4]&apos;]&#125;&gt;</div><div class="line">----[&apos;Darwin&apos;]----[&apos;14.196.121.237&apos;]</div><div class="line"> </div><div class="line">2.当key不同时，服务端没有收到客户端发送过来的信息，内容如下：</div><div class="line">1ab7370c45587a9d4d0d1d8f28bd09d7|1477795289.186698</div><div class="line">-------&gt; 1ab7370c45587a9d4d0d1d8f28bd09d7</div><div class="line">-------&gt; 1477795289.186698</div><div class="line">e9d558f11074410464d1769fb2930e81</div><div class="line">客户端和服务端密钥不一致，认证失败。</div><div class="line"> </div><div class="line">3.当认证时间超时时(这里设置超时时间为5s，模拟发送过来的时间为6s后)，服务端没有收到客户端发送过来的信息，内容如下：</div><div class="line">9dc916fbb04c1310cece3aaa5b2d1b7e|1477795521.379039</div><div class="line">-------&gt; 9dc916fbb04c1310cece3aaa5b2d1b7e</div><div class="line">-------&gt; 1477795521.379039</div><div class="line">超时，认证失败</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;之前写过一篇文章&lt;a href=&quot;https://ttxsgoto.github.io/2017/03/26/API/&quot;&gt;《简单API的实现
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="api" scheme="https://ttxsgoto.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>最简单API实现</title>
    <link href="https://ttxsgoto.github.io/2017/03/26/API/"/>
    <id>https://ttxsgoto.github.io/2017/03/26/API/</id>
    <published>2017-03-26T13:51:41.000Z</published>
    <updated>2017-03-27T14:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便，主要因为需要授权和做相关的防火墙策略（如果有几百上千台client，就算用网段的形式，也需要重复操作），而且如果数据库的信息发生变化时，需要把所有客户端的数据库信息进行修改，比较麻烦；最近学习了一种通过url方式将数据传递给服务端，实现简单的api功能，简单例子如下：</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>客户端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> platform</div><div class="line"><span class="keyword">import</span> psutil</div><div class="line"><span class="keyword">import</span> urllib,urllib2</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</div><div class="line"> </div><div class="line">sys_info=&#123;&#125;</div><div class="line">sys_info[<span class="string">'system'</span>] = []</div><div class="line">sys_info[<span class="string">'cpu'</span>] = []</div><div class="line">sys_info[<span class="string">'mem'</span>] = []</div><div class="line">sys_info[<span class="string">'disk'</span>] = []</div><div class="line">sys_info[<span class="string">'wip'</span>] = []</div><div class="line"> </div><div class="line"><span class="comment">#系统信息</span></div><div class="line">system=sys_info[<span class="string">'system'</span>].append(platform.uname()[<span class="number">0</span>])</div><div class="line"> </div><div class="line"><span class="comment">#cpu个数</span></div><div class="line">cpu_count=sys_info[<span class="string">'cpu'</span>].append(cpu_count())</div><div class="line"> </div><div class="line"><span class="comment">#内存</span></div><div class="line">mem = psutil.virtual_memory()</div><div class="line">mem_info = sys_info[<span class="string">'mem'</span>].append(mem.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line"> </div><div class="line"><span class="comment">#磁盘空间</span></div><div class="line">sdiskusage = psutil.disk_usage(<span class="string">'/'</span>)</div><div class="line">disk_info =sys_info[<span class="string">'disk'</span>].append(sdiskusage.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line"></div><div class="line"><span class="comment">#外网ip</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_ip</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">"http://ip.cip.cc"</span></div><div class="line">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class="line">    <span class="keyword">return</span>  wip</div><div class="line">sys_info[<span class="string">'wip'</span>].append(pub_ip())</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> json.dumps(sys_info,indent=<span class="number">4</span>,ensure_ascii=<span class="keyword">False</span>)</div><div class="line">    data = urllib.urlencode(query=sys_info)</div><div class="line">    respose = urllib.urlopen(url=<span class="string">"http://127.0.0.1:8090/serveradd/"</span>, data=data)</div></pre></td></tr></table></figure>
<ul>
<li>服务端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">############### urls.py ################</span></div><div class="line">url(<span class="string">r'^serveradd/$'</span>,<span class="string">'app.views.serveradd'</span>),</div><div class="line"> </div><div class="line"><span class="comment">############### views.py ################</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveradd</span><span class="params">(req)</span>:</span></div><div class="line">    <span class="keyword">if</span> req.method == <span class="string">'GET'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"GET method"</span></div><div class="line">    <span class="keyword">elif</span> req.method == <span class="string">'POST'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"POST method"</span></div><div class="line">        request_dict = req.POST</div><div class="line">        system = request_dict.get(<span class="string">'system'</span>)</div><div class="line">        wip = request_dict.get(<span class="string">'wip'</span>)</div><div class="line">        data = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> request_dict.items()&#125;</div><div class="line">        host = Host.objects.filter(wip=wip).first()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> host:</div><div class="line">            host = Host(**data)</div><div class="line">        host.save(force_insert=<span class="keyword">True</span>)</div><div class="line">    	data = &#123;</div><div class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</div><div class="line">            <span class="string">'status'</span>: <span class="string">'ok'</span></div><div class="line">            &#125;</div><div class="line">    <span class="keyword">return</span> HttpResponse(data)</div><div class="line"> </div><div class="line"><span class="comment">############### 结果 ################</span></div><div class="line">POST method</div><div class="line">&lt;QueryDict: &#123;<span class="string">u'mem'</span>: [<span class="string">u'[4L]'</span>], <span class="string">u'cpu'</span>: [<span class="string">u'[4]'</span>], <span class="string">u'disk'</span>: [<span class="string">u'[232]'</span>], <span class="string">u'system'</span>: [<span class="string">u"['Darwin']"</span>], <span class="string">u'wip'</span>: [<span class="string">u"['12.196.9.193']"</span>]&#125;&gt;</div><div class="line">----[<span class="string">'Darwin'</span>]----[<span class="string">'12.196.9.193'</span>]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="api" scheme="https://ttxsgoto.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>mysqldb模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/25/mysqldb/"/>
    <id>https://ttxsgoto.github.io/2017/03/25/mysqldb/</id>
    <published>2017-03-25T13:43:12.000Z</published>
    <updated>2017-04-06T02:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>python中执行数据库操作，首先安装MySQL-python模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y MySQL-python 或者</div><div class="line">pip install MySQL-python</div></pre></td></tr></table></figure></p>
<h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><p>创建数据库连接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">conn = MySQLdb.connect(</div><div class="line">    host=<span class="string">'127.0.0.1'</span>,</div><div class="line">    user=<span class="string">'test'</span>,</div><div class="line">    passwd=<span class="string">'test'</span>,</div><div class="line">    db=<span class="string">'test01'</span>,</div><div class="line">    port=<span class="number">3306</span>,</div><div class="line">    charset=utf8)</div><div class="line">cur = conn.cursor()        <span class="comment">#通过获取到的数据库连接conn下的cursor()方法来创建游标，以元祖形式输出</span></div><div class="line">conn.cursor(MySQLdb.cursors.DictCursor)   <span class="comment">#字典形式输出</span></div><div class="line">conn.selecct_db(dbname)  <span class="comment">#选择数据库</span></div><div class="line">cur.execute(sql, args)    <span class="comment">#用来执行一条sql语句</span></div><div class="line">cur.executemany(sql, args)    <span class="comment">#用来执行多条sql语句</span></div><div class="line">cur.fetchall()  <span class="comment">#获取查询结果</span></div><div class="line">cur.scroll(位置，模式) <span class="comment">#调整指针</span></div><div class="line">cur.rollback()  <span class="comment">#发生错误时回滚</span></div><div class="line">cur.close()  	<span class="comment">#关闭游标</span></div><div class="line">conn.commit()   <span class="comment">#方法在提交事务，在向数据库插入一个数据时必须用此方法，否则数据不会被真正插入</span></div><div class="line">conn.close()  <span class="comment">#关闭数据库连接</span></div></pre></td></tr></table></figure></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port, user, passwd, db)</span>:</span></div><div class="line">        self.host = host</div><div class="line">        self.port = port</div><div class="line">        self.user = user</div><div class="line">        self.passwd = passwd</div><div class="line">        self.db = db</div><div class="line"> </div><div class="line">        self.conn = MySQLdb.Connect(</div><div class="line">            host = self.host,</div><div class="line">            user = self.user,</div><div class="line">            passwd = self.passwd,</div><div class="line">            db = self.db,</div><div class="line">            port = self.port,</div><div class="line">            charset = <span class="string">'utf8'</span></div><div class="line">        )</div><div class="line">        self.cur = self.conn.cursor()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></div><div class="line">    	sql = <span class="string">"select * from test;"</span>    <span class="comment">#执行的sql语句</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cur.execute(sql)</div><div class="line">            result = self.cur.fetchall()</div><div class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> list(result):</div><div class="line">                <span class="keyword">print</span> line[<span class="number">0</span>],line[<span class="number">1</span>]</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">print</span> <span class="string">"\033[31m %s \033[0m"</span> %e</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></div><div class="line">        sql = <span class="string">"""INSERT into group(id,is_admin,name,created_time)\</span></div><div class="line">                VALUES（1,FALSE,'ttxsgoto','天天向上goto'),\</div><div class="line">                (2,FALSE,'ttxsgoto02','天天向上goto02');"""</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cur.execute(sql) <span class="comment">#执行一条sql语句</span></div><div class="line">            self.conn.commit()	<span class="comment"># 提交到数据库执行</span></div><div class="line">        <span class="keyword">except</span> Exception, e:</div><div class="line">            <span class="keyword">print</span> <span class="string">"\033[31m %s \033[0m"</span> % e</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">manyinsert</span><span class="params">(self)</span>:</span></div><div class="line">    	sql = <span class="string">"SELECT user_id,org_id,id from positions;"</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cur.execute(sql)</div><div class="line">            result = self.cur.fetchall()</div><div class="line">            sql2 = <span class="string">""" UPDATE records SET user_id=%s,org_id=%s WHERE position_id=%s ;"""</span></div><div class="line">            self.cur.executemany(sql2, result)	<span class="comment">#执行多条sql语句</span></div><div class="line">            self.conn.commit()</div><div class="line">        <span class="keyword">except</span> Exception, e:</div><div class="line">            <span class="keyword">print</span> <span class="string">"\033[31m %s \033[0m"</span> % e</div><div class="line">        self.cur.close()</div><div class="line">        self.conn.close()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    db = Mysql(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'root'</span>, db=<span class="string">'test'</span>)</div><div class="line">    db.select()</div><div class="line">    db.insert()</div><div class="line">    db.manyinsert()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;python中执行数据库操作，首先安装MySQL-python模块&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="mysqldb" scheme="https://ttxsgoto.github.io/tags/mysqldb/"/>
    
  </entry>
  
  <entry>
    <title>fabric模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/19/fabric/"/>
    <id>https://ttxsgoto.github.io/2017/03/19/fabric/</id>
    <published>2017-03-19T12:47:15.000Z</published>
    <updated>2017-03-19T12:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>基于paramiko的封装，远程执行命令，方便简单，实用性强。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-l  显示可用的task</div><div class="line">-f  指定入口文件，默认为fabfile.py</div><div class="line">-H  指定目标主机，主机之间用，号分隔</div><div class="line">-P  已并行执行，默认为串行</div><div class="line">-R  指定role角色</div><div class="line">-t  连接超时时间(s)</div><div class="line">-T  执行命令超时时间(s)</div></pre></td></tr></table></figure>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">from fabric.api import env</div><div class="line">########## 属性 ##########</div><div class="line">env.hosts    -主机ip</div><div class="line">env.port    -主机端口，默认为22</div><div class="line">env.passworkd   -ssh密码</div><div class="line">env.roledefs    -角色分组，env.roledefs=&#123;&apos;web1&apos;:[&apos;192.168.0.192&apos;]&#125;，调用@roles(&apos;web1&apos;)</div><div class="line">env.passwords   -字典，为每台机器设置密码，key是ip，value是密码，如&#123;&apos;root@192.168.0.200:22&apos;:&apos;root&apos;&#125;，调用：@hosts(&apos;root@192.168.0.200:22&apos;)</div><div class="line">env.exclude_hosts   -指定排除主机列表，在fab执行时，忽略列表中的机器；env.exclude_hosts= [&apos;10.1.1.2&apos;]</div><div class="line"> </div><div class="line">########## API ##########</div><div class="line">local(&apos;pwd&apos;)    -执行本地命令</div><div class="line">lcd(&apos;/tmp&apos;)     -切换本地目录</div><div class="line">cd(&apos;/tmp&apos;)      -切换远程目录</div><div class="line">run(&apos;uname -s&apos;) -执行远程命令</div><div class="line">sudo(&apos;service sshd restart&apos;)   -执行远程sudo，</div><div class="line">put(&apos;/local/test&apos;,&apos;/remote/test&apos;)   -上传</div><div class="line">get(&apos;/remote/test/&apos;,&apos;/local/test&apos;)  -下载</div><div class="line">prompt  -获得用户输入信息,如:prompt(&apos;please Input password:&apos;);</div><div class="line">confirm -获得提示信息确认,如:confirm(&quot;Continue[Y/N]？&quot;);</div><div class="line">@task(alias=&apos;&apos;)   -函数修饰符,标识的函数为fab可调用的,非标记对fab不可见,alias设置别名</div><div class="line">@parallel(pool_size=5)   -并行执行任务影响的最小单位是任务，所以功能启用或禁用以任务为单位,pool_size指定并发个数</div><div class="line">@serial     -顺序执行，非并发执行</div><div class="line">@runs_once  -只有第一台执行此函数</div><div class="line">with cd(&apos;/root&apos;):   pass    -with让后面的执行继承当前所在状态</div><div class="line"> </div><div class="line">__all__ = [&apos;run1&apos;,&apos;hello&apos;]  -定义全局的可用tasks列表</div><div class="line"></div><div class="line">from fabric.colors import * #用于打印显示颜色   -print(yellow(&quot;This text is yellow!&quot;,bold=True))    bold：用于设置粗体</div></pre></td></tr></table></figure>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> local, cd, run, settings,env,task</div><div class="line"><span class="keyword">from</span> fabric.context_managers <span class="keyword">import</span> prefix</div><div class="line"><span class="keyword">from</span> fabric.contrib.console <span class="keyword">import</span> confirm</div><div class="line"><span class="keyword">from</span> fabric.decorators <span class="keyword">import</span> roles, parallel, serial, runs_once</div><div class="line"><span class="keyword">from</span> fabric.colors <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> prompt</div><div class="line"> </div><div class="line">env.hosts=[<span class="string">'192.168.0.192'</span>,<span class="string">'192.168.0.200'</span>]</div><div class="line">env.password=<span class="string">'root'</span></div><div class="line">env.user=<span class="string">'root'</span></div><div class="line"><span class="comment">#env.roledefs=&#123;'web1':['192.168.0.192'],'web2':['192.168.0.200']&#125;</span></div><div class="line"> </div><div class="line">__all__ = [<span class="string">'local_deploy'</span>,<span class="string">'run1'</span>,<span class="string">'hello'</span>,<span class="string">'test_confirm'</span>,<span class="string">'test_prompt'</span>]     <span class="comment">#定义全局可用的tasks列表</span></div><div class="line"> </div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    传递参数: fab hello:name=ttxsgoto</div><div class="line">    '''</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello,&#123;&#125;"</span>.format(name)</div><div class="line"> </div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_deploy</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    执行本地命令</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    <span class="keyword">with</span> settings(warn_only=<span class="keyword">True</span>):</div><div class="line">        <span class="keyword">return</span> local(<span class="string">'ls /Users/study/studypy/train/fabric_demo/fabfile.py'</span>)</div><div class="line">    <span class="comment"># local('cat fabfile.py')</span></div><div class="line"> </div><div class="line"><span class="meta">@task   #标识为fab可调用</span></div><div class="line"><span class="meta">@roles('web2')  #调用roles</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_deploy</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    执行with函数</div><div class="line">    :return:</div><div class="line">    lcd 本地执行,cd 远程执行</div><div class="line">    '''</div><div class="line">    dir = <span class="string">'/etc/network/'</span></div><div class="line">    <span class="keyword">with</span> cd(dir):</div><div class="line">        run(<span class="string">'ls .'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    remote list</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    dir = <span class="string">'/etc/'</span></div><div class="line">    <span class="keyword">with</span> cd(dir):</div><div class="line">        run(<span class="string">'ls -l rc.local'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task(default=True)</span></div><div class="line"><span class="meta">@parallel(pool_size=3)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    启动</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    <span class="keyword">print</span> time.ctime()</div><div class="line">    hello(<span class="string">'ttxsgoto'</span>)</div><div class="line">    local_deploy()</div><div class="line">    dir()</div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    <span class="keyword">print</span> time.ctime()</div><div class="line">    print(yellow(<span class="string">"This text is green!"</span>,bold=<span class="keyword">True</span>)) <span class="comment">#用于打印显示颜色, bold：用于设置粗体</span></div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> prefix(<span class="string">'workon ownserver'</span>):</div><div class="line">        run(<span class="string">'cd /date/ownserver &amp;&amp; python manage.py runserver 0.0.0.0:8000'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_confirm</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    测试交互确认</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    INFO = confirm(<span class="string">'Are you sure?[yes/no]?'</span>)</div><div class="line">    <span class="keyword">if</span> INFO:</div><div class="line">        <span class="keyword">print</span> <span class="string">'yes'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'no'</span></div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_prompt</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    测试输入信息</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    Text = prompt(<span class="string">'Input word:'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'-----'</span>,Text</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;基于paramiko的封装，远程执行命令，方便简单，实用性强。&lt;/p&gt;
&lt;h4 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;h
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="fabric" scheme="https://ttxsgoto.github.io/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>ansible</title>
    <link href="https://ttxsgoto.github.io/2017/03/18/ansible/"/>
    <id>https://ttxsgoto.github.io/2017/03/18/ansible/</id>
    <published>2017-03-18T13:19:30.000Z</published>
    <updated>2017-03-19T13:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ansible架构图"><a href="#Ansible架构图" class="headerlink" title="Ansible架构图"></a>Ansible架构图</h3><p><img src="https://ttxsgoto.github.io/img/ansible/ansible01.png" alt=""></p>
<h3 id="Ansible特性"><a href="#Ansible特性" class="headerlink" title="Ansible特性"></a>Ansible特性</h3><pre><code>- 基于python实现，由Paramike，PyYAML和Jinjia2三个关键模块
- 部署简单，agentless
- 使用ssh协议
- 主从集中化模式
- 支持自定义模块
- 支持playbook
- 幂等性：一种操作可重复多次结果相同
</code></pre><h3 id="Ansible核心组件"><a href="#Ansible核心组件" class="headerlink" title="Ansible核心组件"></a>Ansible核心组件</h3><pre><code>- ansible core：Ansible的核心程序
- host iventory：记录了每一个由Ansible管理的主机信息，信息包括ssh端口，root帐号密码，ip地址等
- core modules：Ansible管理主机之前，先调用core Modules中的模块，然后指明管理Host Lnventory中的主机，就可以完成管理主机
- custom modules：自定义模块
- playbook(yaml,jinjia2)：YAML格式文件，多个任务定义在一个文件中
- connect plugin：连接插件，Ansible和Host通信使用
</code></pre><h3 id="Invetory文件说明"><a href="#Invetory文件说明" class="headerlink" title="Invetory文件说明"></a>Invetory文件说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[web01]</div><div class="line">192.168.0.1 ansible_ssh_user=root ansible_ssh_pass=xxx</div><div class="line">[web02]</div><div class="line">192.168.0.[2:5]    #从2到5的主机</div><div class="line">[web03]    #对应变量</div><div class="line">192.168.0.8 port=80 hostname=&quot;test01&quot;</div><div class="line">192.168.0.9 port=8080 hostname=&quot;test02&quot;</div><div class="line">[web03:vars]    #对web03组定义变量</div><div class="line">server1=ttxsgoto1.com</div><div class="line">server2=ttxsgoto2.com</div><div class="line">[webservers:children]    #组嵌套，webservers组包括web01和web02下的主机</div><div class="line">web01</div><div class="line">web02</div><div class="line">[webservers:vars]    #组定义变量</div><div class="line">server1=tttxsgoto.com</div></pre></td></tr></table></figure>
<p>查看模块帮助信息</p>
<pre><code>- ansible-doc -l
- ansible-doc -s  module_name
</code></pre><p>ansible命令应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</div><div class="line">-f forks:启动并发线程数</div><div class="line">-m module_name:使用的模块名</div><div class="line">-a args:模块特有的参数</div></pre></td></tr></table></figure></p>
<h3 id="常见模块"><a href="#常见模块" class="headerlink" title="常见模块"></a>常见模块</h3><ul>
<li>command</li>
<li>cron</li>
<li>user</li>
<li>group</li>
<li>copy</li>
<li>file</li>
<li>ping</li>
<li>setup</li>
<li>service</li>
<li>shell</li>
<li>script</li>
<li>yum/apt</li>
</ul>
<p>cron:计划任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">present: 安装任务</div><div class="line">absent:移除任务</div><div class="line">ansible local -m cron -a &apos;minute=*/5 job=&quot;/bin/echo abc &gt; /root/abc.log&quot; name=&quot;test cron job&quot;  state=&quot;absent&quot; &apos;</div></pre></td></tr></table></figure></p>
<p>user:用户管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- name:指明添加的用户名</div><div class="line">- ansible local -m user -a &apos;name=&quot;user1&quot;&apos;</div></pre></td></tr></table></figure></p>
<p>group:用户组管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ansible local -m group -a &apos;name=user1 gid=306 system=yes&apos;    #添加用户组</div><div class="line">ansible local -m group -a &apos;name=user1 gid=306 system=yes state=absent&apos;    #删除用户组</div></pre></td></tr></table></figure></p>
<p>copy:文件复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src=:定义本地源路径</div><div class="line">content=:取代src=，定义内容直接写入到远程文件中</div><div class="line">dest=:定义远程路径，绝对路径</div><div class="line">ansible local -m copy -a &apos;src=/etc/fstab dest=/tmp/fstab.bak owner=root  mode=777&apos;</div><div class="line">ansible local -m copy -a &apos;content=&quot;hello wrold\nabc\n&quot; dest=/tmp/fstab.bak owner=root</div></pre></td></tr></table></figure></p>
<p>file:文件管理属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">path=: 指明文件路径，可以使用name、dest来替换</div><div class="line">ansible local -m file -a &apos; owner=bigdata group=bigdata  mode=644 path=/tmp/fstab.bak&apos;    #修改权限和组信息</div><div class="line">ansible local -m file -a &apos;path=/tmp/fstab.bak.link src=/tmp/fstab.bak state=link&apos;  #软链接</div></pre></td></tr></table></figure></p>
<p>ping:测试主机联通性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible local -m ping</div></pre></td></tr></table></figure></p>
<p>setup:收集远程主机的facts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#每个被管理节点会将自己相关的信息发生给远程的ansible主机，用于模板调用变量</div><div class="line">ansible local -m setup</div></pre></td></tr></table></figure></p>
<p>service:常用服务的运行状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">enabled=: 开机自启动，为true和false</div><div class="line">name=: 服务名称</div><div class="line">state=: 启动状态，started,stopped,restarted;</div><div class="line">ansible local -m service -a &quot;enabled=true name=nginx state=started&quot;</div></pre></td></tr></table></figure></p>
<p>shell:远程执行命令，可传递参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#用到管道等功能的复杂命令时使用shell命令</div><div class="line">ansible local -m shell -a &quot;echo xxx | passwd --stdin user1&quot;</div></pre></td></tr></table></figure></p>
<p>script:将本地脚本在远程上执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#注意：使用相对路径指定脚本</div><div class="line">ansible local -m script -a &quot;./test.sh&quot;</div></pre></td></tr></table></figure></p>
<p>yum/apt: 安装程序包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name=:    需要安装的程序包，可以加版本号</div><div class="line">state=:    present，lastest安装，absent表示卸载</div><div class="line">ansible local -m yum -a &quot;name=zsh&quot;    #安装</div><div class="line">ansible local -m apt -a &quot;name=zsh state=absent&quot;    #卸载</div></pre></td></tr></table></figure></p>
<h3 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h3><p>通过yaml将多个模块组装起来运行多个任务<br>组成结构：<br>Playbooks：<br>    Tasks：任务列表<br>    Variables：变量<br>    Templates：模板<br>    Handlers：处理器，由某事件触发执行的操作<br>    Roles：角色</p>
<p>运行说明：<br>0)yaml语法检测<br>ansible-playbook –syntax-check /path/to/playbook.yaml<br>1)yaml测试运行<br>ansible-playbook -C /path/to/playbook.yaml<br>2)运行<br>ansiable-playbook /path/to/playbook.yml<br>-t TAGS  #给指定的任务定义一个调用标识<br>–tags=TAGS #给指定的任务定义一个调用标识<br>–skip-tags=SKIP_TAGS #跳过指定的标签<br>–start-at-task=START_AT #从哪个任务后执行<br>–list-tags    #查看标签<br>基本结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">例子1：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">  - name: create nginx group</div><div class="line">      group: name=nginx system=yes gid=208</div><div class="line">  - name: create nginx user</div><div class="line">      user: name=nginx uid=208 system=yes</div><div class="line">- hosts: dbservers</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">  - name: copy file to dbsrvs</div><div class="line">      copy: src=/etc/inittab dest=/tmp/inittab.bak</div><div class="line"> </div><div class="line">例子2(handler,vars)：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">  - package: httpd</div><div class="line">  - service: httpd</div><div class="line">  tasks:</div><div class="line">  - name: install httpd package</div><div class="line">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class="line">  - name: install configuration file for httpd</div><div class="line">      copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf</div><div class="line">      notify:</div><div class="line">      - restart httpd</div><div class="line">  - name: start httpd service</div><div class="line">      service: enabled=true name=httpd state=started</div><div class="line">  handlers:</div><div class="line">  - name: restart httpd</div><div class="line">    service: name=httpd state=restarted</div><div class="line">  - name: copy file</div><div class="line">    copy: content=&quot;&#123;&#123; ansible_all_ipv4_addresses &#125;&#125;&quot; dest=/tmp/test.txt</div><div class="line"> </div><div class="line">例子3(条件测试)：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">  - username: user1</div><div class="line">  tasks:</div><div class="line">  - name: create &#123;&#123; username &#125;&#125;</div><div class="line">      user: name=&#123;&#123; userneam &#125;&#125;</div><div class="line">      when: ansible_fqdn == &apos;ttxsgoto&apos;</div><div class="line"> </div><div class="line">例子4(迭代-for)：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  - name: add username</div><div class="line">    user: name=&#123;&#123; item.name &#125;&#125; state=present groups=&#123;&#123; item.groups &#125;&#125;</div><div class="line">    with_items:</div><div class="line">      - &#123;name:&apos;testuser1&apos;,groups=&apos;user1&apos;&#125;</div><div class="line">      - &#123;name:&apos;testuser2&apos;,groups=&apos;user2&apos;&#125;</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  - name: add username</div><div class="line">    user: name=&#123;&#123; item &#125;&#125; state=present groups=group1</div><div class="line">    with_items:</div><div class="line">      - testuser1</div><div class="line">      - testuser2</div><div class="line"> </div><div class="line">例子5(templates/tags  ansible-playbook test.yml --tags=&apos;conf_chage&apos;):</div><div class="line"> #tags: 在playbook可以为某个任务定义一个标签，在执行playbook时，通过tags可实现仅运行指定tasks任务</div><div class="line"> - hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">  - package: httpd</div><div class="line">  - service: httpd</div><div class="line">  tasks:</div><div class="line">  - name: install httpd package</div><div class="line">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class="line">  - name: install configuration file for httpd</div><div class="line">      template: src=/root/conf/httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf</div><div class="line">     tags:</div><div class="line">     - conf_chage</div><div class="line">     notify:</div><div class="line">      - restart httpd</div><div class="line">  - name: start httpd service</div><div class="line">      service: enabled=true name=httpd state=started</div><div class="line">  handlers:</div><div class="line">  - name: restart httpd</div><div class="line">    service: name=httpd state=restarted</div></pre></td></tr></table></figure></p>
<p>roles：用于层次化、结构化的组织playbook；role能够根据层次结构自动装载变量文件、task以及handlers等，要使用roles只需要在playbook中使用include指令；roles通过分别将变量、文件、任务、模块及处理器放置在单独的目录中，并可以便捷地通过include它们的一种机制，角色一般用于基于主机构建服务的场景中；无实例，用到时在记录</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Ansible架构图&quot;&gt;&lt;a href=&quot;#Ansible架构图&quot; class=&quot;headerlink&quot; title=&quot;Ansible架构图&quot;&gt;&lt;/a&gt;Ansible架构图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ttxsgoto.github.io/i
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="ansible" scheme="https://ttxsgoto.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Celery异步</title>
    <link href="https://ttxsgoto.github.io/2017/03/12/celery/"/>
    <id>https://ttxsgoto.github.io/2017/03/12/celery/</id>
    <published>2017-03-12T05:18:43.000Z</published>
    <updated>2017-05-12T05:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>可以在 Request-Response 循环之外执行的操作：发送邮件、推送消息</li>
<li>耗时的操作：调用第三方 API（前端通过 AJAX 展示进度和结果）</li>
<li>周期性任务：取代 crontab</li>
</ul>
<h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p><img src="https://ttxsgoto.github.io/img/celery/celery01.png" alt=""><br>Celery的架构由三部分组成：</p>
<pre><code>消息中间件（message broker）：Celery本身不提供消息服务是任务调度队列，通常以服务形式出现，可以方便的和第三方提供的消息中间件集成；包括，RabbitMQ, Redis, MongoDB；
任务执行单元（worker）：是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中；
任务执行结果存储（task result store）：用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache
</code></pre><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 参数配置</div><div class="line">    BROKER_URL = &apos;redis://127.0.0.1:6379&apos;               # 指定 Broker</div><div class="line">    CELERY_RESULT_BACKEND = &apos;redis://127.0.0.1:6379/0&apos;  # 指定 Backend</div><div class="line">    CELERY_TIMEZONE = &apos;Asia/Shanghai&apos;                   # 指定时区，默认是 UTC</div><div class="line"></div><div class="line">    CELERY_IMPORTS = (                                  # 指定导入的任务模块</div><div class="line">    &apos;celery_app.task1&apos;,</div><div class="line">    &apos;celery_app.task2&apos;</div><div class="line">)</div><div class="line">    app.config_from_object(&apos;celeryconfig&apos;)  #将配置导入到celery对象中</div></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>celery worker -A tasks –loglevel=info –concurrency=5<br>参数”-A”指定了Celery实例的位置，本例是在”tasks.py”中，celery命令会自动在该文件中寻找Celery对象实例。建议指定Celery对象名称，如”-A tasks.app”。<br>参数”loglevel”指定了日志等级，也可以不加，默认为warning。也可以使用 -l info来表示<br>参数”concurrency”指定最大并发数，默认为CPU核数<br>delay():方法将任务发送到消息队列中，由之前启动worker执行，这时Python控制台上只会返回”AsyncResult”信息。如果你看下之前职程的启动窗口，你会看到多了条日志”Received task: celery_app.task1.add[bec9a333-3af7-43ab-b93d-4a2ae6779058]  ETA:[2017-03-12 12:57:08.630629+08:00]”<br>“delay()”方法，它其实是对”apply_async()”方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用”apply_async()”，其常用的参数有：</p>
<pre><code>countdown: 指定多少秒后任务才被执行
eta: 指定任务被调度的时间，参数类型是datetime
expires: 任务过期时间，参数类型可以是int（秒），也可以是datetime
retry: 任务发送失败的重试次数
priority: 任务优先级，范围是0-9
serializer: 参数和返回值的序列化方式
</code></pre><p>result = add.delay(2,5)<br>result.ready()  #True,用于检查任务执行是否成功<br>result.get(timeout=1)   #7,get方法用于获取任务结果</p>
<p>delay() 方法是 apply_async() 方法的简写<br>apply_async(args=(), kwargs={}, route_name=None, **options)<br>这个调用会把 add 操作放入到队列里，然后立即返回一个 AsyncResult 对象<br>当函数被@app.task装饰后，就成为可被 Celery 调度的任务</p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><h4 id="异步执行任务"><a href="#异步执行任务" class="headerlink" title="异步执行任务"></a>异步执行任务</h4><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- celery_app</div><div class="line">    - __init__.py</div><div class="line">    - celeryconfig.py</div><div class="line">    - init.py</div><div class="line">    - task1.py</div><div class="line">    - task2.py</div><div class="line">    - client.py</div></pre></td></tr></table></figure></p>
<p>celeryconfig.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379'</span>               <span class="comment"># 指定 Broker</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/0'</span>  <span class="comment"># 指定 Backend</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span>                   <span class="comment"># 指定时区，默认是 UTC</span></div><div class="line"> </div><div class="line">CELERY_IMPORTS = (                                  <span class="comment"># 指定导入的任务模块</span></div><div class="line">    <span class="string">'celery_app.task1'</span>,</div><div class="line">    <span class="string">'celery_app.task2'</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>init.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Describe:异步执行</div><div class="line">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class="line">cd /train/celery_demo &amp;&amp; celery worker -A celery_app.init --loglevel=INFO</div><div class="line"></div><div class="line">'''python</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">ttxsgoto = Celery(<span class="string">"ttxsgoto"</span>)   <span class="comment">#创建一个celery任务</span></div><div class="line"> </div><div class="line">ttxsgoto.config_from_object(<span class="string">'celery_app.celeryconfig'</span>)  <span class="comment">#将配置导入到celery对象中</span></div></pre></td></tr></table></figure></p>
<p>task1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>task2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> x * y</div></pre></td></tr></table></figure></p>
<p>client.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> task1</div><div class="line"><span class="keyword">import</span> task2</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"异步执行开始:"</span>,time.ctime()</div><div class="line">task1.add.apply_async(args=(<span class="number">2</span>,<span class="number">8</span>), countdown=<span class="number">5</span>) <span class="comment"># 5 秒后执行任务</span></div><div class="line">task2.multiply.delay(<span class="number">3</span>,<span class="number">7</span>)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"end!!!!!"</span></div><div class="line"><span class="keyword">print</span> time.ctime()</div></pre></td></tr></table></figure></p>
<p>启动celery并服务，并执行client.py脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">celery worker -A celery_app.init  -l info</div><div class="line">python client.py</div></pre></td></tr></table></figure></p>
<h4 id="周期执行任务"><a href="#周期执行任务" class="headerlink" title="周期执行任务"></a>周期执行任务</h4><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- celery_app_cron</div><div class="line">    - __init__.py</div><div class="line">    - celeryconfig.py</div><div class="line">    - init.py</div><div class="line">    - task1.py</div><div class="line">    - task2.py</div></pre></td></tr></table></figure></p>
<p>celeryconfig.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</div><div class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379'</span>               <span class="comment"># 指定 Broker</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/0'</span>  <span class="comment"># 指定 Backend</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span>                   <span class="comment"># 指定时区，默认是 UTC</span></div><div class="line"> </div><div class="line">CELERY_IMPORTS = (                                  <span class="comment"># 指定导入的任务模块</span></div><div class="line">    <span class="string">'celery_app_cron.task1'</span>,</div><div class="line">    <span class="string">'celery_app_cron.task2'</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">#ttxsgoto = Celery("cron",broker= BROKER_URL, backend= CELERY_RESULT_BACKEND)</span></div><div class="line"> </div><div class="line"><span class="comment">#定时任务设置</span></div><div class="line">CELERYBEAT_SCHEDULE = &#123;</div><div class="line">    <span class="string">'add-every-30s'</span>:&#123;</div><div class="line">        <span class="string">'task'</span>:<span class="string">'celery_app_cron.task1.add'</span>,         <span class="comment">#任务执行的函数</span></div><div class="line">        <span class="string">'schedule'</span>:timedelta(seconds=<span class="number">30</span>),           <span class="comment"># 每30s执行一次</span></div><div class="line">        <span class="string">'args'</span>:(<span class="number">3</span>,<span class="number">12</span>)                                <span class="comment"># 任务函数参数</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">'multiply-erverday-7-10'</span>:&#123;</div><div class="line">        <span class="string">'task'</span>:<span class="string">'celery_app_cron.task2.multiply'</span>,</div><div class="line">        <span class="comment">#'schedule':crontab(hour=7,minute=10),      #cron计划任务,每天7:10进行</span></div><div class="line">        <span class="string">'args'</span>:(<span class="number">3</span>,<span class="number">15</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>init.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Describe:定时任务</div><div class="line">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class="line">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init worker --loglevel=INFO</div><div class="line">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init beat</div><div class="line">放在一起执行:</div><div class="line">cd /train/celery_demo &amp;&amp; celery -B -A celery_app_cron.init worker --loglevel=INFO</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">ttxsgoto = Celery(<span class="string">"cron"</span>)</div><div class="line">ttxsgoto.config_from_object(<span class="string">'celery_app_cron.celeryconfig'</span>)</div></pre></td></tr></table></figure></p>
<p>task1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>task2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> x * y</div></pre></td></tr></table></figure></p>
<p>启动celery服务，可以看到执行结果，30s运行一次task1.add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery worker beat -A celery_app_cron.init -l info</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="celery" scheme="https://ttxsgoto.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>django分页</title>
    <link href="https://ttxsgoto.github.io/2017/03/08/django-page/"/>
    <id>https://ttxsgoto.github.io/2017/03/08/django-page/</id>
    <published>2017-03-08T13:57:42.000Z</published>
    <updated>2017-03-09T01:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Django 项目中使用自带的分页模块，记录如下</p>
<p><strong>相关说明</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</div><div class="line"> </div><div class="line">objects = [<span class="string">'abc'</span>,<span class="string">'bcd'</span>,<span class="string">'cde'</span>,<span class="string">'def'</span>,<span class="string">'efg'</span>,<span class="string">'fgh'</span>]</div><div class="line">p = Paginator(objects, <span class="number">2</span>)<span class="comment">#表示传入数据集合，2 表示每页存放的数据个数</span></div><div class="line">p.cout <span class="comment">#6 表示数据总量</span></div><div class="line">p.num_pages<span class="comment">#3 表示总页数</span></div><div class="line">p.per_page<span class="comment">#2 表示每页的数量</span></div><div class="line">p.object_list<span class="comment"># ['abc','bcd','cde','def','efg','fgh']  所有数据列表</span></div><div class="line">p.page_range  <span class="comment">#[1, 2, 3]   表示页数</span></div><div class="line">p1 = p.page(<span class="number">1</span>)<span class="comment">#获取第一页的对象</span></div><div class="line">p1.object_list<span class="comment">#['abc', 'bcd'] 该页上的数据</span></div><div class="line">p1.has_next()<span class="comment">#True,判断该页是否有下一页</span></div><div class="line">p1.has_previous()<span class="comment">#False,判断该页是否有上一页</span></div><div class="line">p1.has_other_pages() <span class="comment">#判断该页是否有上或者下页</span></div><div class="line">p1.start_index()<span class="comment"># 1 p1开始的索引值</span></div><div class="line">p1.end_index()<span class="comment">#2 p1结束的索引值</span></div><div class="line">p1.next_page_number(）<span class="comment"># #返回下一页的页码，如果下一页不存在，抛出InvalidPage异常</span></div><div class="line">p1.previous_page_number()<span class="comment">#返回前一页的页码，如果上一页不存在，抛出InvalidPag异常</span></div><div class="line">p1.paginator<span class="comment">#&lt;django.core.paginator.Paginator object at 0x7f39989b2bd0&gt; 相关paginator的对象</span></div></pre></td></tr></table></figure></p>
<p><strong>Django中使用分页</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</div><div class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, InvalidPage, PageNotAnInteger</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">device_status</span><span class="params">(request)</span>:</span></div><div class="line">    All_page_info = Device_status.objects.all()</div><div class="line">    DataCount,page,All_page_info = All_in_one(request,All_page_info)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> my_render(<span class="string">"serverinfo/device_status.html"</span>,locals(),request)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_render</span><span class="params">(template,data,request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render_to_response(template, data, context_instance=RequestContext(request))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpage_id</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    传递前端page过来的值，如果没有设置为1</div><div class="line">    """</div><div class="line">    page = request.GET.get(<span class="string">"page"</span>,<span class="string">""</span>)</div><div class="line">    <span class="keyword">if</span> page:</div><div class="line">        page = request.GET.get(<span class="string">"page"</span>,<span class="string">""</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        page = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> page</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpages</span><span class="params">(Data,page)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    处理分页函数</div><div class="line">    """</div><div class="line">    paginator = Paginator(list(Data),<span class="number">2</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Data = paginator.page(page)</div><div class="line">    <span class="keyword">except</span> PageNotAnInteger:</div><div class="line">        Data = paginator.page(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> EmptyPage:</div><div class="line">        Data = paginator.page(paginator.num_pages)</div><div class="line">    <span class="keyword">return</span> Data,page</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">All_in_one</span><span class="params">(request,All_page_info)</span>:</span></div><div class="line">    DataCount = len(All_page_info)</div><div class="line">    page = getpage_id(request)</div><div class="line">    All_page_info,page=getpages(All_page_info,page)</div><div class="line">    <span class="keyword">return</span> DataCount,page,All_page_info</div></pre></td></tr></table></figure></p>
<p><strong>templates中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">备注：paginator.html  //将以下模板导入需要添加分页功能的页面即可（&#123;% include &apos;paginator.html&apos; %&#125;）</div><div class="line">=========================</div><div class="line">&lt;span class=&quot;step-links&quot;&gt;</div><div class="line">   &#123;% if All_page_info.has_previous %&#125; &lt;!-- 是否有前一页 --&gt;</div><div class="line">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt; &lt;!-- 前一页的页码 --&gt;</div><div class="line">         &lt;/script&gt;</div><div class="line">   &#123;% endif %&#125;</div><div class="line">   &lt;span class=&quot;current&quot;&gt;</div><div class="line">       第 &#123;&#123; All_page_info.number &#125;&#125;页  总 &#123;&#123; All_page_info.paginator.num_pages &#125;&#125; 页  &lt;!-- 总页数 --&gt;</div><div class="line">   &lt;/span&gt;</div><div class="line">   &#123;% if All_page_info.has_next %&#125;</div><div class="line">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt; &lt;!-- 后一页的页码 --&gt;</div><div class="line">   &#123;% endif %&#125;</div><div class="line">&lt;/span&gt;</div><div class="line">&lt;span&gt;</div><div class="line">     &amp;nbsp;&amp;nbsp;共&#123;&#123;DataCount&#125;&#125;条记录</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<p><strong>效果展示</strong><br><img src="https://ttxsgoto.github.io/img/django/page.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Django 项目中使用自带的分页模块，记录如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关说明&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="分页" scheme="https://ttxsgoto.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>ConfigParser模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/07/ConfigParser/"/>
    <id>https://ttxsgoto.github.io/2017/03/07/ConfigParser/</id>
    <published>2017-03-07T13:57:05.000Z</published>
    <updated>2017-03-09T01:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>ConfigParser模块记录常用方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> ConfigParser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    基本的读取配置文件</div><div class="line">    -read(filename) 直接读取ini文件内容</div><div class="line">    -sections() 得到所有的section，并以列表的形式返回</div><div class="line">    -options(section) 得到该section的所有option</div><div class="line">    -items(section) 得到该section的所有键值对</div><div class="line">    -get(section,option) 得到section中option的值，返回为string类型</div><div class="line">    -getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数</div><div class="line">    基本的写入配置文件</div><div class="line">    -add_section(section) 添加一个新的section</div><div class="line">    -set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件</div><div class="line">    """</div><div class="line">    cf = ConfigParser.ConfigParser()</div><div class="line">    cf.read(<span class="string">'db.txt'</span>)</div><div class="line">    sec = cf.sections()                         <span class="comment">#获取所有sections的值</span></div><div class="line">    <span class="keyword">print</span> sec</div><div class="line">    opt = cf.options(<span class="string">'db1'</span>)                     <span class="comment">#获取指定sections的options</span></div><div class="line">    <span class="keyword">print</span> opt</div><div class="line">    val = cf.items(<span class="string">'db1'</span>)                       <span class="comment">#获取指定section的配置信息，为list</span></div><div class="line">    <span class="keyword">print</span> val,type(val)</div><div class="line">    val_str = cf.get(<span class="string">'db1'</span>, <span class="string">'db_host'</span>)          <span class="comment">#获取sections中option的值</span></div><div class="line">    <span class="keyword">print</span> val_str</div><div class="line">    cf.set(<span class="string">'db1'</span>,<span class="string">'db_host'</span>,<span class="string">'192.168.1.55'</span>)      <span class="comment">#设置某个option的值</span></div><div class="line">    cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        cf.add_section(<span class="string">'ttxsgoto'</span>)              <span class="comment">#添加一个section</span></div><div class="line">        cf.set(<span class="string">'ttxsgoto'</span>, <span class="string">'hostname'</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line">        cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    cf.remove_option(<span class="string">'ttxsgoto'</span>, <span class="string">'hostname'</span>)    <span class="comment">#删除option</span></div><div class="line">    cf.remove_section(<span class="string">'ttxsgoto'</span>)               <span class="comment">#删除section</span></div><div class="line">    cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.RawConfigParser()</div><div class="line">    config.add_section(<span class="string">'Section1'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'an_int'</span>,<span class="string">'15'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'a_bool'</span>,<span class="string">'true'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'a_float'</span>,<span class="string">'3.1415'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>, <span class="string">'baz'</span>, <span class="string">'fun'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>, <span class="string">'bar'</span>, <span class="string">'Python'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="string">'%(bar)s is %(baz)s !'</span>)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'example.cfg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> configfile:</div><div class="line">        config.write(configfile)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.RawConfigParser()</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    a_float = config.getfloat(<span class="string">'Section1'</span>, <span class="string">'a_float'</span>)</div><div class="line">    an_int = config.getint(<span class="string">'Section1'</span>, <span class="string">'an_int'</span>)</div><div class="line">    <span class="keyword">print</span> a_float + an_int</div><div class="line">    <span class="keyword">if</span> config.getboolean(<span class="string">'Section1'</span>, <span class="string">'a_bool'</span>):</div><div class="line">        <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.ConfigParser()</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>, <span class="string">'foo'</span>, <span class="number">0</span>)  <span class="comment">#0 默认，显示定义的字符串</span></div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="number">1</span>)    <span class="comment">#设置为1，显示原字符串</span></div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="number">0</span>,&#123;<span class="string">'bar'</span>:<span class="string">'Document'</span>,<span class="string">'baz'</span>:<span class="string">'evil'</span>&#125;) <span class="comment">#设置section的对应的options</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read2</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.SafeConfigParser(&#123;<span class="string">'bar'</span>:<span class="string">'Life'</span>,<span class="string">'baz'</span>:<span class="string">'hard'</span>&#125;)</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)  <span class="comment">#"Python is fun!"</span></div><div class="line">    config.remove_option(<span class="string">'Section1'</span>, <span class="string">'bar'</span>)</div><div class="line">    config.remove_option(<span class="string">'Section1'</span>,<span class="string">'baz'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)  <span class="comment">#"Life is hard!"</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ConfigParser模块记录常用方法&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="ConfigParser" scheme="https://ttxsgoto.github.io/tags/ConfigParser/"/>
    
  </entry>
  
</feed>
