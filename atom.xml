<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2020-04-08T06:32:50.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes StorageClass</title>
    <link href="https://ttxsgoto.github.io/2020/04/08/k8s-storageclass/"/>
    <id>https://ttxsgoto.github.io/2020/04/08/k8s-storageclass/</id>
    <published>2020-04-08T06:26:29.000Z</published>
    <updated>2020-04-08T06:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h3><p>创建动态PV，使用时无需先创建好PV</p>
<h3 id="创建Provisioner"><a href="#创建Provisioner" class="headerlink" title="创建Provisioner"></a>创建Provisioner</h3><p>使用 StorageClass，我们需要安装对应的自动配置程序，比如我们这里存储后端使用的是 nfs，那么我们就需要使用到一个 nfs-client 的自动配置程序，我们也叫Provisioner，这个程序使用我们已经配置好的 nfs 服务器，来自动创建持久卷，也就是自动帮我们创建 PV</p>
<ul>
<li>自动创建的 PV 以${namespace}-${pvcName}-${pvName}格式创建在NFS服务器上</li>
<li>而当这个PV被回收后以archieved-${namespace}-${pvcName}-${pvName}这样的命名格式存在 NFS 服务器上</li>
</ul>
<h4 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">apiVersion: apps/v1</div><div class="line">kind: Deployment</div><div class="line">metadata:</div><div class="line">  name: nfs-client-provisioner</div><div class="line">spec:</div><div class="line">  replicas: <span class="number">1</span></div><div class="line">  strategy:</div><div class="line">    type: Recreate</div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      app: nfs-client-provisioner</div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        app: nfs-client-provisioner</div><div class="line">    spec:</div><div class="line">      serviceAccountName: nfs-client-provisioner</div><div class="line">      containers:</div><div class="line">        - name: nfs-client-provisioner</div><div class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</div><div class="line">          volumeMounts:</div><div class="line">            - name: nfs-client-root</div><div class="line">              mountPath: /persistentvolumes</div><div class="line">          env:</div><div class="line">            - name: PROVISIONER_NAME</div><div class="line">              value: fuseim.pri/ifs</div><div class="line">            - name: NFS_SERVER</div><div class="line">              value: <span class="number">192.168</span><span class="number">.238</span><span class="number">.100</span></div><div class="line">            - name: NFS_PATH</div><div class="line">              value: /data/k8s</div><div class="line">      volumes:</div><div class="line">        - name: nfs-client-root</div><div class="line">          nfs:</div><div class="line">            server: <span class="number">192.168</span><span class="number">.238</span><span class="number">.100</span></div><div class="line">            path: /data/k8s</div></pre></td></tr></table></figure>
<h4 id="ServiceAccount"><a href="#ServiceAccount" class="headerlink" title="ServiceAccount"></a>ServiceAccount</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: ServiceAccount</div><div class="line">metadata:</div><div class="line">  name: nfs-client-provisioner</div><div class="line">---</div><div class="line">kind: ClusterRole</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">metadata:</div><div class="line">  name: nfs-client-provisioner-runner</div><div class="line">rules:</div><div class="line">  - apiGroups: [<span class="string">""</span>]</div><div class="line">    resources: [<span class="string">"persistentvolumes"</span>]</div><div class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</div><div class="line">  - apiGroups: [<span class="string">""</span>]</div><div class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</div><div class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</div><div class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</div><div class="line">    resources: [<span class="string">"storageclasses"</span>]</div><div class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</div><div class="line">  - apiGroups: [<span class="string">""</span>]</div><div class="line">    resources: [<span class="string">"events"</span>]</div><div class="line">    verbs: [<span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</div><div class="line">  - apiGroups: [<span class="string">""</span>]</div><div class="line">    resources: [<span class="string">"endpoints"</span>]</div><div class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"delete"</span>, <span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"patch"</span>, <span class="string">"update"</span>]</div><div class="line"> </div><div class="line">---</div><div class="line">kind: ClusterRoleBinding</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">metadata:</div><div class="line">  name: run-nfs-client-provisioner</div><div class="line">subjects:</div><div class="line">  - kind: ServiceAccount</div><div class="line">    name: nfs-client-provisioner</div><div class="line">    namespace: default</div><div class="line">roleRef:</div><div class="line">  kind: ClusterRole</div><div class="line">  name: nfs-client-provisioner-runner</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div></pre></td></tr></table></figure>
<h4 id="StorageClass-1"><a href="#StorageClass-1" class="headerlink" title="StorageClass"></a>StorageClass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apiVersion: storage.k8s.io/v1</div><div class="line">kind: StorageClass  <span class="comment"># 声明了一个名为 es-data-db 的StorageClass对象</span></div><div class="line">metadata:</div><div class="line">  name: es-data-db</div><div class="line">provisioner: fuseim.pri/ifs <span class="comment"># 需要和deployment中的PROVISIONER_NAME环境变量值一样</span></div></pre></td></tr></table></figure>
<h3 id="新建PVC"><a href="#新建PVC" class="headerlink" title="新建PVC"></a>新建PVC</h3><ul>
<li><p>通过annotations属性来标识自动生成PV</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: PersistentVolumeClaim</div><div class="line">metadata:</div><div class="line">  name: test-pvc</div><div class="line">  annotations:</div><div class="line">    volume.beta.kubernetes.io/storage-<span class="class"><span class="keyword">class</span>:</span> <span class="string">"es-data-db"</span></div><div class="line">spec:</div><div class="line">  accessModes:</div><div class="line">  - ReadWriteMany</div><div class="line">  resources:</div><div class="line">    requests:</div><div class="line">      storage: <span class="number">1</span>Mi</div></pre></td></tr></table></figure>
</li>
<li><p>可以设置es-data-db的StorageClass为Kubernetes的默认存储后端</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kubectl patch storageclass es-data-db -p <span class="string">'&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">kind: Pod</div><div class="line">apiVersion: v1</div><div class="line">metadata:</div><div class="line">  name: test-pod</div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: test-pod</div><div class="line">    image: busybox</div><div class="line">    imagePullPolicy: IfNotPresent</div><div class="line">    command:</div><div class="line">    - <span class="string">"/bin/sh"</span></div><div class="line">    args:</div><div class="line">    - <span class="string">"-c"</span></div><div class="line">    - <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></div><div class="line">    volumeMounts:</div><div class="line">    - name: nfs-pvc</div><div class="line">      mountPath: <span class="string">"/mnt"</span></div><div class="line">  restartPolicy: <span class="string">"Never"</span></div><div class="line">  volumes:</div><div class="line">  - name: nfs-pvc</div><div class="line">    persistentVolumeClaim:</div><div class="line">      claimName: test-pvc</div></pre></td></tr></table></figure>
<h4 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">apiVersion: apps/v1</div><div class="line">kind: StatefulSet</div><div class="line">metadata:</div><div class="line">  name: nfs-web</div><div class="line">spec:</div><div class="line">  serviceName: <span class="string">"nginx"</span></div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      app: nfs-web</div><div class="line">  replicas: <span class="number">3</span></div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        app: nfs-web</div><div class="line">    spec:</div><div class="line">      terminationGracePeriodSeconds: <span class="number">10</span></div><div class="line">      containers:</div><div class="line">      - name: nginx</div><div class="line">        image: nginx:<span class="number">1.7</span><span class="number">.9</span></div><div class="line">        ports:</div><div class="line">        - containerPort: <span class="number">80</span></div><div class="line">          name: web</div><div class="line">        volumeMounts:</div><div class="line">        - name: www</div><div class="line">          mountPath: /usr/share/nginx/html</div><div class="line">  volumeClaimTemplates:</div><div class="line">  - metadata:</div><div class="line">      name: www</div><div class="line">      annotations:</div><div class="line">        volume.beta.kubernetes.io/storage-<span class="class"><span class="keyword">class</span>:</span> es-data-db</div><div class="line">    spec:</div><div class="line">      accessModes: [ <span class="string">"ReadWriteOnce"</span> ]</div><div class="line">      resources:</div><div class="line">        requests:</div><div class="line">          storage: <span class="number">1</span>Gi</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;StorageClass&quot;&gt;&lt;a href=&quot;#StorageClass&quot; class=&quot;headerlink&quot; title=&quot;StorageClass&quot;&gt;&lt;/a&gt;StorageClass&lt;/h3&gt;&lt;p&gt;创建动态PV，使用时无需先创建好PV&lt;/p&gt;
&lt;h3 id=
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="StorageClass" scheme="https://ttxsgoto.github.io/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 认证、Serviceaccount &amp;&amp; RBAC</title>
    <link href="https://ttxsgoto.github.io/2020/04/08/k8s-sa-rbac/"/>
    <id>https://ttxsgoto.github.io/2020/04/08/k8s-sa-rbac/</id>
    <published>2020-04-08T03:47:11.000Z</published>
    <updated>2020-04-08T06:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h3><p>两种连接到API服务器的客户端</p>
<ul>
<li>真实的人(用户)</li>
<li>Pod（运行在pod中的应用）</li>
</ul>
<p>pod使用service accounts机制，该机制被创建和存储在集群中作为ServiceAccount资源</p>
<h3 id="ServiceAccount资源"><a href="#ServiceAccount资源" class="headerlink" title="ServiceAccount资源"></a>ServiceAccount资源</h3><p>在单独的命名空间，为每个命名空间自动创建一个默认的ServiceAccount, 都会用一个默认token，存放在secret中</p>
<ul>
<li>每个pod都与一个serviceAccount相关联</li>
<li>多个pod可以使用同一个ServiceAccount</li>
<li>pod只能使用同一个命名空间中的ServiceAccount</li>
<li>可通过ServiceAccount提供镜像拉取密钥</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: ServiceAccount</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-read-pods</div><div class="line">  namespace: default</div><div class="line"></div><div class="line">或者</div><div class="line">kubectl create sa ttxsgoto-read-pods -n default</div></pre></td></tr></table></figure>
<p>在pod的manifest文件中，可以用指定账户名的方式将一个serviceAccount赋值给一个pod，如果不显式地指定serviceAccount账号名称，pod会使用在这个命名空间中的默认serviceAccount</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看sa</span></div><div class="line">kubectl get sa</div><div class="line">  </div><div class="line"><span class="comment"># 创建sa，会自动创建token认证信息</span></div><div class="line">kubectl create sa foo -o yaml --dry-run</div><div class="line"> </div><div class="line"><span class="comment"># 查看describe </span></div><div class="line">kubectl describe sa foo</div><div class="line">  </div><div class="line"><span class="comment"># 查看ServiceAccount密钥 （JWT）</span></div><div class="line">kubectl describe secret foo-token-mfl66</div><div class="line"> </div><div class="line"><span class="comment"># 将serviceAccount分配给pod</span></div><div class="line">通过在pod定义文件中的spec.serviceAccountName字段上设置serviceAccount名称来进行分配（需要在pod创建时进行设置，后续不能被修改）</div><div class="line"> </div><div class="line"><span class="comment"># 查看挂载进pod内的token</span></div><div class="line">cat /var/run/secrets/kubernetes.io/serviceaccount/token <span class="comment"># 这个token就是对于的serviceAccount对于的token</span></div></pre></td></tr></table></figure>
<h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>角色定义了可以做什么操作，绑定定义谁可以做这些操作</p>
<ul>
<li>Role(角色)和ClusterRole(集群角色),指定了在资源上可以执行哪些动作</li>
<li>RoleBinding(角色绑定)和ClusterRoleBinding(集群角色绑定)，它将上述角色绑定到特定用户、组或ServiceAccounts上</li>
<li>角色绑定的是命名空间的资源</li>
<li>集群绑定的是集群级别的资源</li>
</ul>
<h4 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h4><p>Role资源定义了哪些操作可以在哪些资源上执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: Role</div><div class="line">metadata:</div><div class="line">  namespace: foo</div><div class="line">  name: service-reader</div><div class="line">rules:</div><div class="line">- apiGroups: [<span class="string">""</span>]   <span class="comment"># 核心的apiGroup资源</span></div><div class="line">  verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>]    <span class="comment"># 获取独立的Service并列出所有允许的服务</span></div><div class="line">  resources: [<span class="string">"services"</span>]   <span class="comment"># 这条规则和服务有关，必须使用复数的名字</span></div><div class="line"> </div><div class="line"><span class="comment"># 或者通过命令行</span></div><div class="line">kubectl create role service-reader --verb=get --verb=list --resource=services -n foo</div></pre></td></tr></table></figure></p>
<h4 id="RoleBinding"><a href="#RoleBinding" class="headerlink" title="RoleBinding"></a>RoleBinding</h4><p>RoleBinding将来自不同命名空间中的ServiceAccount绑定到同一个Role中, 可以是user 、group(user/serviceaccount) and serviceaccount<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: RoleBinding</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-pods-reader</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: Role</div><div class="line">  name: pods-reader</div><div class="line">subjects:</div><div class="line">- apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: User</div><div class="line">  name: ttxsgoto</div><div class="line"> </div><div class="line"><span class="comment"># 或者通过命令行</span></div><div class="line">kubectl create rolebinding test role-binding --role=pods-reader --user=email@<span class="number">123.</span>com/ --serviceaccount=default:default</div><div class="line"> </div><div class="line">--user 参数指定用户名</div><div class="line">--group 参数绑定角色到组</div></pre></td></tr></table></figure></p>
<h4 id="Sa-Rolebinding-Role"><a href="#Sa-Rolebinding-Role" class="headerlink" title="Sa-Rolebinding-Role"></a>Sa-Rolebinding-Role</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: ServiceAccount</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-read-pods</div><div class="line">  namespace: default</div><div class="line">---</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: Role</div><div class="line">metadata:</div><div class="line">  name: pods-reader</div><div class="line">  namespace: default</div><div class="line">rules:</div><div class="line">- apiGroups:</div><div class="line">  - <span class="string">""</span></div><div class="line">  resources:</div><div class="line">  - pods</div><div class="line">  verbs:</div><div class="line">  - get</div><div class="line">  - list</div><div class="line">  - watch</div><div class="line">- apiGroups: [<span class="string">"apps"</span>]</div><div class="line">  resources: [<span class="string">"deployments"</span>]</div><div class="line">  verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>, <span class="string">"delete"</span>]</div><div class="line">---</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: RoleBinding</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-sa-rolebind-role</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: Role</div><div class="line">  name: pods-reader</div><div class="line">subjects:</div><div class="line">- kind: ServiceAccount</div><div class="line">  name: ttxsgoto-read-pods</div></pre></td></tr></table></figure>
<h4 id="Sa-Rolebinding-Clusterrole"><a href="#Sa-Rolebinding-Clusterrole" class="headerlink" title="Sa-Rolebinding-Clusterrole"></a>Sa-Rolebinding-Clusterrole</h4><p>绑定clusterRole,这样用户只能访问该namespace对应下的资源<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: RoleBinding</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-sa-rolebind-cluster</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: ClusterRole</div><div class="line">  name: cluster-admin</div><div class="line">subjects:</div><div class="line">- kind: ServiceAccount</div><div class="line">  name: ttxsgoto-read-pods</div><div class="line">  namespace: default</div></pre></td></tr></table></figure></p>
<h4 id="User-Rolebinding-Clusterrole"><a href="#User-Rolebinding-Clusterrole" class="headerlink" title="User-Rolebinding-Clusterrole"></a>User-Rolebinding-Clusterrole</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: RoleBinding</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-reader-pods</div><div class="line">  namespace: default</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: ClusterRole</div><div class="line">  name: cluster-readers</div><div class="line">subjects:</div><div class="line">- apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: User</div><div class="line">  name: ttxsgoto</div><div class="line"> </div><div class="line"><span class="comment"># 或者通过命令行</span></div><div class="line">kubectl create rolebinding ttxsgoto-reader-pods --clusterrole=cluster-readers --user=ttxsgoto</div></pre></td></tr></table></figure>
<h4 id="Sa-Clusterrolebinding-Clusterrole"><a href="#Sa-Clusterrolebinding-Clusterrole" class="headerlink" title="Sa-Clusterrolebinding-Clusterrole"></a>Sa-Clusterrolebinding-Clusterrole</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: ClusterRoleBinding</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-sa-clusterbind-cluster</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: ClusterRole</div><div class="line">  name: cluster-admin</div><div class="line">subjects:</div><div class="line">- kind: ServiceAccount</div><div class="line">  name: ttxsgoto-read-pods</div><div class="line">  namespace: default</div></pre></td></tr></table></figure>
<h4 id="ClusterRole"><a href="#ClusterRole" class="headerlink" title="ClusterRole"></a>ClusterRole</h4><p>ClusterRole是一种集群级资源，它允许访问没有命名空间的资源和非资源型的URL,或者作为单个命名空间内部绑定的公共角色，从而避免必须在每个命名空间中重新定义相同的角色<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: ClusterRole</div><div class="line">metadata:</div><div class="line">  name: cluster-readers</div><div class="line">rules:</div><div class="line">- apiGroups:</div><div class="line">  - <span class="string">""</span></div><div class="line">  resources:</div><div class="line">  - pods</div><div class="line">  verbs:</div><div class="line">  - get</div><div class="line">  - list</div><div class="line">  - watch</div><div class="line"> </div><div class="line"><span class="comment"># 或者通过命令行</span></div><div class="line">kubectl create clusterrole cluster-readers --verb=get,list,watch --resource=pods</div></pre></td></tr></table></figure></p>
<h4 id="ClusterRoleBinding"><a href="#ClusterRoleBinding" class="headerlink" title="ClusterRoleBinding"></a>ClusterRoleBinding</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</div><div class="line">kind: ClusterRoleBinding</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-read-all-pods</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: ClusterRole</div><div class="line">  name: cluster-readers</div><div class="line">subjects:</div><div class="line">- apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: User</div><div class="line">  name: ttxsgoto</div><div class="line"> </div><div class="line"><span class="comment"># 或者通过命令行</span></div><div class="line">kubectl create clusterrolebinding pv-test --clusterrole=pv-reader --serviceaccount=foo:default</div></pre></td></tr></table></figure>
<h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><h4 id="User创建"><a href="#User创建" class="headerlink" title="User创建"></a>User创建</h4><p>kubernetes中没有User Account的api对象，创建用户需要使用管理员分配的私钥来创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 给用户生成私钥</span></div><div class="line">(umask <span class="number">077</span>; openssl genrsa -out ttxsgoto.key <span class="number">2048</span>)</div><div class="line"><span class="comment"># 给私钥生成证书 </span></div><div class="line">openssl req -new -key ttxsgoto.key -out ttxsgoto.csr -subj <span class="string">"/CN=ttxsgoto/O=ttxsgoto"</span> <span class="comment"># cn用户名，o组</span></div><div class="line"><span class="comment"># 使用ca.crt来签署证书</span></div><div class="line">openssl x509 -req -<span class="keyword">in</span> ttxsgoto.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out ttxsgoto.crt -days <span class="number">1000</span></div><div class="line"><span class="comment"># 查看证书</span></div><div class="line">openssl x509 -<span class="keyword">in</span> ttxsgoto.crt -text -noout</div><div class="line"> </div><div class="line"><span class="comment"># 将创建的证书文件和私钥文件在集群中创建新的凭证 set-credentials，将证书添加为认证k8s信息</span></div><div class="line">kubectl config set-credentials ttxsgoto --client-certificate=./ttxsgoto.crt --client-key=./ttxsgoto.key --embed-certs=true</div><div class="line"> </div><div class="line"><span class="comment"># 给用户创建新的上下文 set-context, ttxsgoto@kubernetes 用户名@集群名</span></div><div class="line">kubectl config set-context ttxsgoto@kubernetes --namespace=default --cluster=kubernetes --user=ttxsgoto</div><div class="line"> </div><div class="line"><span class="comment"># use-context 设置当前用户的context</span></div><div class="line">kubectl config use-context ttxsgoto@kubernetes</div><div class="line"><span class="comment"># 查看use-context使用有权限操作</span></div><div class="line">kubectl get pods --context=ttxsgoto@kubernetes</div><div class="line"> </div><div class="line">kubectl config view <span class="comment"># 查看config信息</span></div><div class="line">kubectl config --help</div><div class="line">kubectl config set-cluster/set-context/set-credentials</div></pre></td></tr></table></figure></p>
<h4 id="User-Rolebinding-Role"><a href="#User-Rolebinding-Role" class="headerlink" title="User-Rolebinding-Role"></a>User-Rolebinding-Role</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: Role</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-user-role</div><div class="line">  namespace: default</div><div class="line">rules:</div><div class="line">- apiGroups: [<span class="string">""</span>, <span class="string">"extensions"</span>, <span class="string">"apps"</span>]</div><div class="line">  resources: [<span class="string">"deployments"</span>, <span class="string">"replicasets"</span>, <span class="string">"pods"</span>]</div><div class="line">  verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>, <span class="string">"delete"</span>] <span class="comment"># 也可以使用['*']</span></div><div class="line">---</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: RoleBinding</div><div class="line">metadata:</div><div class="line">  name: ttxsgoto-sa-rolebind-role</div><div class="line">  namespace: default</div><div class="line">subjects:</div><div class="line">- kind: User</div><div class="line">  name: ttxsgoto <span class="comment"># 这里为username 而非context-name</span></div><div class="line">roleRef:</div><div class="line">  kind: Role</div><div class="line">  name: ttxsgoto-user-role</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div></pre></td></tr></table></figure>
<h3 id="Role和Binding绑定组合"><a href="#Role和Binding绑定组合" class="headerlink" title="Role和Binding绑定组合"></a>Role和Binding绑定组合</h3><table>
<thead>
<tr>
<th>访问资源</th>
<th>使用的角色类型</th>
<th>使用的绑定类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>集群级别的资源(node, PV)</td>
<td>ClusterRole</td>
<td>ClusterRoleBinding</td>
</tr>
<tr>
<td>非资源型URL(api/healthz)</td>
<td>ClusterRole</td>
<td>ClusterRoleBinding</td>
</tr>
<tr>
<td>任何命名空间中的资源(跨所有命名空间的资源)</td>
<td>ClusterRole</td>
<td>ClusterRoleBinding</td>
</tr>
<tr>
<td>在具体命名空间中的资源(在多个命名空间中重用这个相同的ClusterRole)</td>
<td>ClusterRole</td>
<td>RoleBinding</td>
</tr>
<tr>
<td>在具体命名空间中的资源(Role必须在每个命名空间定义好)</td>
<td>Role</td>
<td>RoleBinding </td>
</tr>
</tbody>
</table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>API服务器的客户端有真实的用户和pod中运行的应用</li>
<li>pod中的应用与一个ServiceAccount关联</li>
<li>用户和ServiceAccount都与组进行关联</li>
<li>默认情况下，pod运行在每个命名空间自动创建的默认ServiceAccount下</li>
<li>额外的ServiceAccount可以手动创建，并且和一个pod关联</li>
<li>ServiceAccount通过配置可以允许只挂载给定pod中受限的Secret列表</li>
<li>ServiceAccount可以给pod添加镜像拉取密钥</li>
<li>Role和ClusterRole定义了可以在哪些资源上执行哪些操作</li>
<li>RoleBinding和ClusterRolebinding将Role和ClusterRole绑定给用户、组合和ServiceAccount</li>
<li>每个集群都有默认的ClusterRole和ClusterRoleBinding</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;用户和用户组&quot;&gt;&lt;a href=&quot;#用户和用户组&quot; class=&quot;headerlink&quot; title=&quot;用户和用户组&quot;&gt;&lt;/a&gt;用户和用户组&lt;/h3&gt;&lt;p&gt;两种连接到API服务器的客户端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真实的人(用户)&lt;/li&gt;
&lt;li&gt;Pod（运行在
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="RBAC" scheme="https://ttxsgoto.github.io/tags/RBAC/"/>
    
      <category term="Serviceaccount" scheme="https://ttxsgoto.github.io/tags/Serviceaccount/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes StatefulSet</title>
    <link href="https://ttxsgoto.github.io/2020/03/27/k8s-statefulset/"/>
    <id>https://ttxsgoto.github.io/2020/03/27/k8s-statefulset/</id>
    <published>2020-03-27T08:28:36.000Z</published>
    <updated>2020-03-27T08:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h4><p>用于有状态应用，如(Mysql,redis, Etcd等)，通过某种方式，记录这些状态，然后在pod被重新创建时，能够为新Pod恢复这些状态</p>
<h4 id="Headless-Service"><a href="#Headless-Service" class="headerlink" title="Headless Service"></a>Headless Service</h4><p>无头服务 clusterIP: None</p>
<p>Headless Service不需要分配一个VIP，而是可以直接以DNS记录的方式解析出被代理Pod的地址<br>解析规则：</p>
<ul>
<li>namespace: default</li>
<li>service: foo</li>
<li>pod: A-0</li>
</ul>
<p>域名： a-0.foo.default.svc.cluster.local , 通过DNS服务，查找域名foo.default.svc.cluster.local对应的所有SRV记录，获得一个StatefulSet中所有pod名称</p>
<p>每个pod解析到对应的ip，解析名称规格为：<br>pod_name.service_name.ns_name.cluster.local</p>
<h4 id="volumeClaimTemplates"><a href="#volumeClaimTemplates" class="headerlink" title="volumeClaimTemplates"></a>volumeClaimTemplates</h4><p>需要绑定PVC，自动创建PVC，但需要事先创建好PV</p>
<p>volumeClaimTemplates 自动完成的功能：</p>
<ul>
<li>pod名称空间自动创建pvc</li>
<li>pod自动定义volume</li>
<li>删除pod时 对应的pvc和pv不会被删除</li>
</ul>
<h4 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h4><ul>
<li>StatefulSet的控制器直接管理pod，而为了区分这些实例，通过pod的名字里事先约定的编号</li>
<li>通过Headless Service为这些有编号的pod在dns服务器中生成带有同样编号的DNS记录，只要statefulSet能够保证这些pod名字里面的编号不变，那么service中的dns记录也不会变</li>
<li>StatefulSet还为每个pod分配并创建了一个同样编号的PVC,这样保证了每个Pod都拥有一个独立的Volume，即使Pod被删除，对应的PV和PVC依然会保留，这样即使重新创建，也可以找到同样编号的PVC，挂载这个PVC对应的Volume，从而获取到以前保存在Volume中的数据</li>
</ul>
<ul>
<li>StatefulSet 这个资源对象针对的就是有状态的应用，比如 MySQL、Redis、Memcached </li>
<li>StatefulSet可以控制pod的启动顺序，还可以为每个pod的状态设置唯一标识(在pod名字后面加0，1，2)，这样对于部署、删除、滚动更新等操作都是有序的</li>
<li>支持有序滚动更新 kubectl scale sts myapp –replicas=5</li>
<li>sts.spec.updateStrategy.rollingUpdate.partition : N 表示表示大于等于N的pod会被更新</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kubectl get sts     # 查看statefulset</span></div><div class="line">apiVersion: v1</div><div class="line">kind: Service</div><div class="line">metadata:</div><div class="line">  name: myapp-svc</div><div class="line">  labels:</div><div class="line">    app: myapp-svc</div><div class="line">spec:</div><div class="line">  ports:</div><div class="line">  - port: <span class="number">80</span></div><div class="line">    name: web</div><div class="line">  clusterIP: <span class="keyword">None</span>   <span class="comment"># Headless Service</span></div><div class="line">  selector:</div><div class="line">    app: myapp-pod</div><div class="line">---</div><div class="line">apiVersion: apps/v1</div><div class="line">kind: StatefulSet</div><div class="line">metadata:</div><div class="line">  name: myapp</div><div class="line">spec:</div><div class="line">  serviceName: myapp-svc    <span class="comment"># 使用Serice名称为myapp-svc来保证pod的可解析身份</span></div><div class="line">  replicas: <span class="number">2</span></div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      app: myapp-pod</div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        app: myapp-pod</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: myapp</div><div class="line">        image: ikubernetes/myapp:v1</div><div class="line">        ports:</div><div class="line">        - containerPort: <span class="number">80</span></div><div class="line">          name: web</div><div class="line">        volumeMounts:</div><div class="line">        - name: myappdata</div><div class="line">          mountPath: /usr/share/nginx/html</div><div class="line">  volumeClaimTemplates: </div><div class="line">  - metadata:</div><div class="line">      name: myappdata</div><div class="line">    spec:</div><div class="line">      accessModes: [<span class="string">"ReadWriteOnce"</span>]</div><div class="line">      resources:</div><div class="line">        requests:</div><div class="line">          storage: <span class="number">2</span>Gi</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;StatefulSet&quot;&gt;&lt;a href=&quot;#StatefulSet&quot; class=&quot;headerlink&quot; title=&quot;StatefulSet&quot;&gt;&lt;/a&gt;StatefulSet&lt;/h4&gt;&lt;p&gt;用于有状态应用，如(Mysql,redis, Etcd等)，通过某种
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="statefulset" scheme="https://ttxsgoto.github.io/tags/statefulset/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 存储PV&amp;PVC</title>
    <link href="https://ttxsgoto.github.io/2020/03/23/k8s-pv-pvc/"/>
    <id>https://ttxsgoto.github.io/2020/03/23/k8s-pv-pvc/</id>
    <published>2020-03-23T09:59:02.000Z</published>
    <updated>2020-03-27T08:26:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储类型"><a href="#存储类型" class="headerlink" title="存储类型"></a>存储类型</h3><ul>
<li>empryDir </li>
<li>hostPath</li>
<li>PV &amp;&amp; PVC</li>
</ul>
<h3 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h3><p>pod删除，存储卷也删除， 只在节点node本地使用， pod删除存储卷也删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-demo</div><div class="line">  namespace: default</div><div class="line">  labels:</div><div class="line">    app: myapp</div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: myapp</div><div class="line">    image: ikubernetes/myapp:v1</div><div class="line">    ports:</div><div class="line">    - name: http</div><div class="line">      containerPort: <span class="number">80</span></div><div class="line">    - name: https</div><div class="line">      containerPort: <span class="number">443</span></div><div class="line">    volumeMounts:</div><div class="line">    - name: html</div><div class="line">      mountPath: /data/web/html/</div><div class="line">  volumes:</div><div class="line">  - name: html</div><div class="line">    emptyDir: &#123;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h3><p>pod数据存储在宿主机上</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">apiVersion: V1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-vol-hostpath</div><div class="line">  namespace: default</div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: myapp</div><div class="line">    image: ikubernets/myapp:v1</div><div class="line">    volumeMounts:</div><div class="line">    - name: html</div><div class="line">      mountPath: /user/share/nginx/html/</div><div class="line">  volumes:</div><div class="line">  - name: html</div><div class="line">    hostPath:</div><div class="line">      path: /data/pod/volume1   <span class="comment"># node上的目录</span></div><div class="line">      type: DirectoryOrCreate</div></pre></td></tr></table></figure>
<p>kubectl explain pods.spec.volumes </p>
<h3 id="NFS存储"><a href="#NFS存储" class="headerlink" title="NFS存储"></a>NFS存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">sudo apt-get install nfs-kernel-server</div><div class="line">vim /etc/exports</div><div class="line">/data/volume  <span class="number">192.168</span><span class="number">.238</span><span class="number">.0</span>/<span class="number">24</span>(rw,no_root_squash)</div><div class="line">sudo /etc/init.d/nfs-kernel-server restart</div><div class="line">showmount -e    <span class="comment">#查看</span></div><div class="line"> </div><div class="line">client:</div><div class="line">sudo apt-get install nfs-kernel-server</div><div class="line">mount -t nfs <span class="number">192.168</span><span class="number">.238</span><span class="number">.100</span>:/data/volume  /data/</div><div class="line"> </div><div class="line"> </div><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-vol-nfs</div><div class="line">  namespace: default</div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: myapp</div><div class="line">    image: ikubernetes/myapp:v1</div><div class="line">    volumeMounts:</div><div class="line">    - name: html</div><div class="line">      mountPath: /usr/share/nginx/html/</div><div class="line">  volumes:</div><div class="line">  - name: html</div><div class="line">    nfs:</div><div class="line">      path: /data/volume</div><div class="line">      server: <span class="number">192.168</span><span class="number">.238</span><span class="number">.100</span></div></pre></td></tr></table></figure>
<h3 id="PV-amp-amp-PVC"><a href="#PV-amp-amp-PVC" class="headerlink" title="PV &amp;&amp; PVC"></a>PV &amp;&amp; PVC</h3><h4 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h4><p>PV是对底层网络存储的抽象，将共享存储定义为“资源”，node可以消费这种资源</p>
<p>PV作为存储资源，主要包括存储能力、访问模式、存储类型、回收策略、后端存储类型等关键信息的设置</p>
<h4 id="访问模式"><a href="#访问模式" class="headerlink" title="访问模式"></a>访问模式</h4><ul>
<li>ReadWriteOnce(RWO): 读写权限，并且只能被当个node挂载</li>
<li>ReadOnlyMany(ROX): 只读权限，允许被多个Node挂载</li>
<li>ReadWriteMany(RWX): 读写权限，允许被多个Node挂载</li>
</ul>
<h4 id="存储类别-Class"><a href="#存储类别-Class" class="headerlink" title="存储类别(Class)"></a>存储类别(Class)</h4><p>PV可以设定其存储的类别， 通过storageClassName参数指定一个StorageClass资源对象的名称</p>
<h4 id="回收策略-Reclaim-Policy"><a href="#回收策略-Reclaim-Policy" class="headerlink" title="回收策略(Reclaim Policy)"></a>回收策略(Reclaim Policy)</h4><ul>
<li>Retain, 保留，保留数据，需要手工处理</li>
<li>回收空间， 简单清除文件的操作(rm -rf /volume/*)</li>
<li>删除， 与PV相连的后端存储完成Volume的删除操作</li>
</ul>
<p>目前只有NFS和HostPath两种类型的存储支持Recycle策略， AWS EBS/GCE PD/ Azure Disk和Cinder Volumes支持Delete策略</p>
<h4 id="PV生命周期的各个阶段"><a href="#PV生命周期的各个阶段" class="headerlink" title="PV生命周期的各个阶段"></a>PV生命周期的各个阶段</h4><ul>
<li>Available 可用状态， 还没有和某个PVC绑定</li>
<li>Bound 已和某个PVC绑定</li>
<li>Released 绑定的PVC已经删除，资源已释放，但没有被集群回收</li>
<li>Failed 自动资源回收失败</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kubectl get pv</span></div><div class="line">apiVersion: v1</div><div class="line">kind: PersistentVolume</div><div class="line">metadata:</div><div class="line">  name: pv001</div><div class="line">  labels:</div><div class="line">    name: pv001</div><div class="line">spec:</div><div class="line">  nfs:</div><div class="line">    path: /data/volumes</div><div class="line">    server: <span class="number">192.168</span><span class="number">.238</span><span class="number">.100</span></div><div class="line">  accessModes: [<span class="string">"ReadWriteMany"</span>, <span class="string">"ReadWriteOnce"</span>]</div><div class="line">  capacity:</div><div class="line">    storage: <span class="number">10</span>Gi</div></pre></td></tr></table></figure>
<h4 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h4><p>用户对存储资源的一个“申请”，pvc可以消费pv资源</p>
<p>主要包括存储空间请求、访问模式、pv选择条件和存储类别等信息的设置</p>
<ul>
<li>资源请求(Resources) 描述</li>
<li>访问模式(Access Modes) </li>
<li>存储卷模式(Volume Modes)， pvc也可以设置存储卷模式，用于描述希望使用的pv存储卷模式，包括文件系统和块设备</li>
<li>PV选择条件(Selector), 通过对Label Selector的设置，可使PVC对于系统中已存在的各种PV进行筛选</li>
<li>存储类别(Class) PVC在定义时可以设定需要的后端存储的类别(通过storageClassName字段指定)，以减少对后端存储特性的详细信息依赖</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kubectl get pvc</span></div><div class="line">apiVersion: v1</div><div class="line">kind: PersistentVolumeClaim</div><div class="line">metadata:</div><div class="line">  name: mypvc</div><div class="line">  namespace: default</div><div class="line">spec:</div><div class="line">  accessModes: [<span class="string">"ReadWriteMany"</span>]</div><div class="line">  resources:</div><div class="line">    requests:</div><div class="line">      storage: <span class="number">6</span>Gi</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>PVC 和PV都受限于Namespace, pvc在选择pv时受到Namespace的限制</li>
<li>selector和class都进行设置时， 系统将选择两个条件同时满足的pv来匹配</li>
</ul>
<h3 id="PV和PVC的生命周期"><a href="#PV和PVC的生命周期" class="headerlink" title="PV和PVC的生命周期"></a>PV和PVC的生命周期</h3><ul>
<li>资源供应</li>
<li>资源绑定</li>
<li>资源使用</li>
<li>资源释放</li>
<li>资源回收</li>
</ul>
<h3 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h3><p>动态生成PV</p>
<p>用于标记存储资源的特性和性能<br>StorageClass定义了主要包括名称、后端存储的提供者(provisioner)和后端存储相关的参数配置</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;存储类型&quot;&gt;&lt;a href=&quot;#存储类型&quot; class=&quot;headerlink&quot; title=&quot;存储类型&quot;&gt;&lt;/a&gt;存储类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;empryDir &lt;/li&gt;
&lt;li&gt;hostPath&lt;/li&gt;
&lt;li&gt;PV &amp;amp;&amp;amp; PVC&lt;/
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="pv" scheme="https://ttxsgoto.github.io/tags/pv/"/>
    
      <category term="pvc" scheme="https://ttxsgoto.github.io/tags/pvc/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Service</title>
    <link href="https://ttxsgoto.github.io/2020/03/23/k8s-service/"/>
    <id>https://ttxsgoto.github.io/2020/03/23/k8s-service/</id>
    <published>2020-03-23T08:30:52.000Z</published>
    <updated>2020-03-23T09:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Service功能"><a href="#Service功能" class="headerlink" title="Service功能"></a>Service功能</h3><ul>
<li>通过Service为一组具有相同功能的容器应用提供统一的入口地址，并将请求负载分发到后端的各个容器应用上</li>
<li>Pod的创建和销毁都会实时更新service的Endpoint数据，所以可以动态地对Service的后端Pod进行查询</li>
<li>集群外的客户端无法通过pod的ip或者service的虚拟ip和虚拟端口访问，可以通过pod或service的端口号映射到宿主机，将service类型设置为NodePort类型，对service的访问将负载分发到后端的多个pod上</li>
</ul>
<h3 id="Service和Pod的关系"><a href="#Service和Pod的关系" class="headerlink" title="Service和Pod的关系"></a>Service和Pod的关系</h3><ul>
<li>通过label-selector相关联</li>
<li>通过Service实现Pod负载均衡(TCP、UDT 4层负载)</li>
</ul>
<h3 id="Service类型"><a href="#Service类型" class="headerlink" title="Service类型"></a>Service类型</h3><ul>
<li>ClusterIP 集群内使用</li>
<li><p>NodePort 对外暴露应用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Client -&gt; NodeIP:NodePort -&gt; ClusterIP:ServicePort -&gt; PodIP:containerPort</div></pre></td></tr></table></figure>
</li>
<li><p>LoadBalancer 用于映射到云服务商提供的LoadBalancer地址</p>
</li>
</ul>
<p>kubernets对应的网络：</p>
<ul>
<li>node network</li>
<li>pod network</li>
<li>cluster network</li>
<li>virtual IP</li>
</ul>
<h4 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h4><p>默认，分配一个稳定的IP地址VIP，只能在集群内部访问(同一个namespace内的pod)</p>
<h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><p>在每个节点上启用一个端口来暴露服务，可以在集群外部访问，也会分配一个稳定内部集群IP地址 NodeIP:NodePort<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Service</div><div class="line">metadata:</div><div class="line">  name: myapp</div><div class="line">  namespace: default</div><div class="line">spec:</div><div class="line">  selector:     <span class="comment"># 定义pods对应的标签</span></div><div class="line">    app: myapp</div><div class="line">  clusterIP: <span class="number">10.99</span><span class="number">.99</span><span class="number">.99</span></div><div class="line">  type: NodePort</div><div class="line">  ports:</div><div class="line">  - port: <span class="number">80</span>        <span class="comment"># 外部访问端口</span></div><div class="line">    targetPort: <span class="number">80</span>  <span class="comment"># pod内部端口</span></div><div class="line">    nodePort: <span class="number">30080</span> <span class="comment"># nodeport端口， 对外端口</span></div></pre></td></tr></table></figure></p>
<p>访问 curl <a href="http://10.68.2.238:30080/index.html" target="_blank" rel="external">http://10.68.2.238:30080/index.html</a></p>
<h4 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h4><p>和NodePort类似，在每个节点上启用一个端口来暴露服务，另外，kubernetes会请求底层云平台上的负载均衡器，将每个Node(nodeip:nodeport)作为后端添加进去</p>
<h3 id="Ingress七层代理"><a href="#Ingress七层代理" class="headerlink" title="Ingress七层代理"></a>Ingress七层代理</h3><ul>
<li>将不同的URL的访问请求转发到后端不同的Service，以实现HTTP层的业务路由机制</li>
<li>kubernetes使用一个Ingress策略定义和一个具体的Ingress Controller，两者结合并实现了一个完整的Ingress负载均衡器</li>
<li>使用Ingress进行负载分发时，Ingress Controller基于Ingress规则将客户端请求直接转发到Service对应的后端Endpoint(Pod)上，这样会跳过Kube-proxy的转发功能，kube-proxy不再起作用</li>
</ul>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">https://github.com/kubernetes/ingress-nginx</div><div class="line"> </div><div class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml</div><div class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml</div><div class="line"># 指定固定访问端口</div></pre></td></tr></table></figure>
<h4 id="Ingress策略配置技巧"><a href="#Ingress策略配置技巧" class="headerlink" title="Ingress策略配置技巧"></a>Ingress策略配置技巧</h4><p>Ingress Controller将以Pod的形式运行，监控API Server的ingress接口后端的backend services，如果Service发生变化，则Ingress Controller应自动更新其转发规则</p>
<ul>
<li>转发到单个后端服务上，请求将转发到后端的唯一Service上，这种情况下Ingress无须定义任何rule</li>
<li><p>同一域名下，不同的url路径转发到不同的服务上</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- mywebsite.com/web 转发到 web-service:80 上</div><div class="line">- mywebset.com/api 转发到api-service:80 上</div></pre></td></tr></table></figure>
</li>
<li><p>不同的域名(虚拟主机名)被转发到不同的服务上，这种配置常用于一个网站通过不同的域名或者虚拟主机名提供不同服务的场景，如foo.bar.com域名由service1提供服务，bar.foo.com域名由service2提供服务</p>
</li>
<li>不使用域名的转发规则 </li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Service</div><div class="line">metadata:</div><div class="line">  name: myapp</div><div class="line">  namespace: default</div><div class="line">spec:</div><div class="line">  selector:</div><div class="line">    app: myapp</div><div class="line">  ports:</div><div class="line">  - name: http</div><div class="line">    targetPort: <span class="number">80</span></div><div class="line">    port: <span class="number">80</span></div><div class="line">---</div><div class="line">apiVersion: extensions/v1beta1</div><div class="line">kind: Ingress</div><div class="line">metadata:</div><div class="line">  name: ingree-myapp</div><div class="line">  namespace: default</div><div class="line">  annotations:</div><div class="line">    kubernetes.io/ingress.<span class="keyword">class</span>: <span class="string">"nginx"</span>    <span class="comment"># 说明和controller相对于的是nginx规则</span></div><div class="line">spec:</div><div class="line">  rules:</div><div class="line">  - host: myapp.ttxsgoto.com    <span class="comment"># </span></div><div class="line">    http:</div><div class="line">      paths:</div><div class="line">      - path:</div><div class="line">        backend:    <span class="comment"># 对应后端的地址</span></div><div class="line">          serviceName: myapp    <span class="comment">#  指定service的名称相匹配</span></div><div class="line">          servicePort: <span class="number">80</span></div><div class="line">---</div><div class="line">apiVersion: apps/v1</div><div class="line">kind: Deployment</div><div class="line">metadata:</div><div class="line">  name: myapp-deploy</div><div class="line">  namespace: default</div><div class="line">spec:</div><div class="line">  replicas: <span class="number">3</span></div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      app: myapp</div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        app: myapp</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: myapp</div><div class="line">        image: ikubernetes/myapp:v2</div><div class="line">        ports:</div><div class="line">        - name: http</div><div class="line">          containerPort: <span class="number">80</span></div></pre></td></tr></table></figure>
<h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>k8s通过服务发现机制能够很容易获得service对应IP和Port</p>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>当 Pod 运行在 Node 上，kubelet 会为每个活跃的 Service 添加一组环境变量，格式就是{SVCNAME}_SERVICE_HOST和{SVCNAME**_SERVICE_PORT的变量，但注意 Service 的名称需大写，横线被转换成下划\线</p>
<p><strong>缺点</strong>: 依赖的服务必须在 Pod 启动之前就存在，不然是不会出现在环境变量中的</p>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>DNS服务监视Kubernetes API,为每个Service创建dns记录用于域名解析<br>资源记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">kubectl get pods -n kube-system| grep dns  # 查看dns pod</div><div class="line">  </div><div class="line">kubectl get svc --all-namespaces   # 查看所有名称空间的服务</div><div class="line"> </div><div class="line">SVC_NAME.NS_NAME.DOMAIN.LTD</div><div class="line">svc.cluster.local</div><div class="line">redis.default.svc.cluster.local</div><div class="line">所有需要使用域名访问的规则SVC_NAME.NS_NAME.svc.cluster.local </div><div class="line">如: myapp.default.svc.cluster.local 使用dns的方式可以访问k8s集群里面任何想要访问的service资源</div></pre></td></tr></table></figure></p>
<h3 id="Headless-Service-clusterIP-None"><a href="#Headless-Service-clusterIP-None" class="headerlink" title="Headless Service(clusterIP: None)"></a>Headless Service(clusterIP: None)</h3><p>Headless Service不需要分配一个VIP，而是可以直接以DNS记录的方式解析出被代理Pod的地址, 主要用途 StatefulSet<br>解析规则：</p>
<ul>
<li>namespace: default</li>
<li>service: foo</li>
<li>pod: A-0</li>
</ul>
<p>域名： a-0.foo.default.svc.cluster.local , 通过DNS服务，查找域名foo.default.svc.cluster.local对应的所有SRV记录，获得一个StatefulSet中所有pod名称</p>
<p>每个pod解析到对应的ip，解析名称规格为：<br>pod_name.service_name.ns_name.cluster.local</p>
<p>不为service设置ClusterIP(入口IP地址)，仅通过label Selector将后端的Pod列表返回给调用的客户端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Service</div><div class="line">metadata:</div><div class="line">  name: myapp</div><div class="line">  namespace: default</div><div class="line">spec:</div><div class="line">  selector:     <span class="comment"># 定义pods对应的标签</span></div><div class="line">    app: myapp</div><div class="line">  clusterIP: <span class="keyword">None</span></div><div class="line">  type: NodePort</div><div class="line">  ports:</div><div class="line">  - port: <span class="number">80</span>        <span class="comment"># 外部访问端口</span></div><div class="line">    targetPort: <span class="number">80</span>  <span class="comment"># pod内部端口</span></div><div class="line">    nodePort: <span class="number">30080</span> <span class="comment"># nodeport端口， 对外端口</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Service功能&quot;&gt;&lt;a href=&quot;#Service功能&quot; class=&quot;headerlink&quot; title=&quot;Service功能&quot;&gt;&lt;/a&gt;Service功能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过Service为一组具有相同功能的容器应用提供统一的入口地址，并将请
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="service" scheme="https://ttxsgoto.github.io/tags/service/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Pods</title>
    <link href="https://ttxsgoto.github.io/2020/03/20/k8s-pods/"/>
    <id>https://ttxsgoto.github.io/2020/03/20/k8s-pods/</id>
    <published>2020-03-20T09:40:23.000Z</published>
    <updated>2020-04-03T08:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="容器内获取pod信息"><a href="#容器内获取pod信息" class="headerlink" title="容器内获取pod信息"></a>容器内获取pod信息</h3><ul>
<li><p>环境变量，将pod信息注入为环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">env：</div><div class="line">  - name: POD_NAME</div><div class="line">    valueFrom:</div><div class="line">      fieldRef:</div><div class="line">        fieldPath: metadata.name</div><div class="line">  - name: POD_NAMESPACE</div><div class="line">    valueFrom:</div><div class="line">      fieldRef:</div><div class="line">        fieldPath: metadata.namespace</div></pre></td></tr></table></figure>
</li>
<li><p>Volume挂载方式,类似于环境变量，只是将数据保存为文件并挂载到内部</p>
</li>
</ul>
<h3 id="Pod生命周期和重启策略"><a href="#Pod生命周期和重启策略" class="headerlink" title="Pod生命周期和重启策略"></a>Pod生命周期和重启策略</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul>
<li>Pending 已创建pod，但还其中容器一个容器镜像还没有创建</li>
<li>Running Pod内所有容器都创建，且至少有一个容器处于运行状态</li>
<li>Successed Pod中所有容器均成功执行并退出，且不会再重启</li>
<li>Failed Pod内所有容器都已退出，单至少有一个容器退出为失败状态</li>
<li>Unknown 无法获取该Pod的状态</li>
</ul>
<h4 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h4><ul>
<li>Always 默认，当容器失效时，kubelet自动重启该容器</li>
<li>OnFailure 容器终止运行且退出码不为0，kubelet自动重启该容器</li>
<li>Never 无论容器运行状态如何，kubelet都不会重启容器</li>
</ul>
<p>kubelet重启失效容器的时间间隔以sync-frequency乘以2n，如1，2，4，8倍，最长延时5min，并在成功重启后10min后重置该时间</p>
<p>每种控制器对pod的重启策略要去如下：</p>
<ul>
<li>RC和DaemonSet 必须设置为always，需要保证该容器持续运行</li>
<li>Job OnFailure或者Never，确保容器执行完成后不再重启</li>
<li>kubelet 在pod失效时自动重启，不论将RestartPolicy设置为什么值，都不会对pod进行健康检查</li>
</ul>
<h3 id="健康检查和服务可用性检查"><a href="#健康检查和服务可用性检查" class="headerlink" title="健康检查和服务可用性检查"></a>健康检查和服务可用性检查</h3><h4 id="LivenessProbe探针"><a href="#LivenessProbe探针" class="headerlink" title="LivenessProbe探针"></a>LivenessProbe探针</h4><p>判断容器是否存活，如果探针探测到容器不健康，则会kill掉容器。如果不包含该探针，则该容器的LivenessProbe探针返回值永远是Success</p>
<h4 id="ReadinessProbe探针"><a href="#ReadinessProbe探针" class="headerlink" title="ReadinessProbe探针"></a>ReadinessProbe探针</h4><p>判断容器服务是否可用(Ready状态)，达到Ready状态的Pod才可以接收请求</p>
<ul>
<li>ExecAction 执行命令</li>
<li>TCPSocketAction socket的ip和端口检查</li>
<li>HTTPGetAction 调用http get方法状态码大于等于200且小于400，正常  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- initialDelaySeconds 启动容器后进行首次检查的等待时间，单位为s</div><div class="line">- timeoutSeconds 健康检查发送请求后等待响应的超时时间，单位为s</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h3><h4 id="NodeSelector"><a href="#NodeSelector" class="headerlink" title="NodeSelector"></a>NodeSelector</h4><p>通过node标签和pod的nodeselector属性匹配来定向调到到某个node节点上</p>
<h4 id="NodeAffinity亲和性调度"><a href="#NodeAffinity亲和性调度" class="headerlink" title="NodeAffinity亲和性调度"></a>NodeAffinity亲和性调度</h4><p>硬亲和requiredDuringSchedulingIgnoredDuringExecution 必须满足指定的规则才可以调度pod到node上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-nodeaffinity</div><div class="line">  namespace: default</div><div class="line">  labels:</div><div class="line">   app: myapp-nodeselector</div><div class="line">   tier: frontend</div><div class="line">  annotations:</div><div class="line">    created-by: <span class="string">"ttxsgoto"</span></div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: myapp</div><div class="line">    image: ikubernetes/myapp:v1</div><div class="line">  affinity:</div><div class="line">    nodeAffinity:</div><div class="line">      requiredDuringSchedulingIgnoredDuringExecution:	<span class="comment"># 硬亲和性</span></div><div class="line">        nodeSelectorTerms:</div><div class="line">        - matchExpressions:</div><div class="line">          - key: zone</div><div class="line">            operator: In</div><div class="line">            values:</div><div class="line">            - foo</div><div class="line">            - bar</div></pre></td></tr></table></figure></p>
<p>软亲和preferredDuringSchedulingIgnoredDuringExecution 强调优先满足指定规则，则尝试调到pod到node，但如果没有满足条件，也调度到node，不强制限制<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-nodeaffinity2</div><div class="line">  namespace: default</div><div class="line">  labels:</div><div class="line">   app: myapp-nodeselector</div><div class="line">   tier: frontend</div><div class="line">  annotations:</div><div class="line">    created-by: <span class="string">"ttxsgoto"</span></div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: myapp</div><div class="line">    image: ikubernetes/myapp:v1</div><div class="line">  affinity:</div><div class="line">    nodeAffinity:</div><div class="line">      preferredDuringSchedulingIgnoredDuringExecution:	<span class="comment"># 软亲和性</span></div><div class="line">      - preference:</div><div class="line">          matchExpressions:</div><div class="line">          - key: zone</div><div class="line">            operator: In</div><div class="line">            values:</div><div class="line">            - foo</div><div class="line">            - bar</div><div class="line">        weight: 60</div></pre></td></tr></table></figure></p>
<p><strong>说明</strong></p>
<ol>
<li>如果同时定义了nodeSelector和nodeAffinty，那么必须满足两个条件，pod才能运行在指定的node上</li>
<li>如果nodeAffinity指定了多个nodeSelectorTerms，那么其中一个能够匹配成功即可</li>
<li>如果nodeSelectorTerms中有多个matchExpressions，则一个节点必须满足所有的matchExpressions才能运行该Pod</li>
</ol>
<h4 id="PodAffinity亲和性调度"><a href="#PodAffinity亲和性调度" class="headerlink" title="PodAffinity亲和性调度"></a>PodAffinity亲和性调度</h4><p>根据在节点上正在运行的pod的标签来判断调度，要求对节点和Pod两个条件进行匹配， 第一个pod启动，其他的pod也在该node启动</p>
<p>requiredDuringSchedulingIgnoredDuringExecution  必须满足指定的规则才可以调度pod到node上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-first</div><div class="line">  namespace: default</div><div class="line">  labels:</div><div class="line">   app: myapp-nodeselector</div><div class="line">   tier: frontend</div><div class="line">  annotations:</div><div class="line">    created-by: <span class="string">"ttxsgoto"</span></div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: myapp</div><div class="line">    image: ikubernetes/myapp:v1</div><div class="line">---</div><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-second</div><div class="line">  namespace: default</div><div class="line">  labels:</div><div class="line">   app: myapp-db</div><div class="line">   tier: db</div><div class="line">  annotations:</div><div class="line">    created-by: <span class="string">"ttxsgoto"</span></div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: busybox</div><div class="line">    image: busybox:latest</div><div class="line">    imagePullPolicy: IfNotPresent</div><div class="line">    <span class="built_in">command</span>: [<span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"sleep 3600"</span>]</div><div class="line">  affinity:</div><div class="line">    podAffinity:</div><div class="line">      requiredDuringSchedulingIgnoredDuringExecution:</div><div class="line">      - labelSelector:</div><div class="line">          matchExpressions:</div><div class="line">          - &#123;key: app, operator: In, values: [<span class="string">"myapp-nodeselector"</span>]&#125;</div><div class="line">        topologyKey: kubernetes.io/hostname</div></pre></td></tr></table></figure></p>
<p>反亲和性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-first</div><div class="line">  namespace: default</div><div class="line">  labels:</div><div class="line">   app: myapp-nodeselector</div><div class="line">   tier: frontend</div><div class="line">  annotations:</div><div class="line">    created-by: <span class="string">"ttxsgoto"</span></div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: myapp</div><div class="line">    image: ikubernetes/myapp:v1</div><div class="line">---</div><div class="line">apiVersion: v1</div><div class="line">kind: Pod</div><div class="line">metadata:</div><div class="line">  name: pod-second</div><div class="line">  namespace: default</div><div class="line">  labels:</div><div class="line">   app: myapp-db</div><div class="line">   tier: db</div><div class="line">  annotations:</div><div class="line">    created-by: <span class="string">"ttxsgoto"</span></div><div class="line">spec:</div><div class="line">  containers:</div><div class="line">  - name: busybox</div><div class="line">    image: busybox:latest</div><div class="line">    imagePullPolicy: IfNotPresent</div><div class="line">    <span class="built_in">command</span>: [<span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"sleep 3600"</span>]</div><div class="line">  affinity:</div><div class="line">    podAntiAffinity:</div><div class="line">      requiredDuringSchedulingIgnoredDuringExecution:</div><div class="line">      - labelSelector:</div><div class="line">          matchExpressions:</div><div class="line">          - &#123;key: app, operator: In, values: [<span class="string">"myapp-nodeselector"</span>]&#125;</div><div class="line">        topologyKey: kubernetes.io/hostname</div></pre></td></tr></table></figure></p>
<h4 id="Taints-and-Tolerations-污点和容忍"><a href="#Taints-and-Tolerations-污点和容忍" class="headerlink" title="Taints and Tolerations 污点和容忍"></a>Taints and Tolerations 污点和容忍</h4><p>让Node拒绝Pod的运行，让Pod避开那些不合适的Node，除非pod明确声明能够容忍这些污点，否则无法在这些node上运行</p>
<ul>
<li>NoSchedule 仅影响调度过程，对已启动的Pod对象不产生影响，明确声明可以容忍这个taint，否则就不会调度到该node上</li>
<li>PreferNoSchedule 既影响调度过程，也影响现有的Pod对象，意思为优先，没有对应的node可以运行，也可以调度到node， 可以为NoSchedule的软限制</li>
<li>NoExecute 即影响调度过程，也影响现在的pod对象，Pod已经在该节点运行，则会被驱逐，如果没有在该节点上运行，则不会再被调度到该节点上</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置Node上 Taint信息</span></div><div class="line">kubectl taint nodes node1 key=value:NoSchedule</div><div class="line"> </div><div class="line"><span class="comment"># pod中声明Toleration</span></div><div class="line">tolerations:</div><div class="line">- key: <span class="string">"key"</span></div><div class="line">  operator: <span class="string">"Equal"</span></div><div class="line">  value: <span class="string">"value1"</span></div><div class="line">  effect: <span class="string">"NoSchedule"</span></div><div class="line">或者</div><div class="line">tolerations:</div><div class="line">- key: <span class="string">"key"</span></div><div class="line">  operator: <span class="string">"Exists"</span></div><div class="line">  effect: <span class="string">"NoSchedule"</span> </div><div class="line"> </div><div class="line">说明：</div><div class="line">- 如果不指定operator，默认为Equal</div><div class="line">- 空的key配合Exists操作符能够匹配所有的键和值</div><div class="line">- 空的effect匹配所有的effect</div></pre></td></tr></table></figure>
<h3 id="Pod调度"><a href="#Pod调度" class="headerlink" title="Pod调度"></a>Pod调度</h3><ul>
<li>RC &amp; Deployment</li>
<li>DaemonSet</li>
<li>Job</li>
<li>Cronjob</li>
</ul>
<h4 id="RC-amp-Deployment"><a href="#RC-amp-Deployment" class="headerlink" title="RC &amp; Deployment"></a>RC &amp; Deployment</h4><p>自动部署一个容器的多个副本，以及持续监控副本的数量，在集群内始终维持指定的副本数量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">apiVersion: apps/v1</div><div class="line"><span class="comment">#apiVersion: apps/v1beta1</span></div><div class="line">kind: Deployment</div><div class="line">metadata:</div><div class="line">  name: nginx-deployment</div><div class="line">spec:</div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      app: nginx</div><div class="line">  replicas: 3</div><div class="line">  minReadySeconds: 5  <span class="comment"># kubernetes在等待设置的时间后才进行升级</span></div><div class="line">  strategy:</div><div class="line">    <span class="built_in">type</span>: rollingUpdate <span class="comment"># 更新策略，滚动更新</span></div><div class="line">    rollingUpdate:</div><div class="line">      maxSurge: 25%     <span class="comment"># 指定可以超过期望的pod数量的最大百分比，也可以是个数</span></div><div class="line">      maxUnavailable: 25% <span class="comment"># 指定升级过程中不可用pod的最大数量</span></div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        app: nginx</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: nginx</div><div class="line">        image: nginx:1.7.9</div><div class="line">        ports:</div><div class="line">        - containerPort: 80</div></pre></td></tr></table></figure></p>
<p>常用命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">kubectl rollout status deployment/nginx-deployment  <span class="comment"># 查看状态</span></div><div class="line">kubectl rollout pause deployment &lt;deployment-name&gt; <span class="comment"># 暂停升级</span></div><div class="line">kubectl rollout resume deploymnet &lt;deployment-name&gt; <span class="comment"># 继续升级</span></div><div class="line">kubectl rollout history deployment &lt;deployment-name&gt;  <span class="comment"># 查看Deployment的升级历史</span></div><div class="line">kubectl rollout history deploymnet &lt;deployment-name&gt; --revision=n   <span class="comment"># 查看单个deploy revision的信息</span></div><div class="line">kubectl rollout undo deployment &lt;deployment-name&gt; <span class="comment"># 回退到上一个版本</span></div><div class="line">kubectl rollout undo deployment &lt;deployment-name&gt; --to-revision=<span class="number">2</span>   <span class="comment"># 回滚到指定版本</span></div></pre></td></tr></table></figure></p>
<h4 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h4><ul>
<li>在每个node上都调度一个pod，适用于监控系统，数据采集等资源的采集</li>
<li>新加入的node也同样会自动运行一个pod</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">apiVersion: apps/v1</div><div class="line">kind: DaemonSet</div><div class="line">metadata:</div><div class="line">  name: jumpserver-nginx</div><div class="line">  labels:</div><div class="line">    app.kubernetes.io/name: nginx</div><div class="line">spec:</div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      app.kubernetes.io/name: nginx</div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        app.kubernetes.io/name: nginx</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: jms-nginx</div><div class="line">        image: wojiushixiaobai/jms_nginx:<span class="number">1.5</span><span class="number">.6</span></div><div class="line">        ports:</div><div class="line">        - containerPort: <span class="number">80</span></div><div class="line">          name: nginx</div><div class="line">          protocol: TCP</div><div class="line">        volumeMounts:</div><div class="line">        - name: static</div><div class="line">          mountPath: /opt/jumpserver/data/static</div><div class="line">        - name: media</div><div class="line">          mountPath: /opt/jumpserver/data/media</div><div class="line">      volumes:</div><div class="line">      - name: static</div><div class="line">        nfs:</div><div class="line">          path: /data/core/static</div><div class="line">          server: <span class="number">192.168</span><span class="number">.238</span><span class="number">.100</span></div><div class="line">      - name: media</div><div class="line">        nfs:</div><div class="line">          path: /data/core/media</div><div class="line">          server: <span class="number">192.168</span><span class="number">.238</span><span class="number">.100</span></div></pre></td></tr></table></figure>
<h4 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h4><p>批处理调度,仅执行一次的任务，保证处理任务的一个或者多个pod成功结束<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">apiVersion: batch/v1</div><div class="line">kind: Job</div><div class="line">metadata:</div><div class="line">  name: k8s-job</div><div class="line">spec:</div><div class="line">  template:</div><div class="line">    spec:</div><div class="line">      containers:</div><div class="line">      - name: python</div><div class="line">        image: python:3.8-alpine</div><div class="line">        <span class="built_in">command</span>: [<span class="string">"python"</span>, <span class="string">"-c"</span>, <span class="string">"import socket; print(socket.gethostbyname(socket.gethostname()))"</span>]</div><div class="line">      restartPolicy: Never</div><div class="line">  backoffLimit: 4</div></pre></td></tr></table></figure></p>
<h4 id="Cronjob"><a href="#Cronjob" class="headerlink" title="Cronjob"></a>Cronjob</h4><ul>
<li>在给定时间点只运行一次</li>
<li>周期性地给定时间点运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">apiVersion: batch/v1beta1</div><div class="line">kind: CronJob</div><div class="line">metadata:</div><div class="line">  name: k8s-cronjob</div><div class="line">spec:</div><div class="line">  schedule: <span class="string">"*/1 * * * *"</span></div><div class="line">  jobTemplate:</div><div class="line">    spec:</div><div class="line">      template:</div><div class="line">        spec:</div><div class="line">          containers:</div><div class="line">          - name: python</div><div class="line">            image: python:3.8-alpine</div><div class="line">            <span class="built_in">command</span>: [<span class="string">"python"</span>, <span class="string">"-c"</span>, <span class="string">"import socket; print(socket.gethostbyname(socket.gethostname()))"</span>]</div><div class="line">          restartPolicy: OnFailure</div></pre></td></tr></table></figure>
<h3 id="Init-Container-初始化容器"><a href="#Init-Container-初始化容器" class="headerlink" title="Init Container 初始化容器"></a>Init Container 初始化容器</h3><p>应用场景</p>
<ul>
<li>等待其他关联组件正确运行</li>
<li>基于环境变量或者配置模板生成配置文件</li>
<li>从远程数据库中获取本地所需配置，或者自身注册到某个中央数据库中</li>
<li>下载相关依赖包，或者对系统进行一些预配置</li>
</ul>
<p>init Container和应用容器的区别：</p>
<ul>
<li>先于应用容器执行，如果设置多个init container，按顺序运行，并且当前一个init container运行成功后，在运行下一个，所有都运行成功后，才会运行应用容器</li>
<li>在init container的定义中也可以设置资源限制，volume的使用</li>
<li>如果多个init container都定义了资源请求，则取最大的值作为所有init container的资源请求值/资源限制值</li>
<li>调度算法将基于pod的有效资源请求值/资源限制值进行计算</li>
<li>init container不能设置readinessProbe探针</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">initContainers:</div><div class="line">- name: install</div><div class="line">  image: busybox</div><div class="line">  command:</div><div class="line">  - &quot;sh&quot;</div><div class="line">  - &quot;-c&quot;</div><div class="line">  - &quot;ls&quot;</div></pre></td></tr></table></figure>
<h3 id="Pod升级和回滚"><a href="#Pod升级和回滚" class="headerlink" title="Pod升级和回滚"></a>Pod升级和回滚</h3><h4 id="Deployment-升级和回滚"><a href="#Deployment-升级和回滚" class="headerlink" title="Deployment 升级和回滚"></a>Deployment 升级和回滚</h4><ul>
<li>deployment升级镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1</div><div class="line">或者</div><div class="line">kubectl edit deployment/nginx-deployment</div><div class="line">  </div><div class="line"># 查看升级状态</div><div class="line">kubectl rollout status deployment/nginx-deployment</div><div class="line"># 查看rs状态</div><div class="line">kubectl get rs</div></pre></td></tr></table></figure>
<p>更新策略说明：</p>
<ul>
<li>在deployment的定义中，可以通过spec.strategy指定pod更新策略，重建(Recreate)和滚动更新(RollingUpdate),默认为RollingUpdate</li>
<li>spec.strategy.rollingUpdate.maxUnavilable 指定deployment在更新过程中不可用状态的Pod数量的上限</li>
<li>spec.strategy.rollingUpdate.maxSurge 指定在deployment更新pod的过程中pod总数超过pod期望副本数部分的最大值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 查看deployment部署记录</div><div class="line">kubectl rollout history deployment/nginx-deployment</div><div class="line"> </div><div class="line"># 回滚到上一个部署版本</div><div class="line">kubectl rollout undo deployment/nginx-deployment</div><div class="line">或者</div><div class="line">kubectl rollout undo deployment/nginx-deployment --to-revision=2 # 回滚到之前稳定版本</div></pre></td></tr></table></figure>
<h4 id="暂停和恢复Deployment部署"><a href="#暂停和恢复Deployment部署" class="headerlink" title="暂停和恢复Deployment部署"></a>暂停和恢复Deployment部署</h4><p>复杂的deployment配置修改，可以先暂停deployment的更新操作，然后进行配置修改，在恢复deployment，一次性触发完整的更新操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 暂停deployment更新操作</div><div class="line">kubectl rollout pause deployment/nginx-deployment</div><div class="line"># 修改更新操作</div><div class="line"># 恢复deployment更新</div><div class="line">kubectl rollout resume deploy nginx-deployment</div></pre></td></tr></table></figure></p>
<h3 id="Pod的扩缩容"><a href="#Pod的扩缩容" class="headerlink" title="Pod的扩缩容"></a>Pod的扩缩容</h3><h4 id="手动扩缩容机制"><a href="#手动扩缩容机制" class="headerlink" title="手动扩缩容机制"></a>手动扩缩容机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl scale deployment nginx-deployment --replicas=5</div></pre></td></tr></table></figure>
<h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul>
<li>通过环境变量获取configmp的内容</li>
<li>通过volume挂载的方式将configmap中的内容挂载为容器内部的文件或目录</li>
<li>设置容器启动命令的启动参数(引用环境变量)</li>
</ul>
<h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><ul>
<li><p>yaml配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apiVersion: v1</div><div class="line">kind: ConfigMap</div><div class="line">metadata:</div><div class="line">  name: cm-demo</div><div class="line">data:</div><div class="line">  loglevel: info</div><div class="line">  datadir: /data/www</div></pre></td></tr></table></figure>
</li>
<li><p>通过命令行方式创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 直接指定k-v</div><div class="line">kubectl create configmap NAME --from-literal=key=value</div><div class="line"># 通过目录/文件创建</div><div class="line">kubectl create config NAME --from-file=config-dir or config-file</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul>
<li><p>环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">env:</div><div class="line">- name: LOGLEVEL</div><div class="line">  valueFrom:</div><div class="line">    configMapRef</div><div class="line">      name: cm-demo</div><div class="line">      key: loglevel</div><div class="line">或者</div><div class="line">envFrom:</div><div class="line">  - configMapRef</div><div class="line">    name: cm-demo # 根据cm-demo中的kv自动生成环境变量</div></pre></td></tr></table></figure>
</li>
<li><p>volumeMount使用ConfigMap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">volumeMounts:</div><div class="line">- name: configpath</div><div class="line">  mountPath: /data/config</div><div class="line"></div><div class="line">volumes:</div><div class="line">- name: configpath</div><div class="line">  configMap:</div><div class="line">    # 如果不指定items，则每个item都会生成一个文件名为key的文件</div><div class="line">    name: cm-demo</div><div class="line">    items:</div><div class="line">    - key: serverxml</div><div class="line">      path: server.xml</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ConfigMap的限制条件"><a href="#ConfigMap的限制条件" class="headerlink" title="ConfigMap的限制条件"></a>ConfigMap的限制条件</h4><ul>
<li>configmap必须在pod之前创建</li>
<li>configmap在相同的namespace中的pod使用</li>
<li>configmap中的配额管理还未实现</li>
<li>通过–manifest-url或者–config创建的静态pod无法使用configmap</li>
<li>configmap挂载操作，在容器中只能挂载为目录，不能为文件</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;容器内获取pod信息&quot;&gt;&lt;a href=&quot;#容器内获取pod信息&quot; class=&quot;headerlink&quot; title=&quot;容器内获取pod信息&quot;&gt;&lt;/a&gt;容器内获取pod信息&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;环境变量，将pod信息注入为环境变量&lt;/p&gt;
&lt;figur
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="pods" scheme="https://ttxsgoto.github.io/tags/pods/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 集群部署</title>
    <link href="https://ttxsgoto.github.io/2020/03/20/k8s-cluster-install/"/>
    <id>https://ttxsgoto.github.io/2020/03/20/k8s-cluster-install/</id>
    <published>2020-03-20T08:42:34.000Z</published>
    <updated>2020-03-20T09:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><ul>
<li>192.168.2.100 (master, ubuntu 16.04)</li>
<li>192.168.2.99 (node1, ubuntu 16.04)</li>
<li>192.168.2.101(node2, ubuntu 16.04) </li>
</ul>
<h4 id="Install-Docker"><a href="#Install-Docker" class="headerlink" title="Install Docker"></a>Install Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># master, node1, node2</span></div><div class="line">apt-get install apt-transport-https ca-certificates curl software-properties-common -y</div><div class="line"> </div><div class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -</div><div class="line"> </div><div class="line">add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></div><div class="line"> </div><div class="line">apt-get update -y</div><div class="line">apt-get install docker-ce -y</div></pre></td></tr></table></figure>
<h4 id="Install-Kubernetes"><a href="#Install-Kubernetes" class="headerlink" title="Install Kubernetes"></a>Install Kubernetes</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># master, node1, node2</span></div><div class="line">curl <span class="_">-s</span> https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">'deb http://apt.kubernetes.io/ kubernetes-xenial main'</span> | sudo tee /etc/apt/sources.list.d/kubernetes.list</div><div class="line"> </div><div class="line">apt-get update -y</div><div class="line">apt-get install kubelet kubeadm kubectl -y</div></pre></td></tr></table></figure>
<h4 id="Kubernetes-Cluster"><a href="#Kubernetes-Cluster" class="headerlink" title="Kubernetes Cluster"></a>Kubernetes Cluster</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># master</span></div><div class="line">kubeadm init \</div><div class="line">  --apiserver-advertise-address=192.168.2.100 \</div><div class="line">  --kubernetes-version v1.17.3 \</div><div class="line">  --service-cidr=10.96.0.0/12 \</div><div class="line">  --pod-network-cidr=10.244.0.0/16  --v=6</div><div class="line">  </div><div class="line"><span class="comment"># Install Pod network（CNI）</span></div><div class="line">kubectl apply <span class="_">-f</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</div><div class="line">  </div><div class="line">mkdir -p <span class="variable">$HOME</span>/.kube</div><div class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</div><div class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</div><div class="line"> </div><div class="line"><span class="comment"># node1, node2</span></div><div class="line">kubeadm join 192.168.2.100:6443 --token iccmkm.qu60zi1gjdtrqo41 \</div><div class="line">    --discovery-token-ca-cert-hash sha256:fffd09fe6d8818acc5fd42ce679661f550a3890e1d97e2f6a6609efa435005ac</div><div class="line">  </div><div class="line"><span class="comment">#查看添加进集群的token命令</span></div><div class="line">kubeadm token create --print-join-command</div><div class="line"> </div><div class="line"><span class="comment"># Install Dashboard</span></div><div class="line">kubectl apply <span class="_">-f</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</div><div class="line"> </div><div class="line">默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：</div><div class="line"><span class="comment">##### begin #####</span></div><div class="line">kind: Service</div><div class="line">apiVersion: v1</div><div class="line">metadata:</div><div class="line">  labels:</div><div class="line">    k8s-app: kubernetes-dashboard</div><div class="line">  name: kubernetes-dashboard</div><div class="line">  namespace: kubernetes-dashboard</div><div class="line">spec:</div><div class="line">  <span class="built_in">type</span>: NodePort</div><div class="line">  ports:</div><div class="line">    - port: 443</div><div class="line">      targetPort: 8443</div><div class="line">      nodePort: 30443</div><div class="line">  selector:</div><div class="line">    k8s-app: kubernetes-dashboard</div><div class="line"> <span class="comment">##### end #####</span></div><div class="line"><span class="comment"># 创建service account并绑定默认cluster-admin管理员集群角色：</span></div><div class="line">kubectl create serviceaccount dashboard-admin -n kube-system</div><div class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</div><div class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class="string">'/dashboard-admin/&#123;print $1&#125;'</span>)</div><div class="line"><span class="comment"># 使用输出的token登录Dashboard</span></div><div class="line">  </div><div class="line">kubectl create serviceaccount k8s-admin -n kube-system</div><div class="line">kubectl create clusterrolebinding k8s-admin --clusterrole=cluster-admin --serviceaccount=kube-system:k8s-admin</div><div class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class="string">'/k8s-admin/&#123;print $1&#125;'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># check cluster status</span></div><div class="line">kubectl get nodes</div><div class="line">NAME                         STATUS   ROLES    AGE   VERSION</div><div class="line">node1  			      Ready    &lt;none&gt;   22h   v1.17.4</div><div class="line">master                        Ready    master   22h   v1.17.4</div><div class="line">node2                         Ready    &lt;none&gt;   22h   v1.17.4</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Environment&quot;&gt;&lt;a href=&quot;#Environment&quot; class=&quot;headerlink&quot; title=&quot;Environment&quot;&gt;&lt;/a&gt;Environment&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;192.168.2.100 (master, ubunt
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="k8s" scheme="https://ttxsgoto.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 核心组件</title>
    <link href="https://ttxsgoto.github.io/2020/03/20/k8s-core-component/"/>
    <id>https://ttxsgoto.github.io/2020/03/20/k8s-core-component/</id>
    <published>2020-03-20T08:19:12.000Z</published>
    <updated>2020-03-20T08:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="API-Server原理解析"><a href="#API-Server原理解析" class="headerlink" title="API Server原理解析"></a>API Server原理解析</h3><p>各类资源对象(Pod,RC,Service)的CURD和watch等HTTP REST接口，成为集群内各个功能模块之间数据交互和通信的中心枢纽，是整个系统的数据总线和数据中心</p>
<ul>
<li>api server 通过一个名为kube-apiserver的进程提供服务，运行在master上，默认情况下，该进程在本机的8080端口或(6443端口)提供rest服务</li>
<li>通过kubectl和api server交互</li>
<li>提供认证、授权、访问控制、api注册和发现等机制</li>
<li>启动代理来访问 kubectl proxy –port=8080</li>
<li>每个Node的kubelet每隔一段时间，调用api server的api接口报告自身状态，更新到etcd中</li>
<li>kube-controller-manager的Node Controller模块和api server交互，实时监控Node信息</li>
<li>kube-scheduler通过api server的watch接口监听到新建pod副本的信息后，在调度成功后将pod绑定到目标节点上</li>
</ul>
<p>Proxy API 接口: 在Kubernetes集群外访问某个pod容器的服务(http服务)时，可以用proxy api实现</p>
<h3 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller Manager"></a>Controller Manager</h3><p>Controller尝试将状态调整为期望的状态， Controller Manager是k8s中各种操作系统的管理者，是集群内部的管理控制中心，是k8s自动化功能的核心<br>包含8种Controller：</p>
<ul>
<li>Replication Controller</li>
<li>Node Controller</li>
<li>ResourceQuota Controller</li>
<li>Namespace Controller</li>
<li>ServiceAccount Controller</li>
<li>Token Controller</li>
<li>Service Controller</li>
<li>Endpoint Controller</li>
</ul>
<p>Controller Manager是这些Controller的核心管理者</p>
<h4 id="Replication-Controller-副本控制器"><a href="#Replication-Controller-副本控制器" class="headerlink" title="Replication Controller 副本控制器"></a>Replication Controller 副本控制器</h4><p>确保在任何时候集群中某个RC关联的Pod副本数量都保持预设值，需要将pod重启策略设置为always(RestartPolicy=Always),Replication Controller才会管理该pod的操作</p>
<p>功能总结：</p>
<ul>
<li>确保当前集群中有且仅有N个pod实例，N是在RC中定义的Pod副本数量</li>
<li>通过调整RC的spec.replicas属性值来实现系统的扩容和缩容</li>
<li>通过改变RC中的Pod模板(主要是镜像版本)来实现系统的滚动升级</li>
</ul>
<h4 id="Node-Controller"><a href="#Node-Controller" class="headerlink" title="Node Controller"></a>Node Controller</h4><p>Node Controller通过api server实时获取Node的相关信息，实现管理和监控集群中的各个node的相关控制功能</p>
<h4 id="RecourceQuota-Controller-资源配额管理"><a href="#RecourceQuota-Controller-资源配额管理" class="headerlink" title="RecourceQuota Controller 资源配额管理"></a>RecourceQuota Controller 资源配额管理</h4><p>确保指定的资源对象在任何时候都不会超量占用系统物理资源</p>
<ul>
<li>容器级别，可以对CPU和Memory进行限制</li>
<li>pod级别，可以对一个pod内所有容器的可用资源进行限制</li>
<li>Namespace级别，为namespace(多租户)级别的资源限制  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- pod数量</div><div class="line">- Replication Controller数量</div><div class="line">- Service数量</div><div class="line">- ResourceQuota数量</div><div class="line">- Secret数量</div><div class="line">- 可持有的PV数量</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Namespace-Controller"><a href="#Namespace-Controller" class="headerlink" title="Namespace Controller"></a>Namespace Controller</h4><p>通过api server 可以创建新的Namespace，并将其保存到etcd中，Namespace Controller定时通过api server读取这些Namespace的信息</p>
<h4 id="Service-Controller-amp-amp-Endpoint-Controller"><a href="#Service-Controller-amp-amp-Endpoint-Controller" class="headerlink" title="Service Controller &amp;&amp; Endpoint Controller"></a>Service Controller &amp;&amp; Endpoint Controller</h4><p>Endpoints表示一个Service对应的所有pod副本的访问地址，Endpoints Controller负责生成和维护所有Endpoints对象的控制器</p>
<p>Service Controller是和外部的接口控制器</p>
<ul>
<li>ServiceAccount Controller</li>
<li>Token Controller</li>
</ul>
<h3 id="Scheduler原理"><a href="#Scheduler原理" class="headerlink" title="Scheduler原理"></a>Scheduler原理</h3><p>将待调度的Pod(api新创建的Pod、Controller Manager为补足副本而创建的Pod等)按照特定的调度算法和策略绑定(binding)到集群中某个合适的node上，并将绑定信息写入etcd中</p>
<ul>
<li>待调度Pod列表</li>
<li>可用Node列表</li>
<li>调度算法和策略</li>
</ul>
<p>目标节点上的kubelet通过API server监听到的scheduler产生的pod绑定事件，然后获取对应的pod清单，下载image和启动容器</p>
<p>默认的调度流程如下：</p>
<ol>
<li>预选调度过程，即遍历所有目标node，筛选符合要求的候选节点</li>
<li>确定最优节点，采用优选策略计算出每个候选节点的积分，积分最高者胜出</li>
</ol>
<h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><ul>
<li>NoDiskConflict     默认</li>
<li>PodFitsResources    默认</li>
<li>PodSelectorMatches    默认</li>
<li>PodFitsHost    默认</li>
<li>CheckNodeLabelPresence</li>
<li>CheckServiceAffinity</li>
<li>PodFitsPorts    默认</li>
</ul>
<h4 id="NoDiskConflict"><a href="#NoDiskConflict" class="headerlink" title="NoDiskConflict"></a>NoDiskConflict</h4><p>判断备选的Pod的gcePersistentDisk或AWSElasticBlockStore和备选的节点中已存在的Pod是否存在冲突</p>
<h4 id="PodFitsResources"><a href="#PodFitsResources" class="headerlink" title="PodFitsResources"></a>PodFitsResources</h4><p>判断备选节点的资源是否满足备选Pod的需求</p>
<ol>
<li>计算备用pod和节点中已存在的pod容器所需资源(cpu 和内存)的总和</li>
<li>获得备选节点的状态信息，其中包含节点的资源信息</li>
<li>如果备选pod和节点中已存在pod的所有容器的需求资源总和，超出了备选节点拥有的资源，返回false，否则返回true</li>
</ol>
<h4 id="PodSelectorMatches"><a href="#PodSelectorMatches" class="headerlink" title="PodSelectorMatches"></a>PodSelectorMatches</h4><p>判断备选节点是否包含备选pod的标签选择器指定的标签</p>
<ol>
<li>如果pod没有指定spec.nodeSelector标签选择器,则返回true</li>
<li>获取备选节点的标签信息，判断节点是否包含备选pod的标签选择器(spec.nodeSelector)所指定的标签，如果包含返回true，否则返回false</li>
</ol>
<h4 id="PodFitsHost"><a href="#PodFitsHost" class="headerlink" title="PodFitsHost"></a>PodFitsHost</h4><p>判断备选pod的spec.nodeName域所指定的节点名称和备选节点的名称是否一致，如果一致返回true，否则返回false</p>
<h4 id="CheckNodeLabelPresence"><a href="#CheckNodeLabelPresence" class="headerlink" title="CheckNodeLabelPresence"></a>CheckNodeLabelPresence</h4><p>配置文件中指定了该策略，则scheduler会通过RegisterCustomFitPredicate方法注册该策略</p>
<ol>
<li>读取备选节点的标签列表信息</li>
<li>如果策略配置的标签列表存在于备选节点的标签列表中，且策略配置的presence值为false，则返回false，否则返回true，如果策略配置的标签列表不存在于备选节点的标签列表中，且策略配置的presence值为true，返回false，否则返回true</li>
</ol>
<h4 id="CheckServiceAffinity"><a href="#CheckServiceAffinity" class="headerlink" title="CheckServiceAffinity"></a>CheckServiceAffinity</h4><p>该策略用于判断备选节点是否包含策略指定的标签，或包含和备选Pod在相同Service和Namespace下的Pod所在节点的标签列表，如果存在，则返回true，否则返回false</p>
<h4 id="PodFitsPorts"><a href="#PodFitsPorts" class="headerlink" title="PodFitsPorts"></a>PodFitsPorts</h4><p>判断备选pod所用的端口列表中的端口是否在备选节点中已被占用，如果被占用，则返回false，否则返回true</p>
<h3 id="Kubelet运行机制解析"><a href="#Kubelet运行机制解析" class="headerlink" title="Kubelet运行机制解析"></a>Kubelet运行机制解析</h3><p>每个node上都会启动一个kubelet服务进程，该进程用于处理master下发到本节点的任务，管理pod和pod中的容器，同时通过api定期向master节点汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源</p>
<h4 id="容器健康检查"><a href="#容器健康检查" class="headerlink" title="容器健康检查"></a>容器健康检查</h4><ul>
<li>LivenessProbe探针 判断容器健康并反馈给kubelet，如果没有则返回值为success</li>
<li>ReadlinessProbe探针 判断容器是否启动完成，且准备接收请求</li>
</ul>
<h4 id="cAdvisor资源监控"><a href="#cAdvisor资源监控" class="headerlink" title="cAdvisor资源监控"></a>cAdvisor资源监控</h4><p>kubelet通过cAdvisor获取其所在节点和容器的数据，cAdvisor自动查找所有在其所在node上的容器，自动采取cpu、内存、文件系统和网络使用的统计信息</p>
<h3 id="Kube-proxy运行机制解析"><a href="#Kube-proxy运行机制解析" class="headerlink" title="Kube-proxy运行机制解析"></a>Kube-proxy运行机制解析</h3><p>在Kubernetes集群中的每个node上都会运行一个kube-proxy服务进程，功能将到某个service的访问请求转发到后端的多个pod实例上</p>
<p>Service的Cluster IP和Nodeport是kube-proxy服务通过IPtables的NAT转换实现，kube-proxy在运行过程中动态创建与Service相关的iptables规则，这些规则实现了将访问服务的请求负载分发到后端pod的功能</p>
<p>核心思想： 通过api server的watch接口实时跟踪service和endpoint的变更信息，并更新对应的iptables规则，client的请求流量则通过iptables的NAT机制”直接路由”到目标pod</p>
<p>IPVS 专门用于高性能负载均衡，并使用更高效的数据结构(hash表)，允许几乎无限的规模扩张，因此被kube-proxy采纳为第三代模式</p>
<ul>
<li>为大型集群提供更好的可扩展性和性能</li>
<li>支持比iptables更复杂的复杂均衡算法(最小负载、最少连接、加权等)</li>
<li>支持服务器健康检查和连接重试等功能</li>
<li>可以动态修改ipset的集合，即使iptables的规则正在使用这个集合</li>
</ul>
<h3 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a>Etcd</h3><p>高可用的键值对存储系统，被用作k8s的后端存储，所有集群数据都存储在里面，用于服务发现和集群管理，存了整个集群的状态</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>API Server  基本的api server 提供和k8s集群的交互aip接口 ， 和etcd的watch交互信息</li>
<li>Controller Manager  管理控制中心， 对各种资源的管理，主要控制 pod， node， namespace，token等</li>
<li>Scheduler 调度器， 主要功能 通过预选算法将 pod 调度到node上，然后将工作交给kubelet</li>
<li>kubelet 每个node上都运行， 主要为pod的管理，并上报每个节点的资源到master</li>
<li>kube-proxy  server网络， ipvs外部访问的基础，每一个node上</li>
<li>Etcd 存储数据， 集群状态</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;API-Server原理解析&quot;&gt;&lt;a href=&quot;#API-Server原理解析&quot; class=&quot;headerlink&quot; title=&quot;API Server原理解析&quot;&gt;&lt;/a&gt;API Server原理解析&lt;/h3&gt;&lt;p&gt;各类资源对象(Pod,RC,Service)
    
    </summary>
    
      <category term="Kubernetes" scheme="https://ttxsgoto.github.io/categories/Kubernetes/"/>
    
    
      <category term="k8s" scheme="https://ttxsgoto.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Airflow动态生成Tasks和dags</title>
    <link href="https://ttxsgoto.github.io/2019/07/28/yw-airflow-dynamic-dags-tasks/"/>
    <id>https://ttxsgoto.github.io/2019/07/28/yw-airflow-dynamic-dags-tasks/</id>
    <published>2019-07-28T08:21:22.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="动态生成task任务"><a href="#动态生成task任务" class="headerlink" title="动态生成task任务"></a>动态生成task任务</h4><p>现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资料后发现主要使用动态生成TaskInstance实例来完成<br>具体说明如下：</p>
<ul>
<li><p>将计算得到值使用Variables变量保存</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow variables --set keyName value</div></pre></td></tr></table></figure>
</li>
<li><p>动态生成TaskInstance实例</p>
</li>
<li>将计算得到的列表遍历task任务</li>
</ul>
<p>实例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> airflow</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> configuration <span class="keyword">as</span> conf</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DagBag, TaskInstance</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG, settings</div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"> </div><div class="line">main_dag_id = <span class="string">'DynamicWorkflow2'</span></div><div class="line"> </div><div class="line">args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'start_date'</span>: airflow.utils.dates.days_ago(<span class="number">2</span>),</div><div class="line">    <span class="string">'provide_context'</span>: <span class="keyword">True</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">dag = DAG(</div><div class="line">    main_dag_id,</div><div class="line">    schedule_interval=<span class="keyword">None</span>,</div><div class="line">    default_args=args)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    dynamicValue = <span class="number">1</span></div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group1"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group1 value is "</span> + str(variableValue))</div><div class="line"> </div><div class="line">    logging.info(<span class="string">"Setting the Airflow Variable DynamicWorkflow_Group1 to "</span> + str(dynamicValue))</div><div class="line">    os.system(<span class="string">'airflow variables --set DynamicWorkflow_Group1 '</span> + str(dynamicValue))</div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group1"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group1 value is "</span> + str(variableValue))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dynamicValue):</div><div class="line">        resetTasksStatus(<span class="string">'firstGroup_'</span> + str(i))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">resetTasksStatus</span><span class="params">(task_id)</span>:</span></div><div class="line">    dag_folder = conf.get(<span class="string">'core'</span>, <span class="string">'DAGS_FOLDER'</span>)</div><div class="line">    dagbag = DagBag(dag_folder)</div><div class="line">    check_dag = dagbag.dags[main_dag_id]</div><div class="line">    session = settings.Session()</div><div class="line">    execution_date = datetime.now()</div><div class="line">    my_task = check_dag.get_task(task_id)</div><div class="line">    ti = TaskInstance(my_task, execution_date)</div><div class="line">    state = ti.current_state()</div><div class="line">    logging.info(<span class="string">"Current state of "</span> + task_id + <span class="string">" is "</span> + str(state))</div><div class="line">    ti.set_state(<span class="keyword">None</span>, session)</div><div class="line">    state = ti.current_state()</div><div class="line">    logging.info(<span class="string">"Updated state of "</span> + task_id + <span class="string">" is "</span> + str(state))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bridge1</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    dynamicValue = <span class="number">2</span></div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group2"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group2 value is "</span> + str(variableValue))</div><div class="line"> </div><div class="line">    logging.info(<span class="string">"Setting the Airflow Variable DynamicWorkflow_Group2 to "</span> + str(dynamicValue))</div><div class="line">    os.system(<span class="string">'airflow variables --set DynamicWorkflow_Group2 '</span> + str(dynamicValue))</div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group2"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group2 value is "</span> + str(variableValue))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dynamicValue):</div><div class="line">        resetTasksStatus(<span class="string">'secondGroup_'</span> + str(i))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bridge2</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    dynamicValue = <span class="number">3</span></div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group3"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group3 value is "</span> + str(variableValue))</div><div class="line"> </div><div class="line">    logging.info(<span class="string">"Setting the Airflow Variable DynamicWorkflow_Group3 to "</span> + str(dynamicValue))</div><div class="line">    os.system(<span class="string">'airflow variables --set DynamicWorkflow_Group3 '</span> + str(dynamicValue))</div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group3"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group3 value is "</span> + str(variableValue))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dynamicValue):</div><div class="line">        resetTasksStatus(<span class="string">'thirdGroup_'</span> + str(i))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    logging.info(<span class="string">"Ending"</span>)</div><div class="line"> </div><div class="line"> </div><div class="line">starting_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'start'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=start,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">bridge1_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'bridge1'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=bridge1,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">DynamicWorkflow_Group1 = Variable.get(<span class="string">"DynamicWorkflow_Group1"</span>)</div><div class="line">logging.info(<span class="string">"The current DynamicWorkflow_Group1 value is "</span> + str(DynamicWorkflow_Group1))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSomeWork</span><span class="params">(name, index, *args, **kwargs)</span>:</span></div><div class="line">    os.system(<span class="string">'touch /home/user/airflow/'</span> + str(name) + str(index) + <span class="string">'.txt'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(int(DynamicWorkflow_Group1)):</div><div class="line">    dynamicTask = PythonOperator(</div><div class="line">        task_id=<span class="string">'firstGroup_'</span> + str(index),</div><div class="line">        dag=dag,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">        python_callable=doSomeWork,</div><div class="line">        op_args=[<span class="string">'firstGroup'</span>, index],</div><div class="line">    )</div><div class="line"> </div><div class="line">    starting_task.set_downstream(dynamicTask)</div><div class="line">    dynamicTask.set_downstream(bridge1_task)</div><div class="line"> </div><div class="line">bridge2_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'bridge2'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=bridge2,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">DynamicWorkflow_Group2 = Variable.get(<span class="string">"DynamicWorkflow_Group2"</span>)</div><div class="line">logging.info(<span class="string">"The current DynamicWorkflow value is "</span> + str(DynamicWorkflow_Group2))</div><div class="line"> </div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(int(DynamicWorkflow_Group2)):</div><div class="line">    dynamicTask = PythonOperator(</div><div class="line">        task_id=<span class="string">'secondGroup_'</span> + str(index),</div><div class="line">        dag=dag,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">        python_callable=doSomeWork,</div><div class="line">        op_args=[<span class="string">'secondGroup'</span>, index])</div><div class="line">    bridge1_task &gt;&gt; dynamicTask</div><div class="line">    dynamicTask &gt;&gt; bridge2_task</div><div class="line"> </div><div class="line">ending_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'end'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=end,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">DynamicWorkflow_Group3 = Variable.get(<span class="string">"DynamicWorkflow_Group3"</span>)</div><div class="line">logging.info(<span class="string">"The current DynamicWorkflow value is "</span> + str(DynamicWorkflow_Group3))</div><div class="line"> </div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(int(DynamicWorkflow_Group3)):</div><div class="line">    <span class="keyword">if</span> index &lt; (int(DynamicWorkflow_Group3) - <span class="number">1</span>):</div><div class="line">        dynamicTask = PythonOperator(</div><div class="line">            task_id=<span class="string">'thirdGroup_'</span> + str(index),</div><div class="line">            dag=dag,</div><div class="line">            provide_context=<span class="keyword">True</span>,</div><div class="line">            python_callable=doSomeWork,</div><div class="line">            op_args=[<span class="string">'thirdGroup'</span>, index])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        dynamicTask = BashOperator(</div><div class="line">            task_id=<span class="string">'thirdGroup_'</span> + str(index),</div><div class="line">            bash_command=<span class="string">'touch /home/user/airflow/thirdGroup_'</span> + str(index) + <span class="string">'.txt'</span>,</div><div class="line">            dag=dag)</div><div class="line"> </div><div class="line">    bridge2_task &gt;&gt; dynamicTask</div><div class="line">    dynamicTask &gt;&gt; ending_task</div><div class="line"> </div><div class="line">starting_task &gt;&gt; bridge1_task &gt;&gt; bridge2_task &gt;&gt; ending_task</div></pre></td></tr></table></figure></p>
<p>执行前：<br><img src="https://ttxsgoto.github.io/img/airflow/airflow01.png" alt=""><br>执行后<br><img src="https://ttxsgoto.github.io/img/airflow/airflow02.png" alt=""></p>
<h4 id="动态生成Dags"><a href="#动态生成Dags" class="headerlink" title="动态生成Dags"></a>动态生成Dags</h4><p>通过获取变量值，globals实现动态生成dags<br>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dag</span><span class="params">(dag_id,</span></span></div><div class="line">               schedule,</div><div class="line">               dag_number,</div><div class="line">               default_args):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello_world_py</span><span class="params">(*args)</span>:</span></div><div class="line">        print(<span class="string">'Hello World'</span>)</div><div class="line">        print(<span class="string">'This is DAG: &#123;&#125;'</span>.format(str(dag_number)))</div><div class="line"> </div><div class="line">    dag = DAG(dag_id,</div><div class="line">              schedule_interval=schedule,</div><div class="line">              default_args=default_args)</div><div class="line"> </div><div class="line">    <span class="keyword">with</span> dag:</div><div class="line">        t1 = PythonOperator(</div><div class="line">            task_id=<span class="string">'hello_world'</span>,</div><div class="line">            python_callable=hello_world_py,</div><div class="line">            dag_number=dag_number)</div><div class="line">        t2 = BashOperator(</div><div class="line">            task_id=<span class="string">'current_date'</span>,</div><div class="line">            bash_command=<span class="string">'date'</span></div><div class="line">        )</div><div class="line">        t1 &gt;&gt; t2</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> dag</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_api_data</span><span class="params">()</span>:</span></div><div class="line">    data = [<span class="string">'test01'</span>, <span class="string">'test02'</span>, <span class="string">'test03'</span>]</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dags</span><span class="params">(data=None)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(data)):</div><div class="line">        dag_id = <span class="string">'dynamic_day_&#123;&#125;'</span>.format(data[n])</div><div class="line">        default_args = &#123;<span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">                        <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">1</span>)&#125;</div><div class="line">        schedule = <span class="keyword">None</span></div><div class="line">        dag_number = n</div><div class="line">        globals()[dag_id] = create_dag(dag_id, schedule, dag_number, default_args)</div><div class="line"> </div><div class="line"> </div><div class="line">data = get_api_data()</div><div class="line">create_dags(data)</div></pre></td></tr></table></figure></p>
<p><img src="https://ttxsgoto.github.io/img/airflow/airflow03.png" alt=""></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/" target="_blank" rel="external">https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/</a><br><a href="https://xbuba.com/questions/41517798" target="_blank" rel="external">https://xbuba.com/questions/41517798</a><br><a href="https://www.astronomer.io/guides/dynamically-generating-dags/" target="_blank" rel="external">https://www.astronomer.io/guides/dynamically-generating-dags/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;动态生成task任务&quot;&gt;&lt;a href=&quot;#动态生成task任务&quot; class=&quot;headerlink&quot; title=&quot;动态生成task任务&quot;&gt;&lt;/a&gt;动态生成task任务&lt;/h4&gt;&lt;p&gt;现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Airflow" scheme="https://ttxsgoto.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Airflow变量和执行器</title>
    <link href="https://ttxsgoto.github.io/2019/07/27/yw-airflow-operator/"/>
    <id>https://ttxsgoto.github.io/2019/07/27/yw-airflow-operator/</id>
    <published>2019-07-27T08:15:08.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>最近在调研Airflow demo相关的问题和解决方案， 主要问题有：</p>
<ul>
<li>Dags中任务启动时，参数如何传递</li>
<li>Task任务之间的依赖关系，返回值如何被其他task使用</li>
<li>运行docker程序</li>
<li>Http API请求实现</li>
</ul>
<h4 id="具体说明"><a href="#具体说明" class="headerlink" title="具体说明"></a>具体说明</h4><h5 id="Dags中任务启动时，参数如何传递"><a href="#Dags中任务启动时，参数如何传递" class="headerlink" title="Dags中任务启动时，参数如何传递"></a>Dags中任务启动时，参数如何传递</h5><p>Airflow中可以使用Variables来定义变量来传递参数，该变量为全局变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置变量</span></div><div class="line">airflow variables --set keyName value <span class="comment"># 或者管理UI设置</span></div><div class="line"> </div><div class="line"><span class="comment"># 获取变量</span></div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line">message = Variable.get(<span class="string">'message'</span>)</div></pre></td></tr></table></figure></p>
<h5 id="Task任务之间的依赖关系，返回值如何被其他task使用"><a href="#Task任务之间的依赖关系，返回值如何被其他task使用" class="headerlink" title="Task任务之间的依赖关系，返回值如何被其他task使用"></a>Task任务之间的依赖关系，返回值如何被其他task使用</h5><p>通过xcom来返回给后面的task任务使用任务的返回值，使用kwargs[‘task_instance’].xcom_pull(task_ids=’run_task’)来获取run_task任务的返回值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta, datetime</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line"> </div><div class="line">default_args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'description'</span>: <span class="string">'Use of the Xcom'</span>,</div><div class="line">    <span class="string">'depend_on_past'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">3</span>),</div><div class="line">    <span class="string">'email_on_failure'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'email_on_retry'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'retries'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'retry_delay'</span>: timedelta(minutes=<span class="number">30</span>)</div><div class="line">    <span class="comment"># 'queue': 'bash_queue',</span></div><div class="line">    <span class="comment"># 'pool': 'backfill',</span></div><div class="line">    <span class="comment"># 'priority_weight': 10,</span></div><div class="line">    <span class="comment"># 'end_date': datetime(2016, 1, 1),</span></div><div class="line">    <span class="comment"># 'wait_for_downstream': False,</span></div><div class="line">    <span class="comment"># 'dag': dag,</span></div><div class="line">    <span class="comment"># 'adhoc':False,</span></div><div class="line">    <span class="comment"># 'sla': timedelta(hours=2),</span></div><div class="line">    <span class="comment"># 'execution_timeout': timedelta(seconds=300),</span></div><div class="line">    <span class="comment"># 'on_failure_callback': some_function,</span></div><div class="line">    <span class="comment"># 'on_success_callback': some_other_function,</span></div><div class="line">    <span class="comment"># 'on_retry_callback': another_function,</span></div><div class="line">    <span class="comment"># 'trigger_rule': u'all_success'</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">dag = DAG(</div><div class="line">    <span class="string">'xcom_demo'</span>,</div><div class="line">    default_args=default_args,</div><div class="line">    schedule_interval=<span class="keyword">None</span></div><div class="line">)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_this_func</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    message = Variable.get(<span class="string">'message'</span>)</div><div class="line">    print(<span class="string">'message------&gt;'</span>, message)</div><div class="line">    <span class="keyword">return</span> message</div><div class="line"> </div><div class="line"> </div><div class="line">run_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'run_task'</span>,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=run_this_func,</div><div class="line">    dag=dag</div><div class="line">)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hello</span><span class="params">(**context)</span>:</span></div><div class="line">    before_data = context[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'run_task'</span>)</div><div class="line">    <span class="keyword">return</span> before_data</div><div class="line"> </div><div class="line"> </div><div class="line">hello_operator = PythonOperator(</div><div class="line">    task_id=<span class="string">'hello_task'</span>,</div><div class="line">    python_callable=print_hello,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    dag=dag,</div><div class="line">)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">three</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    frist_data = kwargs[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'run_task'</span>)</div><div class="line">    two_data = kwargs[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'hello_task'</span>)</div><div class="line">    <span class="keyword">return</span> frist_data, two_data</div><div class="line"> </div><div class="line"> </div><div class="line">last_operator = PythonOperator(</div><div class="line">    task_id=<span class="string">'last_task'</span>,</div><div class="line">    python_callable=three,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    dag=dag,</div><div class="line">)</div><div class="line"> </div><div class="line">run_task &gt;&gt; hello_operator &gt;&gt; last_operator  <span class="comment"># xcoms</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dag.cli()</div></pre></td></tr></table></figure></p>
<h5 id="运行docker程序"><a href="#运行docker程序" class="headerlink" title="运行docker程序"></a>运行docker程序</h5><p>执行器DockerOperator 完成docker运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="keyword">from</span> airflow.operators.docker_operator <span class="keyword">import</span> DockerOperator</div><div class="line"> </div><div class="line">default_args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'description'</span>: <span class="string">'Use of the DockerOperator'</span>,</div><div class="line">    <span class="string">'depend_on_past'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">3</span>),</div><div class="line">    <span class="string">'email_on_failure'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'email_on_retry'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'retries'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'retry_delay'</span>: timedelta(minutes=<span class="number">30</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">image = <span class="string">'docker.api:0.1.0'</span></div><div class="line">volumes = [<span class="string">'/home/user/data:/data'</span>]</div><div class="line">run_commend = <span class="string">'cd /data/ &amp;&amp; ./run.sh'</span></div><div class="line"><span class="keyword">with</span> DAG(<span class="string">'docker_demo'</span>, default_args=default_args, schedule_interval=<span class="keyword">None</span>, catchup=<span class="keyword">False</span>) <span class="keyword">as</span> dag:</div><div class="line">    t1 = BashOperator(</div><div class="line">        task_id=<span class="string">'print_current_date'</span>,</div><div class="line">        bash_command=<span class="string">'date'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t2 = DockerOperator(</div><div class="line">        task_id=<span class="string">'dpt_docker'</span>,</div><div class="line">        image=image,</div><div class="line">        auto_remove=<span class="keyword">True</span>,</div><div class="line">        command=run_commend,</div><div class="line">        force_pull=<span class="keyword">True</span>,</div><div class="line">        volumes=volumes,</div><div class="line">        <span class="comment"># network_mode='bridge'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t3 = BashOperator(</div><div class="line">        task_id=<span class="string">'print_hello'</span>,</div><div class="line">        bash_command=<span class="string">'echo "hello world"'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t1 &gt;&gt; t2 &gt;&gt; t3</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dag.cli()</div></pre></td></tr></table></figure></p>
<h5 id="Http-API请求实现"><a href="#Http-API请求实现" class="headerlink" title="Http API请求实现"></a>Http API请求实现</h5><p>执行器SimpleHttpOperator 完成http api请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"><span class="keyword">from</span> airflow.utils.trigger_rule <span class="keyword">import</span> TriggerRule</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="keyword">from</span> airflow.operators.http_operator <span class="keyword">import</span> SimpleHttpOperator</div><div class="line"> </div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line"> </div><div class="line">default_args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'description'</span>: <span class="string">'Use of the SimpleHttpOperator'</span>,</div><div class="line">    <span class="string">'depend_on_past'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">3</span>),</div><div class="line">    <span class="string">'email_on_failure'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'email_on_retry'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'retries'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'retry_delay'</span>: timedelta(minutes=<span class="number">30</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">http_add = <span class="string">'http://127.0.0.1:8888'</span></div><div class="line">api = <span class="string">'/person/'</span></div><div class="line">url = <span class="string">'http://1027.0.0.1:8889'</span></div><div class="line">login_api = <span class="string">'/user/login/'</span></div><div class="line">get_task_api = <span class="string">'/task/'</span></div><div class="line">os.environ[</div><div class="line">    <span class="string">'AIRFLOW_CONN_HTTP_TEST'</span>] = http_add  <span class="comment"># 这里定义不同的接口规则,在SimpleHttpOperator中http_conn_id需要指定IRFLOW_CONN_*对应的内容,默认接口指向google的api</span></div><div class="line">os.environ[<span class="string">'AIRFLOW_CONN_TEST_HTTP'</span>] = url</div><div class="line"> </div><div class="line">token = <span class="string">''</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_http_data</span><span class="params">(**context)</span>:</span></div><div class="line">    token_data = context[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'post_login'</span>)</div><div class="line">    token_dict = json.loads(token_data)</div><div class="line">    token = token_dict[<span class="string">'data'</span>][<span class="string">'token'</span>]</div><div class="line">    Variable.set(<span class="string">'token'</span>, token)</div><div class="line">    <span class="keyword">return</span> token</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(**context)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> token</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">with</span> DAG(<span class="string">'http_api_demo'</span>,</div><div class="line">         default_args=default_args,</div><div class="line">         schedule_interval=<span class="string">"5 * * * *"</span>,</div><div class="line">         catchup=<span class="keyword">False</span>) <span class="keyword">as</span> dag:</div><div class="line">    t1 = BashOperator(</div><div class="line">        task_id=<span class="string">'print_current_date'</span>,</div><div class="line">        bash_command=<span class="string">'date'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t2 = SimpleHttpOperator(</div><div class="line">        task_id=<span class="string">'get_person'</span>,</div><div class="line">        http_conn_id=<span class="string">'http_test'</span>,</div><div class="line">        method=<span class="string">'GET'</span>,</div><div class="line">        headers=&#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;,</div><div class="line">        endpoint=api,</div><div class="line">        xcom_push=<span class="keyword">True</span>,  <span class="comment"># 将结果通过xcom传递给下一个task</span></div><div class="line">        response_check=<span class="keyword">lambda</span> response: <span class="keyword">True</span> <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> <span class="keyword">False</span>,</div><div class="line">    )</div><div class="line">    t3 = SimpleHttpOperator(</div><div class="line">        task_id=<span class="string">'post_login'</span>,</div><div class="line">        http_conn_id=<span class="string">'test_http'</span>,</div><div class="line">        method=<span class="string">'POST'</span>,</div><div class="line">        headers=&#123;</div><div class="line">            <span class="string">"X-Requested-With"</span>: <span class="string">'XMLHttpRequest'</span>,</div><div class="line">            <span class="string">"Accept"</span>: <span class="string">"application/json"</span>,</div><div class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/json; charset=UTF-8"</span></div><div class="line">        &#125;,</div><div class="line">        endpoint=login_api,</div><div class="line">        xcom_push=<span class="keyword">True</span>,  <span class="comment"># 将结果通过xcom传递给下一个task</span></div><div class="line">        response_check=<span class="keyword">lambda</span> response: <span class="keyword">True</span> <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> <span class="keyword">False</span>,</div><div class="line">        data=json.dumps(&#123;<span class="string">'username'</span>: <span class="string">'admin'</span>, <span class="string">'password'</span>: <span class="string">'admin'</span>&#125;),</div><div class="line">    )</div><div class="line">    <span class="comment"># PostgresOperator</span></div><div class="line">    t4 = SimpleHttpOperator(</div><div class="line">        task_id=<span class="string">'get_task'</span>,</div><div class="line">        http_conn_id=<span class="string">'test_http'</span>,</div><div class="line">        method=<span class="string">'GET'</span>,</div><div class="line">        headers=&#123;</div><div class="line">            <span class="string">"X-Requested-With"</span>: <span class="string">'XMLHttpRequest'</span>,</div><div class="line">            <span class="string">"Accept"</span>: <span class="string">"application/json"</span>,</div><div class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/json; charset=UTF-8"</span>,</div><div class="line">            <span class="string">"Authorization"</span>: <span class="string">'jwt &#123;&#125;'</span>.format(Variable.get(<span class="string">'token'</span>)),  <span class="comment"># 这里需要获取到login的token</span></div><div class="line">        &#125;,</div><div class="line">        endpoint=get_task_api,</div><div class="line">        xcom_push=<span class="keyword">True</span>,  <span class="comment"># 将结果通过xcom传递给下一个task</span></div><div class="line">        response_check=<span class="keyword">lambda</span> response: <span class="keyword">True</span> <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> <span class="keyword">False</span>,</div><div class="line">        trigger_rule=TriggerRule.NONE_FAILED</div><div class="line">    )</div><div class="line"> </div><div class="line">    t5 = PythonOperator(</div><div class="line">        task_id=<span class="string">'data_task'</span>,</div><div class="line">        python_callable=get_http_data,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">        <span class="comment"># trigger_rule=TriggerRule.ONE_SUCCESS</span></div><div class="line">    )</div><div class="line">    t6 = PythonOperator(</div><div class="line">        task_id=<span class="string">'test_data'</span>,</div><div class="line">        python_callable=get_data,</div><div class="line">        provide_context=<span class="keyword">True</span></div><div class="line">    )</div><div class="line">    t7 = PythonOperator(</div><div class="line">        task_id=<span class="string">'sleep_data'</span>,</div><div class="line">        python_callable=get_data,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">    )</div><div class="line"> </div><div class="line">    t1 &gt;&gt; t2 &gt;&gt; t3 &gt;&gt; [t5, t6] &gt;&gt; t4 &gt;&gt; t7</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dag.cli()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;最近在调研Airflow demo相关的问题和解决方案， 主要问题有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dags中任务启动时，参数
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Airflow" scheme="https://ttxsgoto.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Airflow架构、安装部署</title>
    <link href="https://ttxsgoto.github.io/2019/07/26/yw-airflow-install/"/>
    <id>https://ttxsgoto.github.io/2019/07/26/yw-airflow-install/</id>
    <published>2019-07-26T07:50:35.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Airflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务，只需要把任务的名字和运行方式提供给Airflow作为一个task就可以， 以代码的方式来定义任务执行流程，可操作性强。</p>
<h4 id="Airflow架构"><a href="#Airflow架构" class="headerlink" title="Airflow架构"></a>Airflow架构</h4><p>Airflow 是建立在元数据库上的队列系统。数据库存储队列任务的状态，调度器使用这些状态来确定如何将其它任务添加到队列的优先级。此功能由四个主要组件编排</p>
<ol>
<li>元数据库：这个数据库存储有关任务状态的信息。数据库使用在 SQLAlchemy 中实现的抽象层执行更新。该抽象层将 Airflow 剩余组件功能从数据库中干净地分离了出来。</li>
<li>调度器：调度器是一种使用 DAG 定义结合元数据中的任务状态来决定哪些任务需要被执行以及任务执行优先级的过程。调度器通常作为服务运行。</li>
<li>执行器：Excutor 是一个消息队列进程，它被绑定到调度器中，用于确定实际执行每个任务计划的工作进程。有不同类型的执行器，每个执行器都使用一个指定工作进程的类来执行任务。例如，LocalExecutor 使用与调度器进程在同一台机器上运行的并行进程执行任务。其他像 CeleryExecutor 的执行器使用存在于独立的工作机器集群中的工作进程执行任务。</li>
<li>Workers：这些是实际执行任务逻辑的进程，由正在使用的执行器确定。</li>
</ol>
<p>Airflow 的操作建立于存储任务状态和工作流的元数据库之上（即 DAG）。调度器和执行器将任务发送至队列，让 Worker 进程执行。WebServer 运行（经常与调度器在同一台机器上运行）并与数据库通信，在 Web UI 中呈现任务状态和任务执行日志。每个有色框表明每个组件都可以独立于其他组件存在，这取决于部署配置的类型。</p>
<h5 id="调度器操作"><a href="#调度器操作" class="headerlink" title="调度器操作"></a>调度器操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0. 从磁盘中加载可用的 DAG 定义（填充 DagBag）</div><div class="line">调度器running：</div><div class="line">  1. 调度器使用 DAG 定义来标识并且/或者初始化在元数据的 db 中的任何 DagRuns。</div><div class="line">  2. 调度器检查与活动 DagRun 关联的 TaskInstance 的状态，解析 TaskInstance 之间的任何依赖，标识需要被执行的 TaskInstance，然后将它们添加至 worker 队列，将新排列的 TaskInstance 状态更新为数据库中的“排队”状态。</div><div class="line">  3. 每个可用的 worker 从队列中取一个 TaskInstance，然后开始执行它，将此 TaskInstance 的数据库记录从“排队”更新为“运行”。</div><div class="line">  4. 一旦一个 TaskInstance 完成运行，关联的 worker 就会报告到队列并更新数据库中的 TaskInstance 的状态（例如“完成”、“失败”等）。</div><div class="line">  5. 调度器根据所有已完成的相关 TaskInstance 的状态更新所有活动 DagRuns 的状态（“运行”、“失败”、“完成”）。</div><div class="line">  6. 重复步骤 1-5</div></pre></td></tr></table></figure>
<h4 id="进程说明"><a href="#进程说明" class="headerlink" title="进程说明"></a>进程说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">airflow webserver -p 8090   # web管理页面， 如果添加-D 以后台进程启动</div><div class="line">airflow scheduler           # 调度进程</div><div class="line">airflow worker              # worker执行进程， -q 指定启用的quene</div><div class="line">airflow flower              # 监控celery进程</div></pre></td></tr></table></figure>
<h4 id="airflow-的守护进程是如何一起工作的"><a href="#airflow-的守护进程是如何一起工作的" class="headerlink" title="airflow 的守护进程是如何一起工作的"></a>airflow 的守护进程是如何一起工作的</h4><ol>
<li>调度器 scheduler 会间隔性的去轮询元数据库（Metastore）已注册的 DAG（有向无环图，可理解为作业流）是否需要被执行。如果一个具体的 DAG 根据其调度计划需要被执行，scheduler 守护进程就会先在元数据库创建一个 DagRun 的实例，并触发 DAG 内部的具体 task（任务，可以这样理解：DAG 包含一个或多个task），触发其实并不是真正的去执行任务，而是推送 task 消息至消息队列（即 broker）中，每一个 task 消息都包含此 task 的 DAG ID，task ID，及具体需要被执行的函数。如果 task 是要执行 bash 脚本，那么 task 消息还会包含 bash 脚本的代码。</li>
<li>用户可能在 webserver 上来控制 DAG，比如手动触发一个 DAG 去执行。当用户这样做的时候，一个DagRun 的实例将在元数据库被创建，scheduler 使同 #1 一样的方法去触发 DAG 中具体的 task 。</li>
<li>worker 守护进程将会监听消息队列，如果有消息就从消息队列中取出消息，当取出任务消息时，它会更新元数据中的 DagRun 实例的状态为正在运行，并尝试执行 DAG 中的 task，如果 DAG 执行成功，则更新任 DagRun 实例的状态为成功，否则更新状态为失败。</li>
</ol>
<h4 id="常用CLI命令行接口"><a href="#常用CLI命令行接口" class="headerlink" title="常用CLI命令行接口"></a>常用CLI命令行接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">airflow test DAG_ID TASK_ID EXECUTION_DAT  # 测试任务调用是否可用</div><div class="line">airflow list_dags   # 查看dags</div><div class="line">airflow list_tasks DAG_ID  # 查看对应dag的task</div><div class="line">airflow clear DAG_ID    # 移除dag_id元数据库中的taskinstance记录</div><div class="line">airflow resetdb     # 重载数据库，删表在新创建</div></pre></td></tr></table></figure>
<h4 id="部署说明"><a href="#部署说明" class="headerlink" title="部署说明"></a>部署说明</h4><ul>
<li>两台ubuntu 16.04 ,</li>
<li>192.168.0.10  (webserver,scheduler,worker,flower)</li>
<li><p>192.168.0.11  (worker)</p>
<p>说明 两台服务器airflow.cfg配置要一样，对应的dags文件路径也要相同</p>
</li>
</ul>
<h5 id="Environmental-dependence"><a href="#Environmental-dependence" class="headerlink" title="Environmental dependence"></a>Environmental dependence</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python3.5 &amp;&amp; pip3</span></div><div class="line">sudo apt-get update</div><div class="line">ln -s /usr/bin/python3 /usr/bin/python</div><div class="line">sudo apt install python3-pip -y</div><div class="line">pip3 install --upgrade pip</div><div class="line"> </div><div class="line"><span class="comment"># Docker Install</span></div><div class="line">sudo apt-get install -y apt-transport-https ca-certificates</div><div class="line">sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:<span class="number">80</span> --recv-keys <span class="number">58118E89</span>F3A912897C070ADBF76221572C52609D</div><div class="line">echo <span class="string">"deb https://mirrors.tuna.tsinghua.edu.cn/docker/apt/repo ubuntu-trusty main"</span> \</div><div class="line">| sudo tee /etc/apt/sources.list.d/docker.list</div><div class="line">sudo apt-get update</div><div class="line">apt-cache policy docker-engine</div><div class="line">sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual</div><div class="line">sudo apt install -y docker.io</div></pre></td></tr></table></figure>
<h5 id="Install-Airflow"><a href="#Install-Airflow" class="headerlink" title="Install Airflow"></a>Install Airflow</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pip3 install apache-airflow</div><div class="line">pip3 install <span class="string">'apache-airflow[celery]'</span></div><div class="line">pip3 install -U werkzeug Jinja2</div><div class="line">pip3 install flask_bcrypt</div><div class="line"> </div><div class="line"><span class="comment">####</span></div><div class="line">修改对应的配置(dags路径)</div><div class="line">executor = CeleryExecutor</div><div class="line">demo_mode = <span class="keyword">False</span></div><div class="line">sql_alchemy_conn = mysql://root:admin@<span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>:<span class="number">3306</span>/airflow</div><div class="line">broker_url = pyamqp://airflow:airflow@<span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>:<span class="number">5672</span>/airflow</div><div class="line">sql_alchemy_conn = mysql://root:admin@<span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>:<span class="number">3306</span>/airflow</div></pre></td></tr></table></figure>
<h5 id="Run-Docker-Mysql-amp-amp-RabbitMQ"><a href="#Run-Docker-Mysql-amp-amp-RabbitMQ" class="headerlink" title="Run Docker(Mysql &amp;&amp; RabbitMQ)"></a>Run Docker(Mysql &amp;&amp; RabbitMQ)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- docker mysql</div><div class="line">    docker pull mysql</div><div class="line">    docker run -it -d --name airflow-mysql -v /data/airflow_mysql_data/:/var/lib/mysql/ -p <span class="number">3306</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=admin --restart=always -d mysql</div><div class="line"> </div><div class="line"> </div><div class="line">- docker rabbitmq</div><div class="line">    docker pull rabbitmq</div><div class="line">    docker run -it -d -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">15672</span>:<span class="number">15672</span> -v /data/airflow_rabbitmq_data:/var/lib/rabbitmq --restart=always --name airflow_rabbitmq rabbitmq</div><div class="line">    <span class="comment">#创建一个RabbitMQ用户</span></div><div class="line">    rabbitmqctl add_user airflow airflow</div><div class="line">    <span class="comment">#创建一个RabbitMQ虚拟主机</span></div><div class="line">    rabbitmqctl add_vhost airflow</div><div class="line">    <span class="comment">#将这个用户赋予admin的角色</span></div><div class="line">    rabbitmqctl set_user_tags airflow admin</div><div class="line">    <span class="comment">#允许这个用户访问这个虚拟主机</span></div><div class="line">    rabbitmqctl set_permissions -p airflow airflow <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></div><div class="line">    <span class="comment"># no usage</span></div><div class="line">    rabbitmq-plugins enable rabbitmq_management</div></pre></td></tr></table></figure>
<h5 id="Supervisor管理进程"><a href="#Supervisor管理进程" class="headerlink" title="Supervisor管理进程"></a>Supervisor管理进程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install supervisor</div><div class="line"> </div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>配置文件如下：</div><div class="line">[program:airflow_webserver]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow webserver</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_webserver.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_webserver.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">[program:airflow_scheduler]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow scheduler</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_scheduler.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_scheduler.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">[program:airflow_worker]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow worker</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">[program:airflow_flower]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow flower</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_flower.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_flower.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span>配置文件如下：</div><div class="line">[program:airflow_worker]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow worker</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div></pre></td></tr></table></figure>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol>
<li><p>locale.Error: unsupported locale setting</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">https://stackoverflow.com/questions/<span class="number">14547631</span>/python-locale-error-unsupported-locale-setting</div><div class="line">export LC_ALL=<span class="string">"en_US.UTF-8"</span></div><div class="line">export LC_CTYPE=<span class="string">"en_US.UTF-8"</span></div><div class="line">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>
</li>
<li><p>ImportError: No module named ‘MySQLdb’</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libmysqlclient-dev -y</div><div class="line">sudo pip3 install mysqlclient</div></pre></td></tr></table></figure>
</li>
<li><p>airflow.exceptions.AirflowException: No module named ‘flask_bcrypt’</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install flask_bcrypt</div></pre></td></tr></table></figure>
</li>
<li><p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe8 in position 3199: ordinal not in range(128)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">字符集问题</div><div class="line">/etc/default/locale </div><div class="line">LANG=<span class="string">"zh_CN.UTF-8"</span></div><div class="line">LANGUAGE=<span class="string">"zh_CN:zh"</span></div><div class="line">LC_ALL=<span class="string">"zh_CN.UTF-8"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a" target="_blank" rel="external">https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a</a><br><a href="https://blog.csdn.net/youzi_yun/article/details/90141362" target="_blank" rel="external">https://blog.csdn.net/youzi_yun/article/details/90141362</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;Airflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Airflow" scheme="https://ttxsgoto.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Vue echarts可视化</title>
    <link href="https://ttxsgoto.github.io/2019/07/03/vue-echarts/"/>
    <id>https://ttxsgoto.github.io/2019/07/03/vue-echarts/</id>
    <published>2019-07-03T12:00:47.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据</p>
<h3 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h3><ul>
<li>将图形封装为一个基础组件</li>
<li>按照对应的数据格式，填充到option中</li>
<li>多组数据通过for循环来完成</li>
</ul>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://ttxsgoto.github.io/img/vue/echarts/bar.png" alt=""><br><img src="https://ttxsgoto.github.io/img/vue/echarts/line.png" alt=""><br><img src="https://ttxsgoto.github.io/img/vue/echarts/pie.png" alt=""></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>chart.vue组件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div :id=<span class="string">"id"</span> :style=<span class="string">"style"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  import echarts from <span class="string">'echarts'</span></div><div class="line">  <span class="built_in">export</span> default &#123;</div><div class="line">    name: <span class="string">"Chart"</span>,</div><div class="line">    props: &#123;</div><div class="line">      id: &#123;</div><div class="line">        <span class="built_in">type</span>: String</div><div class="line">      &#125;,</div><div class="line">      width: &#123;</div><div class="line">        <span class="built_in">type</span>: String,</div><div class="line">        default: <span class="string">"100%"</span>,</div><div class="line">      &#125;,</div><div class="line">      height: &#123;</div><div class="line">        <span class="built_in">type</span>: String,</div><div class="line">        default: <span class="string">"300px"</span></div><div class="line">      &#125;,</div><div class="line">      option: &#123;</div><div class="line">        <span class="built_in">type</span>: Object,</div><div class="line">        required: <span class="literal">true</span>,</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">      <span class="function"><span class="title">style</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> &#123;</div><div class="line">          height: this.height,</div><div class="line">          width: this.width</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="title">data</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> &#123;</div><div class="line">          chart: <span class="string">""</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      <span class="function"><span class="title">init</span></span>() &#123;</div><div class="line">        this.chart = echarts.init(document.getElementById(this.id));</div><div class="line">        // this.chart.showLoading();</div><div class="line">        this.chart.setOption(this.option);</div><div class="line">        // this.chart.hideLoading();</div><div class="line">        window.addEventListener(<span class="string">"resize"</span>, this.chart.resize);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">      this.init();</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">      option: &#123;</div><div class="line">        handler(newVal, oldVal) &#123;</div><div class="line">          <span class="keyword">if</span> (this.chart) &#123;</div><div class="line">            <span class="keyword">if</span> (newVal) &#123;</div><div class="line">              this.chart.setOption(newVal);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              this.chart.setOption(oldVal);</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            this.init();</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        deep: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>echarts.vue</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped lang=<span class="string">"less"</span>&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"> </div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;Bar Num&lt;/h2&gt;</div><div class="line">      &lt;div v-for=<span class="string">"(item,index) in optionData"</span> :key=<span class="string">"item.series.name"</span>&gt;</div><div class="line">          &lt;Chart :id=<span class="string">"item.series.name"</span> :option=<span class="string">"item"</span> :width=<span class="string">"item._width"</span> :height=<span class="string">"item._height"</span>&gt;&lt;/Chart&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;h2&gt;Line Total num &amp;&amp; Num&lt;/h2&gt;</div><div class="line">      &lt;div v-for=<span class="string">"(item,index) in optionAllData"</span> :key=<span class="string">"item.title.text"</span>&gt;</div><div class="line">          &lt;Chart :id=<span class="string">"item.title.text"</span> :option=<span class="string">"item"</span> :width=<span class="string">"item._width"</span> :height=<span class="string">"item._height"</span>&gt;&lt;/Chart&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;h2&gt; Pie Num Chart&lt;/h2&gt;</div><div class="line">    &lt;Chart :id=<span class="string">"pieOption.title.text"</span> :option=<span class="string">"pieOption"</span> :width=<span class="string">"pieOption._width"</span> :height=<span class="string">"pieOption._height"</span>&gt;&lt;/Chart&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"> </div><div class="line">&lt;script&gt;</div><div class="line">import Chart from <span class="string">'./Chart.vue'</span></div><div class="line"> </div><div class="line"><span class="built_in">export</span> default &#123;</div><div class="line">  name: <span class="string">'echarts'</span>,</div><div class="line">  components: &#123;</div><div class="line">    Chart</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="title">data</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">      // 模拟后端返回的数据</div><div class="line">      dateTime: [<span class="string">"20190624"</span>, <span class="string">"20190625"</span>, <span class="string">"20190626"</span>, <span class="string">"20190627"</span>],</div><div class="line">      selectObject: &#123;</div><div class="line">        <span class="string">'TYPE01'</span>: [7, 5, 15, 10],</div><div class="line">        <span class="string">'TYPE02'</span>: [2, 5, 10, 8],</div><div class="line">      &#125;,</div><div class="line">      selectAllObject: &#123;</div><div class="line">        <span class="string">'TYPE03'</span>:&#123;</div><div class="line">          <span class="string">'total_num'</span>: [20, 20, 25, 30],</div><div class="line">          <span class="string">'error_num'</span>: [3, 5, 5, 10]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'TYPE04'</span>: &#123;</div><div class="line">          <span class="string">'total_num'</span>: [20, 20, 25, 30],</div><div class="line">          <span class="string">'error_num'</span>: [2, 5, 15, 8]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      optionData: [],</div><div class="line">      optionAllData: [],</div><div class="line"></div><div class="line">      // Pie数据</div><div class="line">      pieOption: &#123;</div><div class="line">        title : &#123;</div><div class="line">          text: <span class="string">'COLOUR TYPE'</span>,</div><div class="line">          // subtext: <span class="string">'-'</span>,</div><div class="line">          x:<span class="string">'center'</span></div><div class="line">        &#125;,</div><div class="line">        tooltip : &#123;</div><div class="line">            trigger: <span class="string">'item'</span>,</div><div class="line">            formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span></div><div class="line">        &#125;,</div><div class="line">        legend: &#123;</div><div class="line">            orient: <span class="string">'vertical'</span>,</div><div class="line">            left: <span class="string">'left'</span>,</div><div class="line">            data: [<span class="string">'RED'</span>,<span class="string">'BLUE'</span>,<span class="string">'YELLOW'</span>,<span class="string">'GREEN'</span>]</div><div class="line">        &#125;,</div><div class="line">        // 保存为图片设置</div><div class="line">        toolbox: &#123;</div><div class="line">          show: <span class="literal">true</span>,</div><div class="line">          feature: &#123;</div><div class="line">            saveAsImage: &#123;</div><div class="line">              show:<span class="literal">true</span>,</div><div class="line">              title: <span class="string">'Save image'</span>,</div><div class="line">              excludeComponents :[<span class="string">'toolbox'</span>],</div><div class="line">              pixelRatio: 2</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        series : [&#123;</div><div class="line">            name: <span class="string">'COLOUR TYPE'</span>,</div><div class="line">            <span class="built_in">type</span>: <span class="string">'pie'</span>,</div><div class="line">            radius : <span class="string">'55%'</span>,</div><div class="line">            center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</div><div class="line">            data:[</div><div class="line">                &#123;value:335, name:<span class="string">'RED'</span>&#125;,</div><div class="line">                &#123;value:310, name:<span class="string">'BLUE'</span>&#125;,</div><div class="line">                &#123;value:234, name:<span class="string">'YELLOW'</span>&#125;,</div><div class="line">                &#123;value:135, name:<span class="string">'GREEN'</span>&#125;,</div><div class="line">            ],</div><div class="line">            itemStyle: &#123;</div><div class="line">              emphasis: &#123;</div><div class="line">                shadowBlur: 10,</div><div class="line">                shadowOffsetX: 0,</div><div class="line">                shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;],</div><div class="line">          _width: <span class="string">"50%"</span>,</div><div class="line">          _height: <span class="string">'300px'</span></div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="title">created</span></span>() &#123;</div><div class="line">    this.initData();</div><div class="line">    this.initAllData();</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    <span class="function"><span class="title">initData</span></span>() &#123;</div><div class="line">      <span class="built_in">let</span> item_list = Object.keys(this.selectObject);</div><div class="line">      item_list.forEach((key)=&gt;&#123;</div><div class="line">        this.optionData.push(</div><div class="line">          &#123;</div><div class="line">            title: &#123;</div><div class="line">              text: key</div><div class="line">            &#125;,</div><div class="line">            toolbox: &#123;</div><div class="line">              show: <span class="literal">true</span>,</div><div class="line">              feature: &#123;</div><div class="line">                saveAsImage: &#123;</div><div class="line">                  show:<span class="literal">true</span>,</div><div class="line">                  title: <span class="string">'Save image'</span>,</div><div class="line">                  excludeComponents :[<span class="string">'toolbox'</span>],</div><div class="line">                  pixelRatio: 2</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            tooltip: &#123;</div><div class="line">              trigger: <span class="string">'axis'</span>,</div><div class="line">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class="line">                <span class="built_in">type</span>: <span class="string">'line'</span>, // 默认为直线，可选为：<span class="string">'line'</span> | <span class="string">'shadow'</span></div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            legend: &#123;</div><div class="line">              data: [key]</div><div class="line">            &#125;,</div><div class="line">            xAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">'category'</span>,</div><div class="line">                data: this.dateTime,</div><div class="line">                axisTick: &#123;</div><div class="line">                  alignWithLable: <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">              &#125;,</div><div class="line">            ],</div><div class="line">            yAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">"value"</span></div><div class="line">              &#125;</div><div class="line">            ],</div><div class="line">            series: &#123;</div><div class="line">              name: key,</div><div class="line">              <span class="built_in">type</span>: <span class="string">"bar"</span>, // bar, line</div><div class="line">              data: this.selectObject[key],</div><div class="line">              barWidth: <span class="string">'60%'</span></div><div class="line">            &#125;,</div><div class="line">            _width: <span class="string">"45%"</span>,</div><div class="line">            _height: <span class="string">'240px'</span></div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">    <span class="function"><span class="title">initAllData</span></span>() &#123;</div><div class="line">      <span class="built_in">let</span> item_list = Object.keys(this.selectAllObject);</div><div class="line">      item_list.forEach((key)=&gt;&#123;</div><div class="line">        <span class="built_in">let</span> type_list = Object.keys(this.selectAllObject[key]);</div><div class="line">        this.optionAllData.push(</div><div class="line">          &#123;</div><div class="line">            title: &#123;</div><div class="line">              text: key</div><div class="line">            &#125;,</div><div class="line">            toolbox: &#123;</div><div class="line">              show: <span class="literal">true</span>,</div><div class="line">              feature: &#123;</div><div class="line">                saveAsImage: &#123;</div><div class="line">                  show:<span class="literal">true</span>,</div><div class="line">                  title: <span class="string">'Save image'</span>,</div><div class="line">                  excludeComponents :[<span class="string">'toolbox'</span>],</div><div class="line">                  pixelRatio: 2</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            tooltip: &#123;</div><div class="line">              trigger: <span class="string">'axis'</span>,</div><div class="line">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class="line">                <span class="built_in">type</span>: <span class="string">'line'</span>, // 默认为直线，可选为：<span class="string">'line'</span> | <span class="string">'shadow'</span></div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            legend: &#123;</div><div class="line">              data: type_list,</div><div class="line">            &#125;,</div><div class="line">            xAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">'category'</span>,</div><div class="line">                data: this.dateTime,</div><div class="line">                axisTick: &#123;</div><div class="line">                  alignWithLable: <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">              &#125;,</div><div class="line">            ],</div><div class="line">            yAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">"value"</span></div><div class="line">              &#125;</div><div class="line">            ],</div><div class="line">            series: [</div><div class="line">              &#123;</div><div class="line">                name: type_list[0],</div><div class="line">                <span class="built_in">type</span>: <span class="string">"line"</span>, // bar, line</div><div class="line">                data: this.selectAllObject[key][type_list[0]],</div><div class="line">                barWidth: <span class="string">'60%'</span></div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                name: type_list[1],</div><div class="line">                <span class="built_in">type</span>: <span class="string">"line"</span>, // bar, line</div><div class="line">                data: this.selectAllObject[key][type_list[1]],</div><div class="line">                barWidth: <span class="string">'60%'</span></div><div class="line">              &#125;</div><div class="line">            ],</div><div class="line">            _width: <span class="string">"45%"</span>,</div><div class="line">            _height: <span class="string">'240px'</span></div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据&lt;
    
    </summary>
    
      <category term="Frontend" scheme="https://ttxsgoto.github.io/categories/Frontend/"/>
    
    
      <category term="vue" scheme="https://ttxsgoto.github.io/tags/vue/"/>
    
      <category term="echarts" scheme="https://ttxsgoto.github.io/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Vue 生命周期函数</title>
    <link href="https://ttxsgoto.github.io/2019/06/30/vue-life-cycle-function/"/>
    <id>https://ttxsgoto.github.io/2019/06/30/vue-life-cycle-function/</id>
    <published>2019-06-30T11:29:15.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录vue 生命周期函数的学习</p>
<h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 生命周期函数：就是vue实例在某一个时间点会自动执行的函数</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">"#root"</span>,</div><div class="line">    <span class="comment">//template: "",</span></div><div class="line">    data: &#123;</div><div class="line">        <span class="attr">message</span>: <span class="string">"hello world"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="string">'xxxxx'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 生命周期函数</span></div><div class="line">    <span class="comment">// 在实例初始化之后，数据观测 (data observer) 和 </span></div><div class="line">    <span class="comment">// event/watcher 事件配置之前被调用</span></div><div class="line">    beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeCreate'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：</span></div><div class="line">    <span class="comment">// 数据观测 (data observer)，属性和方法的运算，</span></div><div class="line">    <span class="comment">// watch/event 事件回调。</span></div><div class="line">    <span class="comment">// 然而，挂载阶段还没开始，$el 属性目前不可见</span></div><div class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'created'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 在挂载开始之前被调用：相关的 render 函数首次被调用。</span></div><div class="line">    beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 页面还没有挂载，自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeMount'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</span></div><div class="line">    mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 页面挂载后，自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'mounted'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 实例销毁之前调用。在这一步，实例仍然完全可用</span></div><div class="line">    beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">     	<span class="comment">// 当调用$destroy()方法时，还没有被销毁时，方法被触发</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeDestroy'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，</span></div><div class="line">    <span class="comment">// 所有的事件监听器会被移除，所有的子实例也会被销毁</span></div><div class="line">    destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 当调用$destroy()方法时，完全销毁时方法被触发</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'destroy'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    	<span class="comment">// 数据发生改变，还没有渲染之前执行该函数, vm.message= 'test'</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeUpdate'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 数据渲染之后执行该函数</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'updated'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录vue 生命周期函数的学习&lt;/p&gt;
&lt;h3 id=&quot;生命周期图示&quot;&gt;&lt;a href=&quot;#生命周期图示&quot; class=&quot;headerlink&quot; title=&quot;生命周期图示&quot;&gt;&lt;/a&gt;生命周期图示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://cn.vuejs.org/
    
    </summary>
    
      <category term="Frontend" scheme="https://ttxsgoto.github.io/categories/Frontend/"/>
    
    
      <category term="Vue" scheme="https://ttxsgoto.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Systemd服务</title>
    <link href="https://ttxsgoto.github.io/2019/06/29/yw-systemd/"/>
    <id>https://ttxsgoto.github.io/2019/06/29/yw-systemd/</id>
    <published>2019-06-29T03:07:07.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管理。</p>
<h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><p>systemctl是 Systemd 的主命令，用于管理系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 重启系统</div><div class="line">$ sudo systemctl reboot</div><div class="line"> </div><div class="line"># 关闭系统，切断电源</div><div class="line">$ sudo systemctl poweroff</div><div class="line"> </div><div class="line"># CPU停止工作</div><div class="line">$ sudo systemctl halt</div><div class="line"> </div><div class="line"># 暂停系统</div><div class="line">$ sudo systemctl suspend</div><div class="line"> </div><div class="line"># 让系统进入冬眠状态</div><div class="line">$ sudo systemctl hibernate</div><div class="line"> </div><div class="line"># 让系统进入交互式休眠状态</div><div class="line">$ sudo systemctl hybrid-sleep</div><div class="line"> </div><div class="line"># 启动进入救援状态（单用户状态）</div><div class="line">$ sudo systemctl rescue</div></pre></td></tr></table></figure></p>
<h4 id="systemd-analyze"><a href="#systemd-analyze" class="headerlink" title="systemd-analyze"></a>systemd-analyze</h4><p>systemd-analyze命令用于查看启动耗时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 查看启动耗时</div><div class="line">$ systemd-analyze</div><div class="line"> </div><div class="line"># 查看每个服务的启动耗时</div><div class="line">$ systemd-analyze blame</div><div class="line"> </div><div class="line"># 显示瀑布状的启动过程流</div><div class="line">$ systemd-analyze critical-chain</div><div class="line"> </div><div class="line"># 显示指定服务的启动流</div><div class="line">$ systemd-analyze critical-chain atd.service</div></pre></td></tr></table></figure></p>
<h4 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h4><p>hostnamectl命令用于查看当前主机的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 显示当前主机的信息</div><div class="line">$ hostnamectl</div><div class="line"> </div><div class="line"># 设置主机名</div><div class="line">$ sudo hostnamectl set-hostname test01</div></pre></td></tr></table></figure></p>
<h4 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h4><p>timedatectl命令用于查看当前时区设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 查看当前时区设置</div><div class="line">$ timedatectl</div><div class="line"> </div><div class="line"># 显示所有可用的时区</div><div class="line">$ timedatectl list-timezones                                                        </div><div class="line"># 设置当前时区</div><div class="line">$ sudo timedatectl set-timezone America/New_York</div><div class="line">$ sudo timedatectl set-time YYYY-MM-DD</div><div class="line">$ sudo timedatectl set-time HH:MM:SS</div></pre></td></tr></table></figure></p>
<h4 id="loginctl"><a href="#loginctl" class="headerlink" title="loginctl"></a>loginctl</h4><p>loginctl命令用于查看当前登录的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 列出当前session</div><div class="line">$ loginctl list-sessions</div><div class="line"> </div><div class="line"># 列出当前登录用户</div><div class="line">$ loginctl list-users</div><div class="line"> </div><div class="line"># 列出显示指定用户的信息</div><div class="line">$ loginctl show-user test</div></pre></td></tr></table></figure></p>
<h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Service unit：系统服务</div><div class="line">Target unit：多个 Unit 构成的一个组</div><div class="line">Device Unit：硬件设备</div><div class="line">Mount Unit：文件系统的挂载点</div><div class="line">Automount Unit：自动挂载点</div><div class="line">Path Unit：文件或路径</div><div class="line">Scope Unit：不是由 Systemd 启动的外部进程</div><div class="line">Slice Unit：进程组</div><div class="line">Snapshot Unit：Systemd 快照，可以切回某个快照</div><div class="line">Socket Unit：进程间通信的 socket</div><div class="line">Swap Unit：swap 文件</div><div class="line">Timer Unit：定时器</div></pre></td></tr></table></figure></p>
<p>systemctl list-units命令可以查看当前系统的所有 Unit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 列出正在运行的 Unit</div><div class="line">$ systemctl list-units</div><div class="line"> </div><div class="line"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</div><div class="line">$ systemctl list-units --all</div><div class="line"> </div><div class="line"># 列出所有没有运行的 Unit</div><div class="line">$ systemctl list-units --all --state=inactive</div><div class="line"> </div><div class="line"># 列出所有加载失败的 Unit</div><div class="line">$ systemctl list-units --failed</div><div class="line"> </div><div class="line"># 列出所有正在运行的、类型为 service 的 Unit</div><div class="line">$ systemctl list-units --type=service</div></pre></td></tr></table></figure></p>
<h4 id="Unit-的状态"><a href="#Unit-的状态" class="headerlink" title="Unit 的状态"></a>Unit 的状态</h4><p>systemctl status命令用于查看系统状态和单个 Unit 的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 显示系统状态</div><div class="line">$ systemctl status</div><div class="line"> </div><div class="line"># 显示单个 Unit 的状态</div><div class="line">$ sysystemctl status test.service</div><div class="line">  </div><div class="line"># 显示远程主机的某个 Unit 的状态</div><div class="line">$ systemctl -H root@localhost status httpd.service</div><div class="line">除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</div><div class="line">  </div><div class="line"># 显示某个 Unit 是否正在运行</div><div class="line">$ systemctl is-active test.service</div><div class="line"> </div><div class="line"># 显示某个 Unit 是否处于启动失败状态</div><div class="line">$ systemctl is-failed test.service</div><div class="line"> </div><div class="line"># 显示某个 Unit 服务是否建立了启动链接</div><div class="line">$ systemctl is-enabled test.service</div></pre></td></tr></table></figure></p>
<h4 id="Unit-管理"><a href="#Unit-管理" class="headerlink" title="Unit 管理"></a>Unit 管理</h4><p>最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 立即启动一个服务</div><div class="line">$ sudo systemctl start apache.service</div><div class="line"> </div><div class="line"># 立即停止一个服务</div><div class="line">$ sudo systemctl stop apache.service</div><div class="line"> </div><div class="line"># 重启一个服务</div><div class="line">$ sudo systemctl restart apache.service</div><div class="line"> </div><div class="line"># 杀死一个服务的所有子进程</div><div class="line">$ sudo systemctl kill apache.service</div><div class="line"> </div><div class="line"># 重新加载一个服务的配置文件</div><div class="line">$ sudo systemctl reload apache.service</div><div class="line"> </div><div class="line"># 重载所有修改过的配置文件</div><div class="line">$ sudo systemctl daemon-reload</div><div class="line"> </div><div class="line"># 显示某个 Unit 的所有底层参数</div><div class="line">$ systemctl show httpd.service</div><div class="line"> </div><div class="line"># 显示某个 Unit 的指定属性的值</div><div class="line">$ systemctl show -p CPUShares httpd.service</div><div class="line"> </div><div class="line"># 设置某个 Unit 的指定属性</div><div class="line">$ sudo systemctl set-property httpd.service CPUShares=500</div></pre></td></tr></table></figure></p>
<h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B<br>systemctl list-dependencies命令列出一个 Unit 的所有依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ systemctl list-dependencies nginx.service</div><div class="line">上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。</div><div class="line"> </div><div class="line">$ systemctl list-dependencies --all nginx.service</div></pre></td></tr></table></figure></p>
<h3 id="Unit-配置文件"><a href="#Unit-配置文件" class="headerlink" title="Unit 配置文件"></a>Unit 配置文件</h3><p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个Unit,Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。<br>systemctl enable命令用于在上面两个目录之间，建立符号链接关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl enable test.service </div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/test.service to /usr/lib/systemd/system/test.service.</div></pre></td></tr></table></figure></p>
<p>如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。<br>与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl disable test.service</div></pre></td></tr></table></figure></p>
<p>配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。</p>
<h4 id="配置文件的状态"><a href="#配置文件的状态" class="headerlink" title="配置文件的状态"></a>配置文件的状态</h4><p>systemctl list-unit-files命令用于列出所有配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 列出所有配置文件</div><div class="line">$ systemctl list-unit-files</div><div class="line">UNIT FILE              STATE</div><div class="line">chronyd.service        enabled</div><div class="line">clamd@.service         static</div><div class="line">clamd@scan.service     disabled</div><div class="line"> </div><div class="line">enabled：已建立启动链接</div><div class="line">disabled：没建立启动链接</div><div class="line">static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖</div><div class="line">masked：该配置文件被禁止建立启动链接</div><div class="line"> </div><div class="line"># 列出指定类型的配置文件</div><div class="line">$ systemctl list-unit-files --type=service</div></pre></td></tr></table></figure></p>
<p>从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status test.service</div></pre></td></tr></table></figure></p>
<p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl daemon-reload</div><div class="line">$ sudo systemctl restart httpd.service</div></pre></td></tr></table></figure></p>
<h4 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h4><p>systemctl cat命令可以查看配置文件的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ systemctl cat test.service</div><div class="line"> </div><div class="line">[Unit]</div><div class="line">Description=Test Demo</div><div class="line">After=syslog.target network.target</div><div class="line"> </div><div class="line">[Service]</div><div class="line">ExecStart=/usr/bin/python2.7 /home/user/python/test.py</div><div class="line"> </div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><p>[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Description：简短描述</div><div class="line">Documentation：文档地址</div><div class="line">Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</div><div class="line">Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</div><div class="line">BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</div><div class="line">Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</div><div class="line">After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</div><div class="line">Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</div><div class="line">Condition...：当前 Unit 运行必须满足的条件，否则不会运行</div><div class="line">Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败</div></pre></td></tr></table></figure></p>
<p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中</div><div class="line">RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中</div><div class="line">Alias：当前 Unit 可用于启动的别名</div><div class="line">Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</div></pre></td></tr></table></figure></p>
<p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Type：定义启动时的进程行为。它有以下几种值。</div><div class="line">Type=simple：默认值，执行ExecStart指定的命令，启动主进程</div><div class="line">Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</div><div class="line">Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</div><div class="line">Type=dbus：当前服务通过D-Bus启动</div><div class="line">Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</div><div class="line">Type=idle：若有其他任务执行完毕，当前服务才会运行</div><div class="line">ExecStart：启动当前服务的命令</div><div class="line">ExecStartPre：启动当前服务之前执行的命令</div><div class="line">ExecStartPost：启动当前服务之后执行的命令</div><div class="line">ExecReload：重启当前服务时执行的命令</div><div class="line">ExecStop：停止当前服务时执行的命令</div><div class="line">ExecStopPost：停止当其服务之后执行的命令</div><div class="line">RestartSec：自动重启当前服务间隔的秒数</div><div class="line">Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</div><div class="line">TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</div><div class="line">Environment：指定环境变量</div></pre></td></tr></table></figure></p>
<h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</div><div class="line">$ sudo journalctl</div><div class="line"> </div><div class="line"># 查看内核日志（不显示应用日志）</div><div class="line">$ sudo journalctl -k</div><div class="line"> </div><div class="line"># 查看系统本次启动的日志</div><div class="line">$ sudo journalctl -b</div><div class="line">$ sudo journalctl -b -0</div><div class="line"> </div><div class="line"># 查看上一次启动的日志（需更改设置）</div><div class="line">$ sudo journalctl -b -1</div><div class="line"> </div><div class="line"># 查看指定时间的日志</div><div class="line">$ sudo journalctl --since=&quot;2012-10-30 18:17:16&quot;</div><div class="line">$ sudo journalctl --since &quot;20 min ago&quot;</div><div class="line">$ sudo journalctl --since yesterday</div><div class="line">$ sudo journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot;</div><div class="line">$ sudo journalctl --since 09:00 --until &quot;1 hour ago&quot;</div><div class="line"> </div><div class="line"># 显示尾部的最新10行日志</div><div class="line">$ sudo journalctl -n</div><div class="line"> </div><div class="line"># 显示尾部指定行数的日志</div><div class="line">$ sudo journalctl -n 20</div><div class="line"> </div><div class="line"># 实时滚动显示最新日志</div><div class="line">$ sudo journalctl -f</div><div class="line"> </div><div class="line"># 查看指定服务的日志</div><div class="line">$ sudo journalctl /usr/lib/systemd/systemd</div><div class="line"> </div><div class="line"># 查看某个路径的脚本的日志</div><div class="line">$ sudo journalctl /usr/bin/bash</div><div class="line"> </div><div class="line"># 查看指定用户的日志</div><div class="line">$ sudo journalctl _UID=12 --since today</div><div class="line"> </div><div class="line"># 查看某个 Unit 的日志</div><div class="line">$ sudo journalctl -u nginx.service</div><div class="line">$ sudo journalctl -u nginx.service --since today</div><div class="line"> </div><div class="line"># 实时滚动显示某个 Unit 的最新日志</div><div class="line">$ sudo journalctl -u nginx.service -f</div><div class="line"> </div><div class="line"># 合并显示多个 Unit 的日志</div><div class="line">$ journalctl -u nginx.service -u php-fpm.service --since today</div><div class="line"> </div><div class="line"># 查看指定优先级（及其以上级别）的日志，共有8级</div><div class="line"># 0: emerg</div><div class="line"># 1: alert</div><div class="line"># 2: crit</div><div class="line"># 3: err</div><div class="line"># 4: warning</div><div class="line"># 5: notice</div><div class="line"># 6: info</div><div class="line"># 7: debug</div><div class="line">$ sudo journalctl -p err -b</div><div class="line"> </div><div class="line"># 日志默认分页输出，--no-pager 改为正常的标准输出</div><div class="line">$ sudo journalctl --no-pager</div><div class="line"> </div><div class="line"># 以 JSON 格式（单行）输出</div><div class="line">$ sudo journalctl -b -u nginx.service -o json</div><div class="line"> </div><div class="line"># 以 JSON 格式（多行）输出，可读性更好</div><div class="line">$ sudo journalctl -b -u nginx.serviceqq</div><div class="line"> -o json-pretty</div><div class="line"> </div><div class="line"># 显示日志占据的硬盘空间</div><div class="line">$ sudo journalctl --disk-usage</div><div class="line"> </div><div class="line"># 指定日志文件占据的最大空间</div><div class="line">$ sudo journalctl --vacuum-size=1G</div><div class="line"> </div><div class="line"># 指定日志文件保存多久</div><div class="line">$ sudo journalctl --vacuum-time=1years</div></pre></td></tr></table></figure></p>
<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。</p>
<p>如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl enable httpd</div></pre></td></tr></table></figure></p>
<p>上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。</p>
<p>这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>
<h3 id="修改配置文件后重启"><a href="#修改配置文件后重启" class="headerlink" title="修改配置文件后重启"></a>修改配置文件后重启</h3><p>修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 重新加载配置文件</div><div class="line">$ sudo systemctl daemon-reload</div><div class="line"> </div><div class="line"># 重启相关服务</div><div class="line">$ sudo systemctl restart test.service</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="systemd" scheme="https://ttxsgoto.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>Sersync+Rsync文件同步</title>
    <link href="https://ttxsgoto.github.io/2019/01/10/yw-sersync/"/>
    <id>https://ttxsgoto.github.io/2019/01/10/yw-sersync/</id>
    <published>2019-01-10T13:58:34.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时同步到另外一台的同一目录中，这时就不能使用远程目录挂载方式完成了， 这里使用sersync+rsync来完成需求</p>
<h4 id="Sersync特点"><a href="#Sersync特点" class="headerlink" title="Sersync特点"></a>Sersync特点</h4><ul>
<li>c++编写，对linux系统文件系统产生的临时文件和重复的文件操作进行过滤，结合rsync同步的时候，节省了运行时耗和网络资源</li>
<li>使用多线程进行同步，在同步较大文件时，能够保证多个服务器实时保持同步状态</li>
<li>自带crontab功能，只需在xml配置文件中开启，隔一段时间整体同步一次</li>
<li>自定义同步规则</li>
</ul>
<h4 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h4><p>配置文件说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">uid = root</div><div class="line">gid = root</div><div class="line">port = <span class="number">873</span></div><div class="line">max connections = <span class="number">1000</span></div><div class="line">timeout = <span class="number">600</span></div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">log file = /var/log/rsync.log</div><div class="line">lockfile = /var/run/rsyncd.lock</div><div class="line">motd file = /etc/rsyncd/rsyncd.moth</div><div class="line">log format = %t %a %m %f %b</div><div class="line"> </div><div class="line">[yw_test]</div><div class="line">path = /data/yw_test</div><div class="line">ignore errors = yes</div><div class="line">list = no</div><div class="line">ignore errors</div><div class="line">read only = no</div><div class="line">auth users = rsync</div><div class="line">secrets file = /etc/rsync/rsyncd.secrets</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 600 /etc/rsync/rsyncd.secrets</div><div class="line">rsync --daemon --config=/etc/rsync/rsyncd.conf</div></pre></td></tr></table></figure></p>
<h4 id="Sersync"><a href="#Sersync" class="headerlink" title="Sersync"></a>Sersync</h4><p>配置文件confxml.xml说明<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">host</span> <span class="attr">hostip</span>=<span class="string">"localhost"</span> <span class="attr">port</span>=<span class="string">"8008"</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">debug</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fileSystem</span> <span class="attr">xfs</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--监控事件的过程中过滤特定文件，和特定文件夹的文件 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"log.txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.svn"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.gz"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置要监控的事件 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">inotify</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">createFolder</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">createFile</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">closeWrite</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">moveFrom</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">moveTo</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">attrib</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">modify</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">inotify</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">sersync</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!--设定监控目录--&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/data/test"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--指定远端rsync的地址和模块名--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">remote</span> <span class="attr">ip</span>=<span class="string">"192.168.0.1"</span> <span class="attr">name</span>=<span class="string">"yw_test"</span>/&gt;</span>   </div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">rsync</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!--commonParams params="-rczgop"/--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">commonParams</span> <span class="attr">params</span>=<span class="string">"-artuz"</span>/&gt;</span></div><div class="line">	    <span class="comment">&lt;!--是否启用验证，并指定密码存放文件 --&gt;</span> </div><div class="line">	    <span class="tag">&lt;<span class="name">auth</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">users</span>=<span class="string">"rsync"</span> <span class="attr">passwordfile</span>=<span class="string">"/etc/rsync_client.pass "</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">userDefinedPort</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">port</span>=<span class="string">"873"</span>/&gt;</span><span class="comment">&lt;!-- port=874 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">timeout</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">time</span>=<span class="string">"100"</span>/&gt;</span><span class="comment">&lt;!-- timeout=100 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">ssh</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">rsync</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">failLog</span> <span class="attr">path</span>=<span class="string">"/tmp/rsync_fail_log.log"</span> <span class="attr">timeToExecute</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!--default every 60mins execute once--&gt;</span></div><div class="line">	<span class="comment">&lt;!--是否启用执行完整rsync，并指定执行周期 --&gt;</span>     </div><div class="line">	<span class="tag">&lt;<span class="name">crontab</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">schedule</span>=<span class="string">"5"</span>&gt;</span><span class="comment">&lt;!--5mins--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">crontabfilter</span> <span class="attr">start</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"log.txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.svn"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.gz"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"info/*"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;/<span class="name">crontabfilter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">crontab</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"command"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">sersync</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"command"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">prefix</span>=<span class="string">"/bin/sh"</span> <span class="attr">suffix</span>=<span class="string">""</span> <span class="attr">ignoreError</span>=<span class="string">"true"</span>/&gt;</span>	<span class="comment">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.php"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.sh"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"socket"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/opt/tongbu"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">deshost</span> <span class="attr">ip</span>=<span class="string">"192.168.138.20"</span> <span class="attr">port</span>=<span class="string">"8009"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"refreshCDN"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/data0/htdocs/cms.xoyo.com/site/"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">cdninfo</span> <span class="attr">domainname</span>=<span class="string">"ccms.chinacache.com"</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">username</span>=<span class="string">"xxxx"</span> <span class="attr">passwd</span>=<span class="string">"xxxx"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">sendurl</span> <span class="attr">base</span>=<span class="string">"http://pic.xoyo.com/cms"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">regexurl</span> <span class="attr">regex</span>=<span class="string">"false"</span> <span class="attr">match</span>=<span class="string">"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chmod 600 /etc/rsync_client.pass </div><div class="line">/etc/rsync/sersync2 -r -d -o /etc/rsync/confxml.xml</div><div class="line"> </div><div class="line">-d:启用守护进程模式</div><div class="line">-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</div><div class="line">-n: 指定开启守护线程的数量，默认为10个</div><div class="line">-o:指定配置文件，默认使用confxml.xml文件</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="sersync" scheme="https://ttxsgoto.github.io/tags/sersync/"/>
    
  </entry>
  
  <entry>
    <title>Apollo配置中心</title>
    <link href="https://ttxsgoto.github.io/2019/01/07/yw-apollo/"/>
    <id>https://ttxsgoto.github.io/2019/01/07/yw-apollo/</id>
    <published>2019-01-07T12:59:45.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>之前文章中说过发布流程(<a href="https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/">Jenkins+Gitlab+Harbor构建持续集成</a>),但这里有个问题——不同环境中的配置文件不一样，之前的方案只是把代码发布到机器上，不能“一刀切”使用相同的配置，我们现在使用携程框架部门研发的开源配置管理中心Apollo来完成配置文件分发</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>配置修改实时生效</li>
<li>灰度发布</li>
<li>分环节</li>
<li>分集群管理配置</li>
<li>权限</li>
<li>审核机制等</li>
</ul>
<p>apollo能够集中化管理应用不同环境，不同集群，修改配置后能够实时推送到应用，并具备规范的权限和流程治理特性</p>
<h4 id="4个维度管理k-v配置"><a href="#4个维度管理k-v配置" class="headerlink" title="4个维度管理k-v配置"></a>4个维度管理k-v配置</h4><ul>
<li>application(应用)</li>
<li>environment(环境)</li>
<li>cluster(集群)</li>
<li>namespace(命名空间)</li>
</ul>
<p>配置文件实时生效(热发布),用户在apollo修改完配置并发布后，客户端能实时(1s)接收到最新配置，并通知应用程序</p>
<h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><p>客户端(python)实现参照<br><a href="https://github.com/filamoon/pyapollo" target="_blank" rel="external">https://github.com/filamoon/pyapollo</a></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="external">https://github.com/ctripcorp/apollo</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="external">https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;之前文章中说过发布流程(&lt;a href=&quot;https://ttxsgoto.github.io/2019/01/04/yw-jenkins-
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Apollo" scheme="https://ttxsgoto.github.io/tags/Apollo/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Gitlab+Harbor构建持续集成</title>
    <link href="https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/"/>
    <id>https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/</id>
    <published>2019-01-04T12:41:44.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenkins工具，自动发布代码到对应环境中，然后进行测试，提高研发工作效率和减少运维人员重复工作</p>
<h4 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h4><h5 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h5><p>jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能<br>特点：</p>
<ul>
<li>分布式构建</li>
<li>大量三方插件</li>
<li>变更支持</li>
<li>消息通知</li>
</ul>
<h5 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h5><p>Gitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务<br>特点：</p>
<ul>
<li>代码仓库管理</li>
<li>多人协作</li>
<li>完善的用户、权限管理</li>
</ul>
<h5 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h5><p>Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器<br>特点：</p>
<ul>
<li>基于角色的访问控制</li>
<li>镜像复制</li>
<li>鉴权认证管理</li>
<li>用户管理，访问控制和活动审计</li>
<li>RESTful API</li>
</ul>
<h4 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h4><ol>
<li>通过Jenkins 生成的secret token来关联gitlab Webhooks设置url 和token，当代码有更新时，自动触发构建</li>
<li>将代码拉取到Jenkins运行节点中，通过基础镜像加dockerfile文件构建应用镜像，然后上传到Harbor服务器中</li>
<li>在测试服务器中拉取对应的镜像，然后运行起来</li>
<li>构建完成没有错误，发邮件通知相关人员</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>Jenkins系统设置中需要配置gitlab服务器地址和对应的gitlab api token用于Jenkins和gitlab交互通信</li>
<li>Jenkins任务构建可以指定在固定节点上构建， 构建节点和应用服务器之间必须有登录权限</li>
<li>Harbor镜像管理，需要有鉴权和认证设置</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenki
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Jenkins" scheme="https://ttxsgoto.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Count计数变慢</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-count/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-count/</id>
    <published>2018-12-28T14:48:50.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="count-实现方式"><a href="#count-实现方式" class="headerlink" title="count(*) 实现方式"></a>count(*) 实现方式</h4><p>不同的引擎，实现方式不同</p>
<ul>
<li>Myisam把一个表的总行存在磁盘上，执行时直接返回这个数</li>
<li>Innodb，需要把数据一行行的从引擎中读出来，然后累积计数，遍历全表</li>
</ul>
<h4 id="不同的count用法"><a href="#不同的count用法" class="headerlink" title="不同的count用法"></a>不同的count用法</h4><p>count()为聚合函数，对于返回的结果集，一行行判断，如果count函数的参数不为null，累计值加1，最终返回累计值</p>
<ul>
<li>count(*)</li>
<li>count(id)</li>
<li>count(字段)</li>
<li>count(1)</li>
</ul>
<p>这里count(*),count(id),count(1)返回满足条件的结果集的总行数，而count(字段)返回满足条件不为null的总数<br>性能比较原则：</p>
<ol>
<li>server层要做什么就给什么</li>
<li>innodb只给必要的值</li>
</ol>
<h4 id="效率排序"><a href="#效率排序" class="headerlink" title="效率排序"></a>效率排序</h4><p>count(字段)&lt; count(id)&lt;count(1)=count(*)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;count-实现方式&quot;&gt;&lt;a href=&quot;#count-实现方式&quot; class=&quot;headerlink&quot; title=&quot;count(*) 实现方式&quot;&gt;&lt;/a&gt;count(*) 实现方式&lt;/h4&gt;&lt;p&gt;不同的引擎，实现方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Myisam
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="count" scheme="https://ttxsgoto.github.io/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>Order by工作原理</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-order-by/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-order-by/</id>
    <published>2018-12-28T14:46:51.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h4><p>mysql会给每个线程分配一块内存用于排序，称为sort_buffer</p>
<p>sort_buffer_size 是mysql为排序开辟的内存大小(sort_buffer)大小，如果要排序的数据量小于sort_buffer_size，排序在内存中完成，如果排序数据量太大，大于该值，则需要用磁盘临时文件辅助排序</p>
<h4 id="rowid排序"><a href="#rowid排序" class="headerlink" title="rowid排序"></a>rowid排序</h4><p>全字段排序只对原表数据读取一次，剩下的都在sort_buffer和临时文件中进行，如果查询返回的字段很多，那么sort_buffer里面存放的字段数太多，内存里放下的数据行数就很少，需要分成很多个临时文件，排序的性能会受影响，这时需要使用rowid排序</p>
<p>max_length_for_sort_data 字段用来控制排序的行数据的长度的参数，如果单行的长度超过这个值，mysql会换一种算法，即将查询的列和主键id放入sort_buffer中</p>
<p>这种算法需要多访问一次表的主键索引</p>
<p>如果内存大，mysql就会多利用内存，尽量减少磁盘访问</p>
<p><strong>写入有序数据，通过索引本身就是写入数据就是有序的，那么order by 就不需要排序了，直接就是对应的数据</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;全字段排序&quot;&gt;&lt;a href=&quot;#全字段排序&quot; class=&quot;headerlink&quot; title=&quot;全字段排序&quot;&gt;&lt;/a&gt;全字段排序&lt;/h4&gt;&lt;p&gt;mysql会给每个线程分配一块内存用于排序，称为sort_buffer&lt;/p&gt;
&lt;p&gt;sort_buffer_siz
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="排序" scheme="https://ttxsgoto.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>字符串加索引</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-addindex-to-string/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-addindex-to-string/</id>
    <published>2018-12-28T12:41:50.000Z</published>
    <updated>2020-03-20T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数</p>
<p>在建立索引时需要关注的是区分度，区分度越高越好</p>
<p>查看对应索引的区分度方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select count(distinct a) <span class="keyword">as</span> L <span class="keyword">from</span> user;</div><div class="line">select count(*) <span class="keyword">as</span> total <span class="keyword">from</span> user;</div><div class="line"> </div><div class="line">select count(distinct left(a, <span class="number">4</span>) <span class="keyword">as</span> L4,</div><div class="line">       count(distinct left(a, <span class="number">5</span>) <span class="keyword">as</span> L5,</div><div class="line"><span class="keyword">from</span> user</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：使用前缀索引就用不上覆盖索引查询对查询性能的优化，这是在选择是否使用前缀索引时需要考虑的因素</p>
<h4 id="倒序存储"><a href="#倒序存储" class="headerlink" title="倒序存储"></a>倒序存储</h4><p>对前面n位数都是重复的字段，可以使用倒序存储，将存储的内容倒序存储<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select field <span class="keyword">from</span> t where word=reverse(<span class="string">'input_string'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="使用hash字段"><a href="#使用hash字段" class="headerlink" title="使用hash字段"></a>使用hash字段</h4><p>在表中再创建一个整数字段，来保存字段的校验码，同时在这个字段创建索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table t add word_crc int unsigned, <span class="keyword">and</span> index(word_crc);</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>直接创建完整索引，这样可能会占用大量的空间</li>
<li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引</li>
<li>倒序存储，在创建前缀索引，用于绕过字符串本身前缀区分度不高的问题</li>
<li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，同时不支持范围扫描</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前缀索引&quot;&gt;&lt;a href=&quot;#前缀索引&quot; class=&quot;headerlink&quot; title=&quot;前缀索引&quot;&gt;&lt;/a&gt;前缀索引&lt;/h4&gt;&lt;p&gt;前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数&lt;/p&gt;
&lt;p&gt;在建立索引时需要关注的是区分度，区分度越高越好&lt;
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
</feed>
