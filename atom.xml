<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2017-04-10T12:50:42.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>datetime模块</title>
    <link href="https://ttxsgoto.github.io/2017/04/10/datetime/"/>
    <id>https://ttxsgoto.github.io/2017/04/10/datetime/</id>
    <published>2017-04-10T13:51:17.000Z</published>
    <updated>2017-04-10T12:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.</p>
<h4 id="时间转换为字符串-格式化输出"><a href="#时间转换为字符串-格式化输出" class="headerlink" title="时间转换为字符串(格式化输出)"></a>时间转换为字符串(格式化输出)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line"><span class="comment"># strftime参数，strftime(format[, tuple]) -&gt; string</span></div><div class="line">python中时间日期格式化符号：</div><div class="line">%y 两位数的年份表示（<span class="number">00</span><span class="number">-99</span>）</div><div class="line">%Y 四位数的年份表示（<span class="number">000</span><span class="number">-9999</span>）</div><div class="line">%m 月份（<span class="number">01</span><span class="number">-12</span>）</div><div class="line">%d 月内中的一天（<span class="number">0</span><span class="number">-31</span>）</div><div class="line">%H <span class="number">24</span>小时制小时数（<span class="number">0</span><span class="number">-23</span>）</div><div class="line">%I <span class="number">12</span>小时制小时数（<span class="number">01</span><span class="number">-12</span>）</div><div class="line">%M 分钟数（<span class="number">00</span><span class="number">-59</span>）</div><div class="line">%S 秒（<span class="number">00</span><span class="number">-59</span>）</div><div class="line">%a 本地简化星期名称</div><div class="line">%A 本地完整星期名称</div><div class="line">%b 本地简化的月份名称</div><div class="line">%B 本地完整的月份名称</div><div class="line">%c 本地相应的日期表示和时间表示</div><div class="line">%j 年内的一天（<span class="number">001</span><span class="number">-366</span>）</div><div class="line">%p 本地A.M.或P.M.的等价符</div><div class="line">%U 一年中的星期数（<span class="number">00</span><span class="number">-53</span>）星期天为星期的开始</div><div class="line">%w 星期（<span class="number">0</span><span class="number">-6</span>），星期天为星期的开始</div><div class="line">%W 一年中的星期数（<span class="number">00</span><span class="number">-53</span>）星期一为星期的开始</div><div class="line">%x 本地相应的日期表示</div><div class="line">%X 本地相应的时间表示</div><div class="line">%Z 当前时区的名称</div><div class="line">%% %号本身</div></pre></td></tr></table></figure>
<h4 id="字符串和datetime转换"><a href="#字符串和datetime转换" class="headerlink" title="字符串和datetime转换"></a>字符串和datetime转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">把str转换为datetime,转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: <span class="keyword">print</span> datetime.now()</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">03.619051</span></div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: type(datetime.now())</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: str = <span class="string">'2017-04-10 21:13:14'</span></div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: type(str)</div><div class="line">Out[<span class="number">5</span>]: str</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: daytime = datetime.strptime(str,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</div><div class="line"> </div><div class="line">In [<span class="number">7</span>]: daytime</div><div class="line">Out[<span class="number">7</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">8</span>]: <span class="keyword">print</span> daytime</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">14</span></div><div class="line"> </div><div class="line">In [<span class="number">9</span>]: type(daytime)</div><div class="line">Out[<span class="number">9</span>]: datetime.datetime</div></pre></td></tr></table></figure>
<h4 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入。</div><div class="line">如果仅导入import datetime，则需要使用datetime.datetime.now()返回当前日期和时间，其类型是datetime</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now = datetime.now()</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: now</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">241762</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> now</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">11</span>:<span class="number">07.241762</span></div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: type(now)</div><div class="line">Out[<span class="number">5</span>]: datetime.datetime</div></pre></td></tr></table></figure>
<h4 id="特定时间"><a href="#特定时间" class="headerlink" title="特定时间"></a>特定时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: day = datetime(<span class="number">2017</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: day</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> day</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h4 id="时间加减"><a href="#时间加减" class="headerlink" title="时间加减"></a>时间加减</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，需要导入timedelta</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now = datetime.now()</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: now</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: now+timedelta(hours=<span class="number">2</span>)</div><div class="line">Out[<span class="number">4</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: now-timedelta(days=<span class="number">2</span>)</div><div class="line">Out[<span class="number">5</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">21</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: now+timedelta(days=<span class="number">1</span>,hours=<span class="number">1</span>)</div><div class="line">Out[<span class="number">6</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.&lt;/p&gt;
&lt;h4 id=&quot;时间转换为字符串-格式化输出&quot;&gt;&lt;a href=&quot;#时间转换为字符串-格式化输出&quot; class=&quot;he
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="datetime" scheme="https://ttxsgoto.github.io/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>django Models</title>
    <link href="https://ttxsgoto.github.io/2017/04/05/django-models-basic/"/>
    <id>https://ttxsgoto.github.io/2017/04/05/django-models-basic/</id>
    <published>2017-04-05T12:07:24.000Z</published>
    <updated>2017-04-05T13:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">1、models.AutoField 自增列 = int(11)</div><div class="line">　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。</div><div class="line">2、models.CharField　　字符串字段</div><div class="line">　　必须 max_length 参数</div><div class="line">3、models.BooleanField　　布尔类型=tinyint(1)</div><div class="line">　　不能为空，Blank=True</div><div class="line">4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar</div><div class="line">　　继承CharField，所以必须 max_lenght 参数</div><div class="line">5、models.DateField　　日期类型 date</div><div class="line">　　对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。</div><div class="line">6、models.DateTimeField　　日期类型 datetime</div><div class="line">　　同DateField的参数</div><div class="line">7、models.Decimal　　十进制小数类型 = decimal</div><div class="line">　　必须指定整数位max_digits和小数位decimal_places</div><div class="line">8、models.EmailField　　字符串类型（正则表达式邮箱） =varchar</div><div class="line">　　对字符串进行正则表达式</div><div class="line">9、models.FloatField　　浮点类型 = double</div><div class="line">10、models.IntegerField　　整形</div><div class="line">11、models.BigIntegerField　　长整形</div><div class="line">　　integer_field_ranges = &#123;</div><div class="line">　　　　&apos;SmallIntegerField&apos;: (-32768, 32767),</div><div class="line">　　　　&apos;IntegerField&apos;: (-2147483648, 2147483647),</div><div class="line">　　　　&apos;BigIntegerField&apos;: (-9223372036854775808, 9223372036854775807),</div><div class="line">　　　　&apos;PositiveSmallIntegerField&apos;: (0, 32767),</div><div class="line">　　　　&apos;PositiveIntegerField&apos;: (0, 2147483647),</div><div class="line">　　&#125;</div><div class="line">12、models.IPAddressField　　字符串类型（ip4正则表达式）</div><div class="line">13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）</div><div class="line">　　参数protocol可以是：both、ipv4、ipv6</div><div class="line">　　验证时，会根据设置报错</div><div class="line">14、models.NullBooleanField　　允许为空的布尔类型</div><div class="line">15、models.PositiveIntegerFiel　　正Integer</div><div class="line">16、models.PositiveSmallIntegerField　　正smallInteger</div><div class="line">17、models.SlugField　　减号、下划线、字母、数字</div><div class="line">18、models.SmallIntegerField　　数字</div><div class="line">　　数据库中的字段有：tinyint、smallint、int、bigint</div><div class="line">19、models.TextField　　字符串=longtext</div><div class="line">20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]</div><div class="line">21、models.URLField　　字符串，地址正则表达式</div><div class="line">22、models.BinaryField　　二进制&lt;br&gt;23、models.ImageField   图片&lt;br&gt;24、models.FilePathField 文件</div><div class="line"> </div><div class="line">更多字段：</div><div class="line">1、null=True 数据库中字段是否可以为空,默认为False</div><div class="line">2、blank=True 表单验证允许该字段为空，如果为blank=False，表示该字段必填</div><div class="line">　　django的 Admin 中添加数据时是否可允许空值,True允许为空，False时，表示该字段为必填</div><div class="line">3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列</div><div class="line">4、auto_now 和 auto_now_add</div><div class="line">　　auto_now   自动创建---无论添加或修改，都是当前操作的时间</div><div class="line">　　auto_now_add  自动创建---永远是创建时的时间</div><div class="line">5、choices</div><div class="line">GENDER_CHOICE = (</div><div class="line">        (u&apos;M&apos;, u&apos;Male&apos;),</div><div class="line">        (u&apos;F&apos;, u&apos;Female&apos;),</div><div class="line">    )</div><div class="line">  如：gender = models.CharField(max_length=2,choices = GENDER_CHOICE)</div><div class="line">6、max_length</div><div class="line">7、default　　设置默认值</div><div class="line">8、verbose_name　　Admin中字段的显示名称，类似于设置别名</div><div class="line">9、name|db_column　　数据库中的字段名称</div><div class="line">10、unique=True　　不允许重复，整表唯一</div><div class="line">11、db_index = True　　数据库索引</div><div class="line">12、editable=True　　在Admin里是否可编辑</div><div class="line">13、error_messages=None　　错误提示</div><div class="line">14、auto_created=False　　自动创建</div><div class="line">15、help_text　　在Admin中提示帮助信息，即使字段不在表单中使用，它对生成文档也很用</div><div class="line">16、validators=[]</div><div class="line">17、upload-to</div><div class="line">18、db_table=&apos;xxx&apos; 重新设置表名称</div><div class="line">19、related_name=&apos;xxxx&apos;  是将外键中的 &quot;topping_set&quot; (取自 类 的名字), 设置为自定义的对象集描述符，一般用于当一个对象要被另一个对象关联不止一次时使用，这个参数才真正有用，如下：</div><div class="line">    models.ForeignKey(Category, related_name=&quot;primary_storys&quot;)</div><div class="line">    models.ForeignKey(Category, related_name=&quot;secondary_storys&quot;)</div><div class="line">20、related_query_name=&apos;xxxx&apos;    用于目标模型的反向过滤</div><div class="line"> </div><div class="line">元选项（非必须）</div><div class="line">class Meta:</div><div class="line">        verbose_name = u&apos;企业/组织&apos;          #别名</div><div class="line">        verbose_name_plural = u&apos;企业/组织&apos;   #复数别名</div><div class="line">        db_table = &apos;organs_organ&apos;          #数据库表名</div><div class="line">        ordering = (&apos;codename&apos;, )          #排序</div><div class="line">字段说明链接：</div><div class="line">http://python.usyiyi.cn/translate/django_182/ref/models/fields.html#common-model-field-options</div></pre></td></tr></table></figure>
<h4 id="数据库表关系"><a href="#数据库表关系" class="headerlink" title="数据库表关系"></a>数据库表关系</h4><ul>
<li>一对多，models.ForeignKey(A)<br>  当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）</li>
<li>一对一，models.OneToOneField(B)<br>  在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失）</li>
<li>多对多，authors = models.ManyToManyField(C)<br>  在某表中创建一行数据是，有一个可以多选的下拉框</li>
</ul>
<h4 id="模型的属性"><a href="#模型的属性" class="headerlink" title="模型的属性"></a>模型的属性</h4><p>objects 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问；也可以自定义方法；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line">    username = models.CharField(<span class="string">u'用户名'</span>, max_length=<span class="number">255</span>)</div><div class="line">    email = models.EmailField(<span class="string">u'Email'</span>)</div><div class="line">    is_active = models.BooleanField(<span class="string">u'是否激活'</span>, default=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    objects = UserManager()</div><div class="line"> </div><div class="line"><span class="comment"># managers.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span><span class="params">(Manager)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(BaseManager, self).__init__()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_staff</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">from</span> .models <span class="keyword">import</span> Staff</div><div class="line">        staff = Staff(**kwargs)</div><div class="line">        staff.save()</div><div class="line">        <span class="keyword">return</span> staff</div><div class="line"><span class="comment"># 调用</span></div><div class="line">User.objects.create_staff(**kwargs)</div></pre></td></tr></table></figure></p>
<h4 id="模型的方法"><a href="#模型的方法" class="headerlink" title="模型的方法"></a>模型的方法</h4><p>可以在模型上定义自定义的方法来给你的对象添加自定义的“底层”功能。Manager 方法用于“表范围”的事务，模型的方法应该着眼于特定的模型实例。</p>
<p>管理器方法可以通过self.model 来得到它所属的模型类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line">    username = models.CharField(<span class="string">u'用户名'</span>, max_length=<span class="number">255</span>)</div><div class="line">    email = models.EmailField(<span class="string">u'Email'</span>)</div><div class="line">    is_active = models.BooleanField(<span class="string">u'是否激活'</span>, default=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_true</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.is_active <span class="keyword">else</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line"><span class="comment"># views.py	仅仅为了说明，下面例子没有任何意义</span></div><div class="line">user = User.objects.get(id=id)</div><div class="line"><span class="keyword">if</span> user.is_true():</div><div class="line">    <span class="keyword">return</span> <span class="string">'right'</span></div></pre></td></tr></table></figure></p>
<h4 id="get-filter-区别"><a href="#get-filter-区别" class="headerlink" title="get()/filter()区别"></a>get()/filter()区别</h4><ul>
<li>models.objects.get() 获取到的是一个对象，如果没有抛出DoesNotExist异常；</li>
<li>get()得到的对象，更新需要obj.name=name, obj.save()</li>
<li>models.objects.filter()数据过滤，得到是一个查询集-对象列表，如果没有返回[]</li>
<li>filter()得到的对象，更新时直接models.objects.filter().update()</li>
</ul>
<h4 id="model-object-create-model-save-区别"><a href="#model-object-create-model-save-区别" class="headerlink" title="model.object.create()/model.save()区别"></a>model.object.create()/model.save()区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Account.objects.create(**kwargs) <span class="comment">#调用save()方法，保存到数据库，返回实例object</span></div><div class="line">Account(**kwargs)    		 <span class="comment">#为类对象，没有调用save()方法，没有保存到数据库，直到调用save()方法将数据保存</span></div></pre></td></tr></table></figure>
<h4 id="模型继承"><a href="#模型继承" class="headerlink" title="模型继承"></a>模型继承</h4><h5 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h5><p>只想使用父类来持有一些信息，不想在每个子模型中都定义一次，这个类永远不会单独使用<br>编写完基类之后，在 Meta类中设置 abstract=True ，该类就不能创建任何数据表，如果抽象化基础类和它的子类有相同的项，那么将会出现error（并且Django将返回一个exception），例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(models.Model)</span>:</span></div><div class="line">    created_time = models.DateTimeField(<span class="string">u'创建时间'</span>, auto_now_add=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        abstract = <span class="keyword">True</span></div><div class="line">        ordering = [<span class="string">'-created_time'</span>]</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span><span class="params">(BaseModel)</span>:</span></div><div class="line">    name = models.CharField(<span class="string">u'部门名称'</span>, max_length=<span class="number">100</span>, default=<span class="string">''</span>)</div><div class="line">    contact = models.CharField(<span class="string">u'联系电话'</span>, max_length=<span class="number">20</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    desc = models.TextField(<span class="string">u'描述'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">u'部门'</span></div><div class="line">        verbose_name_plural = <span class="string">u'部门'</span></div><div class="line">        db_table = <span class="string">'department'</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">u'%s'</span> % self.name</div></pre></td></tr></table></figure></p>
<p>在 ForeignKey或 ManyToManyField字段上使用 related_name属性，你必须总是为该字段指定一个唯一的反向名称</p>
<h5 id="多表继承"><a href="#多表继承" class="headerlink" title="多表继承"></a>多表继承</h5><p>继承一个已经存在的模型且想让每个模型具有它自己的数据库表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">50</span>)</div><div class="line">    address = models.CharField(max_length=<span class="number">80</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></div><div class="line">    serves_hot_dogs = models.BooleanField(default=<span class="keyword">False</span>)</div><div class="line">    serves_pizza = models.BooleanField(default=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
<h5 id="代理继承"><a href="#代理继承" class="headerlink" title="代理继承"></a>代理继承</h5><p>只是想改变模块Python 级别的行为，而不用修改模型的字段,更改默认的manager，或者添加一个新的方法；为原始模型创建一个代理，你可以创建，删除，更新代理 model 的实例，而且所有的数据都可以像使用原始 model 一样被保存<br>不同之处在于：你可以在代理 model 中改变默认的排序设置和默认的 manager ，更不会对原始 model 产生影响<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        proxy = <span class="keyword">True</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedPerson</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        ordering = [<span class="string">"last_name"</span>]</div><div class="line">        proxy = <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h4 id="多对多表结构中添加字段"><a href="#多对多表结构中添加字段" class="headerlink" title="多对多表结构中添加字段"></a>多对多表结构中添加字段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">128</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">128</span>)</div><div class="line">    members = models.ManyToManyField(Person, through=<span class="string">'Membership'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span><span class="params">(models.Model)</span>:</span></div><div class="line">    person = models.ForeignKey(Person)</div><div class="line">    group = models.ForeignKey(Group)</div><div class="line">    date_joined = models.DateField()</div><div class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ringo = Person.objects.create(name=<span class="string">"Ringo Starr"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>paul = Person.objects.create(name=<span class="string">"Paul McCartney"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles = Group.objects.create(name=<span class="string">"The Beatles"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m1 = Membership(person=ringo, group=beatles,</div><div class="line"><span class="meta">... </span>    date_joined=date(<span class="number">1962</span>, <span class="number">8</span>, <span class="number">16</span>),</div><div class="line"><span class="meta">... </span>    invite_reason=<span class="string">"Needed a new drummer."</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m1.save()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles.members.all()</div><div class="line">[&lt;Person: Ringo Starr&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ringo.group_set.all()</div><div class="line">[&lt;Group: The Beatles&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m2 = Membership.objects.create(person=paul, group=beatles,</div><div class="line"><span class="meta">... </span>    date_joined=date(<span class="number">1960</span>, <span class="number">8</span>, <span class="number">1</span>),</div><div class="line"><span class="meta">... </span>    invite_reason=<span class="string">"Wanted to form a band."</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles.members.all()</div><div class="line">[&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]</div></pre></td></tr></table></figure>
<h4 id="关联对象查询"><a href="#关联对象查询" class="headerlink" title="关联对象查询"></a>关联对象查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">100</span>)</div><div class="line">    tagline = models.TextField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">50</span>)</div><div class="line">    email = models.EmailField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></div><div class="line">    blog = models.ForeignKey(Blog)</div><div class="line">    headline = models.CharField(max_length=<span class="number">255</span>)</div><div class="line">    body_text = models.TextField()</div><div class="line">    pub_date = models.DateField()</div><div class="line">    mod_date = models.DateField()</div><div class="line">    authors = models.ManyToManyField(Author)</div><div class="line">    n_comments = models.IntegerField()</div><div class="line">    n_pingbacks = models.IntegerField()</div><div class="line">    rating = models.IntegerField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.headline</div></pre></td></tr></table></figure>
<h5 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h5><p>正向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e.blog <span class="comment"># Returns the related Blog object.</span></div></pre></td></tr></table></figure></p>
<p>反向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 管理器的名字为entry_set,其中entry为源模型的小写名称，当然这个名称也可以自定义，通过在ForeignKey 定义时设置related_name 参数来覆盖foo_set 的名称。例如，如果Entry 模型改成blog = ForeignKey(Blog, related_name='entries')，相对于的管理器也应该为entries</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = Blog.objects.get(id=<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.all() <span class="comment"># Returns all Entry objects related to Blog.</span></div><div class="line"></div><div class="line"><span class="comment"># b.entry_set is a Manager that returns QuerySets.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.filter(headline__contains=<span class="string">'Lennon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.count()</div></pre></td></tr></table></figure></p>
<h5 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h5><p>多对多关系的两端都会自动获得访问另一端的API。这些API 的工作方式与一对多关系一样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">e = Entry.objects.get(id=<span class="number">3</span>)</div><div class="line">e.authors.all() <span class="comment"># Returns all Author objects for this Entry.</span></div><div class="line">e.authors.count()</div><div class="line">e.authors.filter(name__contains=<span class="string">'John'</span>)</div><div class="line"> </div><div class="line">a = Author.objects.get(id=<span class="number">5</span>)</div><div class="line">a.entry_set.all() <span class="comment"># Returns all Entry objects for this Author.</span></div></pre></td></tr></table></figure></p>
<h5 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h5><p>正向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryDetail</span><span class="params">(models.Model)</span>:</span></div><div class="line">    entry = models.OneToOneField(Entry)</div><div class="line">    details = models.TextField()</div><div class="line"> </div><div class="line">ed = EntryDetail.objects.get(id=<span class="number">2</span>)</div><div class="line">ed.entry <span class="comment"># Returns the related Entry object.</span></div></pre></td></tr></table></figure></p>
<p>反向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一对一关系中的关联模型同样具有一个管理器对象，但是该管理器表示一个单一的对象而不是对象的集合；如果没有对象赋值给这个关联关系，Django 将引发一个DoesNotExist 异常；</span></div><div class="line">e = Entry.objects.get(id=<span class="number">2</span>)</div><div class="line">e.entrydetail <span class="comment"># returns the related EntryDetail object</span></div></pre></td></tr></table></figure></p>
<h4 id="select-for-update"><a href="#select-for-update" class="headerlink" title="select_for_update()"></a>select_for_update()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用于事务，返回一个for update 锁</div><div class="line">Returns a new QuerySet instance that will select objects with a FOR UPDATE lock.</div><div class="line">因QuerySet的延迟查询特性, copy一份用于update, 以便于不影响初始查询的candidates集</div></pre></td></tr></table></figure>
<h4 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h4><p>使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">objList = [a, b, c,] <span class="comment">#none are saved</span></div><div class="line">objList = model(record=record, receiver=receiver) <span class="comment"># 上述两种格式都是批量创建对象的数据格式</span></div><div class="line">model.objects.bulk_create(objList)</div></pre></td></tr></table></figure></p>
<h4 id="执行原始sql"><a href="#执行原始sql" class="headerlink" title="执行原始sql"></a>执行原始sql</h4><p>在模型查询API不够用的情况下，你可以使用原始的SQL语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.objects.raw(<span class="string">'SELECT id, first_name, last_name, birth_date FROM myapp_person'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;字段&quot;&gt;&lt;a href=&quot;#字段&quot; class=&quot;headerlink&quot; title=&quot;字段&quot;&gt;&lt;/a&gt;字段&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="models" scheme="https://ttxsgoto.github.io/tags/models/"/>
    
  </entry>
  
  <entry>
    <title>re模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/30/re/"/>
    <id>https://ttxsgoto.github.io/2017/03/30/re/</id>
    <published>2017-03-30T13:18:15.000Z</published>
    <updated>2017-03-30T13:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；</p>
<h4 id="匹配使用函数"><a href="#匹配使用函数" class="headerlink" title="匹配使用函数"></a>匹配使用函数</h4><ul>
<li>re.match(pattern, string[, flags]):从第一个字符开始匹配,匹配成功就返回,不关心后面的内容;</li>
<li>re.search(pattern, string[, flags]):扫描整个string查找匹配,匹配成功就返回,不关心后面的内容;</li>
<li>re.split(pattern, string[, maxsplit]):按能够匹配的子串将string分割后返回列表;</li>
<li>re.findall(pattern, string[, flags]):搜索string，以列表形式返回全部能匹配的子串;</li>
<li>re.finditer(pattern, string[, flags]):搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器;</li>
<li>re.sub(pattern, repl, string[, count]):使用repl替换string中每一个匹配的子串后返回替换后的字符串;</li>
<li>re.subn(pattern, repl, string[, count]):返回 (sub(repl, string[, count]), 替换次数);</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="string">'''</span></div><div class="line">    Describe:</div><div class="line">    re.compile(string[,flag])   #返回pattern对象</div><div class="line">    pattern = re.compile(r'hello')</div><div class="line">    flag参数是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M</div><div class="line">    re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）</div><div class="line">    re.M(全拼：MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）</div><div class="line">    re.S(全拼：DOTALL): 点任意匹配模式，改变'.'的行为</div><div class="line">    re.L(全拼：LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</div><div class="line">    re.U(全拼：UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</div><div class="line">    re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.match(pattern, string[, flags])</div><div class="line">    这个方法将会从string（我们要匹配的字符串）的开头开始，</div><div class="line">    尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，</div><div class="line">    立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。</div><div class="line">    两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止,不再对string向后匹配。</div><div class="line">    :return:</div><div class="line">    从第一个字符开始匹配,一旦匹配成功就返回,不关心后面的内容</div><div class="line">    ============match属性和方法==============</div><div class="line">    # 属性</div><div class="line">    1.string: 匹配时使用的文本。</div><div class="line">    2.re: 匹配时使用的Pattern对象。</div><div class="line">    3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class="line">    4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class="line">    5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</div><div class="line">    6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</div><div class="line"> </div><div class="line">    # 方法</div><div class="line">    1.group([group1, …]):获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</div><div class="line">    2.groups([default]):以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</div><div class="line">    3.groupdict([default]):返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</div><div class="line">    4.start([group]):返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</div><div class="line">    5.end([group]):返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</div><div class="line">    6.span([group]):返回(start(group), end(group))。</div><div class="line">    7.expand(template):将匹配到的分组代入template中然后返回。template中可以使用\id或\g、\g引用分组，但不能使用编号0。\id与\g是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g0。</div><div class="line">    """</div><div class="line"> </div><div class="line">    pattern = re.compile(<span class="string">r'hello'</span>)  <span class="comment">#把正则表达式编译成一个正则表达式对象,再使用</span></div><div class="line">    result1 = re.match(pattern, <span class="string">'hello'</span>)</div><div class="line">    result2 = re.match(pattern, <span class="string">'hello0 xxx'</span>)</div><div class="line">    result3 = re.match(pattern, <span class="string">'heloo xxx'</span>)</div><div class="line">    result4 = re.match(pattern, <span class="string">'hello xxx'</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">print</span> result1,result2,result3,result4   <span class="comment">#re对象，&lt;_sre.SRE_Match object at 0x1053d55e0&gt; &lt;_sre.SRE_Match object at 0x1053ba098&gt; None &lt;_sre.SRE_Match object at 0x1053ba100&gt;</span></div><div class="line">    <span class="keyword">if</span> result1:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result1.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result1 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result2:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result2.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result2 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result3:					<span class="comment">#result3 faild</span></div><div class="line">        <span class="keyword">print</span> result3.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result3 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result4:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result4.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result4 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">print</span> <span class="string">'======================================='</span></div><div class="line">    m = re.match(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, <span class="string">'hello world!!!'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'m.string:'</span>, m.string                             <span class="comment">#m.string: hello world!!!</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.re:'</span>, m.re                                     <span class="comment">#m.re: &lt;_sre.SRE_Pattern object at 0x103d62690&gt;</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.pos'</span>, m.pos                                    <span class="comment">#m.pos 0</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.endpos'</span>, m.endpos                              <span class="comment">#m.endpos 14</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.lastindex:'</span>, m.lastindex                       <span class="comment">#m.lastindex: 3</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.lastgroup:'</span>, m.lastgroup                       <span class="comment">#m.lastgroup: sign</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.group():'</span>, m.group()                           <span class="comment">#m.group(): hello world!!!</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.group(1,2):'</span>, m.group(<span class="number">1</span>,<span class="number">2</span>)                     <span class="comment">#m.group(1,2): ('hello', 'world')</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.groups():'</span>, m.groups()                         <span class="comment">#m.groups(): ('hello', 'world', '!!!')</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.groupdict()'</span>, m.groupdict()                    <span class="comment">#m.groupdict() &#123;'sign': '!!!'&#125;</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.start(2):'</span>, m.start(<span class="number">2</span>)                         <span class="comment">#m.start(2): 6</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.end(2):'</span>, m.end(<span class="number">2</span>)                             <span class="comment">#m.end(2): 11</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.span(2):'</span>, m.span(<span class="number">2</span>)                           <span class="comment">#m.span(2): (6, 11)</span></div><div class="line">    <span class="keyword">print</span> <span class="string">r"m.expand(r'\g \g\g'):"</span>, m.expand(<span class="string">r'\2 \1\3'</span>)    <span class="comment">#m.expand(r'\g \g\g'): world hello!!!</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.search(pattern, string[, flags])</div><div class="line">    search()会扫描整个string查找匹配;</div><div class="line">    match（）只有在0位置匹配成功的话才有返回，</div><div class="line">    如果不是开始位置匹配成功的话，match()就返回None。</div><div class="line">    search方法的返回对象同样match()返回对象的方法和属性</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'world'</span>)</div><div class="line">    match = re.search(pattern, <span class="string">'hello world!!!! world'</span>)</div><div class="line">    <span class="keyword">if</span> match:</div><div class="line">        <span class="comment"># 使用Match获得分组信息</span></div><div class="line">        <span class="keyword">print</span> match.group()     <span class="comment">#world</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.split(pattern, string[, maxsplit])</div><div class="line">    按照能够匹配的子串将string分割后返回列表。</div><div class="line">    maxsplit用于指定最大分割次数，不指定将全部分割</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">print</span> re.split(pattern, <span class="string">'xxxx1wsd2dsafds4dafd8'</span>,maxsplit=<span class="number">10</span>)    <span class="comment">#['xxxx', 'wsd', 'dsafds', 'dafd', '']</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findall</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.findall(pattern, string[, flags])</div><div class="line">    搜索string，以列表形式返回全部能匹配的子串</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">print</span> re.findall(pattern, <span class="string">'xxxx1wsd2dsafds4dafd8'</span>,)     <span class="comment">#['1', '2', '4', '8']</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">finditer</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.finditer(pattern, string[, flags])</div><div class="line">    搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(pattern, <span class="string">'one1two2three3four4'</span>):</div><div class="line">        <span class="keyword">print</span> m.group(),    <span class="comment">#1 2 3 4</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.sub(pattern, repl, string[, count])</div><div class="line">    使用repl替换string中每一个匹配的子串后返回替换后的字符串</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'(\w+)-(\w+)'</span>)</div><div class="line">    s = <span class="string">'I-can, hello world!'</span></div><div class="line">    <span class="keyword">print</span> re.sub(pattern,<span class="string">r'\2 \1'</span>, s)   <span class="comment">#can I, hello world!</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subn</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.subn(pattern, repl, string[, count])</div><div class="line">    返回 (sub(repl, string[, count]), 替换次数)</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'(\w+)-(\w+)'</span>)</div><div class="line">    s = <span class="string">'I-can, hello-world!'</span></div><div class="line">    <span class="keyword">print</span> re.subn(pattern, <span class="string">r'\2 \1'</span>, s)     <span class="comment">#('can I, world hello!', 2)</span></div><div class="line"> </div><div class="line"> </div><div class="line">match()</div><div class="line">search()</div><div class="line">split()</div><div class="line">findall()</div><div class="line">finditer()</div><div class="line">sub()</div><div class="line">subn()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；&lt;/p&gt;
&lt;h4 id=&quot;匹配使用函数&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="re" scheme="https://ttxsgoto.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Tmux日常</title>
    <link href="https://ttxsgoto.github.io/2017/03/29/tmux/"/>
    <id>https://ttxsgoto.github.io/2017/03/29/tmux/</id>
    <published>2017-03-29T13:06:09.000Z</published>
    <updated>2017-03-30T13:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Mac中</div><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class="line">brew install tmux</div><div class="line"># Ubuntu中</div><div class="line">apt-get install tmux</div></pre></td></tr></table></figure>
<p>Session可以包含多个Window, 每个Window又可以包含多个Pane</p>
<h4 id="Session操作"><a href="#Session操作" class="headerlink" title="Session操作"></a>Session操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tmux new -s xxx #新建session会话</div><div class="line">C-b : new -s abc # 在当前session中新建一个session，并保证之前session依然存在</div><div class="line">tmux a -t xxx #进入xxx会话</div><div class="line">C-b ? #列出所有快捷键，按q返回</div><div class="line">C-b d #当前会话，返回shell；tmux attach 重新进入之前的会话</div><div class="line">C-b s #选择并切换会话，在开启多个会话时使用</div></pre></td></tr></table></figure>
<h4 id="Window操作"><a href="#Window操作" class="headerlink" title="Window操作"></a>Window操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C-b c 创建一个新窗口</div><div class="line">C-b &amp; 关闭当前窗口</div><div class="line">C-b w 列出所有的窗口选择</div><div class="line">C-b 窗口号(例如窗口号为1的, 则C-b 1)</div><div class="line">C-b , 重命名当前窗口，便于识别各个窗口</div></pre></td></tr></table></figure>
<h4 id="Pane操作"><a href="#Pane操作" class="headerlink" title="Pane操作"></a>Pane操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C-b % 横向分Terminal</div><div class="line">C-b &quot; 纵向分Terminal</div><div class="line">C-b 方向键 在自由选择各面板</div><div class="line">C-b x 关闭当前pane</div><div class="line">C-b q 显示面板编号</div></pre></td></tr></table></figure>
<h4 id="配置文件-tmux-conf"><a href="#配置文件-tmux-conf" class="headerlink" title="配置文件(~/.tmux.conf)"></a>配置文件(~/.tmux.conf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">#设置前缀为Ctrl + a</div><div class="line">set -g prefix C-a</div><div class="line"> </div><div class="line">#解除Ctrl+b 与前缀的对应关系</div><div class="line">unbind C-b</div><div class="line"> </div><div class="line">#将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息</div><div class="line">bind r source-file ~/.tmux.conf \; display &quot;~/.tmux Reloaded!&quot;</div><div class="line"> </div><div class="line">#window 水平分割和纵向分割</div><div class="line">bind | split-window -h -c</div><div class="line">bind - split-window -v -c</div><div class="line"> </div><div class="line">#方向移动设置</div><div class="line">#up</div><div class="line">bind -n C-k select-pane -U</div><div class="line">#down</div><div class="line">bind -n C-j select-pane -D</div><div class="line">#left</div><div class="line">bind -n C-h select-pane -L</div><div class="line">#right</div><div class="line">bind -n C-l select-pane -R</div><div class="line"> </div><div class="line">#设置鼠标操作</div><div class="line">#set -g mouse on</div><div class="line"> </div><div class="line"># 设置终端类型为256色</div><div class="line">#set -g default-terminal &quot;screen-256color&quot;</div><div class="line"> </div><div class="line"># 设置窗口分割的边框颜色</div><div class="line">set -g pane-border-fg green</div><div class="line">set -g pane-border-bg black</div><div class="line"> </div><div class="line"># 设置当前窗口分割的边框颜色</div><div class="line">#set -g pane-active-border-fg white</div><div class="line">#set -g pane-active-border-bg yellow</div><div class="line"> </div><div class="line">set -g status-bg colour236</div><div class="line">set -g status-fg colour68</div><div class="line"> </div><div class="line">#copy-mode 将快捷键设置为vi 模式</div><div class="line">setw -g mode-keys vi</div><div class="line"> </div><div class="line"># 设置状态栏左部宽度  默认为10</div><div class="line">set -g status-left-length 35</div><div class="line"># 设置状态栏左部显示内容。</div><div class="line">set -g status-left &quot;#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]&quot;</div><div class="line"># 设置状态栏右部宽度</div><div class="line">set -g status-right-length 48</div><div class="line"># 设置状态栏右部内容，这里设置为时间信息</div><div class="line">set -g status-right &quot;#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep &apos;inet.*netmask.*broadcast&apos; | awk &apos;&#123;print $2&#125;&apos;)&quot;</div><div class="line"># 窗口信息居中显示</div><div class="line">set -g status-justify centre</div><div class="line"># 设置状态栏更新时间 每60秒更新一次，默认是15秒更新</div><div class="line">set -g status-interval 60</div></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf" target="_blank" rel="external">https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf</a><br><a href="https://github.com/wklken/k-tmux/blob/master/tmux.conf" target="_blank" rel="external">https://github.com/wklken/k-tmux/blob/master/tmux.conf</a><br><a href="https://my.oschina.net/am313/blog/865915" target="_blank" rel="external">https://my.oschina.net/am313/blog/865915</a><br><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="external">https://gist.github.com/ryerh/14b7c24dfd623ef8edc7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="tmux" scheme="https://ttxsgoto.github.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>django测试</title>
    <link href="https://ttxsgoto.github.io/2017/03/28/django-test/"/>
    <id>https://ttxsgoto.github.io/2017/03/28/django-test/</id>
    <published>2017-03-28T12:55:48.000Z</published>
    <updated>2017-03-28T13:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Python单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：</p>
<p><img src="https://ttxsgoto.github.io/img/django/django_test01.png" alt=""></p>
<p><strong>SimpleTestCase</strong>:扩展了unittest.TestCase的一些基本功能</p>
<ul>
<li>保存和恢复python警告机制状态</li>
<li>使用client Client</li>
<li>自定义测试时间URL maps</li>
<li>使用modified settings运行测试的能力</li>
</ul>
<p><strong>TransactionTestCase</strong>:事务测试类，继承SimpleTestCase</p>
<p><strong>TestCase</strong>:用来测试网站正常转换unittest.TestCase到Django TestCase</p>
<ul>
<li>自动加载fixtures</li>
<li>将测试包含在两个嵌套的atomic块中：一个用于整个类，一个用于每个测试</li>
<li>创建一个TestClient实例</li>
<li>Django特定的断言用于测试重定向和形式错误</li>
</ul>
<p><strong>LiveServerTestCase</strong>:基本上与TransactionTestCase相同，具有一个额外的功能：它在设置的后台启动一个活动的Django服务器，并在卸载时将其关闭</p>
<h4 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h4><ul>
<li>setUp():每个测试函数运行前执行</li>
<li>tearDown():每个测试函数运行完成后执行</li>
<li>setUpClass(cls):必须使用@classmethod装饰器，所有test函数运行前执行一次</li>
<li>tearDownClass(cls):必须使用@classmethod装饰器，所有test函数运行完成后执行一次</li>
</ul>
<p><strong>默认测试客户端</strong><br>django.test.*TestCase实例中的每个测试用例都可以访问Django测试客户端的实例。此客户端可以作为self.client访问。每个测试都重新创建此客户端，因此您不必担心从一个测试到另一个测试的状态（例如Cookie）<br>实例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> Client</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_details</span><span class="params">(self)</span>:</span></div><div class="line">        client = Client()</div><div class="line">        response = client.get(<span class="string">'/customer/details/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index</span><span class="params">(self)</span>:</span></div><div class="line">        client = Client()</div><div class="line">        response = client.get(<span class="string">'/customer/index/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line"> </div><div class="line"><span class="comment">################等同于如下################</span></div><div class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_details</span><span class="params">(self)</span>:</span></div><div class="line">        response = self.client.get(<span class="string">'/customer/details/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index</span><span class="params">(self)</span>:</span></div><div class="line">        response = self.client.get(<span class="string">'/customer/index/'</span>)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div></pre></td></tr></table></figure></p>
<h4 id="测试客户端"><a href="#测试客户端" class="headerlink" title="测试客户端"></a>测试客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from django.test import Client</div><div class="line">&gt;&gt;&gt; c = Client()</div><div class="line">&gt;&gt;&gt; response = c.post(&apos;/login/&apos;, &#123;&apos;username&apos;: &apos;john&apos;, &apos;password&apos;: &apos;smith&apos;&#125;)</div><div class="line">&gt;&gt;&gt; response.status_code</div><div class="line">200</div><div class="line">&gt;&gt;&gt; response = c.get(&apos;/customer/details/&apos;)</div><div class="line">&gt;&gt;&gt; response.content    # 返回数据主体</div></pre></td></tr></table></figure>
<h4 id="测试响应属性"><a href="#测试响应属性" class="headerlink" title="测试响应属性"></a>测试响应属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- client:用于生成导致响应的请求的测试客户端</div><div class="line">- content:响应的主体</div><div class="line">- context:用于呈现产生响应内容的模板的模板Context实例</div><div class="line">- request:响应的请求数据</div><div class="line">- wsgi_request:由生成响应的测试处理程序生成的WSGIRequest实例</div><div class="line">- status_code:响应http状态码</div><div class="line">- templates:用于渲染最终内容的Template实例列表，按渲染顺序排列</div><div class="line">- resolver_match:响应的实例ResolverMatch</div></pre></td></tr></table></figure>
<h4 id="常用断言（runtests-case-py）"><a href="#常用断言（runtests-case-py）" class="headerlink" title="常用断言（runtests/case.py）"></a>常用断言（runtests/case.py）</h4><ul>
<li>self.assertEqual(first, second)</li>
<li>self.assertNotEqual(first, second)</li>
<li>self.assertFalse(expr)</li>
<li>self.assertTrue(expr)</li>
<li>self.assertEqual(first, second)</li>
<li>self.assertNotEqual(first, second)</li>
<li>self.assertSequenceEqual(seq1, seq2)</li>
<li>self.assertListEqual(list1, list2):</li>
<li>self.assertTupleEqual(tuple1, tuple2):</li>
<li>self.assertDictEqual(dic1, dic2):</li>
<li>self.assertSetEqual(set1, set2):</li>
<li>self.assertIn(mem, container):</li>
<li>self.assertIs(expr1, expr2)</li>
<li>self.assertIsNotNone(obj):</li>
<li>self.assertIsNone(obj)</li>
<li>self.assertIsInstance(obj, cls)</li>
</ul>
<h4 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h4><p>unittest库提供@skipIf和@skipUnless装饰器，如果提前知道这些测试在某些条件下会失败，可以跳过测试</p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manage.py test runtests.test_user</div><div class="line">python manage.py test xxx.test		#执行xxx项目下的testx里的测试</div><div class="line">python manage.py test animals.tests.AnimalTestCase	#单独执行某个test case</div></pre></td></tr></table></figure>
<h4 id="测试数据库"><a href="#测试数据库" class="headerlink" title="测试数据库"></a>测试数据库</h4><p>测试需要数据库，django会为测试单独生成数据库。不管你的测试是否通过,当你所有的测试都执行过后,这个测试数据库就会被销毁</p>
<p>默认情况下,测试数据库的名字是test_DATABASE_NAME,DATABASE_NAME是你在settings.py里配置的数据库名.如果 你需要给测试数据库一个其他的名字,在settings.py中指定TEST_DATABASE_NAME的值。使用sqlite3时，数据库是在内存中创建的</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://docs.djangoproject.com/en/1.10/topics/testing/tools/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.10/topics/testing/tools/</a><br><a href="http://python.usyiyi.cn/django/topics/testing/tools.html" target="_blank" rel="external">http://python.usyiyi.cn/django/topics/testing/tools.html</a><br><a href="http://www.cnblogs.com/linxiyue/p/3886035.html" target="_blank" rel="external">http://www.cnblogs.com/linxiyue/p/3886035.html</a><br><a href="http://www.weiguda.com/blog/31/" target="_blank" rel="external">http://www.weiguda.com/blog/31/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;Python单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ht
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="TestCase" scheme="https://ttxsgoto.github.io/tags/TestCase/"/>
    
      <category term="unittest" scheme="https://ttxsgoto.github.io/tags/unittest/"/>
    
  </entry>
  
  <entry>
    <title>API接口认证</title>
    <link href="https://ttxsgoto.github.io/2017/03/27/API-auth/"/>
    <id>https://ttxsgoto.github.io/2017/03/27/API-auth/</id>
    <published>2017-03-27T14:09:52.000Z</published>
    <updated>2017-03-27T14:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>之前写过一篇文章<a href="https://ttxsgoto.github.io/2017/03/26/API/">《简单API的实现》</a>，这篇文章说明了通过api方式把数据传递给服务端处理，但这过程中没有认证功能，无论谁发任何内容，都一并接收，这样明显存在不安全性，这篇文章在原来的基础上，添加了接口认证功能。</p>
<h4 id="接口认证方式"><a href="#接口认证方式" class="headerlink" title="接口认证方式"></a>接口认证方式</h4><p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">客户端：</div><div class="line">    - 通过定义密钥</div><div class="line">    - 将密钥加密发送给服务端</div><div class="line">服务端：</div><div class="line">    - 服务端定义相同的密钥</div><div class="line">    - 通过相同的加密算法，得到一个值</div><div class="line">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比</div><div class="line">缺点：</div><div class="line">    - 密钥固定不变，加密后的值固定不变，易暴露，安全性低</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">客户端：</div><div class="line">    - 通过定义密钥</div><div class="line">    - 将秘钥和当前时间戳一起加密，得到一个值</div><div class="line">    - 将加密后密钥和时间戳一起发送给服务端</div><div class="line">服务端：</div><div class="line">    - 服务端定义相同的密钥</div><div class="line">    - 将当前服务器端时间和发送过来的客户端时间进行对比，设置可接受的时间范围如：120s；如果服务器当前时间-发送过来的客户端&gt;120s ，即返回false</div><div class="line">    - 将服务端的密钥和客户端时间进行相同的加密算法，得到一个值</div><div class="line">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比，是否一致</div><div class="line">优点：</div><div class="line">    - 加密后的密钥每次不同，不易破解</div><div class="line">    - 设置有效时长，增加安全性</div><div class="line">缺点：</div><div class="line">    - 客户端时间和服务端时间不能相差太大，如太大造成认证失败，不易排查问题，最好使用同一时钟服务器进行同步</div></pre></td></tr></table></figure></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>客户端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> platform</div><div class="line"><span class="keyword">import</span> psutil</div><div class="line"><span class="keyword">import</span> urllib,urllib2</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</div><div class="line">  </div><div class="line">sys_info=&#123;&#125;</div><div class="line">sys_info[<span class="string">'system'</span>] = [] </div><div class="line">sys_info[<span class="string">'cpu'</span>] = []</div><div class="line">sys_info[<span class="string">'mem'</span>] = [] </div><div class="line">sys_info[<span class="string">'disk'</span>] = []</div><div class="line">sys_info[<span class="string">'wip'</span>] = []</div><div class="line">sys_info[<span class="string">'apikey'</span>] = []</div><div class="line">  </div><div class="line"><span class="comment">#系统信息</span></div><div class="line">system=sys_info[<span class="string">'system'</span>].append(platform.uname()[<span class="number">0</span>])</div><div class="line">  </div><div class="line"><span class="comment">#cpu个数</span></div><div class="line">cpu_count=sys_info[<span class="string">'cpu'</span>].append(cpu_count())</div><div class="line">  </div><div class="line"><span class="comment">#内存</span></div><div class="line">mem = psutil.virtual_memory()</div><div class="line">mem_info = sys_info[<span class="string">'mem'</span>].append(mem.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line">  </div><div class="line"><span class="comment">#磁盘空间</span></div><div class="line">sdiskusage = psutil.disk_usage(<span class="string">'/'</span>)</div><div class="line">disk_info =sys_info[<span class="string">'disk'</span>].append(sdiskusage.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line">  </div><div class="line"><span class="comment">#外网ip</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_ip</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">"http://ip.cip.cc"</span></div><div class="line">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class="line">    <span class="keyword">return</span>  wip</div><div class="line">sys_info[<span class="string">'wip'</span>].append(pub_ip())</div><div class="line"> </div><div class="line"><span class="comment">#认证密钥</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Api_key</span><span class="params">()</span>:</span></div><div class="line">    client_key = <span class="string">"ddfd-grgf-dsgf-dgfd"</span>    <span class="comment">#客户端定义的key</span></div><div class="line">    hash_obj = hashlib.md5()     <span class="comment">#使用md5加密，也可以使用sha256</span></div><div class="line">    time_span = time.time()</div><div class="line">    hash_obj.update(<span class="string">"%s|%f"</span> %(client_key,time_span))    <span class="comment">#更新消息，这个update整个文件</span></div><div class="line">    encryption = hash_obj.hexdigest()    <span class="comment">#计算消息摘要</span></div><div class="line">    result = <span class="string">"%s|%f"</span> %(encryption,time_span)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">sys_info[<span class="string">'apikey'</span>].append(Api_key())</div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> json.dumps(sys_info,indent=<span class="number">4</span>,ensure_ascii=<span class="keyword">False</span>)</div><div class="line">    data = urllib.urlencode(query=sys_info)</div><div class="line">    <span class="keyword">print</span> data</div><div class="line">    respose = urllib.urlopen(url=<span class="string">"http://127.0.0.1:8090/serveradd/"</span>, data=data)</div></pre></td></tr></table></figure>
<ul>
<li>服务端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">############### urls.py ################</span></div><div class="line">url(<span class="string">r'^serveradd/$'</span>,<span class="string">'app.views.serveradd'</span>),</div><div class="line"> </div><div class="line"><span class="comment">############### views.py ################</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_valid</span><span class="params">(data)</span>:</span></div><div class="line">    <span class="keyword">import</span> time,hashlib</div><div class="line">    server_key = <span class="string">"ddfd-grgf-dsgf-dgfd"</span>    <span class="comment">#服务端定义的key，也可定义在其他位置</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        encryption , time_span = data.split(<span class="string">"|"</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"-------&gt;"</span> ,encryption</div><div class="line">        <span class="keyword">print</span> <span class="string">"-------&gt;"</span> ,time_span</div><div class="line">        time_span = float(time_span)</div><div class="line">        <span class="comment">#time.sleep(6)    #模拟认证超时时间</span></div><div class="line">        now_time = time.time()</div><div class="line">        <span class="keyword">if</span> (now_time - time_span) &gt; <span class="number">5</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"超时，认证失败"</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        hash_obj = hashlib.md5()    <span class="comment">#使用md5加密</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"hash_obj------------"</span>,hash_obj</div><div class="line">         </div><div class="line">        hash_obj.update(<span class="string">"%s|%f"</span> %(server_key,time_span))     <span class="comment">#更新消息，这个update整个文件</span></div><div class="line">        <span class="keyword">print</span> hash_obj.hexdigest()    <span class="comment">#计算消息摘要</span></div><div class="line">        <span class="keyword">if</span> hash_obj.hexdigest() == encryption:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"客户端和服务端密钥不一致，认证失败."</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">except</span> Exception,e:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_auth</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(req)</span>:</span></div><div class="line">        request_dict = req.POST</div><div class="line">        api_key = request_dict.get(<span class="string">'apikey'</span>)</div><div class="line">        api_key = api_key[<span class="number">2</span>:<span class="number">-2</span>]</div><div class="line">        <span class="keyword">print</span> api_key</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> api_key:</div><div class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"Unauthorized."</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> api_valid(api_key):</div><div class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"Unauthorized."</span>)</div><div class="line">        <span class="keyword">return</span> func(req)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"> </div><div class="line"><span class="meta">@api_auth</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveradd</span><span class="params">(req)</span>:</span></div><div class="line">    <span class="keyword">if</span> req.method == <span class="string">'GET'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"GET method"</span></div><div class="line">    <span class="keyword">elif</span> req.method == <span class="string">'POST'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"POST method"</span></div><div class="line">        request_dict = req.POST</div><div class="line">        system = request_dict.get(<span class="string">'system'</span>)</div><div class="line">        wip = request_dict.get(<span class="string">'wip'</span>)</div><div class="line">        data = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> request_dict.items()&#125;</div><div class="line">        host = Host.objects.filter(wip=wip).first()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> host:</div><div class="line">            host = Host(**data)</div><div class="line">        host.save(force_insert=<span class="keyword">True</span>)</div><div class="line">    	data = &#123;</div><div class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</div><div class="line">            <span class="string">'status'</span>: <span class="string">'ok'</span></div><div class="line">            &#125;</div><div class="line">    <span class="keyword">return</span> HttpResponse(data)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#### 结果说明</div><div class="line">1.认证成功，内容如下：</div><div class="line">POST method-------</div><div class="line">&lt;QueryDict: &#123;u&apos;apikey&apos;: [u&quot;[&apos;a73421ee7c21d9d590b956f07ed16ca2|1477795149.448697&apos;]&quot;], u&apos;mem&apos;: [u&apos;[4L]&apos;], u&apos;system&apos;: [u&quot;[&apos;Darwin&apos;]&quot;], u&apos;wip&apos;: [u&quot;[&apos;14.196.121.237&apos;]&quot;], u&apos;disk&apos;: [u&apos;[232]&apos;], u&apos;cpu&apos;: [u&apos;[4]&apos;]&#125;&gt;</div><div class="line">----[&apos;Darwin&apos;]----[&apos;14.196.121.237&apos;]</div><div class="line"> </div><div class="line">2.当key不同时，服务端没有收到客户端发送过来的信息，内容如下：</div><div class="line">1ab7370c45587a9d4d0d1d8f28bd09d7|1477795289.186698</div><div class="line">-------&gt; 1ab7370c45587a9d4d0d1d8f28bd09d7</div><div class="line">-------&gt; 1477795289.186698</div><div class="line">e9d558f11074410464d1769fb2930e81</div><div class="line">客户端和服务端密钥不一致，认证失败。</div><div class="line"> </div><div class="line">3.当认证时间超时时(这里设置超时时间为5s，模拟发送过来的时间为6s后)，服务端没有收到客户端发送过来的信息，内容如下：</div><div class="line">9dc916fbb04c1310cece3aaa5b2d1b7e|1477795521.379039</div><div class="line">-------&gt; 9dc916fbb04c1310cece3aaa5b2d1b7e</div><div class="line">-------&gt; 1477795521.379039</div><div class="line">超时，认证失败</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;之前写过一篇文章&lt;a href=&quot;https://ttxsgoto.github.io/2017/03/26/API/&quot;&gt;《简单API的实现
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="api" scheme="https://ttxsgoto.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>最简单API实现</title>
    <link href="https://ttxsgoto.github.io/2017/03/26/API/"/>
    <id>https://ttxsgoto.github.io/2017/03/26/API/</id>
    <published>2017-03-26T13:51:41.000Z</published>
    <updated>2017-03-27T14:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便，主要因为需要授权和做相关的防火墙策略（如果有几百上千台client，就算用网段的形式，也需要重复操作），而且如果数据库的信息发生变化时，需要把所有客户端的数据库信息进行修改，比较麻烦；最近学习了一种通过url方式将数据传递给服务端，实现简单的api功能，简单例子如下：</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>客户端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> platform</div><div class="line"><span class="keyword">import</span> psutil</div><div class="line"><span class="keyword">import</span> urllib,urllib2</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</div><div class="line"> </div><div class="line">sys_info=&#123;&#125;</div><div class="line">sys_info[<span class="string">'system'</span>] = []</div><div class="line">sys_info[<span class="string">'cpu'</span>] = []</div><div class="line">sys_info[<span class="string">'mem'</span>] = []</div><div class="line">sys_info[<span class="string">'disk'</span>] = []</div><div class="line">sys_info[<span class="string">'wip'</span>] = []</div><div class="line"> </div><div class="line"><span class="comment">#系统信息</span></div><div class="line">system=sys_info[<span class="string">'system'</span>].append(platform.uname()[<span class="number">0</span>])</div><div class="line"> </div><div class="line"><span class="comment">#cpu个数</span></div><div class="line">cpu_count=sys_info[<span class="string">'cpu'</span>].append(cpu_count())</div><div class="line"> </div><div class="line"><span class="comment">#内存</span></div><div class="line">mem = psutil.virtual_memory()</div><div class="line">mem_info = sys_info[<span class="string">'mem'</span>].append(mem.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line"> </div><div class="line"><span class="comment">#磁盘空间</span></div><div class="line">sdiskusage = psutil.disk_usage(<span class="string">'/'</span>)</div><div class="line">disk_info =sys_info[<span class="string">'disk'</span>].append(sdiskusage.total * <span class="number">1</span> / (<span class="number">1024</span>**<span class="number">3</span>))</div><div class="line"></div><div class="line"><span class="comment">#外网ip</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_ip</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">"http://ip.cip.cc"</span></div><div class="line">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class="line">    <span class="keyword">return</span>  wip</div><div class="line">sys_info[<span class="string">'wip'</span>].append(pub_ip())</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> json.dumps(sys_info,indent=<span class="number">4</span>,ensure_ascii=<span class="keyword">False</span>)</div><div class="line">    data = urllib.urlencode(query=sys_info)</div><div class="line">    respose = urllib.urlopen(url=<span class="string">"http://127.0.0.1:8090/serveradd/"</span>, data=data)</div></pre></td></tr></table></figure>
<ul>
<li>服务端</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">############### urls.py ################</span></div><div class="line">url(<span class="string">r'^serveradd/$'</span>,<span class="string">'app.views.serveradd'</span>),</div><div class="line"> </div><div class="line"><span class="comment">############### views.py ################</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveradd</span><span class="params">(req)</span>:</span></div><div class="line">    <span class="keyword">if</span> req.method == <span class="string">'GET'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"GET method"</span></div><div class="line">    <span class="keyword">elif</span> req.method == <span class="string">'POST'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"POST method"</span></div><div class="line">        request_dict = req.POST</div><div class="line">        system = request_dict.get(<span class="string">'system'</span>)</div><div class="line">        wip = request_dict.get(<span class="string">'wip'</span>)</div><div class="line">        data = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> request_dict.items()&#125;</div><div class="line">        host = Host.objects.filter(wip=wip).first()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> host:</div><div class="line">            host = Host(**data)</div><div class="line">        host.save(force_insert=<span class="keyword">True</span>)</div><div class="line">    	data = &#123;</div><div class="line">            <span class="string">'msg'</span>: <span class="string">'ok'</span>,</div><div class="line">            <span class="string">'status'</span>: <span class="string">'ok'</span></div><div class="line">            &#125;</div><div class="line">    <span class="keyword">return</span> HttpResponse(data)</div><div class="line"> </div><div class="line"><span class="comment">############### 结果 ################</span></div><div class="line">POST method</div><div class="line">&lt;QueryDict: &#123;<span class="string">u'mem'</span>: [<span class="string">u'[4L]'</span>], <span class="string">u'cpu'</span>: [<span class="string">u'[4]'</span>], <span class="string">u'disk'</span>: [<span class="string">u'[232]'</span>], <span class="string">u'system'</span>: [<span class="string">u"['Darwin']"</span>], <span class="string">u'wip'</span>: [<span class="string">u"['12.196.9.193']"</span>]&#125;&gt;</div><div class="line">----[<span class="string">'Darwin'</span>]----[<span class="string">'12.196.9.193'</span>]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="api" scheme="https://ttxsgoto.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>mysqldb模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/25/mysqldb/"/>
    <id>https://ttxsgoto.github.io/2017/03/25/mysqldb/</id>
    <published>2017-03-25T13:43:12.000Z</published>
    <updated>2017-04-06T02:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>python中执行数据库操作，首先安装MySQL-python模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y MySQL-python 或者</div><div class="line">pip install MySQL-python</div></pre></td></tr></table></figure></p>
<h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><p>创建数据库连接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">conn = MySQLdb.connect(</div><div class="line">    host=<span class="string">'127.0.0.1'</span>,</div><div class="line">    user=<span class="string">'test'</span>,</div><div class="line">    passwd=<span class="string">'test'</span>,</div><div class="line">    db=<span class="string">'test01'</span>,</div><div class="line">    port=<span class="number">3306</span>,</div><div class="line">    charset=utf8)</div><div class="line">cur = conn.cursor()        <span class="comment">#通过获取到的数据库连接conn下的cursor()方法来创建游标，以元祖形式输出</span></div><div class="line">conn.cursor(MySQLdb.cursors.DictCursor)   <span class="comment">#字典形式输出</span></div><div class="line">conn.selecct_db(dbname)  <span class="comment">#选择数据库</span></div><div class="line">cur.execute(sql, args)    <span class="comment">#用来执行一条sql语句</span></div><div class="line">cur.executemany(sql, args)    <span class="comment">#用来执行多条sql语句</span></div><div class="line">cur.fetchall()  <span class="comment">#获取查询结果</span></div><div class="line">cur.scroll(位置，模式) <span class="comment">#调整指针</span></div><div class="line">cur.rollback()  <span class="comment">#发生错误时回滚</span></div><div class="line">cur.close()  	<span class="comment">#关闭游标</span></div><div class="line">conn.commit()   <span class="comment">#方法在提交事务，在向数据库插入一个数据时必须用此方法，否则数据不会被真正插入</span></div><div class="line">conn.close()  <span class="comment">#关闭数据库连接</span></div></pre></td></tr></table></figure></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port, user, passwd, db)</span>:</span></div><div class="line">        self.host = host</div><div class="line">        self.port = port</div><div class="line">        self.user = user</div><div class="line">        self.passwd = passwd</div><div class="line">        self.db = db</div><div class="line"> </div><div class="line">        self.conn = MySQLdb.Connect(</div><div class="line">            host = self.host,</div><div class="line">            user = self.user,</div><div class="line">            passwd = self.passwd,</div><div class="line">            db = self.db,</div><div class="line">            port = self.port,</div><div class="line">            charset = <span class="string">'utf8'</span></div><div class="line">        )</div><div class="line">        self.cur = self.conn.cursor()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></div><div class="line">    	sql = <span class="string">"select * from test;"</span>    <span class="comment">#执行的sql语句</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cur.execute(sql)</div><div class="line">            result = self.cur.fetchall()</div><div class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> list(result):</div><div class="line">                <span class="keyword">print</span> line[<span class="number">0</span>],line[<span class="number">1</span>]</div><div class="line">        <span class="keyword">except</span> Exception,e:</div><div class="line">            <span class="keyword">print</span> <span class="string">"\033[31m %s \033[0m"</span> %e</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></div><div class="line">        sql = <span class="string">"""INSERT into group(id,is_admin,name,created_time)\</span></div><div class="line">                VALUES（1,FALSE,'ttxsgoto','天天向上goto'),\</div><div class="line">                (2,FALSE,'ttxsgoto02','天天向上goto02');"""</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cur.execute(sql) <span class="comment">#执行一条sql语句</span></div><div class="line">            self.conn.commit()	<span class="comment"># 提交到数据库执行</span></div><div class="line">        <span class="keyword">except</span> Exception, e:</div><div class="line">            <span class="keyword">print</span> <span class="string">"\033[31m %s \033[0m"</span> % e</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">manyinsert</span><span class="params">(self)</span>:</span></div><div class="line">    	sql = <span class="string">"SELECT user_id,org_id,id from positions;"</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cur.execute(sql)</div><div class="line">            result = self.cur.fetchall()</div><div class="line">            sql2 = <span class="string">""" UPDATE records SET user_id=%s,org_id=%s WHERE position_id=%s ;"""</span></div><div class="line">            self.cur.executemany(sql2, result)	<span class="comment">#执行多条sql语句</span></div><div class="line">            self.conn.commit()</div><div class="line">        <span class="keyword">except</span> Exception, e:</div><div class="line">            <span class="keyword">print</span> <span class="string">"\033[31m %s \033[0m"</span> % e</div><div class="line">        self.cur.close()</div><div class="line">        self.conn.close()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    db = Mysql(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'root'</span>, db=<span class="string">'test'</span>)</div><div class="line">    db.select()</div><div class="line">    db.insert()</div><div class="line">    db.manyinsert()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;python中执行数据库操作，首先安装MySQL-python模块&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="mysqldb" scheme="https://ttxsgoto.github.io/tags/mysqldb/"/>
    
  </entry>
  
  <entry>
    <title>fabric模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/19/fabric/"/>
    <id>https://ttxsgoto.github.io/2017/03/19/fabric/</id>
    <published>2017-03-19T12:47:15.000Z</published>
    <updated>2017-03-19T12:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>基于paramiko的封装，远程执行命令，方便简单，实用性强。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-l  显示可用的task</div><div class="line">-f  指定入口文件，默认为fabfile.py</div><div class="line">-H  指定目标主机，主机之间用，号分隔</div><div class="line">-P  已并行执行，默认为串行</div><div class="line">-R  指定role角色</div><div class="line">-t  连接超时时间(s)</div><div class="line">-T  执行命令超时时间(s)</div></pre></td></tr></table></figure>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">from fabric.api import env</div><div class="line">########## 属性 ##########</div><div class="line">env.hosts    -主机ip</div><div class="line">env.port    -主机端口，默认为22</div><div class="line">env.passworkd   -ssh密码</div><div class="line">env.roledefs    -角色分组，env.roledefs=&#123;&apos;web1&apos;:[&apos;192.168.0.192&apos;]&#125;，调用@roles(&apos;web1&apos;)</div><div class="line">env.passwords   -字典，为每台机器设置密码，key是ip，value是密码，如&#123;&apos;root@192.168.0.200:22&apos;:&apos;root&apos;&#125;，调用：@hosts(&apos;root@192.168.0.200:22&apos;)</div><div class="line">env.exclude_hosts   -指定排除主机列表，在fab执行时，忽略列表中的机器；env.exclude_hosts= [&apos;10.1.1.2&apos;]</div><div class="line"> </div><div class="line">########## API ##########</div><div class="line">local(&apos;pwd&apos;)    -执行本地命令</div><div class="line">lcd(&apos;/tmp&apos;)     -切换本地目录</div><div class="line">cd(&apos;/tmp&apos;)      -切换远程目录</div><div class="line">run(&apos;uname -s&apos;) -执行远程命令</div><div class="line">sudo(&apos;service sshd restart&apos;)   -执行远程sudo，</div><div class="line">put(&apos;/local/test&apos;,&apos;/remote/test&apos;)   -上传</div><div class="line">get(&apos;/remote/test/&apos;,&apos;/local/test&apos;)  -下载</div><div class="line">prompt  -获得用户输入信息,如:prompt(&apos;please Input password:&apos;);</div><div class="line">confirm -获得提示信息确认,如:confirm(&quot;Continue[Y/N]？&quot;);</div><div class="line">@task(alias=&apos;&apos;)   -函数修饰符,标识的函数为fab可调用的,非标记对fab不可见,alias设置别名</div><div class="line">@parallel(pool_size=5)   -并行执行任务影响的最小单位是任务，所以功能启用或禁用以任务为单位,pool_size指定并发个数</div><div class="line">@serial     -顺序执行，非并发执行</div><div class="line">@runs_once  -只有第一台执行此函数</div><div class="line">with cd(&apos;/root&apos;):   pass    -with让后面的执行继承当前所在状态</div><div class="line"> </div><div class="line">__all__ = [&apos;run1&apos;,&apos;hello&apos;]  -定义全局的可用tasks列表</div><div class="line"></div><div class="line">from fabric.colors import * #用于打印显示颜色   -print(yellow(&quot;This text is yellow!&quot;,bold=True))    bold：用于设置粗体</div></pre></td></tr></table></figure>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> local, cd, run, settings,env,task</div><div class="line"><span class="keyword">from</span> fabric.context_managers <span class="keyword">import</span> prefix</div><div class="line"><span class="keyword">from</span> fabric.contrib.console <span class="keyword">import</span> confirm</div><div class="line"><span class="keyword">from</span> fabric.decorators <span class="keyword">import</span> roles, parallel, serial, runs_once</div><div class="line"><span class="keyword">from</span> fabric.colors <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> prompt</div><div class="line"> </div><div class="line">env.hosts=[<span class="string">'192.168.0.192'</span>,<span class="string">'192.168.0.200'</span>]</div><div class="line">env.password=<span class="string">'root'</span></div><div class="line">env.user=<span class="string">'root'</span></div><div class="line"><span class="comment">#env.roledefs=&#123;'web1':['192.168.0.192'],'web2':['192.168.0.200']&#125;</span></div><div class="line"> </div><div class="line">__all__ = [<span class="string">'local_deploy'</span>,<span class="string">'run1'</span>,<span class="string">'hello'</span>,<span class="string">'test_confirm'</span>,<span class="string">'test_prompt'</span>]     <span class="comment">#定义全局可用的tasks列表</span></div><div class="line"> </div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    传递参数: fab hello:name=ttxsgoto</div><div class="line">    '''</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello,&#123;&#125;"</span>.format(name)</div><div class="line"> </div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_deploy</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    执行本地命令</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    <span class="keyword">with</span> settings(warn_only=<span class="keyword">True</span>):</div><div class="line">        <span class="keyword">return</span> local(<span class="string">'ls /Users/study/studypy/train/fabric_demo/fabfile.py'</span>)</div><div class="line">    <span class="comment"># local('cat fabfile.py')</span></div><div class="line"> </div><div class="line"><span class="meta">@task   #标识为fab可调用</span></div><div class="line"><span class="meta">@roles('web2')  #调用roles</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_deploy</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    执行with函数</div><div class="line">    :return:</div><div class="line">    lcd 本地执行,cd 远程执行</div><div class="line">    '''</div><div class="line">    dir = <span class="string">'/etc/network/'</span></div><div class="line">    <span class="keyword">with</span> cd(dir):</div><div class="line">        run(<span class="string">'ls .'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    remote list</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    dir = <span class="string">'/etc/'</span></div><div class="line">    <span class="keyword">with</span> cd(dir):</div><div class="line">        run(<span class="string">'ls -l rc.local'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task(default=True)</span></div><div class="line"><span class="meta">@parallel(pool_size=3)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    启动</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    <span class="keyword">print</span> time.ctime()</div><div class="line">    hello(<span class="string">'ttxsgoto'</span>)</div><div class="line">    local_deploy()</div><div class="line">    dir()</div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    <span class="keyword">print</span> time.ctime()</div><div class="line">    print(yellow(<span class="string">"This text is green!"</span>,bold=<span class="keyword">True</span>)) <span class="comment">#用于打印显示颜色, bold：用于设置粗体</span></div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> prefix(<span class="string">'workon ownserver'</span>):</div><div class="line">        run(<span class="string">'cd /date/ownserver &amp;&amp; python manage.py runserver 0.0.0.0:8000'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_confirm</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    测试交互确认</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    INFO = confirm(<span class="string">'Are you sure?[yes/no]?'</span>)</div><div class="line">    <span class="keyword">if</span> INFO:</div><div class="line">        <span class="keyword">print</span> <span class="string">'yes'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'no'</span></div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_prompt</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    测试输入信息</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    Text = prompt(<span class="string">'Input word:'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'-----'</span>,Text</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;基于paramiko的封装，远程执行命令，方便简单，实用性强。&lt;/p&gt;
&lt;h4 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;h
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="fabric" scheme="https://ttxsgoto.github.io/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>ansible</title>
    <link href="https://ttxsgoto.github.io/2017/03/18/ansible/"/>
    <id>https://ttxsgoto.github.io/2017/03/18/ansible/</id>
    <published>2017-03-18T13:19:30.000Z</published>
    <updated>2017-03-19T13:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ansible架构图"><a href="#Ansible架构图" class="headerlink" title="Ansible架构图"></a>Ansible架构图</h3><p><img src="https://ttxsgoto.github.io/img/ansible/ansible01.png" alt=""></p>
<h3 id="Ansible特性"><a href="#Ansible特性" class="headerlink" title="Ansible特性"></a>Ansible特性</h3><pre><code>- 基于python实现，由Paramike，PyYAML和Jinjia2三个关键模块
- 部署简单，agentless
- 使用ssh协议
- 主从集中化模式
- 支持自定义模块
- 支持playbook
- 幂等性：一种操作可重复多次结果相同
</code></pre><h3 id="Ansible核心组件"><a href="#Ansible核心组件" class="headerlink" title="Ansible核心组件"></a>Ansible核心组件</h3><pre><code>- ansible core：Ansible的核心程序
- host iventory：记录了每一个由Ansible管理的主机信息，信息包括ssh端口，root帐号密码，ip地址等
- core modules：Ansible管理主机之前，先调用core Modules中的模块，然后指明管理Host Lnventory中的主机，就可以完成管理主机
- custom modules：自定义模块
- playbook(yaml,jinjia2)：YAML格式文件，多个任务定义在一个文件中
- connect plugin：连接插件，Ansible和Host通信使用
</code></pre><h3 id="Invetory文件说明"><a href="#Invetory文件说明" class="headerlink" title="Invetory文件说明"></a>Invetory文件说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[web01]</div><div class="line">192.168.0.1 ansible_ssh_user=root ansible_ssh_pass=xxx</div><div class="line">[web02]</div><div class="line">192.168.0.[2:5]    #从2到5的主机</div><div class="line">[web03]    #对应变量</div><div class="line">192.168.0.8 port=80 hostname=&quot;test01&quot;</div><div class="line">192.168.0.9 port=8080 hostname=&quot;test02&quot;</div><div class="line">[web03:vars]    #对web03组定义变量</div><div class="line">server1=ttxsgoto1.com</div><div class="line">server2=ttxsgoto2.com</div><div class="line">[webservers:children]    #组嵌套，webservers组包括web01和web02下的主机</div><div class="line">web01</div><div class="line">web02</div><div class="line">[webservers:vars]    #组定义变量</div><div class="line">server1=tttxsgoto.com</div></pre></td></tr></table></figure>
<p>查看模块帮助信息</p>
<pre><code>- ansible-doc -l
- ansible-doc -s  module_name
</code></pre><p>ansible命令应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</div><div class="line">-f forks:启动并发线程数</div><div class="line">-m module_name:使用的模块名</div><div class="line">-a args:模块特有的参数</div></pre></td></tr></table></figure></p>
<h3 id="常见模块"><a href="#常见模块" class="headerlink" title="常见模块"></a>常见模块</h3><ul>
<li>command</li>
<li>cron</li>
<li>user</li>
<li>group</li>
<li>copy</li>
<li>file</li>
<li>ping</li>
<li>setup</li>
<li>service</li>
<li>shell</li>
<li>script</li>
<li>yum/apt</li>
</ul>
<p>cron:计划任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">present: 安装任务</div><div class="line">absent:移除任务</div><div class="line">ansible local -m cron -a &apos;minute=*/5 job=&quot;/bin/echo abc &gt; /root/abc.log&quot; name=&quot;test cron job&quot;  state=&quot;absent&quot; &apos;</div></pre></td></tr></table></figure></p>
<p>user:用户管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- name:指明添加的用户名</div><div class="line">- ansible local -m user -a &apos;name=&quot;user1&quot;&apos;</div></pre></td></tr></table></figure></p>
<p>group:用户组管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ansible local -m group -a &apos;name=user1 gid=306 system=yes&apos;    #添加用户组</div><div class="line">ansible local -m group -a &apos;name=user1 gid=306 system=yes state=absent&apos;    #删除用户组</div></pre></td></tr></table></figure></p>
<p>copy:文件复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src=:定义本地源路径</div><div class="line">content=:取代src=，定义内容直接写入到远程文件中</div><div class="line">dest=:定义远程路径，绝对路径</div><div class="line">ansible local -m copy -a &apos;src=/etc/fstab dest=/tmp/fstab.bak owner=root  mode=777&apos;</div><div class="line">ansible local -m copy -a &apos;content=&quot;hello wrold\nabc\n&quot; dest=/tmp/fstab.bak owner=root</div></pre></td></tr></table></figure></p>
<p>file:文件管理属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">path=: 指明文件路径，可以使用name、dest来替换</div><div class="line">ansible local -m file -a &apos; owner=bigdata group=bigdata  mode=644 path=/tmp/fstab.bak&apos;    #修改权限和组信息</div><div class="line">ansible local -m file -a &apos;path=/tmp/fstab.bak.link src=/tmp/fstab.bak state=link&apos;  #软链接</div></pre></td></tr></table></figure></p>
<p>ping:测试主机联通性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible local -m ping</div></pre></td></tr></table></figure></p>
<p>setup:收集远程主机的facts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#每个被管理节点会将自己相关的信息发生给远程的ansible主机，用于模板调用变量</div><div class="line">ansible local -m setup</div></pre></td></tr></table></figure></p>
<p>service:常用服务的运行状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">enabled=: 开机自启动，为true和false</div><div class="line">name=: 服务名称</div><div class="line">state=: 启动状态，started,stopped,restarted;</div><div class="line">ansible local -m service -a &quot;enabled=true name=nginx state=started&quot;</div></pre></td></tr></table></figure></p>
<p>shell:远程执行命令，可传递参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#用到管道等功能的复杂命令时使用shell命令</div><div class="line">ansible local -m shell -a &quot;echo xxx | passwd --stdin user1&quot;</div></pre></td></tr></table></figure></p>
<p>script:将本地脚本在远程上执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#注意：使用相对路径指定脚本</div><div class="line">ansible local -m script -a &quot;./test.sh&quot;</div></pre></td></tr></table></figure></p>
<p>yum/apt: 安装程序包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name=:    需要安装的程序包，可以加版本号</div><div class="line">state=:    present，lastest安装，absent表示卸载</div><div class="line">ansible local -m yum -a &quot;name=zsh&quot;    #安装</div><div class="line">ansible local -m apt -a &quot;name=zsh state=absent&quot;    #卸载</div></pre></td></tr></table></figure></p>
<h3 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h3><p>通过yaml将多个模块组装起来运行多个任务<br>组成结构：<br>Playbooks：<br>    Tasks：任务列表<br>    Variables：变量<br>    Templates：模板<br>    Handlers：处理器，由某事件触发执行的操作<br>    Roles：角色</p>
<p>运行说明：<br>0)yaml语法检测<br>ansible-playbook –syntax-check /path/to/playbook.yaml<br>1)yaml测试运行<br>ansible-playbook -C /path/to/playbook.yaml<br>2)运行<br>ansiable-playbook /path/to/playbook.yml<br>-t TAGS  #给指定的任务定义一个调用标识<br>–tags=TAGS #给指定的任务定义一个调用标识<br>–skip-tags=SKIP_TAGS #跳过指定的标签<br>–start-at-task=START_AT #从哪个任务后执行<br>–list-tags    #查看标签<br>基本结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">例子1：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">  - name: create nginx group</div><div class="line">      group: name=nginx system=yes gid=208</div><div class="line">  - name: create nginx user</div><div class="line">      user: name=nginx uid=208 system=yes</div><div class="line">- hosts: dbservers</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">  - name: copy file to dbsrvs</div><div class="line">      copy: src=/etc/inittab dest=/tmp/inittab.bak</div><div class="line"> </div><div class="line">例子2(handler,vars)：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">  - package: httpd</div><div class="line">  - service: httpd</div><div class="line">  tasks:</div><div class="line">  - name: install httpd package</div><div class="line">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class="line">  - name: install configuration file for httpd</div><div class="line">      copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf</div><div class="line">      notify:</div><div class="line">      - restart httpd</div><div class="line">  - name: start httpd service</div><div class="line">      service: enabled=true name=httpd state=started</div><div class="line">  handlers:</div><div class="line">  - name: restart httpd</div><div class="line">    service: name=httpd state=restarted</div><div class="line">  - name: copy file</div><div class="line">    copy: content=&quot;&#123;&#123; ansible_all_ipv4_addresses &#125;&#125;&quot; dest=/tmp/test.txt</div><div class="line"> </div><div class="line">例子3(条件测试)：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">  - username: user1</div><div class="line">  tasks:</div><div class="line">  - name: create &#123;&#123; username &#125;&#125;</div><div class="line">      user: name=&#123;&#123; userneam &#125;&#125;</div><div class="line">      when: ansible_fqdn == &apos;ttxsgoto&apos;</div><div class="line"> </div><div class="line">例子4(迭代-for)：</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  - name: add username</div><div class="line">    user: name=&#123;&#123; item.name &#125;&#125; state=present groups=&#123;&#123; item.groups &#125;&#125;</div><div class="line">    with_items:</div><div class="line">      - &#123;name:&apos;testuser1&apos;,groups=&apos;user1&apos;&#125;</div><div class="line">      - &#123;name:&apos;testuser2&apos;,groups=&apos;user2&apos;&#125;</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  - name: add username</div><div class="line">    user: name=&#123;&#123; item &#125;&#125; state=present groups=group1</div><div class="line">    with_items:</div><div class="line">      - testuser1</div><div class="line">      - testuser2</div><div class="line"> </div><div class="line">例子5(templates/tags  ansible-playbook test.yml --tags=&apos;conf_chage&apos;):</div><div class="line"> #tags: 在playbook可以为某个任务定义一个标签，在执行playbook时，通过tags可实现仅运行指定tasks任务</div><div class="line"> - hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">  - package: httpd</div><div class="line">  - service: httpd</div><div class="line">  tasks:</div><div class="line">  - name: install httpd package</div><div class="line">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class="line">  - name: install configuration file for httpd</div><div class="line">      template: src=/root/conf/httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf</div><div class="line">     tags:</div><div class="line">     - conf_chage</div><div class="line">     notify:</div><div class="line">      - restart httpd</div><div class="line">  - name: start httpd service</div><div class="line">      service: enabled=true name=httpd state=started</div><div class="line">  handlers:</div><div class="line">  - name: restart httpd</div><div class="line">    service: name=httpd state=restarted</div></pre></td></tr></table></figure></p>
<p>roles：用于层次化、结构化的组织playbook；role能够根据层次结构自动装载变量文件、task以及handlers等，要使用roles只需要在playbook中使用include指令；roles通过分别将变量、文件、任务、模块及处理器放置在单独的目录中，并可以便捷地通过include它们的一种机制，角色一般用于基于主机构建服务的场景中；无实例，用到时在记录</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Ansible架构图&quot;&gt;&lt;a href=&quot;#Ansible架构图&quot; class=&quot;headerlink&quot; title=&quot;Ansible架构图&quot;&gt;&lt;/a&gt;Ansible架构图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ttxsgoto.github.io/i
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="ansible" scheme="https://ttxsgoto.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Celery异步</title>
    <link href="https://ttxsgoto.github.io/2017/03/12/celery/"/>
    <id>https://ttxsgoto.github.io/2017/03/12/celery/</id>
    <published>2017-03-12T05:18:43.000Z</published>
    <updated>2017-03-14T14:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>可以在 Request-Response 循环之外执行的操作：发送邮件、推送消息</li>
<li>耗时的操作：调用第三方 API（前端通过 AJAX 展示进度和结果）</li>
<li>周期性任务：取代 crontab</li>
</ul>
<h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p><img src="https://ttxsgoto.github.io/img/celery/celery01.png" alt=""><br>Celery的架构由三部分组成：</p>
<pre><code>消息中间件（message broker）：Celery本身不提供消息服务是任务调度队列，通常以服务形式出现，可以方便的和第三方提供的消息中间件集成；包括，RabbitMQ, Redis, MongoDB；
任务执行单元（worker）：是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中；
任务执行结果存储（task result store）：用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache
</code></pre><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 参数配置</div><div class="line">    BROKER_URL = &apos;redis://127.0.0.1:6379&apos;               # 指定 Broker</div><div class="line">    CELERY_RESULT_BACKEND = &apos;redis://127.0.0.1:6379/0&apos;  # 指定 Backend</div><div class="line">    CELERY_TIMEZONE = &apos;Asia/Shanghai&apos;                   # 指定时区，默认是 UTC</div><div class="line"></div><div class="line">    CELERY_IMPORTS = (                                  # 指定导入的任务模块</div><div class="line">    &apos;celery_app.task1&apos;,</div><div class="line">    &apos;celery_app.task2&apos;</div><div class="line">)</div><div class="line">    app.config_from_object(&apos;celeryconfig&apos;)  #将配置导入到celery对象中</div></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>celery worker -A tasks –loglevel=info –concurrency=5<br>参数”-A”指定了Celery实例的位置，本例是在”tasks.py”中，celery命令会自动在该文件中寻找Celery对象实例。建议指定Celery对象名称，如”-A tasks.app”。<br>参数”loglevel”指定了日志等级，也可以不加，默认为warning。也可以使用 -l info来表示<br>参数”concurrency”指定最大并发数，默认为CPU核数<br>delay():方法将任务发送到消息队列中，由之前启动worker执行，这时Python控制台上只会返回”AsyncResult”信息。如果你看下之前职程的启动窗口，你会看到多了条日志”Received task: celery_app.task1.add[bec9a333-3af7-43ab-b93d-4a2ae6779058]  ETA:[2017-03-12 12:57:08.630629+08:00]”<br>“delay()”方法，它其实是对”apply_async()”方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用”apply_async()”，其常用的参数有：</p>
<pre><code>countdown: 指定多少秒后任务才被执行
eta: 指定任务被调度的时间，参数类型是datetime
expires: 任务过期时间，参数类型可以是int（秒），也可以是datetime
retry: 任务发送失败的重试次数
priority: 任务优先级，范围是0-9
serializer: 参数和返回值的序列化方式
</code></pre><p>result = add.delay(2,5)<br>result.ready()  #True,用于检查任务执行是否成功<br>result.get(timeout=1)   #7,get方法用于获取任务结果</p>
<p>delay() 方法是 apply_async() 方法的简写<br>apply_async(args=(), kwargs={}, route_name=None, **options)<br>这个调用会把 add 操作放入到队列里，然后立即返回一个 AsyncResult 对象<br>当函数被@app.task装饰后，就成为可被 Celery 调度的任务</p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><h4 id="异步执行任务"><a href="#异步执行任务" class="headerlink" title="异步执行任务"></a>异步执行任务</h4><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- celery_app</div><div class="line">    - __init__.py</div><div class="line">    - celeryconfig.py</div><div class="line">    - init.py</div><div class="line">    - task1.py</div><div class="line">    - task2.py</div><div class="line">    - client.py</div></pre></td></tr></table></figure></p>
<p>celeryconfig.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379'</span>               <span class="comment"># 指定 Broker</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/0'</span>  <span class="comment"># 指定 Backend</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span>                   <span class="comment"># 指定时区，默认是 UTC</span></div><div class="line"> </div><div class="line">CELERY_IMPORTS = (                                  <span class="comment"># 指定导入的任务模块</span></div><div class="line">    <span class="string">'celery_app.task1'</span>,</div><div class="line">    <span class="string">'celery_app.task2'</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>init.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Describe:异步执行</div><div class="line">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class="line">cd /train/celery_demo &amp;&amp; celery worker -A celery_app.init --loglevel=INFO</div><div class="line"></div><div class="line">'''python</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">ttxsgoto = Celery(<span class="string">"ttxsgoto"</span>)   <span class="comment">#创建一个celery任务</span></div><div class="line"> </div><div class="line">ttxsgoto.config_from_object(<span class="string">'celery_app.celeryconfig'</span>)  <span class="comment">#将配置导入到celery对象中</span></div></pre></td></tr></table></figure></p>
<p>task1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>task2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> x * y</div></pre></td></tr></table></figure></p>
<p>client.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> task1</div><div class="line"><span class="keyword">import</span> task2</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"异步执行开始:"</span>,time.ctime()</div><div class="line">task1.add.apply_async(args=(<span class="number">2</span>,<span class="number">8</span>), countdown=<span class="number">5</span>) <span class="comment"># 5 秒后执行任务</span></div><div class="line">task2.multiply.delay(<span class="number">3</span>,<span class="number">7</span>)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"end!!!!!"</span></div><div class="line"><span class="keyword">print</span> time.ctime()</div></pre></td></tr></table></figure></p>
<p>启动celery并服务，并执行client.py脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">celery worker -A celery_app.init  -l info</div><div class="line">python client.py</div></pre></td></tr></table></figure></p>
<h4 id="周期执行任务"><a href="#周期执行任务" class="headerlink" title="周期执行任务"></a>周期执行任务</h4><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- celery_app_cron</div><div class="line">    - __init__.py</div><div class="line">    - celeryconfig.py</div><div class="line">    - init.py</div><div class="line">    - task1.py</div><div class="line">    - task2.py</div></pre></td></tr></table></figure></p>
<p>celeryconfig.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</div><div class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379'</span>               <span class="comment"># 指定 Broker</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/0'</span>  <span class="comment"># 指定 Backend</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span>                   <span class="comment"># 指定时区，默认是 UTC</span></div><div class="line"> </div><div class="line">CELERY_IMPORTS = (                                  <span class="comment"># 指定导入的任务模块</span></div><div class="line">    <span class="string">'celery_app_cron.task1'</span>,</div><div class="line">    <span class="string">'celery_app_cron.task2'</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">#ttxsgoto = Celery("cron",broker= BROKER_URL, backend= CELERY_RESULT_BACKEND)</span></div><div class="line"> </div><div class="line"><span class="comment">#定时任务设置</span></div><div class="line">CELERYBEAT_SCHEDULE = &#123;</div><div class="line">    <span class="string">'add-every-30s'</span>:&#123;</div><div class="line">        <span class="string">'task'</span>:<span class="string">'celery_app_cron.task1.add'</span>,         <span class="comment">#任务执行的函数</span></div><div class="line">        <span class="string">'schedule'</span>:timedelta(seconds=<span class="number">30</span>),           <span class="comment"># 每30s执行一次</span></div><div class="line">        <span class="string">'args'</span>:(<span class="number">3</span>,<span class="number">12</span>)                                <span class="comment"># 任务函数参数</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">'multiply-erverday-7-10'</span>:&#123;</div><div class="line">        <span class="string">'task'</span>:<span class="string">'celery_app_cron.task2.multiply'</span>,</div><div class="line">        <span class="comment">#'schedule':crontab(hour=7,minute=10),      #cron计划任务,每天7:10进行</span></div><div class="line">        <span class="string">'args'</span>:(<span class="number">3</span>,<span class="number">15</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>init.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Describe:定时任务</div><div class="line">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class="line">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init worker --loglevel=INFO</div><div class="line">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init beat</div><div class="line">放在一起执行:</div><div class="line">cd /train/celery_demo &amp;&amp; celery -B -A celery_app_cron.init worker --loglevel=INFO</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">ttxsgoto = Celery(<span class="string">"cron"</span>)</div><div class="line">ttxsgoto.config_from_object(<span class="string">'celery_app_cron.celeryconfig'</span>)</div></pre></td></tr></table></figure></p>
<p>task1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>task2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> x * y</div></pre></td></tr></table></figure></p>
<p>启动celery服务，可以看到执行结果，30s运行一次task1.add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery worker -B -A celery_app_cron.init -l info</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="celery" scheme="https://ttxsgoto.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>django分页</title>
    <link href="https://ttxsgoto.github.io/2017/03/08/django-page/"/>
    <id>https://ttxsgoto.github.io/2017/03/08/django-page/</id>
    <published>2017-03-08T13:57:42.000Z</published>
    <updated>2017-03-09T01:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Django 项目中使用自带的分页模块，记录如下</p>
<p><strong>相关说明</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</div><div class="line"> </div><div class="line">objects = [<span class="string">'abc'</span>,<span class="string">'bcd'</span>,<span class="string">'cde'</span>,<span class="string">'def'</span>,<span class="string">'efg'</span>,<span class="string">'fgh'</span>]</div><div class="line">p = Paginator(objects, <span class="number">2</span>)<span class="comment">#表示传入数据集合，2 表示每页存放的数据个数</span></div><div class="line">p.cout <span class="comment">#6 表示数据总量</span></div><div class="line">p.num_pages<span class="comment">#3 表示总页数</span></div><div class="line">p.per_page<span class="comment">#2 表示每页的数量</span></div><div class="line">p.object_list<span class="comment"># ['abc','bcd','cde','def','efg','fgh']  所有数据列表</span></div><div class="line">p.page_range  <span class="comment">#[1, 2, 3]   表示页数</span></div><div class="line">p1 = p.page(<span class="number">1</span>)<span class="comment">#获取第一页的对象</span></div><div class="line">p1.object_list<span class="comment">#['abc', 'bcd'] 该页上的数据</span></div><div class="line">p1.has_next()<span class="comment">#True,判断该页是否有下一页</span></div><div class="line">p1.has_previous()<span class="comment">#False,判断该页是否有上一页</span></div><div class="line">p1.has_other_pages() <span class="comment">#判断该页是否有上或者下页</span></div><div class="line">p1.start_index()<span class="comment"># 1 p1开始的索引值</span></div><div class="line">p1.end_index()<span class="comment">#2 p1结束的索引值</span></div><div class="line">p1.next_page_number(）<span class="comment"># #返回下一页的页码，如果下一页不存在，抛出InvalidPage异常</span></div><div class="line">p1.previous_page_number()<span class="comment">#返回前一页的页码，如果上一页不存在，抛出InvalidPag异常</span></div><div class="line">p1.paginator<span class="comment">#&lt;django.core.paginator.Paginator object at 0x7f39989b2bd0&gt; 相关paginator的对象</span></div></pre></td></tr></table></figure></p>
<p><strong>Django中使用分页</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</div><div class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, InvalidPage, PageNotAnInteger</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">device_status</span><span class="params">(request)</span>:</span></div><div class="line">    All_page_info = Device_status.objects.all()</div><div class="line">    DataCount,page,All_page_info = All_in_one(request,All_page_info)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> my_render(<span class="string">"serverinfo/device_status.html"</span>,locals(),request)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_render</span><span class="params">(template,data,request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render_to_response(template, data, context_instance=RequestContext(request))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpage_id</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    传递前端page过来的值，如果没有设置为1</div><div class="line">    """</div><div class="line">    page = request.GET.get(<span class="string">"page"</span>,<span class="string">""</span>)</div><div class="line">    <span class="keyword">if</span> page:</div><div class="line">        page = request.GET.get(<span class="string">"page"</span>,<span class="string">""</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        page = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> page</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpages</span><span class="params">(Data,page)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    处理分页函数</div><div class="line">    """</div><div class="line">    paginator = Paginator(list(Data),<span class="number">2</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Data = paginator.page(page)</div><div class="line">    <span class="keyword">except</span> PageNotAnInteger:</div><div class="line">        Data = paginator.page(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> EmptyPage:</div><div class="line">        Data = paginator.page(paginator.num_pages)</div><div class="line">    <span class="keyword">return</span> Data,page</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">All_in_one</span><span class="params">(request,All_page_info)</span>:</span></div><div class="line">    DataCount = len(All_page_info)</div><div class="line">    page = getpage_id(request)</div><div class="line">    All_page_info,page=getpages(All_page_info,page)</div><div class="line">    <span class="keyword">return</span> DataCount,page,All_page_info</div></pre></td></tr></table></figure></p>
<p><strong>templates中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">备注：paginator.html  //将以下模板导入需要添加分页功能的页面即可（&#123;% include &apos;paginator.html&apos; %&#125;）</div><div class="line">=========================</div><div class="line">&lt;span class=&quot;step-links&quot;&gt;</div><div class="line">   &#123;% if All_page_info.has_previous %&#125; &lt;!-- 是否有前一页 --&gt;</div><div class="line">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt; &lt;!-- 前一页的页码 --&gt;</div><div class="line">         &lt;/script&gt;</div><div class="line">   &#123;% endif %&#125;</div><div class="line">   &lt;span class=&quot;current&quot;&gt;</div><div class="line">       第 &#123;&#123; All_page_info.number &#125;&#125;页  总 &#123;&#123; All_page_info.paginator.num_pages &#125;&#125; 页  &lt;!-- 总页数 --&gt;</div><div class="line">   &lt;/span&gt;</div><div class="line">   &#123;% if All_page_info.has_next %&#125;</div><div class="line">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt; &lt;!-- 后一页的页码 --&gt;</div><div class="line">   &#123;% endif %&#125;</div><div class="line">&lt;/span&gt;</div><div class="line">&lt;span&gt;</div><div class="line">     &amp;nbsp;&amp;nbsp;共&#123;&#123;DataCount&#125;&#125;条记录</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<p><strong>效果展示</strong><br><img src="https://ttxsgoto.github.io/img/django/page.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Django 项目中使用自带的分页模块，记录如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关说明&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="分页" scheme="https://ttxsgoto.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>ConfigParser模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/07/ConfigParser/"/>
    <id>https://ttxsgoto.github.io/2017/03/07/ConfigParser/</id>
    <published>2017-03-07T13:57:05.000Z</published>
    <updated>2017-03-09T01:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>ConfigParser模块记录常用方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> ConfigParser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    基本的读取配置文件</div><div class="line">    -read(filename) 直接读取ini文件内容</div><div class="line">    -sections() 得到所有的section，并以列表的形式返回</div><div class="line">    -options(section) 得到该section的所有option</div><div class="line">    -items(section) 得到该section的所有键值对</div><div class="line">    -get(section,option) 得到section中option的值，返回为string类型</div><div class="line">    -getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数</div><div class="line">    基本的写入配置文件</div><div class="line">    -add_section(section) 添加一个新的section</div><div class="line">    -set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件</div><div class="line">    """</div><div class="line">    cf = ConfigParser.ConfigParser()</div><div class="line">    cf.read(<span class="string">'db.txt'</span>)</div><div class="line">    sec = cf.sections()                         <span class="comment">#获取所有sections的值</span></div><div class="line">    <span class="keyword">print</span> sec</div><div class="line">    opt = cf.options(<span class="string">'db1'</span>)                     <span class="comment">#获取指定sections的options</span></div><div class="line">    <span class="keyword">print</span> opt</div><div class="line">    val = cf.items(<span class="string">'db1'</span>)                       <span class="comment">#获取指定section的配置信息，为list</span></div><div class="line">    <span class="keyword">print</span> val,type(val)</div><div class="line">    val_str = cf.get(<span class="string">'db1'</span>, <span class="string">'db_host'</span>)          <span class="comment">#获取sections中option的值</span></div><div class="line">    <span class="keyword">print</span> val_str</div><div class="line">    cf.set(<span class="string">'db1'</span>,<span class="string">'db_host'</span>,<span class="string">'192.168.1.55'</span>)      <span class="comment">#设置某个option的值</span></div><div class="line">    cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        cf.add_section(<span class="string">'ttxsgoto'</span>)              <span class="comment">#添加一个section</span></div><div class="line">        cf.set(<span class="string">'ttxsgoto'</span>, <span class="string">'hostname'</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line">        cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    cf.remove_option(<span class="string">'ttxsgoto'</span>, <span class="string">'hostname'</span>)    <span class="comment">#删除option</span></div><div class="line">    cf.remove_section(<span class="string">'ttxsgoto'</span>)               <span class="comment">#删除section</span></div><div class="line">    cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.RawConfigParser()</div><div class="line">    config.add_section(<span class="string">'Section1'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'an_int'</span>,<span class="string">'15'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'a_bool'</span>,<span class="string">'true'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'a_float'</span>,<span class="string">'3.1415'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>, <span class="string">'baz'</span>, <span class="string">'fun'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>, <span class="string">'bar'</span>, <span class="string">'Python'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="string">'%(bar)s is %(baz)s !'</span>)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'example.cfg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> configfile:</div><div class="line">        config.write(configfile)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.RawConfigParser()</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    a_float = config.getfloat(<span class="string">'Section1'</span>, <span class="string">'a_float'</span>)</div><div class="line">    an_int = config.getint(<span class="string">'Section1'</span>, <span class="string">'an_int'</span>)</div><div class="line">    <span class="keyword">print</span> a_float + an_int</div><div class="line">    <span class="keyword">if</span> config.getboolean(<span class="string">'Section1'</span>, <span class="string">'a_bool'</span>):</div><div class="line">        <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.ConfigParser()</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>, <span class="string">'foo'</span>, <span class="number">0</span>)  <span class="comment">#0 默认，显示定义的字符串</span></div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="number">1</span>)    <span class="comment">#设置为1，显示原字符串</span></div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="number">0</span>,&#123;<span class="string">'bar'</span>:<span class="string">'Document'</span>,<span class="string">'baz'</span>:<span class="string">'evil'</span>&#125;) <span class="comment">#设置section的对应的options</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read2</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.SafeConfigParser(&#123;<span class="string">'bar'</span>:<span class="string">'Life'</span>,<span class="string">'baz'</span>:<span class="string">'hard'</span>&#125;)</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)  <span class="comment">#"Python is fun!"</span></div><div class="line">    config.remove_option(<span class="string">'Section1'</span>, <span class="string">'bar'</span>)</div><div class="line">    config.remove_option(<span class="string">'Section1'</span>,<span class="string">'baz'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)  <span class="comment">#"Life is hard!"</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ConfigParser模块记录常用方法&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="ConfigParser" scheme="https://ttxsgoto.github.io/tags/ConfigParser/"/>
    
  </entry>
  
  <entry>
    <title>logging模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/06/logging/"/>
    <id>https://ttxsgoto.github.io/2017/03/06/logging/</id>
    <published>2017-03-06T13:42:55.000Z</published>
    <updated>2017-03-07T13:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>logging为python模块提供状态、错误、信息输出的标准接口。<br>日志级别大小关系为：CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p>
<p>logging.basicConfig函数各参数说明：<br>filename: 指定日志文件名<br>filemode: 和file函数意义相同，指定日志文件的打开模式，’w’或’a’<br>format: 指定输出的格式和内容：</p>
<pre><code>%(levelno)s: 打印日志级别的数值
%(levelname)s: 打印日志级别名称
%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]
%(filename)s: 打印当前执行程序名
%(funcName)s: 打印日志的当前函数
%(lineno)d: 打印日志的当前行号
%(asctime)s: 打印日志的时间
%(thread)d: 打印线程ID
%(threadName)s: 打印线程名称
%(process)d: 打印进程ID
%(message)s: 打印日志信息
</code></pre><p>datefmt: 指定时间格式，同time.strftime()<br>level: 设置日志级别，默认为logging.WARNING</p>
<p>stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</p>
<p>记录日志信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logname = <span class="string">'log.log'</span></div><div class="line">logging.basicConfig(</div><div class="line">    level = logging.INFO,    <span class="comment">#定义记录大于或等于日志级别</span></div><div class="line">    format=<span class="string">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</div><div class="line">    filename=logname,</div><div class="line">    filemode=<span class="string">'a'</span>,)</div><div class="line">logging.warning(<span class="string">"log"</span>)</div></pre></td></tr></table></figure></p>
<p>将日志输出到文件，同时打印匹配的级别到屏幕上<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line">logname = <span class="string">'log.log'</span></div><div class="line">logging.basicConfig(</div><div class="line">    level = logging.INFO,    <span class="comment">#定义记录大于或等于日志级别</span></div><div class="line">    format=<span class="string">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</div><div class="line">    filename=logname,</div><div class="line">    filemode=<span class="string">'a'</span>,)</div><div class="line">console = logging.StreamHandler()</div><div class="line">console.setLevel(logging.INFO)    <span class="comment">#定义需要显示大于或等于日志级别</span></div><div class="line">formatter = logging.Formatter(<span class="string">'[%(levelname)s] [%(asctime)s]-- %(message)s'</span>)</div><div class="line">console.setFormatter(formatter)</div><div class="line">logging.getLogger(<span class="string">''</span>).addHandler(console)</div><div class="line">logging.warning(<span class="string">'log info'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;logging为python模块提供状态、错误、信息输出的标准接口。&lt;br&gt;日志级别大小关系为：CRITICAL &amp;gt; ERROR &amp;gt; WARNING &amp;gt; INFO &amp;gt; DEBUG &amp;gt; NOTSET&lt;/p&gt;
&lt;p&gt;logging.basicCon
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="logging" scheme="https://ttxsgoto.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>redis日常笔记</title>
    <link href="https://ttxsgoto.github.io/2017/02/18/redis/"/>
    <id>https://ttxsgoto.github.io/2017/02/18/redis/</id>
    <published>2017-02-18T14:16:52.000Z</published>
    <updated>2017-03-17T01:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis设置密码"><a href="#redis设置密码" class="headerlink" title="redis设置密码"></a>redis设置密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">方法一（命令行）：</div><div class="line">CONFIG SET requirepass  password	#设置密码为password</div><div class="line">auth password	#登录</div><div class="line">ping	#验证</div><div class="line">CONFIG SET requirepass  &apos;&apos;	#取消密码，设置为空</div><div class="line">redis-cli -h 127.0.0.1 -p 6379 -a &quot;ttxsgoto&quot; 	#验证连接</div><div class="line"> </div><div class="line">方法二（配置文件）：</div><div class="line">/etc/redis.conf中</div><div class="line">#requirepass foobared  </div><div class="line">去掉行前的注释，并修改密码为所需的密码,保存文件</div><div class="line">重启redis server完成</div><div class="line"> </div><div class="line">#导出</div><div class="line">redis-cli -h 127.0.0.1 -p 6379 -a &quot;ttxsgoto&quot; keys xxx* &gt; xxx.txt</div></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">keys *  #查看所有的keys</div><div class="line">get key #查看key</div><div class="line">set key vlaue   #设置key</div><div class="line">del key #删除key</div><div class="line"> </div><div class="line">#其他   http://redisdoc.com/</div><div class="line">dbsize  #当前数据库key数量</div><div class="line">select 1    #切换到1号数据库</div><div class="line">config get *    #返回配置参数的变量和值</div><div class="line">info [Memory]    #返回redis服务器的各种信息和统计数据，如版本，内存使用情况  http://redisdoc.com/server/info.html</div><div class="line">monitor    #实时打印出 Redis 服务器接收到的命令，调试用</div><div class="line">bgsave  #fork出一个新子进程，负责将数据保存到磁盘中</div><div class="line">slowlog get num    #查看slowlog http://redisdoc.com/server/slowlog.html</div><div class="line">slowlog len/reset     #slowlog数量/清空</div><div class="line">save    #备份</div><div class="line">move key db-index   # 返回1成功，0 如果key不存在，或者已经在指定数据库中</div><div class="line"> </div><div class="line">#删除所有key</div><div class="line">flushdb     #删除当前数据库中的所有Key</div><div class="line">flushall    #删除所有数据库中的所有key</div><div class="line"> </div><div class="line">查看建是否存在</div><div class="line">exists key   有返回(integer) 1，没有返回(integer) 0</div><div class="line"> </div><div class="line">rename key newkey   #更改键的名称</div><div class="line">type key    #返回键的数据类型</div></pre></td></tr></table></figure>
<h3 id="redis备份-amp-恢复"><a href="#redis备份-amp-恢复" class="headerlink" title="redis备份&amp;恢复"></a>redis备份&amp;恢复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">######## 备份 ########</div><div class="line">save    #备份，写入rdb文件</div><div class="line">bgsave  #fork出一个新子进程，负责将数据保存到磁盘中</div><div class="line"> </div><div class="line">######## 恢复 ########</div><div class="line">Redis 恢复的机制</div><div class="line">    - 如果只配置 AOF ，重启时加载 AOF 文件恢复数据；</div><div class="line">    - 如果同时配置了 RDB 和 AOF ，启动是只加载 AOF 文件恢复数据；</div><div class="line">    - 如果只配置 RDB，启动是将加载 dump 文件恢复数据</div><div class="line"> </div><div class="line">1.aof 中恢复数据(配置如下)</div><div class="line">    appendonly yes</div><div class="line">    dir /data/redis/</div><div class="line">2.rdb 中恢复数据(配置如下)</div><div class="line">    appendonly no</div><div class="line">    dir /data/redis/</div><div class="line">3.启动服务</div><div class="line"> </div><div class="line">#####重启服务时，会自动加载备份文件中的数据，但如果密码没有写入配置问题，会丢失需要重新设置</div><div class="line">#定时备份文件</div><div class="line">对于RDB和AOF，都是直接拷贝文件即可，可以设定crontab进行定时备份： cp /var/lib/redis/dump.rdb /somewhere/safe/dump.$(date +%Y%m%d%H%M).rdb</div><div class="line"> </div><div class="line">检查修复AOF文件：</div><div class="line">redis-check-aof data/appendonly.aof</div><div class="line"> </div><div class="line"># 数据快照，备份，主从</div><div class="line">http://blog.csdn.net/zhu_xun/article/details/16806697</div></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line">#redis.conf</div><div class="line">################################## INCLUDES ###################################</div><div class="line"># 其他个性化设置</div><div class="line"># include /path/to/local.conf</div><div class="line"># include /path/to/other.conf</div><div class="line"> </div><div class="line">################################ GENERAL  #####################################常用</div><div class="line">daemonize no    #默认不为守护进程运行，设置为yes修改为守护进程</div><div class="line">pidfile /var/run/redis.pid  #如果为守护进程模式，pid文件</div><div class="line">port 6379   #监听端口</div><div class="line">tcp-backlog 511     # TCP 监听的最大容纳数量,在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题,/proc/sys/net/core/somaxconn 和设置值 相同</div><div class="line"># bind 192.168.1.100 10.0.0.1   #你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP，多个IP用空格隔开</div><div class="line">timeout 0   # 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）</div><div class="line">tcp-keepalive 0 # tcp 心跳包，推荐一个合理的值就是60秒</div><div class="line">loglevel notice     # 定义日志级别，notice (适用于生产环境)</div><div class="line">logfile &quot;&quot;      # 指定日志文件的位置</div><div class="line"> </div><div class="line"># 要想把日志记录到系统日志，就把它改成 yes，</div><div class="line"># 也可以可选择性的更新其他的syslog 参数以达到你的要求</div><div class="line"># syslog-enabled no</div><div class="line"> </div><div class="line"># 设置 syslog 的 identity。</div><div class="line"># syslog-ident redis</div><div class="line"> </div><div class="line"># 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。</div><div class="line"># syslog-facility local0</div><div class="line"> </div><div class="line">databases 32    #设置数据库的数目，启动32个数据库，默认为16个(0-15)</div><div class="line"> </div><div class="line">################################ SNAPSHOTTING  ################################快照</div><div class="line"># 存 DB 到磁盘：</div><div class="line">#   格式：save &lt;间隔时间（秒）&gt; &lt;写入次数&gt;</div><div class="line">#   根据给定的时间间隔和写入次数将数据保存到磁盘</div><div class="line">#</div><div class="line">#   下面的例子的意思是：</div><div class="line">#   900 秒内如果至少有 1 个 key 的值变化，则保存</div><div class="line">#   300 秒内如果至少有 10 个 key 的值变化，则保存</div><div class="line">#   60 秒内如果至少有 10000 个 key 的值变化，则保存</div><div class="line">#　　</div><div class="line">#   注意：你可以注释掉所有的 save 行来停用保存功能。</div><div class="line">#   也可以直接一个空字符串来实现停用：</div><div class="line">#   save &quot;&quot;</div><div class="line"> </div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line"> </div><div class="line"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</div><div class="line"># 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，</div><div class="line"># 否则就会没人注意到灾难的发生。</div><div class="line">#</div><div class="line"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</div><div class="line">#</div><div class="line"># 你可能不希望 redis 这样做，那你就改成 no </div><div class="line">stop-writes-on-bgsave-error yes</div><div class="line"> </div><div class="line"># 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串</div><div class="line"># 默认都设为 yes</div><div class="line"># 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，</div><div class="line"># 不过这个数据集可能就会比较大</div><div class="line">rdbcompression yes</div><div class="line"> </div><div class="line"># 是否校验rdb文件</div><div class="line">rdbchecksum yes</div><div class="line"> </div><div class="line"># 设置 dump 的文件位置</div><div class="line">dbfilename dump.rdb </div><div class="line"> </div><div class="line"># 工作目录</div><div class="line"># 例如上面的 dbfilename 只指定了文件名，</div><div class="line"># 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。</div><div class="line">dir ./      #设置到 /etc/redis下 dir &apos;/etc/redis/&apos;</div><div class="line"> </div><div class="line">################################# REPLICATION #################################主从复制</div><div class="line">#######</div><div class="line"> </div><div class="line">################################## SECURITY ###################################安全</div><div class="line"># 设置认证密码</div><div class="line">requirepass foobared</div><div class="line"> </div><div class="line">################################### LIMITS ####################################限制</div><div class="line"># 一旦达到最大限制，redis 将关闭所有的新连接</div><div class="line"># 并发送一个‘max number of clients reached’的错误</div><div class="line"># maxclients 10000</div><div class="line"> </div><div class="line"># 最大使用内存</div><div class="line"># maxmemory &lt;bytes&gt;</div><div class="line"> </div><div class="line"># 最大内存策略，你有 5 个选择。</div><div class="line"># </div><div class="line"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</div><div class="line"># volatile-lru -&gt; 使用 LRU 算法移除包含过期设置的 key 。</div><div class="line"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</div><div class="line"># allkeys-lru -&gt; 根据 LRU 算法移除所有的 key 。</div><div class="line"># volatile-random -&gt; remove a random key with an expire set</div><div class="line"># allkeys-random -&gt; remove a random key, any key</div><div class="line"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</div><div class="line"># noeviction -&gt; don&apos;t expire at all, just return an error on write operations</div><div class="line"># noeviction -&gt; 不让任何 key 过期，只是给写入操作返回一个错误</div><div class="line"> </div><div class="line">############################## APPEND ONLY MODE ###############################</div><div class="line"> </div><div class="line">appendonly no   #在启动时Redis会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入的速度相较RDB会慢一些</div><div class="line">appendfilename &quot;appendonly.aof&quot;</div><div class="line"> </div><div class="line"># appendfsync always</div><div class="line">appendfsync everysec</div><div class="line">no-appendfsync-on-rewrite no</div><div class="line"> </div><div class="line">auto-aof-rewrite-percentage 100</div><div class="line">auto-aof-rewrite-min-size 64mb</div><div class="line"> </div><div class="line">################################ LUA SCRIPTING  ###############################</div><div class="line">lua-time-limit 5000</div><div class="line"> </div><div class="line">################################ REDIS CLUSTER  ###############################集群</div><div class="line"># cluster-enabled yes   # 启用或停用集群</div><div class="line"> </div><div class="line"># cluster-config-file nodes-6379.conf</div><div class="line"># cluster-node-timeout 15000</div><div class="line"># cluster-slave-validity-factor 10</div><div class="line"># cluster-migration-barrier 1</div><div class="line"> </div><div class="line">################################## SLOW LOG ###################################慢日志</div><div class="line"> </div><div class="line">slowlog-log-slower-than 10000   # 慢查询记录时间10000ms</div><div class="line">slowlog-max-len 128             # 记录数据条数 </div><div class="line"> </div><div class="line">############################# Event notification ##############################</div><div class="line">notify-keyspace-events &quot;&quot;</div><div class="line"> </div><div class="line">############################### ADVANCED CONFIG ###############################</div><div class="line">hash-max-ziplist-entries 512</div><div class="line">hash-max-ziplist-value 64</div><div class="line"> </div><div class="line">list-max-ziplist-entries 512</div><div class="line">list-max-ziplist-value 64</div><div class="line"> </div><div class="line">set-max-intset-entries 512</div><div class="line"> </div><div class="line">zset-max-ziplist-entries 128</div><div class="line">zset-max-ziplist-value 64</div><div class="line"> </div><div class="line">hll-sparse-max-bytes 3000</div><div class="line"> </div><div class="line">activerehashing yes</div><div class="line"> </div><div class="line">client-output-buffer-limit normal 0 0 0</div><div class="line">client-output-buffer-limit slave 256mb 64mb 60</div><div class="line">client-output-buffer-limit pubsub 32mb 8mb 60</div><div class="line"> </div><div class="line">hz 10</div><div class="line"> </div><div class="line">aof-rewrite-incremental-fsync yes</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;redis设置密码&quot;&gt;&lt;a href=&quot;#redis设置密码&quot; class=&quot;headerlink&quot; title=&quot;redis设置密码&quot;&gt;&lt;/a&gt;redis设置密码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="redis" scheme="https://ttxsgoto.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mongo日常笔记</title>
    <link href="https://ttxsgoto.github.io/2017/02/16/mongo/"/>
    <id>https://ttxsgoto.github.io/2017/02/16/mongo/</id>
    <published>2017-02-16T13:57:18.000Z</published>
    <updated>2017-02-16T14:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认证授权相关"><a href="#认证授权相关" class="headerlink" title="认证授权相关"></a>认证授权相关</h3><p>帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中</p>
<p><strong>认证登录说明</strong><br>超级用户：拥有最大权限，存储在admin数据库中，<br>数据库用户：存储在单个数据库中，最能访问对应的数据库<br>用户信息保存在db.system.users中</p>
<p><strong>开启认证方法</strong></p>
<ul>
<li>启动添加： –auth</li>
<li>配置文件：security.authorization: enabled</li>
</ul>
<p><strong>用户和权限的特性</strong></p>
<ol>
<li>数据库是由超级用户来创建的，一个数据库可以包含多个用户，一个用户只能在一个数据库下，不同数据库中的用户可以同名</li>
<li>如果在 admin 数据库中不存在用户，即使 mongod 启动时添加了 –auth 参数，此时不进行任何认证还是可以做任何操作</li>
<li>在 admin 数据库创建的用户具有超级权限，可以对 MongoDB 系统内的任何数据库的数据对象进行操作</li>
<li>特定数据库比如 test1 下的用户 test_user1，不能够访问其他数据库 test2，但是可以访问本数据库下其他用户创建的数据</li>
<li>不同数据库中同名的用户不能够登录其他数据库。比如数据库 test1 和 test2 都有用户 test_user，以 test_user 登录 test1 后,不能够登录到 test2 进行数据库操作</li>
</ol>
<h4 id="授权命令"><a href="#授权命令" class="headerlink" title="授权命令"></a>授权命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">use xxx;						#进入某库，创建某库</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;read&quot;,db:&quot;test&quot;&#125;]&#125;)	        #读</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto01&quot;,pwd:&quot;ttxsgoto01&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test&quot;&#125;]&#125;)	#读写</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;root&quot;,db:&quot;test&quot;&#125;]&#125;)	        #超级root权限</div><div class="line">db.system.users.remove(&#123;user:&quot;ttxsgoto&quot;&#125;)	#删除用户</div><div class="line">db.changeUserPassword(&apos;ttxsgoto&apos;,&apos;test&apos;); 	#修改密码的方法</div></pre></td></tr></table></figure>
<p><strong>具体权限说明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Built-In Roles（内置角色）：</div><div class="line">    1. 数据库用户角色：read、readWrite;</div><div class="line">    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；</div><div class="line">    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</div><div class="line">    4. 备份恢复角色：backup、restore；</div><div class="line">    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</div><div class="line">    6. 超级用户角色：root</div><div class="line">    7. 内部角色：__system</div><div class="line"></div><div class="line">具体角色：</div><div class="line">Read：允许用户读取指定数据库</div><div class="line">readWrite：允许用户读写指定数据库</div><div class="line">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</div><div class="line">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</div><div class="line">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</div><div class="line">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</div><div class="line">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</div><div class="line">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</div><div class="line">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</div><div class="line">root：只在admin数据库中可用。超级账号，超级权限</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 在admin库中</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test01&quot;&#125;,&#123;role:&quot;readWrite&quot;,db:&quot;test02&quot;&#125;]&#125;)	#在admin库下创建test01，test02库的账号</div><div class="line"></div><div class="line">在这种情况下，不能直接在对应的库中登录验证，而应该在对应的这个库中进行认证后，在切换到其他库中</div><div class="line">use admin</div><div class="line">db.auth(&apos;ttxsgoto02&apos;,&apos;ttxsgoto02&apos;)</div><div class="line">use test02；</div></pre></td></tr></table></figure>
<h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line">mongo</div><div class="line">use admin</div><div class="line">db.auth(&quot;admin&quot;,&quot;abc&quot;)</div><div class="line">方法二：</div><div class="line">mongo -u admin -p admin --authenticationDatabase admin</div></pre></td></tr></table></figure>
<h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mongo 127.0.0.1/admin -uadmin -p&apos;admin&apos;		#连接mongo数据库</div><div class="line">use admin;			#进入数据库</div><div class="line">show users;			#查看当前库下的用户</div><div class="line">show collections/tables;        #查看当前库中的collections</div><div class="line">db.getCollectionNames();		#得到当前db的所有集合</div><div class="line">db.auth(&apos;ttxsgoto&apos;,&apos;ttxsgoto&apos;)	#登录验证</div><div class="line">db.getName()			#查看当前使用的数据库</div><div class="line">db.stats()			#查看当前db状态</div><div class="line">db.getMongo();			#查看当前db连接机器的地址</div><div class="line">db.abc.find();	                #查看集合中的所有数据</div><div class="line">db 		                #查看当前所在的数据库</div><div class="line">db.system.users.find().pretty()	#在admin库中查看所有账号</div><div class="line">db.getMongo();			#查看当前db连接机器的地址</div><div class="line">db.repairDatabase()		#修复当前数据库</div><div class="line">db.getCollectionNames()		#得到当前db的所有集合</div><div class="line">db.printCollectionStats()	#显示当前db所有聚集索引的状态</div></pre></td></tr></table></figure>
<h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 插入集合</div><div class="line">content=&#123;name:&quot;xxxx&quot;,sex:&quot;m&quot;&#125;</div><div class="line">db.collections.insert(content)</div><div class="line">db.createCollection(&quot;collName&quot;, &#123;size: 20, capped: 5, max: 100&#125;)	#创建一个集合</div><div class="line">db.getCollection(&quot;account&quot;)		#得到集合名称</div><div class="line"># 查询：</div><div class="line">db.inventory.find();</div><div class="line">db.foo.find()		#对当前数据库中的foo集合进行数据查找，所有数据</div><div class="line">db.foo.find(&#123;a:1&#125;)	#对当前数据库中的foo集合中条件包含a=1的项进行查询</div><div class="line"># 删除：</div><div class="line">db.dropDatabase()	#删除当前使用的数据库</div></pre></td></tr></table></figure>
<h4 id="备份相关"><a href="#备份相关" class="headerlink" title="备份相关"></a>备份相关</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">mongoimport(导入)/mongoexport(导出)：(将collection导出为json格式或csv格式)</div><div class="line">mongoexport -d test -c t1 -o t1.dat	#导出json格式</div><div class="line">-c	#指明导出的集合</div><div class="line">-d	#使用库</div><div class="line">mongoexport -d test -c t1 -csv -f num -o t1.dat	#导出csv格式</div><div class="line">-csv	#指明导出csv格式</div><div class="line">-f	#指明需要导出哪些列</div><div class="line">mongoimport -d test -c t1 -file t1.dat				#还原</div><div class="line">mongoimport -d test -c t1 -type csv --headerline -file t1.dat	#还原csv格式的数据</div><div class="line">--headerline	#指明不导入第一行，因为第一行为列名</div><div class="line">mongodump/mongorestore:（整库备份还原,库级别操作,先执行查询动作然后把所有查询结果写入到硬盘中，但在内存中的数据未写入磁盘中）</div><div class="line">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx  -d test -o /bak/mongodump	#导出</div><div class="line">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx	-o /bak/allmongobak	#导出所有</div><div class="line">-h ip</div><div class="line">--port port</div><div class="line">-u user</div><div class="line">-p password</div><div class="line">-d database</div><div class="line">-c collection</div><div class="line">-o outfile</div><div class="line">mongorestore -h IP  --port -u user -p password 	-d test  --drop	/bak/mongodump/*	#恢复</div><div class="line">--drop	#恢复前先删除所有记录</div><div class="line">--noIndexRestore	#不还原索引</div><div class="line">例子说明</div><div class="line"># 备份</div><div class="line">mongoexport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o collection.json</div><div class="line"></div><div class="line">mongodump -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o 1202.dat</div><div class="line"># 还原</div><div class="line">mongorestore -u root -p root --authenticationDatabase admin -d database_20161202 --noIndexRestore --drop 1202.dat/collection</div><div class="line">mongoimport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database_20161202 -c collection  --file  collection.json</div></pre></td></tr></table></figure>
<p><strong>库表级备份还原的区别:</strong><br>mongorestore和mongodump提供的是对mongo数据库的整个数据库的恢复和备份，而mongoimport和mongoexport则是提供更细粒度的collection级别的数据导入和导出。两者的粒度不同，mongoimport和mongoexport粒度更细，相对来说，更加灵活。其次，mongoimport和mongoexport只是将集合中的数据导出和导入，但是没有对数据库中的其它成分进行备份（比如索引），而mongorestore和mongodump则是对数据库中的所有成分（包括索引等其它）进行恢复和备份。然而，这也导致了mongorestore和mongodump导出的文件比较大耗时较长，而mongoimport和mongoexport导出的文件比较小，速度比较快，而且格式较为灵活。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;认证授权相关&quot;&gt;&lt;a href=&quot;#认证授权相关&quot; class=&quot;headerlink&quot; title=&quot;认证授权相关&quot;&gt;&lt;/a&gt;认证授权相关&lt;/h3&gt;&lt;p&gt;帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="mongo" scheme="https://ttxsgoto.github.io/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>python-类</title>
    <link href="https://ttxsgoto.github.io/2017/02/15/class/"/>
    <id>https://ttxsgoto.github.io/2017/02/15/class/</id>
    <published>2017-02-15T12:40:38.000Z</published>
    <updated>2017-02-15T13:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><hr>
<p>类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板<br>对象：是类的一个实例，如大客车；则是一个一个具体的对象，各个实例拥有的数据相互独立，互不影响<br>范例说明：汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来</p>
<p>方法：人会走，会思考，定义一个类的各个功能,类中定义的函数<br>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据<br>消息传递：狗叫了，人听见了，就叫通信</p>
<p>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）,狗都四条腿走路<br>封装：人不能引用狗的特性，比如四条腿走路<br>多态性：一个叫的功能，可能是低吼，也也可能是大声叫<br>抽象性：简单复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义<br>类方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写</p>
<p>静态字段：在class中直接定义的字段，直接通过class去获取，也可通过实例来访问，如 value = “abc”<br>动态字段：在class中对象中定义的字段，通过class的实例来访问，不能通过class直接访问，如在init函数后定义的字段<br>静态方法：在类中直接定义，没有self参数，同时使用staticmethod装饰器装饰，访问时直接通过class访问</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    name = <span class="string">"静态字段"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></div><div class="line">        self.Name = name</div><div class="line">        self.Age = age</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.Name + <span class="string">"正在跑步"</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"静态方法"</span></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run2</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"类方法"</span></div><div class="line"><span class="meta">    @property    #转换为特性，直接以属性的形式访问</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.Name</div><div class="line"></div><div class="line">person1 = Person(<span class="string">'人1'</span>,<span class="number">20</span>)</div><div class="line"><span class="comment"># 访问动态字段</span></div><div class="line"><span class="keyword">print</span> person1.Name</div><div class="line"><span class="comment"># 访问动态方法</span></div><div class="line">person1.run()</div><div class="line"><span class="comment"># 访问静态字段</span></div><div class="line"><span class="keyword">print</span> Person.name</div><div class="line"><span class="comment"># 访问静态方法</span></div><div class="line">Person.run1()</div><div class="line"><span class="comment"># 调用类方法</span></div><div class="line">Person.run2()</div><div class="line"><span class="comment"># property的访问形式,直接以属性的形式访问</span></div><div class="line">person1.Bar</div></pre></td></tr></table></figure>
<hr>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>@staticmethod ：类中的静态方法设置<br>@classmethod：类方法设置<br>@property ：将类中的方法转换为特性，直接以属性的形式访问</p>
<p>@staticmethod和@classmethod的作用与区别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@staticmethod和@classmethod都可以直接类名.方法名(),实例名.方法名()调用</div><div class="line">@staticmethod不需要表示自身对象的self和自身类的cls参数，和使用函数一样</div><div class="line">@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数</div></pre></td></tr></table></figure></p>
<p>python类的定义：</p>
<pre><code>使用class关键字定义一个类，并且类名的首字母要大写
当程序员需要创建的类型不能用简单类型表示时就需要创建类
类把需要的变量和函数组合在一起，这种包含也称之为“封装”
</code></pre><p>对象的创建：<br>创建对象的过程称之为实例化；当一个对象被创建后，包括三个方面的特性： 对象的句柄，属性和方法<br>句柄：用来区分不同的对象，如a，b<br>对象的属性和方法与类中的成员变量和成员函数对应</p>
<hr>
<h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><p>类由属性和方法组成，类的属性是对数据的封装，类的方法则是对类的行为的封装。类的属性按使用范围分为公有属性和私有属性，类的属性范围取决于属性的名称<br>公有属性：所谓公有属性就是在类中和类外调用的属性<br>私有属性：不能被类以外的函数调用（可以通过instance._classname_attribute方式访问，但只用于调试程序）<br>定义方式：以“__”双下划线开始的成员变量就是私有属性，否则是公有属性<br>私有属性通过内部方法调用，实现对数据的封装隐藏。<br>内置属性：由系统在定义类的时候默认添加的，由前后两个下划线构成<strong>dict</strong>，<strong>module</strong></p>
<hr>
<h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>和函数定义一样，但是需要self作为第一个参数<br>类的方法也分为：公有方法和私有方法<br>    私有方法：不能被外部的类和方法调用，私有方法的定义和私有属性都是一样的，在方法的前面加上“__”双下划线<br>    类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用（是继承的关系）<br>    静态方法：相当与“全局函数”，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义静态方法没有“self”语句；<br>    用于区分函数和类的方法（必须有一个self），self参数表示指向对象本身</p>
<p>内部类：<br>    所谓内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界;<br>    一般不赞同使用内部类，会使程序结构复杂，但是理解内部类有助于理解模块的调用</p>
<hr>
<h3 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h3><p>构造函数：用于初始化类的内部状态，python提供的构造函数是<strong>init</strong>();<br><strong>init</strong>()方法是可选的，如果不提供，python会给出一个默认的<strong>init</strong>方法<br><strong>init</strong>(self,name,score):  用于定义初始化类的属性，在实例时，可以将相关属性的值定义好<br>一般对数据的获取需要自定义的get和set方法</p>
<p>析构函数：用于释放对象占用的资源，python提供的析构函数是<strong>del</strong>();<br><strong>del</strong>()也是可选的，如果不提供，则python会在后台提供默认析构函数<br>如果要显式的调用析够函数，可以使用del关键字，方式如下：  del  对象名</p>
<p><strong>call</strong>()方法：通过实例化后，直接使用person1()来执行call方法</p>
<p><strong>str</strong>()方法：通过实例化后，直接print person1 就可以显示str中返回的内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></div><div class="line">        self.Name = name</div><div class="line">        self.Age = age</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.Name + <span class="string">"正在跑步"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"解释器要销毁了"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"这是call方法"</span></div><div class="line">person1 = Person(<span class="string">'人1'</span>,<span class="number">20</span>)</div><div class="line">person1()    <span class="comment">#可以通过实例化后，添加括号直接执行call方法</span></div><div class="line">person1.run()</div></pre></td></tr></table></figure>
<hr>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><pre><code>python采用垃圾回收机制来清理不再使用的对象；python提供gc模块释放不再使用的对象python采用“引用计数”的算法方式来处理回收，即：当某个对象在其作用域内不再被其他对象引用的时候，python会自动清除对象； 
python的函数collect()可以一次性收集所有待处理的对象（gc.collect()）
</code></pre><hr>
<h3 id="类的继承，多继承"><a href="#类的继承，多继承" class="headerlink" title="类的继承，多继承"></a>类的继承，多继承</h3><p>我们定义一个class时，可以从某个现有的class继承，新的class称之为子类（Subclass），而被继承的class的class称之为父类（Base class）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.Fname =<span class="string">"father"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Father func "</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Father func_public"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span><span class="params">(Father)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.Sname = <span class="string">"son"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Son bar_function"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span> <span class="comment">#重写父类的方法</span></div><div class="line">        Father.run(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">"xxxxxxxxxx"</span></div><div class="line"></div><div class="line">s1 = Son()</div><div class="line">s1.Func()</div><div class="line">s1.run()</div></pre></td></tr></table></figure>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"A class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"THis is A run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"B class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is B run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"C class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is C run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B,C)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"D class"</span></div><div class="line"></div><div class="line">c = D()</div><div class="line">c.run()</div></pre></td></tr></table></figure>
<p>在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以看着是父类的类型；但是反过来不行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolMember</span><span class="params">(object)</span>:</span><span class="comment">#基类</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,sex)</span>:</span></div><div class="line">    	self.name=name</div><div class="line">		self.age=age</div><div class="line">		self.sex=sex</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">    	<span class="keyword">print</span> <span class="string">"""--info of %s----</span></div><div class="line">        	name:%s</div><div class="line">			age:%s</div><div class="line">            sex:%s</div><div class="line">            """ %(self.name,self.name,self.age,self.sex)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,addr,tel)</span>:</span></div><div class="line">    	self.school_name=name</div><div class="line">        self.addr=addr</div><div class="line">        self.tel=tel</div><div class="line">        self.stu_list=[]</div><div class="line">        self.tech_list=[]</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchoolMember,School)</span>:</span><span class="comment">#子类，继承，多继承</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,sex,grade,school)</span>:</span></div><div class="line">    	SchoolMember.__init__(self,name,age,sex)<span class="comment">#初始化基类变量</span></div><div class="line">		self.grade=grade</div><div class="line">		self.school=school</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay_money</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">"-----%s is paying the tuition fee----"</span> %(self.name)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">		SchoolMember.tell(self)</div><div class="line">		<span class="keyword">print</span> <span class="string">"---------from school name : ---------%s"</span> %(self.school.school_name)</div><div class="line"></div><div class="line">school1 = School(<span class="string">'AAAA'</span>,<span class="string">'AAAA'</span>,<span class="number">999</span>)</div><div class="line">school2 = School(<span class="string">'BBBB'</span>,<span class="string">'BBBB'</span>,<span class="number">999</span>)</div><div class="line">s1 = Student(<span class="string">'a'</span>,<span class="number">23</span>,<span class="string">'M'</span>,<span class="string">'python'</span>,school1)</div><div class="line">s2 = Student(<span class="string">'b'</span>,<span class="number">24</span>,<span class="string">'M'</span>,<span class="string">'Linux'</span>,school2)</div><div class="line">s1.tell()</div><div class="line">s2.tell()</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>当子类和父类都存在相同的方法时，子类的方法会覆盖父类的方法，在代码运行时，总是会调用子类的相应方法<br>当父类中有某种方法，传入的任何类型只要是父类或者子类就会自动的调用相关父类或子类的方法，即多态</p>
<p>“开闭”原则：<br>对扩展开放：允许新增子类<br>对修改封闭：不需要修改依赖父类的相关函数</p>
<hr>
<h3 id="新式类和经典类"><a href="#新式类和经典类" class="headerlink" title="新式类和经典类"></a>新式类和经典类</h3><p>在定义时，有无object</p>
<p>区别：<br>1.在继承__init__函数写法<br>新式类：Father.__init__(self.name,self.sex)<br>新式类：super(Son,self).__init____(name,age,sex)</p>
<p>2.继承特性<br>经典类：深度优先<br>新式类：广度优先</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"A class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"THis is A run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"B class"</span></div><div class="line">        A.__init__(self)    <span class="comment">#新式类继承init函数，方法一</span></div><div class="line"><span class="comment">#         super(B, self).__init__() #新式类继承init函数，方法二</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"C class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is C run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B,C)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"D class"</span></div><div class="line">d = D()</div><div class="line">d.run()</div><div class="line"><span class="string">"""</span></div><div class="line">经典类(深度优先)：D-B-A-C</div><div class="line">结果：</div><div class="line">D class</div><div class="line">THis is A run Function</div><div class="line">新式类(广度优先)：</div><div class="line">结果： D-B-C-A</div><div class="line">D class</div><div class="line">This is C run Function</div><div class="line">"""</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板&lt;br&gt;对象：是类的一个实例，如大客车；则是一个一个
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="class" scheme="https://ttxsgoto.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>生成器、迭代器、反射器</title>
    <link href="https://ttxsgoto.github.io/2017/02/09/yield/"/>
    <id>https://ttxsgoto.github.io/2017/02/09/yield/</id>
    <published>2017-02-09T14:37:32.000Z</published>
    <updated>2017-02-15T13:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成器（generator"><a href="#生成器（generator" class="headerlink" title="生成器（generator)"></a>生成器（generator)</h3><p>一个函数调用时返回一个迭代器，那么这个就叫生成器（generator），如果函数中包含yield语法，那么这个函数就变成了生成器<br>return作用：在一个生成器中，如果没有return，则默认执行到函数完毕；如果遇到return，如果在执行过程中return则会抛出StopIteration终止迭代</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> n</div></pre></td></tr></table></figure>
<p><strong>yield：</strong> 每需要一个时，添加一个<br>简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p><strong>迭代器iter</strong> :存在内存中或者文件中，一次只能读取1个元素<br>是访问元素的一种方式，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完后结束</p>
<p>迭代器的优点：不需要事项准备好整个迭代过程中的所有元素，迭代器仅在迭代到某个元素时才计算该元素，在这之前或之后，元素可以不存在或者被销毁，该特点使它特别适合用于遍历一个大的文件或集合，如几个G的文件</p>
<p><strong>特点</strong></p>
<pre><code>1.访问值不需要关心迭代器内部结构，仅需通过next()方法来不断取下一个内容
2.不能随机访问集合中的某个值，只能从头到尾依次访问
3.访问到一半时不能回退
4.用于循环大的数据集合，节约内存
</code></pre><p><strong>方法</strong></p>
<pre><code>next():返回迭代器的下一个元素
__iter__:返回迭代器对象本身
</code></pre><p> <strong>定义一个迭代器</strong></p>
<pre><code>names = iter([&quot;a&quot;,&quot;b&quot;,&quot;d&quot;])
</code></pre><p><strong>使用</strong></p>
<pre><code>print (names.next())
</code></pre><h3 id="反射器"><a href="#反射器" class="headerlink" title="反射器"></a>反射器</h3><ul>
<li>hasattr(obj,attr)    这个方法用来检查obj中是否有一个名为attr的属性，返回一个布尔值</li>
<li>getattr(obj,attr)     这个方法将返回名为attr值得属性的值，如attr为’bar’，则返回obj.bar方法</li>
<li>setattr(obj,attr,val)    调用这个方法将给obj的名为attr的值得属性赋值为val，如果attr为’bar’，则相当于obj.bar=val</li>
</ul>
<p><strong>三种执行方式</strong></p>
<ol>
<li><p>以字符串的形式导入模块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">temp = <span class="string">'sys'</span></div><div class="line">model = __import__(temp)</div><div class="line"><span class="keyword">print</span> model.path</div><div class="line"> </div><div class="line"><span class="comment"># 结果：</span></div><div class="line">[<span class="string">'/Users/study/py01'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>以字符串的形式执行函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">temp = <span class="string">"mymodel"</span>  <span class="comment">#模块名称</span></div><div class="line">func = <span class="string">"myfunc"</span>   <span class="comment">#函数名称</span></div><div class="line">model = __import__(temp)</div><div class="line">func1 = getattr(model, func) <span class="comment">#到mymodel模块中找myfunc函数，如果有返回function</span></div><div class="line">func1(*args, **kwargs)    <span class="comment">#执行func1函数，即执行模块中的函数</span></div></pre></td></tr></table></figure>
</li>
<li><p>以字符串的形式判断类里面有没有对应的方法，根据输入的内容，执行类中对应的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"sayhi"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"info"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"do"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"run"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outside</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"outside other funciton"</span></div><div class="line"> </div><div class="line">m = MyClass()</div><div class="line">user_input  = raw_input(<span class="string">'Pls input function:'</span>)</div><div class="line"><span class="keyword">if</span> hasattr(m, user_input): <span class="comment">#判断有没有该方法</span></div><div class="line">    func = getattr(m, user_input) <span class="comment">#获得该方法</span></div><div class="line">    func()  <span class="comment">#执行方法</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Error!"</span></div><div class="line">    setattr(m, user_input, outside) <span class="comment">#设置方法</span></div><div class="line">    func = getattr(m,user_input)</div><div class="line">    func()</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;生成器（generator&quot;&gt;&lt;a href=&quot;#生成器（generator&quot; class=&quot;headerlink&quot; title=&quot;生成器（generator)&quot;&gt;&lt;/a&gt;生成器（generator)&lt;/h3&gt;&lt;p&gt;一个函数调用时返回一个迭代器，那么这个就叫生成器
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="yeild" scheme="https://ttxsgoto.github.io/tags/yeild/"/>
    
      <category term="generator" scheme="https://ttxsgoto.github.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令</title>
    <link href="https://ttxsgoto.github.io/2017/02/09/docker-command/"/>
    <id>https://ttxsgoto.github.io/2017/02/09/docker-command/</id>
    <published>2017-02-09T13:08:57.000Z</published>
    <updated>2017-02-09T15:26:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>主要记录Docker工作中，常使用命令.</strong></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">docker build -t name ./path(dockerfile)  #通过dockerfile来创建镜像</div><div class="line">    --rm=true  表示构建成功后，移除所有中间容器</div><div class="line">    --no-cache=false 表示在构建过程中不使用缓存</div><div class="line"></div><div class="line">docker run  -it -p 2222:22 --name 容器名称 镜像名称  #启动docker镜像</div><div class="line">    -it 交互式模式启动，前台可以看到</div><div class="line">    -d 后台模式启动</div><div class="line">    -p 2222:22指定端口映射</div><div class="line">    --name 容器名称</div><div class="line">    -v  host_dir:container_dir   宿主机和容器数据映射，数据同步</div><div class="line">    -e 传递环境变量  -e WORDPRESS_DB_HOST=x.x.x.x</div><div class="line">    --entrypoint=/bin/bash   将cmd命令的环境覆盖掉</div><div class="line">如：docker run -itd -p 80:80 --name nginx_php -v /root/html:/data/www/html nginx1.8</div><div class="line">docker ps  # 将处于run状态下的容器显示出来</div><div class="line">docker ps -a   #将所有docker状态的容器显示出来</div><div class="line">docker info     #查看docker信息</div><div class="line">docker images # 查看镜像</div><div class="line">docker pull   xxx  #下载镜像</div><div class="line">docker push  xxx  #将镜像推送到registry</div><div class="line">docker search xxxx #查询镜像</div><div class="line">docker diff     #列出容器内发生变化的文件和目录（A-Add，D-Delete，C-Change）</div><div class="line">docker commit  xxxx    abc/yyy  #把有修改的container提交到新的images中</div><div class="line">docker tag  原镜像名称     新名称    #给镜像重命名</div><div class="line">docker top container    #查看正在运行的容器中的进程的运行情况</div><div class="line">docker port container   #用于查看容器与主机之间的端口映射关系信息</div><div class="line">docker exec -it  container_id(base(名称)) /bin/bash    #进入docker容器里面</div><div class="line">docker stop b1430f1a3daa    #停止容器运行</div><div class="line">Ctrl +p +q                         #进入容器后，从终端退出容器</div><div class="line">docker rm  -f 容器名称   #删除容器，-f强制删除</div><div class="line">docker rmi  image  #移除一个或多个镜像</div><div class="line">docker inspect  #查看镜像或容器的底层详细信息</div><div class="line">docker inspect -f &#123;&#123;.NetworkSettings.IPAddress&#125;&#125;  xxxxx   -f #查看特定信息</div><div class="line">docker ps -qa  # 列出所有的容器(含沉睡镜像)的容器ID号</div><div class="line">docker rm `docker ps -qa` 将沉睡的容器删除</div></pre></td></tr></table></figure>
<h3 id="存储相关命令"><a href="#存储相关命令" class="headerlink" title="存储相关命令"></a>存储相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker save -o ubuntu_14.04.tar ubuntu:14.04   #存出镜像</div><div class="line">docker load &lt; ubuntu_14.04.tar   #载入镜像，导入相关的元数据（包括标签等）</div><div class="line">docker export ID(7691a814370e) &gt;ubuntu.tar   #导出容器，导出容器快照到本地</div><div class="line">docker import             #导入容器快照，可以导入远程文件、本地文件和目录，使用http的url从远程位置导入，本地或目录的导入需要使用-参数</div><div class="line">如：docker import http://xxx.yyy.com/ext.tar.gz  xxx/yyy  || docker import - ubuntu:14.04</div></pre></td></tr></table></figure>
<h3 id="日志相关命令"><a href="#日志相关命令" class="headerlink" title="日志相关命令"></a>日志相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker events     #打印容器实时的系统事件</div><div class="line">docker history  images    #打印指定image的每层image命令行的历史记录</div><div class="line">docker logs container  #批量打印出容器中进程的运行日志</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;主要记录Docker工作中，常使用命令.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="Docker" scheme="https://ttxsgoto.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>docker—网络模式</title>
    <link href="https://ttxsgoto.github.io/2017/02/08/docker_network/"/>
    <id>https://ttxsgoto.github.io/2017/02/08/docker_network/</id>
    <published>2017-02-08T14:05:33.000Z</published>
    <updated>2017-02-08T14:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker网络实现原理"><a href="#Docker网络实现原理" class="headerlink" title="Docker网络实现原理"></a>Docker网络实现原理</h3><p>Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。 Linux 通过在内核中进 行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多；Docker 容器网络利用此技术，它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通 （这样的一对接口叫做 veth pair ）</p>
<p>Docker 创建一个容器的时候，会执行如下操作：</p>
<ul>
<li>创建一对虚拟接口，分别放到本地主机和新容器中； </li>
<li>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethf9； </li>
<li>容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的名字空间可见； </li>
<li>从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethf9。 </li>
</ul>
<p>完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络</p>
<p>网络模式需要开启linux系统转发功能，查看linux系统中是否开启转发功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sysctl net.ipv4.ip_forward</div><div class="line">net.ipv4.ip_forward = 1</div><div class="line"># 设置：sysctl -w  net.ipv4.ip_forward=1</div></pre></td></tr></table></figure></p>
<h3 id="几种网络模式"><a href="#几种网络模式" class="headerlink" title="几种网络模式"></a>几种网络模式</h3><h4 id="nat"><a href="#nat" class="headerlink" title="nat"></a>nat</h4><p>–net=bridge (默认的网桥)，Docker通过宿主机的网桥(docker0)来连通内部和宿主机的网络，实现了容器与宿主机和外界之间的网络通信<br><img src="https://ttxsgoto.github.io/img/docker_network/1.png" alt="nat"></p>
<p>Bridge桥接模式的实现步骤主要如下：</p>
<p>（1）Docker Daemon利用veth pair技术，在宿主机上创建两个虚拟网络接口设备，假设为veth0和veth1。而veth pair技术的特性可以保证无论哪一个veth接收到网络报文，都会将报文传输给另一方。</p>
<p>（2）Docker Daemon将veth0附加到Docker Daemon创建的docker0网桥上。保证宿主机的网络报文可以发往veth0。</p>
<p>（3）Docker Daemon将veth1添加到Docker Container所属的namespace下，并被改名为eth0。如此一来，保证宿主机的网络报文若发往veth0，则立即会被eth0接收，实现宿主机到Docker Container网络的联通性；同时，也保证Docker Container单独使用eth0，实现容器网络环境的隔离性。</p>
<p>同时Docker采用NAT（Network Address Translation，网络地址转换）的方式(可自行查询实现原理)，让宿主机以外的世界可以主动将网络报文发送至容器内部。</p>
<p>通过Bridger网桥模式实现：</p>
<p>（1）容器拥有独立、隔离的网络栈</p>
<p>（2）容器和宿主机以外的世界通过NAT建立通信</p>
<h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p>–net=host (告诉docker不要将容器网络放在隔离的名字容器中，即不要容器化容器内的网络，该模式下的Docker Container和host宿主机共享同一个网络namespace，即container和宿主机一样，使用宿主机的eth0)<br><img src="https://ttxsgoto.github.io/img/docker_network/2.png" alt="host"></p>
<p>Docker Container的host网络模式在实现过程中，由于不需要额外的网桥以及虚拟网卡，故不会涉及docker0以及veth pair。父进程在创建子进程时，如果不使用CLONE_NEWNET这个参数标志，那么创建出的子进程会与父 进程共享同一个网络namespace。Docker就是采用了这个简单的原理，在创建进程启动容器的过程中，没有传入CLONE_NEWNET参数标 志，实现Docker Container与宿主机共享同一个网络环境，即实现host网络模式。</p>
<p>Docker Container的网络模式中，host模式是bridge桥接模式很好的补充。采用host模式的Docker Container，可以直接使用宿主机的IP地址与外界进行通信，若宿主机的eth0是一个公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换。当然，有这样的方便，肯定会损失部分其他的特性，最明显的是Docker Container网络环境隔离性的弱化，即容器不再拥有隔离、独立的网络栈。另外，使用host模式的Docker Container虽然可以让容器内部的服务和传统情况无差别、无改造的使用，但是由于网络隔离性的弱化，该容器会与宿主机共享竞争网络栈的使用；另外，容器内部将不再拥有所有的端口资源，原因是部分端口资源已经被宿主机本身的服务占用，还有部分端口已经用以bridge网络模式容器的端口映射。</p>
<h4 id="Other-container"><a href="#Other-container" class="headerlink" title="Other container"></a>Other container</h4><p>–net=container:NAME_or_ID  (让docker将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP地址和端口等网络资源，两者进程可以直接通过lo 环回接口通信)<br><img src="https://ttxsgoto.github.io/img/docker_network/3.png" alt="other"></p>
<p>上图右侧的Docker Container即采用了other container网络模式，它能使用的网络环境即为左侧Docker Container brdige桥接模式下的网络</p>
<p>Docker Container的other container网络模式在实现过程中，不涉及网桥，同样也不需要创建虚拟网卡veth pair。</p>
<p>完成other container网络模式的创建只需要两个步骤：</p>
<p>(1) 查找other container（即需要被共享网络环境的容器）的网络namespace；</p>
<p>(2) 将新创建的Docker Container（也是需要共享其他网络的容器）的namespace，使用other container的namespace<br>在这种模式下的Docker Container可以通过localhost来访问namespace下的其他容器，传输效率较高。虽然多个容器共享网络环境，但是多个容器形成的整体依然与宿主机以及其他容器形成网络隔离。另外，这种模式还节约了一定数量的网络资源。但是需要注意的是，它并没有改善容器与宿主机以外世界通信的情况。</p>
<h4 id="none"><a href="#none" class="headerlink" title="none"></a>none</h4><p>–net=none   (让Docker将新容器放到隔离的网络栈中，但不进行网络配置，之后用户可以自己进行配置，容器内部只能使用loopback网络设备，不会再有其他的网络资源)</p>
<h3 id="网络相关的命令"><a href="#网络相关的命令" class="headerlink" title="网络相关的命令"></a>网络相关的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-b BRIDGE or --bridge=BRIDGE --指定容器挂载的网桥</div><div class="line">--bip=CIDR --定制 docker0 的掩码</div><div class="line">-H SOCKET... or --host=SOCKET... --Docker 服务端接收命令的通道</div><div class="line">--icc=true|false --是否支持容器之间进行通信</div><div class="line">--ip-forward=true|false --容器之间的通信</div><div class="line">--iptables=true|false --禁止 Docker 添加 iptables 规则</div><div class="line">--mtu=BYTES --容器网络中的 MTU</div></pre></td></tr></table></figure>
<p>上述网络模式理论主要来自链接：</p>
<p><a href="http://www.infoq.com/cn/articles/docker-source-code-analysis-part7" target="_blank" rel="external">http://www.infoq.com/cn/articles/docker-source-code-analysis-part7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker网络实现原理&quot;&gt;&lt;a href=&quot;#Docker网络实现原理&quot; class=&quot;headerlink&quot; title=&quot;Docker网络实现原理&quot;&gt;&lt;/a&gt;Docker网络实现原理&lt;/h3&gt;&lt;p&gt;Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势
    
    </summary>
    
      <category term="Docker" scheme="https://ttxsgoto.github.io/categories/Docker/"/>
    
    
      <category term="Network" scheme="https://ttxsgoto.github.io/tags/Network/"/>
    
  </entry>
  
</feed>
