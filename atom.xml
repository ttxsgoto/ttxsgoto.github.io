<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2017-03-14T14:24:45.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Celery异步</title>
    <link href="https://ttxsgoto.github.io/2017/03/12/celery/"/>
    <id>https://ttxsgoto.github.io/2017/03/12/celery/</id>
    <published>2017-03-12T05:18:43.000Z</published>
    <updated>2017-03-14T14:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>可以在 Request-Response 循环之外执行的操作：发送邮件、推送消息</li>
<li>耗时的操作：调用第三方 API（前端通过 AJAX 展示进度和结果）</li>
<li>周期性任务：取代 crontab</li>
</ul>
<h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p><img src="https://ttxsgoto.github.io/img/celery/celery01.png" alt=""><br>Celery的架构由三部分组成：</p>
<pre><code>消息中间件（message broker）：Celery本身不提供消息服务是任务调度队列，通常以服务形式出现，可以方便的和第三方提供的消息中间件集成；包括，RabbitMQ, Redis, MongoDB；
任务执行单元（worker）：是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中；
任务执行结果存储（task result store）：用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache
</code></pre><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 参数配置</div><div class="line">    BROKER_URL = &apos;redis://127.0.0.1:6379&apos;               # 指定 Broker</div><div class="line">    CELERY_RESULT_BACKEND = &apos;redis://127.0.0.1:6379/0&apos;  # 指定 Backend</div><div class="line">    CELERY_TIMEZONE = &apos;Asia/Shanghai&apos;                   # 指定时区，默认是 UTC</div><div class="line"></div><div class="line">    CELERY_IMPORTS = (                                  # 指定导入的任务模块</div><div class="line">    &apos;celery_app.task1&apos;,</div><div class="line">    &apos;celery_app.task2&apos;</div><div class="line">)</div><div class="line">    app.config_from_object(&apos;celeryconfig&apos;)  #将配置导入到celery对象中</div></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>celery worker -A tasks –loglevel=info –concurrency=5<br>参数”-A”指定了Celery实例的位置，本例是在”tasks.py”中，celery命令会自动在该文件中寻找Celery对象实例。建议指定Celery对象名称，如”-A tasks.app”。<br>参数”loglevel”指定了日志等级，也可以不加，默认为warning。也可以使用 -l info来表示<br>参数”concurrency”指定最大并发数，默认为CPU核数<br>delay():方法将任务发送到消息队列中，由之前启动worker执行，这时Python控制台上只会返回”AsyncResult”信息。如果你看下之前职程的启动窗口，你会看到多了条日志”Received task: celery_app.task1.add[bec9a333-3af7-43ab-b93d-4a2ae6779058]  ETA:[2017-03-12 12:57:08.630629+08:00]”<br>“delay()”方法，它其实是对”apply_async()”方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用”apply_async()”，其常用的参数有：</p>
<pre><code>countdown: 指定多少秒后任务才被执行
eta: 指定任务被调度的时间，参数类型是datetime
expires: 任务过期时间，参数类型可以是int（秒），也可以是datetime
retry: 任务发送失败的重试次数
priority: 任务优先级，范围是0-9
serializer: 参数和返回值的序列化方式
</code></pre><p>result = add.delay(2,5)<br>result.ready()  #True,用于检查任务执行是否成功<br>result.get(timeout=1)   #7,get方法用于获取任务结果</p>
<p>delay() 方法是 apply_async() 方法的简写<br>apply_async(args=(), kwargs={}, route_name=None, **options)<br>这个调用会把 add 操作放入到队列里，然后立即返回一个 AsyncResult 对象<br>当函数被@app.task装饰后，就成为可被 Celery 调度的任务</p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><h4 id="异步执行任务"><a href="#异步执行任务" class="headerlink" title="异步执行任务"></a>异步执行任务</h4><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- celery_app</div><div class="line">    - __init__.py</div><div class="line">    - celeryconfig.py</div><div class="line">    - init.py</div><div class="line">    - task1.py</div><div class="line">    - task2.py</div><div class="line">    - client.py</div></pre></td></tr></table></figure></p>
<p>celeryconfig.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379'</span>               <span class="comment"># 指定 Broker</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/0'</span>  <span class="comment"># 指定 Backend</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span>                   <span class="comment"># 指定时区，默认是 UTC</span></div><div class="line"> </div><div class="line">CELERY_IMPORTS = (                                  <span class="comment"># 指定导入的任务模块</span></div><div class="line">    <span class="string">'celery_app.task1'</span>,</div><div class="line">    <span class="string">'celery_app.task2'</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>init.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Describe:异步执行</div><div class="line">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class="line">cd /train/celery_demo &amp;&amp; celery worker -A celery_app.init --loglevel=INFO</div><div class="line"></div><div class="line">'''python</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">ttxsgoto = Celery(<span class="string">"ttxsgoto"</span>)   <span class="comment">#创建一个celery任务</span></div><div class="line"> </div><div class="line">ttxsgoto.config_from_object(<span class="string">'celery_app.celeryconfig'</span>)  <span class="comment">#将配置导入到celery对象中</span></div></pre></td></tr></table></figure></p>
<p>task1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>task2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> x * y</div></pre></td></tr></table></figure></p>
<p>client.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> task1</div><div class="line"><span class="keyword">import</span> task2</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"异步执行开始:"</span>,time.ctime()</div><div class="line">task1.add.apply_async(args=(<span class="number">2</span>,<span class="number">8</span>), countdown=<span class="number">5</span>) <span class="comment"># 5 秒后执行任务</span></div><div class="line">task2.multiply.delay(<span class="number">3</span>,<span class="number">7</span>)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"end!!!!!"</span></div><div class="line"><span class="keyword">print</span> time.ctime()</div></pre></td></tr></table></figure></p>
<p>启动celery并服务，并执行client.py脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">celery worker -A celery_app.init  -l info</div><div class="line">python client.py</div></pre></td></tr></table></figure></p>
<h4 id="周期执行任务"><a href="#周期执行任务" class="headerlink" title="周期执行任务"></a>周期执行任务</h4><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- celery_app_cron</div><div class="line">    - __init__.py</div><div class="line">    - celeryconfig.py</div><div class="line">    - init.py</div><div class="line">    - task1.py</div><div class="line">    - task2.py</div></pre></td></tr></table></figure></p>
<p>celeryconfig.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</div><div class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379'</span>               <span class="comment"># 指定 Broker</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/0'</span>  <span class="comment"># 指定 Backend</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span>                   <span class="comment"># 指定时区，默认是 UTC</span></div><div class="line"> </div><div class="line">CELERY_IMPORTS = (                                  <span class="comment"># 指定导入的任务模块</span></div><div class="line">    <span class="string">'celery_app_cron.task1'</span>,</div><div class="line">    <span class="string">'celery_app_cron.task2'</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">#ttxsgoto = Celery("cron",broker= BROKER_URL, backend= CELERY_RESULT_BACKEND)</span></div><div class="line"> </div><div class="line"><span class="comment">#定时任务设置</span></div><div class="line">CELERYBEAT_SCHEDULE = &#123;</div><div class="line">    <span class="string">'add-every-30s'</span>:&#123;</div><div class="line">        <span class="string">'task'</span>:<span class="string">'celery_app_cron.task1.add'</span>,         <span class="comment">#任务执行的函数</span></div><div class="line">        <span class="string">'schedule'</span>:timedelta(seconds=<span class="number">30</span>),           <span class="comment"># 每30s执行一次</span></div><div class="line">        <span class="string">'args'</span>:(<span class="number">3</span>,<span class="number">12</span>)                                <span class="comment"># 任务函数参数</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">'multiply-erverday-7-10'</span>:&#123;</div><div class="line">        <span class="string">'task'</span>:<span class="string">'celery_app_cron.task2.multiply'</span>,</div><div class="line">        <span class="comment">#'schedule':crontab(hour=7,minute=10),      #cron计划任务,每天7:10进行</span></div><div class="line">        <span class="string">'args'</span>:(<span class="number">3</span>,<span class="number">15</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>init.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Describe:定时任务</div><div class="line">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class="line">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init worker --loglevel=INFO</div><div class="line">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init beat</div><div class="line">放在一起执行:</div><div class="line">cd /train/celery_demo &amp;&amp; celery -B -A celery_app_cron.init worker --loglevel=INFO</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"> </div><div class="line">ttxsgoto = Celery(<span class="string">"cron"</span>)</div><div class="line">ttxsgoto.config_from_object(<span class="string">'celery_app_cron.celeryconfig'</span>)</div></pre></td></tr></table></figure></p>
<p>task1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> .init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>task2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> init <span class="keyword">import</span> ttxsgoto</div><div class="line"> </div><div class="line"><span class="meta">@ttxsgoto.task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> x * y</div></pre></td></tr></table></figure></p>
<p>启动celery服务，可以看到执行结果，30s运行一次task1.add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery worker -B -A celery_app_cron.init -l info</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="celery" scheme="https://ttxsgoto.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>django分页</title>
    <link href="https://ttxsgoto.github.io/2017/03/08/django-page/"/>
    <id>https://ttxsgoto.github.io/2017/03/08/django-page/</id>
    <published>2017-03-08T13:57:42.000Z</published>
    <updated>2017-03-09T01:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Django 项目中使用自带的分页模块，记录如下</p>
<p><strong>相关说明</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</div><div class="line"> </div><div class="line">objects = [<span class="string">'abc'</span>,<span class="string">'bcd'</span>,<span class="string">'cde'</span>,<span class="string">'def'</span>,<span class="string">'efg'</span>,<span class="string">'fgh'</span>]</div><div class="line">p = Paginator(objects, <span class="number">2</span>)<span class="comment">#表示传入数据集合，2 表示每页存放的数据个数</span></div><div class="line">p.cout <span class="comment">#6 表示数据总量</span></div><div class="line">p.num_pages<span class="comment">#3 表示总页数</span></div><div class="line">p.per_page<span class="comment">#2 表示每页的数量</span></div><div class="line">p.object_list<span class="comment"># ['abc','bcd','cde','def','efg','fgh']  所有数据列表</span></div><div class="line">p.page_range  <span class="comment">#[1, 2, 3]   表示页数</span></div><div class="line">p1 = p.page(<span class="number">1</span>)<span class="comment">#获取第一页的对象</span></div><div class="line">p1.object_list<span class="comment">#['abc', 'bcd'] 该页上的数据</span></div><div class="line">p1.has_next()<span class="comment">#True,判断该页是否有下一页</span></div><div class="line">p1.has_previous()<span class="comment">#False,判断该页是否有上一页</span></div><div class="line">p1.has_other_pages() <span class="comment">#判断该页是否有上或者下页</span></div><div class="line">p1.start_index()<span class="comment"># 1 p1开始的索引值</span></div><div class="line">p1.end_index()<span class="comment">#2 p1结束的索引值</span></div><div class="line">p1.next_page_number(）<span class="comment"># #返回下一页的页码，如果下一页不存在，抛出InvalidPage异常</span></div><div class="line">p1.previous_page_number()<span class="comment">#返回前一页的页码，如果上一页不存在，抛出InvalidPag异常</span></div><div class="line">p1.paginator<span class="comment">#&lt;django.core.paginator.Paginator object at 0x7f39989b2bd0&gt; 相关paginator的对象</span></div></pre></td></tr></table></figure></p>
<p><strong>Django中使用分页</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</div><div class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, InvalidPage, PageNotAnInteger</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">device_status</span><span class="params">(request)</span>:</span></div><div class="line">    All_page_info = Device_status.objects.all()</div><div class="line">    DataCount,page,All_page_info = All_in_one(request,All_page_info)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> my_render(<span class="string">"serverinfo/device_status.html"</span>,locals(),request)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_render</span><span class="params">(template,data,request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render_to_response(template, data, context_instance=RequestContext(request))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpage_id</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    传递前端page过来的值，如果没有设置为1</div><div class="line">    """</div><div class="line">    page = request.GET.get(<span class="string">"page"</span>,<span class="string">""</span>)</div><div class="line">    <span class="keyword">if</span> page:</div><div class="line">        page = request.GET.get(<span class="string">"page"</span>,<span class="string">""</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        page = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> page</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpages</span><span class="params">(Data,page)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    处理分页函数</div><div class="line">    """</div><div class="line">    paginator = Paginator(list(Data),<span class="number">2</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Data = paginator.page(page)</div><div class="line">    <span class="keyword">except</span> PageNotAnInteger:</div><div class="line">        Data = paginator.page(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> EmptyPage:</div><div class="line">        Data = paginator.page(paginator.num_pages)</div><div class="line">    <span class="keyword">return</span> Data,page</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">All_in_one</span><span class="params">(request,All_page_info)</span>:</span></div><div class="line">    DataCount = len(All_page_info)</div><div class="line">    page = getpage_id(request)</div><div class="line">    All_page_info,page=getpages(All_page_info,page)</div><div class="line">    <span class="keyword">return</span> DataCount,page,All_page_info</div></pre></td></tr></table></figure></p>
<p><strong>templates中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">备注：paginator.html  //将以下模板导入需要添加分页功能的页面即可（&#123;% include &apos;paginator.html&apos; %&#125;）</div><div class="line">=========================</div><div class="line">&lt;span class=&quot;step-links&quot;&gt;</div><div class="line">   &#123;% if All_page_info.has_previous %&#125; &lt;!-- 是否有前一页 --&gt;</div><div class="line">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt; &lt;!-- 前一页的页码 --&gt;</div><div class="line">         &lt;/script&gt;</div><div class="line">   &#123;% endif %&#125;</div><div class="line">   &lt;span class=&quot;current&quot;&gt;</div><div class="line">       第 &#123;&#123; All_page_info.number &#125;&#125;页  总 &#123;&#123; All_page_info.paginator.num_pages &#125;&#125; 页  &lt;!-- 总页数 --&gt;</div><div class="line">   &lt;/span&gt;</div><div class="line">   &#123;% if All_page_info.has_next %&#125;</div><div class="line">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt; &lt;!-- 后一页的页码 --&gt;</div><div class="line">   &#123;% endif %&#125;</div><div class="line">&lt;/span&gt;</div><div class="line">&lt;span&gt;</div><div class="line">     &amp;nbsp;&amp;nbsp;共&#123;&#123;DataCount&#125;&#125;条记录</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<p><strong>效果展示</strong><br><img src="https://ttxsgoto.github.io/img/django/page.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Django 项目中使用自带的分页模块，记录如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关说明&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="分页" scheme="https://ttxsgoto.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>ConfigParser模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/07/ConfigParser/"/>
    <id>https://ttxsgoto.github.io/2017/03/07/ConfigParser/</id>
    <published>2017-03-07T13:57:05.000Z</published>
    <updated>2017-03-09T01:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>ConfigParser模块记录常用方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> ConfigParser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    基本的读取配置文件</div><div class="line">    -read(filename) 直接读取ini文件内容</div><div class="line">    -sections() 得到所有的section，并以列表的形式返回</div><div class="line">    -options(section) 得到该section的所有option</div><div class="line">    -items(section) 得到该section的所有键值对</div><div class="line">    -get(section,option) 得到section中option的值，返回为string类型</div><div class="line">    -getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数</div><div class="line">    基本的写入配置文件</div><div class="line">    -add_section(section) 添加一个新的section</div><div class="line">    -set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件</div><div class="line">    """</div><div class="line">    cf = ConfigParser.ConfigParser()</div><div class="line">    cf.read(<span class="string">'db.txt'</span>)</div><div class="line">    sec = cf.sections()                         <span class="comment">#获取所有sections的值</span></div><div class="line">    <span class="keyword">print</span> sec</div><div class="line">    opt = cf.options(<span class="string">'db1'</span>)                     <span class="comment">#获取指定sections的options</span></div><div class="line">    <span class="keyword">print</span> opt</div><div class="line">    val = cf.items(<span class="string">'db1'</span>)                       <span class="comment">#获取指定section的配置信息，为list</span></div><div class="line">    <span class="keyword">print</span> val,type(val)</div><div class="line">    val_str = cf.get(<span class="string">'db1'</span>, <span class="string">'db_host'</span>)          <span class="comment">#获取sections中option的值</span></div><div class="line">    <span class="keyword">print</span> val_str</div><div class="line">    cf.set(<span class="string">'db1'</span>,<span class="string">'db_host'</span>,<span class="string">'192.168.1.55'</span>)      <span class="comment">#设置某个option的值</span></div><div class="line">    cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        cf.add_section(<span class="string">'ttxsgoto'</span>)              <span class="comment">#添加一个section</span></div><div class="line">        cf.set(<span class="string">'ttxsgoto'</span>, <span class="string">'hostname'</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line">        cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    cf.remove_option(<span class="string">'ttxsgoto'</span>, <span class="string">'hostname'</span>)    <span class="comment">#删除option</span></div><div class="line">    cf.remove_section(<span class="string">'ttxsgoto'</span>)               <span class="comment">#删除section</span></div><div class="line">    cf.write(open(<span class="string">'db.txt'</span>,<span class="string">'w'</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.RawConfigParser()</div><div class="line">    config.add_section(<span class="string">'Section1'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'an_int'</span>,<span class="string">'15'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'a_bool'</span>,<span class="string">'true'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'a_float'</span>,<span class="string">'3.1415'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>, <span class="string">'baz'</span>, <span class="string">'fun'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>, <span class="string">'bar'</span>, <span class="string">'Python'</span>)</div><div class="line">    config.set(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="string">'%(bar)s is %(baz)s !'</span>)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'example.cfg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> configfile:</div><div class="line">        config.write(configfile)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.RawConfigParser()</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    a_float = config.getfloat(<span class="string">'Section1'</span>, <span class="string">'a_float'</span>)</div><div class="line">    an_int = config.getint(<span class="string">'Section1'</span>, <span class="string">'an_int'</span>)</div><div class="line">    <span class="keyword">print</span> a_float + an_int</div><div class="line">    <span class="keyword">if</span> config.getboolean(<span class="string">'Section1'</span>, <span class="string">'a_bool'</span>):</div><div class="line">        <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.ConfigParser()</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>, <span class="string">'foo'</span>, <span class="number">0</span>)  <span class="comment">#0 默认，显示定义的字符串</span></div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="number">1</span>)    <span class="comment">#设置为1，显示原字符串</span></div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>,<span class="number">0</span>,&#123;<span class="string">'bar'</span>:<span class="string">'Document'</span>,<span class="string">'baz'</span>:<span class="string">'evil'</span>&#125;) <span class="comment">#设置section的对应的options</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read2</span><span class="params">()</span>:</span></div><div class="line">    config = ConfigParser.SafeConfigParser(&#123;<span class="string">'bar'</span>:<span class="string">'Life'</span>,<span class="string">'baz'</span>:<span class="string">'hard'</span>&#125;)</div><div class="line">    config.read(<span class="string">'example.cfg'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)  <span class="comment">#"Python is fun!"</span></div><div class="line">    config.remove_option(<span class="string">'Section1'</span>, <span class="string">'bar'</span>)</div><div class="line">    config.remove_option(<span class="string">'Section1'</span>,<span class="string">'baz'</span>)</div><div class="line">    <span class="keyword">print</span> config.get(<span class="string">'Section1'</span>,<span class="string">'foo'</span>)  <span class="comment">#"Life is hard!"</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ConfigParser模块记录常用方法&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="ConfigParser" scheme="https://ttxsgoto.github.io/tags/ConfigParser/"/>
    
  </entry>
  
  <entry>
    <title>logging模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/06/logging/"/>
    <id>https://ttxsgoto.github.io/2017/03/06/logging/</id>
    <published>2017-03-06T13:42:55.000Z</published>
    <updated>2017-03-07T13:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>logging为python模块提供状态、错误、信息输出的标准接口。<br>日志级别大小关系为：CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p>
<p>logging.basicConfig函数各参数说明：<br>filename: 指定日志文件名<br>filemode: 和file函数意义相同，指定日志文件的打开模式，’w’或’a’<br>format: 指定输出的格式和内容：</p>
<pre><code>%(levelno)s: 打印日志级别的数值
%(levelname)s: 打印日志级别名称
%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]
%(filename)s: 打印当前执行程序名
%(funcName)s: 打印日志的当前函数
%(lineno)d: 打印日志的当前行号
%(asctime)s: 打印日志的时间
%(thread)d: 打印线程ID
%(threadName)s: 打印线程名称
%(process)d: 打印进程ID
%(message)s: 打印日志信息
</code></pre><p>datefmt: 指定时间格式，同time.strftime()<br>level: 设置日志级别，默认为logging.WARNING</p>
<p>stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</p>
<p>记录日志信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logname = <span class="string">'log.log'</span></div><div class="line">logging.basicConfig(</div><div class="line">    level = logging.INFO,    <span class="comment">#定义记录大于或等于日志级别</span></div><div class="line">    format=<span class="string">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</div><div class="line">    filename=logname,</div><div class="line">    filemode=<span class="string">'a'</span>,)</div><div class="line">logging.warning(<span class="string">"log"</span>)</div></pre></td></tr></table></figure></p>
<p>将日志输出到文件，同时打印匹配的级别到屏幕上<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line">logname = <span class="string">'log.log'</span></div><div class="line">logging.basicConfig(</div><div class="line">    level = logging.INFO,    <span class="comment">#定义记录大于或等于日志级别</span></div><div class="line">    format=<span class="string">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</div><div class="line">    filename=logname,</div><div class="line">    filemode=<span class="string">'a'</span>,)</div><div class="line">console = logging.StreamHandler()</div><div class="line">console.setLevel(logging.INFO)    <span class="comment">#定义需要显示大于或等于日志级别</span></div><div class="line">formatter = logging.Formatter(<span class="string">'[%(levelname)s] [%(asctime)s]-- %(message)s'</span>)</div><div class="line">console.setFormatter(formatter)</div><div class="line">logging.getLogger(<span class="string">''</span>).addHandler(console)</div><div class="line">logging.warning(<span class="string">'log info'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;logging为python模块提供状态、错误、信息输出的标准接口。&lt;br&gt;日志级别大小关系为：CRITICAL &amp;gt; ERROR &amp;gt; WARNING &amp;gt; INFO &amp;gt; DEBUG &amp;gt; NOTSET&lt;/p&gt;
&lt;p&gt;logging.basicCon
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="logging" scheme="https://ttxsgoto.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>mongo日常笔记</title>
    <link href="https://ttxsgoto.github.io/2017/02/16/mongo/"/>
    <id>https://ttxsgoto.github.io/2017/02/16/mongo/</id>
    <published>2017-02-16T13:57:18.000Z</published>
    <updated>2017-02-16T14:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认证授权相关"><a href="#认证授权相关" class="headerlink" title="认证授权相关"></a>认证授权相关</h3><p>帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中</p>
<p><strong>认证登录说明</strong><br>超级用户：拥有最大权限，存储在admin数据库中，<br>数据库用户：存储在单个数据库中，最能访问对应的数据库<br>用户信息保存在db.system.users中</p>
<p><strong>开启认证方法</strong></p>
<ul>
<li>启动添加： –auth</li>
<li>配置文件：security.authorization: enabled</li>
</ul>
<p><strong>用户和权限的特性</strong></p>
<ol>
<li>数据库是由超级用户来创建的，一个数据库可以包含多个用户，一个用户只能在一个数据库下，不同数据库中的用户可以同名</li>
<li>如果在 admin 数据库中不存在用户，即使 mongod 启动时添加了 –auth 参数，此时不进行任何认证还是可以做任何操作</li>
<li>在 admin 数据库创建的用户具有超级权限，可以对 MongoDB 系统内的任何数据库的数据对象进行操作</li>
<li>特定数据库比如 test1 下的用户 test_user1，不能够访问其他数据库 test2，但是可以访问本数据库下其他用户创建的数据</li>
<li>不同数据库中同名的用户不能够登录其他数据库。比如数据库 test1 和 test2 都有用户 test_user，以 test_user 登录 test1 后,不能够登录到 test2 进行数据库操作</li>
</ol>
<h4 id="授权命令"><a href="#授权命令" class="headerlink" title="授权命令"></a>授权命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">use xxx;						#进入某库，创建某库</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;read&quot;,db:&quot;test&quot;&#125;]&#125;)	        #读</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto01&quot;,pwd:&quot;ttxsgoto01&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test&quot;&#125;]&#125;)	#读写</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;root&quot;,db:&quot;test&quot;&#125;]&#125;)	        #超级root权限</div><div class="line">db.system.users.remove(&#123;user:&quot;ttxsgoto&quot;&#125;)	#删除用户</div><div class="line">db.changeUserPassword(&apos;ttxsgoto&apos;,&apos;test&apos;); 	#修改密码的方法</div></pre></td></tr></table></figure>
<p><strong>具体权限说明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Built-In Roles（内置角色）：</div><div class="line">    1. 数据库用户角色：read、readWrite;</div><div class="line">    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；</div><div class="line">    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</div><div class="line">    4. 备份恢复角色：backup、restore；</div><div class="line">    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</div><div class="line">    6. 超级用户角色：root</div><div class="line">    7. 内部角色：__system</div><div class="line"></div><div class="line">具体角色：</div><div class="line">Read：允许用户读取指定数据库</div><div class="line">readWrite：允许用户读写指定数据库</div><div class="line">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</div><div class="line">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</div><div class="line">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</div><div class="line">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</div><div class="line">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</div><div class="line">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</div><div class="line">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</div><div class="line">root：只在admin数据库中可用。超级账号，超级权限</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 在admin库中</div><div class="line">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test01&quot;&#125;,&#123;role:&quot;readWrite&quot;,db:&quot;test02&quot;&#125;]&#125;)	#在admin库下创建test01，test02库的账号</div><div class="line"></div><div class="line">在这种情况下，不能直接在对应的库中登录验证，而应该在对应的这个库中进行认证后，在切换到其他库中</div><div class="line">use admin</div><div class="line">db.auth(&apos;ttxsgoto02&apos;,&apos;ttxsgoto02&apos;)</div><div class="line">use test02；</div></pre></td></tr></table></figure>
<h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line">mongo</div><div class="line">use admin</div><div class="line">db.auth(&quot;admin&quot;,&quot;abc&quot;)</div><div class="line">方法二：</div><div class="line">mongo -u admin -p admin --authenticationDatabase admin</div></pre></td></tr></table></figure>
<h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mongo 127.0.0.1/admin -uadmin -p&apos;admin&apos;		#连接mongo数据库</div><div class="line">use admin;			#进入数据库</div><div class="line">show users;			#查看当前库下的用户</div><div class="line">show collections/tables;        #查看当前库中的collections</div><div class="line">db.getCollectionNames();		#得到当前db的所有集合</div><div class="line">db.auth(&apos;ttxsgoto&apos;,&apos;ttxsgoto&apos;)	#登录验证</div><div class="line">db.getName()			#查看当前使用的数据库</div><div class="line">db.stats()			#查看当前db状态</div><div class="line">db.getMongo();			#查看当前db连接机器的地址</div><div class="line">db.abc.find();	                #查看集合中的所有数据</div><div class="line">db 		                #查看当前所在的数据库</div><div class="line">db.system.users.find().pretty()	#在admin库中查看所有账号</div><div class="line">db.getMongo();			#查看当前db连接机器的地址</div><div class="line">db.repairDatabase()		#修复当前数据库</div><div class="line">db.getCollectionNames()		#得到当前db的所有集合</div><div class="line">db.printCollectionStats()	#显示当前db所有聚集索引的状态</div></pre></td></tr></table></figure>
<h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 插入集合</div><div class="line">content=&#123;name:&quot;xxxx&quot;,sex:&quot;m&quot;&#125;</div><div class="line">db.collections.insert(content)</div><div class="line">db.createCollection(&quot;collName&quot;, &#123;size: 20, capped: 5, max: 100&#125;)	#创建一个集合</div><div class="line">db.getCollection(&quot;account&quot;)		#得到集合名称</div><div class="line"># 查询：</div><div class="line">db.inventory.find();</div><div class="line">db.foo.find()		#对当前数据库中的foo集合进行数据查找，所有数据</div><div class="line">db.foo.find(&#123;a:1&#125;)	#对当前数据库中的foo集合中条件包含a=1的项进行查询</div><div class="line"># 删除：</div><div class="line">db.dropDatabase()	#删除当前使用的数据库</div></pre></td></tr></table></figure>
<h4 id="备份相关"><a href="#备份相关" class="headerlink" title="备份相关"></a>备份相关</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">mongoimport(导入)/mongoexport(导出)：(将collection导出为json格式或csv格式)</div><div class="line">mongoexport -d test -c t1 -o t1.dat	#导出json格式</div><div class="line">-c	#指明导出的集合</div><div class="line">-d	#使用库</div><div class="line">mongoexport -d test -c t1 -csv -f num -o t1.dat	#导出csv格式</div><div class="line">-csv	#指明导出csv格式</div><div class="line">-f	#指明需要导出哪些列</div><div class="line">mongoimport -d test -c t1 -file t1.dat				#还原</div><div class="line">mongoimport -d test -c t1 -type csv --headerline -file t1.dat	#还原csv格式的数据</div><div class="line">--headerline	#指明不导入第一行，因为第一行为列名</div><div class="line">mongodump/mongorestore:（整库备份还原,库级别操作,先执行查询动作然后把所有查询结果写入到硬盘中，但在内存中的数据未写入磁盘中）</div><div class="line">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx  -d test -o /bak/mongodump	#导出</div><div class="line">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx	-o /bak/allmongobak	#导出所有</div><div class="line">-h ip</div><div class="line">--port port</div><div class="line">-u user</div><div class="line">-p password</div><div class="line">-d database</div><div class="line">-c collection</div><div class="line">-o outfile</div><div class="line">mongorestore -h IP  --port -u user -p password 	-d test  --drop	/bak/mongodump/*	#恢复</div><div class="line">--drop	#恢复前先删除所有记录</div><div class="line">--noIndexRestore	#不还原索引</div><div class="line">例子说明</div><div class="line"># 备份</div><div class="line">mongoexport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o collection.json</div><div class="line"></div><div class="line">mongodump -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o 1202.dat</div><div class="line"># 还原</div><div class="line">mongorestore -u root -p root --authenticationDatabase admin -d database_20161202 --noIndexRestore --drop 1202.dat/collection</div><div class="line">mongoimport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database_20161202 -c collection  --file  collection.json</div></pre></td></tr></table></figure>
<p><strong>库表级备份还原的区别:</strong><br>mongorestore和mongodump提供的是对mongo数据库的整个数据库的恢复和备份，而mongoimport和mongoexport则是提供更细粒度的collection级别的数据导入和导出。两者的粒度不同，mongoimport和mongoexport粒度更细，相对来说，更加灵活。其次，mongoimport和mongoexport只是将集合中的数据导出和导入，但是没有对数据库中的其它成分进行备份（比如索引），而mongorestore和mongodump则是对数据库中的所有成分（包括索引等其它）进行恢复和备份。然而，这也导致了mongorestore和mongodump导出的文件比较大耗时较长，而mongoimport和mongoexport导出的文件比较小，速度比较快，而且格式较为灵活。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;认证授权相关&quot;&gt;&lt;a href=&quot;#认证授权相关&quot; class=&quot;headerlink&quot; title=&quot;认证授权相关&quot;&gt;&lt;/a&gt;认证授权相关&lt;/h3&gt;&lt;p&gt;帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="mongo" scheme="https://ttxsgoto.github.io/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>python-类</title>
    <link href="https://ttxsgoto.github.io/2017/02/15/class/"/>
    <id>https://ttxsgoto.github.io/2017/02/15/class/</id>
    <published>2017-02-15T12:40:38.000Z</published>
    <updated>2017-02-15T13:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><hr>
<p>类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板<br>对象：是类的一个实例，如大客车；则是一个一个具体的对象，各个实例拥有的数据相互独立，互不影响<br>范例说明：汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来</p>
<p>方法：人会走，会思考，定义一个类的各个功能,类中定义的函数<br>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据<br>消息传递：狗叫了，人听见了，就叫通信</p>
<p>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）,狗都四条腿走路<br>封装：人不能引用狗的特性，比如四条腿走路<br>多态性：一个叫的功能，可能是低吼，也也可能是大声叫<br>抽象性：简单复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义<br>类方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写</p>
<p>静态字段：在class中直接定义的字段，直接通过class去获取，也可通过实例来访问，如 value = “abc”<br>动态字段：在class中对象中定义的字段，通过class的实例来访问，不能通过class直接访问，如在init函数后定义的字段<br>静态方法：在类中直接定义，没有self参数，同时使用staticmethod装饰器装饰，访问时直接通过class访问</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    name = <span class="string">"静态字段"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></div><div class="line">        self.Name = name</div><div class="line">        self.Age = age</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.Name + <span class="string">"正在跑步"</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"静态方法"</span></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run2</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"类方法"</span></div><div class="line"><span class="meta">    @property    #转换为特性，直接以属性的形式访问</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.Name</div><div class="line"></div><div class="line">person1 = Person(<span class="string">'人1'</span>,<span class="number">20</span>)</div><div class="line"><span class="comment"># 访问动态字段</span></div><div class="line"><span class="keyword">print</span> person1.Name</div><div class="line"><span class="comment"># 访问动态方法</span></div><div class="line">person1.run()</div><div class="line"><span class="comment"># 访问静态字段</span></div><div class="line"><span class="keyword">print</span> Person.name</div><div class="line"><span class="comment"># 访问静态方法</span></div><div class="line">Person.run1()</div><div class="line"><span class="comment"># 调用类方法</span></div><div class="line">Person.run2()</div><div class="line"><span class="comment"># property的访问形式,直接以属性的形式访问</span></div><div class="line">person1.Bar</div></pre></td></tr></table></figure>
<hr>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>@staticmethod ：类中的静态方法设置<br>@classmethod：类方法设置<br>@property ：将类中的方法转换为特性，直接以属性的形式访问</p>
<p>@staticmethod和@classmethod的作用与区别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@staticmethod和@classmethod都可以直接类名.方法名(),实例名.方法名()调用</div><div class="line">@staticmethod不需要表示自身对象的self和自身类的cls参数，和使用函数一样</div><div class="line">@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数</div></pre></td></tr></table></figure></p>
<p>python类的定义：</p>
<pre><code>使用class关键字定义一个类，并且类名的首字母要大写
当程序员需要创建的类型不能用简单类型表示时就需要创建类
类把需要的变量和函数组合在一起，这种包含也称之为“封装”
</code></pre><p>对象的创建：<br>创建对象的过程称之为实例化；当一个对象被创建后，包括三个方面的特性： 对象的句柄，属性和方法<br>句柄：用来区分不同的对象，如a，b<br>对象的属性和方法与类中的成员变量和成员函数对应</p>
<hr>
<h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><p>类由属性和方法组成，类的属性是对数据的封装，类的方法则是对类的行为的封装。类的属性按使用范围分为公有属性和私有属性，类的属性范围取决于属性的名称<br>公有属性：所谓公有属性就是在类中和类外调用的属性<br>私有属性：不能被类以外的函数调用（可以通过instance._classname_attribute方式访问，但只用于调试程序）<br>定义方式：以“__”双下划线开始的成员变量就是私有属性，否则是公有属性<br>私有属性通过内部方法调用，实现对数据的封装隐藏。<br>内置属性：由系统在定义类的时候默认添加的，由前后两个下划线构成<strong>dict</strong>，<strong>module</strong></p>
<hr>
<h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>和函数定义一样，但是需要self作为第一个参数<br>类的方法也分为：公有方法和私有方法<br>    私有方法：不能被外部的类和方法调用，私有方法的定义和私有属性都是一样的，在方法的前面加上“__”双下划线<br>    类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用（是继承的关系）<br>    静态方法：相当与“全局函数”，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义静态方法没有“self”语句；<br>    用于区分函数和类的方法（必须有一个self），self参数表示指向对象本身</p>
<p>内部类：<br>    所谓内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界;<br>    一般不赞同使用内部类，会使程序结构复杂，但是理解内部类有助于理解模块的调用</p>
<hr>
<h3 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h3><p>构造函数：用于初始化类的内部状态，python提供的构造函数是<strong>init</strong>();<br><strong>init</strong>()方法是可选的，如果不提供，python会给出一个默认的<strong>init</strong>方法<br><strong>init</strong>(self,name,score):  用于定义初始化类的属性，在实例时，可以将相关属性的值定义好<br>一般对数据的获取需要自定义的get和set方法</p>
<p>析构函数：用于释放对象占用的资源，python提供的析构函数是<strong>del</strong>();<br><strong>del</strong>()也是可选的，如果不提供，则python会在后台提供默认析构函数<br>如果要显式的调用析够函数，可以使用del关键字，方式如下：  del  对象名</p>
<p><strong>call</strong>()方法：通过实例化后，直接使用person1()来执行call方法</p>
<p><strong>str</strong>()方法：通过实例化后，直接print person1 就可以显示str中返回的内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></div><div class="line">        self.Name = name</div><div class="line">        self.Age = age</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.Name + <span class="string">"正在跑步"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"解释器要销毁了"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"这是call方法"</span></div><div class="line">person1 = Person(<span class="string">'人1'</span>,<span class="number">20</span>)</div><div class="line">person1()    <span class="comment">#可以通过实例化后，添加括号直接执行call方法</span></div><div class="line">person1.run()</div></pre></td></tr></table></figure>
<hr>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><pre><code>python采用垃圾回收机制来清理不再使用的对象；python提供gc模块释放不再使用的对象python采用“引用计数”的算法方式来处理回收，即：当某个对象在其作用域内不再被其他对象引用的时候，python会自动清除对象； 
python的函数collect()可以一次性收集所有待处理的对象（gc.collect()）
</code></pre><hr>
<h3 id="类的继承，多继承"><a href="#类的继承，多继承" class="headerlink" title="类的继承，多继承"></a>类的继承，多继承</h3><p>我们定义一个class时，可以从某个现有的class继承，新的class称之为子类（Subclass），而被继承的class的class称之为父类（Base class）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.Fname =<span class="string">"father"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Father func "</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Father func_public"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span><span class="params">(Father)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.Sname = <span class="string">"son"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Son bar_function"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span> <span class="comment">#重写父类的方法</span></div><div class="line">        Father.run(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">"xxxxxxxxxx"</span></div><div class="line"></div><div class="line">s1 = Son()</div><div class="line">s1.Func()</div><div class="line">s1.run()</div></pre></td></tr></table></figure>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"A class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"THis is A run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"B class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is B run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"C class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is C run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B,C)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"D class"</span></div><div class="line"></div><div class="line">c = D()</div><div class="line">c.run()</div></pre></td></tr></table></figure>
<p>在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以看着是父类的类型；但是反过来不行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolMember</span><span class="params">(object)</span>:</span><span class="comment">#基类</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,sex)</span>:</span></div><div class="line">    	self.name=name</div><div class="line">		self.age=age</div><div class="line">		self.sex=sex</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">    	<span class="keyword">print</span> <span class="string">"""--info of %s----</span></div><div class="line">        	name:%s</div><div class="line">			age:%s</div><div class="line">            sex:%s</div><div class="line">            """ %(self.name,self.name,self.age,self.sex)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,addr,tel)</span>:</span></div><div class="line">    	self.school_name=name</div><div class="line">        self.addr=addr</div><div class="line">        self.tel=tel</div><div class="line">        self.stu_list=[]</div><div class="line">        self.tech_list=[]</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchoolMember,School)</span>:</span><span class="comment">#子类，继承，多继承</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,sex,grade,school)</span>:</span></div><div class="line">    	SchoolMember.__init__(self,name,age,sex)<span class="comment">#初始化基类变量</span></div><div class="line">		self.grade=grade</div><div class="line">		self.school=school</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay_money</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">"-----%s is paying the tuition fee----"</span> %(self.name)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">		SchoolMember.tell(self)</div><div class="line">		<span class="keyword">print</span> <span class="string">"---------from school name : ---------%s"</span> %(self.school.school_name)</div><div class="line"></div><div class="line">school1 = School(<span class="string">'AAAA'</span>,<span class="string">'AAAA'</span>,<span class="number">999</span>)</div><div class="line">school2 = School(<span class="string">'BBBB'</span>,<span class="string">'BBBB'</span>,<span class="number">999</span>)</div><div class="line">s1 = Student(<span class="string">'a'</span>,<span class="number">23</span>,<span class="string">'M'</span>,<span class="string">'python'</span>,school1)</div><div class="line">s2 = Student(<span class="string">'b'</span>,<span class="number">24</span>,<span class="string">'M'</span>,<span class="string">'Linux'</span>,school2)</div><div class="line">s1.tell()</div><div class="line">s2.tell()</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>当子类和父类都存在相同的方法时，子类的方法会覆盖父类的方法，在代码运行时，总是会调用子类的相应方法<br>当父类中有某种方法，传入的任何类型只要是父类或者子类就会自动的调用相关父类或子类的方法，即多态</p>
<p>“开闭”原则：<br>对扩展开放：允许新增子类<br>对修改封闭：不需要修改依赖父类的相关函数</p>
<hr>
<h3 id="新式类和经典类"><a href="#新式类和经典类" class="headerlink" title="新式类和经典类"></a>新式类和经典类</h3><p>在定义时，有无object</p>
<p>区别：<br>1.在继承__init__函数写法<br>新式类：Father.__init__(self.name,self.sex)<br>新式类：super(Son,self).__init____(name,age,sex)</p>
<p>2.继承特性<br>经典类：深度优先<br>新式类：广度优先</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"A class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"THis is A run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"B class"</span></div><div class="line">        A.__init__(self)    <span class="comment">#新式类继承init函数，方法一</span></div><div class="line"><span class="comment">#         super(B, self).__init__() #新式类继承init函数，方法二</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"C class"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is C run Function"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B,C)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"D class"</span></div><div class="line">d = D()</div><div class="line">d.run()</div><div class="line"><span class="string">"""</span></div><div class="line">经典类(深度优先)：D-B-A-C</div><div class="line">结果：</div><div class="line">D class</div><div class="line">THis is A run Function</div><div class="line">新式类(广度优先)：</div><div class="line">结果： D-B-C-A</div><div class="line">D class</div><div class="line">This is C run Function</div><div class="line">"""</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板&lt;br&gt;对象：是类的一个实例，如大客车；则是一个一个
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="class" scheme="https://ttxsgoto.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>生成器、迭代器、反射器</title>
    <link href="https://ttxsgoto.github.io/2017/02/09/yield/"/>
    <id>https://ttxsgoto.github.io/2017/02/09/yield/</id>
    <published>2017-02-09T14:37:32.000Z</published>
    <updated>2017-02-15T13:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成器（generator"><a href="#生成器（generator" class="headerlink" title="生成器（generator)"></a>生成器（generator)</h3><p>一个函数调用时返回一个迭代器，那么这个就叫生成器（generator），如果函数中包含yield语法，那么这个函数就变成了生成器<br>return作用：在一个生成器中，如果没有return，则默认执行到函数完毕；如果遇到return，如果在执行过程中return则会抛出StopIteration终止迭代</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> n</div></pre></td></tr></table></figure>
<p><strong>yield：</strong> 每需要一个时，添加一个<br>简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p><strong>迭代器iter</strong> :存在内存中或者文件中，一次只能读取1个元素<br>是访问元素的一种方式，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完后结束</p>
<p>迭代器的优点：不需要事项准备好整个迭代过程中的所有元素，迭代器仅在迭代到某个元素时才计算该元素，在这之前或之后，元素可以不存在或者被销毁，该特点使它特别适合用于遍历一个大的文件或集合，如几个G的文件</p>
<p><strong>特点</strong></p>
<pre><code>1.访问值不需要关心迭代器内部结构，仅需通过next()方法来不断取下一个内容
2.不能随机访问集合中的某个值，只能从头到尾依次访问
3.访问到一半时不能回退
4.用于循环大的数据集合，节约内存
</code></pre><p><strong>方法</strong></p>
<pre><code>next():返回迭代器的下一个元素
__iter__:返回迭代器对象本身
</code></pre><p> <strong>定义一个迭代器</strong></p>
<pre><code>names = iter([&quot;a&quot;,&quot;b&quot;,&quot;d&quot;])
</code></pre><p><strong>使用</strong></p>
<pre><code>print (names.next())
</code></pre><h3 id="反射器"><a href="#反射器" class="headerlink" title="反射器"></a>反射器</h3><ul>
<li>hasattr(obj,attr)    这个方法用来检查obj中是否有一个名为attr的属性，返回一个布尔值</li>
<li>getattr(obj,attr)     这个方法将返回名为attr值得属性的值，如attr为’bar’，则返回obj.bar方法</li>
<li>setattr(obj,attr,val)    调用这个方法将给obj的名为attr的值得属性赋值为val，如果attr为’bar’，则相当于obj.bar=val</li>
</ul>
<p><strong>三种执行方式</strong></p>
<ol>
<li><p>以字符串的形式导入模块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">temp = <span class="string">'sys'</span></div><div class="line">model = __import__(temp)</div><div class="line"><span class="keyword">print</span> model.path</div><div class="line"> </div><div class="line"><span class="comment"># 结果：</span></div><div class="line">[<span class="string">'/Users/study/py01'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>以字符串的形式执行函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">temp = <span class="string">"mymodel"</span>  <span class="comment">#模块名称</span></div><div class="line">func = <span class="string">"myfunc"</span>   <span class="comment">#函数名称</span></div><div class="line">model = __import__(temp)</div><div class="line">func1 = getattr(model, func) <span class="comment">#到mymodel模块中找myfunc函数，如果有返回function</span></div><div class="line">func1(*args, **kwargs)    <span class="comment">#执行func1函数，即执行模块中的函数</span></div></pre></td></tr></table></figure>
</li>
<li><p>以字符串的形式判断类里面有没有对应的方法，根据输入的内容，执行类中对应的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"sayhi"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"info"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"do"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"run"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outside</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"outside other funciton"</span></div><div class="line"> </div><div class="line">m = MyClass()</div><div class="line">user_input  = raw_input(<span class="string">'Pls input function:'</span>)</div><div class="line"><span class="keyword">if</span> hasattr(m, user_input): <span class="comment">#判断有没有该方法</span></div><div class="line">    func = getattr(m, user_input) <span class="comment">#获得该方法</span></div><div class="line">    func()  <span class="comment">#执行方法</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Error!"</span></div><div class="line">    setattr(m, user_input, outside) <span class="comment">#设置方法</span></div><div class="line">    func = getattr(m,user_input)</div><div class="line">    func()</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;生成器（generator&quot;&gt;&lt;a href=&quot;#生成器（generator&quot; class=&quot;headerlink&quot; title=&quot;生成器（generator)&quot;&gt;&lt;/a&gt;生成器（generator)&lt;/h3&gt;&lt;p&gt;一个函数调用时返回一个迭代器，那么这个就叫生成器
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="yeild" scheme="https://ttxsgoto.github.io/tags/yeild/"/>
    
      <category term="generator" scheme="https://ttxsgoto.github.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令</title>
    <link href="https://ttxsgoto.github.io/2017/02/09/docker-command/"/>
    <id>https://ttxsgoto.github.io/2017/02/09/docker-command/</id>
    <published>2017-02-09T13:08:57.000Z</published>
    <updated>2017-02-09T15:26:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>主要记录Docker工作中，常使用命令.</strong></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">docker build -t name ./path(dockerfile)  #通过dockerfile来创建镜像</div><div class="line">    --rm=true  表示构建成功后，移除所有中间容器</div><div class="line">    --no-cache=false 表示在构建过程中不使用缓存</div><div class="line"></div><div class="line">docker run  -it -p 2222:22 --name 容器名称 镜像名称  #启动docker镜像</div><div class="line">    -it 交互式模式启动，前台可以看到</div><div class="line">    -d 后台模式启动</div><div class="line">    -p 2222:22指定端口映射</div><div class="line">    --name 容器名称</div><div class="line">    -v  host_dir:container_dir   宿主机和容器数据映射，数据同步</div><div class="line">    -e 传递环境变量  -e WORDPRESS_DB_HOST=x.x.x.x</div><div class="line">    --entrypoint=/bin/bash   将cmd命令的环境覆盖掉</div><div class="line">如：docker run -itd -p 80:80 --name nginx_php -v /root/html:/data/www/html nginx1.8</div><div class="line">docker ps  # 将处于run状态下的容器显示出来</div><div class="line">docker ps -a   #将所有docker状态的容器显示出来</div><div class="line">docker info     #查看docker信息</div><div class="line">docker images # 查看镜像</div><div class="line">docker pull   xxx  #下载镜像</div><div class="line">docker push  xxx  #将镜像推送到registry</div><div class="line">docker search xxxx #查询镜像</div><div class="line">docker diff     #列出容器内发生变化的文件和目录（A-Add，D-Delete，C-Change）</div><div class="line">docker commit  xxxx    abc/yyy  #把有修改的container提交到新的images中</div><div class="line">docker tag  原镜像名称     新名称    #给镜像重命名</div><div class="line">docker top container    #查看正在运行的容器中的进程的运行情况</div><div class="line">docker port container   #用于查看容器与主机之间的端口映射关系信息</div><div class="line">docker exec -it  container_id(base(名称)) /bin/bash    #进入docker容器里面</div><div class="line">docker stop b1430f1a3daa    #停止容器运行</div><div class="line">Ctrl +p +q                         #进入容器后，从终端退出容器</div><div class="line">docker rm  -f 容器名称   #删除容器，-f强制删除</div><div class="line">docker rmi  image  #移除一个或多个镜像</div><div class="line">docker inspect  #查看镜像或容器的底层详细信息</div><div class="line">docker inspect -f &#123;&#123;.NetworkSettings.IPAddress&#125;&#125;  xxxxx   -f #查看特定信息</div><div class="line">docker ps -qa  # 列出所有的容器(含沉睡镜像)的容器ID号</div><div class="line">docker rm `docker ps -qa` 将沉睡的容器删除</div></pre></td></tr></table></figure>
<h3 id="存储相关命令"><a href="#存储相关命令" class="headerlink" title="存储相关命令"></a>存储相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker save -o ubuntu_14.04.tar ubuntu:14.04   #存出镜像</div><div class="line">docker load &lt; ubuntu_14.04.tar   #载入镜像，导入相关的元数据（包括标签等）</div><div class="line">docker export ID(7691a814370e) &gt;ubuntu.tar   #导出容器，导出容器快照到本地</div><div class="line">docker import             #导入容器快照，可以导入远程文件、本地文件和目录，使用http的url从远程位置导入，本地或目录的导入需要使用-参数</div><div class="line">如：docker import http://xxx.yyy.com/ext.tar.gz  xxx/yyy  || docker import - ubuntu:14.04</div></pre></td></tr></table></figure>
<h3 id="日志相关命令"><a href="#日志相关命令" class="headerlink" title="日志相关命令"></a>日志相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker events     #打印容器实时的系统事件</div><div class="line">docker history  images    #打印指定image的每层image命令行的历史记录</div><div class="line">docker logs container  #批量打印出容器中进程的运行日志</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;主要记录Docker工作中，常使用命令.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="Docker" scheme="https://ttxsgoto.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>docker—网络模式</title>
    <link href="https://ttxsgoto.github.io/2017/02/08/docker_network/"/>
    <id>https://ttxsgoto.github.io/2017/02/08/docker_network/</id>
    <published>2017-02-08T14:05:33.000Z</published>
    <updated>2017-02-08T14:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker网络实现原理"><a href="#Docker网络实现原理" class="headerlink" title="Docker网络实现原理"></a>Docker网络实现原理</h3><p>Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。 Linux 通过在内核中进 行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多；Docker 容器网络利用此技术，它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通 （这样的一对接口叫做 veth pair ）</p>
<p>Docker 创建一个容器的时候，会执行如下操作：</p>
<ul>
<li>创建一对虚拟接口，分别放到本地主机和新容器中； </li>
<li>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethf9； </li>
<li>容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的名字空间可见； </li>
<li>从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethf9。 </li>
</ul>
<p>完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络</p>
<p>网络模式需要开启linux系统转发功能，查看linux系统中是否开启转发功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sysctl net.ipv4.ip_forward</div><div class="line">net.ipv4.ip_forward = 1</div><div class="line"># 设置：sysctl -w  net.ipv4.ip_forward=1</div></pre></td></tr></table></figure></p>
<h3 id="几种网络模式"><a href="#几种网络模式" class="headerlink" title="几种网络模式"></a>几种网络模式</h3><h4 id="nat"><a href="#nat" class="headerlink" title="nat"></a>nat</h4><p>–net=bridge (默认的网桥)，Docker通过宿主机的网桥(docker0)来连通内部和宿主机的网络，实现了容器与宿主机和外界之间的网络通信<br><img src="https://ttxsgoto.github.io/img/docker_network/1.png" alt="nat"></p>
<p>Bridge桥接模式的实现步骤主要如下：</p>
<p>（1）Docker Daemon利用veth pair技术，在宿主机上创建两个虚拟网络接口设备，假设为veth0和veth1。而veth pair技术的特性可以保证无论哪一个veth接收到网络报文，都会将报文传输给另一方。</p>
<p>（2）Docker Daemon将veth0附加到Docker Daemon创建的docker0网桥上。保证宿主机的网络报文可以发往veth0。</p>
<p>（3）Docker Daemon将veth1添加到Docker Container所属的namespace下，并被改名为eth0。如此一来，保证宿主机的网络报文若发往veth0，则立即会被eth0接收，实现宿主机到Docker Container网络的联通性；同时，也保证Docker Container单独使用eth0，实现容器网络环境的隔离性。</p>
<p>同时Docker采用NAT（Network Address Translation，网络地址转换）的方式(可自行查询实现原理)，让宿主机以外的世界可以主动将网络报文发送至容器内部。</p>
<p>通过Bridger网桥模式实现：</p>
<p>（1）容器拥有独立、隔离的网络栈</p>
<p>（2）容器和宿主机以外的世界通过NAT建立通信</p>
<h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p>–net=host (告诉docker不要将容器网络放在隔离的名字容器中，即不要容器化容器内的网络，该模式下的Docker Container和host宿主机共享同一个网络namespace，即container和宿主机一样，使用宿主机的eth0)<br><img src="https://ttxsgoto.github.io/img/docker_network/2.png" alt="host"></p>
<p>Docker Container的host网络模式在实现过程中，由于不需要额外的网桥以及虚拟网卡，故不会涉及docker0以及veth pair。父进程在创建子进程时，如果不使用CLONE_NEWNET这个参数标志，那么创建出的子进程会与父 进程共享同一个网络namespace。Docker就是采用了这个简单的原理，在创建进程启动容器的过程中，没有传入CLONE_NEWNET参数标 志，实现Docker Container与宿主机共享同一个网络环境，即实现host网络模式。</p>
<p>Docker Container的网络模式中，host模式是bridge桥接模式很好的补充。采用host模式的Docker Container，可以直接使用宿主机的IP地址与外界进行通信，若宿主机的eth0是一个公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换。当然，有这样的方便，肯定会损失部分其他的特性，最明显的是Docker Container网络环境隔离性的弱化，即容器不再拥有隔离、独立的网络栈。另外，使用host模式的Docker Container虽然可以让容器内部的服务和传统情况无差别、无改造的使用，但是由于网络隔离性的弱化，该容器会与宿主机共享竞争网络栈的使用；另外，容器内部将不再拥有所有的端口资源，原因是部分端口资源已经被宿主机本身的服务占用，还有部分端口已经用以bridge网络模式容器的端口映射。</p>
<h4 id="Other-container"><a href="#Other-container" class="headerlink" title="Other container"></a>Other container</h4><p>–net=container:NAME_or_ID  (让docker将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP地址和端口等网络资源，两者进程可以直接通过lo 环回接口通信)<br><img src="https://ttxsgoto.github.io/img/docker_network/3.png" alt="other"></p>
<p>上图右侧的Docker Container即采用了other container网络模式，它能使用的网络环境即为左侧Docker Container brdige桥接模式下的网络</p>
<p>Docker Container的other container网络模式在实现过程中，不涉及网桥，同样也不需要创建虚拟网卡veth pair。</p>
<p>完成other container网络模式的创建只需要两个步骤：</p>
<p>(1) 查找other container（即需要被共享网络环境的容器）的网络namespace；</p>
<p>(2) 将新创建的Docker Container（也是需要共享其他网络的容器）的namespace，使用other container的namespace<br>在这种模式下的Docker Container可以通过localhost来访问namespace下的其他容器，传输效率较高。虽然多个容器共享网络环境，但是多个容器形成的整体依然与宿主机以及其他容器形成网络隔离。另外，这种模式还节约了一定数量的网络资源。但是需要注意的是，它并没有改善容器与宿主机以外世界通信的情况。</p>
<h4 id="none"><a href="#none" class="headerlink" title="none"></a>none</h4><p>–net=none   (让Docker将新容器放到隔离的网络栈中，但不进行网络配置，之后用户可以自己进行配置，容器内部只能使用loopback网络设备，不会再有其他的网络资源)</p>
<h3 id="网络相关的命令"><a href="#网络相关的命令" class="headerlink" title="网络相关的命令"></a>网络相关的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-b BRIDGE or --bridge=BRIDGE --指定容器挂载的网桥</div><div class="line">--bip=CIDR --定制 docker0 的掩码</div><div class="line">-H SOCKET... or --host=SOCKET... --Docker 服务端接收命令的通道</div><div class="line">--icc=true|false --是否支持容器之间进行通信</div><div class="line">--ip-forward=true|false --容器之间的通信</div><div class="line">--iptables=true|false --禁止 Docker 添加 iptables 规则</div><div class="line">--mtu=BYTES --容器网络中的 MTU</div></pre></td></tr></table></figure>
<p>上述网络模式理论主要来自链接：</p>
<p><a href="http://www.infoq.com/cn/articles/docker-source-code-analysis-part7" target="_blank" rel="external">http://www.infoq.com/cn/articles/docker-source-code-analysis-part7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker网络实现原理&quot;&gt;&lt;a href=&quot;#Docker网络实现原理&quot; class=&quot;headerlink&quot; title=&quot;Docker网络实现原理&quot;&gt;&lt;/a&gt;Docker网络实现原理&lt;/h3&gt;&lt;p&gt;Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势
    
    </summary>
    
      <category term="Docker" scheme="https://ttxsgoto.github.io/categories/Docker/"/>
    
    
      <category term="Network" scheme="https://ttxsgoto.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>awk、uniq、sort三个命令的基本用法</title>
    <link href="https://ttxsgoto.github.io/2017/02/07/awk_uniq_sort/"/>
    <id>https://ttxsgoto.github.io/2017/02/07/awk_uniq_sort/</id>
    <published>2017-02-07T14:38:32.000Z</published>
    <updated>2017-02-15T13:56:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天对awk、uniq、sort三个命令做了基础功能的学习，这里自己记录一下：</p>
<h4 id="1-awk"><a href="#1-awk" class="headerlink" title="1.awk"></a>1.awk</h4><p>数据处理工具，将一行分割成多个“字段”来处理</p>
<pre><code>awk -F &apos;文本切割符&apos;‘{处理过程}’ 文件名称
</code></pre><p>如：cat /ect/passwd | awk -F ‘:’ ‘{print $1}’   #以：分割，打印第一列的数据；如果为$0表示整个文件内容</p>
<pre><code>cat /etc/passwd | awk -F &apos;&apos;BEGIN {print &quot;begin,goto&quot;} {print $1&quot;,&quot;$7} END {print “end,end”}  #以空白符作为分割，打印begin，goto开始执行信息，打印1，7行，以end,end结束
</code></pre><h4 id="2-uniq"><a href="#2-uniq" class="headerlink" title="2.uniq"></a>2.uniq</h4><p>命令用来过滤重复部分显示文件内容,这个命令读取输入文件，并比较相邻的行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">参数：</div><div class="line"></div><div class="line">-c  显示输出中，在每行行首加上本行在文件中出现的次数</div><div class="line">-d  只显示重复行</div><div class="line">-u  只显示文件中不重复的各行</div><div class="line">-n  前n个字段与每个字段前的空白一起被忽略</div><div class="line">+n  前n个字符被忽略，之前的字符被跳过（字符从0开始编号）</div><div class="line">-f   n与-n相同，这里n是字段数</div><div class="line">-s   n与+n相同，这里n是字符数</div><div class="line">常用： uniq -c  首行显示文件中出现的次数</div></pre></td></tr></table></figure></p>
<h4 id="3-sort-排序"><a href="#3-sort-排序" class="headerlink" title="3.sort 排序"></a>3.sort 排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">参数：</div><div class="line">-u  在输出行中去除重复行</div><div class="line">-r   默认的排序方式为升序，-r转换为降序排列</div><div class="line">-n  默认按照字符来排序出现10在2前面，-n以数值来排序</div><div class="line">-t   后面设定间隔符</div><div class="line">-k  指定列数</div><div class="line">如：sort -n -k 2 -t ： test.txt  以数值排序，按照第二列以“：”间隔来排列顺序</div></pre></td></tr></table></figure>
<p>以上简单总结而已，后续如有其他使用，再更新！！！</p>
<h4 id="4-日常使用相关"><a href="#4-日常使用相关" class="headerlink" title="4.日常使用相关"></a>4.日常使用相关</h4><ul>
<li><p>截取日志中特定时间段的日志内容</p>
<pre><code>sed -n &apos;/2016-08-25 09:44:10/,/2016-08-25 09:44:30/p&apos;  1.txt &gt; test.txt
</code></pre></li>
</ul>
<ul>
<li><p>nginx 访问日志统计访问的url</p>
<p>  截取特定时间段的日志</p>
<pre><code>cat nginx.acc.log | egrep &quot;12/Aug/2016&quot; | sed -n &apos;/14:59:44/,/15:47:23/p&apos; &gt; a.txt
</code></pre></li>
<li><p>排序</p>
<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort #对数据进行(ASCII)排序  
</code></pre></li>
<li><p>去重，uniq -c 只会合并相邻的记录，所以在使用它之前，应该先进行排序</p>
<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort | uniq -c
</code></pre></li>
<li><p>再排序，得到 (次数  内容)的文件， sort -k 1 -n -r 指定对第一行进行排序，-n 数字排序，以降序排列</p>
<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort | uniq -c | sort -k 1 -n -r
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天对awk、uniq、sort三个命令做了基础功能的学习，这里自己记录一下：&lt;/p&gt;
&lt;h4 id=&quot;1-awk&quot;&gt;&lt;a href=&quot;#1-awk&quot; class=&quot;headerlink&quot; title=&quot;1.awk&quot;&gt;&lt;/a&gt;1.awk&lt;/h4&gt;&lt;p&gt;数据处理工具，将一行分
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="awk" scheme="https://ttxsgoto.github.io/tags/awk/"/>
    
      <category term="sort" scheme="https://ttxsgoto.github.io/tags/sort/"/>
    
      <category term="uniq" scheme="https://ttxsgoto.github.io/tags/uniq/"/>
    
  </entry>
  
  <entry>
    <title>pycharm,vim,items2常用快捷键</title>
    <link href="https://ttxsgoto.github.io/2017/02/06/vim/"/>
    <id>https://ttxsgoto.github.io/2017/02/06/vim/</id>
    <published>2017-02-06T14:05:33.000Z</published>
    <updated>2017-02-07T13:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="熟练掌握下面快捷键的使用-方便查询"><a href="#熟练掌握下面快捷键的使用-方便查询" class="headerlink" title="熟练掌握下面快捷键的使用(方便查询)"></a>熟练掌握下面快捷键的使用(方便查询)</h4><hr>
<h5 id="Pycharm日常快捷键"><a href="#Pycharm日常快捷键" class="headerlink" title="Pycharm日常快捷键"></a>Pycharm日常快捷键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- cmd + b           跳转到声明处(cmd + 鼠标)</div><div class="line">- cmd + y           显示方法对应的代码</div><div class="line">- cmd + []          光标之前/后的位置</div><div class="line">- cmd + del         删除当前行</div><div class="line">- cmd + o           搜索class</div><div class="line">- cmd + l           指定行数跳转</div><div class="line">- cmd + shift + o   搜索文件</div><div class="line">- cmd + opt + o     搜索函数</div><div class="line">- cmd + +           展开当前</div><div class="line">- cmd + -           收缩当前</div><div class="line">- cmd + shift + +   展开所有</div><div class="line">- cmd + shift + -   收缩所有</div><div class="line">- cmd + fn + F2     停止运行程序</div><div class="line">- cmd + /           注释/取消注释</div><div class="line">- cmd + fn + F12    显示文件结构</div><div class="line">- cmd + d           在下一行复制本行的内容</div><div class="line">- cmd + up/down     转到其他目录中</div><div class="line">- alt + enter       自动添加包</div><div class="line">- alt + del         向前删除一个字符串</div><div class="line">- alt + up          选中一个单词</div><div class="line">- alt + control + i 自动缩进行</div><div class="line">- double shift      选择需要查看的文件</div><div class="line">- alt + r           启动程序</div><div class="line">- alt + d           debug启动程序</div></pre></td></tr></table></figure>
<hr>
<h5 id="Vim日常快捷键"><a href="#Vim日常快捷键" class="headerlink" title="Vim日常快捷键"></a>Vim日常快捷键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- hjkl              左下上右</div><div class="line">- gg                跳到文首</div><div class="line">- G                 跳到文末</div><div class="line">- M                 跳到当前页屏幕中间</div><div class="line">- &apos;0                光标跳到上次关闭文件前的位置</div><div class="line">- control + b       向上翻页</div><div class="line">- control + f       向下翻页</div><div class="line">- dw                删除一个单词</div><div class="line">- D                 删除所在行光标后面的内容</div><div class="line">- d0                删除所在行光标前面的内容</div><div class="line">- x/X               向后删除一个字符，X为向前删除一个字符</div><div class="line">- 0                 移动到当前行的第一个字符处</div><div class="line">- $                 移动到当前行的最后一个字符处</div><div class="line">- u                 撤销之前的操作</div><div class="line">- control + r       向后执行刚才撤销的内容</div><div class="line">- n                 查询时向下重复前一个查询操作</div><div class="line">- N                 查询时向上重复前一个查询操作</div><div class="line">- :s/old/new/g      用new替换行中所有的old</div><div class="line">- %s/old/new/g      用new替换当前文件里所有的old</div><div class="line">- v                 字符选择</div><div class="line">- V                 行选择</div><div class="line">- ctrl+v            块选择</div><div class="line"></div><div class="line">可用于在选中的行上插入相同的内容</div><div class="line">- 定位光标</div><div class="line">- crtl+v           进入块编辑模式</div><div class="line">- I                大写字母I，然后插入字符</div><div class="line">- ESC              按两下esc 即可添加相同内容到对应的行</div></pre></td></tr></table></figure>
<hr>
<h5 id="Items2常用快捷键"><a href="#Items2常用快捷键" class="headerlink" title="Items2常用快捷键"></a>Items2常用快捷键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- cmd + t           新建标签</div><div class="line">- cmd + w           关闭标签</div><div class="line">- cmd + L/R         左右切换标签</div><div class="line">- cmd + ;           查看历史命令</div><div class="line">- cmd + r           清屏</div><div class="line">- cmd + d           垂直分屏</div><div class="line">- cmd + shift + d   水平分屏</div><div class="line">- control + a       到行首</div><div class="line">- control + e       到行末</div><div class="line">- control + d       删除当前光标的字符</div><div class="line">- 选中即复制 + 鼠标中键粘贴</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;熟练掌握下面快捷键的使用-方便查询&quot;&gt;&lt;a href=&quot;#熟练掌握下面快捷键的使用-方便查询&quot; class=&quot;headerlink&quot; title=&quot;熟练掌握下面快捷键的使用(方便查询)&quot;&gt;&lt;/a&gt;熟练掌握下面快捷键的使用(方便查询)&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="vim" scheme="https://ttxsgoto.github.io/tags/vim/"/>
    
      <category term="pycharm" scheme="https://ttxsgoto.github.io/tags/pycharm/"/>
    
      <category term="items2" scheme="https://ttxsgoto.github.io/tags/items2/"/>
    
  </entry>
  
  <entry>
    <title>CPU性能命令</title>
    <link href="https://ttxsgoto.github.io/2017/02/05/cpu/"/>
    <id>https://ttxsgoto.github.io/2017/02/05/cpu/</id>
    <published>2017-02-05T14:05:33.000Z</published>
    <updated>2017-02-07T14:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><hr>
<p>CPU使用率:通过测量一段时间内cpu实例忙于执行工作的时间比例获得，以百分比表示</p>
<p>CPI(每指令周期数)：用来描述cpu如何使用它的时钟周期，同时也可以用来理解CPU使用率的本质；CPI较高代表cpu进场陷入停滞，通常都是在访问内存，较低的CPI表示cpu基本没有停滞，指令吞吐较高</p>
<p>IPC(每周期指令数)：它为CPI的倒数</p>
<p>饱和度：一个100%使用率的cpu称为饱和</p>
<h4 id="CPU使用说明例子"><a href="#CPU使用说明例子" class="headerlink" title="CPU使用说明例子"></a>CPU使用说明例子</h4><blockquote>
<p>CPU 很无辜，是个任劳任怨的打工仔，每时每刻都有工作在做（进程、线程）并且自己有一张工作清单（可运行队列），由老板（进程调度）来决定他该干什么，他需要 和老板沟通以便得到老板的想法并及时调整自己的工作（上下文切换），部分工作做完以后还需要及时向老板汇报（中断），所以打工仔（CPU）除了做自己该做 的工作以外，还有大量时间和精力花在沟通和汇报上。</p>
<p>打工仔接受和完成多少任务并向老板汇报了（中断）；</p>
<p>打工仔和老板沟通、协商每项工作的工作进度（上下文切换）；</p>
<p>打工仔的工作列表是不是都有排满（可运行队列）；</p>
<p>打工仔工作效率如何，是不是在偷懒（CPU 利用率）。</p>
</blockquote>
<h4 id="性能命令如下"><a href="#性能命令如下" class="headerlink" title="性能命令如下"></a>性能命令如下</h4><pre><code>- uptime
- top
- vmstart
- mpstat
- pidstat
- dstat
</code></pre><p>说明如下：</p>
<h5 id="uptime命令，用来统计系统当前的运行状态"><a href="#uptime命令，用来统计系统当前的运行状态" class="headerlink" title="uptime命令，用来统计系统当前的运行状态"></a>uptime命令，用来统计系统当前的运行状态</h5><pre><code>12:02:32 up 235 days, 18:58,  4 users,  load average: 0.02, 0.10, 0.07
</code></pre><p>其中load average这三个值表示系统在1min，5min，15min内的平均负载，这三个值一般不能大于系统CPU的个数。如果长期大于cpu个数表示cpu不足以服务线程，说明cpu繁忙，有些线程在等待，可能会影响系统性能</p>
<p>平均负载：表示对cpu资源的需求，通过汇总正在运行的线程数（使用率）和正在排队等待运行的线程数(饱和度)计算得到.</p>
<h5 id="top-查看负载情况-主要关注负载1-5-15min"><a href="#top-查看负载情况-主要关注负载1-5-15min" class="headerlink" title="top    查看负载情况 主要关注负载1,5,15min"></a>top    查看负载情况 主要关注负载1,5,15min</h5><p>该命令显示了最消耗cpu的任务，并带有cpu消耗百分比，TIME和%CPU显示了CPU占用的时间（这里是分钟时间）</p>
<pre><code>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head  查看占用cpu资源最多的10个进程方法

ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head  查看占用内存资源最多的10个进程方法

ps -eo comm,pid,pcpu,pmem --sort -pcpu | head -20
</code></pre><h5 id="vmstart-命令（虚拟内存统计），"><a href="#vmstart-命令（虚拟内存统计），" class="headerlink" title="vmstart 命令（虚拟内存统计），"></a>vmstart 命令（虚拟内存统计），</h5><p>最后几列显示了cpu平均负载，少于10%可能是一个有问题<br>vmstart [-V] [-n] [delay [count]]</p>
<pre><code>-V  表示打印出版本信息，可选参数  
-n  表示在周期性循环输出，输出的头部信息仅显示一次
delay 表示两次输出之间的时间间隔
count 表示按照“delay”指定的时间间隔统计的次数，默认为1次
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vmstart 3 5</div><div class="line">1 procs -----------memory----------  ---swap-- -----io---- --system-- -----cpu-----</div><div class="line">2 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class="line">3 2  0   7400 171448 171212 7667080    0    0    70   605    0    0  2  1 97  1  0</div><div class="line">4 0  0   7400 171828 171212 7667100    0    0     0  2387 1322 1572  1  1 99  0  0</div></pre></td></tr></table></figure>
<p>在cpu评估中，主要注意procs项中的r项的值和cpu项中us、sy和id列的值<br>这些值都是所有cpu的系统平均数，r除外，是总数r 应小于cpu个数<br>当脏页达到内存页面设置的值时，开始写入硬盘，通过  /sbin/sysctl -n vm.dirty_background_ratio   查看，默认值为10<br>当系统物理内存剩余量在该值范围时，开始大量使用swap交换空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">r，所有等待的加上正在运行的线程数，这些线程都是可运行状态，只不过 CPU 暂时不可用；</div><div class="line">b，被 blocked 的进程数，正在等待 IO 请求；</div><div class="line">in，被处理过的中断数</div><div class="line">cs，系统上正在做上下文切换的数目</div><div class="line">us，用户占用 CPU 的百分比</div><div class="line">sys，内核和中断占用 CPU 的百分比</div><div class="line">wa，所有可运行的线程被 blocked 以后都在等待 IO，这时候 CPU 空闲的百分比</div><div class="line">id，CPU 完全空闲的百分比</div><div class="line">swpd，已使用的 SWAP 空间大小，KB 为单位；</div><div class="line">free，可用的物理内存大小，KB 为单位；</div><div class="line">buff，物理内存用来缓存读写操作的 buffer 大小，KB 为单位；</div><div class="line">cache，物理内存用来缓存进程地址空间的 cache 大小，KB 为单位；</div><div class="line">si，数据从 SWAP 读取到 RAM（swap in）的大小，KB 为单位；</div><div class="line">so，数据从 RAM 写到 SWAP（swap out）的大小，KB 为单位；</div><div class="line">bi，磁盘块从文件系统或 SWAP 读取到 RAM（blocks in）的大小，block 为单位；</div><div class="line">bo，磁盘块从 RAM 写到文件系统或 SWAP（blocks out）的大小，block 为单位；</div></pre></td></tr></table></figure></p>
<h5 id="mpstat命令"><a href="#mpstat命令" class="headerlink" title="mpstat命令"></a>mpstat命令</h5><p>(每个CPU统计信息）,检查单个cpu是否繁忙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">mpstat -P ALL 1</div><div class="line">05:43:50 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle</div><div class="line">05:43:51 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    3    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line">05:43:51 PM    7    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class="line"></div><div class="line">-P ALL 用来打印每个CPU的信息</div><div class="line">-P 1 1  用来打印第二个cpu的信息</div><div class="line">%usr ：用户态时间</div><div class="line">%nice :以nice优先级运行的进程用户态时间</div><div class="line">%sys ：系统态时间（内核）</div><div class="line">%iowait ：I/O等待</div><div class="line">%irq   ：硬件中断CPU用量</div><div class="line">%soft  ：软件中断CPU用量</div><div class="line">%steal ：耗费在服务其他租户的时间</div><div class="line">%guest ：花在访客虚拟机的时间</div><div class="line">%idle：空闲时间</div><div class="line"></div><div class="line">重要列有：usr，sys和idle</div></pre></td></tr></table></figure></p>
<h5 id="pidstat-按进程或线程来打印cpu用量"><a href="#pidstat-按进程或线程来打印cpu用量" class="headerlink" title="pidstat 按进程或线程来打印cpu用量"></a>pidstat 按进程或线程来打印cpu用量</h5><p>包括用户态和系统态时间的分解，默认情况下仅输出活动的进程的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pidstat 1</div><div class="line">05:49:59 PM       PID    %usr %system  %guest    %CPU   CPU  Command</div><div class="line">05:50:00 PM        37    0.00    0.99    0.00    0.99     3  kblockd/3</div><div class="line">05:50:00 PM        60    0.00    0.99    0.00    0.99     0  kswapd0</div><div class="line">05:50:00 PM     18520    0.99    0.99    0.00    1.98     0  pidstat</div><div class="line">05:50:00 PM     18524    0.00   16.83    0.00   16.83     0  tar</div><div class="line">05:50:00 PM     18525   53.47   13.86    0.00   67.33     0  gzip</div><div class="line">-t  打印每个线程的统计信息</div><div class="line">-p ALL  用来打印所有的进程，包括空闲进程</div></pre></td></tr></table></figure></p>
<h5 id="dstat-命令，比较全部的查看系统资源信息"><a href="#dstat-命令，比较全部的查看系统资源信息" class="headerlink" title="dstat 命令，比较全部的查看系统资源信息"></a>dstat 命令，比较全部的查看系统资源信息</h5><p>常用命令： dstat -cdlnmpsy  查看比较全面的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-c  cpu</div><div class="line">-d disk</div><div class="line">-l  load</div><div class="line">-n net</div><div class="line">-m memory</div><div class="line">-p procs</div><div class="line">-s swap</div><div class="line">-y system</div><div class="line">--output   xxx.csv   生成csv文件，可以通过excel打开</div><div class="line"></div><div class="line">dstat -cdlnmpsy</div><div class="line">---total-cpu-usage---- -dsk/total- ---load-avg--- -net/total- ---procs---&gt;</div><div class="line">usr sys idl wai hiq siq| read  writ| 1m   5m  15m | recv  send|run blk new&gt;</div><div class="line">  2   1  97   0   0   0|  73k  115k|   0 0.01 0.05|   0     0 |  0   0 1.2&gt;</div><div class="line">  0   1  99   0   0   0|   0     0 |   0 0.01 0.05| 146B 1058B|  0   0   0&gt;</div><div class="line">  0   1 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class="line">  1   0  99   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class="line">  0   0 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class="line">  0   1  99   0   0   0|   0    12k|   0 0.01 0.05| 146B  514B|1.0   0   0&gt;</div><div class="line"></div><div class="line">dstat --top-io --top-bio</div></pre></td></tr></table></figure></p>
<p>PS:相关内容参照《性能之巅-洞悉系统、企业与云计算》第6章-cpu章节</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;CPU使用率:通过测量一段时间内cpu实例忙于执行工作的时间比例获得，以百分比表示&lt;/p&gt;
&lt;p&gt;CPI(每指令周
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="CPU" scheme="https://ttxsgoto.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="https://ttxsgoto.github.io/2017/02/01/hexo/"/>
    <id>https://ttxsgoto.github.io/2017/02/01/hexo/</id>
    <published>2017-02-01T14:38:32.000Z</published>
    <updated>2017-02-07T13:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo # 安装hexo</div><div class="line">hexo init   #初始化hexo目录</div><div class="line">npm install hexo-deployer-git --save 安装git所需的插件</div></pre></td></tr></table></figure>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate # 或者 hexo g 生成静态网页 </div><div class="line">hexo server # 或者 hexo s 启动本地服务</div><div class="line">hexo  deploy    #将本地文件推送到github上</div><div class="line">hexo new &quot;title&quot;    # 新建文章</div><div class="line">hexo new page &quot;pagename&quot;    # 新建页面</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; title=&quot;安装命令&quot;&gt;&lt;/a&gt;安装命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="hexo" scheme="https://ttxsgoto.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
