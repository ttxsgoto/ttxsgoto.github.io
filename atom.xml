<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2018-09-28T10:25:34.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>运维 Redis进阶</title>
    <link href="https://ttxsgoto.github.io/2018/09/28/redis-advance/"/>
    <id>https://ttxsgoto.github.io/2018/09/28/redis-advance/</id>
    <published>2018-09-28T13:14:53.000Z</published>
    <updated>2018-09-28T10:25:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发</p>
<h4 id="使用redis目的"><a href="#使用redis目的" class="headerlink" title="使用redis目的"></a>使用redis目的</h4><ul>
<li>高性能：将数据缓存在redis中，访问数据从缓存中取，不直接访问数据库，提高页面响应效率</li>
<li>高并发：在大的并发情况下，直接操作缓存能够承受的请求远大于直接访问数据库，这时我们需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库</li>
</ul>
<h4 id="一般应用场景："><a href="#一般应用场景：" class="headerlink" title="一般应用场景："></a>一般应用场景：</h4><ul>
<li>缓存-热数据：需要执行耗时久，计算结果不频繁变动的sql查询</li>
<li>异步队列</li>
<li>计数器：如统计点击数，INCRBY</li>
<li>分布式锁与单线程机制</li>
<li>最新列表：使用LPUSH命令构建List</li>
<li>排行榜应用： 使用ZADD(有续集，sorted set)</li>
<li>位操作(大数据处理)</li>
</ul>
<h4 id="常见数据结构和使用场景"><a href="#常见数据结构和使用场景" class="headerlink" title="常见数据结构和使用场景"></a>常见数据结构和使用场景</h4><ul>
<li>String </li>
</ul>
<p>常用的命令： set、get、decr、incr、mget、mset<br>String 数据结构是简单的 Key-Value 类型，Value 可为字符和数值和其他类型的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置和获取key-value</span></div><div class="line">set mykey ttxsgoto</div><div class="line">get mykey</div><div class="line"> </div><div class="line"><span class="comment"># 原子递增</span></div><div class="line">set counter <span class="number">100</span></div><div class="line">incr counter ((integer) <span class="number">101</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 一次性存储和获取多个key对应的值,mget 命令返回由值组成的数组</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset a <span class="number">10</span> b <span class="number">20</span> c <span class="number">30</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a b c</div><div class="line"><span class="number">1</span>) <span class="string">"10"</span></div><div class="line"><span class="number">2</span>) <span class="string">"20"</span></div><div class="line"><span class="number">3</span>) <span class="string">"30"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</div><div class="line"><span class="number">1</span>) <span class="string">"ttxs"</span></div><div class="line"><span class="number">2</span>) <span class="string">"c"</span></div><div class="line"><span class="number">3</span>) <span class="string">"a"</span></div><div class="line"><span class="number">4</span>) <span class="string">"counter"</span></div><div class="line"><span class="number">5</span>) <span class="string">"b"</span></div><div class="line"><span class="number">6</span>) <span class="string">"mykey"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exists a</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exists x</div><div class="line">(integer) <span class="number">0</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; type a</div><div class="line">string</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> a</div><div class="line">(integer) <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="comment"># 设置过期时间</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get b</div><div class="line"><span class="string">"20"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; expire b <span class="number">5</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get b</div><div class="line">(nil)</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set bbb <span class="number">1000</span> ex <span class="number">100</span></div><div class="line">OK</div><div class="line"><span class="comment"># 查看过期时间</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ttl bbb</div><div class="line">(integer) <span class="number">95</span></div></pre></td></tr></table></figure></p>
<ul>
<li>Hash</li>
</ul>
<p>常用命令：hget、hset、 hmget、hmset、hgetall<br>Hash 是一个 String 类型的 Field 和 Value 的映射表，Hash 特别适合用于存储对象；后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由键值对组成</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmset user:<span class="number">1000</span> username antirez birthyear <span class="number">1977</span> verified <span class="number">1</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget user:<span class="number">1000</span> username</div><div class="line"><span class="string">"antirez"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall user:<span class="number">1000</span></div><div class="line"><span class="number">1</span>) <span class="string">"username"</span></div><div class="line"><span class="number">2</span>) <span class="string">"antirez"</span></div><div class="line"><span class="number">3</span>) <span class="string">"birthyear"</span></div><div class="line"><span class="number">4</span>) <span class="string">"1977"</span></div><div class="line"><span class="number">5</span>) <span class="string">"verified"</span></div><div class="line"><span class="number">6</span>) <span class="string">"1"</span></div><div class="line"> </div><div class="line"><span class="comment"># 返回多个值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmget user:<span class="number">1000</span> username birthyear xxx</div><div class="line"><span class="number">1</span>) <span class="string">"antirez"</span></div><div class="line"><span class="number">2</span>) <span class="string">"1977"</span></div><div class="line"><span class="number">3</span>) (nil)</div></pre></td></tr></table></figure></p>
<ul>
<li>List</li>
</ul>
<p>常用命令：lpush、rpush、lpop、rpop、lrange<br>List 就是链表，Redis List 的应用场景非常多，也是 Redis 最重要的数据结构之一<br>Redis List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销<br>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 List 实现分页查询</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lpush 向list的左边（头部）添加一个新元素</span></div><div class="line"><span class="comment"># rpush 向list的右边（尾部）添加一个新元素</span></div><div class="line"><span class="comment"># lrange 从list中取出一定范围的元素</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist A</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist B</div><div class="line">(integer) <span class="number">2</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush mylist first</div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="comment"># 写入多个值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="string">"foo bar"</span></div><div class="line">(integer) <span class="number">9</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="number">4</span>) <span class="string">"1"</span></div><div class="line"><span class="number">5</span>) <span class="string">"2"</span></div><div class="line"><span class="number">6</span>) <span class="string">"3"</span></div><div class="line"><span class="number">7</span>) <span class="string">"4"</span></div><div class="line"><span class="number">8</span>) <span class="string">"5"</span></div><div class="line"><span class="number">9</span>) <span class="string">"foo bar"</span></div><div class="line"> </div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist001 a b c</div><div class="line"><span class="comment"># 删除元素并同时返回删除的值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpop mylist001</div><div class="line"><span class="string">"c"</span></div><div class="line"> </div><div class="line"><span class="comment"># ltrim把list从左边截取指定长度</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ltrim mylist <span class="number">0</span> <span class="number">2</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="comment"># 查看list中元素的个数</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; llen mylist</div><div class="line">(integer) <span class="number">6</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> mylist</div><div class="line">(integer) <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>Set</li>
</ul>
<p>常用命令：sadd、spop、smembers、sunion<br>Set 对外提供的功能与 List 类似是一个列表的功能，特殊之处在于 Set 是可以自动排重<br>当你需要存储一个列表数据，又不希望出现重复数据时，可以使用Set，同时也支持交集、并集、差集操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd myset <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="comment"># 查看所有</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers myset</div><div class="line"><span class="number">1</span>) <span class="string">"1"</span></div><div class="line"><span class="number">2</span>) <span class="string">"2"</span></div><div class="line"><span class="number">3</span>) <span class="string">"3"</span></div><div class="line"><span class="comment"># 检查元素是否存在</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember myset <span class="number">1</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember myset <span class="number">4</span></div><div class="line">(integer) <span class="number">0</span></div></pre></td></tr></table></figure></p>
<ul>
<li>Sorted Set</li>
</ul>
<p>常用命令：zadd、zrange、zrem、zcard<br>和 Set 相比，Sorted Set 增加了一个权重参数 Score，使得集合中的元素能够按 Score 进行有序排列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># zadd 添加</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1940</span> <span class="string">"Alan Kay"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1957</span> <span class="string">"Sophie Wilson"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1953</span> <span class="string">"Richard Stallman"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1949</span> <span class="string">"Anita Borg"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1965</span> <span class="string">"Yukihiro Matsumoto"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1914</span> <span class="string">"Hedy Lamarr"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1916</span> <span class="string">"Claude Shannon"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1969</span> <span class="string">"Linus Torvalds"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1912</span> <span class="string">"Alan Turing"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="comment"># 查看数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange hackers <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">6</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">7</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">8</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">9</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"> </div><div class="line"><span class="comment"># 反向查看数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrange hackers <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">6</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">7</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">8</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">9</span>) <span class="string">"Alan Turing"</span></div><div class="line"> </div><div class="line"><span class="comment"># 查看对应的得分</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange hackers <span class="number">0</span> <span class="number">-1</span> withscores</div><div class="line"> <span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"> <span class="number">2</span>) <span class="string">"1912"</span></div><div class="line"> <span class="number">3</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"> <span class="number">4</span>) <span class="string">"1914"</span></div><div class="line"> <span class="number">5</span>) <span class="string">"Claude Shannon"</span></div><div class="line"> <span class="number">6</span>) <span class="string">"1916"</span></div><div class="line"> <span class="number">7</span>) <span class="string">"Alan Kay"</span></div><div class="line"> <span class="number">8</span>) <span class="string">"1940"</span></div><div class="line"> <span class="number">9</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">10</span>) <span class="string">"1949"</span></div><div class="line"><span class="number">11</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">12</span>) <span class="string">"1953"</span></div><div class="line"><span class="number">13</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">14</span>) <span class="string">"1957"</span></div><div class="line"><span class="number">15</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">16</span>) <span class="string">"1965"</span></div><div class="line"><span class="number">17</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"><span class="number">18</span>) <span class="string">"1969"</span></div><div class="line">  </div><div class="line"><span class="comment"># 小于1950的数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrangebyscore hackers -inf <span class="number">1950</span></div><div class="line"><span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div></pre></td></tr></table></figure></p>
<h4 id="过期策略以及内存淘汰机制"><a href="#过期策略以及内存淘汰机制" class="headerlink" title="过期策略以及内存淘汰机制"></a>过期策略以及内存淘汰机制</h4><p>redis采用的是定期删除+惰性删除策略</p>
<ul>
<li>定期删除：Redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 Key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机？假如 Redis 存了几十万个 Key ，每隔 100ms 就遍历所有的设置过期时间的 Key 的话，就会给 CPU 带来很大的负载</li>
<li><p>惰性删除 ：定期删除可能会导致很多过期 Key 到了时间并没有被删除掉。所以就有了惰性删除，也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除</p>
</li>
<li><p>内存淘汰机制： 在redis配置文件中配置 # maxmemory-policy volatile-lru<br>Redis 提供 6 种数据淘汰策略：</p>
</li>
</ul>
<pre><code>- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
- allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）
- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
- no-enviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错
</code></pre><h4 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h4><p>Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file，AOF）。</p>
<ul>
<li><p>RDB 快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save <span class="number">900</span> <span class="number">1</span>              <span class="comment">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class="line">save <span class="number">300</span> <span class="number">10</span>            <span class="comment">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class="line">save <span class="number">60</span> <span class="number">10000</span>        <span class="comment">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div></pre></td></tr></table></figure>
</li>
<li><p>AOF<br>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案<br>默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">appendonly yes</div></pre></td></tr></table></figure>
</li>
</ul>
<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。</p>
<p>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。</p>
<p>在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">appendfsync always     <span class="comment">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span></div><div class="line">appendfsync everysec  <span class="comment">#每秒钟同步一次，显示地将多个写命令同步到硬盘</span></div><div class="line">appendfsync no      <span class="comment">#让操作系统决定何时进行同步</span></div></pre></td></tr></table></figure></p>
<p>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。</p>
<ul>
<li>Redis 4.0 对于持久化机制的优化</li>
</ul>
<p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。</p>
<p>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。</p>
<p>这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。</p>
<p>当然缺点也是有的，AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>当缓存失效(过期)后引起系统性能急剧下降的情况</p>
<p>解决方案：</p>
<ul>
<li><p>更新锁机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对缓存更新操作进行加锁保护，保证只有一个线程进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么返回一个空值或者默认值</div></pre></td></tr></table></figure>
</li>
<li><p>后台更新机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">由后台线程更新缓存， 不是由业务来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存</div></pre></td></tr></table></figure>
</li>
<li><p>给缓存的失效时间加一个随机值，避免集体失效</p>
</li>
<li>使用双缓存，缓存A和B,A设置失效时间，B不设置失效  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 从缓存A读取数据，有就返回</div><div class="line">- A没有数据，直接从B读取数据，直接返回，并异步启动一个更新线程</div><div class="line">- 更新线程同时更新A，B的缓存数据</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>
<p>解决方案：</p>
<ul>
<li>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</li>
<li>采用异步更新策略，无论key是否取到值，都直接返回，如果查询返回的数据为空也缓存清理。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作</li>
</ul>
<h4 id="如何解决redis的并发竞争key问题"><a href="#如何解决redis的并发竞争key问题" class="headerlink" title="如何解决redis的并发竞争key问题"></a>如何解决redis的并发竞争key问题</h4><p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 Key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同</p>
<p>推荐方案： 分布式锁（ZooKeeper 和 Redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能），大家去抢锁，抢到锁就做set操作即可；</p>
<h4 id="redis和数据库双写一致性问题"><a href="#redis和数据库双写一致性问题" class="headerlink" title="redis和数据库双写一致性问题"></a>redis和数据库双写一致性问题</h4><p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="external">http://www.redis.cn/topics/data-types-intro.html#strings</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发&lt;/p&gt;
&lt;h4 id=&quot;使用redis目的&quot;&gt;&lt;a href=&quot;#使用redis目的&quot; class=&quot;headerlink&quot; title=&quot;使用redis目的&quot;&gt;&lt;/a&gt;使用redis
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Redis" scheme="https://ttxsgoto.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Django mgirate 错误</title>
    <link href="https://ttxsgoto.github.io/2018/09/17/django-migrations-error/"/>
    <id>https://ttxsgoto.github.io/2018/09/17/django-migrations-error/</id>
    <published>2018-09-17T11:37:18.000Z</published>
    <updated>2018-09-17T12:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">1057</span>, <span class="keyword">in</span> _read_query_result</div><div class="line">    result.read()</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">1340</span>, <span class="keyword">in</span> read</div><div class="line">    first_packet = self.connection._read_packet()</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">1014</span>, <span class="keyword">in</span> _read_packet</div><div class="line">    packet.check_error()</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">393</span>, <span class="keyword">in</span> check_error</div><div class="line">    err.raise_mysql_exception(self._data)</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/err.py"</span>, line <span class="number">107</span>, <span class="keyword">in</span> raise_mysql_exception</div><div class="line">    <span class="keyword">raise</span> errorclass(errno, errval)</div><div class="line">django.db.utils.IntegrityError: (<span class="number">1215</span>, <span class="string">'Cannot add foreign key constraint'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p>查看资料后，网上大体出现这样报错的原因有：</p>
<ul>
<li>外键对应的字段数据类型不一致</li>
<li>两张表的存储引擎不一致</li>
<li>设置外键时“删除时”设置为“SET NULL”</li>
</ul>
<p>发现这3点都不是引起我们报错的原因，首先我们的外键的字段都是UUID类型一样， 存储引擎也同样都是InnoDB,外键使用默认的django.db.models.deletion.CASCADE，这3点都不是造成错误的原因；</p>
<p>后来通过反复比较， 发现发现新建的表和建立外键的关系表中对应的字符集(default character set)和默认集合(default collation)这两者的类型不一致，导致外键关系创建不上,修改成一致后，再migrate，问题解决<br>所以 在这里应该再加一条，</p>
<ul>
<li>在导入新库时，对应的字符集和集合类型应该和原数据库一致</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在开发环境中，常把线上的数据库导入开发环境中， 这样本地数据库的字符集和集合类型有可能和线上的就不一致，导致上述问题；<br>上述问题的原因： 线上数据库在创建数据库时指定的字符集为(utf8mb4)集合类型为(utf8mb4_general_ci),而在本地创建数据库时指定的字符集类型为(utf8mb4)集合类型为(utf8mb4_bin); 尤其在多人协作时这样的问题更容易出现，所以这样的操作时，应先查看数据库对应的存储引擎、字符集和集合类型等信息，避免出现意想不到的错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：&lt;br&gt;&lt;figure cl
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="migrate" scheme="https://ttxsgoto.github.io/tags/migrate/"/>
    
  </entry>
  
  <entry>
    <title>Mysql必知必会笔记</title>
    <link href="https://ttxsgoto.github.io/2018/09/16/mysql-queryset/"/>
    <id>https://ttxsgoto.github.io/2018/09/16/mysql-queryset/</id>
    <published>2018-09-16T11:02:58.000Z</published>
    <updated>2018-09-17T11:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：</p>
<p>其中使用的数据库结构和数据为<a href="http://forta.com/books/0672327120/" target="_blank" rel="external">http://forta.com/books/0672327120/</a> 中的SQL脚本</p>
<h4 id="计算次序"><a href="#计算次序" class="headerlink" title="计算次序"></a>计算次序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM products WHERE vend_id=1002 or vend_id =1003;</div><div class="line">SELECT * FROM products WHERE (vend_id=1002 or vend_id=1003) AND prod_price &gt;=10;</div><div class="line">SELECT * FROM products WHERE vend_id not in (1002, 1003) ORDER BY prod_name;</div><div class="line">SELECT * FROM products ;</div><div class="line">SELECT * FROM products WHERE prod_name like &apos;_ ton anv%&apos;;	# _ 只匹配单个字符而不是多个字符</div></pre></td></tr></table></figure>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM products ;</div><div class="line">SELECT * FROM products WHERE prod_name REGEXP &apos;.000&apos; ORDER BY prod_name;	# 匹配任意一个字符</div><div class="line">SELECT * FROM products WHERE prod_name regexp &apos;1000|2000&apos;;</div><div class="line">SELECT * FROM products WHERE prod_name regexp &apos;[123] ton&apos;;</div></pre></td></tr></table></figure>
<h4 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h4><p>拼接： 将值联结到一起构成单个值， 使用Concat()函数来来拼接两个列, 函数中为多个字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT CONCAT(vend_name, &apos; (&apos;, vend_country, &apos;) &apos;) AS vend_title FROM vendors order by vend_name;</div></pre></td></tr></table></figure></p>
<p>执行算术计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT prod_id, quantity, item_price, quantity*item_price as total_price FROM orderitems WHERE order_num=20005;</div></pre></td></tr></table></figure></p>
<h4 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">日期和时间处理函数</div><div class="line">ADDDATE(expr,days)	添加一个日期(天，周等)</div><div class="line">ADDTIME(expr1,expr2)	添加一个时间(时，分等)</div><div class="line">CURDATE()	返回当前日期</div><div class="line">CURTIME()	返回当前时间</div><div class="line">DATE(expr)	返回日期时间的日期部分</div><div class="line">DATEDIFF(expr1,expr2)	计算两个日期之差</div><div class="line">DATE_ADD(date,INTERVAL expr unit)	高度灵活的日期运算函数</div><div class="line">DATE_FORMAT(date,format)	返回一个格式化的日期或时间串</div><div class="line">DAY(date)	返回一个日期的天数部分</div><div class="line">DAYOFWEEK(date)	对于一个日期，返回对应的星期几</div><div class="line">HOUR(time)	返回一个时间的小时部分</div><div class="line">MINUTE(time)	返回一个时间的分钟部分</div><div class="line">MONTH(date)	返回一个日期的月份部分</div><div class="line">NOW()		返回当前日期和时间</div><div class="line">SECOND(time)	返回一个时间的秒部分</div><div class="line">TIME(expr)	返回一个日期时间的时间部分</div><div class="line">YEAR()		返回一个日期的年份部分</div><div class="line"> </div><div class="line">数值处理函数</div><div class="line">ABS(X)	返回一个数的绝对值</div><div class="line">COS(X)	返回一个角度的余弦</div><div class="line">EXP(X)	返回一个数的指数值</div><div class="line">MOD(N,M)	返回除操作的余数</div><div class="line">PI()	返回圆周率</div><div class="line">RAND()	返回一个随机数</div><div class="line">SIN(X)	返回一个角度的正弦</div><div class="line">SQRT(X)	返回一个数的平方根</div><div class="line">TAN(X)	返回一个角度的正切</div><div class="line"> </div><div class="line">SELECT * FROM orders;</div><div class="line">SELECT * from orders WHERE DATE(order_date) = &apos;2005-09-01&apos;;</div><div class="line">SELECT * FROM orders WHERE DATE(order_date) BETWEEN &apos;2005-09-01&apos; and &apos;2005-10-01&apos;;</div><div class="line">SELECT * from orders where YEAR(order_date)=2005 and MONTH(order_date) = 10;</div></pre></td></tr></table></figure>
<h4 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h4><ul>
<li>聚合函数<br>  运行在行组上，计算和返回单个值的函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">AVG([DISTINCT] expr)	返回某列的平均值</div><div class="line">COUNT(expr)	返回某列的行数</div><div class="line">MAX(expr)	返回某列的最大值</div><div class="line">MIN(expr)	返回某列的最小值</div><div class="line">SUM(expr)	返回某列值之和</div><div class="line"> </div><div class="line"> </div><div class="line">SELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class="line">SELECT COUNT(*) FROM customers;</div><div class="line">SELECT COUNT(cust_email) FROM customers;</div><div class="line">SELECT SUM(item_price* quantity) FROM orderitems WHERE order_num=20005;</div><div class="line">-- 集合不同值 DISTINCT</div><div class="line">SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class="line">SELECT COUNT(*) AS num_items, MIN(prod_price), MAX(prod_price), AVG(prod_price) FROM products;</div></pre></td></tr></table></figure>
<h4 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h4><ul>
<li>分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算</li>
<li>WHERE 过滤行， HAVING 过滤分组</li>
<li>WHERE 在数据分组前进行过滤，having在数据分组后进行过滤</li>
<li>GROUP BY子句可以包含任何数目的列</li>
<li>如果在group by子句中嵌套了分组， 数据将在最后规定的分组上进行汇总</li>
<li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(单不能是聚集函数)</li>
<li>SELECT 语句中的每个列都必须在group by 子句中给出</li>
<li>如果分组列中具有null值，则null将作为一个分组返回，如果列中有多行null值，它们将分为一组</li>
<li>GROUP BY 子句必须出现在where子句之后，order by子句之前</li>
<li>使用 with rollup关键字， 可以得到每个分组汇总的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM orders;</div><div class="line">SELECT vend_id, COUNT(*) as num FROM products GROUP BY vend_id WITH ROLLUP;</div><div class="line">SELECT cust_id,COUNT(*) as order_count FROM orders GROUP BY cust_id HAVING order_count &gt;= 2;</div><div class="line">SELECT * FROM products;</div><div class="line">SELECT vend_id,COUNT(*) FROM products WHERE prod_price &gt;=10 GROUP BY vend_id HAVING COUNT(*) &gt;=2;</div></pre></td></tr></table></figure>
<p>SELECT子句及其顺序</p>
<table>
<thead>
<tr>
<th>子句</th>
<th>说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody>
<tr>
<td>SELECT</td>
<td>要返回的列或表达式</td>
<td>是</td>
</tr>
<tr>
<td>FROM</td>
<td>从中检索数据的表</td>
<td>仅在从表选择数据时使用</td>
</tr>
<tr>
<td>WHERE</td>
<td>行级过滤</td>
<td>否</td>
</tr>
<tr>
<td>GROUP BY</td>
<td>分组说明</td>
<td>仅在按组计算聚集时使用</td>
</tr>
<tr>
<td>HAVING</td>
<td>组级过滤</td>
<td>否</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>输出排序顺序</td>
<td>否</td>
</tr>
<tr>
<td>LIMIT</td>
<td>要检索的行数</td>
<td>否</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT order_num, SUM(quantity*item_price) AS total  FROM orderitems GROUP BY order_num HAVING total &gt;=50 ORDER BY total;</div></pre></td></tr></table></figure>
<h4 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h4><p>子查询：嵌套在其他查询中的查询<br>子查询进行过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM orderitems WHERE prod_id=&apos;TNT2&apos;;</div><div class="line">SELECT * FROM orders WHERE order_num in (20005, 20007);</div><div class="line">SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;);</div><div class="line">SELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;));</div></pre></td></tr></table></figure></p>
<p>计算字段使用子查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT COUNT(*) AS orders FROM orders WHERE cust_id=10001;</div><div class="line"></div><div class="line">SELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_name;</div></pre></td></tr></table></figure>
<h4 id="联结表查询"><a href="#联结表查询" class="headerlink" title="联结表查询"></a>联结表查询</h4><ul>
<li>内部联结： 基于两个表之间的相等测试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;</div><div class="line">SELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id AND orderitems.prod_id = products.prod_id AND order_num=20005;</div><div class="line">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num AND prod_id = &apos;TNT2&apos;;</div></pre></td></tr></table></figure>
<h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><p>利用union操作符将多条select组合成一个结果集<br>使用场景：</p>
<pre><code>- 在单个查询中从不同的表返回类似结构的数据
- 对单个表执行多个查询，按单个查询返回数据
</code></pre><p> 规则：</p>
<ul>
<li>SELECT 语句之间使用UNION关键字连接</li>
<li>UNION每个查询必须包含相同的列、表达式或者聚集函数</li>
<li>列数据类型必须兼容，类型不必完全相同，但必须是DBMS可以隐含地转换类型</li>
<li>UNION 从查询结果中自动去除了重复的行，如果需要返回所有匹配行，可以使用UNION ALL来展示</li>
<li>UNION 只能使用一条ORDER BY 子句，必须出现在最后一条SELECT语句之后,作用于所有SELECT语句返回的结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5;</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;=5 UNION ALL SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002);</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 OR vend_id IN (1001, 1002);</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 UNION SELECT  vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002) ORDER BY vend_id,prod_price;</div></pre></td></tr></table></figure>
<h4 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h4><ul>
<li>MyISAM引擎支持全文本搜索，InnoDB不支持</li>
<li>MATCH()指定被搜索的列</li>
<li>Against()指定要使用的搜索表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;rabbit&apos;);</div><div class="line">SELECT * FROM productnotes WHERE note_text like &quot;%rabbit%&quot;;</div><div class="line">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;anvils&apos;);</div></pre></td></tr></table></figure>
<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>视图是虚拟的表， 视图只包含使用时动态检索数据的查询</p>
<p>视图功能</p>
<pre><code>- 重用sql语句
- 简化复杂的sql操作
- 使用表的组成部分而不是整个表
- 保护数据
- 更改数据格式和表示 
</code></pre><p>基本语句</p>
<pre><code>- 创建使用 CREATE VIEW
- 查看创建视图的语句 SHOW CREATE VIEW viewname
- 删除视图， DROP VIEW viewname
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND </div><div class="line">orderitems.order_num = orders.order_num AND prod_id=&quot;TNT2&quot;;</div><div class="line">-- 创建视图</div><div class="line">CREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id=orders.cust_id AND</div><div class="line">orderitems.order_num = orders.order_num;</div><div class="line">SELECT cust_name, cust_contact FROM productcustomers;</div><div class="line">SELECT cust_name, cust_contact FROM productcustomers WHERE prod_id=&apos;TNT2&apos;;</div><div class="line">-- 重新格式化检索出的数据</div><div class="line">CREATE VIEW vendorlocations AS SELECT CONCAT(RTRIM(vend_name), &apos;(&apos;, RTRIM(vend_country), &apos;)&apos;) AS vend_title FROM vendors ORDER BY vend_name;</div><div class="line">SELECT * FROM vendorlocations;</div><div class="line">-- 视图过滤不想要的数据</div><div class="line">CREATE VIEW customeremiallist AS SELECT * FROM customers WHERE cust_email IS NOT NULL;</div><div class="line">SELECT * FROM customeremiallist;</div><div class="line">-- 使用视图与计算字段</div><div class="line">CREATE VIEW orderitemsexpanded AS SELECT order_num, prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems;</div><div class="line">SELECT * FROM orderitemsexpanded WHERE order_num=20005;</div><div class="line">-- 查看视图</div><div class="line">SHOW CREATE VIEW orderitemsexpanded;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：&lt;/p&gt;
&lt;p&gt;其中使用的数据库结构和数据为&lt;a href=&quot;http://forta.com/books/0672327120/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://ttxsgoto.github.io/2018/08/25/rabbitmq/"/>
    <id>https://ttxsgoto.github.io/2018/08/25/rabbitmq/</id>
    <published>2018-08-25T07:22:15.000Z</published>
    <updated>2018-08-25T08:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：</p>
<h4 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h4><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持Ajax。</p>
<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p>RabbitMQ中的消息都只能存储在Queue中，生产者（下图中的P）生产消息并最终投递到Queue中，消费者（下图中的C）可以从Queue中获取消息并消费。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/01.png" alt=""><br>多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/02.png" alt=""></p>
<h4 id="Message-acknowledgment-确认机制"><a href="#Message-acknowledgment-确认机制" class="headerlink" title="Message acknowledgment(确认机制)"></a>Message acknowledgment(确认机制)</h4><p>在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。<br>这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑,另外pub message是没有ack的。<br>rabbitmq_producer_ack.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto"</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置指定队列名称，body往队列中发送消息</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">''</span>,</div><div class="line">                          routing_key=<span class="string">"ttxsgoto"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i))</div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_ack.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto"</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"ok"</span>)</div><div class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class="comment"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">"ttxsgoto"</span>,</div><div class="line">                      no_ack=<span class="keyword">False</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h4 id="Message-durability-持久化"><a href="#Message-durability-持久化" class="headerlink" title="Message durability(持久化)"></a>Message durability(持久化)</h4><p>如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。<br>rabbitmq_producer_ack_durable.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class="line"><span class="comment"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto01"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置指定队列名称，body往队列中发送消息</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">''</span>,</div><div class="line">                          routing_key=<span class="string">"ttxsgoto01"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_ack_durable.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto01"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"ok"</span>)</div><div class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class="comment"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">"ttxsgoto01"</span>,</div><div class="line">                      no_ack=<span class="keyword">False</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<p>说明：消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来；此时可以通过rabbitmq web管理页面看到队列ttxsgoto01的Parameters有一个D属性，表示durable=True</p>
<h4 id="Prefetch-count-每发送数"><a href="#Prefetch-count-每发送数" class="headerlink" title="Prefetch count(每发送数)"></a>Prefetch count(每发送数)</h4><p>如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个消息的处理时间不同，就有可能会导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息<br>rabbitmq_producer_ack_durable_qos.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class="line"><span class="comment"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto02"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置指定队列名称，body往队列中发送消息</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">''</span>,</div><div class="line">                          routing_key=<span class="string">"ttxsgoto02"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_ack_durable_qos.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto02"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"ok"</span>)</div><div class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class="comment"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 表示谁来获取，不再按照奇偶数排列</span></div><div class="line">channel.basic_qos(prefetch_count=<span class="number">1</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">"ttxsgoto02"</span>,</div><div class="line">                      no_ack=<span class="keyword">False</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h4 id="Exchange-交换器"><a href="#Exchange-交换器" class="headerlink" title="Exchange(交换器)"></a>Exchange(交换器)</h4><p>在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际的情况是，生产者将消息发送到Exchange（交换器，下图中的X），由Exchange将消息路由到一个或多个Queue中（或者丢弃）。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/03.png" alt=""></p>
<h4 id="routing-key"><a href="#routing-key" class="headerlink" title="routing key"></a>routing key</h4><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。（routing key + exchange type + binding key）<br>在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。<br>RabbitMQ为routing key设定的长度限制为255 bytes</p>
<h4 id="Binding-绑定到Queue"><a href="#Binding-绑定到Queue" class="headerlink" title="Binding(绑定到Queue)"></a>Binding(绑定到Queue)</h4><p>RabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由到指定的Queue了。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/04.png" alt=""></p>
<h4 id="Binding-key"><a href="#Binding-key" class="headerlink" title="Binding key"></a>Binding key</h4><p>在绑定（Binding）Exchange与Queue的同时，一般会指定一个binding key；消费者将消息发送给Exchange时，一般会指定一个routing key；当binding key与routing key相匹配时，消息将会被路由到对应的Queue中。<br>在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key。<br>binding key 并不是在所有情况下都生效，它依赖于Exchange Type，比如fanout类型的Exchange就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。</p>
<h4 id="Exchange-Types"><a href="#Exchange-Types" class="headerlink" title="Exchange Types"></a>Exchange Types</h4><p>RabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种,一般headers使用较少，不做演示说明，下面分别进行介绍</p>
<h5 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h5><p>fanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/05.png" alt=""><br>上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。<br>rabbitmq_producer_fanout.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 指定exchange和对应的类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_fanout"</span>,</div><div class="line">                         exchange_type=<span class="string">'fanout'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置exchange，没有指定routing_key，队列随机</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">'test_fanout'</span>,</div><div class="line">                          routing_key=<span class="string">"abc"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_fanout.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_fanout"</span>,  <span class="comment"># 创建一个exchange</span></div><div class="line">                         exchange_type=<span class="string">"fanout"</span>)  <span class="comment"># 任何发送到fanout exchange的消息都会被转发到和exchange绑定的queue上</span></div><div class="line"> </div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line"> </div><div class="line"><span class="comment"># 绑定，exchange绑定后端队列</span></div><div class="line">channel.queue_bind(exchange=<span class="string">"test_fanout"</span>,</div><div class="line">                   queue=queue_name)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="comment"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h5 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h5><p>direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/06.png" alt=""><br>以上图的配置为例，我们以routingKey=”error”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；如果我们以routingKey=”info”或routingKey=”warning”来发送消息，则消息只会路由到Queue2。如果我们以其他routingKey发送消息，则消息不会路由到这两个Queue中。<br>rabbitmq_producer_direct.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class="line"><span class="comment"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class="line"><span class="comment"># 结论：当我们将发布者的key设置成Error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 指定exchange和对应的类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_direct"</span>,</div><div class="line">                         exchange_type=<span class="string">'direct'</span>)</div><div class="line">typeinfo = <span class="string">'info'</span></div><div class="line"> </div><div class="line"><span class="comment"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">'test_direct'</span>,</div><div class="line">                          routing_key=typeinfo,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_direct1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class="line"><span class="comment"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_direct"</span>,  <span class="comment"># 创建一个exchange</span></div><div class="line">                         exchange_type=<span class="string">"direct"</span>)</div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line"> </div><div class="line">typeinfo = [<span class="string">'error'</span>, <span class="string">'info'</span>, ]</div><div class="line"> </div><div class="line"><span class="comment"># 绑定，exchange绑定后端队列</span></div><div class="line"><span class="keyword">for</span> type1 <span class="keyword">in</span> typeinfo:</div><div class="line">    channel.queue_bind(exchange=<span class="string">"test_direct"</span>, queue=queue_name, routing_key=type1)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s --- %s"</span> % (method.routing_key, body))</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="comment"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_direct2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class="line"><span class="comment"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_direct"</span>,  <span class="comment"># 创建一个exchange</span></div><div class="line">                         exchange_type=<span class="string">"direct"</span>)</div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line"> </div><div class="line">typeinfo = [<span class="string">'error'</span>, ]</div><div class="line"> </div><div class="line"><span class="comment"># 绑定，exchange绑定后端队列</span></div><div class="line"><span class="keyword">for</span> type1 <span class="keyword">in</span> typeinfo:</div><div class="line">    channel.queue_bind(exchange=<span class="string">"test_direct"</span>, queue=queue_name, routing_key=type1)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s --- %s"</span> % (method.routing_key, body))</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="comment"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<p>结论：当我们将发布者的key设置成error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息。</p>
<h5 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h5><p>direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：</p>
<ul>
<li><p>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”</p>
</li>
<li><p>binding key与routing key一样也是句点号“. ”分隔的字符串</p>
</li>
<li><p>binding key中可以存在两种特殊字符“<em>”与“#”，用于做模糊匹配，其中“</em>”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）</p>
</li>
</ul>
<p><img src="https://ttxsgoto.github.io/img/rabbitmq/07.png" alt=""></p>
<p>以上图中的配置为例，routingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，routingKey=”lazy.orange.fox”的消息会路由到Q1，routingKey=”lazy.brown.fox”的消息会路由到Q2，routingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，因为它们没有匹配任何bindingKey。<br>rabbitmq_producer_topic.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class="line"><span class="comment"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入"路由值"和"关键字"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class="line"><span class="comment"># # ：表示可以匹配0个或多个单词</span></div><div class="line"><span class="comment"># * ：表示只能匹配一个单词</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 指定exchange和对应的类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_topic"</span>,</div><div class="line">                         exchange_type=<span class="string">'topic'</span>)</div><div class="line"> </div><div class="line">routing_key = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'anonymous'</span></div><div class="line">message = <span class="string">''</span>.join(sys.argv[<span class="number">2</span>:]) <span class="keyword">or</span> <span class="string">'Hello Chengdu!'</span></div><div class="line"> </div><div class="line"><span class="comment"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class="line">channel.basic_publish(exchange=<span class="string">'test_topic'</span>, routing_key=routing_key, body=message)</div><div class="line"> </div><div class="line">print(<span class="string">" Sent routing_key:%s ——&gt; body:%s "</span> % (routing_key, message))</div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_topic.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class="line"><span class="comment"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入"路由值"和"关键字"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个exchange,并指定类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_topic"</span>,</div><div class="line">                         exchange_type=<span class="string">"topic"</span>)</div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">queue_name = result.method.queue</div><div class="line">binding_keys = sys.argv[<span class="number">1</span>:]</div><div class="line"> </div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> binding_keys:</div><div class="line">    sys.stderr.write(<span class="string">"Usage: %s [binding_key]...\n"</span> % sys.argv[<span class="number">0</span>])</div><div class="line">    sys.exit(<span class="number">0</span>)</div><div class="line"> </div><div class="line"><span class="keyword">for</span> binding_key <span class="keyword">in</span> binding_keys:</div><div class="line">    channel.queue_bind(exchange=<span class="string">"test_topic"</span>, queue=queue_name, routing_key=binding_key)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s -----%s "</span> % (method.routing_key, body))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">添加用户：</div><div class="line">rabbitmqctl add_user abc abc</div><div class="line"> </div><div class="line">添加权限：</div><div class="line">rabbitmqctl set_permissions -p &quot;/&quot; abc &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</div><div class="line"> </div><div class="line">设置用户标签：</div><div class="line">rabbitmqctl set_user_tags abc administrator</div><div class="line"> </div><div class="line">删除用户：</div><div class="line">rabbitmqctl delete_user guest</div><div class="line"> </div><div class="line">修改密码：</div><div class="line">rabbitmqctl change_password   username  newpassword</div><div class="line"> </div><div class="line">list_users</div><div class="line">add_vhost   vhostpath</div><div class="line">rabbitmqctl list_user_permissions abc  </div><div class="line">list_queues </div><div class="line">list_exchanges</div><div class="line">list_bindings</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：&lt;/p&gt;
&lt;h4 id=&quot;RabbitMQ简介&quot;&gt;&lt;a href=&quot;#RabbitMQ简介&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ简介&quot;&gt;&lt;/a&gt;Ra
    
    </summary>
    
      <category term="中间件" scheme="https://ttxsgoto.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="RabbitMQ" scheme="https://ttxsgoto.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 基本用法</title>
    <link href="https://ttxsgoto.github.io/2018/08/10/python-asyncio-basic/"/>
    <id>https://ttxsgoto.github.io/2018/08/10/python-asyncio-basic/</id>
    <published>2018-08-10T03:58:11.000Z</published>
    <updated>2018-08-10T09:39:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>同时开启多个任务，但一次只执行一个，当执行的任务遇到阻塞，就切换到下一个任务继续执行，<br>以期节省阻塞所占用的时间</p>
<p>要实现异步处理，需要有挂起的操作，当一个任务需要等待 IO 结果的时候，可以挂起当前任务，转而去执行其他任务</p>
<ol>
<li>event_loop： 事件循环，把一些函数注册到这个事件循环中，当条件满足时，就执行对应的方法</li>
<li>coroutine： 协程，可以看做一个协程对象类型，把协程对象注册到事件循环中，满足条件时被调用； async关键字来定义一个方法，这个方法在调用时不会立刻执行，而是返回一个协程对象</li>
<li>task： 任务，它是对协程对象的进一步封装，包含了任务的各个状态</li>
<li>future： 代表即将执行或者还没有执行的任务的结果，可以等同与task</li>
<li>async： 用于定义协程， 协程函数不能直接调用，直接调用协程函数得到的是协程对象(<coroutine object="" execute="" at="" 0x10359c938="">)</coroutine></li>
<li>await：用来将阻塞方法进行挂起</li>
</ol>
<h4 id="await-后的对象必须为如下的格式"><a href="#await-后的对象必须为如下的格式" class="headerlink" title="await 后的对象必须为如下的格式"></a>await 后的对象必须为如下的格式</h4><ul>
<li>原生的coroutine对象</li>
<li>一个由types.coroutine()修饰的生成器，这个生成器可以返回 coroutine 对象</li>
<li>一个包含 __await 方法的对象返回的一个迭代器。</li>
</ul>
<h4 id="asyncio模块实例"><a href="#asyncio模块实例" class="headerlink" title="asyncio模块实例"></a>asyncio模块实例</h4><h5 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></div><div class="line">    print(<span class="string">'No. '</span>, x)</div><div class="line"> </div><div class="line">coroutine = execute(<span class="number">2</span>)</div><div class="line"> </div><div class="line">print(<span class="string">'Coroutine--&gt;'</span>, coroutine)    <span class="comment"># 协程对象</span></div><div class="line">print(<span class="string">'After calling execute'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 创建事件循环</span></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line"> </div><div class="line"><span class="comment"># 方法一:将coroutine封装成task对象</span></div><div class="line"><span class="comment"># task = loop.create_task(coroutine)</span></div><div class="line"><span class="comment"># 方法二:通过 asyncio 的 ensure_future() 方法, 将coroutine封装成task对象,这样可以不借助于loop来定义,</span></div><div class="line"><span class="comment">#即使没有声明loop也可以提前定义好task对象</span></div><div class="line">task = asyncio.ensure_future(coroutine)</div><div class="line">task.add_done_callback(callback)    <span class="comment"># task添加回调函数(通过task.result()获取返回值)</span></div><div class="line"> </div><div class="line">print(<span class="string">'Task:'</span>, task)  <span class="comment"># 查看任务task的状态</span></div><div class="line"><span class="comment"># Task: &lt;Task pending coro=&lt;execute() ...</span></div><div class="line"><span class="comment"># 将协程对象注册到事件循环中</span></div><div class="line">loop.run_until_complete(task)</div><div class="line"> </div><div class="line">print(<span class="string">'Task:'</span>, task)</div><div class="line"><span class="comment"># Task: &lt;Task finished coro=&lt;execute() done ...</span></div><div class="line">print(<span class="string">'Task result: '</span>, task.result()) <span class="comment"># task在fiinished状态时,直接读取task的result方法，得到返回值</span></div><div class="line"><span class="comment"># loop.run_until_complete(coroutine)</span></div><div class="line">print(<span class="string">'After calling loop'</span>)</div></pre></td></tr></table></figure>
<h5 id="多任务执行"><a href="#多任务执行" class="headerlink" title="多任务执行"></a>多任务执行</h5><p>定义一个task列表，然后使用asyncio的wait()方法即可执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">now = time.time()</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(number)</span>:</span></div><div class="line">    <span class="keyword">await</span> asyncio.sleep(number)</div><div class="line">    <span class="keyword">return</span> number</div><div class="line"> </div><div class="line">tasks = [asyncio.ensure_future(num(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</div><div class="line">print(<span class="string">'Tasks-'</span>, tasks)</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))    <span class="comment"># asyncio.wait()用于执行tasks</span></div><div class="line">print(<span class="string">'Tasks-'</span>, tasks)</div><div class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</div><div class="line">    print(<span class="string">'Task Result: '</span>, task.result())</div><div class="line"> </div><div class="line">print(<span class="string">'time--&gt;'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>
<h5 id="协程嵌套"><a href="#协程嵌套" class="headerlink" title="协程嵌套"></a>协程嵌套</h5><p>即一个协程中await了另外一个协程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">now = time.time()</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(number)</span>:</span></div><div class="line">    <span class="keyword">await</span> asyncio.sleep(number)</div><div class="line">    <span class="keyword">return</span> number</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    tasks = [asyncio.ensure_future(num(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line"></div><div class="line">    <span class="comment"># _tasks = await asyncio.gather(*tasks) #  asyncio.gather创建协程对象,await的返回值就是协程运行的结果</span></div><div class="line">    _tasks, pending = <span class="keyword">await</span> asyncio.wait(tasks) <span class="comment"># asyncio.wait挂起协程,Returns two sets of Future: (done, pending).</span></div><div class="line">    print(<span class="string">'-----'</span>, _tasks )</div><div class="line"></div><div class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> _tasks: <span class="comment"># 在函数里面返回结果</span></div><div class="line">        print((<span class="string">'wait result task-&gt;'</span>, task.result()))</div><div class="line">        print(<span class="string">'gather result task-&gt;'</span>, task)</div><div class="line">    <span class="keyword">return</span> _tasks</div><div class="line"> </div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">results = loop.run_until_complete(main())</div><div class="line"> </div><div class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">    print((<span class="string">'wait result task-&gt;'</span>, result.result()))</div><div class="line">    <span class="comment"># print('gather result task-&gt;', result)</span></div><div class="line"> </div><div class="line">print(<span class="string">'TIME:'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;async-await&quot;&gt;&lt;a href=&quot;#async-await&quot; class=&quot;headerlink&quot; title=&quot;async/await&quot;&gt;&lt;/a&gt;async/await&lt;/h3&gt;&lt;h4 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;head
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="asyncio" scheme="https://ttxsgoto.github.io/tags/asyncio/"/>
    
  </entry>
  
  <entry>
    <title>Mysql索引</title>
    <link href="https://ttxsgoto.github.io/2018/04/15/yw-mysql-index/"/>
    <id>https://ttxsgoto.github.io/2018/04/15/yw-mysql-index/</id>
    <published>2018-04-15T14:34:24.000Z</published>
    <updated>2018-04-16T02:55:06.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>B-Tree索引：mysql引擎默认支持这种索引</p>
<p>MyISAM 使用前缀技术使索引更小<br>InnoDB 按照原数据格式进行存储</p>
<p>B-Tree索引可以快速访问数据，不再需要进行全表扫描获取需要的数据，从索引的根节点开始进行搜索</p>
<h4 id="Mysql索引原理"><a href="#Mysql索引原理" class="headerlink" title="Mysql索引原理"></a>Mysql索引原理</h4><h5 id="b-树介绍"><a href="#b-树介绍" class="headerlink" title="b+树介绍"></a>b+树介绍</h5><p><img src="https://ttxsgoto.github.io/img/mysql/btree_index.png" alt=""><br>如上图，是一颗b+树。浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含<br>几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。</p>
<p>真实的数据存在于叶子节点，即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中</p>
<h5 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h5><p>在上图中，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高</p>
<h5 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h5><p>(1) 索引字段要尽量的小。</p>
<p>通过上面b+树的查找过程，或者通过真实的数据存在于叶子节点这个事实可知，IO次数取决于b+数的高度h。</p>
<p>假设当前数据表的数据量为N，每个磁盘块的数据项的数量是m，则树高h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；</p>
<p>而m = 磁盘块的大小/数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的；如果数据项占的空间越小，数据项的数量m越多，树的高度h越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。</p>
<p>(2) 索引的最左匹配特性</p>
<p>当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p>
<h4 id="Mysql索引类型"><a href="#Mysql索引类型" class="headerlink" title="Mysql索引类型"></a>Mysql索引类型</h4><ul>
<li><p>主键索引 PRIMARY KEY</p>
<p>  它是一种特殊的唯一索引，不允许有空值,一般是在建表的时候同时创建主键索引</p>
</li>
<li><p>唯一索引 UNIQUE</p>
<p>  唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD UNIQUE (column)</p>
</li>
<li><p>普通索引 INDEX</p>
<p>  这是最基本的索引，它没有任何限制。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD INDEX index_name (column)</p>
</li>
<li><p>组合索引 INDEX</p>
<p>  组合索引，即一个索引包含多个列。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3)</p>
</li>
<li><p>全文索引 FULLTEXT</p>
<p>  全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用分词技术等多种算法智能分析出文本文字中关键字词的频率及重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。<br>  可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD FULLTEXT (column)</p>
</li>
</ul>
<h4 id="索引优点"><a href="#索引优点" class="headerlink" title="索引优点"></a>索引优点</h4><ul>
<li>索引大大减少了服务器需要扫描的数据量</li>
<li>索引可以帮助服务器避免排序和临时表</li>
<li>索引可以将随机IO变成顺序IO</li>
</ul>
<h4 id="建索引的策略"><a href="#建索引的策略" class="headerlink" title="建索引的策略"></a>建索引的策略</h4><ol>
<li><p>最左前缀匹配原则</p>
<p> mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整</p>
<p> 一般情况，在创建多列索引时，where子句中使用最频繁的一列放在最左边</p>
</li>
<li><p>=和in可以乱序</p>
<p> 比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>
</li>
<li><p>尽量选择区分度高的作为索引</p>
<p> 区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p>
</li>
<li><p>索引列不能参与计算，保持列“干净”</p>
</li>
<li><p>尽量的扩展索引，不要新建索引</p>
<p> 比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p>
</li>
</ol>
<h4 id="查询分析器-explain命令"><a href="#查询分析器-explain命令" class="headerlink" title="查询分析器-explain命令"></a>查询分析器-explain命令</h4><p> EXPLAIN SELECT * from trip_coord WHERE city=”cd”\G;<br> 对应的字段说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</div><div class="line">- select_type: SELECT 查询的类型.</div><div class="line">- table: 查询的是哪个表</div><div class="line">- type: join 类型</div><div class="line">- possible_keys: 此次查询中可能选用的索引</div><div class="line">- key: 此次查询中确切使用到的索引.</div><div class="line">- key_len: 索引长度</div><div class="line">- ref: 哪个字段或常数与 key 一起被使用</div><div class="line">- rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</div><div class="line">- extra: 额外的信息</div></pre></td></tr></table></figure></p>
<p>其中重要的字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">select_type:</div><div class="line">- SIMPLE, 表示此查询不包含 UNION 查询或子查询</div><div class="line">- PRIMARY, 表示此查询是最外层的查询</div><div class="line">- UNION, 表示此查询是 UNION 的第二或随后的查询</div><div class="line">- DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询</div><div class="line">- UNION RESULT, UNION 的结果</div><div class="line">- SUBQUERY, 子查询中的第一个 SELECT</div><div class="line">- DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</div><div class="line">- DERIVED：派生表的 SELECT(FROM 子句的子查询)</div><div class="line">type:</div><div class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</div><div class="line">ALL 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.</div><div class="line">key:</div><div class="line">MySQL 在当前查询时所真正使用到的索引.</div><div class="line">key_len:</div><div class="line">表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到</div><div class="line">ref:</div><div class="line">显示索引的哪一列被使用了，如果可能的话，是一个常数</div><div class="line">rows:</div><div class="line">估算 SQL 要查找到结果集需要扫描读取的数据行数,原则上rows越小越好</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;索引类型&quot;&gt;&lt;a href=&quot;#索引类型&quot; class=&quot;headerlink&quot; title=&quot;索引类型&quot;&gt;&lt;/a&gt;索引类型&lt;/h4&gt;&lt;p&gt;B-Tree索引：mysql引擎默认支持这种索引&lt;/p&gt;
&lt;p&gt;MyISAM 使用前缀技术使索引更小&lt;br&gt;InnoDB 按
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>(转)优化DRF的性能</title>
    <link href="https://ttxsgoto.github.io/2018/04/14/rest-framwork-serializer-efficient/"/>
    <id>https://ttxsgoto.github.io/2018/04/14/rest-framwork-serializer-efficient/</id>
    <published>2018-04-14T04:05:12.000Z</published>
    <updated>2018-04-14T04:14:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>看似简单直观的 Django REST Framework 及其<a href="http://www.django-rest-framework.org/api-guide/relations/#nested-relationships" target="_blank" rel="external">嵌套序列化</a>可能会大大降低你的 API 端的性能。你的服务器的其他部分的响应能力也会被某一个低效的 REST API 影响<br>问题的根源就是 「N+1 selects problem」；首先查询数据库一次得到表中的数据（例如，Customers），然后每个用户的其他字段又需要循环不止一次地查询数据库（例如 customer.country.Name）。使用 Django 的 ORM，很容易造成这个问题，而使用 DRF，同样会造成这个问题。</p>
<p>幸运的是，目前有修复 Django REST Framework 性能问题的解决方法，而且不需要对代码进行重大重组。它只是需要使用未充分利用的 select_related 和 prefetch_related 方法来执行所谓的「预加载」。</p>
<h4 id="为什么-Django-REST-Framework-那么容易造成这个问题"><a href="#为什么-Django-REST-Framework-那么容易造成这个问题" class="headerlink" title="为什么 Django REST Framework 那么容易造成这个问题"></a>为什么 Django REST Framework 那么容易造成这个问题</h4><p>当你建立一个 DRF 视图时，你经常需要从多个相关表中返回相应的数据。写这样的功能是很简单的，DRF文档中有详细的介绍。不过不幸的是，只要你在序列化中使用嵌套关系，你就在拿你的性能开玩笑，像很多的性能问题一样，它往往只出现有大型数据集的真实生产环境中。</p>
<p>这种情况发生就是因为 Django 的 ORM 是惰性的，它只取出当前查询所需响应最小的数据。它不知道你是否有成百上千的相同或相似的数据也需要取出来。</p>
<p>况且如今，当我们谈到数据库型网站时，一般情况下，最重要的响应指标就是数据库的访问次数。</p>
<p>在 DRF 视图中，我们每次序列化有嵌套关系的数据时都会出现问题，如下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span>  </div><div class="line">    <span class="comment"># This can kill performance!</span></div><div class="line">    order_descriptions = serializers.StringRelatedField(many=<span class="keyword">True</span>) </div><div class="line">    <span class="comment"># So can this, same exact problem...</span></div><div class="line">    orders = OrderSerializer(many=<span class="keyword">True</span>, read_only=<span class="keyword">True</span>) <span class="comment"># This can kill performance!</span></div></pre></td></tr></table></figure></p>
<p>CustomerSerializer 函数里面是这么运行的：</p>
<ul>
<li>获取所有的 customers (需要往返到数据库)</li>
<li>对于第一个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>
<li>对于第二个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>
<li>对于第三个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>
<li>对于第四个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>
<li>对于第五个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>
<li>对于第六个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>
<li>。。。。终于意识到，千万不要有更多的用户</li>
</ul>
<h4 id="解决-Django-「懒惰」的基本方法"><a href="#解决-Django-「懒惰」的基本方法" class="headerlink" title="解决 Django 「懒惰」的基本方法"></a>解决 Django 「懒惰」的基本方法</h4><p>现在我们解决这个问题的方法就是「预加载」。从本质上讲，就是你提前警告 Django ORM 你要一遍又一遍的告诉它同样无聊的指令。在上面的例子中，在 DRF 开始获取前很简单地加上这句话就搞定了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">queryset = queryset.prefetch_related(<span class="string">'orders'</span>)</div></pre></td></tr></table></figure></p>
<p>当 DRF 调用上述相同序列化 customers 时，出现的是这种情况：</p>
<ul>
<li>获取所有 customers（执行两个往返数据库操作，第一个是获取 customers，第二个获取相关 customers 的所有相关的 orders。）</li>
<li>对于第一个返回的 customers，获取其 order（不需要访问数据库，我们已经在上一步中获取了所需要的数据）</li>
<li>对于第二个返回的 customers，获取其 order （不需要访问数据库）</li>
<li>对于第三个返回的 customers，获取其 order （不需要访问数据库）</li>
<li>对于第四个返回的 customers，获取其 order （不需要访问数据库）</li>
<li>对于第五个返回的 customers，获取其 order （不需要访问数据库）</li>
<li>对于第六个返回的 customers，获取其 order （不需要访问数据库）</li>
<li>你又意识到，你可以有了很多 customers，已经不需要再继续等待去数据库。</li>
</ul>
<p>其实 Django ORM 的「预备」是在第1步进行请求，它在本地高速缓存的数据能够提供步骤2+所要求的数据。与之前往返数据库相比从本地缓存数据中读取数据基本上是瞬时的，所以我们在有很多 customers 时就获得了巨大的性能加速。</p>
<h4 id="解决-Django-REST-Framework-性能问题的标准化模式"><a href="#解决-Django-REST-Framework-性能问题的标准化模式" class="headerlink" title="解决 Django REST Framework 性能问题的标准化模式"></a>解决 Django REST Framework 性能问题的标准化模式</h4><p>我们已经确定了一个优化 Django REST Framework 性能问题的通用模式，那就是每当序列化查询嵌套字段时，我们就添加一个新的 @staticmethod 名叫 setup_eager_loading，像这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span>  </div><div class="line">    orders = OrderSerializer(many=<span class="keyword">True</span>, read_only=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_eager_loading</span><span class="params">(cls, queryset)</span>:</span></div><div class="line">        <span class="string">""" Perform necessary eager loading of data. """</span></div><div class="line">        queryset = queryset.prefetch_related(<span class="string">'orders'</span>)</div><div class="line">        <span class="keyword">return</span> queryset</div></pre></td></tr></table></figure></p>
<p>这样，不管哪里要用到这个序列化，都只需在调用序列化前简单调用 setup_eager_loading ，就像这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">customer_qs = Customers.objects.all()  </div><div class="line">customer_qs = CustomerSerializer.setup_eager_loading(customer_qs)  <span class="comment"># Set up eager loading to avoid N+1 selects  </span></div><div class="line">post_data = CustomerSerializer(customer_qs, many=<span class="keyword">True</span>).data</div></pre></td></tr></table></figure></p>
<p>或者，如果你有一个 APIView 或 ViewSet，你可以在 get_queryset 方法里调用 setup_eager_loading：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span>  </div><div class="line">    queryset = Customers.objects.all()</div><div class="line">    <span class="comment"># Set up eager loading to avoid N+1 selects</span></div><div class="line">    queryset = self.get_serializer_class().setup_eager_loading(queryset)  </div><div class="line">    <span class="keyword">return</span> queryset</div></pre></td></tr></table></figure></p>
<h4 id="那么怎样编写-setup-eager-loading"><a href="#那么怎样编写-setup-eager-loading" class="headerlink" title="那么怎样编写 setup_eager_loading"></a>那么怎样编写 setup_eager_loading</h4><p>想要解决 Django 的性能问题，最困难的部分就是要熟悉 select_related ，我们将详细介绍它们在 Django ORM 和 Django REST Framework 中怎样使用。</p>
<ul>
<li>select_related：Django ORM 最简单的预加载工具，对于所有一对一或多对一的数据关系，你都需要从同一个父对象获取数据，如客户的公司名称。这个会被翻译成 SQL 的 join 操作，这样父对象的数据就和子对象的数据一起取回来了。（<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related" target="_blank" rel="external">参见官方文档</a>）</li>
<li>prefetch_related：对于更复杂的关系，即每个结果有多行（例如 many=True ），像多对一或多对多的数据关系，比如上述客户的订单，这转化一个二级 SQL 查询，通常有很长的 WHERE … IN ，从中只选择相关的行。（<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related" target="_blank" rel="external">参见官方文档</a>）</li>
<li>Prefetch：用于复杂 prefetch_related 查询，例如过滤子集。它也可以嵌套setup_eager_loading 进行调用。 （<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related" target="_blank" rel="external">参见官方文档</a>）</li>
</ul>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="http://blog.oneapm.com/apm-tech/304.html" target="_blank" rel="external">http://blog.oneapm.com/apm-tech/304.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看似简单直观的 Django REST Framework 及其&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/relations/#nested-relationships&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/categories/DRF/"/>
    
    
      <category term="ORM" scheme="https://ttxsgoto.github.io/tags/ORM/"/>
    
      <category term="Serializer" scheme="https://ttxsgoto.github.io/tags/Serializer/"/>
    
  </entry>
  
  <entry>
    <title>Django ORM数据查询操作优化</title>
    <link href="https://ttxsgoto.github.io/2018/04/13/django-orm-queryset/"/>
    <id>https://ttxsgoto.github.io/2018/04/13/django-orm-queryset/</id>
    <published>2018-04-13T14:47:47.000Z</published>
    <updated>2018-04-14T04:12:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天研究了一下django ORM查询优化，响应时间慢问题，主要原因还是代码规范和方法使用不当，如果正确使用相应方法，大部分的性能问题都是可以解决，记录如下：</p>
<h4 id="Django-QuerySet懒执行"><a href="#Django-QuerySet懒执行" class="headerlink" title="Django QuerySet懒执行"></a>Django QuerySet懒执行</h4><p>只有访问到对应的数据时，才会访问数据库，如果再次读取查询到的数据时，不会触发访问数据库操作，返回的是QuerySet、ValuesQuerySet、ValuesListQuerySet、Model实例<br>会执行数据库操作的操作有：</p>
<ul>
<li>Iteration，对Queryset进行迭代操作</li>
<li>slicing分片， 如queryset[:5]</li>
<li>序列化Pickling</li>
<li>repr()/str()将对象转为字符串</li>
<li>len()/list()/bool()/print()操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">######## 实例一 ########</span></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</div><div class="line">users = User.objects.all()</div><div class="line">users = User.objects.all().select_related(<span class="string">'group'</span>)</div><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">    print(user.name) <span class="comment"># 这里只查询一次数据库</span></div><div class="line">    print(user.group.name) <span class="comment"># 这里的group为外键，查询次数依次增加, 可通过select_related()来解决多次查询数据库问题</span></div><div class="line">    l = connection.queries</div><div class="line">    print(len(l), l)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">######## 实例二 ########</span></div><div class="line"><span class="comment"># 这时不会访问数据库</span></div><div class="line">users = User.objects.filter(age=<span class="number">25</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 这里需要访问数据，执行数据库查询操作</span></div><div class="line">list(users) <span class="keyword">or</span> <span class="keyword">if</span> users: <span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="comment"># 再次读取数据，不会访问数据库</span></div><div class="line">user = users[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h4 id="使用select-related-提升关联外键-一对一关联查询"><a href="#使用select-related-提升关联外键-一对一关联查询" class="headerlink" title="使用select_related 提升关联外键/一对一关联查询"></a>使用select_related 提升关联外键/一对一关联查询</h4><p>Model中一般会定义外键关联，查询如果编写不当，会多次访问数据库查询，影响效率；通过select_related方法来查询外键(ForeignKey)或一对一(OneToOneField)关系，其实就是sql语句中join操作；在后面使用外键关系查询时将不需要执行数据库查询</p>
<p>使用prefetch_related提升关联多对多或多对一查询<br>prefetch_related 执行一个单独的查找，它允许预先读取多对多和多对一的对象数据，这是 select_related 做不到的。另外 perfetch_related 也可以与通用外键和关系一起使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">######## 实例一 ########</span></div><div class="line">DeviceInfo.objects.filter(operator_id=<span class="string">'dc8b37483b27402d90a5a28d13ce330c'</span>)</div><div class="line"><span class="comment"># 对应sql如下：</span></div><div class="line">SELECT `device_info`.`id`, `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`,  `device_info`.`operator_id` FROM `device_info` WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c</div><div class="line">DeviceInfo.objects.select_related(<span class="string">'operator'</span>).filter(operator_id=<span class="string">'dc8b37483b27402d90a5a28d13ce330c'</span>)</div><div class="line"><span class="comment"># 对应sql如下：</span></div><div class="line">SELECT `device_info`.`id`,  `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`, `device_info`.`operator_id`, `user`.`password`, `user`.`last_login`, `user`.`is_superuser`, `user`.`id`, `user`.`created_at`, `user`.`is_deleted`, `user`.`mobile_number`, `user`.`is_active`, `user`.`is_staff`, `user`.`is_driver`, `user`.`depgroup_id` FROM `device_info` INNER JOIN `user` ON (`device_info`.`operator_id` = `user`.`id`) WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c</div><div class="line"> </div><div class="line"><span class="comment">######## 实例二 ########</span></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    hometown = models.ForeignKey(City)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    author = models.ForeignKey(Person)</div><div class="line"> </div><div class="line">b = Book.objects.select_related(<span class="string">'author__hometown'</span>).get(id=<span class="number">4</span>)</div><div class="line">p = b.author         <span class="comment"># Doesn't hit the database.</span></div><div class="line">c = p.hometown       <span class="comment"># Doesn't hit the database.</span></div><div class="line"> </div><div class="line">b = Book.objects.get(id=<span class="number">4</span>) <span class="comment"># No select_related() in this example.</span></div><div class="line">p = b.author         <span class="comment"># Hits the database.</span></div><div class="line">c = p.hometown       <span class="comment"># Hits the database.</span></div></pre></td></tr></table></figure></p>
<h4 id="不要查询不需要的值"><a href="#不要查询不需要的值" class="headerlink" title="不要查询不需要的值"></a>不要查询不需要的值</h4><ul>
<li>通过values和values_list来限制返回值</li>
<li>通过only指定字段和defer排除字段</li>
<li>如果只需要id，可以使用queryset.values_list(‘id’, flat=True)</li>
</ul>
<h4 id="直接使用外键值"><a href="#直接使用外键值" class="headerlink" title="直接使用外键值"></a>直接使用外键值</h4><p>如果只想获取外键id，可通过obj_id的方式获取，优先于obj.id;obj.id方式会为子表内容保存额外查询</p>
<h4 id="用count-代替len-exists-代替if-queryset"><a href="#用count-代替len-exists-代替if-queryset" class="headerlink" title="用count()代替len(), exists()代替if queryset"></a>用count()代替len(), exists()代替if queryset</h4><p>len()方法相当于会把整个queryset遍历一次，把所有的数据都取出来对象化，消耗大量的资源</p>
<h4 id="对缓存的queryset只进行一次遍历，使用iterator"><a href="#对缓存的queryset只进行一次遍历，使用iterator" class="headerlink" title="对缓存的queryset只进行一次遍历，使用iterator()"></a>对缓存的queryset只进行一次遍历，使用iterator()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如此操作可减少数据载入内存中，同时和values一起使用可大大减少内存的使用</span></div><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> User.objects.all().iterator():</div><div class="line">    do_something(user)</div></pre></td></tr></table></figure>
<h4 id="避免多次查询"><a href="#避免多次查询" class="headerlink" title="避免多次查询"></a>避免多次查询</h4><p>筛选表中不同条件的数据时，一般采用写多个查询进行筛选，数据多时严重影响性能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">users = [</div><div class="line"><span class="string">'ttxsgoto01'</span>,</div><div class="line"><span class="string">'ttxsgoto02'</span>,</div><div class="line"><span class="string">'ttxsgoto03'</span>,</div><div class="line">]</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"><span class="comment">######## 实例一 ########</span></div><div class="line"><span class="comment"># 这里会进行多次数据库查询操作</span></div><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">    user1 = User.objects.filter(username=user, age=<span class="number">21</span>)</div><div class="line">    user2 = User.objects.filter(username=user, age=<span class="number">22</span>)</div><div class="line">    user3 = User.objects.filter(username=user, age=<span class="number">23</span>)</div><div class="line">    user4 = User.objects.filter(username=user, sex=<span class="string">'M'</span>)</div><div class="line">    print(user1.count(), user2.count(), user3.count(), user4.count())</div><div class="line"> </div><div class="line"><span class="comment">######## 实例二 ########</span></div><div class="line"><span class="comment"># 减少数据库查询，一次把数据查询出来</span></div><div class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">    _user = User.objects.filter(username=user).values_list(<span class="string">'age'</span>, <span class="string">'sex'</span>)</div><div class="line">    user1 = filter(<span class="keyword">lambda</span> x:<span class="keyword">True</span> <span class="keyword">if</span> x[<span class="number">0</span>]==<span class="number">21</span> <span class="keyword">else</span> <span class="keyword">False</span>, _user)</div><div class="line">    user2 = filter(<span class="keyword">lambda</span> x:<span class="keyword">True</span> <span class="keyword">if</span> x[<span class="number">0</span>]==<span class="number">22</span> <span class="keyword">else</span> <span class="keyword">False</span>, _user)</div><div class="line">    user3 = filter(<span class="keyword">lambda</span> x:<span class="keyword">True</span> <span class="keyword">if</span> x[<span class="number">0</span>]==<span class="number">23</span> <span class="keyword">else</span> <span class="keyword">False</span>, _user)</div><div class="line">    user4 = filter(<span class="keyword">lambda</span> x:<span class="keyword">True</span> <span class="keyword">if</span> x[<span class="number">1</span>]==<span class="string">'M'</span> <span class="keyword">else</span> <span class="keyword">False</span>, _user)</div><div class="line">    print(user1.count(), user2.count(), user3.count(), user4.count())</div><div class="line"><span class="comment"># 如此操作，一个条件只执行一次数据库查询，不同于实例一中会执行多次数据库查询</span></div></pre></td></tr></table></figure></p>
<h4 id="创建表索引"><a href="#创建表索引" class="headerlink" title="创建表索引"></a>创建表索引</h4><p>根据业务需求，创建对应的索引字段</p>
<h4 id="对于复杂的数据库查询操作，使用原生SQL实现"><a href="#对于复杂的数据库查询操作，使用原生SQL实现" class="headerlink" title="对于复杂的数据库查询操作，使用原生SQL实现"></a>对于复杂的数据库查询操作，使用原生SQL实现</h4><h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><h5 id="方法一-code"><a href="#方法一-code" class="headerlink" title="方法一: code"></a>方法一: code</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</div><div class="line">dbsql = connection.queries <span class="comment"># 具体sql执行情况和耗时情况</span></div></pre></td></tr></table></figure>
<h5 id="方法二-shell"><a href="#方法二-shell" class="headerlink" title="方法二: shell"></a>方法二: shell</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- pip install django-extensions</div><div class="line">- INSTALLED_APPS = (</div><div class="line">    ...</div><div class="line">    <span class="string">'django_extensions'</span>,</div><div class="line">    ...</div><div class="line"> )</div><div class="line">- python manage.py shell_plus --<span class="keyword">print</span>-sql <span class="comment"># 查看执行sql和结果</span></div></pre></td></tr></table></figure>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="https://docs.djangoproject.com/en/1.10/topics/db/optimization/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.10/topics/db/optimization/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天研究了一下django ORM查询优化，响应时间慢问题，主要原因还是代码规范和方法使用不当，如果正确使用相应方法，大部分的性能问题都是可以解决，记录如下：&lt;/p&gt;
&lt;h4 id=&quot;Django-QuerySet懒执行&quot;&gt;&lt;a href=&quot;#Django-QueryS
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="ORM" scheme="https://ttxsgoto.github.io/tags/ORM/"/>
    
      <category term="Queryset" scheme="https://ttxsgoto.github.io/tags/Queryset/"/>
    
  </entry>
  
  <entry>
    <title>Python 特殊方法</title>
    <link href="https://ttxsgoto.github.io/2018/02/11/python-magic-function/"/>
    <id>https://ttxsgoto.github.io/2018/02/11/python-magic-function/</id>
    <published>2018-02-11T13:13:59.000Z</published>
    <updated>2018-02-12T09:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>主要说明类的特殊方法(也叫魔法方法)，了解使用场景和方法，使用时方便查询</p>
<h3 id="具体说明"><a href="#具体说明" class="headerlink" title="具体说明"></a>具体说明</h3><h4 id="创建实例和销毁"><a href="#创建实例和销毁" class="headerlink" title="创建实例和销毁"></a>创建实例和销毁</h4><h5 id="new"><a href="#new" class="headerlink" title="__new__"></a>__new__</h5><h5 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h5><h5 id="del"><a href="#del" class="headerlink" title="__del__"></a>__del__</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo01</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""对象实例化调用的第一个方法,在__init__之前, args,kwargs传递给init方法"""</span></div><div class="line">        print(<span class="string">'__new__'</span>)</div><div class="line">        <span class="keyword">return</span> super().__new__(cls)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">    	<span class="string">"""初始化实例操作"""</span></div><div class="line">        print(<span class="string">'__init__'</span>)</div><div class="line">        self.name = name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">    	<span class="string">""" del 时调用，或实例自行销毁时调用"""</span></div><div class="line">        print(<span class="string">'__del__'</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line"> </div><div class="line"> </div><div class="line">foo = Foo01(name=<span class="string">'ttxs'</span>)  <span class="comment"># __init__</span></div><div class="line">print(foo.name)  <span class="comment"># ttxs</span></div><div class="line"><span class="keyword">del</span> foo  <span class="comment"># __del__</span></div></pre></td></tr></table></figure>
<h4 id="属性管理"><a href="#属性管理" class="headerlink" title="属性管理"></a>属性管理</h4><h5 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__"></a>__getattr__</h5><h5 id="getattribute"><a href="#getattribute" class="headerlink" title="__getattribute__"></a>__getattribute__</h5><h5 id="setattr"><a href="#setattr" class="headerlink" title="__setattr__"></a>__setattr__</h5><h5 id="delattr"><a href="#delattr" class="headerlink" title="__delattr__"></a>__delattr__</h5><h5 id="dir"><a href="#dir" class="headerlink" title="__dir__"></a>__dir__</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo02</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">""" 该方法在访问一个不存在的属性时调用 """</span></div><div class="line">        print(<span class="string">'__getattr__'</span>)</div><div class="line">        <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> self.__dict__:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span> super(Foo02, self).__getattr__(item)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="string">""" 该方法在对属性进行赋值和修改时调用,应该避免"无限递归"错误,如: self.name = 'xxx' """</span></div><div class="line">        print(<span class="string">'__setattr__'</span>)</div><div class="line">        <span class="comment"># self.key = value    # 每一次属性赋值时, __setattr__都会被调用，因此不断调用自身导致无限递归</span></div><div class="line">        self.__dict__[key] = value</div><div class="line">        <span class="keyword">return</span> super(Foo02, self).__setattr__(key, value)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">""" 该方法在删除属性时调用 """</span></div><div class="line">        print(<span class="string">'__delattr__'</span>)</div><div class="line">        <span class="comment"># del self.item         # 无限递归, 原因同上</span></div><div class="line">        <span class="keyword">return</span> super(Foo02, self).__delattr__(item)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">""" 该方法在属性被访问时调用,调用__getattr__前必定会调用 __getattribute__ """</span></div><div class="line">        print(<span class="string">'__getattribute__'</span>)</div><div class="line">        <span class="keyword">return</span> super(Foo02, self).__getattribute__(item)</div><div class="line"> </div><div class="line"> </div><div class="line">foo02 = Foo02()</div><div class="line">foo02.abc = <span class="string">'abc'</span>  <span class="comment"># 调用__setattr__方法</span></div><div class="line">print(foo02.abc)  <span class="comment"># 调用__getattribute__方法</span></div><div class="line">print(<span class="string">'error---'</span>, foo02.x)  <span class="comment"># 调用__getattr__方法</span></div><div class="line">foo02.__dict__  <span class="comment"># 调用__getattribute__方法</span></div><div class="line"><span class="keyword">del</span> foo02.abc  <span class="comment"># 调用__delattr__方法</span></div></pre></td></tr></table></figure>
<h4 id="序列表示形式"><a href="#序列表示形式" class="headerlink" title="序列表示形式"></a>序列表示形式</h4><h5 id="str"><a href="#str" class="headerlink" title="__str__"></a>__str__</h5><h5 id="repr"><a href="#repr" class="headerlink" title="__repr__"></a>__repr__</h5><h5 id="bytes"><a href="#bytes" class="headerlink" title="__bytes__"></a>__bytes__</h5><h5 id="doc"><a href="#doc" class="headerlink" title="__doc__"></a>__doc__</h5><h5 id="format"><a href="#format" class="headerlink" title="__format__"></a>__format__</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo03</span>:</span></div><div class="line">    <span class="string">""" 文档展示说明表示 (__doc__)"""</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, id)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.id = id</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" 主要针对程序的调试,调用和使用,如果定义了str函数print会调用str,没有就调用repr函数 """</span></div><div class="line">        print(<span class="string">'__repr__'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">'%s with %s id'</span> % (self.name, self.id)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""print方法时调用"""</span></div><div class="line">        print(<span class="string">'__str__'</span>)</div><div class="line">        <span class="keyword">return</span> self.name.capitalize()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bytes__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'__bytes__'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">'%s in bytes is %s'</span> % (self.name, self.id)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" 调用format方法时 """</span></div><div class="line">        print(<span class="string">'__format__'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">'%s in format is %s'</span> % (self.name, self.id)</div><div class="line"> </div><div class="line"> </div><div class="line">foo03 = Foo03(name=<span class="string">'ttxsgoto'</span>, id=<span class="number">666</span>)</div><div class="line">print(Foo05.__doc__)    <span class="comment"># 说明文档信息</span></div><div class="line">print(foo05)            <span class="comment"># __str__()方法</span></div><div class="line"> </div><div class="line">f = Foo03(name=<span class="string">'ttxsgoto'</span>, id=<span class="number">666</span>)</div><div class="line">f.__format__()</div><div class="line">ff = bytes(f)  <span class="comment"># bytes调用</span></div></pre></td></tr></table></figure>
<h4 id="集合管理"><a href="#集合管理" class="headerlink" title="集合管理"></a>集合管理</h4><h5 id="len"><a href="#len" class="headerlink" title="__len__"></a>__len__</h5><h5 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a>__getitem__</h5><h5 id="setitem"><a href="#setitem" class="headerlink" title="__setitem__"></a>__setitem__</h5><h5 id="delitem"><a href="#delitem" class="headerlink" title="__delitem__"></a>__delitem__</h5><h5 id="contains"><a href="#contains" class="headerlink" title="__contains__"></a>__contains__</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo04</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.value = &#123;&#125;</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.value = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""表示集合长度"""</span></div><div class="line">        <span class="keyword">return</span> len(self.value)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""执行self[item],调用该方法"""</span></div><div class="line">        print(<span class="string">'__getitem__'</span>)</div><div class="line">        <span class="keyword">return</span> self.value[item]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="string">"""执行self[key]=value,调用该方法"""</span></div><div class="line">        print(<span class="string">'__setitem__'</span>)</div><div class="line">        self.value[key] = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="string">"""执行 del self[key],调用该方法"""</span></div><div class="line">        print(<span class="string">'__delitem__'</span>)</div><div class="line">        <span class="keyword">del</span> self.value[key]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""判断item是否在容器中,调用该方法in/not in,如 item in container"""</span></div><div class="line">        print(<span class="string">'__contains__'</span>)</div><div class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.value:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line"> </div><div class="line">foo04 = Foo04(value=&#123;<span class="string">'a'</span>: <span class="string">'a'</span>&#125;)</div><div class="line">foo04[<span class="string">'xx'</span>] = <span class="string">'abc'</span>  <span class="comment"># 调用__setitem__方法</span></div><div class="line">print(foo04[<span class="string">'xx'</span>])  <span class="comment"># 调用__getitem__方法</span></div><div class="line">print(len(foo04))  <span class="comment"># 调用__len__方法</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> <span class="string">'xx'</span> <span class="keyword">in</span> foo04:  <span class="comment"># 调用__contains__方法</span></div><div class="line">    print(<span class="string">'ok'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'error'</span>)</div></pre></td></tr></table></figure>
<h4 id="迭代枚举"><a href="#迭代枚举" class="headerlink" title="迭代枚举"></a>迭代枚举</h4><h5 id="iter"><a href="#iter" class="headerlink" title="__iter__"></a>__iter__</h5><h5 id="next"><a href="#next" class="headerlink" title="__next__"></a>__next__</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> reprlib</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</div><div class="line"> </div><div class="line">RE_WORD = re.compile(<span class="string">'\w+'</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo04</span>:</span></div><div class="line">    <span class="string">""" 通过索引从文本中提取单词 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text)</span>:</span></div><div class="line">        self.text = text</div><div class="line">        self.words = RE_WORD.findall(text)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" 可迭代对象 """</span></div><div class="line">        <span class="keyword">return</span> SentenceIterator(self.words)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self, index)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.words)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Sentence(%s)'</span> % reprlib.repr(self.text)  <span class="comment"># 用于生成大型数据结构的简略字符串表示形式, 默认情况下最多30个字符</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SentenceIterator</span>:</span></div><div class="line">    <span class="string">""" 迭代器 """</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, words)</span>:</span></div><div class="line">        self.words = words</div><div class="line">        self.index = <span class="number">0</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" 返回下一个可用的元素，如果没有，抛出StopIteration异常 """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            word = self.words[self.index]</div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">raise</span> StopIteration()</div><div class="line">        self.index += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> word</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" 返回self，以便在应该使用可迭代对象的地方使用迭代器 """</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"> </div><div class="line"> </div><div class="line">foo04 = Foo04(text=<span class="string">'"The time has come," the Walrus said,'</span>)</div><div class="line"> </div><div class="line">print(foo04)</div><div class="line">print(iter(foo04))</div><div class="line"><span class="keyword">for</span> foo <span class="keyword">in</span> foo04:</div><div class="line">    print(foo)</div><div class="line"> </div><div class="line">print(issubclass(SentenceIterator, abc.Iterator))</div></pre></td></tr></table></figure>
<h4 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h4><h5 id="enter"><a href="#enter" class="headerlink" title="__enter__"></a>__enter__</h5><h5 id="exit"><a href="#exit" class="headerlink" title="__exit__"></a>__exit__</h5><p>参考链接<br><a href="https://ttxsgoto.github.io/2017/04/11/python-contextlib/">https://ttxsgoto.github.io/2017/04/11/python-contextlib/</a></p>
<h4 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h4><h5 id="get"><a href="#get" class="headerlink" title="__get__"></a>__get__</h5><h5 id="set"><a href="#set" class="headerlink" title="__set__"></a>__set__</h5><h5 id="delete"><a href="#delete" class="headerlink" title="__delete__"></a>__delete__</h5><p>参考链接<br><a href="https://ttxsgoto.github.io/2018/01/31/descriptor/">https://ttxsgoto.github.io/2018/01/31/descriptor/</a><br><a href="https://ttxsgoto.github.io/2018/02/01/python-descriptor02/">https://ttxsgoto.github.io/2018/02/01/python-descriptor02/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;主要说明类的特殊方法(也叫魔法方法)，了解使用场景和方法，使用时方便查询&lt;/p&gt;
&lt;h3 id=&quot;具体说明&quot;&gt;&lt;a href=&quot;#具体说明&quot;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="class" scheme="https://ttxsgoto.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>Django 自定义认证字段</title>
    <link href="https://ttxsgoto.github.io/2018/02/05/django-define-auth/"/>
    <id>https://ttxsgoto.github.io/2018/02/05/django-define-auth/</id>
    <published>2018-02-05T14:21:34.000Z</published>
    <updated>2018-02-08T01:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Django默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这类问题。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Django中在底层，维护着”authentication backends”列表，当调用django.contrib.auth.authenticate() 时，会尝试所有的使用通过settings通过AUTHENTICATION_BACKENDS设置的backend来进行认证，默认为<code>django.contrib.auth.backends.ModelBackend</code>，依次验证，如果匹配成功，则停止后续处理，如果后台引发PermissionDenied异常，认证失败且不会检查后面的认证。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>通过用户名或者email进行认证</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</div><div class="line"> </div><div class="line">UserModel = get_user_model()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomizedBackend</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> kwargs:</div><div class="line">            auth = &#123;<span class="string">'username'</span>: kwargs.get(<span class="string">'username'</span>, <span class="string">''</span>)&#125;</div><div class="line">        <span class="keyword">elif</span> <span class="string">'email'</span> <span class="keyword">in</span> kwargs:</div><div class="line">            auth = &#123;<span class="string">'email'</span>: kwargs.get(<span class="string">'email'</span>, <span class="string">''</span>)&#125;</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            auth = &#123;&#125;</div><div class="line">        password = kwargs.get(<span class="string">'password'</span>, <span class="string">''</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            user = UserModel._default_manager.get(**auth)</div><div class="line">        <span class="keyword">except</span> UserModel.DoesNotExist:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> user.check_password(password):</div><div class="line">                <span class="keyword">return</span> user</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(self, user_id)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> UserModel._default_manager.get(pk=user_id)</div><div class="line">        <span class="keyword">except</span> UserModel.DoesNotExist:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<h4 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 默认登录使用的backend</span></div><div class="line">AUTHENTICATION_BACKENDS = (</div><div class="line">    <span class="string">'django.contrib.auth.backends.ModelBackend'</span>,  <span class="comment"># 默认backend</span></div><div class="line">    <span class="string">'apps.auth.backends.CustomizedBackend'</span>,        <span class="comment"># 各backend依次进行验证, 直到某一个验证通过</span></div><div class="line">)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;Django默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Auth" scheme="https://ttxsgoto.github.io/tags/Auth/"/>
    
  </entry>
  
  <entry>
    <title>Python Descriptor描述符02</title>
    <link href="https://ttxsgoto.github.io/2018/02/01/python-descriptor02/"/>
    <id>https://ttxsgoto.github.io/2018/02/01/python-descriptor02/</id>
    <published>2018-02-01T14:30:30.000Z</published>
    <updated>2018-02-05T07:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul>
<li>使用描述符时，实例对象的属性访问会触发描述符的__get__方法</li>
<li>使用描述符时，实例对象的属性赋值会触发描述符的__set__方法</li>
<li>通过obj.__dict__[xxx]=yyy 赋值会跳过描述符</li>
<li>没有__get__方法的覆盖描述符，给对象的属性赋值会触发__set__方法，读取属性时会直接从实例中返回新赋予的值，而不会返回描述符对象， 也就是说读取操作实例属性会遮盖描述符，直接从__dict__中获取</li>
<li>非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性,即获取属性的值将直接通过__dict__中获取</li>
<li>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</li>
<li>类中定义的函数属于绑定方法，因为用户定义的函数都有get方法，所以依附到类上，相当于描述符，为非覆盖性描述符</li>
</ul>
<h4 id="概念描述"><a href="#概念描述" class="headerlink" title="概念描述"></a>概念描述</h4><ul>
<li>描述符类： 实现描述符协议的类</li>
<li>托管类： 把描述符实例声明为类属性的类</li>
<li>描述符实例： 描述符类的各个实例，声明为托管类的类属性</li>
<li>托管实例：托管类的实例</li>
<li>储存属性： 托管实例中存储自身托管属性的属性</li>
<li>托管属性： 托管类中由描述符实例处理的公开属性，值存储在储存属性中， 也就是说，描述符实例和储存属性为托管属性建立了基础</li>
</ul>
<h4 id="描述符实例"><a href="#描述符实例" class="headerlink" title="描述符实例"></a>描述符实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span>:</span></div><div class="line">    <span class="string">""" 描述符类 """</span></div><div class="line">    __counter = <span class="number">0</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        cls = self.__class__</div><div class="line">        prefix = cls.__name__</div><div class="line">        index = cls.__counter</div><div class="line">        self.storage_name = <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class="line">        cls.__counter += <span class="number">1</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        获取对应的属性时, 调用该方法</div><div class="line">        :param instance: 描述符实例</div><div class="line">        :param owner: 托管类的引用(type),通过描述符从托管类中获取属性时用得到</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="keyword">return</span> getattr(instance, self.storage_name)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :param instance: 描述符实例</div><div class="line">        :param value: 托管实例设置的值</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</div><div class="line">            setattr(instance, self.storage_name, value)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0.'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line">    <span class="string">""" 托管类 """</span></div><div class="line">    weight = Quantity() <span class="comment"># 描述符实例</span></div><div class="line">    price = Quantity()   <span class="comment"># 描述符实例</span></div><div class="line">    <span class="comment"># weight, price 为储存属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,desc, weight, price)</span>:</span></div><div class="line">        self.desc = desc</div><div class="line">        self.weight = weight</div><div class="line">        self.price = price</div><div class="line">        <span class="comment"># self.weight, self.price 为托管属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.weight * self.price</div><div class="line"> </div><div class="line"><span class="comment"># 描述符实例为引用类的类属性</span></div><div class="line"> </div><div class="line">line = LineItem(<span class="string">'test01'</span>, <span class="number">12</span>, <span class="number">12.3</span>) <span class="comment"># 托管实例</span></div><div class="line"> </div><div class="line">print(line.weight)  <span class="comment"># 实例对象的属性访问会触发描述符的__get__方法</span></div><div class="line"> </div><div class="line">print(line.subtotal())</div><div class="line"> </div><div class="line">print(LineItem.weight)</div></pre></td></tr></table></figure>
<h4 id="描述符实例重构"><a href="#描述符实例重构" class="headerlink" title="描述符实例重构"></a>描述符实例重构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> abc</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoStorage</span>:</span></div><div class="line">    __counter = <span class="number">0</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        cls = self.__class__</div><div class="line">        prefix = cls.__name__</div><div class="line">        index = cls.__counter</div><div class="line">        self.storage_name = <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class="line">        cls.__counter += <span class="number">1</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="keyword">return</span> getattr(instance, self.storage_name)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        setattr(instance, self.storage_name, value)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validated</span><span class="params">(abc.ABC, AutoStorage)</span>:</span></div><div class="line">    <span class="string">""" 验证相关模块 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="string">""" 把验证操作委托给validate方法"""</span></div><div class="line">        value = self.validate(instance, value)</div><div class="line">        super(Validated, self).__set__(instance, value)</div><div class="line"> </div><div class="line"><span class="meta">    @abc.abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="string">""" 抽象方法 """</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span><span class="params">(Validated)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonBlank</span><span class="params">(Validated)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        value = value.strip()</div><div class="line">        <span class="keyword">if</span> len(value) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value cannot be empty or blank'</span>)</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line">    <span class="string">""" 托管类 """</span></div><div class="line">    weight = Quantity()  <span class="comment"># 描述符实例</span></div><div class="line">    price = Quantity()  <span class="comment"># 描述符实例</span></div><div class="line">    desc = NonBlank()  <span class="comment"># 描述符实例</span></div><div class="line"> </div><div class="line">    <span class="comment"># weight, price 为储存属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, desc, weight, price)</span>:</span></div><div class="line">        self.desc = desc</div><div class="line">        self.weight = weight</div><div class="line">        self.price = price</div><div class="line">        <span class="comment"># self.weight, self.price 为托管属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.weight * self.price</div><div class="line"> </div><div class="line"> </div><div class="line">line = LineItem(<span class="string">'abc'</span>, <span class="number">12</span>, <span class="number">12.3</span>)</div><div class="line">print(line.subtotal())</div></pre></td></tr></table></figure>
<h4 id="覆盖型和非覆盖型描述符对比"><a href="#覆盖型和非覆盖型描述符对比" class="headerlink" title="覆盖型和非覆盖型描述符对比"></a>覆盖型和非覆盖型描述符对比</h4><ul>
<li><p>覆盖型描述符 实现了__set__方法的描述符,实现了set方法会覆盖对实例属性的赋值操作</p>
</li>
<li><p>非覆盖型描述符 没有实现__set__方法的描述符是非覆盖型描述符，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</p>
</li>
<li><p>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cls_name</span><span class="params">(obj_or_cls)</span>:</span></div><div class="line">    cls = type(obj_or_cls)</div><div class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> type:</div><div class="line">        cls = obj_or_cls</div><div class="line">    <span class="keyword">return</span> cls.__name__.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(obj)</span>:</span></div><div class="line">    cls = type(obj)</div><div class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> type:</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;class &#123;&#125;&gt;'</span>.format(obj.__name__)</div><div class="line">    <span class="keyword">elif</span> cls <span class="keyword">in</span> [type(<span class="keyword">None</span>), int]:</div><div class="line">        <span class="keyword">return</span> repr(obj)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;&#123;&#125; object&gt;'</span>.format(cls_name(obj))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(name, *args)</span>:</span></div><div class="line">    pseudo_args = <span class="string">','</span>.join(display(x) <span class="keyword">for</span> x <span class="keyword">in</span> args)</div><div class="line">    print(<span class="string">'-&gt;&#123;&#125;.__&#123;&#125;__(&#123;&#125;)'</span>.format(cls_name(args[<span class="number">0</span>]), name, pseudo_args))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Overriding</span>:</span></div><div class="line">    <span class="string">""" 数据描述符 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        print_args(<span class="string">'get'</span>, self, instance, owner)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        print_args(<span class="string">'set'</span>, self, instance, value)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingNoGet</span>:</span></div><div class="line">    <span class="string">""" 没有 __get__方法的覆盖型描述符 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        print_args(<span class="string">'set'</span>, self, instance, value)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonOverriding</span>:</span></div><div class="line">    <span class="string">""" 非数据描述符"""</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        print_args(<span class="string">'get'</span>, self, instance, owner)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Managed</span>:</span></div><div class="line">    over = Overriding()</div><div class="line">    over_no_get = OverridingNoGet()</div><div class="line">    non_over = NonOverriding()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">span</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'-&gt; Managed.spam(&#123;&#125;)'</span>.format(display(self)))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">################覆盖型描述符##################</span></div><div class="line"><span class="string">"""获取和设置值 都是通过描述符的get和set方法完成"""</span></div><div class="line">obj = Managed()</div><div class="line">obj.over</div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line">Managed.over</div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line">obj.over = <span class="number">7</span></div><div class="line"><span class="comment"># Overriding.__set__(&lt;Overriding object&gt;,&lt;Managed object&gt;,7)</span></div><div class="line">obj.over</div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line">obj.__dict__[<span class="string">'over'</span>] = <span class="number">8</span>  <span class="comment"># 跳过描述符,通过obj.__dict__赋值</span></div><div class="line">print(vars(obj))</div><div class="line"><span class="comment"># &#123;'over': 8&#125;</span></div><div class="line">print(obj.over)</div><div class="line"><span class="comment"># None</span></div><div class="line">obj.over  <span class="comment"># obj.over描述符仍会覆盖取值(obj.over)这个操作</span></div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">##########没有__get__()方法的覆盖型描述符##########</span></div><div class="line"><span class="string">"""没有__get__方法的覆盖描述符,给对象的属性赋值会触发__set__方法,读取属性时会直接从实例中返回新赋予的值,而不会返回描述符对象,读取操作实例属性会遮盖描述符"""</span></div><div class="line">print(obj.over_no_get)</div><div class="line"><span class="comment"># &lt;__main__.O</span></div><div class="line"><span class="comment"># verridingNoGet object at 0x102973358&gt;</span></div><div class="line">print(Managed.over_no_get)</div><div class="line"><span class="comment"># &lt;__main__.OverridingNoGet object at 0x102973358&gt;</span></div><div class="line">obj.over_no_get = <span class="number">7</span></div><div class="line"><span class="comment"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class="line">print(obj.over_no_get)</div><div class="line"><span class="comment"># &lt;__main__.OverridingNoGet object at 0x101873358&gt;</span></div><div class="line">obj.__dict__[<span class="string">'over_no_get'</span>] = <span class="number">9</span></div><div class="line">print(obj.over_no_get)	<span class="comment"># 通过类属性取值,没有通过描述符,因为没有__get__方法</span></div><div class="line"><span class="comment"># 9</span></div><div class="line">obj.over_no_get = <span class="number">7</span></div><div class="line"><span class="comment"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class="line">print(obj.over_no_get)  <span class="comment"># 只要有同名的实例属性,描述符会被遮盖,默认的实例属性获取方法遮盖描述符</span></div><div class="line"><span class="comment"># 9</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">########## 非覆盖型描述符 ##########</span></div><div class="line"><span class="string">"""</span></div><div class="line">非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</div><div class="line">"""</div><div class="line"> </div><div class="line">obj1 = Managed()</div><div class="line">obj1.non_over</div><div class="line"><span class="comment"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line">obj1.non_over = <span class="number">7</span></div><div class="line">print(obj1.non_over)	<span class="comment"># 实例属性赋值会遮盖描述符__get__方法</span></div><div class="line"><span class="comment"># 7</span></div><div class="line">Managed.non_over</div><div class="line"><span class="comment"># NonOverriding.__get__(&lt;NonOverriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class="line"><span class="keyword">del</span> obj1.non_over</div><div class="line">obj1.non_over	<span class="comment"># 删除实例属性后,又从描述符__get__方法中获取</span></div><div class="line"><span class="comment"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line"><span class="comment">################################</span></div><div class="line"><span class="comment"># 在类中覆盖描述符</span></div><div class="line"><span class="comment">################################</span></div><div class="line">obj2 = Managed()</div><div class="line"> </div><div class="line"><span class="comment"># 覆盖类中的描述符属性</span></div><div class="line">Managed.over = <span class="number">1</span></div><div class="line">Managed.over_no_get = <span class="number">2</span></div><div class="line">Managed.non_over = <span class="number">3</span></div><div class="line"> </div><div class="line">print(obj2.over, obj2.over_no_get, obj2.non_over)</div><div class="line"><span class="comment"># 1 2 3</span></div></pre></td></tr></table></figure>
<h4 id="描述符用法"><a href="#描述符用法" class="headerlink" title="描述符用法"></a>描述符用法</h4><ol>
<li>使用特性以保持简单</li>
<li>只读描述符必须有__set__方法，如果需要实现只读属性，<strong>get</strong>和<strong>set</strong>方法必须都实现，否则实例的同名属性会遮盖描述符，只读属性的__set__方法只需抛出AttributeError异常，并提供合适的错误信息</li>
<li>用于验证的描述符可以只有__set__方法</li>
<li>仅有<strong>get</strong>方法的描述符可以实现高效缓存，同名实例属性会遮盖描述符</li>
<li>非特殊的方法可以被实例属性遮盖， 函数和方法都只实现了<strong>get</strong>方法，不会处理同名实例属性的赋值操作</li>
</ol>
<p>以上内容学习记录参照《流畅的python》 第20章 属性描述符</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用描述符时，实例对象的属性访问会触发描述符的__get__方法&lt;/li&gt;
&lt;li&gt;使用描述符时，实例对象的属性赋值会触发描述符
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="Descriptor" scheme="https://ttxsgoto.github.io/tags/Descriptor/"/>
    
  </entry>
  
  <entry>
    <title>Python Descriptor描述符01</title>
    <link href="https://ttxsgoto.github.io/2018/01/31/descriptor/"/>
    <id>https://ttxsgoto.github.io/2018/01/31/descriptor/</id>
    <published>2018-01-31T12:24:28.000Z</published>
    <updated>2018-02-01T12:10:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述符说明"><a href="#描述符说明" class="headerlink" title="描述符说明"></a>描述符说明</h3><pre><code>- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符
- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写
- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中
  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找
  顺序为a.__dict__[&apos;x&apos;],然后是type(a).__dict__[&apos;x&apos;].如果还是没找
  到就往上级(父类)中查找最后查找是否有__getattr__
- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用
  描述符的__get__()方法，对于设置和删除也是同样的原理
- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;
- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;
</code></pre><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><pre><code>- 描述符作为属性访问时,是被自动调用
- 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__[&apos;x&apos;].__get__(None, Class)
- 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__[&apos;x&apos;].__get__(object, type(object))
</code></pre><h3 id="描述符用途-使用场景"><a href="#描述符用途-使用场景" class="headerlink" title="描述符用途,使用场景"></a>描述符用途,使用场景</h3><pre><code>- 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符
- 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符
- 描述符会&apos;劫持&apos;那些本是self.__dict__的操作
- 把一个类的操作托付给另外一个类
- 静态方法,类方法,parperty都是构建描述符的类
</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 属性进行相应的处理而不会对整体有影响</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.age = age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__-----'</span>, self, instance, owner</div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.age]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__-----'</span>, self, instance, value</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> type(eval(str(value))) == float:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Age must int and not negative '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.age] = value # 修改dict中对应的属性值</span></div><div class="line">        self.age = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.age</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SexType</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.sex = sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.sex]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'M'</span>, <span class="string">'W'</span>]:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The value must be M/W '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.sex] = value # 修改dict中对应的属性值</span></div><div class="line">        self.sex = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.sex</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    age = Integer(<span class="string">'age'</span>)</div><div class="line">    sex = SexType(<span class="string">'sex'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.sex = sex</div><div class="line">        self.age = age</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Person info --name:&#123;&#125;,--sex:&#123;&#125;,--age:&#123;&#125;'</span>.format(self.name, self.sex, self.age)</div><div class="line"> </div><div class="line">A = Person(name=<span class="string">'ttxsgoto'</span>, sex=<span class="string">'W'</span>, age= <span class="number">15</span> )</div><div class="line"> </div><div class="line"><span class="keyword">print</span> A.__dict__</div><div class="line"><span class="keyword">print</span> Person.__dict__</div><div class="line"><span class="keyword">print</span> A.info</div><div class="line"> </div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">'''</span></div><div class="line">&#123;'name': 'ttxsgoto'&#125;</div><div class="line">&#123;'info': &lt;property object at 0x1028ad418&gt;, '__module__': '__main__', 'age': &lt;__main__.Integer object at 0x1028b30d0&gt;, 'sex': &lt;__main__.SexType object at 0x1028b3110&gt;, '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x1028b2578&gt;&#125;</div><div class="line">__get__----- &lt;__main__.Integer object at 0x1028b30d0&gt; &lt;__main__.Person object at 0x1028b3150&gt; &lt;class '__main__.Person'&gt;</div><div class="line">Person info --name:ttxsgoto,--sex:W,--age:15</div><div class="line">'''</div></pre></td></tr></table></figure>
<h4 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数据描述符和非数据描述符的区别</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Access</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, var=None, name=<span class="string">'var'</span>)</span>:</span></div><div class="line">        self.var = var</div><div class="line">        self.name = name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__----'</span>, self, instance, owner, self.name</div><div class="line">        <span class="keyword">return</span> self.var</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span>  <span class="comment"># 含有__set__方法为数据描述符</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__----'</span>, self, instance, value</div><div class="line">        self.var = value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    x = Access(<span class="number">10</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.x = x</div><div class="line"> </div><div class="line">t = MyClass(<span class="number">100</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'----\n'</span>, t.x</div><div class="line"><span class="keyword">print</span> <span class="string">'====\n'</span>, t.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'xxxx\n'</span>, MyClass.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'yyyy\n'</span>, MyClass.x</div><div class="line"> </div><div class="line"><span class="comment">########### 数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">__set__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; 100</div><div class="line">----</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x10687c2d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10687b320&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="comment">########### 非数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">----</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;'x': 100&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x1012502d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10124f050&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x1012502d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">10</div><div class="line">'''</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;描述符说明&quot;&gt;&lt;a href=&quot;#描述符说明&quot; class=&quot;headerlink&quot; title=&quot;描述符说明&quot;&gt;&lt;/a&gt;描述符说明&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="Descriptor" scheme="https://ttxsgoto.github.io/tags/Descriptor/"/>
    
  </entry>
  
  <entry>
    <title>Python 动态属性和特性</title>
    <link href="https://ttxsgoto.github.io/2018/01/30/python-dyn-attr-prop/"/>
    <id>https://ttxsgoto.github.io/2018/01/30/python-dyn-attr-prop/</id>
    <published>2018-01-30T14:42:28.000Z</published>
    <updated>2018-01-30T13:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="getattr-方法"><a href="#getattr-方法" class="headerlink" title="__getattr__ 方法"></a>__getattr__ 方法</h3><p>__getattr__(self, name) 作用仅当没有指定名称name的属性时才调用__getattr__方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</div><div class="line"><span class="keyword">import</span> keyword</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrozenJSON</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mapping)</span>:</span></div><div class="line">        self.__data = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> mapping.items():</div><div class="line">            <span class="keyword">if</span> keyword.iskeyword(key):</div><div class="line">                key += <span class="string">'_'</span></div><div class="line">            self.__data[key] = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">if</span> hasattr(self.__data, name):</div><div class="line">            <span class="keyword">return</span> getattr(self.__data, name)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> FrozenJSON.build(self.__data[name])</div><div class="line"> </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(cls, obj)</span>:</span>  <span class="comment"># 备选构造器</span></div><div class="line">        <span class="keyword">if</span> isinstance(obj, abc.Mapping):  <span class="comment"># 映射</span></div><div class="line">            <span class="keyword">return</span> cls(obj)</div><div class="line">        <span class="keyword">elif</span> isinstance(obj, abc.MutableSequence):  <span class="comment"># 列表</span></div><div class="line">            <span class="keyword">return</span> [cls.build(item) <span class="keyword">for</span> item <span class="keyword">in</span> obj]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> obj</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    grad = FrozenJSON(&#123;<span class="string">'name'</span>: <span class="string">'ttxs'</span>, <span class="string">'class'</span>: <span class="number">123</span>&#125;)</div><div class="line">    print(grod.name)</div><div class="line">    print(grad.class_)</div></pre></td></tr></table></figure></p>
<h3 id="property-解析"><a href="#property-解析" class="headerlink" title="@property 解析"></a>@property 解析</h3><ul>
<li>property 本身是一个类</li>
<li>property(fget=None, fset=None, fdel=None, doc=None)<br>所有的参数都是可选，如果没有把函数传给某个参数，那么得到的特性对象就不允许执行相应的操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></div><div class="line">        self.description = description</div><div class="line">        self.weight = weight</div><div class="line">        self.price = price</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.weight * self.price</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__weight</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_weight</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</div><div class="line">            self.__weight = value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</div><div class="line"> </div><div class="line">    weight = property(get_weight, set_weight, )</div><div class="line"> </div><div class="line">xxx = LineItem(<span class="string">'ttxs'</span>, <span class="number">10</span>, <span class="number">12.5</span>)</div><div class="line">print(xxx.subtotal())</div><div class="line">xxx.weight=<span class="number">-20</span></div><div class="line">print(xxx.subtotal())</div></pre></td></tr></table></figure>
<h3 id="处理属性的重要属性和函数"><a href="#处理属性的重要属性和函数" class="headerlink" title="处理属性的重要属性和函数"></a>处理属性的重要属性和函数</h3><ul>
<li><p>__class__ : 对象所属类的引用(obj.__class__  和type(obj)相同)</p>
</li>
<li><p>__getattr__：只在对象的类中寻找，而不在实例中寻找</p>
</li>
<li>__dict__： 存储对象或类的可写属性,有dict属性的对象，任何时候都能设置新属性</li>
<li>__slots__： 类可以定义这个属性，限制实例能有哪些属性</li>
<li>dir([object])：列出对象的大部分属性</li>
<li>getattr(obj, name[, defult])：从obj对象中获取name字符串对应的属性</li>
<li>hasattr(obj, name)：如果obj对象中存在指定的属性，或者能以某种方式通过obj对象获取指定的属性，返回true</li>
<li>setattr(obj, name, value)：把obj对象指定属性的值设置为value，前提是obj对象能接受这个值；这个函数可能会创建一个新的属性或者覆盖现有的属性</li>
<li>vars([obj])：返回obj对象的__dict__属性，如果实例所属的类定义了__slots__属性，实例没有__dict__属性，那么vars函数不能处理那个实例</li>
</ul>
<h3 id="处理属性的特殊方法"><a href="#处理属性的特殊方法" class="headerlink" title="处理属性的特殊方法"></a>处理属性的特殊方法</h3><ul>
<li>obj.attr 和 getattr(obj, ‘attr’, 42) 都会触发 Class.__getattribute__(obj, ‘attr’)方法</li>
<li>__delattr__(self, name) del 语句， 都会触发Class.__delattr__(obj, ‘attr’)方法</li>
<li>__dir__ 把对象传给dir函数时调用，列出属性</li>
<li>__getattr__(obj, name) 仅当获取指定的属性失败，搜索过obj，Class和超类之后调用</li>
<li>__getattribute__(self, name)尝试获取指定的属性时总会获取调用这个方法，寻找的属性是特殊属性或者特殊方法时除外</li>
<li>__setattr__(self, name, value) 尝试设置指定的属性时总会调用这个方法，点号和setattr内置函数会触发这个方法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;getattr-方法&quot;&gt;&lt;a href=&quot;#getattr-方法&quot; class=&quot;headerlink&quot; title=&quot;__getattr__ 方法&quot;&gt;&lt;/a&gt;__getattr__ 方法&lt;/h3&gt;&lt;p&gt;__getattr__(self, name) 作用仅当没有
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="property" scheme="https://ttxsgoto.github.io/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>Django 基于URL权限管理模块</title>
    <link href="https://ttxsgoto.github.io/2018/01/17/django-url-permisson/"/>
    <id>https://ttxsgoto.github.io/2018/01/17/django-url-permisson/</id>
    <published>2018-01-17T14:38:28.000Z</published>
    <updated>2018-01-19T15:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Django自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制权限，如对象级别的权限</p>
<p>现在引用了基于url的权限系统，可以控制用户访问一个接口的不同方法 ，可以很方便的控制权限；如：用户对于某个接口可以做到只拥有查看的权限而没有修改的权限，因为对于相同的url请求的方法不同</p>
<h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><p>1.类似于django自身权限模块，拥有用户和用户组两类权限<br>2.通过swagger 获取项目URL 列表用于分配权限<br>3.通过中间件来拦截判断用户对请求的url是否有对应的权限</p>
<h4 id="主要代码说明"><a href="#主要代码说明" class="headerlink" title="主要代码说明"></a>主要代码说明</h4><h5 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Permission, User</div><div class="line"><span class="keyword">from</span> .managers <span class="keyword">import</span> UserprofileManager</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Userprofile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户相关信息"""</span></div><div class="line"> </div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL, primary_key=<span class="keyword">True</span>)</div><div class="line">    sex = models.IntegerField(choices=(</div><div class="line">        (<span class="number">0</span>, <span class="string">'女性'</span>),</div><div class="line">        (<span class="number">1</span>, <span class="string">'男性'</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">'未填写'</span>)</div><div class="line">    ), default=<span class="number">2</span>, help_text=<span class="string">'sex'</span>)</div><div class="line">    groups = models.ManyToManyField(</div><div class="line">        <span class="string">'Group'</span>,</div><div class="line">        verbose_name=<span class="string">'user groups'</span>,</div><div class="line">        blank=<span class="keyword">True</span>,</div><div class="line">        through=<span class="string">'UserGroup'</span>,</div><div class="line">        through_fields=(<span class="string">'user'</span>, <span class="string">'group'</span>)</div><div class="line">    )</div><div class="line">    user_permissions = models.ManyToManyField(</div><div class="line">        <span class="string">'URLSource'</span>,</div><div class="line">        verbose_name=<span class="string">'user permissions'</span>,</div><div class="line">        blank=<span class="keyword">True</span>,</div><div class="line">        through=<span class="string">'UserURL'</span>,</div><div class="line">        through_fields=(<span class="string">'user'</span>, <span class="string">'url'</span>)</div><div class="line">    )</div><div class="line">    desc = models.CharField(<span class="string">u'描述'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>, default=<span class="string">''</span>)</div><div class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    objects = UserprofileManager()</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'user_profile'</span></div><div class="line">        verbose_name = <span class="string">u'用户信息'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        ordering = [<span class="string">'-create_time'</span>]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;'</span>.format(self.user.username)</div><div class="line"> </div><div class="line"><span class="meta">    @receiver(post_save, sender=User)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_user_profile</span><span class="params">(sender, instance=None, created=False, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> created:</div><div class="line">            Userprofile.objects.get_or_create(user=instance, defaults=&#123;<span class="string">'desc'</span>: instance.username&#125;)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_permissions</span><span class="params">(self, permissions)</span>:</span></div><div class="line">        <span class="string">"""用户添加权限"""</span></div><div class="line">        history_permission = self.userurl_set.all()  <span class="comment"># 现在已有的权限</span></div><div class="line">        <span class="keyword">if</span> history_permission:</div><div class="line">            <span class="comment"># 如果有就不添加,没有再添加,多余的删除</span></div><div class="line">            <span class="keyword">for</span> _permiss <span class="keyword">in</span> history_permission:</div><div class="line">                <span class="keyword">if</span> _permiss.url <span class="keyword">in</span> permissions:</div><div class="line">                    permissions.remove(_permiss.url)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    _permiss.delete()</div><div class="line">            permisson_list = [UserURL(user=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            permisson_list = [UserURL(user=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        self.userurl_set.bulk_create(permisson_list)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_groups</span><span class="params">(self, group)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        用户添加到组(目前只支持添加到单个组)</div><div class="line">        :param group: 权限组实例</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        user_group = self.usergroup_set.all()</div><div class="line">        <span class="keyword">if</span> user_group:</div><div class="line">            user_group.delete()</div><div class="line">        self.usergroup_set.create(group=group)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_group_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""获取用户所在组的权限"""</span></div><div class="line">        <span class="keyword">return</span> self.usergroup_set.all()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""获取用户单独关联的权限"""</span></div><div class="line">        <span class="keyword">return</span> self.userurl_set.all()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""该用户的所有权限,包括所在组权限和自己单独关联权限"""</span></div><div class="line">        permissions = set()</div><div class="line">        <span class="comment"># group 权限</span></div><div class="line">        group_permission = self.get_group_permissions()</div><div class="line">        <span class="keyword">for</span> permission <span class="keyword">in</span> group_permission:</div><div class="line">            URL = GroupURL.objects.filter(group=permission.group)</div><div class="line">            <span class="keyword">for</span> _permission <span class="keyword">in</span> URL:</div><div class="line">                permissions.add(_permission.url)</div><div class="line">        <span class="comment"># user 权限</span></div><div class="line">        url_permission = self.get_url_permissions()</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_permission:</div><div class="line">            permissions.add(url.url)</div><div class="line">        <span class="keyword">return</span> permissions</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLSource</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""URL资源信息"""</span></div><div class="line"> </div><div class="line">    url = models.CharField(<span class="string">u'url'</span>, max_length=<span class="number">128</span>)</div><div class="line">    action = models.CharField(<span class="string">u'请求方法'</span>, max_length=<span class="number">16</span>)</div><div class="line">    description = models.CharField(<span class="string">u'描述信息'</span>, max_length=<span class="number">256</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    parameters = models.CharField(<span class="string">u'参数, 逗号分隔'</span>, max_length=<span class="number">128</span>, default=<span class="string">''</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">u'URL信息'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        db_table = <span class="string">'url_source'</span></div><div class="line">        unique_together = ((<span class="string">'url'</span>, <span class="string">'action'</span>),)</div><div class="line">        ordering = [<span class="string">'id'</span>]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;-&#123;&#125;'</span>.format(self.id, self.description, self.action)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户组信息"""</span></div><div class="line"> </div><div class="line">    name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">'组名'</span>, unique=<span class="keyword">True</span>, help_text=<span class="string">'组名'</span>)</div><div class="line">    code = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">'用户组中文名'</span>, default=<span class="string">''</span>, help_text=<span class="string">'组code'</span>)</div><div class="line">    permissions = models.ManyToManyField(</div><div class="line">        URLSource,</div><div class="line">        verbose_name=<span class="string">'permissions'</span>,</div><div class="line">        blank=<span class="keyword">True</span>,</div><div class="line">        through=<span class="string">'GroupURL'</span>,</div><div class="line">        through_fields=(<span class="string">'group'</span>, <span class="string">'url'</span>)</div><div class="line">    )</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'group'</span></div><div class="line">        verbose_name = <span class="string">u'用户权限组'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_permissions</span><span class="params">(self, permissions)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        给组添加权限</div><div class="line">        :param permissons: 权限列表,filter查询列表</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        history_permission = self.groupurl_set.all()  <span class="comment"># 现在已有的权限</span></div><div class="line">        <span class="keyword">if</span> history_permission:</div><div class="line">            <span class="comment"># 如果有就不添加,没有再添加,多余的删除</span></div><div class="line">            <span class="keyword">for</span> _permiss <span class="keyword">in</span> history_permission:</div><div class="line">                <span class="keyword">if</span> _permiss.url <span class="keyword">in</span> permissions:</div><div class="line">                    permissions.remove(_permiss.url)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    _permiss.delete()</div><div class="line">            permisson_list = [GroupURL(group=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            permisson_list = [GroupURL(group=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        self.groupurl_set.bulk_create(permisson_list)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_group_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""获取该组对应的权限列表"""</span></div><div class="line">        <span class="keyword">return</span> self.groupurl_set.all()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGroup</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户和组关联"""</span></div><div class="line"> </div><div class="line">    user = models.ForeignKey(Userprofile, verbose_name=<span class="string">u'用户'</span>)</div><div class="line">    group = models.ForeignKey(Group, verbose_name=<span class="string">u'组'</span>)</div><div class="line">    desc = models.CharField(<span class="string">u'其他信息'</span>, max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'user_groups'</span></div><div class="line">        verbose_name = <span class="string">u'用户和组关系'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        unique_together = ((<span class="string">'user'</span>, <span class="string">'group'</span>),)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.group)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserURL</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户和URL关联"""</span></div><div class="line"> </div><div class="line">    user = models.ForeignKey(Userprofile, verbose_name=<span class="string">u'用户'</span>)</div><div class="line">    url = models.ForeignKey(URLSource, verbose_name=<span class="string">u'URL'</span>)</div><div class="line">    desc = models.CharField(<span class="string">u'其他信息'</span>, max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'user_urls'</span></div><div class="line">        verbose_name = <span class="string">u'用户权限关系'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        unique_together = ((<span class="string">'user'</span>, <span class="string">'url'</span>),)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.url)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupURL</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""组和URL关系"""</span></div><div class="line"> </div><div class="line">    group = models.ForeignKey(Group, verbose_name=<span class="string">u'组'</span>)</div><div class="line">    url = models.ForeignKey(URLSource, verbose_name=<span class="string">u'URL'</span>)</div><div class="line">    desc = models.CharField(<span class="string">u'其他信息'</span>, max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'group_urls'</span></div><div class="line">        verbose_name = <span class="string">u'用户权限组关系'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        unique_together = ((<span class="string">'group'</span>, <span class="string">'url'</span>),)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;'</span>.format(self.group, self.url)</div></pre></td></tr></table></figure>
<h5 id="middleware-py"><a href="#middleware-py" class="headerlink" title="middleware.py"></a>middleware.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseForbidden</div><div class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Userprofile</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</div><div class="line"><span class="keyword">from</span> .settings <span class="keyword">import</span> url_permisson_settings</div><div class="line"> </div><div class="line">logs = logging.getLogger(<span class="string">'django'</span>)</div><div class="line"> </div><div class="line">User = get_user_model()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPermissionMiddleWare</span><span class="params">(MiddlewareMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></div><div class="line">        response = &#123;</div><div class="line">            <span class="string">"status_code"</span>: <span class="number">403</span>,</div><div class="line">            <span class="string">"message"</span>: <span class="string">u"无权限操作,请联系管理员."</span></div><div class="line">        &#125;</div><div class="line">        path = request.path.split(<span class="string">'/'</span>)</div><div class="line">        <span class="keyword">if</span> path[<span class="number">1</span>] <span class="keyword">in</span> url_permisson_settings.ALL_ALLOW_URL:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(request.user, User):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">if</span> request.user.is_superuser:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            profile = Userprofile.objects.get(user=request.user)</div><div class="line">        <span class="keyword">except</span> Userprofile.DoesNotExist:</div><div class="line">            <span class="keyword">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class="string">'application/json'</span>)</div><div class="line">        method = request.method.lower()</div><div class="line">        path = request.path.strip()</div><div class="line">        <span class="keyword">if</span> method == <span class="string">'get'</span>:</div><div class="line">            parameter = []</div><div class="line">            <span class="keyword">for</span> _parameter <span class="keyword">in</span> request.GET.items():</div><div class="line">                parameter.append(_parameter[<span class="number">0</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                parameter_dict = json.loads(request.body)</div><div class="line">            <span class="keyword">except</span> Exception:</div><div class="line">                parameter_dict = &#123;&#125;</div><div class="line">            parameter = parameter_dict.keys()</div><div class="line">        all_permission = profile.get_all_permissions()</div><div class="line">        result = <span class="keyword">None</span></div><div class="line">        <span class="keyword">for</span> _url <span class="keyword">in</span> all_permission:</div><div class="line">            url = _url.url</div><div class="line">            action = _url.action</div><div class="line">            parameters = _url.parameters.split(<span class="string">','</span>)</div><div class="line">            <span class="keyword">if</span> method == action <span class="keyword">and</span> path == url <span class="keyword">and</span> (len(Counter(parameter) - Counter(parameters)) == <span class="number">0</span>):</div><div class="line">                result = <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</div><div class="line">            <span class="keyword">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class="string">'application/json'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<h4 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h4><p><img src="https://ttxsgoto.github.io/img/django/permission.png" alt=""></p>
<h4 id="Git地址"><a href="#Git地址" class="headerlink" title="Git地址"></a>Git地址</h4><p><a href="https://github.com/ttxsgoto/url_permission" target="_blank" rel="external">https://github.com/ttxsgoto/url_permission</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;Django自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="permisson" scheme="https://ttxsgoto.github.io/tags/permisson/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Mongo-connector同步mongo数据到ES</title>
    <link href="https://ttxsgoto.github.io/2017/12/27/elasticsearch-mongo-to-es/"/>
    <id>https://ttxsgoto.github.io/2017/12/27/elasticsearch-mongo-to-es/</id>
    <published>2017-12-27T13:16:47.000Z</published>
    <updated>2017-12-27T13:27:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li>通过mongo-connector将mongo数据实时同步到es中</li>
<li>mongo运行在replica-set模式，同时需要elastic2_doc_manager将数据写入ES</li>
<li>开启replica-set模式后，写入mongo的数据都可以同步到es，即使当前mongo-connector没有启动，启动后也会将数据写入es中</li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install mongo-connector</div><div class="line">pip install <span class="string">'elastic2-doc-manager[elastic5]'</span>    <span class="comment"># ES6.1版本也可使用</span></div></pre></td></tr></table></figure>
<h4 id="mongod-以replica-set模式运行"><a href="#mongod-以replica-set模式运行" class="headerlink" title="mongod 以replica-set模式运行"></a>mongod 以replica-set模式运行</h4><ul>
<li><p>服务端:mongod version为3.6.0</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mongod --replSet <span class="string">"rs0"</span> --dbpath /data/tools/mongodb<span class="number">-3.6</span><span class="number">.0</span>/data --port <span class="number">27018</span> --bind_ip <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></div></pre></td></tr></table></figure>
</li>
<li><p>客户端设置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 连接mongo</span></div><div class="line">./bin/mongo --host <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --port <span class="number">27018</span></div><div class="line"><span class="comment"># 配置复制集</span></div><div class="line">rs.initiate()   <span class="comment"># 初始化副本集</span></div><div class="line">rs.conf()       <span class="comment"># 验证副本集的配置</span></div><div class="line">rs.status()     <span class="comment"># 验证副本集的状态</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="mongo-connector启动"><a href="#mongo-connector启动" class="headerlink" title="mongo-connector启动"></a>mongo-connector启动</h4><p>mongo-connector -m 127.0.0.1:27018 -t 127.0.0.1:9200 -d elastic2_doc_manager</p>
<h4 id="数据测试"><a href="#数据测试" class="headerlink" title="数据测试"></a>数据测试</h4><ul>
<li><p>新增数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">use ttxsgoto</div><div class="line">db.test.insert(&#123;name:<span class="string">"ttxsgoto01"</span>, sex:<span class="string">"m"</span>, project:<span class="string">"python"</span>&#125;)</div><div class="line">db.test.insert(&#123;name:<span class="string">"ttxsgoto02"</span>, sex:<span class="string">"m"</span>, project:<span class="string">"java"</span>&#125;)</div><div class="line"> </div><div class="line"><span class="comment"># mongo查看数据</span></div><div class="line">db.test.find()</div><div class="line"> </div><div class="line"><span class="comment"># ES查看数据</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a42188f1db5d952cbcea0ef"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"java"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxsgoto02"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a4218501db5d952cbcea0ee"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"python"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxsgoto01"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">db.test.update(&#123;<span class="string">'name'</span>:<span class="string">'ttxsgoto01'</span>&#125;, &#123;$set:&#123;<span class="string">'name'</span>:<span class="string">'ttxs'</span>&#125;&#125;)</div><div class="line"> </div><div class="line"><span class="comment"># mongo查看数据</span></div><div class="line">db.test.find()</div><div class="line"> </div><div class="line"><span class="comment"># ES查看数据</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a42188f1db5d952cbcea0ef"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"java"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxsgoto02"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a4218501db5d952cbcea0ee"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"python"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxs"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">db.test.remove(&#123;<span class="string">'name'</span>:<span class="string">'ttxsgoto02'</span>&#125;)</div><div class="line"> </div><div class="line"><span class="comment"># ES查看数据</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a4218501db5d952cbcea0ee"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"python"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxs"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删除db</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase() <span class="comment"># 删除数据库后，ES中对应的索引也被删除</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://docs.mongodb.com/manual/tutorial/deploy-replica-set/" target="_blank" rel="external">https://docs.mongodb.com/manual/tutorial/deploy-replica-set/</a><br><a href="https://github.com/mongodb-labs/elastic2-doc-manager" target="_blank" rel="external">https://github.com/mongodb-labs/elastic2-doc-manager</a><br><a href="http://blog.csdn.net/laoyang360/article/details/51842822" target="_blank" rel="external">http://blog.csdn.net/laoyang360/article/details/51842822</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;通过mongo-connector将mongo数据实时同步到es中&lt;/li&gt;
&lt;li&gt;mongo运行在replica-set模式
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Mongo-connector" scheme="https://ttxsgoto.github.io/tags/Mongo-connector/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Logstash-input-jdbc同步mysql数据到ES</title>
    <link href="https://ttxsgoto.github.io/2017/12/27/elasticsearch-mysql-to-es/"/>
    <id>https://ttxsgoto.github.io/2017/12/27/elasticsearch-mysql-to-es/</id>
    <published>2017-12-27T13:08:17.000Z</published>
    <updated>2017-12-27T13:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./logstash-plugin install  logstash-input-jdbc</div></pre></td></tr></table></figure>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>jdbc.conf<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">    &#125;</div><div class="line">    jdbc &#123;</div><div class="line">      jdbc_connection_string =&gt; "jdbc:mysql://127.0.0.1:3307/test"</div><div class="line">      jdbc_user =&gt; "root"</div><div class="line">      jdbc_password =&gt; "root"</div><div class="line">      # jdbc driver</div><div class="line">      jdbc_driver_library =&gt; "/data/es/mysql-connector-java-5.1.39.jar"</div><div class="line">      jdbc_driver_class =&gt; "com.mysql.jdbc.Driver"</div><div class="line">      jdbc_paging_enabled =&gt; "true"</div><div class="line">      jdbc_page_size =&gt; "50000"</div><div class="line">      # 执行的sql的路径</div><div class="line">      statement_filepath =&gt; "sql.sql"</div><div class="line">      # 需要导入的sql语句查出来的数据</div><div class="line">      #statement =&gt; "SELECT * FROM zhihuquestion"</div><div class="line">      # 定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新</div><div class="line">      schedule =&gt; "* * * * *"</div><div class="line">      #schedule =&gt; "*/2 * * * *"    # 每2分钟更新一次</div><div class="line">      type =&gt; "test_index"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">filter &#123;</div><div class="line">    json &#123;</div><div class="line">        source =&gt; "message"</div><div class="line">        remove_field =&gt; ["message"]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; ["http://127.0.0.1:9200"]</div><div class="line">        index =&gt; "test_index"</div><div class="line">        document_type =&gt; "test"</div><div class="line">        #自增ID编号</div><div class="line">        document_id =&gt; "%&#123;id&#125;"</div><div class="line">    &#125;</div><div class="line">    # 以json格式输出</div><div class="line">    stdout &#123;</div><div class="line">        codec =&gt; json_lines</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">../bin/logstash -f jdbc.conf</div></pre></td></tr></table></figure>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html" target="_blank" rel="external">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html</a><br><a href="https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash" target="_blank" rel="external">https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash</a><br><a href="http://blog.csdn.net/laoyang360/article/details/51747266" target="_blank" rel="external">http://blog.csdn.net/laoyang360/article/details/51747266</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成&lt;/p&gt;

    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Logstash-input-jdbc" scheme="https://ttxsgoto.github.io/tags/Logstash-input-jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch ELK应用</title>
    <link href="https://ttxsgoto.github.io/2017/12/26/elasticsearch-elk/"/>
    <id>https://ttxsgoto.github.io/2017/12/26/elasticsearch-elk/</id>
    <published>2017-12-26T14:46:51.000Z</published>
    <updated>2017-12-27T13:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ELK说明"><a href="#ELK说明" class="headerlink" title="ELK说明"></a>ELK说明</h4><ul>
<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等</li>
<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索）</li>
<li>kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志</li>
</ul>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>1.方便日志查询，统计排查问题<br>2.报表展示，不用登录每台服务器查看日志</p>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>Logstash: logstash server端用来搜集日志；</p>
<p>Elasticsearch: 存储各类日志；</p>
<p>Kibana: web化接口用作查寻和可视化日志；</p>
<p>搭建部署(略)</p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>收集syslog,nginx access/error日志，mongo日志，程序日志，说明如下：</p>
<p>nignx 访问日志：因nginx访问日志可自定义，这里自定义为json格式，方便ES存储和索引<br>格式定义如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">log_format main_json <span class="string">'&#123; "timestamp": "$time_local", '</span></div><div class="line"><span class="string">'"remote_addr": "$remote_addr", '</span></div><div class="line"><span class="string">'"remote_user": "$remote_user", '</span></div><div class="line"><span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></div><div class="line"><span class="string">'"request_time": "$request_time", '</span></div><div class="line"><span class="string">'"status": "$status", '</span></div><div class="line"><span class="string">'"domain": "$host", '</span></div><div class="line"><span class="string">'"request": "$request", '</span></div><div class="line"><span class="string">'"request_method": "$request_method", '</span></div><div class="line"><span class="string">'"http_referrer": "$http_referer", '</span></div><div class="line"><span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></div><div class="line"><span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></div><div class="line"><span class="string">'"http_user_agent": "$http_user_agent" &#125;'</span>;</div></pre></td></tr></table></figure></p>
<p>其他日志收集见配置文件，说明如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; [ "/var/log/syslog" ]    #定义日志路径</div><div class="line">        type =&gt; "syslog"                </div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        ignore_older =&gt;0</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "/var/log/nginx/*access.log"</div><div class="line">        codec =&gt; json</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        type =&gt; "nginx-acc"</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "/var/log/nginx/*error.log"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        type =&gt; "nginx-error"</div><div class="line">        ignore_older =&gt;0</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; [ "/data/mongo/mongo.log" ]</div><div class="line">        type =&gt; "mongo"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        #ignore_older =&gt;0</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">filter &#123;</div><div class="line">    if [type] == "syslog" &#123;</div><div class="line">        grok &#123;    #grok 功能将字符串转换为相应的字段，方便检索</div><div class="line">            match =&gt; &#123; "message" =&gt; "%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;" &#125;</div><div class="line">            add_field =&gt; [ "received_at", "%&#123;@timestamp&#125;" ]</div><div class="line">            add_field =&gt; [ "received_from", "%&#123;host&#125;" ]</div><div class="line">            &#125;    </div><div class="line">            date &#123;</div><div class="line">                    match =&gt; [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">    if [type] == "mongo" &#123;</div><div class="line">                grok &#123;</div><div class="line">#mongo_v3                        match =&gt; ["message","%&#123;TIMESTAMP_ISO8601:timestamp&#125;\s+%&#123;MONGO3_SEVERITY:severity&#125;\s+%&#123;MONGO3_COMPONENT:component&#125;\s+(?:\[%&#123;DATA:context&#125;\])?\s+%&#123;GREEDYDATA:body&#125;"]</div><div class="line">            match =&gt; ["message","%&#123;SYSLOGTIMESTAMP:timestamp&#125; \[%&#123;WORD:component&#125;\] %&#123;GREEDYDATA:body&#125;"]     #mongo_v2</div><div class="line">               &#125;</div><div class="line">                if[body]=~"ms$" &#123;</div><div class="line">                                        grok &#123;</div><div class="line">                                                match =&gt; ["body","query\s+%&#123;WORD:db_name&#125;\.%&#123;WORD:collection_name&#125;.*&#125;.*\&#125;(\s+%&#123;NUMBER:spend_time:int&#125;ms$)?"]</div><div class="line">                                        &#125;</div><div class="line">                                &#125;</div><div class="line">                date &#123;</div><div class="line">                        match =&gt; [ "timestamp", "UNIX", "YYYY-MM-dd HH:mm:ss", "ISO8601" ]</div><div class="line">                        remove_field =&gt; ["timestamp"]</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    if [type] == "nginx-error" &#123;</div><div class="line">                grok &#123;</div><div class="line">                        match =&gt; &#123; "message" =&gt; "(?&lt;timestamp&gt;%&#123;YEAR&#125;[./-]%&#123;MONTHNUM&#125;[./-]%&#123;MONTHDAY&#125;[- ]%&#123;TIME&#125;) \[%&#123;LOGLEVEL:severity&#125;\] %&#123;POSINT:pid&#125;#%&#123;NUMBER&#125;: %&#123;GREEDYDATA:errormessage&#125;(?:, client: (?&lt;client&gt;%&#123;IP&#125;|%&#123;HOSTNAME&#125;))(?:, server: %&#123;IPORHOST:server&#125;)(?:, request: %&#123;QS:request&#125;)?(?:, upstream: \"%&#123;URI:upstream&#125;\")?(?:, host: %&#123;QS:host&#125;)?(?: referrer: \"%&#123;URI:referrer&#125;|-\")?" &#125;</div><div class="line">                        overwrite =&gt; [ "message" ]</div><div class="line">                &#125;</div><div class="line">                date &#123;</div><div class="line">                        match =&gt; [ "nginx_error_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]</div><div class="line">                        remove_field =&gt; [ "timestamp" ]</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    if [type] == "nginx-acc" &#123;</div><div class="line">        elasticsearch &#123;    #存储</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">            index =&gt; "nginx_access-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    if [type] == "nginx-error" &#123;</div><div class="line">        elasticsearch &#123;</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">            index =&gt; "nginx_error-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    if [type] == "syslog" &#123;</div><div class="line">        elasticsearch &#123;</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">            index =&gt; "syslog-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if [type] == "mongo" &#123;</div><div class="line">                elasticsearch &#123;</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">                        index =&gt; "mongo-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>采集到数据展示如下：<br><img src="https://ttxsgoto.github.io/img/elk/elk.png" alt="elk"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ELK说明&quot;&gt;&lt;a href=&quot;#ELK说明&quot; class=&quot;headerlink&quot; title=&quot;ELK说明&quot;&gt;&lt;/a&gt;ELK说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="ELK" scheme="https://ttxsgoto.github.io/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Elasticsearch_dsl 基本查询</title>
    <link href="https://ttxsgoto.github.io/2017/12/24/elasticsearch-elasticsearch-dsl/"/>
    <id>https://ttxsgoto.github.io/2017/12/24/elasticsearch-elasticsearch-dsl/</id>
    <published>2017-12-24T07:25:33.000Z</published>
    <updated>2017-12-27T13:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p> 通过elasticsearch_dsl提供的API操作es进行基本查询操作</p>
<h4 id="创建mapping"><a href="#创建mapping" class="headerlink" title="创建mapping"></a>创建mapping</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> elasticsearch_dsl <span class="keyword">import</span> DocType, Date, Keyword, Text, Integer</div><div class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</div><div class="line"> </div><div class="line">connections.create_connection(hosts=[<span class="string">"localhost"</span>])</div><div class="line"><span class="comment"># connections.create_connection(hosts=["http://admin:admin@127.0.0.1:8080"])    # 使用认证连接</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhihuQ</span><span class="params">(DocType)</span>:</span></div><div class="line">    id = Integer()</div><div class="line">    zhihu_id = Integer()                    <span class="comment"># 知乎idlong</span></div><div class="line">    topics = Keyword()                      <span class="comment"># 主题text</span></div><div class="line">    url = Keyword()                         <span class="comment"># urlkeyword</span></div><div class="line">    title = Text(analyzer=<span class="string">"ik_max_word"</span>)    <span class="comment"># 标题text</span></div><div class="line">    content = Text(analyzer=<span class="string">"ik_max_word"</span>)  <span class="comment"># 内容text</span></div><div class="line">    answer_num = Integer()                  <span class="comment"># 回答数量int</span></div><div class="line">    comments_num = Integer()                <span class="comment"># 评论数量int</span></div><div class="line">    watch_user_num = Integer()              <span class="comment"># 关注者数量int</span></div><div class="line">    click_num = Integer()                   <span class="comment"># 浏览数量int</span></div><div class="line">    crawl_time = Date(format=<span class="string">'date_optional_time||yyyy-MM-dd HH:mm:ss'</span>) <span class="comment"># 创建时间</span></div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        index = <span class="string">"zhihuquestion"</span></div><div class="line">        doc_type = <span class="string">"question"</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    ZhihuQ.init()   <span class="comment"># 初始化mapping</span></div></pre></td></tr></table></figure>
<h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><h5 id="查询所有，指定返回数量-设置分页"><a href="#查询所有，指定返回数量-设置分页" class="headerlink" title="查询所有，指定返回数量,设置分页"></a>查询所有，指定返回数量,设置分页</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_all"</span>: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">   <span class="string">"from"</span>: <span class="number">0</span>,</div><div class="line">   <span class="string">"size"</span>: <span class="number">5</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># python：</span></div><div class="line">search = ZhihuQ.search()</div><div class="line">result = search.query().extra(size=<span class="number">1000</span>)[<span class="number">0</span>:<span class="number">5</span>]</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h5><p>使用分词处理后查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"match"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: <span class="string">"python"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">"match"</span>, title=<span class="string">'Python'</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="多字段查询"><a href="#多字段查询" class="headerlink" title="多字段查询"></a>多字段查询</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"query"</span>: <span class="string">"python"</span>,</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span>,</div><div class="line">                <span class="string">"content"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'python'</span>, fields=[<span class="string">'title'</span>, <span class="string">'content'</span>])</div><div class="line">q = search.query(multi_match)</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h5><p>值不做解析处理，直接查询,完全匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"term"</span>: &#123;</div><div class="line">            <span class="string">"topics"</span>: <span class="string">"python"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'term'</span>, title=<span class="string">'Python'</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="terms查询-多词条"><a href="#terms查询-多词条" class="headerlink" title="terms查询(多词条)"></a>terms查询(多词条)</h5><p>任何一个满足都可以返回数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"terms"</span>: &#123;</div><div class="line">            <span class="string">"topics"</span>: [</div><div class="line">                <span class="string">"python"</span>,</div><div class="line">                <span class="string">"Python"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'terms'</span>, topics=[<span class="string">'Python'</span>, <span class="string">'python'</span>])</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="词条-Term-查询-排序-Sorted"><a href="#词条-Term-查询-排序-Sorted" class="headerlink" title="词条(Term)查询-排序(Sorted)"></a>词条(Term)查询-排序(Sorted)</h5><p>指定返回字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"sort"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"crawl_time"</span>: &#123;</div><div class="line">                <span class="string">"order"</span>: <span class="string">"asc"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"terms"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: [</div><div class="line">                <span class="string">"Python"</span>,</div><div class="line">                <span class="string">"python"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"_source"</span>: [</div><div class="line">        <span class="string">"crawl_time"</span></div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'terms'</span>, title=[<span class="string">'Python'</span>, <span class="string">'python'</span>]).source([<span class="string">'crawl_time'</span>]).sort(&#123;<span class="string">'crawl_time'</span>:&#123;<span class="string">"order"</span> : <span class="string">"asc"</span>,&#125;&#125;)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="range-范围查询"><a href="#range-范围查询" class="headerlink" title="range 范围查询"></a>range 范围查询</h5><p>用于日期、数字和字符串类型的字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"Python"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"range"</span>: &#123;</div><div class="line">                        <span class="string">"crawl_time"</span>: &#123;</div><div class="line">                            <span class="string">"gte"</span>: <span class="string">"2017-12-21 19:19:44"</span>,</div><div class="line">                            <span class="string">"lte"</span>: <span class="string">"now"</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">"match"</span>, title=<span class="string">'Python'</span>).query(<span class="string">"range"</span>, crawl_time=&#123;<span class="string">'gte'</span>:<span class="string">'2017-12-21 19:19:44'</span>,<span class="string">'lte'</span>: <span class="string">'now'</span>&#125;)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="bool查询"><a href="#bool查询" class="headerlink" title="bool查询"></a>bool查询</h5><ul>
<li>must 等同于 AND</li>
<li>must_not 等同于 NOT</li>
<li>should 等同于 OR</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"python"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"c"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">q = Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) &amp; Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">q = Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) | Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">q = ~Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) &amp; ~Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">result = search.query(q)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="highlighting高亮"><a href="#highlighting高亮" class="headerlink" title="highlighting高亮"></a>highlighting高亮</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"python"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"c"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"highlight"</span>: &#123;</div><div class="line">        <span class="string">"fields"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: &#123;</div><div class="line">                <span class="string">"fragment_size"</span>: <span class="number">50</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">q = Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) &amp; Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">s = search.query(q)</div><div class="line">result = s.highlight(<span class="string">'title'</span>, fragment_size=<span class="number">50</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="模糊-fuzzy-查询"><a href="#模糊-fuzzy-查询" class="headerlink" title="模糊(fuzzy)查询"></a>模糊(fuzzy)查询</h5><p>在 Match检索 和多匹配检索中可以启用模糊匹配来捕捉拼写错误;模糊度是基于原始单词的编辑距离来指定,当术语长度大于 5 个字符时，AUTO 的模糊值等同于指定值 “2”。但是，80％ 拼写错误的编辑距离为 1，所以，将模糊值设置为 1 可能会提高您的整体搜索性能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span>,</div><div class="line">                <span class="string">"content"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"fuzziness"</span>: <span class="string">"AUTO"</span>,</div><div class="line">            <span class="string">"query"</span>: <span class="string">"Python"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'Python'</span>, fields=[<span class="string">'title'</span>, <span class="string">'content'</span>], fuzziness=<span class="string">'AUTO'</span>)</div><div class="line">q = search.query(multi_match)</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="通配符-wildcard-查询"><a href="#通配符-wildcard-查询" class="headerlink" title="通配符(wildcard)查询"></a>通配符(wildcard)查询</h5><p>通配符查询允许指定匹配的模式，而不是整个词组（term）检索</p>
<p>？ 匹配任何字符, * 匹配零个或多个字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"wildcard"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: <span class="string">"pyth*"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'wildcard'</span>, title=<span class="string">'python*'</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="match-phrase查询-短语查询"><a href="#match-phrase查询-短语查询" class="headerlink" title="match_phrase查询(短语查询)"></a>match_phrase查询(短语查询)</h5><p>匹配短语查询要求查询字符串中的所有词都存在于文档中，按照查询字符串中指定的顺序并且彼此靠近;默认情况下，这些词必须完全相邻，但可以指定偏离值（slop value)，该值指示在仍然考虑文档匹配的情况下词与词之间的偏离值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"type"</span>: <span class="string">"phrase"</span>,</div><div class="line">            <span class="string">"slop"</span>: <span class="number">6</span>,</div><div class="line">            <span class="string">"query"</span>: <span class="string">"python下载"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'python下载'</span>, fields=[<span class="string">'title'</span>],</div><div class="line">                                 type=<span class="string">'phrase'</span>,</div><div class="line">                                 slop=<span class="number">4</span></div><div class="line">                                 )</div><div class="line">q = search.query(multi_match)</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="短语前缀-Match-Phrase-Prefix-查询"><a href="#短语前缀-Match-Phrase-Prefix-查询" class="headerlink" title="短语前缀(Match Phrase Prefix)查询"></a>短语前缀(Match Phrase Prefix)查询</h5><p>匹配词组前缀查询在查询时提供搜索即时类型或“相对简单”的自动完成版本，而无需以任何方式准备数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"type"</span>: <span class="string">"phrase_prefix"</span>,</div><div class="line">            <span class="string">"slop"</span>: <span class="number">2</span>,</div><div class="line">            <span class="string">"query"</span>: <span class="string">"python精通"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'python精通'</span>, fields=[<span class="string">'title'</span>],</div><div class="line">                                 type=<span class="string">'phrase_prefix'</span>,</div><div class="line">                                 slop=<span class="number">2</span></div><div class="line">                                 )</div><div class="line">q = search.query(multi_match).source([<span class="string">'title'</span>])</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="aggregation聚合"><a href="#aggregation聚合" class="headerlink" title="aggregation聚合"></a>aggregation聚合</h5><p>聚合类型: Bucketing, Metric, Matrix, Pipeline<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># metric 计算相关, max, min, avg等</span></div><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"match_all"</span>: &#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"aggs"</span>: &#123;</div><div class="line">        <span class="string">"max_click_num"</span>: &#123;</div><div class="line">            <span class="string">"max"</span>: &#123;</div><div class="line">                <span class="string">"field"</span>: <span class="string">"click_num"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">_agg = A(<span class="string">'max'</span>, field=<span class="string">'click_num'</span>)</div><div class="line">result = search.aggs.metric(<span class="string">'max_click_num'</span>, _agg)</div><div class="line">data = result.execute()</div><div class="line"><span class="keyword">print</span> data.aggregations.max_click_num   <span class="comment"># 得到点击量最大的值</span></div><div class="line"> </div><div class="line"><span class="comment"># bucket</span></div><div class="line">_agg = A(<span class="string">'terms'</span>, field=<span class="string">'comment'</span>)</div><div class="line">f = search.aggs.bucket(<span class="string">'bucket_comment'</span>, _agg)</div><div class="line">query_word = json.dumps(f.to_dict())</div><div class="line"><span class="keyword">print</span> query_word</div><div class="line">response = search.execute()</div><div class="line"><span class="keyword">print</span> response.aggregations.bucket_comment.buckets</div><div class="line"><span class="keyword">print</span> response.to_dict()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt; 通过elasticsearch_dsl提供的API操作es进行基本查询操作&lt;/p&gt;
&lt;h4 id=&quot;创建mapping&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch_dsl" scheme="https://ttxsgoto.github.io/tags/Elasticsearch-dsl/"/>
    
  </entry>
  
  <entry>
    <title>Python Sqlalchemy模块</title>
    <link href="https://ttxsgoto.github.io/2017/12/24/python-sqlalchemy/"/>
    <id>https://ttxsgoto.github.io/2017/12/24/python-sqlalchemy/</id>
    <published>2017-12-24T04:27:23.000Z</published>
    <updated>2017-12-24T13:16:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line"><span class="comment"># echo=True是开启调试</span></div><div class="line"><span class="comment"># 连接到数据库, 返回engine实例,只有触发数据库事件,才连接数据库操作</span></div><div class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:root@127.0.0.1:3307/test?charset=utf8'</span>, echo=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 声明映射, 通常一个应用使用一个base实例，所有实体类都应该继承此类对象</span></div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="comment"># 定义表字段结构</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    CREATE TABLE addresses (</div><div class="line">            id INTEGER NOT NULL AUTO_INCREMENT,</div><div class="line">            email_address VARCHAR(30) NOT NULL,</div><div class="line">            user_id INTEGER,</div><div class="line">            PRIMARY KEY (id),</div><div class="line">            FOREIGN KEY(user_id) REFERENCES ttxs_users (id)</div><div class="line">        )</div><div class="line">    """</div><div class="line">    __tablename__ = <span class="string">'addresses'</span></div><div class="line">    </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    email_address = Column(String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</div><div class="line">    user_id = Column(Integer, ForeignKey(<span class="string">'ttxs_users.id'</span>))</div><div class="line">    user = relationship(<span class="string">"User"</span>, back_populates=<span class="string">'addresses'</span>) <span class="comment"># 通过relationship()来指明关系</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;Address(email_address='%s')&gt;"</span> % self.email_address</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    CREATE TABLE ttxs_users (</div><div class="line">        id INTEGER NOT NULL AUTO_INCREMENT,</div><div class="line">        name VARCHAR(30),</div><div class="line">        fullname VARCHAR(30),</div><div class="line">        password VARCHAR(30),</div><div class="line">        PRIMARY KEY (id)</div><div class="line">    )</div><div class="line">    """</div><div class="line">    __tablename__ = <span class="string">'ttxs_users'</span></div><div class="line">    </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">30</span>))</div><div class="line">    fullname = Column(String(<span class="number">30</span>))</div><div class="line">    password = Column(String(<span class="number">30</span>))</div><div class="line">    addresses = relationship(Address, order_by=Address.id, back_populates=<span class="string">"user"</span>) <span class="comment"># 通过relationship()来指明关系</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(name='%s', fullname='%s', password='%s')&gt;"</span> % (self.name, self.fullname, self.password)</div><div class="line"> </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(cls, **kwargs)</span>:</span></div><div class="line">    	<span class="keyword">try</span>:</div><div class="line">            r = cls(**kwargs)</div><div class="line">            session.add(r)</div><div class="line">            session.commit()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            session.rollback()</div><div class="line">            <span class="keyword">raise</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div><div class="line"> </div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">ed_user = User(name=<span class="string">'ttxsgoto'</span>, fullname=<span class="string">'ttxsgoto'</span>, password=<span class="string">'password'</span>)</div><div class="line">print(ed_user.name, ed_user.id) <span class="comment"># ttxsgoto None</span></div><div class="line"> </div><div class="line">ed_user.password = <span class="string">'f8s7ccs'</span></div><div class="line"> </div><div class="line"><span class="comment"># 添加ed_user的email_address</span></div><div class="line">ed_user.addresses = [</div><div class="line">    Address(email_address=<span class="string">'ttxsgoto01@163.com'</span>),</div><div class="line">    Address(email_address=<span class="string">'ttxsgoto02@163.com'</span>)</div><div class="line">]</div><div class="line"> </div><div class="line"><span class="comment"># 创建会话, Session是真正与数据库通信的handler</span></div><div class="line"><span class="comment"># 绑定数据库,方法一</span></div><div class="line">Session = sessionmaker(bind=engine)</div><div class="line"><span class="comment"># 绑定数据库,方法二</span></div><div class="line"><span class="comment"># Session = sessionmaker()</span></div><div class="line"><span class="comment"># Session.configure(bind=engine)</span></div><div class="line"> </div><div class="line">session = Session()</div><div class="line"> </div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">session.add(ed_user)</div><div class="line"><span class="comment"># 插入多条数据</span></div><div class="line">session.add_all([</div><div class="line">    User(name=<span class="string">'ttxsgoto01'</span>, fullname=<span class="string">'ttxsgoto01'</span>, password=<span class="string">'ttxsgoto01'</span>),</div><div class="line">    User(name=<span class="string">'ttxsgoto02'</span>, fullname=<span class="string">'ttxsgoto02'</span>, password=<span class="string">'ttxsgoto02'</span>),</div><div class="line">    User(name=<span class="string">'ttxsgoto03'</span>, fullname=<span class="string">'ttxsgoto03'</span>, password=<span class="string">'ttxsgoto03'</span>)</div><div class="line">])</div><div class="line"> </div><div class="line"><span class="comment"># 提交写入数据</span></div><div class="line">session.flush()</div><div class="line">session.commit()</div><div class="line"> </div><div class="line">our_user = session.query(User).filter_by(name=<span class="string">'ttxsgoto'</span>).first()</div><div class="line">print(ed_user <span class="keyword">is</span> our_user)</div><div class="line">print(our_user)</div><div class="line">print(session.dirty)</div><div class="line">print(session.new)</div><div class="line"> </div><div class="line"><span class="comment"># 查询</span></div><div class="line"><span class="keyword">for</span> instance <span class="keyword">in</span> session.query(User).order_by(User.id):</div><div class="line">    print(instance.name, instance.fullname, instance.password)</div><div class="line"> </div><div class="line"><span class="comment">############################## 相关查询 ##############################</span></div><div class="line"><span class="comment"># ==</span></div><div class="line">querys = session.query(User).filter(User.name == <span class="string">'ttxsgoto'</span>)   <span class="comment">#得到的是查询sql语句</span></div><div class="line"><span class="comment"># !=</span></div><div class="line">querys = session.query(User).filter(User.name != <span class="string">'ttxsgoto'</span>)</div><div class="line"><span class="comment"># like</span></div><div class="line">querys = session.query(User).filter(User.name.like(<span class="string">'%ttxsgoto%'</span>))</div><div class="line"><span class="comment"># ilike</span></div><div class="line">querys = session.query(User).filter(User.name.ilike(<span class="string">'%ttxsgoto%'</span>))</div><div class="line"><span class="comment"># in</span></div><div class="line">querys = session.query(User).filter(User.name.in_([<span class="string">'ttxsgoto01'</span>, <span class="string">'ttxsgoto02'</span>]))</div><div class="line"><span class="comment"># not in</span></div><div class="line">querys = session.query(User).filter(~User.name.in_([<span class="string">'ttxsgoto01'</span>, <span class="string">'ttxsgoto02'</span>]))</div><div class="line"><span class="comment"># is null</span></div><div class="line">querys = session.query(User).filter(User.name == <span class="keyword">None</span>)</div><div class="line"><span class="comment"># is not null</span></div><div class="line">querys = session.query(User).filter(User.name != <span class="keyword">None</span>)</div><div class="line"><span class="comment"># and</span></div><div class="line">querys = session.query(User).filter(User.name == <span class="string">'ttxsgoto'</span>, User.password == <span class="string">'f8s7ccs'</span>)</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="keyword">from</span>  sqlalchemy <span class="keyword">import</span> or_</div><div class="line">querys = session.query(User).filter(or_(User.name == <span class="string">'ttxsgoto'</span>, User.name == <span class="string">'ttxsgoto01'</span>))</div><div class="line"><span class="comment"># match</span></div><div class="line">querys = session.query(User).filter(User.name.match(<span class="string">'ttxsgoto'</span>))</div><div class="line"><span class="comment"># all()</span></div><div class="line">querys = session.query(User).all()</div><div class="line"><span class="comment"># first()</span></div><div class="line">querys = session.query(User).first()</div><div class="line">print(querys.name)</div><div class="line"><span class="comment"># one() / one_or_none()</span></div><div class="line">querys = session.query(User.id == <span class="number">13</span>).one()</div><div class="line"><span class="comment"># count</span></div><div class="line">querys = session.query(User).filter(User.name.like(<span class="string">'%ttxsgoto%'</span>)).count()</div><div class="line"><span class="keyword">for</span> query <span class="keyword">in</span> querys:</div><div class="line">    print(<span class="string">'query---&gt;'</span>, query.name)</div><div class="line"><span class="comment"># Querying with joins</span></div><div class="line">querys =session.query(User, Address).filter(User.id==Address.user_id).filter(Address.email_address==<span class="string">'ttxsgoto01@163.com'</span>).all()</div><div class="line"><span class="comment"># join</span></div><div class="line">querys =session.query(User).join(Address).filter(Address.email_address==<span class="string">'ttxsgoto01@163.com'</span>).all() <span class="comment"># 这里查询的是User表中信息</span></div><div class="line">querys = session.query(User).join(Address, User.id == Address.user_id).all()</div><div class="line"><span class="keyword">for</span> u, a <span class="keyword">in</span> querys:</div><div class="line">    print(<span class="string">'query---&gt;'</span>, u.name, a.email_address)</div><div class="line"> </div><div class="line"><span class="comment"># delete</span></div><div class="line">user = session.query(User).filter_by(id=<span class="number">6</span>).first()</div><div class="line">session.delete(user)</div><div class="line">session.commit()</div></pre></td></tr></table></figure>
<h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><h5 id="一对多-one-to-many"><a href="#一对多-one-to-many" class="headerlink" title="一对多(one to many)"></a>一对多(one to many)</h5><p>一对多(one to many) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在一的一方为一对多</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line">DB_URL = <span class="string">'sqlite:///test.db'</span></div><div class="line">engine = create_engine(DB_URL)</div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(<span class="string">'Child'</span>, backref=<span class="string">'parent'</span>)  <span class="comment"># backref建立双向关系</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'parent.id'</span>))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure>
<h5 id="多对一-many-to-one"><a href="#多对一-many-to-one" class="headerlink" title="多对一(many to one)"></a>多对一(many to one)</h5><p>多对一(many to one) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在多的一方为多对一<br>一个child可能有多个parent(父亲和母亲),这里的外键(child_id)和relationship(child)都定义在多(parent)的一方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line">DB_URL = <span class="string">'sqlite:///test.db'</span></div><div class="line">engine = create_engine(DB_URL)</div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent1'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    child_id = Column(Integer, ForeignKey(<span class="string">'child1.id'</span>))</div><div class="line">    child = relationship(<span class="string">'Child1'</span>, backref=<span class="string">'parent1'</span>, cascade= <span class="string">'all'</span>)   <span class="comment"># cascade设置关联删除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child1'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>
<h5 id="一对一-one-to-one"><a href="#一对一-one-to-one" class="headerlink" title="一对一(one to one)"></a>一对一(one to one)</h5><p>只需在一对多的relationship加上一个参数uselist=False,或者在多对一的backref中添加uselist=False ,即将对应关系变成一对一</p>
<h5 id="多对多-many-to-many"><a href="#多对多-many-to-many" class="headerlink" title="多对多(many to many)"></a>多对多(many to many)</h5><p>需要定义一张中间关联表来完成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line">DB_URL = <span class="string">'sqlite:///test.db'</span></div><div class="line">engine = create_engine(DB_URL)</div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Association</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'association'</span></div><div class="line"> </div><div class="line">    left_id = Column(Integer, ForeignKey(<span class="string">'left.id'</span>), primary_key=<span class="keyword">True</span>)</div><div class="line">    right_id = Column(Integer, ForeignKey(<span class="string">'right.id'</span>), primary_key=<span class="keyword">True</span>)</div><div class="line">    extra_data = Column(String(<span class="number">50</span>))</div><div class="line">    child = relationship(<span class="string">"Child2"</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'left'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(</div><div class="line">        <span class="string">"Association"</span>,)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'right'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作&lt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="Sqlalchemy" scheme="https://ttxsgoto.github.io/tags/Sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy Scrapy+Selenium抓取本站博客</title>
    <link href="https://ttxsgoto.github.io/2017/12/17/scrapy-selenium/"/>
    <id>https://ttxsgoto.github.io/2017/12/17/scrapy-selenium/</id>
    <published>2017-12-17T13:12:00.000Z</published>
    <updated>2017-12-17T14:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li>通过scrapy+selenium对本站blog进行抓取</li>
<li>抓取到的数据通过sqlalchemy操作写入mysql</li>
<li>用来练习scrapy+selenium模拟操作浏览器，没有对blog正文进行相应处理</li>
</ol>
<h4 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h4><ul>
<li>定义表结构(models.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> sqlalchemy.engine.url <span class="keyword">import</span> URL</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, Text, DateTime, Date</div><div class="line"><span class="keyword">from</span> tutorial_spider.settings <span class="keyword">import</span> MYSQL_DATABASE</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> create_engine(URL(**MYSQL_DATABASE), echo=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_news_table</span><span class="params">(engine)</span>:</span></div><div class="line">    Base.metadata.create_all(engine)</div><div class="line"> </div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoBlog</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'spider_ttxsgotoblog'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    title = Column(String(<span class="number">32</span>))          <span class="comment"># 标题</span></div><div class="line">    url = Column(String(<span class="number">128</span>))           <span class="comment"># url</span></div><div class="line">    publish = Column(String(<span class="number">32</span>))        <span class="comment"># 发布日期</span></div><div class="line">    content = Column(Text)              <span class="comment"># 内容</span></div><div class="line">    classify = Column(String(<span class="number">32</span>))       <span class="comment"># 分类</span></div><div class="line">    lable = Column(String(<span class="number">32</span>))          <span class="comment"># 标签</span></div><div class="line">    create_time = Column(String(<span class="number">32</span>))    <span class="comment"># 创建时间</span></div></pre></td></tr></table></figure>
<ul>
<li>定义item(items.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> tutorial_spider.models <span class="keyword">import</span> TtxsgotoBlog</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line"> </div><div class="line">    title = scrapy.Field()          <span class="comment"># 标题</span></div><div class="line">    url = scrapy.Field()            <span class="comment"># url</span></div><div class="line">    publish = scrapy.Field()        <span class="comment"># 发布日期</span></div><div class="line">    content = scrapy.Field()        <span class="comment"># 内容</span></div><div class="line">    classify = scrapy.Field(        <span class="comment"># 分类</span></div><div class="line">        output_processor=Join(<span class="string">','</span>)</div><div class="line">    )</div><div class="line">    lable = scrapy.Field()          <span class="comment"># 标签</span></div><div class="line">    create_time = scrapy.Field()    <span class="comment"># 创建时间</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_to_mysql</span><span class="params">(self)</span>:</span></div><div class="line">        item_sql = TtxsgotoBlog(</div><div class="line">            title=self[<span class="string">"title"</span>],</div><div class="line">            url=self[<span class="string">"url"</span>],</div><div class="line">            publish=self[<span class="string">"publish"</span>],</div><div class="line">            content=self[<span class="string">"content"</span>],</div><div class="line">            classify=self[<span class="string">"classify"</span>],</div><div class="line">            lable=self[<span class="string">"lable"</span>],</div><div class="line">            create_time=self[<span class="string">"create_time"</span>]</div><div class="line">        )</div><div class="line">        <span class="keyword">return</span> item_sql</div></pre></td></tr></table></figure>
<ul>
<li>数据处理pipeline(pipelines.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line"><span class="keyword">from</span> tutorial_spider.models <span class="keyword">import</span> db_connect, create_news_table</div><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"><span class="keyword">import</span> logging</div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_scope</span><span class="params">(Session)</span>:</span></div><div class="line">    session = Session()</div><div class="line">    session.expire_on_commit = <span class="keyword">False</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">yield</span> session</div><div class="line">        session.commit()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        session.rollback()</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        session.close()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicMyslqchemyPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        engine = db_connect()</div><div class="line">        create_news_table(engine)</div><div class="line">        self.Session = sessionmaker(bind=engine)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        insert_sql = item.insert_to_mysql()</div><div class="line">        <span class="keyword">with</span> session_scope(self.Session) <span class="keyword">as</span> session:</div><div class="line">            session.add(insert_sql)</div><div class="line">        <span class="comment"># return item</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoBlogMysqlchemyPipeline</span><span class="params">(BasicMyslqchemyPipeline)</span>:</span></div><div class="line">    <span class="string">"""保存ttxsgoto Blog到数据库"""</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<ul>
<li>抓取逻辑(spiders/ttxsgoto.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">    - scrapy + selenium 爬取ttxsgoto.github.io 文章</div><div class="line">    - 主要用来练习scrapy和selenium结合完成抓取工作</div><div class="line">    - 使用过程非标准scrapy框架</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> scrapy.xlib.pydispatch <span class="keyword">import</span> dispatcher</div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</div><div class="line"><span class="keyword">from</span> tutorial_spider.items <span class="keyword">import</span> TtxsgotoItem</div><div class="line"><span class="keyword">from</span> tutorial_spider.pipelines <span class="keyword">import</span> TtxsgotoBlogMysqlchemyPipeline</div><div class="line"> </div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'ttxsgoto'</span></div><div class="line">    allowed_domains = [<span class="string">'ttxsgoto.github.io'</span>]</div><div class="line">    start_urls = [<span class="string">'http://ttxsgoto.github.io/'</span>]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        self.driver = webdriver.Chrome()</div><div class="line">        self.driver.maximize_window()</div><div class="line">        logger.info(<span class="string">"开始爬取ttxsgoto.github.io数据"</span>)</div><div class="line">        super(TtxsgotoSpider, self).__init__(*args, **kwargs)</div><div class="line">        dispatcher.connect(self.close_driver, signals.spider_closed)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_driver</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">       关闭浏览器</div><div class="line">        '''</div><div class="line">        self.driver.quit()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver.get(self.start_urls[<span class="number">0</span>])</div><div class="line">        res = HtmlResponse(url=<span class="string">'index html'</span>, body=self.driver.page_source, encoding=<span class="string">"utf-8"</span>)</div><div class="line">        title_text = res.css(<span class="string">'#main section h1 a::text'</span>)[<span class="number">0</span>].root.strip()</div><div class="line">        self.driver.find_element_by_link_text(title_text).click()    <span class="comment"># 点击进去</span></div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">if</span> title_text <span class="keyword">in</span> self.driver.page_source:</div><div class="line">            self.detail_parse(self.driver.page_source, title_text)</div><div class="line"> </div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                key_word = self.driver.find_elements_by_class_name(<span class="string">"next"</span>)[<span class="number">0</span>].text  <span class="comment"># 进行下一篇文章抓取</span></div><div class="line">            <span class="keyword">except</span> (TypeError,IndexError):</div><div class="line">                self.driver.quit()</div><div class="line">                key_word = <span class="keyword">None</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> key_word:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            self.driver.find_element_by_link_text(key_word).click()</div><div class="line">            time.sleep(<span class="number">2</span>)</div><div class="line">            res = HtmlResponse(url=<span class="string">'next html'</span>, body=self.driver.page_source, encoding=<span class="string">"utf-8"</span>)</div><div class="line">            title_text = res.css(<span class="string">'.article-info h1 a::text'</span>).extract_first()</div><div class="line">            self.detail_parse(self.driver.page_source, title_text)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_parse</span><span class="params">(self, page_source, title)</span>:</span></div><div class="line">        res = HtmlResponse(url=<span class="string">'detail html'</span>, body=page_source, encoding=<span class="string">"utf-8"</span>)</div><div class="line">        item = TtxsgotoItem()</div><div class="line">        item[<span class="string">'title'</span>] = title   <span class="comment"># 标题</span></div><div class="line">        _url = res.css(<span class="string">'#main h1 a::attr(href)'</span>).extract_first()</div><div class="line">        item[<span class="string">'url'</span>] = parse.urljoin(self.start_urls[<span class="number">0</span>], _url)   <span class="comment"># url</span></div><div class="line">        item[<span class="string">'publish'</span>] = res.css(<span class="string">'.article-time time::text'</span>).extract_first()   <span class="comment"># 发布日期</span></div><div class="line">        item[<span class="string">'content'</span>] = res.css(<span class="string">'.article-content'</span>).extract_first()   <span class="comment"># 内容</span></div><div class="line">        classify_list = res.css(<span class="string">'.article-tags a::text'</span>).extract()</div><div class="line">        item[<span class="string">'classify'</span>] = <span class="string">','</span>.join(classify_list)  <span class="comment"># 分类</span></div><div class="line">        item[<span class="string">'lable'</span>] = res.css(<span class="string">'.article-categories a::text'</span>).extract_first()   <span class="comment"># 标签</span></div><div class="line">        item[<span class="string">'create_time'</span>] = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) <span class="comment"># 创建日期</span></div><div class="line">        pipeline = TtxsgotoBlogMysqlchemyPipeline()</div><div class="line">        pipeline.process_item(item, self.name)	<span class="comment"># 写入数据库</span></div></pre></td></tr></table></figure>
<h4 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h4><p><img src="https://ttxsgoto.github.io/img/scrapy/selenium01.png" alt=""></p>
<h4 id="代码github"><a href="#代码github" class="headerlink" title="代码github"></a>代码github</h4><p><a href="https://github.com/ttxsgoto/tutorial_spider" target="_blank" rel="external">Github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;通过scrapy+selenium对本站blog进行抓取&lt;/li&gt;
&lt;li&gt;抓取到的数据通过sqlalchemy操作写入mysq
    
    </summary>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/categories/Scrapy/"/>
    
    
      <category term="Selenium" scheme="https://ttxsgoto.github.io/tags/Selenium/"/>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/tags/Scrapy/"/>
    
  </entry>
  
</feed>
