<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2017-09-02T06:34:08.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>angular $modal模态框</title>
    <link href="https://ttxsgoto.github.io/2017/09/02/angular-modal/"/>
    <id>https://ttxsgoto.github.io/2017/09/02/angular-modal/</id>
    <published>2017-09-02T06:23:07.000Z</published>
    <updated>2017-09-02T06:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录angular模态框的使用</p>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"Modaldemo"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ModalDemoCtrl"</span> <span class="attr">class</span>=<span class="string">"modal-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"myModalContent.html"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span>  //头部</div><div class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"modal-title"</span>&gt;</span>I'm a modal!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span> <span class="attr">id</span>=<span class="string">"modal-body"</span>&gt;</span>    //中部</div><div class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"$event.preventDefault(); selected.item = item"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            Selected: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; selected.item &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span>  //底部</div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"ok()"</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"cancel()"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"stackedModal.html"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"modal-title-&#123;&#123;name&#125;&#125;"</span>&gt;</span>The &#123;&#123;name&#125;&#125; modal!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span> <span class="attr">id</span>=<span class="string">"modal-body-&#123;&#123;name&#125;&#125;"</span>&gt;</span></div><div class="line">            Having multiple modals open at once is probably bad UX but it's technically possible.</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"open()"</span>&gt;</span>Open me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"open('lg')"</span>&gt;</span>Large modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"open('sm')"</span>&gt;</span>Small modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"btn btn-default"</span></div><div class="line">            <span class="attr">ng-click</span>=<span class="string">"open('sm', '.modal-parent')"</span>&gt;</div><div class="line">        Modal appended to a custom parent</div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"toggleAnimation()"</span>&gt;</span>Toggle Animation (&#123;&#123; animationsEnabled &#125;&#125;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"openMultipleModals()"</span>&gt;</span></div><div class="line">        Open multiple modals at once</div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"selected"</span>&gt;</span>Selection from a modal: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">myApp = angular.module(<span class="string">'Modaldemo'</span>, [<span class="string">'ui.bootstrap'</span>]);</div><div class="line">myApp.controller(<span class="string">'ModalDemoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$uibModal'</span>,<span class="string">'$log'</span>,<span class="string">'$document'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $uibModal, $log, $document</span>) </span>&#123;</div><div class="line">    $scope.items = [<span class="string">'item1'</span>, <span class="string">'item2'</span>, <span class="string">'item3'</span>];</div><div class="line">    $scope.animationsEnabled = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">    $scope.open = <span class="function"><span class="keyword">function</span> (<span class="params">size, parentSelector</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> modalInstance = $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,    <span class="comment">//打开时的动画开关</span></div><div class="line">            ariaLabelledBy: <span class="string">'modal-title'</span>,</div><div class="line">            <span class="attr">ariaDescribedBy</span>: <span class="string">'modal-body'</span>,</div><div class="line">            <span class="attr">backdrop</span>: <span class="literal">true</span>,                          <span class="comment">//控制弹框背景是否为暗影，默认为true</span></div><div class="line">            templateUrl: <span class="string">'myModalContent.html'</span>,     <span class="comment">//模态框的页面内容</span></div><div class="line">            <span class="comment">// template: '&lt;div&gt;abc&lt;/div&gt;',          //用于显示html标签</span></div><div class="line">            keyboard: <span class="literal">true</span>,                         <span class="comment">//当按下Esc时，模态对话框是否关闭，默认为ture</span></div><div class="line">            controller: <span class="string">'ModalInstanceCtrl'</span>,        <span class="comment">//模态框的控制器,是用来控制模态框</span></div><div class="line">            <span class="comment">// controllerAs: 'ModalDemoCtrl',</span></div><div class="line">            size: size,                             <span class="comment">//模态框的大小尺寸</span></div><div class="line">            appendTo: angular.element(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]),</div><div class="line">            <span class="attr">resolve</span>: &#123;                              <span class="comment">//定义一个成员并将他传递给$modal指定的控制器,将主控制器中的参数传到模态框控制器中</span></div><div class="line">                items: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                <span class="comment">//items回调函数</span></div><div class="line">                    <span class="keyword">return</span> $scope.items;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line">        modalInstance.result.then(<span class="function"><span class="keyword">function</span> (<span class="params">selectedItem</span>) </span>&#123; <span class="comment">//接收模态框返回值的函数,确认处理函数</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'selectedItem--&gt;'</span>,selectedItem);    <span class="comment">//模态框的返回值</span></div><div class="line">            $scope.selected = selectedItem;</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                                    <span class="comment">//取消处理函数</span></div><div class="line">            $log.info(<span class="string">'Modal dismissed at: '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.openComponentModal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> modalInstance = $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,</div><div class="line">            <span class="attr">component</span>: <span class="string">'modalComponent'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">items</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> $scope.items;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        modalInstance.result.then(<span class="function"><span class="keyword">function</span> (<span class="params">selectedItem</span>) </span>&#123;</div><div class="line">            $scope.selected = selectedItem;</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $log.info(<span class="string">'modal-component dismissed at: '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.openMultipleModals = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,</div><div class="line">            <span class="attr">ariaLabelledBy</span>: <span class="string">'modal-title-bottom'</span>,</div><div class="line">            <span class="attr">ariaDescribedBy</span>: <span class="string">'modal-body-bottom'</span>,</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'stackedModal.html'</span>,</div><div class="line">            <span class="attr">size</span>: <span class="string">'sm'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">                $scope.name = <span class="string">'bottom'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line">        $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,</div><div class="line">            <span class="attr">ariaLabelledBy</span>: <span class="string">'modal-title-top'</span>,</div><div class="line">            <span class="attr">ariaDescribedBy</span>: <span class="string">'modal-body-top'</span>,</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'stackedModal.html'</span>,</div><div class="line">            <span class="attr">size</span>: <span class="string">'sm'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">                $scope.name = <span class="string">'top'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.toggleAnimation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $scope.animationsEnabled = !$scope.animationsEnabled;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line"> </div><div class="line"><span class="comment">// modal controller</span></div><div class="line">myApp.controller(<span class="string">'ModalInstanceCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$uibModalInstance'</span>,<span class="string">'items'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $uibModalInstance, items</span>) </span>&#123;</div><div class="line">    $scope.items = items;</div><div class="line">    $scope.selected = &#123;</div><div class="line">        <span class="attr">item</span>: $scope.items[<span class="number">0</span>]</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.ok = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ok functon'</span>);</div><div class="line">        $uibModalInstance.close($scope.selected.item);  <span class="comment">//关闭模态窗口并传递一个结果</span></div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'cancel functon'</span>);</div><div class="line">        $uibModalInstance.dismiss(<span class="string">'cancel'</span>);    <span class="comment">//撤销模态关闭方法并传递一个原因</span></div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录angular模态框的使用&lt;/p&gt;
&lt;h4 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="Angularjs" scheme="https://ttxsgoto.github.io/categories/Angularjs/"/>
    
    
      <category term="modal" scheme="https://ttxsgoto.github.io/tags/modal/"/>
    
  </entry>
  
  <entry>
    <title>angular自定义指令</title>
    <link href="https://ttxsgoto.github.io/2017/08/22/angular-directive/"/>
    <id>https://ttxsgoto.github.io/2017/08/22/angular-directive/</id>
    <published>2017-08-22T11:56:41.000Z</published>
    <updated>2017-09-02T06:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建自定义指令"><a href="#创建自定义指令" class="headerlink" title="创建自定义指令"></a>创建自定义指令</h4><ul>
<li>定义指令<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.directive(<span class="string">'unorderedList'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">        <span class="comment">// scope:指令被应用到的视图的作用域</span></div><div class="line">        <span class="comment">// element:指令被应用到的html元素</span></div><div class="line">        <span class="comment">// attrs:html元素的属性</span></div><div class="line">        <span class="keyword">var</span> data = scope[attrs[<span class="string">"unorderedList"</span>]];</div><div class="line">        <span class="keyword">var</span> name = attrs[<span class="string">'Name'</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自定义指令属性"><a href="#自定义指令属性" class="headerlink" title="自定义指令属性"></a>自定义指令属性</h4><h5 id="restrict"><a href="#restrict" class="headerlink" title="restrict"></a>restrict</h5><p>可选参数，标识符在模板中作为元素，属性，类，注释或组合，默认为A</p>
<pre><code>- E 元素名使用  &lt;my-directive&gt;123&lt;/my-directive&gt;
- A 属性使用 &lt;div my-directive&gt; 
- C 类名使用 &lt;div class=&quot;my-directive&quot;&gt;&lt;/div&gt;
- M 注释使用 &lt;!-- directive: my-directive --&gt; 
</code></pre><h5 id="template"><a href="#template" class="headerlink" title="template"></a>template</h5><p>指令内容表示为html</p>
<pre><code>- 模板内容html文本，这个内容会根据replace参数的设置替换节点或只替换节点内容
- 一个函数，可以接受两个参数tElement和tAttrs
    - tElement：是指使用此指令的元素
    - tAttrs：实例的属性
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hello-world</span> <span class="attr">title</span> = <span class="string">'这是一个directive'</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></div><div class="line"> </div><div class="line">app.directive("helloWorld",function()&#123;  </div><div class="line">        return&#123;  </div><div class="line">         restrict:'EAC',  </div><div class="line">         template: function(tElement,tAttrs)&#123;  </div><div class="line">            var _html = '';  </div><div class="line">            _html += '<span class="tag">&lt;<span class="name">div</span>&gt;</span>' +'hello '+tAttrs.title+'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>';  </div><div class="line">            return _html;  </div><div class="line">         &#125;  </div><div class="line">     &#125;;  </div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h5 id="templateUrl"><a href="#templateUrl" class="headerlink" title="templateUrl"></a>templateUrl</h5><p>外部模板文件</p>
<pre><code>- 加载模板所要使用的URL
- 可以加载当前模板内对应的text/ng-template script id
- 大体同template
</code></pre><h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><p>指定模板内容是否替换掉指令所应用的元素</p>
<pre><code>- 如果配置为true则替换指令所在元素,但是class和属性还是会，如果为false或者不指定，则把当前指令追加到所在元素内部
- 对于restrict为元素E 在最终效果中是多余的，所有replace通常设置为true
- 当replace属性为true的时候,template的最外层必须用一整个标签包裹起来
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--js--&gt;</span></div><div class="line">angular.module('myApp',[])</div><div class="line">    .directive("myDirective",function () &#123;</div><div class="line">        return&#123;</div><div class="line">            restrict: "EACM",</div><div class="line">            template: "<span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello ttxs<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>",</div><div class="line">            replace: true</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="comment">&lt;!--html--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">my-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">my-directive</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">my-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-directive"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- directive: my-directive --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h5><p>指令编译的三个阶段</p>
<pre><code>1. 标准浏览器API转化-将html转化成dom，即自定义的html标签需要符合html格式
2. angular compile - 搜索匹配directive，按照priority排序，并执行directive上的compile方法
3. angular link 执行directive上的link方法，进行scope绑定及事件绑定
</code></pre><ul>
<li>compile函数用来对模板自身进行转换，仅在编译阶段运行一次</li>
<li>compile中直接返回的函数时postLink,表示link参数需要执行的函数，也可以返回一个对象里面包括preLink和postLink</li>
<li>当定义了compile参数，将忽略link参数，因为compile里返回的就是该指令需要执行的link函数</li>
<li>想在dom渲染前对它进行操作，并不需要scope参数所在所有相同directive里共享某些方法，这时应该定义compile，性能比较好</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"firstController"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--1.将div转化为dom结构--&gt;</span></div><div class="line">        <span class="comment">&lt;!--2. 默认的优先级为0，哪个先定义先使用--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"user in users"</span> <span class="attr">custom-directive</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;div custom-directive&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angularjs.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!--js--&gt;</span></div><div class="line">var myApp = angular.module('myApp', [])</div><div class="line">    .directive("customDirective", function () &#123;</div><div class="line">        return&#123;</div><div class="line">            restrict: 'ECAM',</div><div class="line">            template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;user.name&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</div><div class="line">            replace:true ,</div><div class="line">            compile: function (tElement,tAttrs,transclude) &#123;</div><div class="line">                console.info('编译阶段...,用于修改dom元素或结构');</div><div class="line">                tElement.append(angular.element("<span class="tag">&lt;<span class="name">span</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">span</span>&gt;</span>"))</div><div class="line">                console.info(tElement); // 元素</div><div class="line">                console.info(tAttrs);   // 元素属性</div><div class="line">                console.info(transclude);   // transclude对象</div><div class="line">                return&#123;</div><div class="line">                    // 编译阶段之后，指令连接到子元素之前运行</div><div class="line">                    pre: function preLink(scope,iElement,iAttrs,controller) &#123;</div><div class="line">                        console.log('preLink......')</div><div class="line"> </div><div class="line">                    &#125;,</div><div class="line">                    // 表示所有子元素指令都连接之后才运行</div><div class="line">                    post: function postLink(scope,iElement,iAttrs,controller) &#123;</div><div class="line">                        iElement.on('click', function () &#123;</div><div class="line">                            scope.$apply(function () &#123;</div><div class="line">                                scope.user.name = 'click --&gt; abd';  // 进行一次脏检查</div><div class="line">                            &#125;)</div><div class="line">                        &#125;);</div><div class="line">                        console.log('postLink......')</div><div class="line">                    &#125;</div><div class="line"> </div><div class="line">                &#125;;  // 这里return 的就是link函数</div><div class="line"> </div><div class="line">                // postLink</div><div class="line">                // return function () &#123;</div><div class="line">                //     console.info('compile function');</div><div class="line">                // &#125;</div><div class="line"> </div><div class="line">            &#125;,</div><div class="line"> </div><div class="line">            // 该link函数表示的就是postlink</div><div class="line">            link:function () &#123;</div><div class="line">                console.info('Link.....')</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"> </div><div class="line">    .controller('firstController', ['$scope', function ($scope) &#123;</div><div class="line">        $scope.users = [</div><div class="line">            &#123;</div><div class="line">                id:10,</div><div class="line">                name:'ttxsgoto01'</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                id:20,</div><div class="line">                name:'ttxsgoto02'</div><div class="line">            &#125;</div><div class="line">        ];</div><div class="line">    &#125;]);</div></pre></td></tr></table></figure>
<h5 id="link"><a href="#link" class="headerlink" title="link"></a>link</h5><p>指令需要处理大量DOM操作时，使用link方法；当只返回一个链接函数时，所创建的指令只能被当作一个属性来使用</p>
<pre><code>- 对特定的元素注册事件
- 需要用到scope参数来实现dom元素行为
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, ctrl, linker</span>)</span>&#123;</div><div class="line">    <span class="comment">// scope: 指令所在作用域</span></div><div class="line">    <span class="comment">// element: 指令元素</span></div><div class="line">    <span class="comment">// attrs: 指令元素的属性的集合</span></div><div class="line">    <span class="comment">// ctrl: 需要和require属性一起使用，用于调用其他指令的方法,指令之间的互相通信</span></div><div class="line">    <span class="comment">// linker: transclude()函数</span></div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="require"><a href="#require" class="headerlink" title="require"></a>require</h5><p>字符串或者数组</p>
<pre><code>- 字符串代表另一个指令的名字，作为link函数的第四个参数
- 对应前缀查找控制器的行为

    - 没有前缀，指令会在自身提供的控制器中进行查找，如果找不到任何控制器，则会抛出一个error
    - ？如果在当前的指令没有找到所需的控制器，则会将null传给link连接函数的第四个参数
    - ^如果在当前的指令没有找到所需的控制器，则会查找父元素的控制器
    - ?^组合
</code></pre><h5 id="priority"><a href="#priority" class="headerlink" title="priority"></a>priority</h5><p>指令的优先级，可选参数，若在单个DOM元素上有多个指令，则优先级高的先执行</p>
<h5 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h5><p>bool型，可选参数，true/false ，若设置为true，则优先级低于此指令的其他指令则无效，不会被调用优先级相同任然会执行</p>
<h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h5><p>bool值或者对象，可选参数，默认为false，表示继承父级作用域</p>
<ul>
<li>如果值为true，表示继承父作用域，并创建自己的作用域(子作用域),即使同一个控制器里数据也不共享</li>
<li><p>如果为对象，{}则表示创建一个全新的隔离作用域,不能使用父级对应的属性<br> 通过绑定策略来访问父作用域的属性:</p>
<ul>
<li>通过属性值进行绑定，可读取控制器中定义的属性值，使用@来进行单向文本（字符串）绑定，单项读取父级元素不能改变，这里引用的父级的属性只能是字符串，不能为对象，左右两边都是属性   <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">isolated-directive</span> <span class="attr">other-name</span>=<span class="string">"&#123;&#123; name &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class="line"> </div><div class="line">angular.module('myApp')</div><div class="line">    .directive("isolatedDirective", function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                name: '@otherName'</div><div class="line">                &#125;,</div><div class="line">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class="line">            &#125;;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>使用’=’创建在指令的独立作用域和外部作用域中的双向绑定对象<pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">isolated-directive</span> <span class="attr">other-name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class="line">angular.module('myApp')</div><div class="line">    .directive("isolatedDirective", function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                name: '=otherName'</div><div class="line">                &#125;,</div><div class="line">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class="line">            &#125;;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ul>
<p>注意：这里@和= 在使用上的区别，一是功能的不同，二是调用方式不同，@使用other-name=,=使用other-name=”name”</p>
<ul>
<li>使用’&amp;’调用父作用域中属性包装成一个函数或者父作用域的函数，从而以函数的方式读写父作用域的属性;允许传入一个可被指令内部调用的函数<pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">isolated-directive</span> <span class="attr">action</span>=<span class="string">"click()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line">angular.module('myApp')</div><div class="line">    .controller("myController", function ($scope) &#123;</div><div class="line">        $scope.value = "hello world";</div><div class="line">        $scope.click = function () &#123;</div><div class="line">                $scope.value = Math.random();</div><div class="line">            &#125;;</div><div class="line">        &#125;)</div><div class="line">    .directive("isolatedDirective", function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                action: "&amp;"</div><div class="line">                &#125;,</div><div class="line">            template: '<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"data"</span> <span class="attr">ng-click</span>=<span class="string">"action()"</span>/&gt;</span>'</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line"><span class="comment">&lt;!-- 被传入到指令action属性的click()函数在控制器中定义, 当ng-click实际触发控制器中定义的action()函数 --&gt;</span></div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">当为false时候，儿子继承父亲的值，改变父亲的值，儿子的值也随之变化，反之亦如此。（继承不隔离）</div><div class="line">当为true时候，儿子继承父亲的值，改变父亲的值，儿子的值随之变化，但是改变儿子的值，父亲的值不变。（继承隔离）</div><div class="line">当为&#123;&#125;时候，没有继承父亲的值，所以儿子的值为空，改变任何一方的值均不能影响另一方的值。（不继承隔离）</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Directive Scopes<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"scopeTemplate"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"data.name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>City: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"city"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Country: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"country"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        angular.module(<span class="string">"exampleApp"</span>, [])</div><div class="line">            .directive(<span class="string">"scopeDemo"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">template</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="keyword">return</span> angular.element(</div><div class="line">                            <span class="built_in">document</span>.querySelector(<span class="string">"#scopeTemplate"</span>)).html();</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">scope</span>: <span class="literal">true</span>,    <span class="comment">//同一个控制器里数据也不共享</span></div><div class="line">                    scope: &#123;</div><div class="line">                        <span class="attr">local</span>: <span class="string">"@nameprop"</span>  <span class="comment">//单项绑定，说明：属性local的值来自一个nameprop特性的单项绑定获得</span></div><div class="line">                        local: <span class="string">"=nameprop"</span> <span class="comment">//双向绑定</span></div><div class="line">                        cityFn: <span class="string">"&amp;city"</span> <span class="comment">//&amp;符号说明指定特性的值绑定到一个函数，左边为一个函数调用，右边为一个属性</span></div><div class="line">                    &#125; <span class="comment">//隔离作用域</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        .controller(<span class="string">"scopeCtrl"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">            $scope.data = &#123; <span class="attr">name</span>: <span class="string">"Adam"</span> &#125;;</div><div class="line">            $scope.city = <span class="string">"London"</span>;</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="transclude"><a href="#transclude" class="headerlink" title="transclude"></a>transclude</h5><p>布尔值或者字符element，默认值为false，<br>    true:提取包含在指令那个元素里面的内容，再将它放置在指令模板的特定位置。当我们开启transclude之后，我们就可以使用ng-transclude来指明应该在什么地方放置transclude的内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># html</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ttxsgoto<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"transclude.html"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            abc:&#123;&#123;title&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">            def:<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"title"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"4"</span> <span class="attr">ng-model</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">transclude-directive</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line"># js</div><div class="line">.directive("transcludeDirective", function () &#123;</div><div class="line">        return&#123;</div><div class="line">            restrict: "EACM",</div><div class="line">            templateUrl: "transclude.html",</div><div class="line">            replace: true,</div><div class="line">            transclude: true</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><p>可以为字符串或者函数，可以直接在指令内部定义为匿名函数，同样可以注入任何服务</p>
<ul>
<li>如果为字符串，则将字符串当做是控制器的名字，来查找注册在应用中的控制器的构造函数</li>
<li>直接在指令内部定义匿名函数</li>
</ul>
<h5 id="controllerAs"><a href="#controllerAs" class="headerlink" title="controllerAs"></a>controllerAs</h5><p>不用将属性和方法挂载到$scope上，而是this上；设置控制器别名</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;创建自定义指令&quot;&gt;&lt;a href=&quot;#创建自定义指令&quot; class=&quot;headerlink&quot; title=&quot;创建自定义指令&quot;&gt;&lt;/a&gt;创建自定义指令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义指令&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="Angularjs" scheme="https://ttxsgoto.github.io/categories/Angularjs/"/>
    
    
      <category term="directive" scheme="https://ttxsgoto.github.io/tags/directive/"/>
    
  </entry>
  
  <entry>
    <title>angular常用服务</title>
    <link href="https://ttxsgoto.github.io/2017/08/20/angular-servers/"/>
    <id>https://ttxsgoto.github.io/2017/08/20/angular-servers/</id>
    <published>2017-08-20T12:22:02.000Z</published>
    <updated>2017-08-20T13:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Constant</li>
<li>Value</li>
<li>Factory</li>
<li>Service</li>
<li>Run</li>
<li>Provider</li>
<li>Decorator</li>
</ul>
<p>应用里大部分的业务逻辑和持久化数据都应该放在service里<br>service可以用来永久保存应用的数据，并且这些数据可以在不同的controller之间使用</p>
<h4 id="Constant"><a href="#Constant" class="headerlink" title="Constant"></a>Constant</h4><ul>
<li>定义常量，从注册后就不会在改变</li>
<li>constant创建服务返回一个json对象,这个对象里可以有参数,可以有方法,一般constant创建的服务不会去修改它的内容</li>
<li>可以在注入到任何方法中调用</li>
<li>constant服务不能通过decorator进行装饰<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  .constant(<span class="string">'getData'</span>,&#123;</div><div class="line">        <span class="attr">url</span>:<span class="string">'http://localhost:5500/products'</span>,</div><div class="line">        <span class="attr">name</span>:<span class="string">'ttxs'</span>,</div><div class="line">        <span class="attr">age</span>:<span class="number">28</span>,</div><div class="line">        <span class="attr">getId</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h4><ul>
<li>value创建服务返回一个json对象,这个对象里可以有参数,可以有方法,如果属性和方法需要被修改内容,就用value来创建服务</li>
<li>可以注入到controller，directive</li>
<li>value可以被装饰</li>
</ul>
<p>constant和value主要就是用于存放一些数据或方法以供使用,区别是constant一般是存放固定内容,value存放可能会被修改的内容</p>
<h4 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h4><ul>
<li>一个可注入的函数，调用factory时只是调用普通的function，所以factory可以返回任何东西，函数需要有返回值obj，而service可以不用返回</li>
<li>Factory 一般就是创建一个对象，然后在对这个对象添加方法与数据，最后将些对象返回即可</li>
<li>和constant,value的区别:factory服务是有一个处理过程,经过这个过程,才返回结果的</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">    .factory(<span class="string">'getData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> myname = <span class="string">'ttxs'</span>;</div><div class="line">        <span class="keyword">var</span> age = <span class="number">28</span>;</div><div class="line">        <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">name</span>: myname,</div><div class="line">            <span class="attr">age</span>: age,</div><div class="line">            <span class="attr">getId</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> id</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><ul>
<li>可注入的构造器，它用在controller中通信或者共享数据,适合使用在功能控制比较多的service里面</li>
<li>service里可以不返回东西，因为angularJS会调用new关键字来创建对象</li>
<li>seivce定义的服务不能在.config中使用！只有provider定义的才可以</li>
<li>这里的值都应该使用this定义</li>
<li>自定义服务return 返回值必须为对象,不能为字符串,数字等<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">app.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, myService</span>) </span>&#123;</div><div class="line">    $scope.getPrivate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(myService.getPrivate());</div><div class="line">    &#125;;</div><div class="line">    $scope.getPUbluc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(myService.variable);</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">app.controller(<span class="string">'myController2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, myService</span>) </span>&#123;</div><div class="line">	<span class="comment">// do something</span></div><div class="line">&#125;);</div><div class="line"> </div><div class="line">app.service(<span class="string">'myService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'myService'</span>);</div><div class="line">    <span class="keyword">var</span> privateValue = <span class="string">"I am Private"</span>;</div><div class="line">    <span class="keyword">this</span>.variable = <span class="string">"This is public"</span>;</div><div class="line">    <span class="keyword">this</span>.getPrivate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> privateValue;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h4><ul>
<li>在注入启动之后执行某些操作，而这些操作需要在页面对用户可用之前执行，使用run方法；即在config方法之后controller方法之前调用</li>
<li>使用场景：远程加载模板，需要在使用前加入缓存，或者在操作前判断用户是否登录，未登录需先跳转到登录页面</li>
</ul>
<h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><ul>
<li>$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务;服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务</li>
<li>provider必须有一个$get方法，是所有封装函数都是由provider封装的</li>
<li>provider是一个可配置的factory</li>
</ul>
<pre><code class="js"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[],<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>)</span>{

    <span class="comment">// 自定义服务</span>
    $provide.provider(<span class="string">'CustomService'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{

        <span class="keyword">this</span>.$get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
            <span class="keyword">return</span> {
                <span class="attr">message</span> : <span class="string">'CustomService Message'</span>
            }
        }
    });

    <span class="comment">// 自定义工厂,返回值为任意值</span>
    $provide.factory(<span class="string">'CustomFactory'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];
    });

    <span class="comment">// 自定义服务, 返回值必须为对象,不能为字符串,数字等</span>
    $provide.service(<span class="string">'CustomService2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">return</span> [<span class="string">'xxx'</span>];
        <span class="comment">// return 'abc';</span>
    })
</code></pre>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1) 服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,无论修改其中的哪一个,其它所有的服务都会被改变<br>2) constant服务不能通过decorator进行装饰<br>3) 固定的参数和方法,使用constant;可能被修改的参数和方法,使用value<br>4) 逻辑处理后得到的参数或方法,使用factory<br>5) Service 是用”new”关键字实例化的。因此，你应该给”this”添加属性，然后 service 返回”this”。你把 service 传进 controller 之后，在controller里 “this” 上的属性就可以通过 service 来使用<br>6) Providers 是唯一一种你可以传进 .config() 函数的 service。当你想要在 service 对象启用之前，先进行模块范围的配置，那就应该用 provider<br>7) Factory/service是第一个注入时才实例化，而provider不是，它是在config之前就已实例化</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Constant&lt;/li&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;li&gt;Factory&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;Run&lt;/li&gt;
&lt;li&gt;Provider&lt;/li&gt;
&lt;li&gt;Decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用里大部分的业务
    
    </summary>
    
      <category term="Angularjs" scheme="https://ttxsgoto.github.io/categories/Angularjs/"/>
    
    
      <category term="services" scheme="https://ttxsgoto.github.io/tags/services/"/>
    
  </entry>
  
  <entry>
    <title>Filters</title>
    <link href="https://ttxsgoto.github.io/2017/08/11/Filters/"/>
    <id>https://ttxsgoto.github.io/2017/08/11/Filters/</id>
    <published>2017-08-11T12:10:55.000Z</published>
    <updated>2017-08-10T12:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>DRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求</p>
<h4 id="全局filter"><a href="#全局filter" class="headerlink" title="全局filter"></a>全局filter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-filter</div></pre></td></tr></table></figure>
<p>在 settings 里指定应用到全局的 filter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;rest_framework.filters.DjangoFilterBackend&apos;,)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="filter定义字段"><a href="#filter定义字段" class="headerlink" title="filter定义字段"></a>filter定义字段</h4><p>filters.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django_filters <span class="keyword">import</span> FilterSet</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRecordFilter</span><span class="params">(FilterSet)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = UserRecord</div><div class="line">        fields = [<span class="string">'source'</span>, <span class="string">'source_id'</span>, <span class="string">'url'</span>,]</div><div class="line">        fields = &#123;</div><div class="line">        <span class="string">'from_channel'</span>:[<span class="string">'gt'</span>, <span class="string">'lt'</span>, <span class="string">'in'</span>, <span class="string">'exact'</span>, <span class="string">'range'</span>, <span class="string">'isnull'</span>, <span class="string">'icontains'</span>]</div><div class="line">            <span class="comment"># 大于, 小于，多个，等于, 范围, 是否为空bool,模糊查询</span></div><div class="line">        &#125;</div><div class="line">        exclude = [<span class="string">'from_channel'</span>, <span class="string">'created_time'</span>] <span class="comment"># 排除字段</span></div><div class="line">        together = [<span class="string">'from_channel'</span>, <span class="string">'resume_id'</span>] <span class="comment"># 字段并集，同时满足条件</span></div></pre></td></tr></table></figure></p>
<p>views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRecordViewSet</span><span class="params">(ModelViewSet)</span>:</span></div><div class="line">    serializer_class = UserRecordSerializer</div><div class="line">    queryset = UserRecord.objects.all()</div><div class="line">    filter_class = UserRecordFilter</div><div class="line">    filter_backends = (DjangoFilterBackend,)</div><div class="line"></div><div class="line"><span class="comment"># 请求url</span></div><div class="line"><span class="comment"># http://127.0.0.1:8888/api/v2/user_records?source_id=3&amp;url=url</span></div></pre></td></tr></table></figure></p>
<h4 id="viewset-的-filter"><a href="#viewset-的-filter" class="headerlink" title="viewset 的 filter"></a>viewset 的 filter</h4><p>为 viewset 分别指定 filter，方法就是在定义 viewset 的时候定义一个名为 filter_backend 的类变量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer = UserSerializer</div><div class="line">    filter_backends = (filters.DjangoFilterBackend,)</div></pre></td></tr></table></figure></p>
<h4 id="默认的-filter"><a href="#默认的-filter" class="headerlink" title="默认的 filter"></a>默认的 filter</h4><ul>
<li><p>SearchFilter</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter_backends = (filters.SearchFilter,)</div><div class="line">search_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)  <span class="comment"># 指定搜索的域</span></div><div class="line"> </div><div class="line"><span class="comment"># 请求url</span></div><div class="line"><span class="comment"># http://127.0.0.1:8888/api/v2/user_records?search=username</span></div></pre></td></tr></table></figure>
</li>
<li><p>OrderingFilter</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter_backends = (filters.OrderingFilter,)</div><div class="line">ordering_fields = (<span class="string">'created_time'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 请求url</span></div><div class="line"><span class="comment"># http://127.0.0.1:8888/api/v2/user_records?ordering=-created_time</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自定义-filter"><a href="#自定义-filter" class="headerlink" title="自定义 filter"></a>自定义 filter</h4><p>自定义filter，只需要定义 filter_queryset(self, request, queryset, view) 方法，并返回一个queryset即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodenameFilter</span><span class="params">(filters.BaseFilterBackend)</span>:</span></div><div class="line"></div><div class="line">    <span class="string">"""</span></div><div class="line">    根据 nodename 来筛选[nodename]</div><div class="line">    """</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, request, queryset, view)</span>:</span></div><div class="line">        nodename = request.QUERY_PARAMS.get(<span class="string">'nodename'</span>)</div><div class="line">        <span class="keyword">if</span> nodename:</div><div class="line">            <span class="keyword">return</span> queryset.filter(nodename=nodename)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> queryset</div></pre></td></tr></table></figure></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://django-filter.readthedocs.io/en/develop/index.html#" target="_blank" rel="external">https://django-filter.readthedocs.io/en/develop/index.html#</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求&lt;/p&gt;
&lt;h4 id=&quot;全局filter&quot;&gt;&lt;a href=&quot;#全局filter&quot; class=&quot;headerlink&quot; title=&quot;全局filter&quot;
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Filters" scheme="https://ttxsgoto.github.io/tags/Filters/"/>
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>Throtting</title>
    <link href="https://ttxsgoto.github.io/2017/08/10/Throtting/"/>
    <id>https://ttxsgoto.github.io/2017/08/10/Throtting/</id>
    <published>2017-08-10T11:56:37.000Z</published>
    <updated>2017-08-10T12:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django Rest framework 频率控制配置说明</p>
<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p>setting.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置节流方案</span></div><div class="line"><span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</div><div class="line">    <span class="comment"># 开启匿名用户接口请求频率限制</span></div><div class="line">    <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</div><div class="line">    <span class="comment"># 开启授权用户接口请求频率限制</span></div><div class="line">    <span class="string">'rest_framework.throttling.UserRateThrottle'</span>,</div><div class="line">    <span class="comment"># 开启自定义设置接口请求频率，在views中通过设置throttle_scope 来使用</span></div><div class="line">    <span class="string">'rest_framework.throttling.ScopedRateThrottle'</span>,</div><div class="line">    <span class="comment"># 自定义</span></div><div class="line">    <span class="string">'app.throttling.UserRecordThrottle'</span>,</div><div class="line">),</div><div class="line"><span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</div><div class="line">    <span class="comment"># 频率限制有second, minute, hour, day</span></div><div class="line">    <span class="comment"># 匿名用户请求频率</span></div><div class="line">    <span class="string">'anon'</span>: <span class="string">'1000/day'</span>,</div><div class="line">    <span class="comment"># 授权用户请求频率</span></div><div class="line">    <span class="string">'user'</span>: <span class="string">'20000/day'</span>,</div><div class="line">    <span class="comment"># 自定义请求频率,DEFAULT_THROTTLE_CLASSES中需要设置ScopedRateThrottle</span></div><div class="line">    <span class="string">'ttxs'</span>: <span class="string">'10/minute'</span>,</div><div class="line">    <span class="comment"># 自定义请求频率</span></div><div class="line">    <span class="string">'user_record'</span>: <span class="keyword">None</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>throttling.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle, AnonRateThrottle</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRecordThrottle</span><span class="params">(UserRateThrottle)</span>:</span></div><div class="line">    scope = <span class="string">'user_record'</span></div><div class="line">    rate = <span class="string">'5/minute'</span></div></pre></td></tr></table></figure></p>
<p>使用方式说明：</p>
<p>方式一: 在views.py中使用，设置为throttle_classes = ([UserRecordThrottle,])</p>
<p>方式二: 在setting.py中设置，</p>
<ul>
<li>在DEFAULT_THROTTLE_CLASSES添加’app.throttling.UserRecordThrottle’</li>
<li>DEFAULT_THROTTLE_RATES中添加user_record</li>
<li>在views.py中通过throttle_scope = ‘user_record’ 调用</li>
</ul>
<h4 id="类视图使用"><a href="#类视图使用" class="headerlink" title="类视图使用"></a>类视图使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></div><div class="line">    throttle_classes = ([UserRateThrottle,UserParserRecordThrottle])</div><div class="line">    throttle_scope = <span class="string">'ttxs'</span> <span class="comment"># 设置了ScopedRateThrottle对应的RATES</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Response(<span class="string">'ok'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 超过设置访问频率后，错误信息</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"request was throttled."</span>,</div><div class="line">  <span class="string">"code"</span>: <span class="number">10429</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><ol>
<li>匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准</li>
<li>频率限制是针对单个接口的频率，而不是所有接口的频率</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django Rest framework 频率控制配置说明&lt;/p&gt;
&lt;h4 id=&quot;全局设置&quot;&gt;&lt;a href=&quot;#全局设置&quot; class=&quot;headerlink&quot; title=&quot;全局设置&quot;&gt;&lt;/a&gt;全局设置&lt;/h4&gt;&lt;p&gt;setting.py&lt;br&gt;&lt;figure cl
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
      <category term="Throtting" scheme="https://ttxsgoto.github.io/tags/Throtting/"/>
    
  </entry>
  
  <entry>
    <title>iptables做端口映射</title>
    <link href="https://ttxsgoto.github.io/2017/07/21/iptables-forward/"/>
    <id>https://ttxsgoto.github.io/2017/07/21/iptables-forward/</id>
    <published>2017-07-21T12:49:34.000Z</published>
    <updated>2017-07-21T09:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以通过端口转发，通过访问B的端口来实际访问A的redis服务</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># B服务器 外网ip: 120.27.114.114   内网ip: 10.10.10.10 端口:6379  转发</span></div><div class="line"><span class="comment"># A服务器 内网ip: 10.10.10.12:6379</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1'</span> &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">sysctl -p</div><div class="line">iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line">iptables -A FORWARD <span class="_">-d</span> 10.10.10.12 -p tcp --dport 6379 -j ACCEPT</div><div class="line">iptables -t nat -A PREROUTING <span class="_">-d</span> 120.27.114.114 -p tcp -m tcp --dport 6379 -j DNAT --to-destination 10.10.10.12:6379</div><div class="line">iptables -t nat -A POSTROUTING <span class="_">-d</span> 10.10.10.12 -p tcp -m tcp --dport 6379 -j SNAT --to-source 10.10.10.10</div><div class="line"></div><div class="line">iptables-save &gt; /etc/iptables/rules.v4       <span class="comment"># 保存</span></div><div class="line">iptables-restore &lt; /etc/iptables/rules.v4	<span class="comment"># 导入</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="端口转发" scheme="https://ttxsgoto.github.io/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>django forms表单</title>
    <link href="https://ttxsgoto.github.io/2017/07/15/django-forms/"/>
    <id>https://ttxsgoto.github.io/2017/07/15/django-forms/</id>
    <published>2017-07-15T13:17:58.000Z</published>
    <updated>2017-07-15T13:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="form表单验证顺序步骤："><a href="#form表单验证顺序步骤：" class="headerlink" title="form表单验证顺序步骤："></a>form表单验证顺序步骤：</h3><ol>
<li>to_python()将值转换为正确的pthon数据类型，如果不能转换，抛出ValidationError</li>
<li>字段的validate()方法处理字段特殊定义的验证</li>
<li>字段的run_validators() 方法运行字段的所有Validator，并将所有的错误信息聚合成一个单一的ValidationError</li>
<li>Field子类的clean() 方法，负责以正确的顺序运行to_python、validate 和 run_validators 并传播它们的错误。如果任何时刻、任何方法引发ValidationError，验证将停止并引发这个错误；这个方法返回验证后的数据，这个数据在后面将插入到表单的 cleaned_data 字典中</li>
<li>表单子类中的clean_<fieldname>() 方法，这个方法完成于特定属性相关的验证，自定义字段验证，数据在clean_data字典中，该方法返回从cleaned_data 中获取的值</fieldname></li>
<li>表单子类的clean() 方法，这个方法可以实现需要同时访问表单多个字段的验证</li>
</ol>
<p>对于表单中的每个字段（按它们在表单定义中出现的顺序），先运行Field.clean() ，然后运行clean_<fieldname>()。每个字段的这两个方法都执行完之后，最后运行Form.clean() 方法，无论前面的方法是否抛出过异常。</fieldname></p>
<h3 id="实例：表单字段的默认验证"><a href="#实例：表单字段的默认验证" class="headerlink" title="实例：表单字段的默认验证"></a>实例：表单字段的默认验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> validate_email</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiEmailField</span><span class="params">(forms.Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"Normalize data to a list of strings."</span></div><div class="line"> </div><div class="line">        <span class="comment"># Return an empty list if no input was given.</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value:</div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        <span class="keyword">return</span> value.split(<span class="string">','</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"Check if value consists only of valid emails."</span></div><div class="line"> </div><div class="line">        <span class="comment"># Use the parent's handling of required fields, etc.</span></div><div class="line">        super(MultiEmailField, self).validate(value)</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> value:</div><div class="line">            validate_email(email)</div><div class="line"> </div><div class="line"><span class="comment">########### 创建form类 #########</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</div><div class="line">    message = forms.CharField()</div><div class="line">    sender = forms.EmailField()</div><div class="line">    recipients = MultiEmailField()</div><div class="line">    cc_myself = forms.BooleanField(required=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 当调用表单的is_valid()方法时，MultiEmailField.clean()方法将作为验证过程的一部分运行，即将调用to_python()和validate()方法</span></div></pre></td></tr></table></figure>
<h3 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h3><p>验证器是一个可调用的对象，它接受一个值，并在不符合一些规则时抛出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_begin</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value.startswith(<span class="string">u'ABC'</span>):</div><div class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'名称不是以ABC开头'</span>, code=<span class="string">'error_begin'</span>)</div><div class="line"> </div><div class="line"><span class="comment">### 调用</span></div><div class="line">other_field = forms.CharField(max_length=<span class="number">100</span>, validators=[validate_begin])</div></pre></td></tr></table></figure></p>
<h3 id="forms常用方法"><a href="#forms常用方法" class="headerlink" title="forms常用方法"></a>forms常用方法</h3><ul>
<li>f.is_bound 属性说明表单是否具有绑定的数据</li>
<li>f.is_valid() 验证提交的表单字段是否正确（is_valid() 返回True）</li>
<li>form.cleaned_data 字典存为验证后的表单数据</li>
<li>f.errors 获取错误信息的一个字典</li>
<li>f.errors.as_data() 返回字典，映射到原始的ValidationError实例</li>
<li>f.errors.as_json() 返回json序列化后的错误</li>
<li>f.has_changed() 检查表单的数据是否从初始数据发生改变</li>
<li>f.fields 从表单实例的fields属性中访问字段</li>
</ul>
<h3 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h3><p>根据表单绑定的数据创建并保存数据库对象</p>
<ul>
<li>instance 关键字接收一个已经存在的实例对象，如果有，则save()将更新这个实例，没有save()将创建一个新的实例</li>
<li>commit save() 关键字参数，其值为True 或False。如果save() 时commit=False，那么它将返回一个还没有保存到数据库的对象,操作后调用save方法保存</li>
<li>commit=False 时因不能立即生成实例，多对多数据时需要对froms实例调用save_m2m()方法对多对多数据进行保存，如：channel.save() ,_channel = ChannelForm(req.data).save_m2m()</li>
</ul>
<h3 id="ModelForm中Meta属性"><a href="#ModelForm中Meta属性" class="headerlink" title="ModelForm中Meta属性"></a>ModelForm中Meta属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelCustomForm</span><span class="params">(ModelForm)</span>:</span></div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = ChannelCustom</div><div class="line">        fields = [<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>]   <span class="comment"># 需要编辑的字段</span></div><div class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 所有字段</span></div><div class="line">        exclude = [<span class="string">'title'</span>] <span class="comment"># 排除某些字段</span></div><div class="line">        labels= <span class="keyword">None</span>        <span class="comment"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class="line">        help_texts = <span class="keyword">None</span>     <span class="comment"># 帮助提示信息</span></div><div class="line">        widgets = <span class="keyword">None</span>        <span class="comment"># 自定义插件</span></div><div class="line">        error_messages = <span class="keyword">None</span> <span class="comment"># 自定义错误信息</span></div><div class="line">        field_classes = <span class="keyword">None</span>  <span class="comment"># 自定义字段类（也可以自定义字段)</span></div><div class="line">        Localized_fields = (‘birth_date’,) <span class="comment"># 本地化，如：根据不同时区显示数据</span></div></pre></td></tr></table></figure>
<h3 id="实例-说明功能"><a href="#实例-说明功能" class="headerlink" title="实例(说明功能)"></a>实例(说明功能)</h3><ul>
<li><p>models.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelCustom</span><span class="params">(BaseModel)</span>:</span></div><div class="line"> </div><div class="line">    organ = models.ForeignKey(<span class="string">'organs.Organ'</span>, null=<span class="keyword">True</span>)</div><div class="line">    name = models.CharField(<span class="string">u'名称'</span>, max_length=<span class="number">40</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    logo = models.CharField(<span class="string">u'渠道logo'</span>, max_length=<span class="number">80</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    is_valid = models.BooleanField(<span class="string">u'有效'</span>, default=<span class="keyword">True</span>)</div><div class="line">    note = models.CharField(<span class="string">u'备注'</span>, max_length=<span class="number">512</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>forms.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> ModelForm, Textarea</div><div class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> fields <span class="keyword">as</span> MFfields</div><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</div><div class="line"><span class="comment"># from django.utils.translation import ugettext as _</span></div><div class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_begin</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value.startswith(<span class="string">u'ABC'</span>):</div><div class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'名称不是以ABC开头'</span>, code=<span class="string">'error_begin'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelCustomForm</span><span class="params">(ModelForm)</span>:</span></div><div class="line">    name = MFfields.CharField(max_length=<span class="number">100</span>)   <span class="comment"># 重新定义字段属性,可以为已有的字段,也可以是没有的字段</span></div><div class="line">    other_field = forms.CharField(max_length=<span class="number">100</span>, validators=[validate_begin])</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span>                        <span class="comment"># 通过继承来解决对应字段的属性</span></div><div class="line">        super(ChannelCustomForm, self).__init__(*args, **kwargs)</div><div class="line">        self.fields[<span class="string">'name'</span>].validators.append(validate_begin)   <span class="comment"># 添加验证方法</span></div><div class="line">        self.fields[<span class="string">'name'</span>].required = <span class="keyword">True</span>                     <span class="comment"># 添加对应字段的属性</span></div><div class="line">        self.fields[<span class="string">'note'</span>].required = <span class="keyword">True</span></div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = ChannelCustom</div><div class="line">        fields = [<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>, <span class="string">'other_field'</span>]</div><div class="line">        <span class="comment"># exclude = ['logo']</span></div><div class="line">        labels = &#123;          <span class="comment"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class="line">            <span class="string">"name"</span>: <span class="string">"渠道名称"</span>,</div><div class="line">            <span class="string">"logo"</span>: <span class="string">"渠道logo"</span>,</div><div class="line">            <span class="string">"is_valid"</span>: <span class="string">"是否有效"</span>,</div><div class="line">            <span class="string">"note"</span>: <span class="string">"备注"</span></div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        help_texts = &#123;      <span class="comment"># 帮助提示信息</span></div><div class="line">            <span class="string">"name"</span>: <span class="string">"请输入渠道名"</span>,</div><div class="line">            <span class="string">"note"</span>: <span class="string">"请输入备注"</span>,</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        error_messages = &#123;  <span class="comment"># 自定义错误描述</span></div><div class="line">            <span class="comment"># '__all__': &#123;</span></div><div class="line">            <span class="comment">#</span></div><div class="line">            <span class="comment"># &#125;,</span></div><div class="line">            <span class="string">'organ'</span>: &#123;</div><div class="line">                <span class="string">'max_length'</span>: (<span class="string">"企业字段不能为空."</span>),</div><div class="line">            &#125;,</div><div class="line">            <span class="string">'note'</span>: &#123;</div><div class="line">                <span class="string">'required'</span>: <span class="string">"note字段不能为空."</span>,  <span class="comment"># 这里的key是特定的字符</span></div><div class="line">                <span class="string">'invalid'</span>: <span class="string">'http格式错误'</span>,</div><div class="line">            &#125;,</div><div class="line">        &#125;</div><div class="line">        widgets = &#123;     <span class="comment"># 自定义 widget，添加对应字段的属性</span></div><div class="line">            <span class="string">'name'</span>: Textarea(attrs=&#123;<span class="string">'cols'</span>: <span class="number">80</span>, <span class="string">'rows'</span>: <span class="number">20</span>&#125;),</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        field_classes = &#123;       <span class="comment"># 字段类型设置，可以强制修改成其他类型</span></div><div class="line">            <span class="string">'note'</span>: MFfields.URLField</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        Localized_fields = (<span class="string">'is_valid'</span>, )    <span class="comment">#本地化，如：根据不同时区显示数据</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        定义字段检查方法</div><div class="line">        clean()和clean_&lt;field&gt;&amp;()的最后必须返回验证完毕或修改后的值</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        name = self.cleaned_data[<span class="string">'name'</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</div><div class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">'名称不能为空'</span>)</div><div class="line">        <span class="keyword">return</span> name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_logo</span><span class="params">(self)</span>:</span></div><div class="line">        logo = self.cleaned_data[<span class="string">'logo'</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> logo:</div><div class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">'logo不能为空'</span>)</div><div class="line">        <span class="keyword">return</span> logo</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        - 如果你需要覆盖clean() 方法并维持这个验证行为，你必须调用父类的clean()方法</div><div class="line">        - 在表单数据提交的时候,所有的数据都会经过clean()函数</div><div class="line">        - 用于验证字段间有关联的数据验证</div><div class="line">        """</div><div class="line">        cleaned_data = super(ChannelCustomForm, self).clean()</div><div class="line"> </div><div class="line">        <span class="keyword">print</span> cleaned_data</div><div class="line">        logo = cleaned_data.get(<span class="string">'logo'</span>, <span class="string">''</span>)</div><div class="line">        name = cleaned_data.get(<span class="string">'name'</span>, <span class="string">''</span>)</div><div class="line">        <span class="keyword">if</span> logo != name:</div><div class="line">            msg = <span class="string">u'两者不一致相等 %(name)s &lt;--&gt; %(logo)s'</span></div><div class="line">            error_instance = ValidationError(_(msg), code=<span class="string">'invalid'</span>, params=&#123;<span class="string">'name'</span>: name, <span class="string">'logo'</span>: logo&#125;)</div><div class="line">            self.add_error(<span class="string">'logo'</span>,error=error_instance)     <span class="comment"># 添加错误信息</span></div><div class="line">            self.non_field_errors()</div><div class="line">            <span class="comment"># self.errors['logo'] = self.error_class([msg])</span></div><div class="line">            <span class="comment"># raise forms.ValidationError(self.errors['logo'])</span></div><div class="line">            <span class="comment"># raise forms.ValidationError('两者不一致相等')</span></div><div class="line">        <span class="keyword">return</span> cleaned_data</div></pre></td></tr></table></figure>
</li>
<li><p>views.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> ChannelCustomForm</div><div class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> modelformset_factory, modelform_factory</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, req)</span>:</span></div><div class="line">    </div><div class="line">    organ = req.user.get_profile().organ</div><div class="line">    data = req.data</div><div class="line">    <span class="comment"># _channel = ChannelCustom.objects.get(pk=8)</span></div><div class="line">    <span class="comment"># form = ChannelCustomForm(data)#, instance=_channel)</span></div><div class="line">    <span class="comment"># modelform_factory() 来代替使用类定义来从模型直接创建表单,用于不在很多自定义的情况下</span></div><div class="line">    ChannelCustomFormfactory = modelform_factory(ChannelCustom,</div><div class="line">                                                  fields=(<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>)</div><div class="line">                                                )</div><div class="line"> </div><div class="line">    <span class="comment"># modelformset_factory() 模型表单集</span></div><div class="line">    ChannelCustomSet = modelformset_factory(ChannelCustom,</div><div class="line">                                            fields=(<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>)</div><div class="line">                                            )</div><div class="line"> </div><div class="line">    form = ChannelCustomForm(data)<span class="comment">#, instance=_channel)</span></div><div class="line">    <span class="comment"># form = ChannelCustomFormfactory(data=data)</span></div><div class="line">    <span class="comment"># form = ChannelCustomSet(data=data)</span></div><div class="line">    <span class="keyword">if</span> form.is_valid():</div><div class="line">        <span class="keyword">print</span> form.cleaned_data</div><div class="line">        <span class="keyword">print</span> form.errors</div><div class="line">        channel = form.save()</div><div class="line">        channel.organ= organ</div><div class="line">        channel.save()</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> resp.serialize_response(channel, results_name=<span class="string">'channel'</span>)</div><div class="line">    error =form.errors.as_json()</div><div class="line">    error_msg = json.loads(error)</div><div class="line">    <span class="keyword">return</span> resp.failed(error_msg)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html" target="_blank" rel="external">http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;form表单验证顺序步骤：&quot;&gt;&lt;a href=&quot;#form表单验证顺序步骤：&quot; class=&quot;headerlink&quot; title=&quot;form表单验证顺序步骤：&quot;&gt;&lt;/a&gt;form表单验证顺序步骤：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;to_python()将值转换为正确的p
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="forms" scheme="https://ttxsgoto.github.io/tags/forms/"/>
    
  </entry>
  
  <entry>
    <title>collections模块</title>
    <link href="https://ttxsgoto.github.io/2017/07/02/collections/"/>
    <id>https://ttxsgoto.github.io/2017/07/02/collections/</id>
    <published>2017-07-02T12:53:00.000Z</published>
    <updated>2017-07-02T13:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：</p>
<h4 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h4><p>功能:将名称映射到序列的元素上 namedtuple是不可变的;用于将元祖的位置访问转换为通过名称访问,使代码易读；<br>常用于将csv/sqlite3中得到的大型元祖列表,通过元素来访问数据,容易出错,这时将返回的元祖转换为命名元祖就很有必要<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"> </div><div class="line">EmployeeRecord = namedtuple(<span class="string">'EmployeeRecord'</span>, <span class="string">'name, age, title, department, paygrade'</span>)  <span class="comment"># typename: 元组名称 field_names: 元祖字段名称</span></div><div class="line"><span class="keyword">for</span> emp <span class="keyword">in</span> map(EmployeeRecord._make, csv.reader(open(<span class="string">"employees.csv"</span>, <span class="string">"rb"</span>))):</div><div class="line">    <span class="keyword">print</span> emp.name, emp.title</div><div class="line"> </div><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line">conn = sqlite3.connect(<span class="string">'/companydata'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(<span class="string">'SELECT name, age, title, department, paygrade FROM employees'</span>)</div><div class="line"><span class="keyword">for</span> emp <span class="keyword">in</span> map(EmployeeRecord._make, cursor.fetchall()):</div><div class="line">    <span class="keyword">print</span> emp.name, emp.title</div><div class="line"> </div><div class="line">dict_website=[(<span class="string">'a'</span>,<span class="string">'www.a.com'</span>,<span class="string">'aaa'</span>),(<span class="string">'b'</span>,<span class="string">'www.b.com'</span>,<span class="string">'bbb'</span>),(<span class="string">'c'</span>,<span class="string">'www.c.com'</span>,<span class="string">'ccc'</span>)]</div><div class="line">name_websit = namedtuple(<span class="string">'sites'</span>,[<span class="string">'name'</span>,<span class="string">'www'</span>,<span class="string">'finder'</span>])</div><div class="line"><span class="keyword">for</span> website <span class="keyword">in</span> dict_website:</div><div class="line">    <span class="keyword">print</span>  name_websit._make(website)</div><div class="line"> </div><div class="line">Subscriber = namedtuple(<span class="string">'Sub'</span>, <span class="string">'addr, joined, name'</span>)</div><div class="line">list_demo = (<span class="string">'cd'</span>, <span class="string">'2017-07-01'</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line"><span class="keyword">print</span> Subscriber._make(list_demo)</div><div class="line">ttxsgoto = Subscriber(<span class="string">'ttxs'</span>, <span class="string">'2017-07-01'</span>, <span class="string">'goto'</span>)</div><div class="line"><span class="keyword">print</span> ttxsgoto</div><div class="line"><span class="keyword">print</span> ttxsgoto.addr, ttxsgoto.joined, len(ttxsgoto)</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">"""</span></div><div class="line">sites(name='a', www='www.a.com', finder='aaa')</div><div class="line">sites(name='b', www='www.b.com', finder='bbb')</div><div class="line">sites(name='c', www='www.c.com', finder='ccc')</div><div class="line">Sub(addr='cd', joined='2017-07-01', name='ttxsgoto')</div><div class="line">Sub(addr='ttxs', joined='2017-07-01', name='goto')</div><div class="line">ttxs 2017-07-01 3</div><div class="line">"""</div></pre></td></tr></table></figure></p>
<h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><p>功能:统计序列中元素出现的次数<br>most_common(n): 统计出现次数,从高到低,依次排列个数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"> </div><div class="line">default_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>]</div><div class="line">c = Counter(default_list)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> c, c.most_common(<span class="number">2</span>)</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="comment"># Counter(&#123;1: 2, 'b': 2, 'a': 1, 3: 1&#125;) [(1, 2), ('b', 2)]</span></div></pre></td></tr></table></figure></p>
<h4 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h4><p>功能:指定字典中的顺序,根据添加顺序排序,大小为普通dict的2倍多<br>因为添加了额外的链表,如果涉及大量数据,需要考虑本身占用的内存<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line"> </div><div class="line">items = (</div><div class="line">    (<span class="string">'a'</span>,<span class="number">1</span>),</div><div class="line">    (<span class="string">'b'</span>,<span class="number">2</span>),</div><div class="line">    (<span class="string">'c'</span>,<span class="number">3</span>),</div><div class="line">)</div><div class="line"> </div><div class="line">default_dict = dict(items)</div><div class="line">order_dict = OrderedDict(items)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> default_dict, order_dict</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="comment"># &#123;'a': 1, 'c': 3, 'b': 2&#125; OrderedDict([('a', 1), ('b', 2), ('c', 3)])</span></div></pre></td></tr></table></figure></p>
<h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h4><p>功能:带有默认值的字典, 一键多值的字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"> </div><div class="line">members = (</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'John'</span>],</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'Jack'</span>],</div><div class="line">    [<span class="string">'female'</span>, <span class="string">'Lily'</span>],</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'Pony'</span>],</div><div class="line">    [<span class="string">'female'</span>, <span class="string">'Lucy'</span>],</div><div class="line">)</div><div class="line"> </div><div class="line">result_list = defaultdict(list)  <span class="comment"># 默认列表</span></div><div class="line">result_dict = defaultdict(dict)  <span class="comment"># 默认字典</span></div><div class="line">result_set = defaultdict(set)    <span class="comment"># 默认集合</span></div><div class="line"> </div><div class="line"><span class="keyword">for</span> sex, name <span class="keyword">in</span> members:</div><div class="line">    result_list[sex].append(name)  <span class="comment"># 列表</span></div><div class="line">    result_dict[sex] = name        <span class="comment"># 字典</span></div><div class="line">    result_set[sex].add(name)      <span class="comment"># 集合</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> result_list, result_dict, result_set</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">"""</span></div><div class="line">defaultdict(&lt;type 'list'&gt;, &#123;'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']&#125;)</div><div class="line">defaultdict(&lt;type 'dict'&gt;, &#123;'male': 'Pony', 'female': 'Lucy'&#125;)</div><div class="line">defaultdict(&lt;type 'set'&gt;, &#123;'male': set(['John', 'Pony', 'Jack']), 'female': set(['Lily', 'Lucy'])&#125;)</div><div class="line">"""</div></pre></td></tr></table></figure></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://docs.python.org/2/library/collections.html#module-collections" target="_blank" rel="external">https://docs.python.org/2/library/collections.html#module-collections</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：&lt;/p&gt;
&lt;h4 id=&quot;namedtuple&quot;&gt;&lt;a href=&quot;#namedtuple&quot; clas
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="collections" scheme="https://ttxsgoto.github.io/tags/collections/"/>
    
  </entry>
  
  <entry>
    <title>setuptools模块打包</title>
    <link href="https://ttxsgoto.github.io/2017/06/14/setup/"/>
    <id>https://ttxsgoto.github.io/2017/06/14/setup/</id>
    <published>2017-06-14T13:51:32.000Z</published>
    <updated>2017-06-15T05:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作</p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">├── README		# readme信息</div><div class="line">├── package_demo	# 包名</div><div class="line">│   ├── __init__.py</div><div class="line">│   └── now_time.py	# 功能模块</div><div class="line">└── setup.py		# setup文件</div></pre></td></tr></table></figure></p>
<p>now_time.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> datetime.datetime.now()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    now()</div></pre></td></tr></table></figure></p>
<p>setup.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</div><div class="line"> </div><div class="line">here = path.abspath(path.dirname(__file__))</div><div class="line"> </div><div class="line"><span class="keyword">with</span> open(path.join(here, <span class="string">'README'</span>)) <span class="keyword">as</span> f:</div><div class="line">    long_description = f.read()</div><div class="line"> </div><div class="line">install_requires=[</div><div class="line">    <span class="string">'gitchangelog'</span>,</div><div class="line">]</div><div class="line"> </div><div class="line">setup(</div><div class="line">    name=<span class="string">'Package_demo'</span>,</div><div class="line">    version=<span class="string">'1.0.0'</span>,</div><div class="line">    description=<span class="string">'setup package demo'</span>,</div><div class="line">    long_description=long_description,</div><div class="line">    url=<span class="string">'https://github.com/'</span>,</div><div class="line">    author=<span class="string">'ttxsgoto'</span>,</div><div class="line">    author_email=<span class="string">'359450323@qq.com'</span>,</div><div class="line">    license=<span class="string">'MIT'</span>,</div><div class="line">    classifiers=[</div><div class="line">        <span class="string">'Development Status :: 4 - Beta'</span>,</div><div class="line">        <span class="string">'Intended Audience :: Developers'</span>,</div><div class="line">        <span class="string">'Topic :: Software Development :: Build Tools'</span>,</div><div class="line">        <span class="string">'License :: OSI Approved :: MIT License'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 2.7'</span>,</div><div class="line">    ],</div><div class="line">    keywords=<span class="string">'Package_demo'</span>,</div><div class="line">    <span class="comment"># packages=find_packages(</span></div><div class="line">    <span class="comment">#     where='.',</span></div><div class="line">    <span class="comment">#     exclude=['contrib', 'docs', 'tests'], # 排除某些包</span></div><div class="line">    <span class="comment"># ),</span></div><div class="line">    packages=[<span class="string">'package_demo'</span>],</div><div class="line">    install_requires=install_requires,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h4 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h4><ul>
<li>name 项目名称</li>
<li>version 项目当前的版本，1.0.0表示1.0.0版，目前还处于开发阶段</li>
<li>description 包的简单描述</li>
<li>long_description=long_description, 较长的描述</li>
<li>url 为项目访问地址</li>
<li>author 为项目开发人员</li>
<li>author_email 为项目开发人员邮件</li>
<li>license 为本项目遵循的授权许可</li>
<li>classifiers 有很多设置，具体内容可以参考官方文档, <a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers" target="_blank" rel="external">https://pypi.python.org/pypi?%3Aaction=list_classifiers</a></li>
<li>keywords 是本项目的关键词，理解为标签</li>
<li>packages 指定包,如果很多可以使用find_packages &amp; exclude</li>
<li>install_requires 依赖包安装</li>
<li>extras_require 额外的依赖包</li>
</ul>
<h4 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">python setup.py check  <span class="comment"># 检查</span></div><div class="line">python setup.py sdist  <span class="comment"># 打包为 .tar.gz</span></div><div class="line">python setup.py bdist_egg  <span class="comment">#  创建 Eggs包</span></div><div class="line">python setup.py bdist_wheel  <span class="comment"># 创建 Wheel包</span></div><div class="line"><span class="comment"># 生成的文件均位于 dist 目录下</span></div></pre></td></tr></table></figure>
<p>打包后的目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">python setup.py sdist</div><div class="line"> </div><div class="line">├── Package_demo.egg-info</div><div class="line">│   ├── PKG-INFO</div><div class="line">│   ├── SOURCES.txt</div><div class="line">│   ├── dependency_links.txt</div><div class="line">│   ├── requires.txt</div><div class="line">│   └── top_level.txt</div><div class="line">├── README</div><div class="line">├── dist</div><div class="line">│   └── Package_demo-1.0.0.tar.gz</div><div class="line">├── package_demo</div><div class="line">│   ├── __init__.py</div><div class="line">│   └── now_time.py</div><div class="line">└── setup.py</div></pre></td></tr></table></figure></p>
<h4 id="包验证"><a href="#包验证" class="headerlink" title="包验证"></a>包验证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pip install Package_demo<span class="number">-1.0</span><span class="number">.0</span>.tar.gz</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> package_demo <span class="keyword">import</span> now_time</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now_time.now()</div><div class="line">Out[<span class="number">2</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">10</span>, <span class="number">52</span>, <span class="number">278942</span>)</div></pre></td></tr></table></figure>
<h3 id="分发到PyPI"><a href="#分发到PyPI" class="headerlink" title="分发到PyPI"></a>分发到PyPI</h3><p>首先到 PyPI 注册一个帐号, 在邮箱内确认<br>之后在目录新建一个 .pypirc 文件, 写入下面内容(注意填入自己的帐号密码):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[pypirc]</div><div class="line">servers = pypi</div><div class="line">[server-login]</div><div class="line">username:username</div><div class="line">password:password</div></pre></td></tr></table></figure></p>
<p>上传<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python setup.py register  <span class="comment"># 将包注册到 PyPI</span></div><div class="line">python setup.py register sdist upload  <span class="comment"># 上传</span></div></pre></td></tr></table></figure></p>
<p>登录验证查看是否上传成功</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://packaging.python.org/tutorials/distributing-packages/#name" target="_blank" rel="external">https://packaging.python.org/tutorials/distributing-packages/#name</a></li>
<li><a href="https://github.com/pypa/sampleproject/blob/master/setup.py" target="_blank" rel="external">https://github.com/pypa/sampleproject/blob/master/setup.py</a></li>
<li><a href="https://github.com/celery/celery/blob/master/setup.py" target="_blank" rel="external">https://github.com/celery/celery/blob/master/setup.py</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作&lt;/p&gt;
&lt;h3 
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="setuptools" scheme="https://ttxsgoto.github.io/tags/setuptools/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝/浅拷贝和赋值</title>
    <link href="https://ttxsgoto.github.io/2017/05/24/copy-deepcopy/"/>
    <id>https://ttxsgoto.github.io/2017/05/24/copy-deepcopy/</id>
    <published>2017-05-24T13:38:11.000Z</published>
    <updated>2017-05-29T06:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h4><ul>
<li>赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变类型的值时，对应内部的引用发生变化；其中可变类型(列表，字典)，不可变类型(数字，字符串，元祖)</li>
<li>浅拷贝：只拷贝父对象，不会拷贝对象的内部的子对象,只是原对象元素的引用，下列操作相当于浅拷贝<pre><code>- 使用切片操作[:]
- 使用list/dir/set
- 使用copy.copy()
</code></pre></li>
<li>深拷贝：拷贝对象及其子对象,创建一个新的对象，不使用原来的对应对象引用</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>], (<span class="number">7</span>,<span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: l2 = l1</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: id(l1), id(l2)</div><div class="line">Out[<span class="number">3</span>]: (<span class="number">4360956240</span>, <span class="number">4360956240</span>)	<span class="comment"># 指向相同的内存地址</span></div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: l1[<span class="number">3</span>].append(<span class="number">6</span>)</div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: l1</div><div class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: l2</div><div class="line">Out[<span class="number">6</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">7</span>]: id(l1), id(l2)</div><div class="line">Out[<span class="number">7</span>]: (<span class="number">4360956240</span>, <span class="number">4360956240</span>)</div><div class="line"> </div><div class="line">In [<span class="number">8</span>]: l2[<span class="number">0</span>] = <span class="number">0</span></div><div class="line"> </div><div class="line">In [<span class="number">9</span>]: l2</div><div class="line">Out[<span class="number">9</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">10</span>]: l1</div><div class="line">Out[<span class="number">10</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">11</span>]: l1 <span class="keyword">is</span> l2</div><div class="line">Out[<span class="number">11</span>]: <span class="keyword">True</span></div><div class="line"> </div><div class="line">In [<span class="number">12</span>]: id(l1[<span class="number">3</span>])</div><div class="line">Out[<span class="number">12</span>]: <span class="number">4360955808</span></div><div class="line"> </div><div class="line">In [<span class="number">13</span>]: id(l2[<span class="number">3</span>])</div><div class="line">Out[<span class="number">13</span>]: <span class="number">4360955808</span></div></pre></td></tr></table></figure>
<h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"> </div><div class="line">l1 = [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</div><div class="line"> </div><div class="line"><span class="comment"># l2 = list(l1)	# 相当于浅拷贝操作,l1 l2代表不同的列表，但两者引用同一个列表和元祖，如下图一</span></div><div class="line">l2 = copy.copy(l1)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">'=================《流畅的python》第217页 浅拷贝================='</span></div><div class="line"><span class="keyword">print</span> <span class="string">'id-----'</span>,id(l1[<span class="number">1</span>]), id(l2[<span class="number">1</span>])	<span class="comment"># 4318639744 4318639744</span></div><div class="line"><span class="keyword">print</span> <span class="string">'id-----'</span>,id(l1), id(l2)	<span class="comment"># 4318640104 4318555600</span></div><div class="line"> </div><div class="line">l1.append(<span class="number">100</span>) <span class="comment"># [3, [66, 55, 44], (7, 8, 9), 100]</span></div><div class="line">l1[<span class="number">1</span>].remove(<span class="number">55</span>) <span class="comment">#  [3, [66, 44], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l1----&gt;'</span>, l1 <span class="comment"># [3, [66, 44], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l2----&gt;'</span>, l2 <span class="comment"># [3, [66, 44], (7, 8, 9)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'============================================='</span></div><div class="line">l2[<span class="number">1</span>] += [<span class="number">33</span>, <span class="number">22</span>] <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9)]</span></div><div class="line">l2[<span class="number">2</span>] += (<span class="number">10</span>, <span class="number">11</span>) <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l1====&gt;'</span>, l1 <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l2====&gt;'</span>, l2 <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'================= 如下图二===================='</span></div></pre></td></tr></table></figure>
<p><img src="https://ttxsgoto.github.io/img/copy/copy01.png" alt="图一"><br><img src="https://ttxsgoto.github.io/img/copy/copy02.png" alt="图二"></p>
<h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> passengers <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.passengers = []</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.passengers = list(passengers)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.passengers.append(name)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.passengers.remove(name)</div><div class="line"> </div><div class="line">bus1 = Bus([<span class="string">'AAA'</span>, <span class="string">'BBB'</span>, <span class="string">'CCC'</span>])</div><div class="line">bus2 = copy.copy(bus1)</div><div class="line">bus3 = copy.deepcopy(bus1)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> id(bus1), id(bus2), id(bus3)</div><div class="line"><span class="comment"># 4318715792 4318757008 4318757072</span></div><div class="line"> </div><div class="line">bus1.drop(<span class="string">'AAA'</span>)</div><div class="line"><span class="keyword">print</span> bus2.passengers</div><div class="line"><span class="comment"># [u'BBB', u'CCC']</span></div><div class="line"><span class="keyword">print</span> id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</div><div class="line"><span class="comment"># 4560506320 4560506320 4560590464 bus2是bus1的浅复制的副本,所以id相同</span></div><div class="line"><span class="keyword">print</span> bus3.passengers</div><div class="line"><span class="comment"># [u'AAA', u'BBB', u'CCC']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念说明&quot;&gt;&lt;a href=&quot;#概念说明&quot; class=&quot;headerlink&quot; title=&quot;概念说明&quot;&gt;&lt;/a&gt;概念说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="copy" scheme="https://ttxsgoto.github.io/tags/copy/"/>
    
  </entry>
  
  <entry>
    <title>描述符</title>
    <link href="https://ttxsgoto.github.io/2017/05/16/descriptor/"/>
    <id>https://ttxsgoto.github.io/2017/05/16/descriptor/</id>
    <published>2017-05-16T12:24:28.000Z</published>
    <updated>2017-05-17T04:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述符说明"><a href="#描述符说明" class="headerlink" title="描述符说明"></a>描述符说明</h3><pre><code>- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符
- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写
- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中
  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找
  顺序为a.__dict__[&apos;x&apos;],然后是type(a).__dict__[&apos;x&apos;].如果还是没找
  到就往上级(父类)中查找最后查找是否有__getattr__
- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用
  描述符的__get__()方法，对于设置和删除也是同样的原理
- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;
- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;
</code></pre><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><pre><code>- 描述符作为属性访问时,是被自动调用
- 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__[&apos;x&apos;].__get__(None, Class)
- 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__[&apos;x&apos;].__get__(object, type(object))
</code></pre><h3 id="描述符用途-使用场景"><a href="#描述符用途-使用场景" class="headerlink" title="描述符用途,使用场景"></a>描述符用途,使用场景</h3><pre><code>- 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符
- 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符
- 描述符会&apos;劫持&apos;那些本是self.__dict__的操作
- 把一个类的操作托付给另外一个类
- 静态方法,类方法,parperty都是构建描述符的类
</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 属性进行相应的处理而不会对整体有影响</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.age = age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__-----'</span>, self, instance, owner</div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.age]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__-----'</span>, self, instance, value</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> type(eval(str(value))) == float:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Age must int and not negative '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.age] = value # 修改dict中对应的属性值</span></div><div class="line">        self.age = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.age</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SexType</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.sex = sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.sex]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'M'</span>, <span class="string">'W'</span>]:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The value must be M/W '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.sex] = value # 修改dict中对应的属性值</span></div><div class="line">        self.sex = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.sex</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    age = Integer(<span class="string">'age'</span>)</div><div class="line">    sex = SexType(<span class="string">'sex'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.sex = sex</div><div class="line">        self.age = age</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Person info --name:&#123;&#125;,--sex:&#123;&#125;,--age:&#123;&#125;'</span>.format(self.name, self.sex, self.age)</div><div class="line"> </div><div class="line">A = Person(name=<span class="string">'ttxsgoto'</span>, sex=<span class="string">'W'</span>, age= <span class="number">15</span> )</div><div class="line"> </div><div class="line"><span class="keyword">print</span> A.__dict__</div><div class="line"><span class="keyword">print</span> Person.__dict__</div><div class="line"><span class="keyword">print</span> A.info</div><div class="line"> </div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">'''</span></div><div class="line">&#123;'name': 'ttxsgoto'&#125;</div><div class="line">&#123;'info': &lt;property object at 0x1028ad418&gt;, '__module__': '__main__', 'age': &lt;__main__.Integer object at 0x1028b30d0&gt;, 'sex': &lt;__main__.SexType object at 0x1028b3110&gt;, '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x1028b2578&gt;&#125;</div><div class="line">__get__----- &lt;__main__.Integer object at 0x1028b30d0&gt; &lt;__main__.Person object at 0x1028b3150&gt; &lt;class '__main__.Person'&gt;</div><div class="line">Person info --name:ttxsgoto,--sex:W,--age:15</div><div class="line">'''</div></pre></td></tr></table></figure>
<h4 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数据描述符和非数据描述符的区别</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Access</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, var=None, name=<span class="string">'var'</span>)</span>:</span></div><div class="line">        self.var = var</div><div class="line">        self.name = name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__----'</span>, self, instance, owner, self.name</div><div class="line">        <span class="keyword">return</span> self.var</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span>  <span class="comment"># 含有__set__方法为数据描述符</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__----'</span>, self, instance, value</div><div class="line">        self.var = value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    x = Access(<span class="number">10</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.x = x</div><div class="line"> </div><div class="line">t = MyClass(<span class="number">100</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'----\n'</span>, t.x</div><div class="line"><span class="keyword">print</span> <span class="string">'====\n'</span>, t.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'xxxx\n'</span>, MyClass.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'yyyy\n'</span>, MyClass.x</div><div class="line"> </div><div class="line"><span class="comment">########### 数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">__set__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; 100</div><div class="line">----</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x10687c2d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10687b320&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="comment">########### 非数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">----</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;'x': 100&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x1012502d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10124f050&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x1012502d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">10</div><div class="line">'''</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;描述符说明&quot;&gt;&lt;a href=&quot;#描述符说明&quot; class=&quot;headerlink&quot; title=&quot;描述符说明&quot;&gt;&lt;/a&gt;描述符说明&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="descriptor" scheme="https://ttxsgoto.github.io/tags/descriptor/"/>
    
  </entry>
  
  <entry>
    <title>ModelSerializer常用方法</title>
    <link href="https://ttxsgoto.github.io/2017/05/14/rest-framwork-serializers/"/>
    <id>https://ttxsgoto.github.io/2017/05/14/rest-framwork-serializers/</id>
    <published>2017-05-14T12:13:22.000Z</published>
    <updated>2017-05-14T12:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ModelSerializer属性方法"><a href="#ModelSerializer属性方法" class="headerlink" title="ModelSerializer属性方法"></a>ModelSerializer属性方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    other_name = serializers.CharField(source=<span class="string">'name'</span>, read_only=<span class="keyword">True</span>)   <span class="comment"># 新添加fields中字段,该serializer对应的model中字段</span></div><div class="line">    other_field = serializers.SerializerMethodField()   <span class="comment"># 添加不是该model中的字段</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Account <span class="comment"># 指定model</span></div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'account_name'</span>, <span class="string">'users'</span>, <span class="string">'created'</span>)  <span class="comment"># 包括的字段</span></div><div class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 显示所有字段</span></div><div class="line">        exclude = (<span class="string">'users'</span>,)    <span class="comment"># 排除不显示的字段,和fields不能同时使用</span></div><div class="line">        depth = <span class="number">1</span>   <span class="comment"># 展示ForeignKey对应的数据，设置展示深度</span></div><div class="line">        read_only_fields = (<span class="string">'account_name'</span>,)    <span class="comment"># 设置只读字段</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_other_field</span><span class="params">(self, obj)</span>:</span><span class="comment"># (dept为外键字段)</span></div><div class="line">        <span class="keyword">return</span> obj.dept.name <span class="keyword">if</span> obj.dept <span class="keyword">else</span> <span class="string">''</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ModelSerializer属性方法&quot;&gt;&lt;a href=&quot;#ModelSerializer属性方法&quot; class=&quot;headerlink&quot; title=&quot;ModelSerializer属性方法&quot;&gt;&lt;/a&gt;ModelSerializer属性方法&lt;/h3&gt;&lt;figu
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>Rest_framwork笔记</title>
    <link href="https://ttxsgoto.github.io/2017/05/14/rest-framwork-note/"/>
    <id>https://ttxsgoto.github.io/2017/05/14/rest-framwork-note/</id>
    <published>2017-05-14T11:36:53.000Z</published>
    <updated>2017-05-14T12:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现restful操作步骤"><a href="#实现restful操作步骤" class="headerlink" title="实现restful操作步骤"></a>实现restful操作步骤</h3><p>0.setting.py 添加设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">	<span class="string">'rest_framework'</span>,</div><div class="line">        <span class="string">'app'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>1.serializer序列化models<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line"> </div><div class="line"><span class="comment">#使用模型序列化ModelSerializer</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户管理</div><div class="line">    """</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span>   <span class="comment"># 方法重写</span></div><div class="line">        user = User.objects.create(**validated_data)</div><div class="line">        <span class="keyword">return</span> user</div><div class="line"> </div><div class="line"><span class="comment">#简单的默认create()和update()方法的实现</span></div></pre></td></tr></table></figure></p>
<p>2.viewSet中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">queryset = user.objects.all()       <span class="comment"># 取数据all</span></div><div class="line">serializer_class = UserSerializer   <span class="comment"># 将序列化的数据给</span></div><div class="line"> </div><div class="line"><span class="comment"># 或者返回数据列表</span></div><div class="line">departments = Department.objects.all()</div><div class="line">response.data.update(&#123;<span class="string">'departments'</span>: DepartmentSerializer(list(departments), many=<span class="keyword">True</span>).data&#125;)</div></pre></td></tr></table></figure></p>
<p>3.注册router<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line">router =  routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>, UserViewSet)</div></pre></td></tr></table></figure></p>
<h3 id="实例化-Serializer-类和模型实例化-ModelSerializer-类"><a href="#实例化-Serializer-类和模型实例化-ModelSerializer-类" class="headerlink" title="实例化(Serializer)类和模型实例化(ModelSerializer)类"></a>实例化(Serializer)类和模型实例化(ModelSerializer)类</h3><p>serializers.py  #序列化类的快捷方式，同时包括create,update方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers	    <span class="comment"># 序列化</span></div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User	<span class="comment"># 导入model</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户管理</div><div class="line">    """</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User  <span class="comment"># 定义models</span></div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'first_name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>)	<span class="comment"># 字段</span></div></pre></td></tr></table></figure></p>
<h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.data #可以处理任何数据，对post，put，patch等方法也起作用</div></pre></td></tr></table></figure>
<h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from rest_framework.response import Response</div><div class="line">return Response()	</div><div class="line"># 根据客户端的请求来渲染成指定的内容类型,用于未渲染内容和内容协商来决定正确的内容类型并把它返回给客户端的模板响应(TemplateResponse).</div></pre></td></tr></table></figure>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># REST框架为每个状态码提供了明确的标识符，如HTTP_400_BAD_REQUEST等</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,request)</span>:</span></div><div class="line">	<span class="keyword">return</span> Response(data, status=status.HTTP_201_CREATED)</div></pre></td></tr></table></figure>
<h3 id="装饰API视图"><a href="#装饰API视图" class="headerlink" title="装饰API视图"></a>装饰API视图</h3><ul>
<li>@app_view 用在基于视图的方法上</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"> </div><div class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">print</span> request.method</div><div class="line">    <span class="keyword">print</span> request.DATA</div><div class="line">    <span class="keyword">return</span> Response([&#123;<span class="string">'asset'</span>: <span class="string">'1'</span>,<span class="string">'status'</span>: <span class="string">'ok'</span>&#125;])</div><div class="line"> </div><div class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_api</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Respose(serializer.data)</div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Response(data,status=status.HTTP_206_PARTIAL_CONTENT)</div><div class="line"> </div><div class="line"><span class="comment">#urls.py中设置</span></div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"> </div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<ul>
<li>APIView 用在基于视图的类</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 基于视图的类</span></div><div class="line">views.py中</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(APIView)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,format=None)</span>:</span></div><div class="line">    	objectall = User.objects.all()</div><div class="line">        serializer = UserSerializer(objectall)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, formate=None)</span>:</span></div><div class="line">    	<span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="comment"># urls.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"> </div><div class="line">    url(<span class="string">r'^app/user/$'</span>, UserView.as_view()),</div><div class="line">    url(<span class="string">r'^app/user/(?P&lt;pk&gt;[0-9]+)$'</span>, UserView.as_view()),</div><div class="line"> </div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<ul>
<li>使用基于视图的一般类(generic class)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line">    queryset = info.objects.all()    <span class="comment">#models对象</span></div><div class="line">    serializer_class = UserSerializer	<span class="comment">#序列化的类</span></div></pre></td></tr></table></figure>
<h3 id="授权-Authentication-与权限-Permissions"><a href="#授权-Authentication-与权限-Permissions" class="headerlink" title="授权(Authentication)与权限(Permissions)"></a>授权(Authentication)与权限(Permissions)</h3><ul>
<li>数据总是和创建者联系在一起</li>
<li>只有授权用户才能创建对应的数据</li>
<li>只有对应的数据的创建者才能更新或删除它</li>
<li>没有授权的请求应该只有只读权限</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissons</div><div class="line"> </div><div class="line">urls.py中</div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]</div><div class="line"><span class="comment">################################</span></div><div class="line"><span class="comment"># 在浏览器API中添加登录</span></div><div class="line">urls.py</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</div><div class="line"> </div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]	<span class="comment"># 为api添加一个包括登录和退出视图的url样式</span></div><div class="line"> </div><div class="line"><span class="comment"># api-auth部分可以是任何你想要的url，唯一的限制为include中的链接必须使用‘rest_framework’名字空间，在Django1.9+ rest框架会设置名字空间，所以必须写</span></div></pre></td></tr></table></figure>
<h3 id="URL模式命名"><a href="#URL模式命名" class="headerlink" title="URL模式命名"></a>URL模式命名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url(<span class="string">r'^app/user/$'</span>, UserView.as_view(), name=<span class="string">'user_add'</span>), <span class="comment"># name指定url名称</span></div></pre></td></tr></table></figure>
<h3 id="添加分页"><a href="#添加分页" class="headerlink" title="添加分页"></a>添加分页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setting.py中</span></div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'base.serializers.PlugPageNumberPagination'</span>,</div><div class="line">    <span class="string">'MAX_PAGE_SIZE'</span>: <span class="number">50</span>,</div><div class="line">    <span class="string">'PAGE_SIZE'</span>:     <span class="number">15</span>  <span class="comment"># default page size</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="视图集-ViewSets-和路由-Routers"><a href="#视图集-ViewSets-和路由-Routers" class="headerlink" title="视图集(ViewSets)和路由(Routers)"></a>视图集(ViewSets)和路由(Routers)</h3><p>视图集让开发者把精力集中在构建状态和交互的api模型，而且他可以基于一般规范自动构建url<br>一个viewset类只绑定一个方法集合，当它初始化一个视图集合时，一般使用为处理复杂的url定义的Router类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserviewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">	queryset = User.objects.all()</div><div class="line">	serializer_class = UserSerializer</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self,request)</span>:</span></div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> data</div></pre></td></tr></table></figure></p>
<h3 id="明确绑定视图集到URL"><a href="#明确绑定视图集到URL" class="headerlink" title="明确绑定视图集到URL"></a>明确绑定视图集到URL</h3><p>定义URLConf时，处理方法只绑定了动作，我们必须从我们的视图集(ViewSets)创建一个视图集合，在urls.py文件中，我们将ViewSet类绑定到具体视图的集合</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># urls.py中</div><div class="line">from rest_framework.urlpatterns import format_suffix_patterns</div><div class="line"> </div><div class="line">user_list = UserView.as_view(&#123;</div><div class="line">    'get':'list',</div><div class="line">    'post':'creat',</div><div class="line">&#125;)</div><div class="line">url(r'^user/$, user_list)),</div><div class="line"> </div><div class="line"># 或者：</div><div class="line">list_create = &#123;</div><div class="line">    'get': 'list',</div><div class="line">    'post': 'create',</div><div class="line">&#125;</div><div class="line"> url(r'^user/$', UserView.as_view(list_create)),</div></pre></td></tr></table></figure>
<h3 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h3><p>使用Router类可以自动将资源和视图(views),链接(urls)联系起来，我们只需要用一个路由注册合适的视图集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># urls.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line"> </div><div class="line">router =  routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>,views.UserViewSet)</div><div class="line">router.register(<span class="string">r'groups'</span>,views.GroupsViewSet)</div><div class="line"> </div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.django-rest-framework.org/" target="_blank" rel="external">http://www.django-rest-framework.org/</a><br><a href="https://github.com/tomchristie/rest-framework-tutorial" target="_blank" rel="external">https://github.com/tomchristie/rest-framework-tutorial</a><br><a href="http://www.cnblogs.com/loveis715/p/4669091.html" target="_blank" rel="external">http://www.cnblogs.com/loveis715/p/4669091.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实现restful操作步骤&quot;&gt;&lt;a href=&quot;#实现restful操作步骤&quot; class=&quot;headerlink&quot; title=&quot;实现restful操作步骤&quot;&gt;&lt;/a&gt;实现restful操作步骤&lt;/h3&gt;&lt;p&gt;0.setting.py 添加设置&lt;br&gt;&lt;figu
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>装饰器</title>
    <link href="https://ttxsgoto.github.io/2017/05/13/decorator/"/>
    <id>https://ttxsgoto.github.io/2017/05/13/decorator/</id>
    <published>2017-05-13T02:57:35.000Z</published>
    <updated>2017-05-22T12:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><pre><code>- 能把装饰的函数替换成其他函数
- 装饰器在加载/导入模块时立即执行,被装饰的函数在被调用的时候运行
</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre><code>- 当函数离开创建环境后,依然持有其上下文状态
- 要形成闭包，首先需要一个嵌套的函数，即函数中定义了另一个函数，子函数引用父函
  数的变量,子函数称为闭包;
- Python中函数也是对象，所以函数也有很多属性，和闭包相关的属性是 
  __closure__,__closure__ 属性定义的是一个包含 cell 对象的元组，其中元组
  中的每一个cell对象用来保存作用域中变量的值
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding: utf_8</div><div class="line"> </div><div class="line">def func(n):</div><div class="line">    print 'id(n)----&gt; &#123;&#125;'.format(id(n))</div><div class="line"> </div><div class="line">    def new_power(x):</div><div class="line">        return x**n</div><div class="line">    print 'id(new_power)----&gt; &#123;&#125;'.format(id(new_power))</div><div class="line">    return new_power</div><div class="line"> </div><div class="line">first = func(5) # 在调用func函数时产生一个闭包new_power,并且已拥有局部变量n的值,即使func生命周期结束后,值n依然存在,因为n被new_power引用,所以不会被回收</div><div class="line"> </div><div class="line">print id(first)</div><div class="line">del func</div><div class="line">print first(2)</div><div class="line">print first.__closure__, first.__closure__[0].cell_contents # 函数也为对象,其中的闭包属性</div><div class="line">##### 运行结果 #####</div><div class="line">id(n)----&gt; 140676064892712</div><div class="line">id(new_power)----&gt; 4357115728</div><div class="line">4357115728</div><div class="line">32</div></pre></td></tr></table></figure>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>装饰器就是执行一个函数,当执行到@auth时，内部的动作为：</p>
<pre><code>- 执行auth函数，并将@auth下面的函数作为auth函数的参数，即@auth == auth(f1)
- 将执行完的auth函数返回值赋给@auth下面的函数的函数名，即 f1 = auth(f1),相当于执行inner函数
</code></pre><h3 id="装饰器实例"><a href="#装饰器实例" class="headerlink" title="装饰器实例"></a>装饰器实例</h3><h4 id="函数-无参数-的装饰器"><a href="#函数-无参数-的装饰器" class="headerlink" title="函数(无参数)的装饰器"></a>函数(无参数)的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span>    <span class="comment">#执行函数前执行动作</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span>    <span class="comment">#执行函数后执行动作</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">     </div><div class="line"><span class="meta">@auth  #@auth ==&gt; f1 = auth(f1) ==&gt;f1() 相当于执行inner函数，func为f1函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"This is f1 function"</span></div><div class="line"> </div><div class="line">f1()</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">This <span class="keyword">is</span> f1 function</div><div class="line">after</div></pre></td></tr></table></figure>
<h4 id="函数含有-一个-多个-参数的装饰器"><a href="#函数含有-一个-多个-参数的装饰器" class="headerlink" title="函数含有(一个/多个)参数的装饰器"></a>函数含有(一个/多个)参数的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_arg</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># 传递一个/多个参数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span></div><div class="line">        ret1,ret2 = func(*args, **kwargs)  <span class="comment"># 相当于f2(*args, **kwargs)函数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span></div><div class="line">        <span class="keyword">return</span> ret1,ret2</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth_arg</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span>  args,kwargs</div><div class="line">    <span class="keyword">return</span> args,kwargs</div><div class="line"> </div><div class="line">key1 = <span class="string">'ttxsgoto'</span></div><div class="line">dict1 = &#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line">ret1, ret2 = f2(key1, **dict1)</div><div class="line"><span class="keyword">print</span> ret1, ret2</div><div class="line"></div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">(<span class="string">'ttxsgoto'</span>,) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div><div class="line">after</div><div class="line">(<span class="string">'ttxsgoto'</span>,) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="有参数的装饰器"><a href="#有参数的装饰器" class="headerlink" title="有参数的装饰器"></a>有参数的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_arg</span><span class="params">(list1=[])</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> list1:</div><div class="line">        <span class="keyword">print</span> <span class="string">'None ....'</span></div><div class="line">        <span class="keyword">raise</span> Exception(<span class="string">'LIST is  Null '</span>)</div><div class="line">    new_list = []</div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> list1:</div><div class="line">        li += <span class="string">'a'</span></div><div class="line">        new_list.append(li)</div><div class="line">    <span class="keyword">print</span> new_list</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Before'</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">in_inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            ret1, ret2 = func(*args, **kwargs)</div><div class="line">            <span class="keyword">return</span> ret1, ret2</div><div class="line">        <span class="keyword">return</span> in_inner</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth_arg(list1=['a', '1'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"f3 ---"</span>, args, kwargs</div><div class="line">    <span class="keyword">return</span> args, kwargs</div><div class="line"> </div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">dict1=&#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> f3(a, **dict1)</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">[<span class="string">'aa'</span>, <span class="string">'1a'</span>]</div><div class="line">Before</div><div class="line">f3 --- ([<span class="number">1</span>, <span class="number">2</span>],) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="多装饰器"><a href="#多装饰器" class="headerlink" title="多装饰器"></a>多装饰器</h4><ul>
<li>在foo函数上层包裹了一层w1，又包裹了一次w2，一个嵌套一个函数，执行</li>
<li>可用于登录后再判断有没有权限，可以使用两个装饰器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before01"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after01"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before02"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after02"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@w2</span></div><div class="line"><span class="meta">@w1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"foo"</span></div><div class="line"> </div><div class="line">foo() <span class="comment">#先执行w1，在执行w2，嵌套执行，foo = w2(w1(foo)))</span></div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before02</div><div class="line">before01</div><div class="line">foo</div><div class="line">after01</div><div class="line">after02</div></pre></td></tr></table></figure>
<h4 id="函数的类装饰器-1"><a href="#函数的类装饰器-1" class="headerlink" title="函数的类装饰器(1)"></a>函数的类装饰器(1)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法</div><div class="line">    '''</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></div><div class="line">    	<span class="keyword">print</span> <span class="string">"__init__  function"</span></div><div class="line">        self.func = func</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Before..."</span></div><div class="line">        self.func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"After..."</span></div><div class="line"> </div><div class="line"><span class="meta">@Foo</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'bar funtion()'</span></div><div class="line"> </div><div class="line">bar()</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">__init__  function</div><div class="line">Before...</div><div class="line">bar funtion()</div><div class="line">After...</div></pre></td></tr></table></figure>
<h4 id="函数的类装饰器-2"><a href="#函数的类装饰器-2" class="headerlink" title="函数的类装饰器(2)"></a>函数的类装饰器(2)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorate</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,arg_list=[])</span>:</span></div><div class="line">        self.arg_list = arg_list</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.arg_list:</div><div class="line">                <span class="keyword">print</span> <span class="string">'None ....'</span></div><div class="line">                <span class="keyword">raise</span> Exception(<span class="string">'LIST is  Null '</span>)</div><div class="line">        new_list = []</div><div class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> self.arg_list:</div><div class="line">            li += <span class="string">'a'</span></div><div class="line">            new_list.append(li)</div><div class="line">        <span class="keyword">print</span> new_list</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            ret1, ret2 = func(*args, **kwargs)</div><div class="line">            <span class="keyword">return</span> ret1, ret2</div><div class="line">        <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@Decorate(arg_list=['a', 'b'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"f3  function"</span>, args, kwargs</div><div class="line">    <span class="keyword">return</span> args, kwargs</div><div class="line"> </div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">dict1=&#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line">ret = f3(a, **dict1)</div><div class="line"><span class="keyword">print</span> ret</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">[<span class="string">'aa'</span>, <span class="string">'ba'</span>]</div><div class="line">f3  function ([<span class="number">1</span>, <span class="number">2</span>],) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div><div class="line">(([<span class="number">1</span>, <span class="number">2</span>],), &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;)</div></pre></td></tr></table></figure>
<h3 id="装饰器的不足"><a href="#装饰器的不足" class="headerlink" title="装饰器的不足"></a>装饰器的不足</h3><p>使用装饰器极大地复用了代码，缺点就是原函数的元信息丢失<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)	#保持原函数信息一致，如果没有该装饰器，返回为inner函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"This is f1 function"</span></div><div class="line"> </div><div class="line">f1()</div><div class="line"><span class="keyword">print</span> f1, f1.__name__</div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">This <span class="keyword">is</span> f1 function</div><div class="line">after</div><div class="line">&lt;function inner at <span class="number">0x10e55b140</span>&gt; inner	<span class="comment">#这些显示为inner函数,本来调用的是f1函数</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）&lt;/p&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="decorator" scheme="https://ttxsgoto.github.io/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>多线程-threading</title>
    <link href="https://ttxsgoto.github.io/2017/04/17/threading/"/>
    <id>https://ttxsgoto.github.io/2017/04/17/threading/</id>
    <published>2017-04-17T12:37:11.000Z</published>
    <updated>2017-04-17T12:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程5种状态"><a href="#线程5种状态" class="headerlink" title="线程5种状态"></a>线程5种状态</h4><ul>
<li>新建</li>
<li>就绪</li>
<li>运行</li>
<li>阻塞</li>
<li>死亡</li>
</ul>
<p>阻塞的三种情况：</p>
<ul>
<li>同步阻塞：是指处于竞争锁定的状态，线程请求锁定时将进入这个状态，一旦成功获得锁定又恢复到运行状态；</li>
<li>等待阻塞：是指等待其他线程通知的状态，线程获得条件锁定后，调用“等待”将进入这个状态，一旦其他线程发出通知，线程将进入同步阻塞状态，再次竞争条件锁定；</li>
<li>其他阻塞：是指调用time.sleep()、anotherthread.join()或等待IO时的阻塞，这个状态下线程不会释放已获得的锁定。</li>
</ul>
<h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><p>在python虚拟机中的访问由全局解释器锁（GIL）控制，由于有了这把锁能保证同一时刻只有一个线程在运行，在多线程环境下，python虚拟机按照如下方式运行：</p>
<ol>
<li>设置GIL</li>
<li>切换到一个线程中运行</li>
<li>运行：<br> a指定数量的字节码的指令，或者<br> b线程主动让出控制（可以调用time.sleep(0)）</li>
<li>把线程设置为睡眠状态</li>
<li>解锁GIL</li>
<li>在重复以上所有步骤</li>
</ol>
<h4 id="threading-Thread模块"><a href="#threading-Thread模块" class="headerlink" title="threading.Thread模块"></a>threading.Thread模块</h4><p>threading.Thread 作用：创建线程实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- start()    开始一个线程的执行</div><div class="line">- run()    定义线程的功能的函数（一般会被子类重写）</div><div class="line">- join(timeout=<span class="keyword">None</span>)  程序挂起，直到子线程结束，在执行主线程，如果给了timeout，则最多阻塞timeout秒</div><div class="line">- getName()    返回线程的名字</div><div class="line">- setName()    设置线程的名字</div><div class="line">- isAlive()    检查线程是否成活</div><div class="line">- isDaemon()   是否等待线程执行完成后在执行主进程，默认为false</div><div class="line">- setDeaemon() 设置为daemoe模式，setDeaemon(<span class="keyword">True</span>)，不等子线程执行完成，直接执行主线程；如果在主线程没有结束时，子线程会执行直到主线程结束，子线程也结束</div></pre></td></tr></table></figure></p>
<h4 id="多线程运行方式"><a href="#多线程运行方式" class="headerlink" title="多线程运行方式"></a>多线程运行方式</h4><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><p>target传入函数名称，args传递给函数的参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime,sleep</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunction</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="keyword">print</span> item</div><div class="line">        sleep(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"before"</span></div><div class="line"> </div><div class="line">t1 = Thread(target=myfunction,args=(<span class="string">'hello'</span>,))</div><div class="line"><span class="keyword">print</span> t1.getName() <span class="comment">#Thread-1</span></div><div class="line"><span class="keyword">print</span> t1.isDaemon() <span class="comment">#默认为false</span></div><div class="line"><span class="comment">#t1.setDaemon(True)  #设置为setDaemon模式</span></div><div class="line">t1.start()</div><div class="line">t1.join(timeout=<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"after"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Over"</span></div><div class="line">sleep(<span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<h5 id="类继承调用"><a href="#类继承调用" class="headerlink" title="类继承调用"></a>类继承调用</h5><p>使用Threading创建线程，从threading.Thread继承，然后重写init方法和run方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span><span class="params">(Thread)</span>:</span> <span class="comment">#继承父类的threading.Thread</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,threadid,threadname,counter)</span>:</span></div><div class="line">        Thread.__init__(self)</div><div class="line">        self.threadid = threadid</div><div class="line">        self.threadname = threadname</div><div class="line">        self.counter = counter</div><div class="line">         </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span> <span class="comment">#把要执行的代码写在run函数中，线程创建后会直接运行run函数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Starting %s \n"</span> %self.threadname</div><div class="line">        print_time(self.name,self.counter,self.threadid) <span class="comment">#函数调用</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Exiting %s"</span> %self.threadname</div><div class="line">         </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName,delay,counter)</span>:</span></div><div class="line">    <span class="keyword">while</span> counter :</div><div class="line">        time.sleep(delay)</div><div class="line">        <span class="keyword">print</span> counter,<span class="string">"%s: %s"</span> %(threadName,time.ctime())</div><div class="line">        counter -=<span class="number">1</span></div><div class="line">         </div><div class="line">t1 = mythread(<span class="number">2</span>,<span class="string">"线程一"</span>,<span class="number">1</span>)</div><div class="line">t1.start()</div></pre></td></tr></table></figure></p>
<h4 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h4><p>优点：</p>
<ol>
<li>解耦：两者都只依赖于缓冲区，不相互依赖</li>
<li>支持并发：生产者把制造出来的数据往缓冲区一丢，就可以再去生产下一个数据，即不用依赖消费者的处理速度</li>
<li>支持忙闲不均</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time,random</div><div class="line"><span class="keyword">import</span> Queue</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">proudcer</span><span class="params">(name,que)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">if</span> que.qsize() &lt; <span class="number">3</span>:</div><div class="line">            que.put(<span class="string">'生产包子'</span>)</div><div class="line">            <span class="keyword">print</span> <span class="string">"%s:生产了一个包子...."</span> %name</div><div class="line">        time.sleep(random.randrange(<span class="number">5</span>))</div><div class="line">         </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(name,que)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            que.get_nowait() <span class="comment">#不等待队列是否有值</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"%s:消费了一个包子...."</span> %name</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">print</span> <span class="string">u'没有包子可消费了 .....'</span></div><div class="line">        time.sleep(random.randrange(<span class="number">3</span>))</div><div class="line">         </div><div class="line"><span class="comment">#实例化生产者</span></div><div class="line">q = Queue.Queue()</div><div class="line">p1 = threading.Thread(target=proudcer,args=(<span class="string">"生产者01"</span>,q))</div><div class="line">p2 = threading.Thread(target=proudcer,args=(<span class="string">"生产者02"</span>,q))</div><div class="line">p1.start()</div><div class="line">p2.start()</div><div class="line"> </div><div class="line"><span class="comment">#实例化消费者</span></div><div class="line">c1 = threading.Thread(target=consumer,args=(<span class="string">"消费者01"</span>,q))</div><div class="line">c2 = threading.Thread(target=consumer,args=(<span class="string">"消费者02"</span>,q))</div><div class="line">c1.start()</div><div class="line">c2.start()</div></pre></td></tr></table></figure>
<h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>线程锁,保证数据安全，多个线程都同时修改某个变量，有可能出现问题，Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法</p>
<p>运行：任何时刻只能有一个线程在执行</p>
<p>定义和方法:</p>
<pre><code>lock = threading.Lock() #线程锁定义
lock.acquire() #获取锁，开始独占cpu
slock.release() #释放锁，可以被其他使用cpu资源,必须在获得锁定后再使用，否则抛出异常
slock.locked()  #主程序判断locked()状态
Lock= threading.RLock() #可重入锁，多把锁时引用，释放时也应该释放对应的多把锁
lock = threading.BoundedSemaphore(4) #同时允许多少个线程进行数据修改信号量：同一时刻，允许几个线程运行
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">data = <span class="number">0</span></div><div class="line">lock = threading.Lock() <span class="comment">#定义锁</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> data</div><div class="line">    <span class="keyword">print</span> <span class="string">"%s acquire lock ..."</span> %threading.currentThread().getName()</div><div class="line">    <span class="comment">#print "acquire-----%s" %lock.acquire()</span></div><div class="line">    <span class="keyword">if</span> lock.acquire(): <span class="comment">#调用锁，返回是否获得锁</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"%s get the lock."</span> %threading.currentThread().getName()</div><div class="line">        data += <span class="number">1</span></div><div class="line">        <span class="keyword">print</span> data</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"%s release lock..."</span> %threading.currentThread().getName()</div><div class="line">        lock.release() <span class="comment"># 调用release()将释放锁</span></div><div class="line">         </div><div class="line">t1 = threading.Thread(target=func)</div><div class="line">t2 = threading.Thread(target=func)</div><div class="line">t3 = threading.Thread(target=func)</div><div class="line">t1.start()</div><div class="line">t2.start()</div><div class="line">t3.start()</div></pre></td></tr></table></figure>
<h4 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">event = threading.Event()</div><div class="line">event.wait()    #将阻塞线程放置为阻塞状态，等待设置处理</div><div class="line">event.set()   #event内置了一个初始为false的标示，当调用set时，设置为true，开始处理</div><div class="line">event.clear()    #将set标示位清空，设置为false</div><div class="line">event.isSet()    #判断set标示位是否为true</div></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html" target="_blank" rel="external">http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;线程5种状态&quot;&gt;&lt;a href=&quot;#线程5种状态&quot; class=&quot;headerlink&quot; title=&quot;线程5种状态&quot;&gt;&lt;/a&gt;线程5种状态&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新建&lt;/li&gt;
&lt;li&gt;就绪&lt;/li&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;li&gt;阻塞&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="threading" scheme="https://ttxsgoto.github.io/tags/threading/"/>
    
  </entry>
  
  <entry>
    <title>importlib模块</title>
    <link href="https://ttxsgoto.github.io/2017/04/16/importlib/"/>
    <id>https://ttxsgoto.github.io/2017/04/16/importlib/</id>
    <published>2017-04-16T07:44:11.000Z</published>
    <updated>2017-04-17T07:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过字符串导入模块，动态导入模块，3种方式,记录如下：</p>
<p>方式一：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">os1 = __import__('os')</div><div class="line">os1.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import imp</div><div class="line">os2 = imp.load_module('os',*imp.find_module('os'))</div><div class="line">os2.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>
<p>方式三：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module = importlib.import_module('os')</div><div class="line">os_path =  getattr(module,'path')</div><div class="line">os_path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过字符串导入模块，动态导入模块，3种方式,记录如下：&lt;/p&gt;
&lt;p&gt;方式一：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cla
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="importlib" scheme="https://ttxsgoto.github.io/tags/importlib/"/>
    
  </entry>
  
  <entry>
    <title>datetime模块</title>
    <link href="https://ttxsgoto.github.io/2017/04/10/datetime/"/>
    <id>https://ttxsgoto.github.io/2017/04/10/datetime/</id>
    <published>2017-04-10T13:51:17.000Z</published>
    <updated>2017-06-20T12:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.</p>
<h4 id="时间转换为字符串-格式化输出"><a href="#时间转换为字符串-格式化输出" class="headerlink" title="时间转换为字符串(格式化输出)"></a>时间转换为字符串(格式化输出)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line"><span class="comment"># strftime参数，strftime(format[, tuple]) -&gt; string</span></div><div class="line">python中时间日期格式化符号：</div><div class="line">%y 两位数的年份表示（<span class="number">00</span><span class="number">-99</span>）</div><div class="line">%Y 四位数的年份表示（<span class="number">000</span><span class="number">-9999</span>）</div><div class="line">%m 月份（<span class="number">01</span><span class="number">-12</span>）</div><div class="line">%d 月内中的一天（<span class="number">0</span><span class="number">-31</span>）</div><div class="line">%H <span class="number">24</span>小时制小时数（<span class="number">0</span><span class="number">-23</span>）</div><div class="line">%I <span class="number">12</span>小时制小时数（<span class="number">01</span><span class="number">-12</span>）</div><div class="line">%M 分钟数（<span class="number">00</span><span class="number">-59</span>）</div><div class="line">%S 秒（<span class="number">00</span><span class="number">-59</span>）</div><div class="line">%a 本地简化星期名称</div><div class="line">%A 本地完整星期名称</div><div class="line">%b 本地简化的月份名称</div><div class="line">%B 本地完整的月份名称</div><div class="line">%c 本地相应的日期表示和时间表示</div><div class="line">%j 年内的一天（<span class="number">001</span><span class="number">-366</span>）</div><div class="line">%p 本地A.M.或P.M.的等价符</div><div class="line">%U 一年中的星期数（<span class="number">00</span><span class="number">-53</span>）星期天为星期的开始</div><div class="line">%w 星期（<span class="number">0</span><span class="number">-6</span>），星期天为星期的开始</div><div class="line">%W 一年中的星期数（<span class="number">00</span><span class="number">-53</span>）星期一为星期的开始</div><div class="line">%x 本地相应的日期表示</div><div class="line">%X 本地相应的时间表示</div><div class="line">%Z 当前时区的名称</div><div class="line">%% %号本身</div></pre></td></tr></table></figure>
<h4 id="字符串和datetime转换"><a href="#字符串和datetime转换" class="headerlink" title="字符串和datetime转换"></a>字符串和datetime转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">把str转换为datetime,转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: <span class="keyword">print</span> datetime.now()</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">03.619051</span></div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: type(datetime.now())</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: str = <span class="string">'2017-04-10 21:13:14'</span></div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: type(str)</div><div class="line">Out[<span class="number">5</span>]: str</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: daytime = datetime.strptime(str,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</div><div class="line"> </div><div class="line">In [<span class="number">7</span>]: daytime</div><div class="line">Out[<span class="number">7</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">8</span>]: <span class="keyword">print</span> daytime</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">14</span></div><div class="line"> </div><div class="line">In [<span class="number">9</span>]: type(daytime)</div><div class="line">Out[<span class="number">9</span>]: datetime.datetime</div></pre></td></tr></table></figure>
<h4 id="data和datetime转换"><a href="#data和datetime转换" class="headerlink" title="data和datetime转换"></a>data和datetime转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># datetime ——&gt; date</span></div><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> datetime</div><div class="line">In [<span class="number">2</span>]: datetime.datetime.now().date()</div><div class="line">Out[<span class="number">2</span>]: datetime.date(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">20</span>)</div><div class="line"> </div><div class="line"><span class="comment"># date ——&gt; datetime</span></div><div class="line">In [<span class="number">5</span>]: today = datetime.date.today()</div><div class="line"></div><div class="line">In [<span class="number">6</span>]: datetime.datetime.combine(today, datetime.time())</div><div class="line">Out[<span class="number">6</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">In [<span class="number">7</span>]: datetime.datetime.combine(today, datetime.time.min)</div><div class="line">Out[<span class="number">7</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<h4 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入。</div><div class="line">如果仅导入import datetime，则需要使用datetime.datetime.now()返回当前日期和时间，其类型是datetime</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now = datetime.now()</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: now</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">241762</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> now</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">11</span>:<span class="number">07.241762</span></div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: type(now)</div><div class="line">Out[<span class="number">5</span>]: datetime.datetime</div></pre></td></tr></table></figure>
<h4 id="特定时间"><a href="#特定时间" class="headerlink" title="特定时间"></a>特定时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: day = datetime(<span class="number">2017</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: day</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> day</div><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h4 id="时间加减"><a href="#时间加减" class="headerlink" title="时间加减"></a>时间加减</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，需要导入timedelta</div><div class="line">'''</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now = datetime.now()</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: now</div><div class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: now+timedelta(hours=<span class="number">2</span>)</div><div class="line">Out[<span class="number">4</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: now-timedelta(days=<span class="number">2</span>)</div><div class="line">Out[<span class="number">5</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">21</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: now+timedelta(days=<span class="number">1</span>,hours=<span class="number">1</span>)</div><div class="line">Out[<span class="number">6</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">413031</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.&lt;/p&gt;
&lt;h4 id=&quot;时间转换为字符串-格式化输出&quot;&gt;&lt;a href=&quot;#时间转换为字符串-格式化输出&quot; class=&quot;he
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="datetime" scheme="https://ttxsgoto.github.io/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>django Models</title>
    <link href="https://ttxsgoto.github.io/2017/04/05/django-models-basic/"/>
    <id>https://ttxsgoto.github.io/2017/04/05/django-models-basic/</id>
    <published>2017-04-05T12:07:24.000Z</published>
    <updated>2017-04-05T13:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">1、models.AutoField 自增列 = int(11)</div><div class="line">　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。</div><div class="line">2、models.CharField　　字符串字段</div><div class="line">　　必须 max_length 参数</div><div class="line">3、models.BooleanField　　布尔类型=tinyint(1)</div><div class="line">　　不能为空，Blank=True</div><div class="line">4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar</div><div class="line">　　继承CharField，所以必须 max_lenght 参数</div><div class="line">5、models.DateField　　日期类型 date</div><div class="line">　　对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。</div><div class="line">6、models.DateTimeField　　日期类型 datetime</div><div class="line">　　同DateField的参数</div><div class="line">7、models.Decimal　　十进制小数类型 = decimal</div><div class="line">　　必须指定整数位max_digits和小数位decimal_places</div><div class="line">8、models.EmailField　　字符串类型（正则表达式邮箱） =varchar</div><div class="line">　　对字符串进行正则表达式</div><div class="line">9、models.FloatField　　浮点类型 = double</div><div class="line">10、models.IntegerField　　整形</div><div class="line">11、models.BigIntegerField　　长整形</div><div class="line">　　integer_field_ranges = &#123;</div><div class="line">　　　　&apos;SmallIntegerField&apos;: (-32768, 32767),</div><div class="line">　　　　&apos;IntegerField&apos;: (-2147483648, 2147483647),</div><div class="line">　　　　&apos;BigIntegerField&apos;: (-9223372036854775808, 9223372036854775807),</div><div class="line">　　　　&apos;PositiveSmallIntegerField&apos;: (0, 32767),</div><div class="line">　　　　&apos;PositiveIntegerField&apos;: (0, 2147483647),</div><div class="line">　　&#125;</div><div class="line">12、models.IPAddressField　　字符串类型（ip4正则表达式）</div><div class="line">13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）</div><div class="line">　　参数protocol可以是：both、ipv4、ipv6</div><div class="line">　　验证时，会根据设置报错</div><div class="line">14、models.NullBooleanField　　允许为空的布尔类型</div><div class="line">15、models.PositiveIntegerFiel　　正Integer</div><div class="line">16、models.PositiveSmallIntegerField　　正smallInteger</div><div class="line">17、models.SlugField　　减号、下划线、字母、数字</div><div class="line">18、models.SmallIntegerField　　数字</div><div class="line">　　数据库中的字段有：tinyint、smallint、int、bigint</div><div class="line">19、models.TextField　　字符串=longtext</div><div class="line">20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]</div><div class="line">21、models.URLField　　字符串，地址正则表达式</div><div class="line">22、models.BinaryField　　二进制&lt;br&gt;23、models.ImageField   图片&lt;br&gt;24、models.FilePathField 文件</div><div class="line"> </div><div class="line">更多字段：</div><div class="line">1、null=True 数据库中字段是否可以为空,默认为False</div><div class="line">2、blank=True 表单验证允许该字段为空，如果为blank=False，表示该字段必填</div><div class="line">　　django的 Admin 中添加数据时是否可允许空值,True允许为空，False时，表示该字段为必填</div><div class="line">3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列</div><div class="line">4、auto_now 和 auto_now_add</div><div class="line">　　auto_now   自动创建---无论添加或修改，都是当前操作的时间</div><div class="line">　　auto_now_add  自动创建---永远是创建时的时间</div><div class="line">5、choices</div><div class="line">GENDER_CHOICE = (</div><div class="line">        (u&apos;M&apos;, u&apos;Male&apos;),</div><div class="line">        (u&apos;F&apos;, u&apos;Female&apos;),</div><div class="line">    )</div><div class="line">  如：gender = models.CharField(max_length=2,choices = GENDER_CHOICE)</div><div class="line">6、max_length</div><div class="line">7、default　　设置默认值</div><div class="line">8、verbose_name　　Admin中字段的显示名称，类似于设置别名</div><div class="line">9、name|db_column　　数据库中的字段名称</div><div class="line">10、unique=True　　不允许重复，整表唯一</div><div class="line">11、db_index = True　　数据库索引</div><div class="line">12、editable=True　　在Admin里是否可编辑</div><div class="line">13、error_messages=None　　错误提示</div><div class="line">14、auto_created=False　　自动创建</div><div class="line">15、help_text　　在Admin中提示帮助信息，即使字段不在表单中使用，它对生成文档也很用</div><div class="line">16、validators=[]</div><div class="line">17、upload-to</div><div class="line">18、db_table=&apos;xxx&apos; 重新设置表名称</div><div class="line">19、related_name=&apos;xxxx&apos;  是将外键中的 &quot;topping_set&quot; (取自 类 的名字), 设置为自定义的对象集描述符，一般用于当一个对象要被另一个对象关联不止一次时使用，这个参数才真正有用，如下：</div><div class="line">    models.ForeignKey(Category, related_name=&quot;primary_storys&quot;)</div><div class="line">    models.ForeignKey(Category, related_name=&quot;secondary_storys&quot;)</div><div class="line">20、related_query_name=&apos;xxxx&apos;    用于目标模型的反向过滤</div><div class="line"> </div><div class="line">元选项（非必须）</div><div class="line">class Meta:</div><div class="line">        verbose_name = u&apos;企业/组织&apos;          #别名</div><div class="line">        verbose_name_plural = u&apos;企业/组织&apos;   #复数别名</div><div class="line">        db_table = &apos;organs_organ&apos;          #数据库表名</div><div class="line">        ordering = (&apos;codename&apos;, )          #排序</div><div class="line">字段说明链接：</div><div class="line">http://python.usyiyi.cn/translate/django_182/ref/models/fields.html#common-model-field-options</div></pre></td></tr></table></figure>
<h4 id="数据库表关系"><a href="#数据库表关系" class="headerlink" title="数据库表关系"></a>数据库表关系</h4><ul>
<li>一对多，models.ForeignKey(A)<br>  当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）</li>
<li>一对一，models.OneToOneField(B)<br>  在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失）</li>
<li>多对多，authors = models.ManyToManyField(C)<br>  在某表中创建一行数据是，有一个可以多选的下拉框</li>
</ul>
<h4 id="模型的属性"><a href="#模型的属性" class="headerlink" title="模型的属性"></a>模型的属性</h4><p>objects 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问；也可以自定义方法；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line">    username = models.CharField(<span class="string">u'用户名'</span>, max_length=<span class="number">255</span>)</div><div class="line">    email = models.EmailField(<span class="string">u'Email'</span>)</div><div class="line">    is_active = models.BooleanField(<span class="string">u'是否激活'</span>, default=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    objects = UserManager()</div><div class="line"> </div><div class="line"><span class="comment"># managers.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span><span class="params">(Manager)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(BaseManager, self).__init__()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_staff</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">from</span> .models <span class="keyword">import</span> Staff</div><div class="line">        staff = Staff(**kwargs)</div><div class="line">        staff.save()</div><div class="line">        <span class="keyword">return</span> staff</div><div class="line"><span class="comment"># 调用</span></div><div class="line">User.objects.create_staff(**kwargs)</div></pre></td></tr></table></figure></p>
<h4 id="模型的方法"><a href="#模型的方法" class="headerlink" title="模型的方法"></a>模型的方法</h4><p>可以在模型上定义自定义的方法来给你的对象添加自定义的“底层”功能。Manager 方法用于“表范围”的事务，模型的方法应该着眼于特定的模型实例。</p>
<p>管理器方法可以通过self.model 来得到它所属的模型类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line">    username = models.CharField(<span class="string">u'用户名'</span>, max_length=<span class="number">255</span>)</div><div class="line">    email = models.EmailField(<span class="string">u'Email'</span>)</div><div class="line">    is_active = models.BooleanField(<span class="string">u'是否激活'</span>, default=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_true</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.is_active <span class="keyword">else</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line"><span class="comment"># views.py	仅仅为了说明，下面例子没有任何意义</span></div><div class="line">user = User.objects.get(id=id)</div><div class="line"><span class="keyword">if</span> user.is_true():</div><div class="line">    <span class="keyword">return</span> <span class="string">'right'</span></div></pre></td></tr></table></figure></p>
<h4 id="get-filter-区别"><a href="#get-filter-区别" class="headerlink" title="get()/filter()区别"></a>get()/filter()区别</h4><ul>
<li>models.objects.get() 获取到的是一个对象，如果没有抛出DoesNotExist异常；</li>
<li>get()得到的对象，更新需要obj.name=name, obj.save()</li>
<li>models.objects.filter()数据过滤，得到是一个查询集-对象列表，如果没有返回[]</li>
<li>filter()得到的对象，更新时直接models.objects.filter().update()</li>
</ul>
<h4 id="model-object-create-model-save-区别"><a href="#model-object-create-model-save-区别" class="headerlink" title="model.object.create()/model.save()区别"></a>model.object.create()/model.save()区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Account.objects.create(**kwargs) <span class="comment">#调用save()方法，保存到数据库，返回实例object</span></div><div class="line">Account(**kwargs)    		 <span class="comment">#为类对象，没有调用save()方法，没有保存到数据库，直到调用save()方法将数据保存</span></div></pre></td></tr></table></figure>
<h4 id="模型继承"><a href="#模型继承" class="headerlink" title="模型继承"></a>模型继承</h4><h5 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h5><p>只想使用父类来持有一些信息，不想在每个子模型中都定义一次，这个类永远不会单独使用<br>编写完基类之后，在 Meta类中设置 abstract=True ，该类就不能创建任何数据表，如果抽象化基础类和它的子类有相同的项，那么将会出现error（并且Django将返回一个exception），例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(models.Model)</span>:</span></div><div class="line">    created_time = models.DateTimeField(<span class="string">u'创建时间'</span>, auto_now_add=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        abstract = <span class="keyword">True</span></div><div class="line">        ordering = [<span class="string">'-created_time'</span>]</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span><span class="params">(BaseModel)</span>:</span></div><div class="line">    name = models.CharField(<span class="string">u'部门名称'</span>, max_length=<span class="number">100</span>, default=<span class="string">''</span>)</div><div class="line">    contact = models.CharField(<span class="string">u'联系电话'</span>, max_length=<span class="number">20</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    desc = models.TextField(<span class="string">u'描述'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">u'部门'</span></div><div class="line">        verbose_name_plural = <span class="string">u'部门'</span></div><div class="line">        db_table = <span class="string">'department'</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">u'%s'</span> % self.name</div></pre></td></tr></table></figure></p>
<p>在 ForeignKey或 ManyToManyField字段上使用 related_name属性，你必须总是为该字段指定一个唯一的反向名称</p>
<h5 id="多表继承"><a href="#多表继承" class="headerlink" title="多表继承"></a>多表继承</h5><p>继承一个已经存在的模型且想让每个模型具有它自己的数据库表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">50</span>)</div><div class="line">    address = models.CharField(max_length=<span class="number">80</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></div><div class="line">    serves_hot_dogs = models.BooleanField(default=<span class="keyword">False</span>)</div><div class="line">    serves_pizza = models.BooleanField(default=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
<h5 id="代理继承"><a href="#代理继承" class="headerlink" title="代理继承"></a>代理继承</h5><p>只是想改变模块Python 级别的行为，而不用修改模型的字段,更改默认的manager，或者添加一个新的方法；为原始模型创建一个代理，你可以创建，删除，更新代理 model 的实例，而且所有的数据都可以像使用原始 model 一样被保存<br>不同之处在于：你可以在代理 model 中改变默认的排序设置和默认的 manager ，更不会对原始 model 产生影响<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        proxy = <span class="keyword">True</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedPerson</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        ordering = [<span class="string">"last_name"</span>]</div><div class="line">        proxy = <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h4 id="多对多表结构中添加字段"><a href="#多对多表结构中添加字段" class="headerlink" title="多对多表结构中添加字段"></a>多对多表结构中添加字段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">128</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">128</span>)</div><div class="line">    members = models.ManyToManyField(Person, through=<span class="string">'Membership'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span><span class="params">(models.Model)</span>:</span></div><div class="line">    person = models.ForeignKey(Person)</div><div class="line">    group = models.ForeignKey(Group)</div><div class="line">    date_joined = models.DateField()</div><div class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ringo = Person.objects.create(name=<span class="string">"Ringo Starr"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>paul = Person.objects.create(name=<span class="string">"Paul McCartney"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles = Group.objects.create(name=<span class="string">"The Beatles"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m1 = Membership(person=ringo, group=beatles,</div><div class="line"><span class="meta">... </span>    date_joined=date(<span class="number">1962</span>, <span class="number">8</span>, <span class="number">16</span>),</div><div class="line"><span class="meta">... </span>    invite_reason=<span class="string">"Needed a new drummer."</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m1.save()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles.members.all()</div><div class="line">[&lt;Person: Ringo Starr&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ringo.group_set.all()</div><div class="line">[&lt;Group: The Beatles&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m2 = Membership.objects.create(person=paul, group=beatles,</div><div class="line"><span class="meta">... </span>    date_joined=date(<span class="number">1960</span>, <span class="number">8</span>, <span class="number">1</span>),</div><div class="line"><span class="meta">... </span>    invite_reason=<span class="string">"Wanted to form a band."</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>beatles.members.all()</div><div class="line">[&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]</div></pre></td></tr></table></figure>
<h4 id="关联对象查询"><a href="#关联对象查询" class="headerlink" title="关联对象查询"></a>关联对象查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">100</span>)</div><div class="line">    tagline = models.TextField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">50</span>)</div><div class="line">    email = models.EmailField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></div><div class="line">    blog = models.ForeignKey(Blog)</div><div class="line">    headline = models.CharField(max_length=<span class="number">255</span>)</div><div class="line">    body_text = models.TextField()</div><div class="line">    pub_date = models.DateField()</div><div class="line">    mod_date = models.DateField()</div><div class="line">    authors = models.ManyToManyField(Author)</div><div class="line">    n_comments = models.IntegerField()</div><div class="line">    n_pingbacks = models.IntegerField()</div><div class="line">    rating = models.IntegerField()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></div><div class="line">        <span class="keyword">return</span> self.headline</div></pre></td></tr></table></figure>
<h5 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h5><p>正向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e.blog <span class="comment"># Returns the related Blog object.</span></div></pre></td></tr></table></figure></p>
<p>反向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 管理器的名字为entry_set,其中entry为源模型的小写名称，当然这个名称也可以自定义，通过在ForeignKey 定义时设置related_name 参数来覆盖foo_set 的名称。例如，如果Entry 模型改成blog = ForeignKey(Blog, related_name='entries')，相对于的管理器也应该为entries</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = Blog.objects.get(id=<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.all() <span class="comment"># Returns all Entry objects related to Blog.</span></div><div class="line"></div><div class="line"><span class="comment"># b.entry_set is a Manager that returns QuerySets.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.filter(headline__contains=<span class="string">'Lennon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.entry_set.count()</div></pre></td></tr></table></figure></p>
<h5 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h5><p>多对多关系的两端都会自动获得访问另一端的API。这些API 的工作方式与一对多关系一样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">e = Entry.objects.get(id=<span class="number">3</span>)</div><div class="line">e.authors.all() <span class="comment"># Returns all Author objects for this Entry.</span></div><div class="line">e.authors.count()</div><div class="line">e.authors.filter(name__contains=<span class="string">'John'</span>)</div><div class="line"> </div><div class="line">a = Author.objects.get(id=<span class="number">5</span>)</div><div class="line">a.entry_set.all() <span class="comment"># Returns all Entry objects for this Author.</span></div></pre></td></tr></table></figure></p>
<h5 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h5><p>正向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryDetail</span><span class="params">(models.Model)</span>:</span></div><div class="line">    entry = models.OneToOneField(Entry)</div><div class="line">    details = models.TextField()</div><div class="line"> </div><div class="line">ed = EntryDetail.objects.get(id=<span class="number">2</span>)</div><div class="line">ed.entry <span class="comment"># Returns the related Entry object.</span></div></pre></td></tr></table></figure></p>
<p>反向查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一对一关系中的关联模型同样具有一个管理器对象，但是该管理器表示一个单一的对象而不是对象的集合；如果没有对象赋值给这个关联关系，Django 将引发一个DoesNotExist 异常；</span></div><div class="line">e = Entry.objects.get(id=<span class="number">2</span>)</div><div class="line">e.entrydetail <span class="comment"># returns the related EntryDetail object</span></div></pre></td></tr></table></figure></p>
<h4 id="select-for-update"><a href="#select-for-update" class="headerlink" title="select_for_update()"></a>select_for_update()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用于事务，返回一个for update 锁</div><div class="line">Returns a new QuerySet instance that will select objects with a FOR UPDATE lock.</div><div class="line">因QuerySet的延迟查询特性, copy一份用于update, 以便于不影响初始查询的candidates集</div></pre></td></tr></table></figure>
<h4 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h4><p>使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">objList = [a, b, c,] <span class="comment">#none are saved</span></div><div class="line">objList = model(record=record, receiver=receiver) <span class="comment"># 上述两种格式都是批量创建对象的数据格式</span></div><div class="line">model.objects.bulk_create(objList)</div></pre></td></tr></table></figure></p>
<h4 id="执行原始sql"><a href="#执行原始sql" class="headerlink" title="执行原始sql"></a>执行原始sql</h4><p>在模型查询API不够用的情况下，你可以使用原始的SQL语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.objects.raw(<span class="string">'SELECT id, first_name, last_name, birth_date FROM myapp_person'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;字段&quot;&gt;&lt;a href=&quot;#字段&quot; class=&quot;headerlink&quot; title=&quot;字段&quot;&gt;&lt;/a&gt;字段&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="models" scheme="https://ttxsgoto.github.io/tags/models/"/>
    
  </entry>
  
  <entry>
    <title>re模块</title>
    <link href="https://ttxsgoto.github.io/2017/03/30/re/"/>
    <id>https://ttxsgoto.github.io/2017/03/30/re/</id>
    <published>2017-03-30T13:18:15.000Z</published>
    <updated>2017-03-30T13:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；</p>
<h4 id="匹配使用函数"><a href="#匹配使用函数" class="headerlink" title="匹配使用函数"></a>匹配使用函数</h4><ul>
<li>re.match(pattern, string[, flags]):从第一个字符开始匹配,匹配成功就返回,不关心后面的内容;</li>
<li>re.search(pattern, string[, flags]):扫描整个string查找匹配,匹配成功就返回,不关心后面的内容;</li>
<li>re.split(pattern, string[, maxsplit]):按能够匹配的子串将string分割后返回列表;</li>
<li>re.findall(pattern, string[, flags]):搜索string，以列表形式返回全部能匹配的子串;</li>
<li>re.finditer(pattern, string[, flags]):搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器;</li>
<li>re.sub(pattern, repl, string[, count]):使用repl替换string中每一个匹配的子串后返回替换后的字符串;</li>
<li>re.subn(pattern, repl, string[, count]):返回 (sub(repl, string[, count]), 替换次数);</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="string">'''</span></div><div class="line">    Describe:</div><div class="line">    re.compile(string[,flag])   #返回pattern对象</div><div class="line">    pattern = re.compile(r'hello')</div><div class="line">    flag参数是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M</div><div class="line">    re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）</div><div class="line">    re.M(全拼：MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）</div><div class="line">    re.S(全拼：DOTALL): 点任意匹配模式，改变'.'的行为</div><div class="line">    re.L(全拼：LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</div><div class="line">    re.U(全拼：UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</div><div class="line">    re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.match(pattern, string[, flags])</div><div class="line">    这个方法将会从string（我们要匹配的字符串）的开头开始，</div><div class="line">    尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，</div><div class="line">    立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。</div><div class="line">    两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止,不再对string向后匹配。</div><div class="line">    :return:</div><div class="line">    从第一个字符开始匹配,一旦匹配成功就返回,不关心后面的内容</div><div class="line">    ============match属性和方法==============</div><div class="line">    # 属性</div><div class="line">    1.string: 匹配时使用的文本。</div><div class="line">    2.re: 匹配时使用的Pattern对象。</div><div class="line">    3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class="line">    4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class="line">    5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</div><div class="line">    6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</div><div class="line"> </div><div class="line">    # 方法</div><div class="line">    1.group([group1, …]):获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</div><div class="line">    2.groups([default]):以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</div><div class="line">    3.groupdict([default]):返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</div><div class="line">    4.start([group]):返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</div><div class="line">    5.end([group]):返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</div><div class="line">    6.span([group]):返回(start(group), end(group))。</div><div class="line">    7.expand(template):将匹配到的分组代入template中然后返回。template中可以使用\id或\g、\g引用分组，但不能使用编号0。\id与\g是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g0。</div><div class="line">    """</div><div class="line"> </div><div class="line">    pattern = re.compile(<span class="string">r'hello'</span>)  <span class="comment">#把正则表达式编译成一个正则表达式对象,再使用</span></div><div class="line">    result1 = re.match(pattern, <span class="string">'hello'</span>)</div><div class="line">    result2 = re.match(pattern, <span class="string">'hello0 xxx'</span>)</div><div class="line">    result3 = re.match(pattern, <span class="string">'heloo xxx'</span>)</div><div class="line">    result4 = re.match(pattern, <span class="string">'hello xxx'</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">print</span> result1,result2,result3,result4   <span class="comment">#re对象，&lt;_sre.SRE_Match object at 0x1053d55e0&gt; &lt;_sre.SRE_Match object at 0x1053ba098&gt; None &lt;_sre.SRE_Match object at 0x1053ba100&gt;</span></div><div class="line">    <span class="keyword">if</span> result1:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result1.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result1 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result2:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result2.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result2 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result3:					<span class="comment">#result3 faild</span></div><div class="line">        <span class="keyword">print</span> result3.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result3 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> result4:					<span class="comment">#hello</span></div><div class="line">        <span class="keyword">print</span> result4.group()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'result4 faild'</span></div><div class="line"> </div><div class="line">    <span class="keyword">print</span> <span class="string">'======================================='</span></div><div class="line">    m = re.match(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, <span class="string">'hello world!!!'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'m.string:'</span>, m.string                             <span class="comment">#m.string: hello world!!!</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.re:'</span>, m.re                                     <span class="comment">#m.re: &lt;_sre.SRE_Pattern object at 0x103d62690&gt;</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.pos'</span>, m.pos                                    <span class="comment">#m.pos 0</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.endpos'</span>, m.endpos                              <span class="comment">#m.endpos 14</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.lastindex:'</span>, m.lastindex                       <span class="comment">#m.lastindex: 3</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.lastgroup:'</span>, m.lastgroup                       <span class="comment">#m.lastgroup: sign</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.group():'</span>, m.group()                           <span class="comment">#m.group(): hello world!!!</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.group(1,2):'</span>, m.group(<span class="number">1</span>,<span class="number">2</span>)                     <span class="comment">#m.group(1,2): ('hello', 'world')</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.groups():'</span>, m.groups()                         <span class="comment">#m.groups(): ('hello', 'world', '!!!')</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.groupdict()'</span>, m.groupdict()                    <span class="comment">#m.groupdict() &#123;'sign': '!!!'&#125;</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.start(2):'</span>, m.start(<span class="number">2</span>)                         <span class="comment">#m.start(2): 6</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.end(2):'</span>, m.end(<span class="number">2</span>)                             <span class="comment">#m.end(2): 11</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'m.span(2):'</span>, m.span(<span class="number">2</span>)                           <span class="comment">#m.span(2): (6, 11)</span></div><div class="line">    <span class="keyword">print</span> <span class="string">r"m.expand(r'\g \g\g'):"</span>, m.expand(<span class="string">r'\2 \1\3'</span>)    <span class="comment">#m.expand(r'\g \g\g'): world hello!!!</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.search(pattern, string[, flags])</div><div class="line">    search()会扫描整个string查找匹配;</div><div class="line">    match（）只有在0位置匹配成功的话才有返回，</div><div class="line">    如果不是开始位置匹配成功的话，match()就返回None。</div><div class="line">    search方法的返回对象同样match()返回对象的方法和属性</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'world'</span>)</div><div class="line">    match = re.search(pattern, <span class="string">'hello world!!!! world'</span>)</div><div class="line">    <span class="keyword">if</span> match:</div><div class="line">        <span class="comment"># 使用Match获得分组信息</span></div><div class="line">        <span class="keyword">print</span> match.group()     <span class="comment">#world</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.split(pattern, string[, maxsplit])</div><div class="line">    按照能够匹配的子串将string分割后返回列表。</div><div class="line">    maxsplit用于指定最大分割次数，不指定将全部分割</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">print</span> re.split(pattern, <span class="string">'xxxx1wsd2dsafds4dafd8'</span>,maxsplit=<span class="number">10</span>)    <span class="comment">#['xxxx', 'wsd', 'dsafds', 'dafd', '']</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findall</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.findall(pattern, string[, flags])</div><div class="line">    搜索string，以列表形式返回全部能匹配的子串</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">print</span> re.findall(pattern, <span class="string">'xxxx1wsd2dsafds4dafd8'</span>,)     <span class="comment">#['1', '2', '4', '8']</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">finditer</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.finditer(pattern, string[, flags])</div><div class="line">    搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(pattern, <span class="string">'one1two2three3four4'</span>):</div><div class="line">        <span class="keyword">print</span> m.group(),    <span class="comment">#1 2 3 4</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.sub(pattern, repl, string[, count])</div><div class="line">    使用repl替换string中每一个匹配的子串后返回替换后的字符串</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'(\w+)-(\w+)'</span>)</div><div class="line">    s = <span class="string">'I-can, hello world!'</span></div><div class="line">    <span class="keyword">print</span> re.sub(pattern,<span class="string">r'\2 \1'</span>, s)   <span class="comment">#can I, hello world!</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subn</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    re.subn(pattern, repl, string[, count])</div><div class="line">    返回 (sub(repl, string[, count]), 替换次数)</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    pattern = re.compile(<span class="string">r'(\w+)-(\w+)'</span>)</div><div class="line">    s = <span class="string">'I-can, hello-world!'</span></div><div class="line">    <span class="keyword">print</span> re.subn(pattern, <span class="string">r'\2 \1'</span>, s)     <span class="comment">#('can I, world hello!', 2)</span></div><div class="line"> </div><div class="line"> </div><div class="line">match()</div><div class="line">search()</div><div class="line">split()</div><div class="line">findall()</div><div class="line">finditer()</div><div class="line">sub()</div><div class="line">subn()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；&lt;/p&gt;
&lt;h4 id=&quot;匹配使用函数&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="re" scheme="https://ttxsgoto.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Tmux日常</title>
    <link href="https://ttxsgoto.github.io/2017/03/29/tmux/"/>
    <id>https://ttxsgoto.github.io/2017/03/29/tmux/</id>
    <published>2017-03-29T13:06:09.000Z</published>
    <updated>2017-03-30T13:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Mac中</div><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class="line">brew install tmux</div><div class="line"># Ubuntu中</div><div class="line">apt-get install tmux</div></pre></td></tr></table></figure>
<p>Session可以包含多个Window, 每个Window又可以包含多个Pane</p>
<h4 id="Session操作"><a href="#Session操作" class="headerlink" title="Session操作"></a>Session操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tmux new -s xxx #新建session会话</div><div class="line">C-b : new -s abc # 在当前session中新建一个session，并保证之前session依然存在</div><div class="line">tmux a -t xxx #进入xxx会话</div><div class="line">C-b ? #列出所有快捷键，按q返回</div><div class="line">C-b d #当前会话，返回shell；tmux attach 重新进入之前的会话</div><div class="line">C-b s #选择并切换会话，在开启多个会话时使用</div></pre></td></tr></table></figure>
<h4 id="Window操作"><a href="#Window操作" class="headerlink" title="Window操作"></a>Window操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C-b c 创建一个新窗口</div><div class="line">C-b &amp; 关闭当前窗口</div><div class="line">C-b w 列出所有的窗口选择</div><div class="line">C-b 窗口号(例如窗口号为1的, 则C-b 1)</div><div class="line">C-b , 重命名当前窗口，便于识别各个窗口</div></pre></td></tr></table></figure>
<h4 id="Pane操作"><a href="#Pane操作" class="headerlink" title="Pane操作"></a>Pane操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C-b % 横向分Terminal</div><div class="line">C-b &quot; 纵向分Terminal</div><div class="line">C-b 方向键 在自由选择各面板</div><div class="line">C-b x 关闭当前pane</div><div class="line">C-b q 显示面板编号</div></pre></td></tr></table></figure>
<h4 id="配置文件-tmux-conf"><a href="#配置文件-tmux-conf" class="headerlink" title="配置文件(~/.tmux.conf)"></a>配置文件(~/.tmux.conf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">#设置前缀为Ctrl + a</div><div class="line">set -g prefix C-a</div><div class="line"> </div><div class="line">#解除Ctrl+b 与前缀的对应关系</div><div class="line">unbind C-b</div><div class="line"> </div><div class="line">#将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息</div><div class="line">bind r source-file ~/.tmux.conf \; display &quot;~/.tmux Reloaded!&quot;</div><div class="line"> </div><div class="line">#window 水平分割和纵向分割</div><div class="line">bind | split-window -h -c</div><div class="line">bind - split-window -v -c</div><div class="line"> </div><div class="line">#方向移动设置</div><div class="line">#up</div><div class="line">bind -n C-k select-pane -U</div><div class="line">#down</div><div class="line">bind -n C-j select-pane -D</div><div class="line">#left</div><div class="line">bind -n C-h select-pane -L</div><div class="line">#right</div><div class="line">bind -n C-l select-pane -R</div><div class="line"> </div><div class="line">#设置鼠标操作</div><div class="line">#set -g mouse on</div><div class="line"> </div><div class="line"># 设置终端类型为256色</div><div class="line">#set -g default-terminal &quot;screen-256color&quot;</div><div class="line"> </div><div class="line"># 设置窗口分割的边框颜色</div><div class="line">set -g pane-border-fg green</div><div class="line">set -g pane-border-bg black</div><div class="line"> </div><div class="line"># 设置当前窗口分割的边框颜色</div><div class="line">#set -g pane-active-border-fg white</div><div class="line">#set -g pane-active-border-bg yellow</div><div class="line"> </div><div class="line">set -g status-bg colour236</div><div class="line">set -g status-fg colour68</div><div class="line"> </div><div class="line">#copy-mode 将快捷键设置为vi 模式</div><div class="line">setw -g mode-keys vi</div><div class="line"> </div><div class="line"># 设置状态栏左部宽度  默认为10</div><div class="line">set -g status-left-length 35</div><div class="line"># 设置状态栏左部显示内容。</div><div class="line">set -g status-left &quot;#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]&quot;</div><div class="line"># 设置状态栏右部宽度</div><div class="line">set -g status-right-length 48</div><div class="line"># 设置状态栏右部内容，这里设置为时间信息</div><div class="line">set -g status-right &quot;#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep &apos;inet.*netmask.*broadcast&apos; | awk &apos;&#123;print $2&#125;&apos;)&quot;</div><div class="line"># 窗口信息居中显示</div><div class="line">set -g status-justify centre</div><div class="line"># 设置状态栏更新时间 每60秒更新一次，默认是15秒更新</div><div class="line">set -g status-interval 60</div></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf" target="_blank" rel="external">https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf</a><br><a href="https://github.com/wklken/k-tmux/blob/master/tmux.conf" target="_blank" rel="external">https://github.com/wklken/k-tmux/blob/master/tmux.conf</a><br><a href="https://my.oschina.net/am313/blog/865915" target="_blank" rel="external">https://my.oschina.net/am313/blog/865915</a><br><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="external">https://gist.github.com/ryerh/14b7c24dfd623ef8edc7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="tmux" scheme="https://ttxsgoto.github.io/tags/tmux/"/>
    
  </entry>
  
</feed>
