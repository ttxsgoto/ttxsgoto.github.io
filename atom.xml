<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2017-12-02T14:19:08.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrapy:Selectors</title>
    <link href="https://ttxsgoto.github.io/2017/12/02/Scrapy-selectors/"/>
    <id>https://ttxsgoto.github.io/2017/12/02/Scrapy-selectors/</id>
    <published>2017-12-02T14:09:31.000Z</published>
    <updated>2017-12-02T14:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用selectors"><a href="#使用selectors" class="headerlink" title="使用selectors"></a>使用selectors</h4><h5 id="构建-Selectors"><a href="#构建-Selectors" class="headerlink" title="构建 Selectors"></a>构建 Selectors</h5><p>通过向 Selector 类的构造函数传入 text 或者是 TextResponse 对象来构造 selectors 实例；它会根据传入的类型(input type)自动的去选择最佳的解析规则(XML vs HTML)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line"> </div><div class="line"><span class="comment"># 通过text来构建</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>body = <span class="string">'&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Selector(text=body).xpath(<span class="string">'//span/text()'</span>).extract()</div><div class="line">[<span class="string">u'good'</span>]</div><div class="line"> </div><div class="line"><span class="comment"># 通过response来构建</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response = HtmlResponse(url=<span class="string">'http://example.com'</span>, body=body)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Selector(response=response).xpath(<span class="string">'//span/text()'</span>).extract()</div><div class="line">[<span class="string">u'good'</span>]</div><div class="line"> </div><div class="line"><span class="comment"># 通过.selector来构建</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.selector.xpath(<span class="string">'//span/text()'</span>).extract()</div><div class="line">[<span class="string">u'good'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="使用selectors-1"><a href="#使用selectors-1" class="headerlink" title="使用selectors"></a>使用selectors</h5><p>通常通过response.xpath()和response.css()来处理返回的html，xpath通过/text()来返回文本或者属性，css通过::text来返回文本或者属性<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;base href=&apos;http://example.com/&apos; /&gt;</div><div class="line">  &lt;title&gt;Example website&lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;div id=&apos;images&apos;&gt;</div><div class="line">   &lt;a href=&apos;image1.html&apos;&gt;Name: My image 1 &lt;br /&gt;&lt;img src=&apos;image1_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image2.html&apos;&gt;Name: My image 2 &lt;br /&gt;&lt;img src=&apos;image2_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image3.html&apos;&gt;Name: My image 3 &lt;br /&gt;&lt;img src=&apos;image3_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image4.html&apos;&gt;Name: My image 4 &lt;br /&gt;&lt;img src=&apos;image4_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image5.html&apos;&gt;Name: My image 5 &lt;br /&gt;&lt;img src=&apos;image5_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">scrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html</div><div class="line"><span class="comment">#################################</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//title/text()'</span>)</div><div class="line">[&lt;Selector xpath=<span class="string">'//title/text()'</span> data=<span class="string">'Example website'</span>&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>)</div><div class="line">[&lt;Selector xpath=<span class="string">'descendant-or-self::title/text()'</span> data=<span class="string">'Example website'</span>&gt;]</div><div class="line"><span class="comment"># 上述结果中，返回的是一个 SelectorList 实例，该实例中包含了一组 selectors；通过调用 SelectorList 的相关接口我们可以获取到每一个 selector 元素的相关内容</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'img'</span>).xpath(<span class="string">'@src'</span>).extract()</div><div class="line">[<span class="string">'image1_thumb.jpg'</span>, <span class="string">'image2_thumb.jpg'</span>, <span class="string">'image3_thumb.jpg'</span>, <span class="string">'image4_thumb.jpg'</span>, <span class="string">'image5_thumb.jpg'</span>]</div><div class="line"><span class="comment"># 通过 extract() 方法便可以从 selector 中提取出所要的文本</span></div><div class="line"><span class="comment"># extract_first() 取第一个元素的值，如果没有返回None，也可以自定义,通过extract_first(default='not-found')</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//base/@href'</span>).extract()</div><div class="line">[<span class="string">u'http://example.com/'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'base::attr(href)'</span>).extract()</div><div class="line">[<span class="string">u'http://example.com/'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[contains(@href, "image")]/@href'</span>).extract()</div><div class="line">[<span class="string">u'image1.html'</span>,</div><div class="line"> <span class="string">u'image2.html'</span>,</div><div class="line"> <span class="string">u'image3.html'</span>,</div><div class="line"> <span class="string">u'image4.html'</span>,</div><div class="line"> <span class="string">u'image5.html'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href*=image]::attr(href)'</span>).extract()</div><div class="line">[<span class="string">u'image1.html'</span>,</div><div class="line"> <span class="string">u'image2.html'</span>,</div><div class="line"> <span class="string">u'image3.html'</span>,</div><div class="line"> <span class="string">u'image4.html'</span>,</div><div class="line"> <span class="string">u'image5.html'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[contains(@href, "image")]/img/@src'</span>).extract()</div><div class="line">[<span class="string">u'image1_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image2_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image3_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image4_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image5_thumb.jpg'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href*=image] img::attr(src)'</span>).extract()</div><div class="line">[<span class="string">u'image1_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image2_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image3_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image4_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image5_thumb.jpg'</span>]</div></pre></td></tr></table></figure>
</code></pre><h5 id="嵌套selectors"><a href="#嵌套selectors" class="headerlink" title="嵌套selectors"></a>嵌套selectors</h5><pre><code>通过.xpath()或者.css()方法返回的包含相同类型的selectos 的队列，仍然可以对返回的 selector 执行.xpath()和.css()方法
</code></pre><h5 id="XPath表达式中的参数"><a href="#XPath表达式中的参数" class="headerlink" title="XPath表达式中的参数"></a>XPath表达式中的参数</h5><pre><code>XPath 允许你引用 XPath 表达式中的参数，使用$somevariable
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># `$val` used in the expression, a `val` argument needs to be passed</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//div[@id=$val]/a/text()'</span>, val=<span class="string">'images'</span>).extract_first()</div><div class="line"><span class="string">u'Name: My image 1 '</span></div></pre></td></tr></table></figure>
</code></pre><h4 id="常用selectors"><a href="#常用selectors" class="headerlink" title="常用selectors"></a>常用selectors</h4><h5 id="xpath语法"><a href="#xpath语法" class="headerlink" title="xpath语法"></a>xpath语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- article   选取所有article元素的所有子节点</div><div class="line">- /article 选取根元素article</div><div class="line">- article/a 选取所有属于article的子元素的a元素</div><div class="line">- //div 选取所有div子元素</div><div class="line">- article//div 选取所有属于article元素的后代的div元素，不管它出现在article 之下的任何位置</div><div class="line">- //@lang  选取名为lang的所有属性</div><div class="line">- //@class=&apos;xxx&apos; 选取所有名为class的属性为xxx</div><div class="line">- /article/div[1] 选取属于article子元素的第一个div元素</div><div class="line">- /article/div[last()] 选取属性article子元素的最后一个div元素</div><div class="line">- /article/div[last()-1] 倒数第二个元素</div><div class="line">- /article/div[position()&lt;3]选取最前面的两个属于article 元素的子元素的div元素。</div><div class="line">- //div[@lang] 选取所有拥有lang属性的div元素</div><div class="line">- //div[@lang=&apos;eng&apos;] 选取所有lang属性为eng的div元素</div><div class="line">- /div/* 选取属于div元素的所有子节点</div><div class="line">- //* 选取所有元素</div><div class="line">- //div[@*] 选取所有带属性的title元素</div><div class="line">- /div/a | //div/p 选取所有div元素的a和p元素</div><div class="line">- //span | //ul 选取文档中的span和ul元素</div><div class="line">- article/div/p | //span 选取所有属于article元素的div元素的p元素 以及文档中所有的span元素</div></pre></td></tr></table></figure>
<h5 id="css语法"><a href="#css语法" class="headerlink" title="css语法"></a>css语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- `*` 所有选择器</div><div class="line">- #container 选择id=container的元素</div><div class="line">- .container 选取class=container的元素</div><div class="line">- p     选择所有p元素</div><div class="line">- div,p 选择所有div和所有p元素</div><div class="line">- li a 选取所有li下的所有a节点</div><div class="line">- ul + p 选择u后面的第一个p元素</div><div class="line">- div#container &gt; ul 选取id为container的div的第一个ul子元素</div><div class="line">- [target] 选择带有 target 属性所有元素</div><div class="line">- [target=_blank] 选择 target=&quot;_blank&quot; 的所有元素</div><div class="line">- [title~=flower]   选择 title 属性包含单词 &quot;flower&quot; 的所有元素</div><div class="line">- [lang|=en]    选择 lang 属性值以 &quot;en&quot; 开头的所有元素</div><div class="line">- ul ~ p 选取与ul相邻的所有p元素</div><div class="line">- a[title] 选取所有有title属性的a元素</div><div class="line">- a[href=&quot;http://xxx.com&quot;] 选取所有href属性为xxx.com值的a元素</div><div class="line">- a[href*=&quot;xxx&quot;] 选取所有href属性包含xxx的a元素</div><div class="line">- a[href^=&quot;http&quot;] 选取所有href属性值以http开头的a元素</div><div class="line">- a[href$=&quot;.jpg&quot;] 选取所有href属性值以.jpg结尾的a元素</div><div class="line">- input[type=radio]:checked 选择选中的radio的元素</div><div class="line">- div:not(#container) 选取所有id非container的div属性</div><div class="line">- li:nth-child(3) 选取第三个li元素</div><div class="line">- tr:nth-child(2n) 第偶数个tr</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;使用selectors&quot;&gt;&lt;a href=&quot;#使用selectors&quot; class=&quot;headerlink&quot; title=&quot;使用selectors&quot;&gt;&lt;/a&gt;使用selectors&lt;/h4&gt;&lt;h5 id=&quot;构建-Selectors&quot;&gt;&lt;a href=&quot;#构建-Se
    
    </summary>
    
      <category term="Selectors" scheme="https://ttxsgoto.github.io/categories/Selectors/"/>
    
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy:Itemloaders</title>
    <link href="https://ttxsgoto.github.io/2017/12/02/Scrapy-itemloaders/"/>
    <id>https://ttxsgoto.github.io/2017/12/02/Scrapy-itemloaders/</id>
    <published>2017-12-02T14:01:14.000Z</published>
    <updated>2017-12-02T14:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Item-Loaders"><a href="#Item-Loaders" class="headerlink" title="Item Loaders"></a>Item Loaders</h3><p>Item Loaders 被设计用来提供一个既弹性又高效简便的构件， 以扩展或重写爬虫或源格式(HTML, XML之类的)等区域的解析规则</p>
<h3 id="使用item-loader填充item"><a href="#使用item-loader填充item" class="headerlink" title="使用item loader填充item"></a>使用item loader填充item</h3><ul>
<li>add_xpath  # 通过xpath选取数据</li>
<li>add_css    # 通过css选取数据</li>
<li>add_value  # 通过value得到数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">item = ItemLoader(item=Movietop250Item(), response=response)</div><div class="line"> </div><div class="line">item.add_css(<span class="string">'num'</span>, <span class="string">"node.css('em::text')"</span>)</div><div class="line">item.add_css(<span class="string">'movie_detail_url'</span>, <span class="string">'.hd a::attr(href)'</span>)</div><div class="line">item.add_css(<span class="string">'img_url'</span>, <span class="string">'a img::attr(src)'</span>)</div><div class="line">item.add_css(<span class="string">'name'</span>, <span class="string">'a img::attr(src)'</span>)</div><div class="line">item.add_css(<span class="string">'grade'</span>, <span class="string">'.rating_num::text'</span>)</div><div class="line">item.add_css(<span class="string">'comment'</span>, <span class="string">'.star span::text'</span>)</div><div class="line">item.add_css(<span class="string">'info'</span>, <span class="string">'.inq::text'</span>)</div><div class="line"></div><div class="line">load_item = item.load_item()    <span class="comment"># load_item() 方法,返回通过调用 add_xpath(), add_css(), and add_value() 所提取和收集到的数据的Item.</span></div><div class="line"><span class="keyword">yield</span> load_item</div></pre></td></tr></table></figure>
<h3 id="输入-输出处理器"><a href="#输入-输出处理器" class="headerlink" title="输入/输出处理器"></a>输入/输出处理器</h3><ul>
<li>Item Loader每个字段中都包含一个输入处理器和一个输出处理器</li>
<li>输入处理器收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内(但未分配给该Item)</li>
<li>收集所有的数据后, 调用 ItemLoader.load_item()得到Item 对象。在这步中先调用输出处理器来处理之前收集到的数据，然后再存入Item中。输出处理器的结果是被分配到Item的最终值</li>
</ul>
<h3 id="Items-Loaders"><a href="#Items-Loaders" class="headerlink" title="Items Loaders"></a>Items Loaders</h3><p>Item Loaders 的声明类似于Items，以class的语法来声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</div><div class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst, MapCompose, Join</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductLoader</span><span class="params">(ItemLoader)</span>:</span></div><div class="line">    default_output_processor = TakeFirst()</div><div class="line">    name_in = MapCompose(unicode.title)</div><div class="line">    name_out = Join()</div><div class="line">    price_in = MapCompose(unicode.strip)</div><div class="line"> </div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p>
<p>input processors 以_in为后缀来声明，output processors 以_out 为后缀来声明。也可以用ItemLoader.default_input_processor 和ItemLoader.default_output_processor 属性来声明默认的 input/output processors</p>
<h3 id="Input-and-Output-Processors"><a href="#Input-and-Output-Processors" class="headerlink" title="Input and Output Processors"></a>Input and Output Processors</h3><p>在定义Item的时候声明输入输出处理器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Join, MapCompose, TakeFirst</div><div class="line"><span class="keyword">from</span> w3lib.html <span class="keyword">import</span> remove_tags</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_price</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="string">"""定义方法来处理值"""</span></div><div class="line">    <span class="keyword">if</span> value.isdigit():</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    name = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_tags),</div><div class="line">        output_processor=Join(),</div><div class="line">    )</div><div class="line">    price = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_tags, filter_price),</div><div class="line">        output_processor=TakeFirst(),</div><div class="line">    )</div></pre></td></tr></table></figure></p>
<p>input and output processors方式的优先级排序如下:</p>
<ul>
<li>在Item Loader 中声明的 field-specific 属性: field_in and field_out (most precedence)</li>
<li>Item中的字段元数据(input_processor and output_processor key)</li>
<li>Item Loader 默认处理器: ItemLoader.default_input_processor() and ItemLoader.default_output_processor() (least precedence)</li>
</ul>
<h3 id="内置的处理器"><a href="#内置的处理器" class="headerlink" title="内置的处理器"></a>内置的处理器</h3><ul>
<li><p>Identity 最简单的处理器，不进行任何处理，直接返回原来的数据,无参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Identity</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Identity()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>TakeFirst 返回第一个非空(non-null/non-empty)值，常用于单值字段的输出处理器,无参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = TakeFirst()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">''</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line"><span class="string">'one'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Join(separator=u’ ‘)返回用分隔符连接后的值,分隔符默认为空格 ,默认为空类似于u’’.join</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Join</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Join()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line"><span class="string">u'one two three'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Join(<span class="string">'&lt;br&gt;'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line"><span class="string">u'one&lt;br&gt;two&lt;br&gt;three'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Compose(<em>functions, *</em>default_loader_context)给定多个函数组合构造处理器,每个输入值被传递到第一个函数，然后其输出再传递到第二个函数，直到最后一个函数返回整个处理器的输出<br>默认情况下，当遇到None值的时候停止处理。可以通过传递参数stop_on_none=False改变这种行为,每个函数可以选择接收一个loader_context参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Compose</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Compose(<span class="keyword">lambda</span> v: v[<span class="number">0</span>], str.upper)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'hello'</span>, <span class="string">'world'</span>])</div><div class="line"><span class="string">'HELLO'</span></div></pre></td></tr></table></figure>
</li>
<li><p>MapCompose(<em>functions, *</em>default_loader_context)</p>
</li>
</ul>
<p>与Compose处理器类似，区别在于各个函数结果在内部传递的方式</p>
<pre><code>输入值是被迭代的处理的，每一个元素被单独传入第一个函数进行处理。处理的结果被|连接起来(concatenate)形成一个新的迭代器，并被传入第二个函数，以此类推，直到最后一个函数。最后一个函数的输出被连接起来形成处理器的输出。
每个函数能返回一个值或者一个值列表，也能返回None(会被下一个函数所忽略)
这个处理器提供了方便的方式来组合多个处理单值的函数。因此它常用与输入处理器，因为用extract()函数提取出来的值是一个unicode strings列表。
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">filter_world</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">None</span> <span class="keyword">if</span> x == <span class="string">'world'</span> <span class="keyword">else</span> x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> MapCompose</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = MapCompose(filter_world, unicode.upper)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">u'hello'</span>, <span class="string">u'world'</span>, <span class="string">u'this'</span>, <span class="string">u'is'</span>, <span class="string">u'scrapy'</span>])</div><div class="line">[<span class="string">u'HELLO, u'</span>THIS<span class="string">', u'</span>IS<span class="string">', u'</span>SCRAPY<span class="string">']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-Loaders&quot;&gt;&lt;a href=&quot;#Item-Loaders&quot; class=&quot;headerlink&quot; title=&quot;Item Loaders&quot;&gt;&lt;/a&gt;Item Loaders&lt;/h3&gt;&lt;p&gt;Item Loaders 被设计用来提供一个既弹性又高效简便
    
    </summary>
    
      <category term="Itemloaders" scheme="https://ttxsgoto.github.io/categories/Itemloaders/"/>
    
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>django Channels</title>
    <link href="https://ttxsgoto.github.io/2017/11/26/django-Channels/"/>
    <id>https://ttxsgoto.github.io/2017/11/26/django-Channels/</id>
    <published>2017-11-26T14:20:43.000Z</published>
    <updated>2017-12-02T14:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel，可实现该功能</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>Channels基本上就是任务队列：消息被生产者推到通道，然后传递给监听通道的消费者</p>
<h4 id="Channels工作层："><a href="#Channels工作层：" class="headerlink" title="Channels工作层："></a>Channels工作层：</h4><ol>
<li>接口服务器，Django和用户（浏览器）之间通信的桥梁，包括一个实现WSGI协议的适配器和一个独立的websocket服务器</li>
<li>通道后端， 在接口服务器和worker之间传递消息，由插拔式的python代码和存储组成，存储可以是内存、数据库或者redis，推荐使用redis，兼具其余两者的优点</li>
<li>worker，监听所有channel，当有新消息到来时候唤醒功能函数</li>
</ol>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li><p>安装Channels</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install -U channels</div><div class="line"> </div><div class="line"><span class="comment"># settings.py</span></div><div class="line"> <span class="string">'channels'</span>,</div></pre></td></tr></table></figure>
</li>
<li><p>选择一个通道层(redis)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">pip install -U asgi_redis</div><div class="line"> </div><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># Channel settings</span></div><div class="line">CHANNEL_LAYERS = &#123;</div><div class="line">    <span class="string">"default"</span>: &#123;</div><div class="line">        <span class="string">"BACKEND"</span>: <span class="string">"asgi_redis.RedisChannelLayer"</span>,</div><div class="line">        <span class="string">"CONFIG"</span>: &#123;</div><div class="line">            <span class="string">"hosts"</span>: [os.environ.get(<span class="string">'REDIS_URL'</span>, <span class="string">'redis://redis@127.0.0.1:6379'</span>)],</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"ROUTING"</span>: <span class="string">"proj.routing.channel_routing"</span>,</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>routing.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">channel_routing = &#123;</div><div class="line">    <span class="comment"># Wire up websocket channels to our consumers:</span></div><div class="line">    <span class="string">'websocket.connect'</span>: consumers.ws_connect,</div><div class="line">    <span class="string">'websocket.receive'</span>: consumers.ws_receive,</div><div class="line">    <span class="string">'websocket.disconnect'</span>: consumers.ws_disconnect,</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment"># - 'websocket.connect': consumers.ws_connect  第一次通过WebSocket连接上时，一条消息被发送到 websocket.connect 通道</span></div><div class="line"><span class="comment"># - 'websocket.receive': consumers.ws_receive 每条客户端通过已建立的socket发送的消息都被发送到 websocket.receive通道</span></div><div class="line"><span class="comment"># - 'websocket.disconnect': consumers.ws_disconnect 当客户端断开连接时，一条消息被发送到websocket.disconnect通道</span></div></pre></td></tr></table></figure>
</li>
<li><p>consumers.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> Group</div><div class="line"><span class="keyword">from</span> channels.sessions <span class="keyword">import</span> channel_session</div><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line"><span class="meta">@channel_session</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_connect</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    创建message</div><div class="line">    """</div><div class="line">    group = <span class="string">'test'</span></div><div class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">    Group(group, channel_layer=message.channel_layer).add(message.reply_channel)</div><div class="line">    message.channel_session[<span class="string">'group'</span>] = group    <span class="comment"># 通过session保存组信息</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@channel_session</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_receive</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    发送message</div><div class="line">    """</div><div class="line">    group = message.channel_session[<span class="string">'group'</span>]</div><div class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">    data = json.loads(message[<span class="string">'text'</span>])</div><div class="line">    Group(group, channel_layer=message.channel_layer).send(&#123;<span class="string">'text'</span>: json.dumps(data.as_dict())&#125;)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@channel_session</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_disconnect</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    关闭message</div><div class="line">    """</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        group = message.channel_session.get(<span class="string">'group'</span>)</div><div class="line">        message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">        Group(group, channel_layer=message.channel_layer).discard(message.reply_channel)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> channels.asgi</div><div class="line"> </div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"proj.settings"</span>)</div><div class="line">channel_layer = channels.asgi.get_channel_layer()</div><div class="line"> </div><div class="line"><span class="comment"># 测试环境中运行</span></div><div class="line">python manage.py runserver</div><div class="line"><span class="comment"># 前台接口服务daphne</span></div><div class="line">daphne chat.asgi:channel_layer -p <span class="number">8888</span> -b <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -v2 --access-log=/var/log/asgi.log</div><div class="line"><span class="comment"># 后台消息消费者</span></div><div class="line">python manage.py runworker</div></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># asgi.sh</span></div><div class="line"><span class="keyword">exec</span> daphne asgi:channel_layer \</div><div class="line">    -b <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> \</div><div class="line">    -p <span class="number">8004</span> -v2 \</div><div class="line">    --access-log=/var/logs/asgi.log</div><div class="line"><span class="comment"># worker.sh</span></div><div class="line"><span class="keyword">exec</span> python manage.py runworker</div><div class="line"><span class="comment"># 通过supervisord来启动两个服务</span></div><div class="line">   </div><div class="line"><span class="comment"># nginx配置支持ws， 这里指定特定url规则来处理ws其他的url不使用ws</span></div><div class="line">location ~ ^/channel/ &#123;</div><div class="line">        client_max_body_size <span class="number">10</span>M;</div><div class="line">        proxy_pass         http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8004</span>;</div><div class="line">        proxy_set_header   Host $host:<span class="number">80</span>;</div><div class="line">        proxy_set_header   X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line"> </div><div class="line">        <span class="comment"># 支持ws配置如下</span></div><div class="line">        proxy_http_version <span class="number">1.1</span>;</div><div class="line">        proxy_set_header Upgrade $http_upgrade;</div><div class="line">        proxy_set_header Connection <span class="string">"upgrade"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>7.其他<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># In consumers.py</span></div><div class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> Channel, Group</div><div class="line"><span class="keyword">from</span> channels.sessions <span class="keyword">import</span> channel_session</div><div class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> channel_session_user, channel_session_user_from_http</div><div class="line"> </div><div class="line"><span class="comment"># Connected to websocket.connect</span></div><div class="line"><span class="meta">@channel_session_user_from_http	# 添加用户信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_add</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="comment"># Accept connection</span></div><div class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">    <span class="comment"># Add them to the right group</span></div><div class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).add(message.reply_channel)</div><div class="line"> </div><div class="line"><span class="comment"># Connected to websocket.receive</span></div><div class="line"><span class="meta">@channel_session_user </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_message</span><span class="params">(message)</span>:</span></div><div class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).send(&#123;</div><div class="line">        <span class="string">"text"</span>: message[<span class="string">'text'</span>],</div><div class="line">    &#125;)</div><div class="line"> </div><div class="line"><span class="comment"># Connected to websocket.disconnect</span></div><div class="line"><span class="meta">@channel_session_user</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_disconnect</span><span class="params">(message)</span>:</span></div><div class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).discard(message.reply_channel)</div></pre></td></tr></table></figure></p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="https://channels.readthedocs.io/en/latest/getting-started.html" target="_blank" rel="external">https://channels.readthedocs.io/en/latest/getting-started.html</a></li>
<li><a href="https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django" target="_blank" rel="external">https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django</a></li>
<li><a href="https://github.com/jacobian/channels-example" target="_blank" rel="external">https://github.com/jacobian/channels-example</a></li>
<li><a href="https://github.com/heshiyou/livelog" target="_blank" rel="external">https://github.com/heshiyou/livelog</a></li>
<li><a href="http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/" target="_blank" rel="external">http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel
    
    </summary>
    
      <category term="Channels" scheme="https://ttxsgoto.github.io/categories/Channels/"/>
    
    
      <category term="Django" scheme="https://ttxsgoto.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>django 日志系统</title>
    <link href="https://ttxsgoto.github.io/2017/11/13/django-logging/"/>
    <id>https://ttxsgoto.github.io/2017/11/13/django-logging/</id>
    <published>2017-11-13T14:41:28.000Z</published>
    <updated>2017-11-13T14:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="logging组成"><a href="#logging组成" class="headerlink" title="logging组成"></a>logging组成</h4><ul>
<li><p>记录器(Logger)</p>
<p>  logger决定消息需要处理，即将传递该消息给一个Handler</p>
</li>
<li><p>处理程序(Handler)</p>
<p>  handler决定如何处理logger中的每条信息，表示详细的日志行为，如写入文件或者屏幕显示等</p>
<p>  handler中也有日志级别，如果消息的日志级别小于handler的级别，handler将忽略该消息</p>
</li>
<li><p>过滤器(Filters)</p>
<p>  用于对从logger传递给handler的日志记录进行额外的控制</p>
<p>  filters可以用于修改将要处理的日志记录的优先级</p>
<p>  filters可以安装在logger或者handler上，多个filter可以串联起来实现多层filter行为</p>
</li>
<li><p>格式化(Formatter)</p>
<p>  日志记录需要转换成文本</p>
</li>
</ul>
<h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><ul>
<li>DEBUG: 用于调试底层系统信息</li>
<li>INFO: 普通的系统信息</li>
<li>WARNING: 警告信息</li>
<li>ERROR： 错误信息</li>
<li>CRITICAL: 严重错误信息</li>
</ul>
<h4 id="使用logging"><a href="#使用logging" class="headerlink" title="使用logging"></a>使用logging</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"> </div><div class="line"><span class="comment"># 调用获取logger的实例</span></div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"><span class="comment"># 使用</span></div><div class="line">logger.error(<span class="string">'Something wrong!'</span>)</div><div class="line">logger.debug(<span class="string">'debug'</span>)</div><div class="line">logger.info(<span class="string">'info'</span>)</div><div class="line">logger.warning(<span class="string">'warning'</span>)</div><div class="line">logger.critical(<span class="string">'critical'</span>)</div><div class="line">logger.log(<span class="string">'log'</span>)   <span class="comment"># 打印消息时手动指定日志级别</span></div><div class="line">logger.exception() <span class="comment"># 创建一个error级别日志消息</span></div></pre></td></tr></table></figure>
<h4 id="实例-settings-py"><a href="#实例-settings-py" class="headerlink" title="实例(settings.py)"></a>实例(settings.py)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">LOGGING = &#123;</div><div class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,   <span class="comment"># 默认配置中的所有logger 都将禁用</span></div><div class="line">    <span class="string">'formatters'</span>: &#123;</div><div class="line">       <span class="string">'standard'</span>: &#123;</div><div class="line">            <span class="string">'format'</span>: <span class="string">'%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'</span>&#125;,  <span class="comment">#日志格式</span></div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">    <span class="comment"># 'filters': &#123;</span></div><div class="line">    <span class="comment">#     'require_debug_false': &#123;</span></div><div class="line">    <span class="comment">#         '()': 'django.utils.log.RequireDebugFalse',</span></div><div class="line">    <span class="comment">#     &#125;,</span></div><div class="line">    <span class="comment"># &#125;,</span></div><div class="line">    <span class="string">'handlers'</span>: &#123;</div><div class="line">        <span class="string">'default'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'class'</span>:<span class="string">'logging.handlers.RotatingFileHandler'</span>,</div><div class="line">            <span class="string">'filename'</span>: <span class="string">"../logs/server.log"</span>,   <span class="comment"># 日志输出文件</span></div><div class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,                                    <span class="comment"># 文件大小</span></div><div class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,                                           <span class="comment"># 备份份数</span></div><div class="line">            <span class="string">'formatter'</span>:<span class="string">'standard'</span>,                                     <span class="comment">#使用哪种formatters日志格式</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'error'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>:<span class="string">'ERROR'</span>,</div><div class="line">            <span class="string">'class'</span>:<span class="string">'logging.handlers.RotatingFileHandler'</span>,</div><div class="line">            <span class="string">'filename'</span>: <span class="string">"../logs/server.log"</span>,</div><div class="line">            <span class="string">'maxBytes'</span>:<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,</div><div class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,</div><div class="line">            <span class="string">'formatter'</span>:<span class="string">'standard'</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'console'</span>:&#123;</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</div><div class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span></div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'loggers'</span>: &#123;</div><div class="line">        <span class="string">'django'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">True</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'django.request'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'default'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">False</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'django.db.backends'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>,],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">False</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'ttxs'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'default'</span>, <span class="string">'error'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;logging组成&quot;&gt;&lt;a href=&quot;#logging组成&quot; class=&quot;headerlink&quot; title=&quot;logging组成&quot;&gt;&lt;/a&gt;logging组成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;记录器(Logger)&lt;/p&gt;
&lt;p&gt;  logger决定消息需要
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="logging" scheme="https://ttxsgoto.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>Signals信号</title>
    <link href="https://ttxsgoto.github.io/2017/09/27/django-signals/"/>
    <id>https://ttxsgoto.github.io/2017/09/27/django-signals/</id>
    <published>2017-09-27T14:41:10.000Z</published>
    <updated>2017-09-27T04:51:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Django 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组receiver某些操作已经发生;这在多处代码和同一事件有关联的情况下很有用</p>
<h3 id="预定义信号"><a href="#预定义信号" class="headerlink" title="预定义信号"></a>预定义信号</h3><ul>
<li><p>在模型 save()方法调用之前或之后发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.db.models.signals.pre_save </div><div class="line">django.db.models.signals.post_save</div></pre></td></tr></table></figure>
</li>
<li><p>在模型delete()方法或查询集的delete() 方法调用之前或之后发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.db.models.signals.pre_delete</div><div class="line">django.db.models.signals.post_delete</div></pre></td></tr></table></figure>
</li>
<li><p>模型上的 ManyToManyField 修改时发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django.db.models.signals.m2m_changed</div></pre></td></tr></table></figure>
</li>
<li><p>Django建立或关闭HTTP 请求时发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.core.signals.request_started</div><div class="line">django.core.signals.request_finished</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义和发送信号"><a href="#定义和发送信号" class="headerlink" title="定义和发送信号"></a>定义和发送信号</h3><h4 id="定义信号"><a href="#定义信号" class="headerlink" title="定义信号"></a>定义信号</h4><p>所有信号都是 django.dispatch.Signal 的实例。providing_args是一个列表，由信号将提供给监听者的参数名称组成。理论上是这样，但是实际上并没有任何检查来保证向监听者提供了这些参数。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">from</span> django.dispatch <span class="keyword">import</span> Signal</div><div class="line"> s_email_sended = Signal(providing_args=[</div><div class="line">    <span class="string">'email_tpl'</span>, <span class="string">'email_subject'</span>, <span class="string">'email_content'</span>, <span class="string">'email_cate'</span>, <span class="string">'sender'</span>, <span class="string">'position'</span>,</div><div class="line">    <span class="string">'candidate'</span>, <span class="string">'candidate_email'</span>, <span class="string">'interviewer'</span>, <span class="string">'interview_email'</span></div><div class="line">])</div><div class="line"> </div><div class="line"><span class="comment"># s_email_sended实例信号，向接受者提供了列表中的参数，最终接受者得到的参数还是需要看send()发送过来的参数</span></div></pre></td></tr></table></figure></p>
<h4 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h4><p> Django中有两种方法用于发送信号:</p>
<ul>
<li>Signal.send(sender, **kwargs)</li>
<li>Signal.send_robust(sender, **kwargs)</li>
</ul>
<p>send()  不会捕获任何由receiver 产生的异常。它会简单地让错误往上传递。所以在错误产生的情况，不是所有receiver 都会获得通知.</p>
<p>send_robust()捕获所有继承自Python Exception类的异常，并且确保所有receiver 都能得到信号的通知。如果发生错误，错误实例会在产生错误的receiver 的二元组中返回.</p>
<p>调用 Signal.send()或者Signal.send_robust()来发送信号。你必须提供sender 参数（大多数情况下它是一个类），并且可以提供尽可能多的关键字参数。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s_email_sended.send(</div><div class="line">           sender=staff,</div><div class="line">           candidate=review.resume_forward.candidate,</div><div class="line">           candidate_email=review.resume_forward.candidate.email,</div><div class="line">           email_subject=subject,</div><div class="line">           email_content=message,</div><div class="line">           email_cate=FlowEmailSendedLog.EMAIL_CATE_INTERVIEWER</div><div class="line">       )</div></pre></td></tr></table></figure></p>
<h4 id="Receiver-函数"><a href="#Receiver-函数" class="headerlink" title="Receiver 函数"></a>Receiver 函数</h4><p>我们需要定义接收器函数，回调函数。接受器可以是Python函数或者方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_callback</span><span class="params">(sender, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">"Request finished!"</span>)</div><div class="line"><span class="comment"># 注意函数接受一个sender参数，以及通配符关键字参数(**kwargs)；所有信号处理器都必须接受这些参数</span></div></pre></td></tr></table></figure></p>
<h4 id="绑定receivers到signal"><a href="#绑定receivers到signal" class="headerlink" title="绑定receivers到signal"></a>绑定receivers到signal</h4><p>1.使用receiver() 装饰器来自动连接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.signals <span class="keyword">import</span> request_finished</div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</div><div class="line"> </div><div class="line"><span class="meta">@receiver(request_finished)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_callback</span><span class="params">(sender, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">"Request finished!"</span>)</div><div class="line"><span class="comment"># 现在，我们的my_callback函数会在每次请求结束时调用</span></div></pre></td></tr></table></figure></p>
<p>2.手动方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.signals <span class="keyword">import</span> request_finished</div><div class="line">request_finished.connect(my_callback)</div></pre></td></tr></table></figure></p>
<h4 id="断开信号"><a href="#断开信号" class="headerlink" title="断开信号"></a>断开信号</h4><p>  Signal.disconnect([receiver=None, sender=None, weak=True, dispatch_uid=None])</p>
<p>  调用Signal.disconnect()来断开信号的接收器。 Signal.connect()中描述了所有参数。如果接收器成功断开，返回 True ，否则返回False。</p>
<p>receiver 参数表示要断开的已注册receiver。如果使用dispatch_uid 标识receiver，它可以为None</p>
<h3 id="自定义signal"><a href="#自定义signal" class="headerlink" title="自定义signal"></a>自定义signal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义信号，定义的信号应该在信号发送过来的字段</span></div><div class="line">s_email_sended = Signal(providing_args=[</div><div class="line">    <span class="string">'email_tpl'</span>, <span class="string">'email_subject'</span>, <span class="string">'email_content'</span>, <span class="string">'email_cate'</span>, <span class="string">'sender'</span>, <span class="string">'position'</span>,</div><div class="line">    <span class="string">'candidate'</span>, <span class="string">'candidate_email'</span>, <span class="string">'interviewer'</span>, <span class="string">'interview_email'</span></div><div class="line">])</div><div class="line"> </div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> Signal</div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</div><div class="line"> </div><div class="line"><span class="comment"># 发送信号</span></div><div class="line">s_email_sended.send(</div><div class="line">            sender=staff,</div><div class="line">            candidate=candidate,</div><div class="line">            candidate_email=candidate.email,</div><div class="line">            email_subject=subject,</div><div class="line">            email_content=message,</div><div class="line">            email_cate=EmailSendedLog.EMAIL_CATE_TYPE</div><div class="line">        )</div><div class="line"> </div><div class="line"><span class="comment"># 接收信号</span></div><div class="line"><span class="meta">@receiver(s_email_sended)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_email_send_log</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> (<span class="string">'sender'</span>, <span class="string">'email_subject'</span>, <span class="string">'email_content'</span>, <span class="string">'email_cate'</span>):</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kwargs.get(field):</div><div class="line">            logs.error(<span class="string">"&#123;&#125; can't be null: email_sender/email_subject/email_content/email_cate"</span>.format(field))</div><div class="line">            <span class="keyword">return</span></div><div class="line"> </div><div class="line">    kwargs.pop(<span class="string">'signal'</span>)</div><div class="line">    EmailSendedLog.objects.create(**kwargs)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;Django 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组rec
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="signals" scheme="https://ttxsgoto.github.io/tags/signals/"/>
    
  </entry>
  
  <entry>
    <title>Angularjs学习:$apply和$watch方法</title>
    <link href="https://ttxsgoto.github.io/2017/09/16/angular-apply-watch/"/>
    <id>https://ttxsgoto.github.io/2017/09/16/angular-apply-watch/</id>
    <published>2017-09-16T12:36:13.000Z</published>
    <updated>2017-09-24T15:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="apply说明"><a href="#apply说明" class="headerlink" title="$apply说明"></a>$apply说明</h4><p>手动触发脏检查，当我们更改一个不在AngularJS执行上下文中的数据模型(model)，需要人为的调用$apply()来提醒AngularJS数据发生变化</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"firstController"</span>&gt;</span></div><div class="line">    &#123;&#123;date&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$scope.date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)    </span>&#123;</div><div class="line">                $scope.date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">                <span class="comment">// 触发脏检查</span></div><div class="line">            &#125;)</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="digest说明"><a href="#digest说明" class="headerlink" title="digest说明"></a>digest说明</h4><p>当调用ng开头的指令或者服务，在这种情况下，AngularJS就会自动调用$digest()触发$digest循环。当$digest循环开始的时候，他就会启动每一个监听器(watcher)。这些监听器(watcher)会去检查当前的数据模型(model)中的值是否与最后一次计算的值相同，如果不相同，那么，对应的监听函数就会被执行</p>
<h4 id="watch说明"><a href="#watch说明" class="headerlink" title="$watch说明"></a>$watch说明</h4><ul>
<li>在digest执行时，如果watch观察到value和上次执行时值不一样时，就会被触发</li>
<li>angularjs内部的watch实现了页面随model的及时更新</li>
<li><p>$watch(watchFn, watchAction, deepWatch)</p>
<ul>
<li>watchFn 表达式或函数的字符串</li>
<li>watchAction(newvalue,oldvalue,scope) watchFn发生变化时被调用</li>
<li>deepWatch 可选布尔值命令检查被监控的对象的每个属性是否发生变化</li>
</ul>
</li>
<li><p>$watch会返回一个函数，想要注销这个watch可以使用函数</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">""</span>&gt;</span></div><div class="line"> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"firstController"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">            改变次数:&#123;&#123;count&#125;&#125;-&#123;&#123;name&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angularjs.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">   </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> firstController = <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line"> </div><div class="line">    $scope.name = <span class="string">'ttxsgoto'</span>;</div><div class="line">    $scope.data = &#123;</div><div class="line">        <span class="attr">name</span> :<span class="string">'ttxs'</span>,</div><div class="line">        <span class="attr">count</span>:<span class="number">20</span></div><div class="line">    &#125;</div><div class="line">    $scope.count = <span class="number">0</span>;</div><div class="line">  </div><div class="line">    <span class="comment">// 监听一个model 当一个model每次改变时 都会触发第2个函数</span></div><div class="line">    $scope.$watch(<span class="string">'name'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</div><div class="line">  </div><div class="line">        ++$scope.count;</div><div class="line">  </div><div class="line">        <span class="keyword">if</span>($scope.count &gt; <span class="number">30</span>)&#123;</div><div class="line">            $scope.name = <span class="string">'已经大于30次了'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">  </div><div class="line">    $scope.$watch(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">    &#125;,<span class="literal">true</span>)</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;apply说明&quot;&gt;&lt;a href=&quot;#apply说明&quot; class=&quot;headerlink&quot; title=&quot;$apply说明&quot;&gt;&lt;/a&gt;$apply说明&lt;/h4&gt;&lt;p&gt;手动触发脏检查，当我们更改一个不在AngularJS执行上下文中的数据模型(model)，需要人
    
    </summary>
    
      <category term="Angularjs" scheme="https://ttxsgoto.github.io/categories/Angularjs/"/>
    
    
      <category term="apply、watch" scheme="https://ttxsgoto.github.io/tags/apply%E3%80%81watch/"/>
    
  </entry>
  
  <entry>
    <title>Angularjs学习:$modal模态框</title>
    <link href="https://ttxsgoto.github.io/2017/09/02/angular-modal/"/>
    <id>https://ttxsgoto.github.io/2017/09/02/angular-modal/</id>
    <published>2017-09-02T06:23:07.000Z</published>
    <updated>2017-09-18T12:23:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录angular模态框的使用</p>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"Modaldemo"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ModalDemoCtrl"</span> <span class="attr">class</span>=<span class="string">"modal-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"myModalContent.html"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span>  //头部</div><div class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"modal-title"</span>&gt;</span>I'm a modal!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span> <span class="attr">id</span>=<span class="string">"modal-body"</span>&gt;</span>    //中部</div><div class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"$event.preventDefault(); selected.item = item"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            Selected: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; selected.item &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span>  //底部</div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"ok()"</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"cancel()"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"stackedModal.html"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"modal-title-&#123;&#123;name&#125;&#125;"</span>&gt;</span>The &#123;&#123;name&#125;&#125; modal!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span> <span class="attr">id</span>=<span class="string">"modal-body-&#123;&#123;name&#125;&#125;"</span>&gt;</span></div><div class="line">            Having multiple modals open at once is probably bad UX but it's technically possible.</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"open()"</span>&gt;</span>Open me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"open('lg')"</span>&gt;</span>Large modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"open('sm')"</span>&gt;</span>Small modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"btn btn-default"</span></div><div class="line">            <span class="attr">ng-click</span>=<span class="string">"open('sm', '.modal-parent')"</span>&gt;</div><div class="line">        Modal appended to a custom parent</div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"toggleAnimation()"</span>&gt;</span>Toggle Animation (&#123;&#123; animationsEnabled &#125;&#125;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"openMultipleModals()"</span>&gt;</span></div><div class="line">        Open multiple modals at once</div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"selected"</span>&gt;</span>Selection from a modal: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">myApp = angular.module(<span class="string">'Modaldemo'</span>, [<span class="string">'ui.bootstrap'</span>]);</div><div class="line">myApp.controller(<span class="string">'ModalDemoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$uibModal'</span>,<span class="string">'$log'</span>,<span class="string">'$document'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $uibModal, $log, $document</span>) </span>&#123;</div><div class="line">    $scope.items = [<span class="string">'item1'</span>, <span class="string">'item2'</span>, <span class="string">'item3'</span>];</div><div class="line">    $scope.animationsEnabled = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">    $scope.open = <span class="function"><span class="keyword">function</span> (<span class="params">size, parentSelector</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> modalInstance = $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,    <span class="comment">//打开时的动画开关</span></div><div class="line">            ariaLabelledBy: <span class="string">'modal-title'</span>,</div><div class="line">            <span class="attr">ariaDescribedBy</span>: <span class="string">'modal-body'</span>,</div><div class="line">            <span class="attr">backdrop</span>: <span class="literal">true</span>,                          <span class="comment">//控制弹框背景是否为暗影，默认为true</span></div><div class="line">            templateUrl: <span class="string">'myModalContent.html'</span>,     <span class="comment">//模态框的页面内容</span></div><div class="line">            <span class="comment">// template: '&lt;div&gt;abc&lt;/div&gt;',          //用于显示html标签</span></div><div class="line">            keyboard: <span class="literal">true</span>,                         <span class="comment">//当按下Esc时，模态对话框是否关闭，默认为ture</span></div><div class="line">            controller: <span class="string">'ModalInstanceCtrl'</span>,        <span class="comment">//模态框的控制器,是用来控制模态框</span></div><div class="line">            <span class="comment">// controllerAs: 'ModalDemoCtrl',</span></div><div class="line">            size: size,                             <span class="comment">//模态框的大小尺寸</span></div><div class="line">            appendTo: angular.element(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]),</div><div class="line">            <span class="attr">resolve</span>: &#123;                              <span class="comment">//定义一个成员并将他传递给$modal指定的控制器,将主控制器中的参数传到模态框控制器中</span></div><div class="line">                items: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                <span class="comment">//items回调函数</span></div><div class="line">                    <span class="keyword">return</span> $scope.items;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line">        modalInstance.result.then(<span class="function"><span class="keyword">function</span> (<span class="params">selectedItem</span>) </span>&#123; <span class="comment">//接收模态框返回值的函数,确认处理函数</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'selectedItem--&gt;'</span>,selectedItem);    <span class="comment">//模态框的返回值</span></div><div class="line">            $scope.selected = selectedItem;</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                                    <span class="comment">//取消处理函数</span></div><div class="line">            $log.info(<span class="string">'Modal dismissed at: '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.openComponentModal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> modalInstance = $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,</div><div class="line">            <span class="attr">component</span>: <span class="string">'modalComponent'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">items</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> $scope.items;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        modalInstance.result.then(<span class="function"><span class="keyword">function</span> (<span class="params">selectedItem</span>) </span>&#123;</div><div class="line">            $scope.selected = selectedItem;</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $log.info(<span class="string">'modal-component dismissed at: '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.openMultipleModals = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,</div><div class="line">            <span class="attr">ariaLabelledBy</span>: <span class="string">'modal-title-bottom'</span>,</div><div class="line">            <span class="attr">ariaDescribedBy</span>: <span class="string">'modal-body-bottom'</span>,</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'stackedModal.html'</span>,</div><div class="line">            <span class="attr">size</span>: <span class="string">'sm'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">                $scope.name = <span class="string">'bottom'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line">        $uibModal.open(&#123;</div><div class="line">            <span class="attr">animation</span>: $scope.animationsEnabled,</div><div class="line">            <span class="attr">ariaLabelledBy</span>: <span class="string">'modal-title-top'</span>,</div><div class="line">            <span class="attr">ariaDescribedBy</span>: <span class="string">'modal-body-top'</span>,</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'stackedModal.html'</span>,</div><div class="line">            <span class="attr">size</span>: <span class="string">'sm'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">                $scope.name = <span class="string">'top'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.toggleAnimation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $scope.animationsEnabled = !$scope.animationsEnabled;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line"> </div><div class="line"><span class="comment">// modal controller</span></div><div class="line">myApp.controller(<span class="string">'ModalInstanceCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$uibModalInstance'</span>,<span class="string">'items'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $uibModalInstance, items</span>) </span>&#123;</div><div class="line">    $scope.items = items;</div><div class="line">    $scope.selected = &#123;</div><div class="line">        <span class="attr">item</span>: $scope.items[<span class="number">0</span>]</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.ok = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ok functon'</span>);</div><div class="line">        $uibModalInstance.close($scope.selected.item);  <span class="comment">//关闭模态窗口并传递一个结果</span></div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $scope.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'cancel functon'</span>);</div><div class="line">        $uibModalInstance.dismiss(<span class="string">'cancel'</span>);    <span class="comment">//撤销模态关闭方法并传递一个原因</span></div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录angular模态框的使用&lt;/p&gt;
&lt;h4 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="Angularjs" scheme="https://ttxsgoto.github.io/categories/Angularjs/"/>
    
    
      <category term="modal" scheme="https://ttxsgoto.github.io/tags/modal/"/>
    
  </entry>
  
  <entry>
    <title>Angularjs学习:自定义指令</title>
    <link href="https://ttxsgoto.github.io/2017/08/22/angular-directive/"/>
    <id>https://ttxsgoto.github.io/2017/08/22/angular-directive/</id>
    <published>2017-08-22T11:56:41.000Z</published>
    <updated>2017-09-24T15:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建自定义指令"><a href="#创建自定义指令" class="headerlink" title="创建自定义指令"></a>创建自定义指令</h4><ul>
<li>定义指令<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.directive(<span class="string">'unorderedList'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">        <span class="comment">// scope:指令被应用到的视图的作用域</span></div><div class="line">        <span class="comment">// element:指令被应用到的html元素</span></div><div class="line">        <span class="comment">// attrs:html元素的属性</span></div><div class="line">        <span class="keyword">var</span> data = scope[attrs[<span class="string">"unorderedList"</span>]];</div><div class="line">        <span class="keyword">var</span> name = attrs[<span class="string">'Name'</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自定义指令属性"><a href="#自定义指令属性" class="headerlink" title="自定义指令属性"></a>自定义指令属性</h4><h5 id="restrict"><a href="#restrict" class="headerlink" title="restrict"></a>restrict</h5><p>可选参数，标识符在模板中作为元素，属性，类，注释或组合，默认为A</p>
<pre><code>- E 元素名使用  &lt;my-directive&gt;123&lt;/my-directive&gt;
- A 属性使用 &lt;div my-directive&gt; 
- C 类名使用 &lt;div class=&quot;my-directive&quot;&gt;&lt;/div&gt;
- M 注释使用 &lt;!-- directive: my-directive --&gt; 
</code></pre><h5 id="template"><a href="#template" class="headerlink" title="template"></a>template</h5><p>指令内容表示为html</p>
<pre><code>- 模板内容html文本，这个内容会根据replace参数的设置替换节点或只替换节点内容
- 一个函数，可以接受两个参数tElement和tAttrs
    - tElement：是指使用此指令的元素
    - tAttrs：实例的属性
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hello-world</span> <span class="attr">title</span> = <span class="string">'这是一个directive'</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></div><div class="line"> </div><div class="line">app.directive("helloWorld",function()&#123;  </div><div class="line">        return&#123;  </div><div class="line">         restrict:'EAC',  </div><div class="line">         template: function(tElement,tAttrs)&#123;  </div><div class="line">            var _html = '';  </div><div class="line">            _html += '<span class="tag">&lt;<span class="name">div</span>&gt;</span>' +'hello '+tAttrs.title+'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>';  </div><div class="line">            return _html;  </div><div class="line">         &#125;  </div><div class="line">     &#125;;  </div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h5 id="templateUrl"><a href="#templateUrl" class="headerlink" title="templateUrl"></a>templateUrl</h5><p>外部模板文件</p>
<pre><code>- 加载模板所要使用的URL
- 可以加载当前模板内对应的text/ng-template script id
- 大体同template
</code></pre><h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><p>指定模板内容是否替换掉指令所应用的元素</p>
<pre><code>- 如果配置为true则替换指令所在元素,但是class和属性还是会，如果为false或者不指定，则把当前指令追加到所在元素内部
- 对于restrict为元素E 在最终效果中是多余的，所有replace通常设置为true
- 当replace属性为true的时候,template的最外层必须用一整个标签包裹起来
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--js--&gt;</span></div><div class="line">angular.module('myApp',[])</div><div class="line">    .directive("myDirective",function () &#123;</div><div class="line">        return&#123;</div><div class="line">            restrict: "EACM",</div><div class="line">            template: "<span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello ttxs<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>",</div><div class="line">            replace: true</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="comment">&lt;!--html--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">my-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">my-directive</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">my-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-directive"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- directive: my-directive --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h5><p>指令编译的三个阶段</p>
<pre><code>1. 标准浏览器API转化-将html转化成dom，即自定义的html标签需要符合html格式
2. angular compile - 搜索匹配directive，按照priority排序，并执行directive上的compile方法
3. angular link 执行directive上的link方法，进行scope绑定及事件绑定
</code></pre><ul>
<li>compile函数用来对模板自身进行转换，仅在编译阶段运行一次</li>
<li>compile中直接返回的函数时postLink,表示link参数需要执行的函数，也可以返回一个对象里面包括preLink和postLink</li>
<li>当定义了compile参数，将忽略link参数，因为compile里返回的就是该指令需要执行的link函数</li>
<li>想在dom渲染前对它进行操作，并不需要scope参数所在所有相同directive里共享某些方法，这时应该定义compile，性能比较好</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"firstController"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--1.将div转化为dom结构--&gt;</span></div><div class="line">        <span class="comment">&lt;!--2. 默认的优先级为0，哪个先定义先使用--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"user in users"</span> <span class="attr">custom-directive</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;div custom-directive&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angularjs.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!--js--&gt;</span></div><div class="line">var myApp = angular.module('myApp', [])</div><div class="line">    .directive("customDirective", function () &#123;</div><div class="line">        return&#123;</div><div class="line">            restrict: 'ECAM',</div><div class="line">            template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;user.name&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</div><div class="line">            replace:true ,</div><div class="line">            compile: function (tElement,tAttrs,transclude) &#123;</div><div class="line">                console.info('编译阶段...,用于修改dom元素或结构');</div><div class="line">                tElement.append(angular.element("<span class="tag">&lt;<span class="name">span</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">span</span>&gt;</span>"))</div><div class="line">                console.info(tElement); // 元素</div><div class="line">                console.info(tAttrs);   // 元素属性</div><div class="line">                console.info(transclude);   // transclude对象</div><div class="line">                return&#123;</div><div class="line">                    // 编译阶段之后，指令连接到子元素之前运行</div><div class="line">                    pre: function preLink(scope,iElement,iAttrs,controller) &#123;</div><div class="line">                        console.log('preLink......')</div><div class="line"> </div><div class="line">                    &#125;,</div><div class="line">                    // 表示所有子元素指令都连接之后才运行</div><div class="line">                    post: function postLink(scope,iElement,iAttrs,controller) &#123;</div><div class="line">                        iElement.on('click', function () &#123;</div><div class="line">                            scope.$apply(function () &#123;</div><div class="line">                                scope.user.name = 'click --&gt; abd';  // 进行一次脏检查</div><div class="line">                            &#125;)</div><div class="line">                        &#125;);</div><div class="line">                        console.log('postLink......')</div><div class="line">                    &#125;</div><div class="line"> </div><div class="line">                &#125;;  // 这里return 的就是link函数</div><div class="line"> </div><div class="line">                // postLink</div><div class="line">                // return function () &#123;</div><div class="line">                //     console.info('compile function');</div><div class="line">                // &#125;</div><div class="line"> </div><div class="line">            &#125;,</div><div class="line"> </div><div class="line">            // 该link函数表示的就是postlink</div><div class="line">            link:function () &#123;</div><div class="line">                console.info('Link.....')</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"> </div><div class="line">    .controller('firstController', ['$scope', function ($scope) &#123;</div><div class="line">        $scope.users = [</div><div class="line">            &#123;</div><div class="line">                id:10,</div><div class="line">                name:'ttxsgoto01'</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                id:20,</div><div class="line">                name:'ttxsgoto02'</div><div class="line">            &#125;</div><div class="line">        ];</div><div class="line">    &#125;]);</div></pre></td></tr></table></figure>
<h5 id="link"><a href="#link" class="headerlink" title="link"></a>link</h5><p>指令需要处理大量DOM操作时，使用link方法；当只返回一个链接函数时，所创建的指令只能被当作一个属性来使用</p>
<pre><code>- 对特定的元素注册事件
- 需要用到scope参数来实现dom元素行为
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, ctrl, linker</span>)</span>&#123;</div><div class="line">    <span class="comment">// scope: 指令所在作用域</span></div><div class="line">    <span class="comment">// element: 指令元素</span></div><div class="line">    <span class="comment">// attrs: 指令元素的属性的集合</span></div><div class="line">    <span class="comment">// ctrl: 需要和require属性一起使用，用于调用其他指令的方法,指令之间的互相通信</span></div><div class="line">    <span class="comment">// linker: transclude()函数</span></div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="require"><a href="#require" class="headerlink" title="require"></a>require</h5><p>字符串或者数组</p>
<pre><code>- 字符串代表另一个指令的名字，作为link函数的第四个参数
- 对应前缀查找控制器的行为

    - 没有前缀，指令会在自身提供的控制器中进行查找，如果找不到任何控制器，则会抛出一个error
    - ？如果在当前的指令没有找到所需的控制器，则会将null传给link连接函数的第四个参数
    - ^如果在当前的指令没有找到所需的控制器，则会查找父元素的控制器
    - ?^组合
</code></pre><h5 id="priority"><a href="#priority" class="headerlink" title="priority"></a>priority</h5><p>指令的优先级，可选参数，若在单个DOM元素上有多个指令，则优先级高的先执行</p>
<h5 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h5><p>bool型，可选参数，true/false ，若设置为true，则优先级低于此指令的其他指令则无效，不会被调用优先级相同任然会执行</p>
<h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h5><p>bool值或者对象，可选参数，默认为false，表示继承父级作用域</p>
<ul>
<li>如果值为true，表示继承父作用域，并创建自己的作用域(子作用域),即使同一个控制器里数据也不共享</li>
<li><p>如果为对象，{}则表示创建一个全新的隔离作用域,不能使用父级对应的属性<br> 通过绑定策略来访问父作用域的属性:</p>
<ul>
<li>通过属性值进行绑定，可读取控制器中定义的属性值，使用@来进行单向文本（字符串）绑定，单项读取父级元素不能改变，这里引用的父级的属性只能是字符串，不能为对象，左右两边都是属性   <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">isolated-directive</span> <span class="attr">other-name</span>=<span class="string">"&#123;&#123; name &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class="line"> </div><div class="line">angular.module('myApp')</div><div class="line">    .directive("isolatedDirective", function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                name: '@otherName'</div><div class="line">                &#125;,</div><div class="line">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class="line">            &#125;;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>使用’=’创建在指令的独立作用域和外部作用域中的双向绑定对象<pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">isolated-directive</span> <span class="attr">other-name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class="line">angular.module('myApp')</div><div class="line">    .directive("isolatedDirective", function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                name: '=otherName'</div><div class="line">                &#125;,</div><div class="line">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class="line">            &#125;;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ul>
<p>注意：这里@和= 在使用上的区别，一是功能的不同，二是调用方式不同，@使用other-name=,=使用other-name=”name”</p>
<ul>
<li>使用’&amp;’调用父作用域中属性包装成一个函数或者父作用域的函数，从而以函数的方式读写父作用域的属性;允许传入一个可被指令内部调用的函数<pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">isolated-directive</span> <span class="attr">action</span>=<span class="string">"click()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line">angular.module('myApp')</div><div class="line">    .controller("myController", function ($scope) &#123;</div><div class="line">        $scope.value = "hello world";</div><div class="line">        $scope.click = function () &#123;</div><div class="line">                $scope.value = Math.random();</div><div class="line">            &#125;;</div><div class="line">        &#125;)</div><div class="line">    .directive("isolatedDirective", function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                action: "&amp;"</div><div class="line">                &#125;,</div><div class="line">            template: '<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"data"</span> <span class="attr">ng-click</span>=<span class="string">"action()"</span>/&gt;</span>'</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line"><span class="comment">&lt;!-- 被传入到指令action属性的click()函数在控制器中定义, 当ng-click实际触发控制器中定义的action()函数 --&gt;</span></div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">当为false时候，儿子继承父亲的值，改变父亲的值，儿子的值也随之变化，反之亦如此。（继承不隔离）</div><div class="line">当为true时候，儿子继承父亲的值，改变父亲的值，儿子的值随之变化，但是改变儿子的值，父亲的值不变。（继承隔离）</div><div class="line">当为&#123;&#125;时候，没有继承父亲的值，所以儿子的值为空，改变任何一方的值均不能影响另一方的值。（不继承隔离）</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Directive Scopes<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"scopeTemplate"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"data.name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>City: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"city"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Country: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"country"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        angular.module(<span class="string">"exampleApp"</span>, [])</div><div class="line">            .directive(<span class="string">"scopeDemo"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">template</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="keyword">return</span> angular.element(</div><div class="line">                            <span class="built_in">document</span>.querySelector(<span class="string">"#scopeTemplate"</span>)).html();</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">scope</span>: <span class="literal">true</span>,    <span class="comment">//同一个控制器里数据也不共享</span></div><div class="line">                    scope: &#123;</div><div class="line">                        <span class="attr">local</span>: <span class="string">"@nameprop"</span>  <span class="comment">//单项绑定，说明：属性local的值来自一个nameprop特性的单项绑定获得</span></div><div class="line">                        local: <span class="string">"=nameprop"</span> <span class="comment">//双向绑定</span></div><div class="line">                        cityFn: <span class="string">"&amp;city"</span> <span class="comment">//&amp;符号说明指定特性的值绑定到一个函数，左边为一个函数调用，右边为一个属性</span></div><div class="line">                    &#125; <span class="comment">//隔离作用域</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        .controller(<span class="string">"scopeCtrl"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">            $scope.data = &#123; <span class="attr">name</span>: <span class="string">"Adam"</span> &#125;;</div><div class="line">            $scope.city = <span class="string">"London"</span>;</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="transclude"><a href="#transclude" class="headerlink" title="transclude"></a>transclude</h5><p>布尔值或者字符element，默认值为false，<br>    true:提取包含在指令那个元素里面的内容，再将它放置在指令模板的特定位置。当我们开启transclude之后，我们就可以使用ng-transclude来指明应该在什么地方放置transclude的内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># html</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ttxsgoto<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"transclude.html"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            abc:&#123;&#123;title&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">            def:<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"title"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"4"</span> <span class="attr">ng-model</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">transclude-directive</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line"># js</div><div class="line">.directive("transcludeDirective", function () &#123;</div><div class="line">        return&#123;</div><div class="line">            restrict: "EACM",</div><div class="line">            templateUrl: "transclude.html",</div><div class="line">            replace: true,</div><div class="line">            transclude: true</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><p>可以为字符串或者函数，可以直接在指令内部定义为匿名函数，同样可以注入任何服务</p>
<ul>
<li>如果为字符串，则将字符串当做是控制器的名字，来查找注册在应用中的控制器的构造函数</li>
<li>直接在指令内部定义匿名函数</li>
</ul>
<h5 id="controllerAs"><a href="#controllerAs" class="headerlink" title="controllerAs"></a>controllerAs</h5><p>不用将属性和方法挂载到$scope上，而是this上；设置控制器别名</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;创建自定义指令&quot;&gt;&lt;a href=&quot;#创建自定义指令&quot; class=&quot;headerlink&quot; title=&quot;创建自定义指令&quot;&gt;&lt;/a&gt;创建自定义指令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义指令&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="Angularjs" scheme="https://ttxsgoto.github.io/categories/Angularjs/"/>
    
    
      <category term="directive" scheme="https://ttxsgoto.github.io/tags/directive/"/>
    
  </entry>
  
  <entry>
    <title>Angularjs学习:常用服务</title>
    <link href="https://ttxsgoto.github.io/2017/08/20/angular-servers/"/>
    <id>https://ttxsgoto.github.io/2017/08/20/angular-servers/</id>
    <published>2017-08-20T12:22:02.000Z</published>
    <updated>2017-09-18T12:23:23.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Constant</li>
<li>Value</li>
<li>Factory</li>
<li>Service</li>
<li>Run</li>
<li>Provider</li>
<li>Decorator</li>
</ul>
<p>应用里大部分的业务逻辑和持久化数据都应该放在service里<br>service可以用来永久保存应用的数据，并且这些数据可以在不同的controller之间使用</p>
<h4 id="Constant"><a href="#Constant" class="headerlink" title="Constant"></a>Constant</h4><ul>
<li>定义常量，从注册后就不会在改变</li>
<li>constant创建服务返回一个json对象,这个对象里可以有参数,可以有方法,一般constant创建的服务不会去修改它的内容</li>
<li>可以在注入到任何方法中调用</li>
<li>constant服务不能通过decorator进行装饰<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">  .constant(<span class="string">'getData'</span>,&#123;</div><div class="line">        <span class="attr">url</span>:<span class="string">'http://localhost:5500/products'</span>,</div><div class="line">        <span class="attr">name</span>:<span class="string">'ttxs'</span>,</div><div class="line">        <span class="attr">age</span>:<span class="number">28</span>,</div><div class="line">        <span class="attr">getId</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h4><ul>
<li>value创建服务返回一个json对象,这个对象里可以有参数,可以有方法,如果属性和方法需要被修改内容,就用value来创建服务</li>
<li>可以注入到controller，directive</li>
<li>value可以被装饰</li>
</ul>
<p>constant和value主要就是用于存放一些数据或方法以供使用,区别是constant一般是存放固定内容,value存放可能会被修改的内容</p>
<h4 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h4><ul>
<li>一个可注入的函数，调用factory时只是调用普通的function，所以factory可以返回任何东西，函数需要有返回值obj，而service可以不用返回</li>
<li>Factory 一般就是创建一个对象，然后在对这个对象添加方法与数据，最后将些对象返回即可</li>
<li>和constant,value的区别:factory服务是有一个处理过程,经过这个过程,才返回结果的</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">    .factory(<span class="string">'getData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> myname = <span class="string">'ttxs'</span>;</div><div class="line">        <span class="keyword">var</span> age = <span class="number">28</span>;</div><div class="line">        <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">name</span>: myname,</div><div class="line">            <span class="attr">age</span>: age,</div><div class="line">            <span class="attr">getId</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> id</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><ul>
<li>可注入的构造器，它用在controller中通信或者共享数据,适合使用在功能控制比较多的service里面</li>
<li>service里可以不返回东西，因为angularJS会调用new关键字来创建对象</li>
<li>seivce定义的服务不能在.config中使用！只有provider定义的才可以</li>
<li>这里的值都应该使用this定义</li>
<li>自定义服务return 返回值必须为对象,不能为字符串,数字等<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">app.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, myService</span>) </span>&#123;</div><div class="line">    $scope.getPrivate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(myService.getPrivate());</div><div class="line">    &#125;;</div><div class="line">    $scope.getPUbluc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(myService.variable);</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">app.controller(<span class="string">'myController2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, myService</span>) </span>&#123;</div><div class="line">	<span class="comment">// do something</span></div><div class="line">&#125;);</div><div class="line"> </div><div class="line">app.service(<span class="string">'myService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'myService'</span>);</div><div class="line">    <span class="keyword">var</span> privateValue = <span class="string">"I am Private"</span>;</div><div class="line">    <span class="keyword">this</span>.variable = <span class="string">"This is public"</span>;</div><div class="line">    <span class="keyword">this</span>.getPrivate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> privateValue;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h4><ul>
<li>在注入启动之后执行某些操作，而这些操作需要在页面对用户可用之前执行，使用run方法；即在config方法之后controller方法之前调用</li>
<li>使用场景：远程加载模板，需要在使用前加入缓存，或者在操作前判断用户是否登录，未登录需先跳转到登录页面</li>
</ul>
<h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><ul>
<li>$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务;服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务</li>
<li>provider必须有一个$get方法，是所有封装函数都是由provider封装的</li>
<li>provider是一个可配置的factory</li>
</ul>
<pre><code class="js"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[],<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>)</span>{

    <span class="comment">// 自定义服务</span>
    $provide.provider(<span class="string">'CustomService'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{

        <span class="keyword">this</span>.$get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
            <span class="keyword">return</span> {
                <span class="attr">message</span> : <span class="string">'CustomService Message'</span>
            }
        }
    });

    <span class="comment">// 自定义工厂,返回值为任意值</span>
    $provide.factory(<span class="string">'CustomFactory'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];
    });

    <span class="comment">// 自定义服务, 返回值必须为对象,不能为字符串,数字等</span>
    $provide.service(<span class="string">'CustomService2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">return</span> [<span class="string">'xxx'</span>];
        <span class="comment">// return 'abc';</span>
    })
</code></pre>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1) 服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,无论修改其中的哪一个,其它所有的服务都会被改变<br>2) constant服务不能通过decorator进行装饰<br>3) 固定的参数和方法,使用constant;可能被修改的参数和方法,使用value<br>4) 逻辑处理后得到的参数或方法,使用factory<br>5) Service 是用”new”关键字实例化的。因此，你应该给”this”添加属性，然后 service 返回”this”。你把 service 传进 controller 之后，在controller里 “this” 上的属性就可以通过 service 来使用<br>6) Providers 是唯一一种你可以传进 .config() 函数的 service。当你想要在 service 对象启用之前，先进行模块范围的配置，那就应该用 provider<br>7) Factory/service是第一个注入时才实例化，而provider不是，它是在config之前就已实例化</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Constant&lt;/li&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;li&gt;Factory&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;Run&lt;/li&gt;
&lt;li&gt;Provider&lt;/li&gt;
&lt;li&gt;Decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用里大部分的业务
    
    </summary>
    
      <category term="Angularjs" scheme="https://ttxsgoto.github.io/categories/Angularjs/"/>
    
    
      <category term="services" scheme="https://ttxsgoto.github.io/tags/services/"/>
    
  </entry>
  
  <entry>
    <title>Filters</title>
    <link href="https://ttxsgoto.github.io/2017/08/11/Filters/"/>
    <id>https://ttxsgoto.github.io/2017/08/11/Filters/</id>
    <published>2017-08-11T12:10:55.000Z</published>
    <updated>2017-08-10T12:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>DRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求</p>
<h4 id="全局filter"><a href="#全局filter" class="headerlink" title="全局filter"></a>全局filter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-filter</div></pre></td></tr></table></figure>
<p>在 settings 里指定应用到全局的 filter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;rest_framework.filters.DjangoFilterBackend&apos;,)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="filter定义字段"><a href="#filter定义字段" class="headerlink" title="filter定义字段"></a>filter定义字段</h4><p>filters.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django_filters <span class="keyword">import</span> FilterSet</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRecordFilter</span><span class="params">(FilterSet)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = UserRecord</div><div class="line">        fields = [<span class="string">'source'</span>, <span class="string">'source_id'</span>, <span class="string">'url'</span>,]</div><div class="line">        fields = &#123;</div><div class="line">        <span class="string">'from_channel'</span>:[<span class="string">'gt'</span>, <span class="string">'lt'</span>, <span class="string">'in'</span>, <span class="string">'exact'</span>, <span class="string">'range'</span>, <span class="string">'isnull'</span>, <span class="string">'icontains'</span>]</div><div class="line">            <span class="comment"># 大于, 小于，多个，等于, 范围, 是否为空bool,模糊查询</span></div><div class="line">        &#125;</div><div class="line">        exclude = [<span class="string">'from_channel'</span>, <span class="string">'created_time'</span>] <span class="comment"># 排除字段</span></div><div class="line">        together = [<span class="string">'from_channel'</span>, <span class="string">'resume_id'</span>] <span class="comment"># 字段并集，同时满足条件</span></div></pre></td></tr></table></figure></p>
<p>views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRecordViewSet</span><span class="params">(ModelViewSet)</span>:</span></div><div class="line">    serializer_class = UserRecordSerializer</div><div class="line">    queryset = UserRecord.objects.all()</div><div class="line">    filter_class = UserRecordFilter</div><div class="line">    filter_backends = (DjangoFilterBackend,)</div><div class="line"></div><div class="line"><span class="comment"># 请求url</span></div><div class="line"><span class="comment"># http://127.0.0.1:8888/api/v2/user_records?source_id=3&amp;url=url</span></div></pre></td></tr></table></figure></p>
<h4 id="viewset-的-filter"><a href="#viewset-的-filter" class="headerlink" title="viewset 的 filter"></a>viewset 的 filter</h4><p>为 viewset 分别指定 filter，方法就是在定义 viewset 的时候定义一个名为 filter_backend 的类变量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer = UserSerializer</div><div class="line">    filter_backends = (filters.DjangoFilterBackend,)</div></pre></td></tr></table></figure></p>
<h4 id="默认的-filter"><a href="#默认的-filter" class="headerlink" title="默认的 filter"></a>默认的 filter</h4><ul>
<li><p>SearchFilter</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter_backends = (filters.SearchFilter,)</div><div class="line">search_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)  <span class="comment"># 指定搜索的域</span></div><div class="line"> </div><div class="line"><span class="comment"># 请求url</span></div><div class="line"><span class="comment"># http://127.0.0.1:8888/api/v2/user_records?search=username</span></div></pre></td></tr></table></figure>
</li>
<li><p>OrderingFilter</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter_backends = (filters.OrderingFilter,)</div><div class="line">ordering_fields = (<span class="string">'created_time'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 请求url</span></div><div class="line"><span class="comment"># http://127.0.0.1:8888/api/v2/user_records?ordering=-created_time</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自定义-filter"><a href="#自定义-filter" class="headerlink" title="自定义 filter"></a>自定义 filter</h4><p>自定义filter，只需要定义 filter_queryset(self, request, queryset, view) 方法，并返回一个queryset即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodenameFilter</span><span class="params">(filters.BaseFilterBackend)</span>:</span></div><div class="line"></div><div class="line">    <span class="string">"""</span></div><div class="line">    根据 nodename 来筛选[nodename]</div><div class="line">    """</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, request, queryset, view)</span>:</span></div><div class="line">        nodename = request.QUERY_PARAMS.get(<span class="string">'nodename'</span>)</div><div class="line">        <span class="keyword">if</span> nodename:</div><div class="line">            <span class="keyword">return</span> queryset.filter(nodename=nodename)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> queryset</div></pre></td></tr></table></figure></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://django-filter.readthedocs.io/en/develop/index.html#" target="_blank" rel="external">https://django-filter.readthedocs.io/en/develop/index.html#</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求&lt;/p&gt;
&lt;h4 id=&quot;全局filter&quot;&gt;&lt;a href=&quot;#全局filter&quot; class=&quot;headerlink&quot; title=&quot;全局filter&quot;
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Filters" scheme="https://ttxsgoto.github.io/tags/Filters/"/>
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>Throtting</title>
    <link href="https://ttxsgoto.github.io/2017/08/10/Throtting/"/>
    <id>https://ttxsgoto.github.io/2017/08/10/Throtting/</id>
    <published>2017-08-10T11:56:37.000Z</published>
    <updated>2017-08-10T12:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django Rest framework 频率控制配置说明</p>
<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p>setting.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置节流方案</span></div><div class="line"><span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</div><div class="line">    <span class="comment"># 开启匿名用户接口请求频率限制</span></div><div class="line">    <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</div><div class="line">    <span class="comment"># 开启授权用户接口请求频率限制</span></div><div class="line">    <span class="string">'rest_framework.throttling.UserRateThrottle'</span>,</div><div class="line">    <span class="comment"># 开启自定义设置接口请求频率，在views中通过设置throttle_scope 来使用</span></div><div class="line">    <span class="string">'rest_framework.throttling.ScopedRateThrottle'</span>,</div><div class="line">    <span class="comment"># 自定义</span></div><div class="line">    <span class="string">'app.throttling.UserRecordThrottle'</span>,</div><div class="line">),</div><div class="line"><span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</div><div class="line">    <span class="comment"># 频率限制有second, minute, hour, day</span></div><div class="line">    <span class="comment"># 匿名用户请求频率</span></div><div class="line">    <span class="string">'anon'</span>: <span class="string">'1000/day'</span>,</div><div class="line">    <span class="comment"># 授权用户请求频率</span></div><div class="line">    <span class="string">'user'</span>: <span class="string">'20000/day'</span>,</div><div class="line">    <span class="comment"># 自定义请求频率,DEFAULT_THROTTLE_CLASSES中需要设置ScopedRateThrottle</span></div><div class="line">    <span class="string">'ttxs'</span>: <span class="string">'10/minute'</span>,</div><div class="line">    <span class="comment"># 自定义请求频率</span></div><div class="line">    <span class="string">'user_record'</span>: <span class="keyword">None</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>throttling.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle, AnonRateThrottle</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRecordThrottle</span><span class="params">(UserRateThrottle)</span>:</span></div><div class="line">    scope = <span class="string">'user_record'</span></div><div class="line">    rate = <span class="string">'5/minute'</span></div></pre></td></tr></table></figure></p>
<p>使用方式说明：</p>
<p>方式一: 在views.py中使用，设置为throttle_classes = ([UserRecordThrottle,])</p>
<p>方式二: 在setting.py中设置，</p>
<ul>
<li>在DEFAULT_THROTTLE_CLASSES添加’app.throttling.UserRecordThrottle’</li>
<li>DEFAULT_THROTTLE_RATES中添加user_record</li>
<li>在views.py中通过throttle_scope = ‘user_record’ 调用</li>
</ul>
<h4 id="类视图使用"><a href="#类视图使用" class="headerlink" title="类视图使用"></a>类视图使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></div><div class="line">    throttle_classes = ([UserRateThrottle,UserParserRecordThrottle])</div><div class="line">    throttle_scope = <span class="string">'ttxs'</span> <span class="comment"># 设置了ScopedRateThrottle对应的RATES</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Response(<span class="string">'ok'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 超过设置访问频率后，错误信息</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"msg"</span>: <span class="string">"request was throttled."</span>,</div><div class="line">  <span class="string">"code"</span>: <span class="number">10429</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><ol>
<li>匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准</li>
<li>频率限制是针对单个接口的频率，而不是所有接口的频率</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django Rest framework 频率控制配置说明&lt;/p&gt;
&lt;h4 id=&quot;全局设置&quot;&gt;&lt;a href=&quot;#全局设置&quot; class=&quot;headerlink&quot; title=&quot;全局设置&quot;&gt;&lt;/a&gt;全局设置&lt;/h4&gt;&lt;p&gt;setting.py&lt;br&gt;&lt;figure cl
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
      <category term="Throtting" scheme="https://ttxsgoto.github.io/tags/Throtting/"/>
    
  </entry>
  
  <entry>
    <title>iptables做端口映射</title>
    <link href="https://ttxsgoto.github.io/2017/07/21/iptables-forward/"/>
    <id>https://ttxsgoto.github.io/2017/07/21/iptables-forward/</id>
    <published>2017-07-21T12:49:34.000Z</published>
    <updated>2017-07-21T09:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以通过端口转发，通过访问B的端口来实际访问A的redis服务</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># B服务器 外网ip: 120.27.114.114   内网ip: 10.10.10.10 端口:6379  转发</span></div><div class="line"><span class="comment"># A服务器 内网ip: 10.10.10.12:6379</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'1'</span> &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">sysctl -p</div><div class="line">iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line">iptables -A FORWARD <span class="_">-d</span> 10.10.10.12 -p tcp --dport 6379 -j ACCEPT</div><div class="line">iptables -t nat -A PREROUTING <span class="_">-d</span> 120.27.114.114 -p tcp -m tcp --dport 6379 -j DNAT --to-destination 10.10.10.12:6379</div><div class="line">iptables -t nat -A POSTROUTING <span class="_">-d</span> 10.10.10.12 -p tcp -m tcp --dport 6379 -j SNAT --to-source 10.10.10.10</div><div class="line"></div><div class="line">iptables-save &gt; /etc/iptables/rules.v4       <span class="comment"># 保存</span></div><div class="line">iptables-restore &lt; /etc/iptables/rules.v4	<span class="comment"># 导入</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="端口转发" scheme="https://ttxsgoto.github.io/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>django forms表单</title>
    <link href="https://ttxsgoto.github.io/2017/07/15/django-forms/"/>
    <id>https://ttxsgoto.github.io/2017/07/15/django-forms/</id>
    <published>2017-07-15T13:17:58.000Z</published>
    <updated>2017-07-15T13:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="form表单验证顺序步骤："><a href="#form表单验证顺序步骤：" class="headerlink" title="form表单验证顺序步骤："></a>form表单验证顺序步骤：</h3><ol>
<li>to_python()将值转换为正确的pthon数据类型，如果不能转换，抛出ValidationError</li>
<li>字段的validate()方法处理字段特殊定义的验证</li>
<li>字段的run_validators() 方法运行字段的所有Validator，并将所有的错误信息聚合成一个单一的ValidationError</li>
<li>Field子类的clean() 方法，负责以正确的顺序运行to_python、validate 和 run_validators 并传播它们的错误。如果任何时刻、任何方法引发ValidationError，验证将停止并引发这个错误；这个方法返回验证后的数据，这个数据在后面将插入到表单的 cleaned_data 字典中</li>
<li>表单子类中的clean_<fieldname>() 方法，这个方法完成于特定属性相关的验证，自定义字段验证，数据在clean_data字典中，该方法返回从cleaned_data 中获取的值</fieldname></li>
<li>表单子类的clean() 方法，这个方法可以实现需要同时访问表单多个字段的验证</li>
</ol>
<p>对于表单中的每个字段（按它们在表单定义中出现的顺序），先运行Field.clean() ，然后运行clean_<fieldname>()。每个字段的这两个方法都执行完之后，最后运行Form.clean() 方法，无论前面的方法是否抛出过异常。</fieldname></p>
<h3 id="实例：表单字段的默认验证"><a href="#实例：表单字段的默认验证" class="headerlink" title="实例：表单字段的默认验证"></a>实例：表单字段的默认验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> validate_email</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiEmailField</span><span class="params">(forms.Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"Normalize data to a list of strings."</span></div><div class="line"> </div><div class="line">        <span class="comment"># Return an empty list if no input was given.</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value:</div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        <span class="keyword">return</span> value.split(<span class="string">','</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="string">"Check if value consists only of valid emails."</span></div><div class="line"> </div><div class="line">        <span class="comment"># Use the parent's handling of required fields, etc.</span></div><div class="line">        super(MultiEmailField, self).validate(value)</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> value:</div><div class="line">            validate_email(email)</div><div class="line"> </div><div class="line"><span class="comment">########### 创建form类 #########</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</div><div class="line">    message = forms.CharField()</div><div class="line">    sender = forms.EmailField()</div><div class="line">    recipients = MultiEmailField()</div><div class="line">    cc_myself = forms.BooleanField(required=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 当调用表单的is_valid()方法时，MultiEmailField.clean()方法将作为验证过程的一部分运行，即将调用to_python()和validate()方法</span></div></pre></td></tr></table></figure>
<h3 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h3><p>验证器是一个可调用的对象，它接受一个值，并在不符合一些规则时抛出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_begin</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value.startswith(<span class="string">u'ABC'</span>):</div><div class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'名称不是以ABC开头'</span>, code=<span class="string">'error_begin'</span>)</div><div class="line"> </div><div class="line"><span class="comment">### 调用</span></div><div class="line">other_field = forms.CharField(max_length=<span class="number">100</span>, validators=[validate_begin])</div></pre></td></tr></table></figure></p>
<h3 id="forms常用方法"><a href="#forms常用方法" class="headerlink" title="forms常用方法"></a>forms常用方法</h3><ul>
<li>f.is_bound 属性说明表单是否具有绑定的数据</li>
<li>f.is_valid() 验证提交的表单字段是否正确（is_valid() 返回True）</li>
<li>form.cleaned_data 字典存为验证后的表单数据</li>
<li>f.errors 获取错误信息的一个字典</li>
<li>f.errors.as_data() 返回字典，映射到原始的ValidationError实例</li>
<li>f.errors.as_json() 返回json序列化后的错误</li>
<li>f.has_changed() 检查表单的数据是否从初始数据发生改变</li>
<li>f.fields 从表单实例的fields属性中访问字段</li>
</ul>
<h3 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h3><p>根据表单绑定的数据创建并保存数据库对象</p>
<ul>
<li>instance 关键字接收一个已经存在的实例对象，如果有，则save()将更新这个实例，没有save()将创建一个新的实例</li>
<li>commit save() 关键字参数，其值为True 或False。如果save() 时commit=False，那么它将返回一个还没有保存到数据库的对象,操作后调用save方法保存</li>
<li>commit=False 时因不能立即生成实例，多对多数据时需要对froms实例调用save_m2m()方法对多对多数据进行保存，如：channel.save() ,_channel = ChannelForm(req.data).save_m2m()</li>
</ul>
<h3 id="ModelForm中Meta属性"><a href="#ModelForm中Meta属性" class="headerlink" title="ModelForm中Meta属性"></a>ModelForm中Meta属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelCustomForm</span><span class="params">(ModelForm)</span>:</span></div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = ChannelCustom</div><div class="line">        fields = [<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>]   <span class="comment"># 需要编辑的字段</span></div><div class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 所有字段</span></div><div class="line">        exclude = [<span class="string">'title'</span>] <span class="comment"># 排除某些字段</span></div><div class="line">        labels= <span class="keyword">None</span>        <span class="comment"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class="line">        help_texts = <span class="keyword">None</span>     <span class="comment"># 帮助提示信息</span></div><div class="line">        widgets = <span class="keyword">None</span>        <span class="comment"># 自定义插件</span></div><div class="line">        error_messages = <span class="keyword">None</span> <span class="comment"># 自定义错误信息</span></div><div class="line">        field_classes = <span class="keyword">None</span>  <span class="comment"># 自定义字段类（也可以自定义字段)</span></div><div class="line">        Localized_fields = (‘birth_date’,) <span class="comment"># 本地化，如：根据不同时区显示数据</span></div></pre></td></tr></table></figure>
<h3 id="实例-说明功能"><a href="#实例-说明功能" class="headerlink" title="实例(说明功能)"></a>实例(说明功能)</h3><ul>
<li><p>models.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelCustom</span><span class="params">(BaseModel)</span>:</span></div><div class="line"> </div><div class="line">    organ = models.ForeignKey(<span class="string">'organs.Organ'</span>, null=<span class="keyword">True</span>)</div><div class="line">    name = models.CharField(<span class="string">u'名称'</span>, max_length=<span class="number">40</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    logo = models.CharField(<span class="string">u'渠道logo'</span>, max_length=<span class="number">80</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    is_valid = models.BooleanField(<span class="string">u'有效'</span>, default=<span class="keyword">True</span>)</div><div class="line">    note = models.CharField(<span class="string">u'备注'</span>, max_length=<span class="number">512</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>forms.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> ModelForm, Textarea</div><div class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> fields <span class="keyword">as</span> MFfields</div><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</div><div class="line"><span class="comment"># from django.utils.translation import ugettext as _</span></div><div class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_begin</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value.startswith(<span class="string">u'ABC'</span>):</div><div class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'名称不是以ABC开头'</span>, code=<span class="string">'error_begin'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChannelCustomForm</span><span class="params">(ModelForm)</span>:</span></div><div class="line">    name = MFfields.CharField(max_length=<span class="number">100</span>)   <span class="comment"># 重新定义字段属性,可以为已有的字段,也可以是没有的字段</span></div><div class="line">    other_field = forms.CharField(max_length=<span class="number">100</span>, validators=[validate_begin])</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span>                        <span class="comment"># 通过继承来解决对应字段的属性</span></div><div class="line">        super(ChannelCustomForm, self).__init__(*args, **kwargs)</div><div class="line">        self.fields[<span class="string">'name'</span>].validators.append(validate_begin)   <span class="comment"># 添加验证方法</span></div><div class="line">        self.fields[<span class="string">'name'</span>].required = <span class="keyword">True</span>                     <span class="comment"># 添加对应字段的属性</span></div><div class="line">        self.fields[<span class="string">'note'</span>].required = <span class="keyword">True</span></div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = ChannelCustom</div><div class="line">        fields = [<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>, <span class="string">'other_field'</span>]</div><div class="line">        <span class="comment"># exclude = ['logo']</span></div><div class="line">        labels = &#123;          <span class="comment"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class="line">            <span class="string">"name"</span>: <span class="string">"渠道名称"</span>,</div><div class="line">            <span class="string">"logo"</span>: <span class="string">"渠道logo"</span>,</div><div class="line">            <span class="string">"is_valid"</span>: <span class="string">"是否有效"</span>,</div><div class="line">            <span class="string">"note"</span>: <span class="string">"备注"</span></div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        help_texts = &#123;      <span class="comment"># 帮助提示信息</span></div><div class="line">            <span class="string">"name"</span>: <span class="string">"请输入渠道名"</span>,</div><div class="line">            <span class="string">"note"</span>: <span class="string">"请输入备注"</span>,</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        error_messages = &#123;  <span class="comment"># 自定义错误描述</span></div><div class="line">            <span class="comment"># '__all__': &#123;</span></div><div class="line">            <span class="comment">#</span></div><div class="line">            <span class="comment"># &#125;,</span></div><div class="line">            <span class="string">'organ'</span>: &#123;</div><div class="line">                <span class="string">'max_length'</span>: (<span class="string">"企业字段不能为空."</span>),</div><div class="line">            &#125;,</div><div class="line">            <span class="string">'note'</span>: &#123;</div><div class="line">                <span class="string">'required'</span>: <span class="string">"note字段不能为空."</span>,  <span class="comment"># 这里的key是特定的字符</span></div><div class="line">                <span class="string">'invalid'</span>: <span class="string">'http格式错误'</span>,</div><div class="line">            &#125;,</div><div class="line">        &#125;</div><div class="line">        widgets = &#123;     <span class="comment"># 自定义 widget，添加对应字段的属性</span></div><div class="line">            <span class="string">'name'</span>: Textarea(attrs=&#123;<span class="string">'cols'</span>: <span class="number">80</span>, <span class="string">'rows'</span>: <span class="number">20</span>&#125;),</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        field_classes = &#123;       <span class="comment"># 字段类型设置，可以强制修改成其他类型</span></div><div class="line">            <span class="string">'note'</span>: MFfields.URLField</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        Localized_fields = (<span class="string">'is_valid'</span>, )    <span class="comment">#本地化，如：根据不同时区显示数据</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        定义字段检查方法</div><div class="line">        clean()和clean_&lt;field&gt;&amp;()的最后必须返回验证完毕或修改后的值</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        name = self.cleaned_data[<span class="string">'name'</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</div><div class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">'名称不能为空'</span>)</div><div class="line">        <span class="keyword">return</span> name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_logo</span><span class="params">(self)</span>:</span></div><div class="line">        logo = self.cleaned_data[<span class="string">'logo'</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> logo:</div><div class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">'logo不能为空'</span>)</div><div class="line">        <span class="keyword">return</span> logo</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        - 如果你需要覆盖clean() 方法并维持这个验证行为，你必须调用父类的clean()方法</div><div class="line">        - 在表单数据提交的时候,所有的数据都会经过clean()函数</div><div class="line">        - 用于验证字段间有关联的数据验证</div><div class="line">        """</div><div class="line">        cleaned_data = super(ChannelCustomForm, self).clean()</div><div class="line"> </div><div class="line">        <span class="keyword">print</span> cleaned_data</div><div class="line">        logo = cleaned_data.get(<span class="string">'logo'</span>, <span class="string">''</span>)</div><div class="line">        name = cleaned_data.get(<span class="string">'name'</span>, <span class="string">''</span>)</div><div class="line">        <span class="keyword">if</span> logo != name:</div><div class="line">            msg = <span class="string">u'两者不一致相等 %(name)s &lt;--&gt; %(logo)s'</span></div><div class="line">            error_instance = ValidationError(_(msg), code=<span class="string">'invalid'</span>, params=&#123;<span class="string">'name'</span>: name, <span class="string">'logo'</span>: logo&#125;)</div><div class="line">            self.add_error(<span class="string">'logo'</span>,error=error_instance)     <span class="comment"># 添加错误信息</span></div><div class="line">            self.non_field_errors()</div><div class="line">            <span class="comment"># self.errors['logo'] = self.error_class([msg])</span></div><div class="line">            <span class="comment"># raise forms.ValidationError(self.errors['logo'])</span></div><div class="line">            <span class="comment"># raise forms.ValidationError('两者不一致相等')</span></div><div class="line">        <span class="keyword">return</span> cleaned_data</div></pre></td></tr></table></figure>
</li>
<li><p>views.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> ChannelCustomForm</div><div class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> modelformset_factory, modelform_factory</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, req)</span>:</span></div><div class="line">    </div><div class="line">    organ = req.user.get_profile().organ</div><div class="line">    data = req.data</div><div class="line">    <span class="comment"># _channel = ChannelCustom.objects.get(pk=8)</span></div><div class="line">    <span class="comment"># form = ChannelCustomForm(data)#, instance=_channel)</span></div><div class="line">    <span class="comment"># modelform_factory() 来代替使用类定义来从模型直接创建表单,用于不在很多自定义的情况下</span></div><div class="line">    ChannelCustomFormfactory = modelform_factory(ChannelCustom,</div><div class="line">                                                  fields=(<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>)</div><div class="line">                                                )</div><div class="line"> </div><div class="line">    <span class="comment"># modelformset_factory() 模型表单集</span></div><div class="line">    ChannelCustomSet = modelformset_factory(ChannelCustom,</div><div class="line">                                            fields=(<span class="string">'name'</span>, <span class="string">'logo'</span>, <span class="string">'is_valid'</span>, <span class="string">'note'</span>)</div><div class="line">                                            )</div><div class="line"> </div><div class="line">    form = ChannelCustomForm(data)<span class="comment">#, instance=_channel)</span></div><div class="line">    <span class="comment"># form = ChannelCustomFormfactory(data=data)</span></div><div class="line">    <span class="comment"># form = ChannelCustomSet(data=data)</span></div><div class="line">    <span class="keyword">if</span> form.is_valid():</div><div class="line">        <span class="keyword">print</span> form.cleaned_data</div><div class="line">        <span class="keyword">print</span> form.errors</div><div class="line">        channel = form.save()</div><div class="line">        channel.organ= organ</div><div class="line">        channel.save()</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> resp.serialize_response(channel, results_name=<span class="string">'channel'</span>)</div><div class="line">    error =form.errors.as_json()</div><div class="line">    error_msg = json.loads(error)</div><div class="line">    <span class="keyword">return</span> resp.failed(error_msg)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html" target="_blank" rel="external">http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;form表单验证顺序步骤：&quot;&gt;&lt;a href=&quot;#form表单验证顺序步骤：&quot; class=&quot;headerlink&quot; title=&quot;form表单验证顺序步骤：&quot;&gt;&lt;/a&gt;form表单验证顺序步骤：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;to_python()将值转换为正确的p
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="forms" scheme="https://ttxsgoto.github.io/tags/forms/"/>
    
  </entry>
  
  <entry>
    <title>collections模块</title>
    <link href="https://ttxsgoto.github.io/2017/07/02/collections/"/>
    <id>https://ttxsgoto.github.io/2017/07/02/collections/</id>
    <published>2017-07-02T12:53:00.000Z</published>
    <updated>2017-07-02T13:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：</p>
<h4 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h4><p>功能:将名称映射到序列的元素上 namedtuple是不可变的;用于将元祖的位置访问转换为通过名称访问,使代码易读；<br>常用于将csv/sqlite3中得到的大型元祖列表,通过元素来访问数据,容易出错,这时将返回的元祖转换为命名元祖就很有必要<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"> </div><div class="line">EmployeeRecord = namedtuple(<span class="string">'EmployeeRecord'</span>, <span class="string">'name, age, title, department, paygrade'</span>)  <span class="comment"># typename: 元组名称 field_names: 元祖字段名称</span></div><div class="line"><span class="keyword">for</span> emp <span class="keyword">in</span> map(EmployeeRecord._make, csv.reader(open(<span class="string">"employees.csv"</span>, <span class="string">"rb"</span>))):</div><div class="line">    <span class="keyword">print</span> emp.name, emp.title</div><div class="line"> </div><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line">conn = sqlite3.connect(<span class="string">'/companydata'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(<span class="string">'SELECT name, age, title, department, paygrade FROM employees'</span>)</div><div class="line"><span class="keyword">for</span> emp <span class="keyword">in</span> map(EmployeeRecord._make, cursor.fetchall()):</div><div class="line">    <span class="keyword">print</span> emp.name, emp.title</div><div class="line"> </div><div class="line">dict_website=[(<span class="string">'a'</span>,<span class="string">'www.a.com'</span>,<span class="string">'aaa'</span>),(<span class="string">'b'</span>,<span class="string">'www.b.com'</span>,<span class="string">'bbb'</span>),(<span class="string">'c'</span>,<span class="string">'www.c.com'</span>,<span class="string">'ccc'</span>)]</div><div class="line">name_websit = namedtuple(<span class="string">'sites'</span>,[<span class="string">'name'</span>,<span class="string">'www'</span>,<span class="string">'finder'</span>])</div><div class="line"><span class="keyword">for</span> website <span class="keyword">in</span> dict_website:</div><div class="line">    <span class="keyword">print</span>  name_websit._make(website)</div><div class="line"> </div><div class="line">Subscriber = namedtuple(<span class="string">'Sub'</span>, <span class="string">'addr, joined, name'</span>)</div><div class="line">list_demo = (<span class="string">'cd'</span>, <span class="string">'2017-07-01'</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line"><span class="keyword">print</span> Subscriber._make(list_demo)</div><div class="line">ttxsgoto = Subscriber(<span class="string">'ttxs'</span>, <span class="string">'2017-07-01'</span>, <span class="string">'goto'</span>)</div><div class="line"><span class="keyword">print</span> ttxsgoto</div><div class="line"><span class="keyword">print</span> ttxsgoto.addr, ttxsgoto.joined, len(ttxsgoto)</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">"""</span></div><div class="line">sites(name='a', www='www.a.com', finder='aaa')</div><div class="line">sites(name='b', www='www.b.com', finder='bbb')</div><div class="line">sites(name='c', www='www.c.com', finder='ccc')</div><div class="line">Sub(addr='cd', joined='2017-07-01', name='ttxsgoto')</div><div class="line">Sub(addr='ttxs', joined='2017-07-01', name='goto')</div><div class="line">ttxs 2017-07-01 3</div><div class="line">"""</div></pre></td></tr></table></figure></p>
<h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><p>功能:统计序列中元素出现的次数<br>most_common(n): 统计出现次数,从高到低,依次排列个数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"> </div><div class="line">default_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>]</div><div class="line">c = Counter(default_list)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> c, c.most_common(<span class="number">2</span>)</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="comment"># Counter(&#123;1: 2, 'b': 2, 'a': 1, 3: 1&#125;) [(1, 2), ('b', 2)]</span></div></pre></td></tr></table></figure></p>
<h4 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h4><p>功能:指定字典中的顺序,根据添加顺序排序,大小为普通dict的2倍多<br>因为添加了额外的链表,如果涉及大量数据,需要考虑本身占用的内存<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line"> </div><div class="line">items = (</div><div class="line">    (<span class="string">'a'</span>,<span class="number">1</span>),</div><div class="line">    (<span class="string">'b'</span>,<span class="number">2</span>),</div><div class="line">    (<span class="string">'c'</span>,<span class="number">3</span>),</div><div class="line">)</div><div class="line"> </div><div class="line">default_dict = dict(items)</div><div class="line">order_dict = OrderedDict(items)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> default_dict, order_dict</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="comment"># &#123;'a': 1, 'c': 3, 'b': 2&#125; OrderedDict([('a', 1), ('b', 2), ('c', 3)])</span></div></pre></td></tr></table></figure></p>
<h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h4><p>功能:带有默认值的字典, 一键多值的字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"> </div><div class="line">members = (</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'John'</span>],</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'Jack'</span>],</div><div class="line">    [<span class="string">'female'</span>, <span class="string">'Lily'</span>],</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'Pony'</span>],</div><div class="line">    [<span class="string">'female'</span>, <span class="string">'Lucy'</span>],</div><div class="line">)</div><div class="line"> </div><div class="line">result_list = defaultdict(list)  <span class="comment"># 默认列表</span></div><div class="line">result_dict = defaultdict(dict)  <span class="comment"># 默认字典</span></div><div class="line">result_set = defaultdict(set)    <span class="comment"># 默认集合</span></div><div class="line"> </div><div class="line"><span class="keyword">for</span> sex, name <span class="keyword">in</span> members:</div><div class="line">    result_list[sex].append(name)  <span class="comment"># 列表</span></div><div class="line">    result_dict[sex] = name        <span class="comment"># 字典</span></div><div class="line">    result_set[sex].add(name)      <span class="comment"># 集合</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> result_list, result_dict, result_set</div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">"""</span></div><div class="line">defaultdict(&lt;type 'list'&gt;, &#123;'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']&#125;)</div><div class="line">defaultdict(&lt;type 'dict'&gt;, &#123;'male': 'Pony', 'female': 'Lucy'&#125;)</div><div class="line">defaultdict(&lt;type 'set'&gt;, &#123;'male': set(['John', 'Pony', 'Jack']), 'female': set(['Lily', 'Lucy'])&#125;)</div><div class="line">"""</div></pre></td></tr></table></figure></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://docs.python.org/2/library/collections.html#module-collections" target="_blank" rel="external">https://docs.python.org/2/library/collections.html#module-collections</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：&lt;/p&gt;
&lt;h4 id=&quot;namedtuple&quot;&gt;&lt;a href=&quot;#namedtuple&quot; clas
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="collections" scheme="https://ttxsgoto.github.io/tags/collections/"/>
    
  </entry>
  
  <entry>
    <title>setuptools模块打包</title>
    <link href="https://ttxsgoto.github.io/2017/06/14/setup/"/>
    <id>https://ttxsgoto.github.io/2017/06/14/setup/</id>
    <published>2017-06-14T13:51:32.000Z</published>
    <updated>2017-06-15T05:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作</p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">├── README		# readme信息</div><div class="line">├── package_demo	# 包名</div><div class="line">│   ├── __init__.py</div><div class="line">│   └── now_time.py	# 功能模块</div><div class="line">└── setup.py		# setup文件</div></pre></td></tr></table></figure></p>
<p>now_time.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> datetime.datetime.now()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    now()</div></pre></td></tr></table></figure></p>
<p>setup.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf_8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</div><div class="line"> </div><div class="line">here = path.abspath(path.dirname(__file__))</div><div class="line"> </div><div class="line"><span class="keyword">with</span> open(path.join(here, <span class="string">'README'</span>)) <span class="keyword">as</span> f:</div><div class="line">    long_description = f.read()</div><div class="line"> </div><div class="line">install_requires=[</div><div class="line">    <span class="string">'gitchangelog'</span>,</div><div class="line">]</div><div class="line"> </div><div class="line">setup(</div><div class="line">    name=<span class="string">'Package_demo'</span>,</div><div class="line">    version=<span class="string">'1.0.0'</span>,</div><div class="line">    description=<span class="string">'setup package demo'</span>,</div><div class="line">    long_description=long_description,</div><div class="line">    url=<span class="string">'https://github.com/'</span>,</div><div class="line">    author=<span class="string">'ttxsgoto'</span>,</div><div class="line">    author_email=<span class="string">'359450323@qq.com'</span>,</div><div class="line">    license=<span class="string">'MIT'</span>,</div><div class="line">    classifiers=[</div><div class="line">        <span class="string">'Development Status :: 4 - Beta'</span>,</div><div class="line">        <span class="string">'Intended Audience :: Developers'</span>,</div><div class="line">        <span class="string">'Topic :: Software Development :: Build Tools'</span>,</div><div class="line">        <span class="string">'License :: OSI Approved :: MIT License'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 2.7'</span>,</div><div class="line">    ],</div><div class="line">    keywords=<span class="string">'Package_demo'</span>,</div><div class="line">    <span class="comment"># packages=find_packages(</span></div><div class="line">    <span class="comment">#     where='.',</span></div><div class="line">    <span class="comment">#     exclude=['contrib', 'docs', 'tests'], # 排除某些包</span></div><div class="line">    <span class="comment"># ),</span></div><div class="line">    packages=[<span class="string">'package_demo'</span>],</div><div class="line">    install_requires=install_requires,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h4 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h4><ul>
<li>name 项目名称</li>
<li>version 项目当前的版本，1.0.0表示1.0.0版，目前还处于开发阶段</li>
<li>description 包的简单描述</li>
<li>long_description=long_description, 较长的描述</li>
<li>url 为项目访问地址</li>
<li>author 为项目开发人员</li>
<li>author_email 为项目开发人员邮件</li>
<li>license 为本项目遵循的授权许可</li>
<li>classifiers 有很多设置，具体内容可以参考官方文档, <a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers" target="_blank" rel="external">https://pypi.python.org/pypi?%3Aaction=list_classifiers</a></li>
<li>keywords 是本项目的关键词，理解为标签</li>
<li>packages 指定包,如果很多可以使用find_packages &amp; exclude</li>
<li>install_requires 依赖包安装</li>
<li>extras_require 额外的依赖包</li>
</ul>
<h4 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">python setup.py check  <span class="comment"># 检查</span></div><div class="line">python setup.py sdist  <span class="comment"># 打包为 .tar.gz</span></div><div class="line">python setup.py bdist_egg  <span class="comment">#  创建 Eggs包</span></div><div class="line">python setup.py bdist_wheel  <span class="comment"># 创建 Wheel包</span></div><div class="line"><span class="comment"># 生成的文件均位于 dist 目录下</span></div></pre></td></tr></table></figure>
<p>打包后的目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">python setup.py sdist</div><div class="line"> </div><div class="line">├── Package_demo.egg-info</div><div class="line">│   ├── PKG-INFO</div><div class="line">│   ├── SOURCES.txt</div><div class="line">│   ├── dependency_links.txt</div><div class="line">│   ├── requires.txt</div><div class="line">│   └── top_level.txt</div><div class="line">├── README</div><div class="line">├── dist</div><div class="line">│   └── Package_demo-1.0.0.tar.gz</div><div class="line">├── package_demo</div><div class="line">│   ├── __init__.py</div><div class="line">│   └── now_time.py</div><div class="line">└── setup.py</div></pre></td></tr></table></figure></p>
<h4 id="包验证"><a href="#包验证" class="headerlink" title="包验证"></a>包验证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pip install Package_demo<span class="number">-1.0</span><span class="number">.0</span>.tar.gz</div><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> package_demo <span class="keyword">import</span> now_time</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: now_time.now()</div><div class="line">Out[<span class="number">2</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">10</span>, <span class="number">52</span>, <span class="number">278942</span>)</div></pre></td></tr></table></figure>
<h3 id="分发到PyPI"><a href="#分发到PyPI" class="headerlink" title="分发到PyPI"></a>分发到PyPI</h3><p>首先到 PyPI 注册一个帐号, 在邮箱内确认<br>之后在目录新建一个 .pypirc 文件, 写入下面内容(注意填入自己的帐号密码):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[pypirc]</div><div class="line">servers = pypi</div><div class="line">[server-login]</div><div class="line">username:username</div><div class="line">password:password</div></pre></td></tr></table></figure></p>
<p>上传<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python setup.py register  <span class="comment"># 将包注册到 PyPI</span></div><div class="line">python setup.py register sdist upload  <span class="comment"># 上传</span></div></pre></td></tr></table></figure></p>
<p>登录验证查看是否上传成功</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://packaging.python.org/tutorials/distributing-packages/#name" target="_blank" rel="external">https://packaging.python.org/tutorials/distributing-packages/#name</a></li>
<li><a href="https://github.com/pypa/sampleproject/blob/master/setup.py" target="_blank" rel="external">https://github.com/pypa/sampleproject/blob/master/setup.py</a></li>
<li><a href="https://github.com/celery/celery/blob/master/setup.py" target="_blank" rel="external">https://github.com/celery/celery/blob/master/setup.py</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作&lt;/p&gt;
&lt;h3 
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="setuptools" scheme="https://ttxsgoto.github.io/tags/setuptools/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝/浅拷贝和赋值</title>
    <link href="https://ttxsgoto.github.io/2017/05/24/copy-deepcopy/"/>
    <id>https://ttxsgoto.github.io/2017/05/24/copy-deepcopy/</id>
    <published>2017-05-24T13:38:11.000Z</published>
    <updated>2017-05-29T06:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h4><ul>
<li>赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变类型的值时，对应内部的引用发生变化；其中可变类型(列表，字典)，不可变类型(数字，字符串，元祖)</li>
<li>浅拷贝：只拷贝父对象，不会拷贝对象的内部的子对象,只是原对象元素的引用，下列操作相当于浅拷贝<pre><code>- 使用切片操作[:]
- 使用list/dir/set
- 使用copy.copy()
</code></pre></li>
<li>深拷贝：拷贝对象及其子对象,创建一个新的对象，不使用原来的对应对象引用</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>], (<span class="number">7</span>,<span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">2</span>]: l2 = l1</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: id(l1), id(l2)</div><div class="line">Out[<span class="number">3</span>]: (<span class="number">4360956240</span>, <span class="number">4360956240</span>)	<span class="comment"># 指向相同的内存地址</span></div><div class="line"> </div><div class="line">In [<span class="number">4</span>]: l1[<span class="number">3</span>].append(<span class="number">6</span>)</div><div class="line"> </div><div class="line">In [<span class="number">5</span>]: l1</div><div class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: l2</div><div class="line">Out[<span class="number">6</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">7</span>]: id(l1), id(l2)</div><div class="line">Out[<span class="number">7</span>]: (<span class="number">4360956240</span>, <span class="number">4360956240</span>)</div><div class="line"> </div><div class="line">In [<span class="number">8</span>]: l2[<span class="number">0</span>] = <span class="number">0</span></div><div class="line"> </div><div class="line">In [<span class="number">9</span>]: l2</div><div class="line">Out[<span class="number">9</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">10</span>]: l1</div><div class="line">Out[<span class="number">10</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (<span class="number">7</span>, <span class="number">8</span>)]</div><div class="line"> </div><div class="line">In [<span class="number">11</span>]: l1 <span class="keyword">is</span> l2</div><div class="line">Out[<span class="number">11</span>]: <span class="keyword">True</span></div><div class="line"> </div><div class="line">In [<span class="number">12</span>]: id(l1[<span class="number">3</span>])</div><div class="line">Out[<span class="number">12</span>]: <span class="number">4360955808</span></div><div class="line"> </div><div class="line">In [<span class="number">13</span>]: id(l2[<span class="number">3</span>])</div><div class="line">Out[<span class="number">13</span>]: <span class="number">4360955808</span></div></pre></td></tr></table></figure>
<h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"> </div><div class="line">l1 = [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</div><div class="line"> </div><div class="line"><span class="comment"># l2 = list(l1)	# 相当于浅拷贝操作,l1 l2代表不同的列表，但两者引用同一个列表和元祖，如下图一</span></div><div class="line">l2 = copy.copy(l1)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">'=================《流畅的python》第217页 浅拷贝================='</span></div><div class="line"><span class="keyword">print</span> <span class="string">'id-----'</span>,id(l1[<span class="number">1</span>]), id(l2[<span class="number">1</span>])	<span class="comment"># 4318639744 4318639744</span></div><div class="line"><span class="keyword">print</span> <span class="string">'id-----'</span>,id(l1), id(l2)	<span class="comment"># 4318640104 4318555600</span></div><div class="line"> </div><div class="line">l1.append(<span class="number">100</span>) <span class="comment"># [3, [66, 55, 44], (7, 8, 9), 100]</span></div><div class="line">l1[<span class="number">1</span>].remove(<span class="number">55</span>) <span class="comment">#  [3, [66, 44], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l1----&gt;'</span>, l1 <span class="comment"># [3, [66, 44], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l2----&gt;'</span>, l2 <span class="comment"># [3, [66, 44], (7, 8, 9)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'============================================='</span></div><div class="line">l2[<span class="number">1</span>] += [<span class="number">33</span>, <span class="number">22</span>] <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9)]</span></div><div class="line">l2[<span class="number">2</span>] += (<span class="number">10</span>, <span class="number">11</span>) <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l1====&gt;'</span>, l1 <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9), 100]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'l2====&gt;'</span>, l2 <span class="comment"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class="line"><span class="keyword">print</span> <span class="string">'================= 如下图二===================='</span></div></pre></td></tr></table></figure>
<p><img src="https://ttxsgoto.github.io/img/copy/copy01.png" alt="图一"><br><img src="https://ttxsgoto.github.io/img/copy/copy02.png" alt="图二"></p>
<h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> passengers <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.passengers = []</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.passengers = list(passengers)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.passengers.append(name)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.passengers.remove(name)</div><div class="line"> </div><div class="line">bus1 = Bus([<span class="string">'AAA'</span>, <span class="string">'BBB'</span>, <span class="string">'CCC'</span>])</div><div class="line">bus2 = copy.copy(bus1)</div><div class="line">bus3 = copy.deepcopy(bus1)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> id(bus1), id(bus2), id(bus3)</div><div class="line"><span class="comment"># 4318715792 4318757008 4318757072</span></div><div class="line"> </div><div class="line">bus1.drop(<span class="string">'AAA'</span>)</div><div class="line"><span class="keyword">print</span> bus2.passengers</div><div class="line"><span class="comment"># [u'BBB', u'CCC']</span></div><div class="line"><span class="keyword">print</span> id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</div><div class="line"><span class="comment"># 4560506320 4560506320 4560590464 bus2是bus1的浅复制的副本,所以id相同</span></div><div class="line"><span class="keyword">print</span> bus3.passengers</div><div class="line"><span class="comment"># [u'AAA', u'BBB', u'CCC']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念说明&quot;&gt;&lt;a href=&quot;#概念说明&quot; class=&quot;headerlink&quot; title=&quot;概念说明&quot;&gt;&lt;/a&gt;概念说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="copy" scheme="https://ttxsgoto.github.io/tags/copy/"/>
    
  </entry>
  
  <entry>
    <title>描述符</title>
    <link href="https://ttxsgoto.github.io/2017/05/16/descriptor/"/>
    <id>https://ttxsgoto.github.io/2017/05/16/descriptor/</id>
    <published>2017-05-16T12:24:28.000Z</published>
    <updated>2017-05-17T04:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述符说明"><a href="#描述符说明" class="headerlink" title="描述符说明"></a>描述符说明</h3><pre><code>- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符
- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写
- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中
  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找
  顺序为a.__dict__[&apos;x&apos;],然后是type(a).__dict__[&apos;x&apos;].如果还是没找
  到就往上级(父类)中查找最后查找是否有__getattr__
- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用
  描述符的__get__()方法，对于设置和删除也是同样的原理
- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;
- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;
</code></pre><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><pre><code>- 描述符作为属性访问时,是被自动调用
- 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__[&apos;x&apos;].__get__(None, Class)
- 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__[&apos;x&apos;].__get__(object, type(object))
</code></pre><h3 id="描述符用途-使用场景"><a href="#描述符用途-使用场景" class="headerlink" title="描述符用途,使用场景"></a>描述符用途,使用场景</h3><pre><code>- 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符
- 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符
- 描述符会&apos;劫持&apos;那些本是self.__dict__的操作
- 把一个类的操作托付给另外一个类
- 静态方法,类方法,parperty都是构建描述符的类
</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 属性进行相应的处理而不会对整体有影响</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.age = age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__-----'</span>, self, instance, owner</div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.age]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__-----'</span>, self, instance, value</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> type(eval(str(value))) == float:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Age must int and not negative '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.age] = value # 修改dict中对应的属性值</span></div><div class="line">        self.age = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.age</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SexType</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.sex = sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.sex]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'M'</span>, <span class="string">'W'</span>]:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The value must be M/W '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.sex] = value # 修改dict中对应的属性值</span></div><div class="line">        self.sex = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.sex</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    age = Integer(<span class="string">'age'</span>)</div><div class="line">    sex = SexType(<span class="string">'sex'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.sex = sex</div><div class="line">        self.age = age</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Person info --name:&#123;&#125;,--sex:&#123;&#125;,--age:&#123;&#125;'</span>.format(self.name, self.sex, self.age)</div><div class="line"> </div><div class="line">A = Person(name=<span class="string">'ttxsgoto'</span>, sex=<span class="string">'W'</span>, age= <span class="number">15</span> )</div><div class="line"> </div><div class="line"><span class="keyword">print</span> A.__dict__</div><div class="line"><span class="keyword">print</span> Person.__dict__</div><div class="line"><span class="keyword">print</span> A.info</div><div class="line"> </div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">'''</span></div><div class="line">&#123;'name': 'ttxsgoto'&#125;</div><div class="line">&#123;'info': &lt;property object at 0x1028ad418&gt;, '__module__': '__main__', 'age': &lt;__main__.Integer object at 0x1028b30d0&gt;, 'sex': &lt;__main__.SexType object at 0x1028b3110&gt;, '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x1028b2578&gt;&#125;</div><div class="line">__get__----- &lt;__main__.Integer object at 0x1028b30d0&gt; &lt;__main__.Person object at 0x1028b3150&gt; &lt;class '__main__.Person'&gt;</div><div class="line">Person info --name:ttxsgoto,--sex:W,--age:15</div><div class="line">'''</div></pre></td></tr></table></figure>
<h4 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数据描述符和非数据描述符的区别</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Access</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, var=None, name=<span class="string">'var'</span>)</span>:</span></div><div class="line">        self.var = var</div><div class="line">        self.name = name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__----'</span>, self, instance, owner, self.name</div><div class="line">        <span class="keyword">return</span> self.var</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span>  <span class="comment"># 含有__set__方法为数据描述符</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__----'</span>, self, instance, value</div><div class="line">        self.var = value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    x = Access(<span class="number">10</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.x = x</div><div class="line"> </div><div class="line">t = MyClass(<span class="number">100</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'----\n'</span>, t.x</div><div class="line"><span class="keyword">print</span> <span class="string">'====\n'</span>, t.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'xxxx\n'</span>, MyClass.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'yyyy\n'</span>, MyClass.x</div><div class="line"> </div><div class="line"><span class="comment">########### 数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">__set__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; 100</div><div class="line">----</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x10687c2d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10687b320&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="comment">########### 非数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">----</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;'x': 100&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x1012502d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10124f050&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x1012502d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">10</div><div class="line">'''</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;描述符说明&quot;&gt;&lt;a href=&quot;#描述符说明&quot; class=&quot;headerlink&quot; title=&quot;描述符说明&quot;&gt;&lt;/a&gt;描述符说明&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="descriptor" scheme="https://ttxsgoto.github.io/tags/descriptor/"/>
    
  </entry>
  
  <entry>
    <title>ModelSerializer常用方法</title>
    <link href="https://ttxsgoto.github.io/2017/05/14/rest-framwork-serializers/"/>
    <id>https://ttxsgoto.github.io/2017/05/14/rest-framwork-serializers/</id>
    <published>2017-05-14T12:13:22.000Z</published>
    <updated>2017-05-14T12:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ModelSerializer属性方法"><a href="#ModelSerializer属性方法" class="headerlink" title="ModelSerializer属性方法"></a>ModelSerializer属性方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    other_name = serializers.CharField(source=<span class="string">'name'</span>, read_only=<span class="keyword">True</span>)   <span class="comment"># 新添加fields中字段,该serializer对应的model中字段</span></div><div class="line">    other_field = serializers.SerializerMethodField()   <span class="comment"># 添加不是该model中的字段</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Account <span class="comment"># 指定model</span></div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'account_name'</span>, <span class="string">'users'</span>, <span class="string">'created'</span>)  <span class="comment"># 包括的字段</span></div><div class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 显示所有字段</span></div><div class="line">        exclude = (<span class="string">'users'</span>,)    <span class="comment"># 排除不显示的字段,和fields不能同时使用</span></div><div class="line">        depth = <span class="number">1</span>   <span class="comment"># 展示ForeignKey对应的数据，设置展示深度</span></div><div class="line">        read_only_fields = (<span class="string">'account_name'</span>,)    <span class="comment"># 设置只读字段</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_other_field</span><span class="params">(self, obj)</span>:</span><span class="comment"># (dept为外键字段)</span></div><div class="line">        <span class="keyword">return</span> obj.dept.name <span class="keyword">if</span> obj.dept <span class="keyword">else</span> <span class="string">''</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ModelSerializer属性方法&quot;&gt;&lt;a href=&quot;#ModelSerializer属性方法&quot; class=&quot;headerlink&quot; title=&quot;ModelSerializer属性方法&quot;&gt;&lt;/a&gt;ModelSerializer属性方法&lt;/h3&gt;&lt;figu
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>Rest_framwork笔记</title>
    <link href="https://ttxsgoto.github.io/2017/05/14/rest-framwork-note/"/>
    <id>https://ttxsgoto.github.io/2017/05/14/rest-framwork-note/</id>
    <published>2017-05-14T11:36:53.000Z</published>
    <updated>2017-05-14T12:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现restful操作步骤"><a href="#实现restful操作步骤" class="headerlink" title="实现restful操作步骤"></a>实现restful操作步骤</h3><p>0.setting.py 添加设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">	<span class="string">'rest_framework'</span>,</div><div class="line">        <span class="string">'app'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>1.serializer序列化models<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line"> </div><div class="line"><span class="comment">#使用模型序列化ModelSerializer</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户管理</div><div class="line">    """</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span>   <span class="comment"># 方法重写</span></div><div class="line">        user = User.objects.create(**validated_data)</div><div class="line">        <span class="keyword">return</span> user</div><div class="line"> </div><div class="line"><span class="comment">#简单的默认create()和update()方法的实现</span></div></pre></td></tr></table></figure></p>
<p>2.viewSet中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">queryset = user.objects.all()       <span class="comment"># 取数据all</span></div><div class="line">serializer_class = UserSerializer   <span class="comment"># 将序列化的数据给</span></div><div class="line"> </div><div class="line"><span class="comment"># 或者返回数据列表</span></div><div class="line">departments = Department.objects.all()</div><div class="line">response.data.update(&#123;<span class="string">'departments'</span>: DepartmentSerializer(list(departments), many=<span class="keyword">True</span>).data&#125;)</div></pre></td></tr></table></figure></p>
<p>3.注册router<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line">router =  routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>, UserViewSet)</div></pre></td></tr></table></figure></p>
<h3 id="实例化-Serializer-类和模型实例化-ModelSerializer-类"><a href="#实例化-Serializer-类和模型实例化-ModelSerializer-类" class="headerlink" title="实例化(Serializer)类和模型实例化(ModelSerializer)类"></a>实例化(Serializer)类和模型实例化(ModelSerializer)类</h3><p>serializers.py  #序列化类的快捷方式，同时包括create,update方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers	    <span class="comment"># 序列化</span></div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User	<span class="comment"># 导入model</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户管理</div><div class="line">    """</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User  <span class="comment"># 定义models</span></div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'first_name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>)	<span class="comment"># 字段</span></div></pre></td></tr></table></figure></p>
<h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.data #可以处理任何数据，对post，put，patch等方法也起作用</div></pre></td></tr></table></figure>
<h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from rest_framework.response import Response</div><div class="line">return Response()	</div><div class="line"># 根据客户端的请求来渲染成指定的内容类型,用于未渲染内容和内容协商来决定正确的内容类型并把它返回给客户端的模板响应(TemplateResponse).</div></pre></td></tr></table></figure>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># REST框架为每个状态码提供了明确的标识符，如HTTP_400_BAD_REQUEST等</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,request)</span>:</span></div><div class="line">	<span class="keyword">return</span> Response(data, status=status.HTTP_201_CREATED)</div></pre></td></tr></table></figure>
<h3 id="装饰API视图"><a href="#装饰API视图" class="headerlink" title="装饰API视图"></a>装饰API视图</h3><ul>
<li>@app_view 用在基于视图的方法上</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"> </div><div class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">print</span> request.method</div><div class="line">    <span class="keyword">print</span> request.DATA</div><div class="line">    <span class="keyword">return</span> Response([&#123;<span class="string">'asset'</span>: <span class="string">'1'</span>,<span class="string">'status'</span>: <span class="string">'ok'</span>&#125;])</div><div class="line"> </div><div class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_api</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Respose(serializer.data)</div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Response(data,status=status.HTTP_206_PARTIAL_CONTENT)</div><div class="line"> </div><div class="line"><span class="comment">#urls.py中设置</span></div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"> </div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<ul>
<li>APIView 用在基于视图的类</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 基于视图的类</span></div><div class="line">views.py中</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(APIView)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,format=None)</span>:</span></div><div class="line">    	objectall = User.objects.all()</div><div class="line">        serializer = UserSerializer(objectall)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, formate=None)</span>:</span></div><div class="line">    	<span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="comment"># urls.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"> </div><div class="line">    url(<span class="string">r'^app/user/$'</span>, UserView.as_view()),</div><div class="line">    url(<span class="string">r'^app/user/(?P&lt;pk&gt;[0-9]+)$'</span>, UserView.as_view()),</div><div class="line"> </div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<ul>
<li>使用基于视图的一般类(generic class)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line">    queryset = info.objects.all()    <span class="comment">#models对象</span></div><div class="line">    serializer_class = UserSerializer	<span class="comment">#序列化的类</span></div></pre></td></tr></table></figure>
<h3 id="授权-Authentication-与权限-Permissions"><a href="#授权-Authentication-与权限-Permissions" class="headerlink" title="授权(Authentication)与权限(Permissions)"></a>授权(Authentication)与权限(Permissions)</h3><ul>
<li>数据总是和创建者联系在一起</li>
<li>只有授权用户才能创建对应的数据</li>
<li>只有对应的数据的创建者才能更新或删除它</li>
<li>没有授权的请求应该只有只读权限</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissons</div><div class="line"> </div><div class="line">urls.py中</div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]</div><div class="line"><span class="comment">################################</span></div><div class="line"><span class="comment"># 在浏览器API中添加登录</span></div><div class="line">urls.py</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</div><div class="line"> </div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]	<span class="comment"># 为api添加一个包括登录和退出视图的url样式</span></div><div class="line"> </div><div class="line"><span class="comment"># api-auth部分可以是任何你想要的url，唯一的限制为include中的链接必须使用‘rest_framework’名字空间，在Django1.9+ rest框架会设置名字空间，所以必须写</span></div></pre></td></tr></table></figure>
<h3 id="URL模式命名"><a href="#URL模式命名" class="headerlink" title="URL模式命名"></a>URL模式命名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url(<span class="string">r'^app/user/$'</span>, UserView.as_view(), name=<span class="string">'user_add'</span>), <span class="comment"># name指定url名称</span></div></pre></td></tr></table></figure>
<h3 id="添加分页"><a href="#添加分页" class="headerlink" title="添加分页"></a>添加分页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setting.py中</span></div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'base.serializers.PlugPageNumberPagination'</span>,</div><div class="line">    <span class="string">'MAX_PAGE_SIZE'</span>: <span class="number">50</span>,</div><div class="line">    <span class="string">'PAGE_SIZE'</span>:     <span class="number">15</span>  <span class="comment"># default page size</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="视图集-ViewSets-和路由-Routers"><a href="#视图集-ViewSets-和路由-Routers" class="headerlink" title="视图集(ViewSets)和路由(Routers)"></a>视图集(ViewSets)和路由(Routers)</h3><p>视图集让开发者把精力集中在构建状态和交互的api模型，而且他可以基于一般规范自动构建url<br>一个viewset类只绑定一个方法集合，当它初始化一个视图集合时，一般使用为处理复杂的url定义的Router类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserviewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">	queryset = User.objects.all()</div><div class="line">	serializer_class = UserSerializer</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self,request)</span>:</span></div><div class="line">    	<span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> data</div></pre></td></tr></table></figure></p>
<h3 id="明确绑定视图集到URL"><a href="#明确绑定视图集到URL" class="headerlink" title="明确绑定视图集到URL"></a>明确绑定视图集到URL</h3><p>定义URLConf时，处理方法只绑定了动作，我们必须从我们的视图集(ViewSets)创建一个视图集合，在urls.py文件中，我们将ViewSet类绑定到具体视图的集合</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># urls.py中</div><div class="line">from rest_framework.urlpatterns import format_suffix_patterns</div><div class="line"> </div><div class="line">user_list = UserView.as_view(&#123;</div><div class="line">    'get':'list',</div><div class="line">    'post':'creat',</div><div class="line">&#125;)</div><div class="line">url(r'^user/$, user_list)),</div><div class="line"> </div><div class="line"># 或者：</div><div class="line">list_create = &#123;</div><div class="line">    'get': 'list',</div><div class="line">    'post': 'create',</div><div class="line">&#125;</div><div class="line"> url(r'^user/$', UserView.as_view(list_create)),</div></pre></td></tr></table></figure>
<h3 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h3><p>使用Router类可以自动将资源和视图(views),链接(urls)联系起来，我们只需要用一个路由注册合适的视图集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># urls.py中</span></div><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line"> </div><div class="line">router =  routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>,views.UserViewSet)</div><div class="line">router.register(<span class="string">r'groups'</span>,views.GroupsViewSet)</div><div class="line"> </div><div class="line">urlpatterns += [</div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.django-rest-framework.org/" target="_blank" rel="external">http://www.django-rest-framework.org/</a><br><a href="https://github.com/tomchristie/rest-framework-tutorial" target="_blank" rel="external">https://github.com/tomchristie/rest-framework-tutorial</a><br><a href="http://www.cnblogs.com/loveis715/p/4669091.html" target="_blank" rel="external">http://www.cnblogs.com/loveis715/p/4669091.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实现restful操作步骤&quot;&gt;&lt;a href=&quot;#实现restful操作步骤&quot; class=&quot;headerlink&quot; title=&quot;实现restful操作步骤&quot;&gt;&lt;/a&gt;实现restful操作步骤&lt;/h3&gt;&lt;p&gt;0.setting.py 添加设置&lt;br&gt;&lt;figu
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="DRF" scheme="https://ttxsgoto.github.io/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>装饰器</title>
    <link href="https://ttxsgoto.github.io/2017/05/13/decorator/"/>
    <id>https://ttxsgoto.github.io/2017/05/13/decorator/</id>
    <published>2017-05-13T02:57:35.000Z</published>
    <updated>2017-05-22T12:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><pre><code>- 能把装饰的函数替换成其他函数
- 装饰器在加载/导入模块时立即执行,被装饰的函数在被调用的时候运行
</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre><code>- 当函数离开创建环境后,依然持有其上下文状态
- 要形成闭包，首先需要一个嵌套的函数，即函数中定义了另一个函数，子函数引用父函
  数的变量,子函数称为闭包;
- Python中函数也是对象，所以函数也有很多属性，和闭包相关的属性是 
  __closure__,__closure__ 属性定义的是一个包含 cell 对象的元组，其中元组
  中的每一个cell对象用来保存作用域中变量的值
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding: utf_8</div><div class="line"> </div><div class="line">def func(n):</div><div class="line">    print 'id(n)----&gt; &#123;&#125;'.format(id(n))</div><div class="line"> </div><div class="line">    def new_power(x):</div><div class="line">        return x**n</div><div class="line">    print 'id(new_power)----&gt; &#123;&#125;'.format(id(new_power))</div><div class="line">    return new_power</div><div class="line"> </div><div class="line">first = func(5) # 在调用func函数时产生一个闭包new_power,并且已拥有局部变量n的值,即使func生命周期结束后,值n依然存在,因为n被new_power引用,所以不会被回收</div><div class="line"> </div><div class="line">print id(first)</div><div class="line">del func</div><div class="line">print first(2)</div><div class="line">print first.__closure__, first.__closure__[0].cell_contents # 函数也为对象,其中的闭包属性</div><div class="line">##### 运行结果 #####</div><div class="line">id(n)----&gt; 140676064892712</div><div class="line">id(new_power)----&gt; 4357115728</div><div class="line">4357115728</div><div class="line">32</div></pre></td></tr></table></figure>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>装饰器就是执行一个函数,当执行到@auth时，内部的动作为：</p>
<pre><code>- 执行auth函数，并将@auth下面的函数作为auth函数的参数，即@auth == auth(f1)
- 将执行完的auth函数返回值赋给@auth下面的函数的函数名，即 f1 = auth(f1),相当于执行inner函数
</code></pre><h3 id="装饰器实例"><a href="#装饰器实例" class="headerlink" title="装饰器实例"></a>装饰器实例</h3><h4 id="函数-无参数-的装饰器"><a href="#函数-无参数-的装饰器" class="headerlink" title="函数(无参数)的装饰器"></a>函数(无参数)的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span>    <span class="comment">#执行函数前执行动作</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span>    <span class="comment">#执行函数后执行动作</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">     </div><div class="line"><span class="meta">@auth  #@auth ==&gt; f1 = auth(f1) ==&gt;f1() 相当于执行inner函数，func为f1函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"This is f1 function"</span></div><div class="line"> </div><div class="line">f1()</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">This <span class="keyword">is</span> f1 function</div><div class="line">after</div></pre></td></tr></table></figure>
<h4 id="函数含有-一个-多个-参数的装饰器"><a href="#函数含有-一个-多个-参数的装饰器" class="headerlink" title="函数含有(一个/多个)参数的装饰器"></a>函数含有(一个/多个)参数的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_arg</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># 传递一个/多个参数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span></div><div class="line">        ret1,ret2 = func(*args, **kwargs)  <span class="comment"># 相当于f2(*args, **kwargs)函数</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span></div><div class="line">        <span class="keyword">return</span> ret1,ret2</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth_arg</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span>  args,kwargs</div><div class="line">    <span class="keyword">return</span> args,kwargs</div><div class="line"> </div><div class="line">key1 = <span class="string">'ttxsgoto'</span></div><div class="line">dict1 = &#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line">ret1, ret2 = f2(key1, **dict1)</div><div class="line"><span class="keyword">print</span> ret1, ret2</div><div class="line"></div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">(<span class="string">'ttxsgoto'</span>,) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div><div class="line">after</div><div class="line">(<span class="string">'ttxsgoto'</span>,) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="有参数的装饰器"><a href="#有参数的装饰器" class="headerlink" title="有参数的装饰器"></a>有参数的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_arg</span><span class="params">(list1=[])</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> list1:</div><div class="line">        <span class="keyword">print</span> <span class="string">'None ....'</span></div><div class="line">        <span class="keyword">raise</span> Exception(<span class="string">'LIST is  Null '</span>)</div><div class="line">    new_list = []</div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> list1:</div><div class="line">        li += <span class="string">'a'</span></div><div class="line">        new_list.append(li)</div><div class="line">    <span class="keyword">print</span> new_list</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Before'</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">in_inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            ret1, ret2 = func(*args, **kwargs)</div><div class="line">            <span class="keyword">return</span> ret1, ret2</div><div class="line">        <span class="keyword">return</span> in_inner</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth_arg(list1=['a', '1'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"f3 ---"</span>, args, kwargs</div><div class="line">    <span class="keyword">return</span> args, kwargs</div><div class="line"> </div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">dict1=&#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> f3(a, **dict1)</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">[<span class="string">'aa'</span>, <span class="string">'1a'</span>]</div><div class="line">Before</div><div class="line">f3 --- ([<span class="number">1</span>, <span class="number">2</span>],) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="多装饰器"><a href="#多装饰器" class="headerlink" title="多装饰器"></a>多装饰器</h4><ul>
<li>在foo函数上层包裹了一层w1，又包裹了一次w2，一个嵌套一个函数，执行</li>
<li>可用于登录后再判断有没有权限，可以使用两个装饰器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before01"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after01"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before02"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after02"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@w2</span></div><div class="line"><span class="meta">@w1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"foo"</span></div><div class="line"> </div><div class="line">foo() <span class="comment">#先执行w1，在执行w2，嵌套执行，foo = w2(w1(foo)))</span></div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before02</div><div class="line">before01</div><div class="line">foo</div><div class="line">after01</div><div class="line">after02</div></pre></td></tr></table></figure>
<h4 id="函数的类装饰器-1"><a href="#函数的类装饰器-1" class="headerlink" title="函数的类装饰器(1)"></a>函数的类装饰器(1)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法</div><div class="line">    '''</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></div><div class="line">    	<span class="keyword">print</span> <span class="string">"__init__  function"</span></div><div class="line">        self.func = func</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Before..."</span></div><div class="line">        self.func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"After..."</span></div><div class="line"> </div><div class="line"><span class="meta">@Foo</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'bar funtion()'</span></div><div class="line"> </div><div class="line">bar()</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">__init__  function</div><div class="line">Before...</div><div class="line">bar funtion()</div><div class="line">After...</div></pre></td></tr></table></figure>
<h4 id="函数的类装饰器-2"><a href="#函数的类装饰器-2" class="headerlink" title="函数的类装饰器(2)"></a>函数的类装饰器(2)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorate</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,arg_list=[])</span>:</span></div><div class="line">        self.arg_list = arg_list</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.arg_list:</div><div class="line">                <span class="keyword">print</span> <span class="string">'None ....'</span></div><div class="line">                <span class="keyword">raise</span> Exception(<span class="string">'LIST is  Null '</span>)</div><div class="line">        new_list = []</div><div class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> self.arg_list:</div><div class="line">            li += <span class="string">'a'</span></div><div class="line">            new_list.append(li)</div><div class="line">        <span class="keyword">print</span> new_list</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            ret1, ret2 = func(*args, **kwargs)</div><div class="line">            <span class="keyword">return</span> ret1, ret2</div><div class="line">        <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@Decorate(arg_list=['a', 'b'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"f3  function"</span>, args, kwargs</div><div class="line">    <span class="keyword">return</span> args, kwargs</div><div class="line"> </div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">dict1=&#123;&#125;</div><div class="line">dict1[<span class="string">'ttxs'</span>] = <span class="string">'goto'</span></div><div class="line">ret = f3(a, **dict1)</div><div class="line"><span class="keyword">print</span> ret</div><div class="line"> </div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">[<span class="string">'aa'</span>, <span class="string">'ba'</span>]</div><div class="line">f3  function ([<span class="number">1</span>, <span class="number">2</span>],) &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;</div><div class="line">(([<span class="number">1</span>, <span class="number">2</span>],), &#123;<span class="string">'ttxs'</span>: <span class="string">'goto'</span>&#125;)</div></pre></td></tr></table></figure>
<h3 id="装饰器的不足"><a href="#装饰器的不足" class="headerlink" title="装饰器的不足"></a>装饰器的不足</h3><p>使用装饰器极大地复用了代码，缺点就是原函数的元信息丢失<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)	#保持原函数信息一致，如果没有该装饰器，返回为inner函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"before"</span></div><div class="line">        func()</div><div class="line">        <span class="keyword">print</span> <span class="string">"after"</span></div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"> </div><div class="line"><span class="meta">@auth</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"This is f1 function"</span></div><div class="line"> </div><div class="line">f1()</div><div class="line"><span class="keyword">print</span> f1, f1.__name__</div><div class="line"><span class="comment">#### 运行结果 ####</span></div><div class="line">before</div><div class="line">This <span class="keyword">is</span> f1 function</div><div class="line">after</div><div class="line">&lt;function inner at <span class="number">0x10e55b140</span>&gt; inner	<span class="comment">#这些显示为inner函数,本来调用的是f1函数</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）&lt;/p&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="decorator" scheme="https://ttxsgoto.github.io/tags/decorator/"/>
    
  </entry>
  
</feed>
