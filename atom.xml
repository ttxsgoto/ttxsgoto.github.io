<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2018-02-05T07:34:05.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django 自定义认证字段</title>
    <link href="https://ttxsgoto.github.io/2018/02/05/django-define-auth/"/>
    <id>https://ttxsgoto.github.io/2018/02/05/django-define-auth/</id>
    <published>2018-02-05T14:21:34.000Z</published>
    <updated>2018-02-05T07:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Django默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这类问题。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Django中在底层，维护着”authentication backends”列表，当调用django.contrib.auth.authenticate() 时，会尝试所有的使用通过settings通过AUTHENTICATION_BACKENDS设置的backend来进行认证，默认为<code>django.contrib.auth.backends.ModelBackend</code>，依次验证，如果匹配成功，则停止后续处理，如果后台引发PermissionDenied异常，认证失败且不会检查后面的认证。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>通过用户名或者email进行认证</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</div><div class="line"> </div><div class="line">UserModel = get_user_model()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomizedBackend</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> kwargs:</div><div class="line">            auth = &#123;<span class="string">'username'</span>: kwargs.get(<span class="string">'username'</span>, <span class="string">''</span>)&#125;</div><div class="line">        <span class="keyword">elif</span> <span class="string">'email'</span> <span class="keyword">in</span> kwargs:</div><div class="line">            auth = &#123;<span class="string">'email'</span>: kwargs.get(<span class="string">'email'</span>, <span class="string">''</span>)&#125;</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            auth = &#123;&#125;</div><div class="line">        password = kwargs.get(<span class="string">'password'</span>, <span class="string">''</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            user = UserModel._default_manager.get(**auth)</div><div class="line">        <span class="keyword">except</span> UserModel.DoesNotExist:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> user.check_password(password):</div><div class="line">                <span class="keyword">return</span> user</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(self, user_id)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> UserModel._default_manager.get(pk=user_id)</div><div class="line">        <span class="keyword">except</span> UserModel.DoesNotExist:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<h4 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 默认登录使用的backend</span></div><div class="line">AUTHENTICATION_BACKENDS = (</div><div class="line">    <span class="string">'django.contrib.auth.backends.ModelBackend'</span>,  <span class="comment"># 默认backend</span></div><div class="line">    <span class="string">'apps.auth.backends.CustomizedBackend'</span>,        <span class="comment"># 各backend依次进行验证, 直到某一个验证通过</span></div><div class="line">)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;Django默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Auth" scheme="https://ttxsgoto.github.io/tags/Auth/"/>
    
  </entry>
  
  <entry>
    <title>Python Descriptor描述符02</title>
    <link href="https://ttxsgoto.github.io/2018/02/01/python-descriptor02/"/>
    <id>https://ttxsgoto.github.io/2018/02/01/python-descriptor02/</id>
    <published>2018-02-01T14:30:30.000Z</published>
    <updated>2018-02-05T07:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul>
<li>使用描述符时，实例对象的属性访问会触发描述符的__get__方法</li>
<li>使用描述符时，实例对象的属性赋值会触发描述符的__set__方法</li>
<li>通过obj.__dict__[xxx]=yyy 赋值会跳过描述符</li>
<li>没有__get__方法的覆盖描述符，给对象的属性赋值会触发__set__方法，读取属性时会直接从实例中返回新赋予的值，而不会返回描述符对象， 也就是说读取操作实例属性会遮盖描述符，直接从__dict__中获取</li>
<li>非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性,即获取属性的值将直接通过__dict__中获取</li>
<li>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</li>
<li>类中定义的函数属于绑定方法，因为用户定义的函数都有get方法，所以依附到类上，相当于描述符，为非覆盖性描述符</li>
</ul>
<h4 id="概念描述"><a href="#概念描述" class="headerlink" title="概念描述"></a>概念描述</h4><ul>
<li>描述符类： 实现描述符协议的类</li>
<li>托管类： 把描述符实例声明为类属性的类</li>
<li>描述符实例： 描述符类的各个实例，声明为托管类的类属性</li>
<li>托管实例：托管类的实例</li>
<li>储存属性： 托管实例中存储自身托管属性的属性</li>
<li>托管属性： 托管类中由描述符实例处理的公开属性，值存储在储存属性中， 也就是说，描述符实例和储存属性为托管属性建立了基础</li>
</ul>
<h4 id="描述符实例"><a href="#描述符实例" class="headerlink" title="描述符实例"></a>描述符实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span>:</span></div><div class="line">    <span class="string">""" 描述符类 """</span></div><div class="line">    __counter = <span class="number">0</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        cls = self.__class__</div><div class="line">        prefix = cls.__name__</div><div class="line">        index = cls.__counter</div><div class="line">        self.storage_name = <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class="line">        cls.__counter += <span class="number">1</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        获取对应的属性时, 调用该方法</div><div class="line">        :param instance: 描述符实例</div><div class="line">        :param owner: 托管类的引用(type),通过描述符从托管类中获取属性时用得到</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="keyword">return</span> getattr(instance, self.storage_name)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :param instance: 描述符实例</div><div class="line">        :param value: 托管实例设置的值</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</div><div class="line">            setattr(instance, self.storage_name, value)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0.'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line">    <span class="string">""" 托管类 """</span></div><div class="line">    weight = Quantity() <span class="comment"># 描述符实例</span></div><div class="line">    price = Quantity()   <span class="comment"># 描述符实例</span></div><div class="line">    <span class="comment"># weight, price 为储存属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,desc, weight, price)</span>:</span></div><div class="line">        self.desc = desc</div><div class="line">        self.weight = weight</div><div class="line">        self.price = price</div><div class="line">        <span class="comment"># self.weight, self.price 为托管属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.weight * self.price</div><div class="line"> </div><div class="line"><span class="comment"># 描述符实例为引用类的类属性</span></div><div class="line"> </div><div class="line">line = LineItem(<span class="string">'test01'</span>, <span class="number">12</span>, <span class="number">12.3</span>) <span class="comment"># 托管实例</span></div><div class="line"> </div><div class="line">print(line.weight)  <span class="comment"># 实例对象的属性访问会触发描述符的__get__方法</span></div><div class="line"> </div><div class="line">print(line.subtotal())</div><div class="line"> </div><div class="line">print(LineItem.weight)</div></pre></td></tr></table></figure>
<h4 id="描述符实例重构"><a href="#描述符实例重构" class="headerlink" title="描述符实例重构"></a>描述符实例重构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> abc</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoStorage</span>:</span></div><div class="line">    __counter = <span class="number">0</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        cls = self.__class__</div><div class="line">        prefix = cls.__name__</div><div class="line">        index = cls.__counter</div><div class="line">        self.storage_name = <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class="line">        cls.__counter += <span class="number">1</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="keyword">return</span> getattr(instance, self.storage_name)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        setattr(instance, self.storage_name, value)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validated</span><span class="params">(abc.ABC, AutoStorage)</span>:</span></div><div class="line">    <span class="string">""" 验证相关模块 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="string">""" 把验证操作委托给validate方法"""</span></div><div class="line">        value = self.validate(instance, value)</div><div class="line">        super(Validated, self).__set__(instance, value)</div><div class="line"> </div><div class="line"><span class="meta">    @abc.abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="string">""" 抽象方法 """</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span><span class="params">(Validated)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonBlank</span><span class="params">(Validated)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        value = value.strip()</div><div class="line">        <span class="keyword">if</span> len(value) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value cannot be empty or blank'</span>)</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line">    <span class="string">""" 托管类 """</span></div><div class="line">    weight = Quantity()  <span class="comment"># 描述符实例</span></div><div class="line">    price = Quantity()  <span class="comment"># 描述符实例</span></div><div class="line">    desc = NonBlank()  <span class="comment"># 描述符实例</span></div><div class="line"> </div><div class="line">    <span class="comment"># weight, price 为储存属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, desc, weight, price)</span>:</span></div><div class="line">        self.desc = desc</div><div class="line">        self.weight = weight</div><div class="line">        self.price = price</div><div class="line">        <span class="comment"># self.weight, self.price 为托管属性</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.weight * self.price</div><div class="line"> </div><div class="line"> </div><div class="line">line = LineItem(<span class="string">'abc'</span>, <span class="number">12</span>, <span class="number">12.3</span>)</div><div class="line">print(line.subtotal())</div></pre></td></tr></table></figure>
<h4 id="覆盖型和非覆盖型描述符对比"><a href="#覆盖型和非覆盖型描述符对比" class="headerlink" title="覆盖型和非覆盖型描述符对比"></a>覆盖型和非覆盖型描述符对比</h4><ul>
<li><p>覆盖型描述符 实现了__set__方法的描述符,实现了set方法会覆盖对实例属性的赋值操作</p>
</li>
<li><p>非覆盖型描述符 没有实现__set__方法的描述符是非覆盖型描述符，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</p>
</li>
<li><p>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cls_name</span><span class="params">(obj_or_cls)</span>:</span></div><div class="line">    cls = type(obj_or_cls)</div><div class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> type:</div><div class="line">        cls = obj_or_cls</div><div class="line">    <span class="keyword">return</span> cls.__name__.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(obj)</span>:</span></div><div class="line">    cls = type(obj)</div><div class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> type:</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;class &#123;&#125;&gt;'</span>.format(obj.__name__)</div><div class="line">    <span class="keyword">elif</span> cls <span class="keyword">in</span> [type(<span class="keyword">None</span>), int]:</div><div class="line">        <span class="keyword">return</span> repr(obj)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;&#123;&#125; object&gt;'</span>.format(cls_name(obj))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(name, *args)</span>:</span></div><div class="line">    pseudo_args = <span class="string">','</span>.join(display(x) <span class="keyword">for</span> x <span class="keyword">in</span> args)</div><div class="line">    print(<span class="string">'-&gt;&#123;&#125;.__&#123;&#125;__(&#123;&#125;)'</span>.format(cls_name(args[<span class="number">0</span>]), name, pseudo_args))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Overriding</span>:</span></div><div class="line">    <span class="string">""" 数据描述符 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        print_args(<span class="string">'get'</span>, self, instance, owner)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        print_args(<span class="string">'set'</span>, self, instance, value)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingNoGet</span>:</span></div><div class="line">    <span class="string">""" 没有 __get__方法的覆盖型描述符 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        print_args(<span class="string">'set'</span>, self, instance, value)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonOverriding</span>:</span></div><div class="line">    <span class="string">""" 非数据描述符"""</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        print_args(<span class="string">'get'</span>, self, instance, owner)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Managed</span>:</span></div><div class="line">    over = Overriding()</div><div class="line">    over_no_get = OverridingNoGet()</div><div class="line">    non_over = NonOverriding()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">span</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'-&gt; Managed.spam(&#123;&#125;)'</span>.format(display(self)))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">################覆盖型描述符##################</span></div><div class="line"><span class="string">"""获取和设置值 都是通过描述符的get和set方法完成"""</span></div><div class="line">obj = Managed()</div><div class="line">obj.over</div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line">Managed.over</div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line">obj.over = <span class="number">7</span></div><div class="line"><span class="comment"># Overriding.__set__(&lt;Overriding object&gt;,&lt;Managed object&gt;,7)</span></div><div class="line">obj.over</div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line">obj.__dict__[<span class="string">'over'</span>] = <span class="number">8</span>  <span class="comment"># 跳过描述符,通过obj.__dict__赋值</span></div><div class="line">print(vars(obj))</div><div class="line"><span class="comment"># &#123;'over': 8&#125;</span></div><div class="line">print(obj.over)</div><div class="line"><span class="comment"># None</span></div><div class="line">obj.over  <span class="comment"># obj.over描述符仍会覆盖取值(obj.over)这个操作</span></div><div class="line"><span class="comment"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">##########没有__get__()方法的覆盖型描述符##########</span></div><div class="line"><span class="string">"""没有__get__方法的覆盖描述符,给对象的属性赋值会触发__set__方法,读取属性时会直接从实例中返回新赋予的值,而不会返回描述符对象,读取操作实例属性会遮盖描述符"""</span></div><div class="line">print(obj.over_no_get)</div><div class="line"><span class="comment"># &lt;__main__.O</span></div><div class="line"><span class="comment"># verridingNoGet object at 0x102973358&gt;</span></div><div class="line">print(Managed.over_no_get)</div><div class="line"><span class="comment"># &lt;__main__.OverridingNoGet object at 0x102973358&gt;</span></div><div class="line">obj.over_no_get = <span class="number">7</span></div><div class="line"><span class="comment"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class="line">print(obj.over_no_get)</div><div class="line"><span class="comment"># &lt;__main__.OverridingNoGet object at 0x101873358&gt;</span></div><div class="line">obj.__dict__[<span class="string">'over_no_get'</span>] = <span class="number">9</span></div><div class="line">print(obj.over_no_get)	<span class="comment"># 通过类属性取值,没有通过描述符,因为没有__get__方法</span></div><div class="line"><span class="comment"># 9</span></div><div class="line">obj.over_no_get = <span class="number">7</span></div><div class="line"><span class="comment"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class="line">print(obj.over_no_get)  <span class="comment"># 只要有同名的实例属性,描述符会被遮盖,默认的实例属性获取方法遮盖描述符</span></div><div class="line"><span class="comment"># 9</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">########## 非覆盖型描述符 ##########</span></div><div class="line"><span class="string">"""</span></div><div class="line">非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</div><div class="line">"""</div><div class="line"> </div><div class="line">obj1 = Managed()</div><div class="line">obj1.non_over</div><div class="line"><span class="comment"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line">obj1.non_over = <span class="number">7</span></div><div class="line">print(obj1.non_over)	<span class="comment"># 实例属性赋值会遮盖描述符__get__方法</span></div><div class="line"><span class="comment"># 7</span></div><div class="line">Managed.non_over</div><div class="line"><span class="comment"># NonOverriding.__get__(&lt;NonOverriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class="line"><span class="keyword">del</span> obj1.non_over</div><div class="line">obj1.non_over	<span class="comment"># 删除实例属性后,又从描述符__get__方法中获取</span></div><div class="line"><span class="comment"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class="line"> </div><div class="line"><span class="comment">################################</span></div><div class="line"><span class="comment"># 在类中覆盖描述符</span></div><div class="line"><span class="comment">################################</span></div><div class="line">obj2 = Managed()</div><div class="line"> </div><div class="line"><span class="comment"># 覆盖类中的描述符属性</span></div><div class="line">Managed.over = <span class="number">1</span></div><div class="line">Managed.over_no_get = <span class="number">2</span></div><div class="line">Managed.non_over = <span class="number">3</span></div><div class="line"> </div><div class="line">print(obj2.over, obj2.over_no_get, obj2.non_over)</div><div class="line"><span class="comment"># 1 2 3</span></div></pre></td></tr></table></figure>
<h4 id="描述符用法"><a href="#描述符用法" class="headerlink" title="描述符用法"></a>描述符用法</h4><ol>
<li>使用特性以保持简单</li>
<li>只读描述符必须有__set__方法，如果需要实现只读属性，<strong>get</strong>和<strong>set</strong>方法必须都实现，否则实例的同名属性会遮盖描述符，只读属性的__set__方法只需抛出AttributeError异常，并提供合适的错误信息</li>
<li>用于验证的描述符可以只有__set__方法</li>
<li>仅有<strong>get</strong>方法的描述符可以实现高效缓存，同名实例属性会遮盖描述符</li>
<li>非特殊的方法可以被实例属性遮盖， 函数和方法都只实现了<strong>get</strong>方法，不会处理同名实例属性的赋值操作</li>
</ol>
<p>以上内容学习记录参照《流畅的python》 第20章 属性描述符</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用描述符时，实例对象的属性访问会触发描述符的__get__方法&lt;/li&gt;
&lt;li&gt;使用描述符时，实例对象的属性赋值会触发描述符
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="Descriptor" scheme="https://ttxsgoto.github.io/tags/Descriptor/"/>
    
  </entry>
  
  <entry>
    <title>Python Descriptor描述符01</title>
    <link href="https://ttxsgoto.github.io/2018/01/31/descriptor/"/>
    <id>https://ttxsgoto.github.io/2018/01/31/descriptor/</id>
    <published>2018-01-31T12:24:28.000Z</published>
    <updated>2018-02-01T12:10:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述符说明"><a href="#描述符说明" class="headerlink" title="描述符说明"></a>描述符说明</h3><pre><code>- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符
- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写
- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中
  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找
  顺序为a.__dict__[&apos;x&apos;],然后是type(a).__dict__[&apos;x&apos;].如果还是没找
  到就往上级(父类)中查找最后查找是否有__getattr__
- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用
  描述符的__get__()方法，对于设置和删除也是同样的原理
- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;
- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;
</code></pre><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><pre><code>- 描述符作为属性访问时,是被自动调用
- 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__[&apos;x&apos;].__get__(None, Class)
- 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__[&apos;x&apos;].__get__(object, type(object))
</code></pre><h3 id="描述符用途-使用场景"><a href="#描述符用途-使用场景" class="headerlink" title="描述符用途,使用场景"></a>描述符用途,使用场景</h3><pre><code>- 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符
- 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符
- 描述符会&apos;劫持&apos;那些本是self.__dict__的操作
- 把一个类的操作托付给另外一个类
- 静态方法,类方法,parperty都是构建描述符的类
</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 属性进行相应的处理而不会对整体有影响</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.age = age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__-----'</span>, self, instance, owner</div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.age]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.age</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__-----'</span>, self, instance, value</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> type(eval(str(value))) == float:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Age must int and not negative '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.age] = value # 修改dict中对应的属性值</span></div><div class="line">        self.age = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.age</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SexType</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.sex = sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="comment"># return instance.__dict__[self.sex]  # 获取dict中对应的属性值</span></div><div class="line">        <span class="keyword">return</span> self.sex</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'M'</span>, <span class="string">'W'</span>]:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The value must be M/W '</span>)</div><div class="line">        <span class="comment"># instance.__dict__[self.sex] = value # 修改dict中对应的属性值</span></div><div class="line">        self.sex = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.sex</div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    age = Integer(<span class="string">'age'</span>)</div><div class="line">    sex = SexType(<span class="string">'sex'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.sex = sex</div><div class="line">        self.age = age</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Person info --name:&#123;&#125;,--sex:&#123;&#125;,--age:&#123;&#125;'</span>.format(self.name, self.sex, self.age)</div><div class="line"> </div><div class="line">A = Person(name=<span class="string">'ttxsgoto'</span>, sex=<span class="string">'W'</span>, age= <span class="number">15</span> )</div><div class="line"> </div><div class="line"><span class="keyword">print</span> A.__dict__</div><div class="line"><span class="keyword">print</span> Person.__dict__</div><div class="line"><span class="keyword">print</span> A.info</div><div class="line"> </div><div class="line"><span class="comment">########## 结果 ##########</span></div><div class="line"><span class="string">'''</span></div><div class="line">&#123;'name': 'ttxsgoto'&#125;</div><div class="line">&#123;'info': &lt;property object at 0x1028ad418&gt;, '__module__': '__main__', 'age': &lt;__main__.Integer object at 0x1028b30d0&gt;, 'sex': &lt;__main__.SexType object at 0x1028b3110&gt;, '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x1028b2578&gt;&#125;</div><div class="line">__get__----- &lt;__main__.Integer object at 0x1028b30d0&gt; &lt;__main__.Person object at 0x1028b3150&gt; &lt;class '__main__.Person'&gt;</div><div class="line">Person info --name:ttxsgoto,--sex:W,--age:15</div><div class="line">'''</div></pre></td></tr></table></figure>
<h4 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数据描述符和非数据描述符的区别</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Access</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, var=None, name=<span class="string">'var'</span>)</span>:</span></div><div class="line">        self.var = var</div><div class="line">        self.name = name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__----'</span>, self, instance, owner, self.name</div><div class="line">        <span class="keyword">return</span> self.var</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span>  <span class="comment"># 含有__set__方法为数据描述符</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__----'</span>, self, instance, value</div><div class="line">        self.var = value</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    x = Access(<span class="number">10</span>, <span class="string">'ttxsgoto'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.x = x</div><div class="line"> </div><div class="line">t = MyClass(<span class="number">100</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'----\n'</span>, t.x</div><div class="line"><span class="keyword">print</span> <span class="string">'====\n'</span>, t.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'xxxx\n'</span>, MyClass.__dict__</div><div class="line"><span class="keyword">print</span> <span class="string">'yyyy\n'</span>, MyClass.x</div><div class="line"> </div><div class="line"><span class="comment">########### 数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">__set__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; 100</div><div class="line">----</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x10687c2d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10687b320&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">100</div><div class="line">'''</div><div class="line"> </div><div class="line"><span class="comment">########### 非数据描述符的输出 ###########</span></div><div class="line"><span class="string">'''</span></div><div class="line">----</div><div class="line">100</div><div class="line">====</div><div class="line">&#123;'x': 100&#125;</div><div class="line">xxxx</div><div class="line">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x1012502d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10124f050&gt;&#125;</div><div class="line">yyyy</div><div class="line">__get__---- &lt;__main__.Access object at 0x1012502d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class="line">10</div><div class="line">'''</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;描述符说明&quot;&gt;&lt;a href=&quot;#描述符说明&quot; class=&quot;headerlink&quot; title=&quot;描述符说明&quot;&gt;&lt;/a&gt;描述符说明&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="Descriptor" scheme="https://ttxsgoto.github.io/tags/Descriptor/"/>
    
  </entry>
  
  <entry>
    <title>Python 动态属性和特性</title>
    <link href="https://ttxsgoto.github.io/2018/01/30/python-dyn-attr-prop/"/>
    <id>https://ttxsgoto.github.io/2018/01/30/python-dyn-attr-prop/</id>
    <published>2018-01-30T14:42:28.000Z</published>
    <updated>2018-01-30T13:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="getattr-方法"><a href="#getattr-方法" class="headerlink" title="__getattr__ 方法"></a>__getattr__ 方法</h3><p>__getattr__(self, name) 作用仅当没有指定名称name的属性时才调用__getattr__方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</div><div class="line"><span class="keyword">import</span> keyword</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrozenJSON</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mapping)</span>:</span></div><div class="line">        self.__data = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> mapping.items():</div><div class="line">            <span class="keyword">if</span> keyword.iskeyword(key):</div><div class="line">                key += <span class="string">'_'</span></div><div class="line">            self.__data[key] = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">if</span> hasattr(self.__data, name):</div><div class="line">            <span class="keyword">return</span> getattr(self.__data, name)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> FrozenJSON.build(self.__data[name])</div><div class="line"> </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(cls, obj)</span>:</span>  <span class="comment"># 备选构造器</span></div><div class="line">        <span class="keyword">if</span> isinstance(obj, abc.Mapping):  <span class="comment"># 映射</span></div><div class="line">            <span class="keyword">return</span> cls(obj)</div><div class="line">        <span class="keyword">elif</span> isinstance(obj, abc.MutableSequence):  <span class="comment"># 列表</span></div><div class="line">            <span class="keyword">return</span> [cls.build(item) <span class="keyword">for</span> item <span class="keyword">in</span> obj]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> obj</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    grad = FrozenJSON(&#123;<span class="string">'name'</span>: <span class="string">'ttxs'</span>, <span class="string">'class'</span>: <span class="number">123</span>&#125;)</div><div class="line">    print(grod.name)</div><div class="line">    print(grad.class_)</div></pre></td></tr></table></figure></p>
<h3 id="property-解析"><a href="#property-解析" class="headerlink" title="@property 解析"></a>@property 解析</h3><ul>
<li>property 本身是一个类</li>
<li>property(fget=None, fset=None, fdel=None, doc=None)<br>所有的参数都是可选，如果没有把函数传给某个参数，那么得到的特性对象就不允许执行相应的操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></div><div class="line">        self.description = description</div><div class="line">        self.weight = weight</div><div class="line">        self.price = price</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.weight * self.price</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__weight</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_weight</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</div><div class="line">            self.__weight = value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</div><div class="line"> </div><div class="line">    weight = property(get_weight, set_weight, )</div><div class="line"> </div><div class="line">xxx = LineItem(<span class="string">'ttxs'</span>, <span class="number">10</span>, <span class="number">12.5</span>)</div><div class="line">print(xxx.subtotal())</div><div class="line">xxx.weight=<span class="number">-20</span></div><div class="line">print(xxx.subtotal())</div></pre></td></tr></table></figure>
<h3 id="处理属性的重要属性和函数"><a href="#处理属性的重要属性和函数" class="headerlink" title="处理属性的重要属性和函数"></a>处理属性的重要属性和函数</h3><ul>
<li><p>__class__ : 对象所属类的引用(obj.__class__  和type(obj)相同)</p>
</li>
<li><p>__getattr__：只在对象的类中寻找，而不在实例中寻找</p>
</li>
<li>__dict__： 存储对象或类的可写属性,有dict属性的对象，任何时候都能设置新属性</li>
<li>__slots__： 类可以定义这个属性，限制实例能有哪些属性</li>
<li>dir([object])：列出对象的大部分属性</li>
<li>getattr(obj, name[, defult])：从obj对象中获取name字符串对应的属性</li>
<li>hasattr(obj, name)：如果obj对象中存在指定的属性，或者能以某种方式通过obj对象获取指定的属性，返回true</li>
<li>setattr(obj, name, value)：把obj对象指定属性的值设置为value，前提是obj对象能接受这个值；这个函数可能会创建一个新的属性或者覆盖现有的属性</li>
<li>vars([obj])：返回obj对象的__dict__属性，如果实例所属的类定义了__slots__属性，实例没有__dict__属性，那么vars函数不能处理那个实例</li>
</ul>
<h3 id="处理属性的特殊方法"><a href="#处理属性的特殊方法" class="headerlink" title="处理属性的特殊方法"></a>处理属性的特殊方法</h3><ul>
<li>obj.attr 和 getattr(obj, ‘attr’, 42) 都会触发 Class.__getattribute__(obj, ‘attr’)方法</li>
<li>__delattr__(self, name) del 语句， 都会触发Class.__delattr__(obj, ‘attr’)方法</li>
<li>__dir__ 把对象传给dir函数时调用，列出属性</li>
<li>__getattr__(obj, name) 仅当获取指定的属性失败，搜索过obj，Class和超类之后调用</li>
<li>__getattribute__(self, name)尝试获取指定的属性时总会获取调用这个方法，寻找的属性是特殊属性或者特殊方法时除外</li>
<li>__setattr__(self, name, value) 尝试设置指定的属性时总会调用这个方法，点号和setattr内置函数会触发这个方法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;getattr-方法&quot;&gt;&lt;a href=&quot;#getattr-方法&quot; class=&quot;headerlink&quot; title=&quot;__getattr__ 方法&quot;&gt;&lt;/a&gt;__getattr__ 方法&lt;/h3&gt;&lt;p&gt;__getattr__(self, name) 作用仅当没有
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="property" scheme="https://ttxsgoto.github.io/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>Django 基于URL权限管理模块</title>
    <link href="https://ttxsgoto.github.io/2018/01/17/django-url-permisson/"/>
    <id>https://ttxsgoto.github.io/2018/01/17/django-url-permisson/</id>
    <published>2018-01-17T14:38:28.000Z</published>
    <updated>2018-01-19T15:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Django自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制权限，如对象级别的权限</p>
<p>现在引用了基于url的权限系统，可以控制用户访问一个接口的不同方法 ，可以很方便的控制权限；如：用户对于某个接口可以做到只拥有查看的权限而没有修改的权限，因为对于相同的url请求的方法不同</p>
<h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><p>1.类似于django自身权限模块，拥有用户和用户组两类权限<br>2.通过swagger 获取项目URL 列表用于分配权限<br>3.通过中间件来拦截判断用户对请求的url是否有对应的权限</p>
<h4 id="主要代码说明"><a href="#主要代码说明" class="headerlink" title="主要代码说明"></a>主要代码说明</h4><h5 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Permission, User</div><div class="line"><span class="keyword">from</span> .managers <span class="keyword">import</span> UserprofileManager</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Userprofile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户相关信息"""</span></div><div class="line"> </div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL, primary_key=<span class="keyword">True</span>)</div><div class="line">    sex = models.IntegerField(choices=(</div><div class="line">        (<span class="number">0</span>, <span class="string">'女性'</span>),</div><div class="line">        (<span class="number">1</span>, <span class="string">'男性'</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">'未填写'</span>)</div><div class="line">    ), default=<span class="number">2</span>, help_text=<span class="string">'sex'</span>)</div><div class="line">    groups = models.ManyToManyField(</div><div class="line">        <span class="string">'Group'</span>,</div><div class="line">        verbose_name=<span class="string">'user groups'</span>,</div><div class="line">        blank=<span class="keyword">True</span>,</div><div class="line">        through=<span class="string">'UserGroup'</span>,</div><div class="line">        through_fields=(<span class="string">'user'</span>, <span class="string">'group'</span>)</div><div class="line">    )</div><div class="line">    user_permissions = models.ManyToManyField(</div><div class="line">        <span class="string">'URLSource'</span>,</div><div class="line">        verbose_name=<span class="string">'user permissions'</span>,</div><div class="line">        blank=<span class="keyword">True</span>,</div><div class="line">        through=<span class="string">'UserURL'</span>,</div><div class="line">        through_fields=(<span class="string">'user'</span>, <span class="string">'url'</span>)</div><div class="line">    )</div><div class="line">    desc = models.CharField(<span class="string">u'描述'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>, default=<span class="string">''</span>)</div><div class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    objects = UserprofileManager()</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'user_profile'</span></div><div class="line">        verbose_name = <span class="string">u'用户信息'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        ordering = [<span class="string">'-create_time'</span>]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;'</span>.format(self.user.username)</div><div class="line"> </div><div class="line"><span class="meta">    @receiver(post_save, sender=User)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_user_profile</span><span class="params">(sender, instance=None, created=False, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> created:</div><div class="line">            Userprofile.objects.get_or_create(user=instance, defaults=&#123;<span class="string">'desc'</span>: instance.username&#125;)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_permissions</span><span class="params">(self, permissions)</span>:</span></div><div class="line">        <span class="string">"""用户添加权限"""</span></div><div class="line">        history_permission = self.userurl_set.all()  <span class="comment"># 现在已有的权限</span></div><div class="line">        <span class="keyword">if</span> history_permission:</div><div class="line">            <span class="comment"># 如果有就不添加,没有再添加,多余的删除</span></div><div class="line">            <span class="keyword">for</span> _permiss <span class="keyword">in</span> history_permission:</div><div class="line">                <span class="keyword">if</span> _permiss.url <span class="keyword">in</span> permissions:</div><div class="line">                    permissions.remove(_permiss.url)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    _permiss.delete()</div><div class="line">            permisson_list = [UserURL(user=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            permisson_list = [UserURL(user=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        self.userurl_set.bulk_create(permisson_list)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_groups</span><span class="params">(self, group)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        用户添加到组(目前只支持添加到单个组)</div><div class="line">        :param group: 权限组实例</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        user_group = self.usergroup_set.all()</div><div class="line">        <span class="keyword">if</span> user_group:</div><div class="line">            user_group.delete()</div><div class="line">        self.usergroup_set.create(group=group)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_group_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""获取用户所在组的权限"""</span></div><div class="line">        <span class="keyword">return</span> self.usergroup_set.all()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""获取用户单独关联的权限"""</span></div><div class="line">        <span class="keyword">return</span> self.userurl_set.all()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""该用户的所有权限,包括所在组权限和自己单独关联权限"""</span></div><div class="line">        permissions = set()</div><div class="line">        <span class="comment"># group 权限</span></div><div class="line">        group_permission = self.get_group_permissions()</div><div class="line">        <span class="keyword">for</span> permission <span class="keyword">in</span> group_permission:</div><div class="line">            URL = GroupURL.objects.filter(group=permission.group)</div><div class="line">            <span class="keyword">for</span> _permission <span class="keyword">in</span> URL:</div><div class="line">                permissions.add(_permission.url)</div><div class="line">        <span class="comment"># user 权限</span></div><div class="line">        url_permission = self.get_url_permissions()</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_permission:</div><div class="line">            permissions.add(url.url)</div><div class="line">        <span class="keyword">return</span> permissions</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLSource</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""URL资源信息"""</span></div><div class="line"> </div><div class="line">    url = models.CharField(<span class="string">u'url'</span>, max_length=<span class="number">128</span>)</div><div class="line">    action = models.CharField(<span class="string">u'请求方法'</span>, max_length=<span class="number">16</span>)</div><div class="line">    description = models.CharField(<span class="string">u'描述信息'</span>, max_length=<span class="number">256</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    parameters = models.CharField(<span class="string">u'参数, 逗号分隔'</span>, max_length=<span class="number">128</span>, default=<span class="string">''</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">u'URL信息'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        db_table = <span class="string">'url_source'</span></div><div class="line">        unique_together = ((<span class="string">'url'</span>, <span class="string">'action'</span>),)</div><div class="line">        ordering = [<span class="string">'id'</span>]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;-&#123;&#125;'</span>.format(self.id, self.description, self.action)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户组信息"""</span></div><div class="line"> </div><div class="line">    name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">'组名'</span>, unique=<span class="keyword">True</span>, help_text=<span class="string">'组名'</span>)</div><div class="line">    code = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">'用户组中文名'</span>, default=<span class="string">''</span>, help_text=<span class="string">'组code'</span>)</div><div class="line">    permissions = models.ManyToManyField(</div><div class="line">        URLSource,</div><div class="line">        verbose_name=<span class="string">'permissions'</span>,</div><div class="line">        blank=<span class="keyword">True</span>,</div><div class="line">        through=<span class="string">'GroupURL'</span>,</div><div class="line">        through_fields=(<span class="string">'group'</span>, <span class="string">'url'</span>)</div><div class="line">    )</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'group'</span></div><div class="line">        verbose_name = <span class="string">u'用户权限组'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_permissions</span><span class="params">(self, permissions)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        给组添加权限</div><div class="line">        :param permissons: 权限列表,filter查询列表</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        history_permission = self.groupurl_set.all()  <span class="comment"># 现在已有的权限</span></div><div class="line">        <span class="keyword">if</span> history_permission:</div><div class="line">            <span class="comment"># 如果有就不添加,没有再添加,多余的删除</span></div><div class="line">            <span class="keyword">for</span> _permiss <span class="keyword">in</span> history_permission:</div><div class="line">                <span class="keyword">if</span> _permiss.url <span class="keyword">in</span> permissions:</div><div class="line">                    permissions.remove(_permiss.url)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    _permiss.delete()</div><div class="line">            permisson_list = [GroupURL(group=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            permisson_list = [GroupURL(group=self, url=permisson) <span class="keyword">for</span> permisson <span class="keyword">in</span> permissions]</div><div class="line">        self.groupurl_set.bulk_create(permisson_list)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_group_permissions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""获取该组对应的权限列表"""</span></div><div class="line">        <span class="keyword">return</span> self.groupurl_set.all()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGroup</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户和组关联"""</span></div><div class="line"> </div><div class="line">    user = models.ForeignKey(Userprofile, verbose_name=<span class="string">u'用户'</span>)</div><div class="line">    group = models.ForeignKey(Group, verbose_name=<span class="string">u'组'</span>)</div><div class="line">    desc = models.CharField(<span class="string">u'其他信息'</span>, max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'user_groups'</span></div><div class="line">        verbose_name = <span class="string">u'用户和组关系'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        unique_together = ((<span class="string">'user'</span>, <span class="string">'group'</span>),)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.group)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserURL</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""用户和URL关联"""</span></div><div class="line"> </div><div class="line">    user = models.ForeignKey(Userprofile, verbose_name=<span class="string">u'用户'</span>)</div><div class="line">    url = models.ForeignKey(URLSource, verbose_name=<span class="string">u'URL'</span>)</div><div class="line">    desc = models.CharField(<span class="string">u'其他信息'</span>, max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'user_urls'</span></div><div class="line">        verbose_name = <span class="string">u'用户权限关系'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        unique_together = ((<span class="string">'user'</span>, <span class="string">'url'</span>),)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.url)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupURL</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""组和URL关系"""</span></div><div class="line"> </div><div class="line">    group = models.ForeignKey(Group, verbose_name=<span class="string">u'组'</span>)</div><div class="line">    url = models.ForeignKey(URLSource, verbose_name=<span class="string">u'URL'</span>)</div><div class="line">    desc = models.CharField(<span class="string">u'其他信息'</span>, max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        db_table = <span class="string">'group_urls'</span></div><div class="line">        verbose_name = <span class="string">u'用户权限组关系'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line">        unique_together = ((<span class="string">'group'</span>, <span class="string">'url'</span>),)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;'</span>.format(self.group, self.url)</div></pre></td></tr></table></figure>
<h5 id="middleware-py"><a href="#middleware-py" class="headerlink" title="middleware.py"></a>middleware.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseForbidden</div><div class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Userprofile</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</div><div class="line"><span class="keyword">from</span> .settings <span class="keyword">import</span> url_permisson_settings</div><div class="line"> </div><div class="line">logs = logging.getLogger(<span class="string">'django'</span>)</div><div class="line"> </div><div class="line">User = get_user_model()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPermissionMiddleWare</span><span class="params">(MiddlewareMixin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></div><div class="line">        response = &#123;</div><div class="line">            <span class="string">"status_code"</span>: <span class="number">403</span>,</div><div class="line">            <span class="string">"message"</span>: <span class="string">u"无权限操作,请联系管理员."</span></div><div class="line">        &#125;</div><div class="line">        path = request.path.split(<span class="string">'/'</span>)</div><div class="line">        <span class="keyword">if</span> path[<span class="number">1</span>] <span class="keyword">in</span> url_permisson_settings.ALL_ALLOW_URL:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(request.user, User):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">if</span> request.user.is_superuser:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            profile = Userprofile.objects.get(user=request.user)</div><div class="line">        <span class="keyword">except</span> Userprofile.DoesNotExist:</div><div class="line">            <span class="keyword">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class="string">'application/json'</span>)</div><div class="line">        method = request.method.lower()</div><div class="line">        path = request.path.strip()</div><div class="line">        <span class="keyword">if</span> method == <span class="string">'get'</span>:</div><div class="line">            parameter = []</div><div class="line">            <span class="keyword">for</span> _parameter <span class="keyword">in</span> request.GET.items():</div><div class="line">                parameter.append(_parameter[<span class="number">0</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                parameter_dict = json.loads(request.body)</div><div class="line">            <span class="keyword">except</span> Exception:</div><div class="line">                parameter_dict = &#123;&#125;</div><div class="line">            parameter = parameter_dict.keys()</div><div class="line">        all_permission = profile.get_all_permissions()</div><div class="line">        result = <span class="keyword">None</span></div><div class="line">        <span class="keyword">for</span> _url <span class="keyword">in</span> all_permission:</div><div class="line">            url = _url.url</div><div class="line">            action = _url.action</div><div class="line">            parameters = _url.parameters.split(<span class="string">','</span>)</div><div class="line">            <span class="keyword">if</span> method == action <span class="keyword">and</span> path == url <span class="keyword">and</span> (len(Counter(parameter) - Counter(parameters)) == <span class="number">0</span>):</div><div class="line">                result = <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</div><div class="line">            <span class="keyword">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class="string">'application/json'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<h4 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h4><p><img src="https://ttxsgoto.github.io/img/django/permission.png" alt=""></p>
<h4 id="Git地址"><a href="#Git地址" class="headerlink" title="Git地址"></a>Git地址</h4><p><a href="https://github.com/ttxsgoto/url_permission" target="_blank" rel="external">https://github.com/ttxsgoto/url_permission</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;Django自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="permisson" scheme="https://ttxsgoto.github.io/tags/permisson/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Mongo-connector同步mongo数据到ES</title>
    <link href="https://ttxsgoto.github.io/2017/12/27/elasticsearch-mongo-to-es/"/>
    <id>https://ttxsgoto.github.io/2017/12/27/elasticsearch-mongo-to-es/</id>
    <published>2017-12-27T13:16:47.000Z</published>
    <updated>2017-12-27T13:27:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li>通过mongo-connector将mongo数据实时同步到es中</li>
<li>mongo运行在replica-set模式，同时需要elastic2_doc_manager将数据写入ES</li>
<li>开启replica-set模式后，写入mongo的数据都可以同步到es，即使当前mongo-connector没有启动，启动后也会将数据写入es中</li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install mongo-connector</div><div class="line">pip install <span class="string">'elastic2-doc-manager[elastic5]'</span>    <span class="comment"># ES6.1版本也可使用</span></div></pre></td></tr></table></figure>
<h4 id="mongod-以replica-set模式运行"><a href="#mongod-以replica-set模式运行" class="headerlink" title="mongod 以replica-set模式运行"></a>mongod 以replica-set模式运行</h4><ul>
<li><p>服务端:mongod version为3.6.0</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mongod --replSet <span class="string">"rs0"</span> --dbpath /data/tools/mongodb<span class="number">-3.6</span><span class="number">.0</span>/data --port <span class="number">27018</span> --bind_ip <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></div></pre></td></tr></table></figure>
</li>
<li><p>客户端设置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 连接mongo</span></div><div class="line">./bin/mongo --host <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --port <span class="number">27018</span></div><div class="line"><span class="comment"># 配置复制集</span></div><div class="line">rs.initiate()   <span class="comment"># 初始化副本集</span></div><div class="line">rs.conf()       <span class="comment"># 验证副本集的配置</span></div><div class="line">rs.status()     <span class="comment"># 验证副本集的状态</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="mongo-connector启动"><a href="#mongo-connector启动" class="headerlink" title="mongo-connector启动"></a>mongo-connector启动</h4><p>mongo-connector -m 127.0.0.1:27018 -t 127.0.0.1:9200 -d elastic2_doc_manager</p>
<h4 id="数据测试"><a href="#数据测试" class="headerlink" title="数据测试"></a>数据测试</h4><ul>
<li><p>新增数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">use ttxsgoto</div><div class="line">db.test.insert(&#123;name:<span class="string">"ttxsgoto01"</span>, sex:<span class="string">"m"</span>, project:<span class="string">"python"</span>&#125;)</div><div class="line">db.test.insert(&#123;name:<span class="string">"ttxsgoto02"</span>, sex:<span class="string">"m"</span>, project:<span class="string">"java"</span>&#125;)</div><div class="line"> </div><div class="line"><span class="comment"># mongo查看数据</span></div><div class="line">db.test.find()</div><div class="line"> </div><div class="line"><span class="comment"># ES查看数据</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a42188f1db5d952cbcea0ef"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"java"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxsgoto02"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a4218501db5d952cbcea0ee"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"python"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxsgoto01"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">db.test.update(&#123;<span class="string">'name'</span>:<span class="string">'ttxsgoto01'</span>&#125;, &#123;$set:&#123;<span class="string">'name'</span>:<span class="string">'ttxs'</span>&#125;&#125;)</div><div class="line"> </div><div class="line"><span class="comment"># mongo查看数据</span></div><div class="line">db.test.find()</div><div class="line"> </div><div class="line"><span class="comment"># ES查看数据</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a42188f1db5d952cbcea0ef"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"java"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxsgoto02"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a4218501db5d952cbcea0ee"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"python"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxs"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">db.test.remove(&#123;<span class="string">'name'</span>:<span class="string">'ttxsgoto02'</span>&#125;)</div><div class="line"> </div><div class="line"><span class="comment"># ES查看数据</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"ttxsgoto"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"5a4218501db5d952cbcea0ee"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"project"</span>: <span class="string">"python"</span>,</div><div class="line">          <span class="string">"name"</span>: <span class="string">"ttxs"</span>,</div><div class="line">          <span class="string">"sex"</span>: <span class="string">"m"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删除db</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase() <span class="comment"># 删除数据库后，ES中对应的索引也被删除</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://docs.mongodb.com/manual/tutorial/deploy-replica-set/" target="_blank" rel="external">https://docs.mongodb.com/manual/tutorial/deploy-replica-set/</a><br><a href="https://github.com/mongodb-labs/elastic2-doc-manager" target="_blank" rel="external">https://github.com/mongodb-labs/elastic2-doc-manager</a><br><a href="http://blog.csdn.net/laoyang360/article/details/51842822" target="_blank" rel="external">http://blog.csdn.net/laoyang360/article/details/51842822</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;通过mongo-connector将mongo数据实时同步到es中&lt;/li&gt;
&lt;li&gt;mongo运行在replica-set模式
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Mongo-connector" scheme="https://ttxsgoto.github.io/tags/Mongo-connector/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Logstash-input-jdbc同步mysql数据到ES</title>
    <link href="https://ttxsgoto.github.io/2017/12/27/elasticsearch-mysql-to-es/"/>
    <id>https://ttxsgoto.github.io/2017/12/27/elasticsearch-mysql-to-es/</id>
    <published>2017-12-27T13:08:17.000Z</published>
    <updated>2017-12-27T13:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./logstash-plugin install  logstash-input-jdbc</div></pre></td></tr></table></figure>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>jdbc.conf<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    stdin &#123;</div><div class="line">    &#125;</div><div class="line">    jdbc &#123;</div><div class="line">      jdbc_connection_string =&gt; "jdbc:mysql://127.0.0.1:3307/test"</div><div class="line">      jdbc_user =&gt; "root"</div><div class="line">      jdbc_password =&gt; "root"</div><div class="line">      # jdbc driver</div><div class="line">      jdbc_driver_library =&gt; "/data/es/mysql-connector-java-5.1.39.jar"</div><div class="line">      jdbc_driver_class =&gt; "com.mysql.jdbc.Driver"</div><div class="line">      jdbc_paging_enabled =&gt; "true"</div><div class="line">      jdbc_page_size =&gt; "50000"</div><div class="line">      # 执行的sql的路径</div><div class="line">      statement_filepath =&gt; "sql.sql"</div><div class="line">      # 需要导入的sql语句查出来的数据</div><div class="line">      #statement =&gt; "SELECT * FROM zhihuquestion"</div><div class="line">      # 定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新</div><div class="line">      schedule =&gt; "* * * * *"</div><div class="line">      #schedule =&gt; "*/2 * * * *"    # 每2分钟更新一次</div><div class="line">      type =&gt; "test_index"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">filter &#123;</div><div class="line">    json &#123;</div><div class="line">        source =&gt; "message"</div><div class="line">        remove_field =&gt; ["message"]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; ["http://127.0.0.1:9200"]</div><div class="line">        index =&gt; "test_index"</div><div class="line">        document_type =&gt; "test"</div><div class="line">        #自增ID编号</div><div class="line">        document_id =&gt; "%&#123;id&#125;"</div><div class="line">    &#125;</div><div class="line">    # 以json格式输出</div><div class="line">    stdout &#123;</div><div class="line">        codec =&gt; json_lines</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">../bin/logstash -f jdbc.conf</div></pre></td></tr></table></figure>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html" target="_blank" rel="external">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html</a><br><a href="https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash" target="_blank" rel="external">https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash</a><br><a href="http://blog.csdn.net/laoyang360/article/details/51747266" target="_blank" rel="external">http://blog.csdn.net/laoyang360/article/details/51747266</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成&lt;/p&gt;

    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Logstash-input-jdbc" scheme="https://ttxsgoto.github.io/tags/Logstash-input-jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch ELK应用</title>
    <link href="https://ttxsgoto.github.io/2017/12/26/elasticsearch-elk/"/>
    <id>https://ttxsgoto.github.io/2017/12/26/elasticsearch-elk/</id>
    <published>2017-12-26T14:46:51.000Z</published>
    <updated>2017-12-27T13:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ELK说明"><a href="#ELK说明" class="headerlink" title="ELK说明"></a>ELK说明</h4><ul>
<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等</li>
<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索）</li>
<li>kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志</li>
</ul>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>1.方便日志查询，统计排查问题<br>2.报表展示，不用登录每台服务器查看日志</p>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>Logstash: logstash server端用来搜集日志；</p>
<p>Elasticsearch: 存储各类日志；</p>
<p>Kibana: web化接口用作查寻和可视化日志；</p>
<p>搭建部署(略)</p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>收集syslog,nginx access/error日志，mongo日志，程序日志，说明如下：</p>
<p>nignx 访问日志：因nginx访问日志可自定义，这里自定义为json格式，方便ES存储和索引<br>格式定义如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">log_format main_json <span class="string">'&#123; "timestamp": "$time_local", '</span></div><div class="line"><span class="string">'"remote_addr": "$remote_addr", '</span></div><div class="line"><span class="string">'"remote_user": "$remote_user", '</span></div><div class="line"><span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></div><div class="line"><span class="string">'"request_time": "$request_time", '</span></div><div class="line"><span class="string">'"status": "$status", '</span></div><div class="line"><span class="string">'"domain": "$host", '</span></div><div class="line"><span class="string">'"request": "$request", '</span></div><div class="line"><span class="string">'"request_method": "$request_method", '</span></div><div class="line"><span class="string">'"http_referrer": "$http_referer", '</span></div><div class="line"><span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></div><div class="line"><span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></div><div class="line"><span class="string">'"http_user_agent": "$http_user_agent" &#125;'</span>;</div></pre></td></tr></table></figure></p>
<p>其他日志收集见配置文件，说明如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; [ "/var/log/syslog" ]    #定义日志路径</div><div class="line">        type =&gt; "syslog"                </div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        ignore_older =&gt;0</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "/var/log/nginx/*access.log"</div><div class="line">        codec =&gt; json</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        type =&gt; "nginx-acc"</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; "/var/log/nginx/*error.log"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        type =&gt; "nginx-error"</div><div class="line">        ignore_older =&gt;0</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; [ "/data/mongo/mongo.log" ]</div><div class="line">        type =&gt; "mongo"</div><div class="line">        start_position =&gt; "beginning"</div><div class="line">        #ignore_older =&gt;0</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">filter &#123;</div><div class="line">    if [type] == "syslog" &#123;</div><div class="line">        grok &#123;    #grok 功能将字符串转换为相应的字段，方便检索</div><div class="line">            match =&gt; &#123; "message" =&gt; "%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;" &#125;</div><div class="line">            add_field =&gt; [ "received_at", "%&#123;@timestamp&#125;" ]</div><div class="line">            add_field =&gt; [ "received_from", "%&#123;host&#125;" ]</div><div class="line">            &#125;    </div><div class="line">            date &#123;</div><div class="line">                    match =&gt; [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">    if [type] == "mongo" &#123;</div><div class="line">                grok &#123;</div><div class="line">#mongo_v3                        match =&gt; ["message","%&#123;TIMESTAMP_ISO8601:timestamp&#125;\s+%&#123;MONGO3_SEVERITY:severity&#125;\s+%&#123;MONGO3_COMPONENT:component&#125;\s+(?:\[%&#123;DATA:context&#125;\])?\s+%&#123;GREEDYDATA:body&#125;"]</div><div class="line">            match =&gt; ["message","%&#123;SYSLOGTIMESTAMP:timestamp&#125; \[%&#123;WORD:component&#125;\] %&#123;GREEDYDATA:body&#125;"]     #mongo_v2</div><div class="line">               &#125;</div><div class="line">                if[body]=~"ms$" &#123;</div><div class="line">                                        grok &#123;</div><div class="line">                                                match =&gt; ["body","query\s+%&#123;WORD:db_name&#125;\.%&#123;WORD:collection_name&#125;.*&#125;.*\&#125;(\s+%&#123;NUMBER:spend_time:int&#125;ms$)?"]</div><div class="line">                                        &#125;</div><div class="line">                                &#125;</div><div class="line">                date &#123;</div><div class="line">                        match =&gt; [ "timestamp", "UNIX", "YYYY-MM-dd HH:mm:ss", "ISO8601" ]</div><div class="line">                        remove_field =&gt; ["timestamp"]</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    if [type] == "nginx-error" &#123;</div><div class="line">                grok &#123;</div><div class="line">                        match =&gt; &#123; "message" =&gt; "(?&lt;timestamp&gt;%&#123;YEAR&#125;[./-]%&#123;MONTHNUM&#125;[./-]%&#123;MONTHDAY&#125;[- ]%&#123;TIME&#125;) \[%&#123;LOGLEVEL:severity&#125;\] %&#123;POSINT:pid&#125;#%&#123;NUMBER&#125;: %&#123;GREEDYDATA:errormessage&#125;(?:, client: (?&lt;client&gt;%&#123;IP&#125;|%&#123;HOSTNAME&#125;))(?:, server: %&#123;IPORHOST:server&#125;)(?:, request: %&#123;QS:request&#125;)?(?:, upstream: \"%&#123;URI:upstream&#125;\")?(?:, host: %&#123;QS:host&#125;)?(?: referrer: \"%&#123;URI:referrer&#125;|-\")?" &#125;</div><div class="line">                        overwrite =&gt; [ "message" ]</div><div class="line">                &#125;</div><div class="line">                date &#123;</div><div class="line">                        match =&gt; [ "nginx_error_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]</div><div class="line">                        remove_field =&gt; [ "timestamp" ]</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    if [type] == "nginx-acc" &#123;</div><div class="line">        elasticsearch &#123;    #存储</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">            index =&gt; "nginx_access-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    if [type] == "nginx-error" &#123;</div><div class="line">        elasticsearch &#123;</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">            index =&gt; "nginx_error-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    if [type] == "syslog" &#123;</div><div class="line">        elasticsearch &#123;</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">            index =&gt; "syslog-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if [type] == "mongo" &#123;</div><div class="line">                elasticsearch &#123;</div><div class="line">            hosts =&gt; ["127.0.0.1:9200"]</div><div class="line">                        index =&gt; "mongo-%&#123;+YYYY.MM.dd&#125;"</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>采集到数据展示如下：<br><img src="https://ttxsgoto.github.io/img/elk/elk.png" alt="elk"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ELK说明&quot;&gt;&lt;a href=&quot;#ELK说明&quot; class=&quot;headerlink&quot; title=&quot;ELK说明&quot;&gt;&lt;/a&gt;ELK说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="ELK" scheme="https://ttxsgoto.github.io/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Elasticsearch_dsl 基本查询</title>
    <link href="https://ttxsgoto.github.io/2017/12/24/elasticsearch-elasticsearch-dsl/"/>
    <id>https://ttxsgoto.github.io/2017/12/24/elasticsearch-elasticsearch-dsl/</id>
    <published>2017-12-24T07:25:33.000Z</published>
    <updated>2017-12-27T13:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p> 通过elasticsearch_dsl提供的API操作es进行基本查询操作</p>
<h4 id="创建mapping"><a href="#创建mapping" class="headerlink" title="创建mapping"></a>创建mapping</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> elasticsearch_dsl <span class="keyword">import</span> DocType, Date, Keyword, Text, Integer</div><div class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</div><div class="line"> </div><div class="line">connections.create_connection(hosts=[<span class="string">"localhost"</span>])</div><div class="line"><span class="comment"># connections.create_connection(hosts=["http://admin:admin@127.0.0.1:8080"])    # 使用认证连接</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhihuQ</span><span class="params">(DocType)</span>:</span></div><div class="line">    id = Integer()</div><div class="line">    zhihu_id = Integer()                    <span class="comment"># 知乎idlong</span></div><div class="line">    topics = Keyword()                      <span class="comment"># 主题text</span></div><div class="line">    url = Keyword()                         <span class="comment"># urlkeyword</span></div><div class="line">    title = Text(analyzer=<span class="string">"ik_max_word"</span>)    <span class="comment"># 标题text</span></div><div class="line">    content = Text(analyzer=<span class="string">"ik_max_word"</span>)  <span class="comment"># 内容text</span></div><div class="line">    answer_num = Integer()                  <span class="comment"># 回答数量int</span></div><div class="line">    comments_num = Integer()                <span class="comment"># 评论数量int</span></div><div class="line">    watch_user_num = Integer()              <span class="comment"># 关注者数量int</span></div><div class="line">    click_num = Integer()                   <span class="comment"># 浏览数量int</span></div><div class="line">    crawl_time = Date(format=<span class="string">'date_optional_time||yyyy-MM-dd HH:mm:ss'</span>) <span class="comment"># 创建时间</span></div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        index = <span class="string">"zhihuquestion"</span></div><div class="line">        doc_type = <span class="string">"question"</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    ZhihuQ.init()   <span class="comment"># 初始化mapping</span></div></pre></td></tr></table></figure>
<h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><h5 id="查询所有，指定返回数量-设置分页"><a href="#查询所有，指定返回数量-设置分页" class="headerlink" title="查询所有，指定返回数量,设置分页"></a>查询所有，指定返回数量,设置分页</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_all"</span>: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">   <span class="string">"from"</span>: <span class="number">0</span>,</div><div class="line">   <span class="string">"size"</span>: <span class="number">5</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># python：</span></div><div class="line">search = ZhihuQ.search()</div><div class="line">result = search.query().extra(size=<span class="number">1000</span>)[<span class="number">0</span>:<span class="number">5</span>]</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h5><p>使用分词处理后查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"match"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: <span class="string">"python"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">"match"</span>, title=<span class="string">'Python'</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="多字段查询"><a href="#多字段查询" class="headerlink" title="多字段查询"></a>多字段查询</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"query"</span>: <span class="string">"python"</span>,</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span>,</div><div class="line">                <span class="string">"content"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'python'</span>, fields=[<span class="string">'title'</span>, <span class="string">'content'</span>])</div><div class="line">q = search.query(multi_match)</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h5><p>值不做解析处理，直接查询,完全匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"term"</span>: &#123;</div><div class="line">            <span class="string">"topics"</span>: <span class="string">"python"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'term'</span>, title=<span class="string">'Python'</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="terms查询-多词条"><a href="#terms查询-多词条" class="headerlink" title="terms查询(多词条)"></a>terms查询(多词条)</h5><p>任何一个满足都可以返回数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"terms"</span>: &#123;</div><div class="line">            <span class="string">"topics"</span>: [</div><div class="line">                <span class="string">"python"</span>,</div><div class="line">                <span class="string">"Python"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'terms'</span>, topics=[<span class="string">'Python'</span>, <span class="string">'python'</span>])</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="词条-Term-查询-排序-Sorted"><a href="#词条-Term-查询-排序-Sorted" class="headerlink" title="词条(Term)查询-排序(Sorted)"></a>词条(Term)查询-排序(Sorted)</h5><p>指定返回字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"sort"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"crawl_time"</span>: &#123;</div><div class="line">                <span class="string">"order"</span>: <span class="string">"asc"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"terms"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: [</div><div class="line">                <span class="string">"Python"</span>,</div><div class="line">                <span class="string">"python"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"_source"</span>: [</div><div class="line">        <span class="string">"crawl_time"</span></div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'terms'</span>, title=[<span class="string">'Python'</span>, <span class="string">'python'</span>]).source([<span class="string">'crawl_time'</span>]).sort(&#123;<span class="string">'crawl_time'</span>:&#123;<span class="string">"order"</span> : <span class="string">"asc"</span>,&#125;&#125;)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="range-范围查询"><a href="#range-范围查询" class="headerlink" title="range 范围查询"></a>range 范围查询</h5><p>用于日期、数字和字符串类型的字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"Python"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"range"</span>: &#123;</div><div class="line">                        <span class="string">"crawl_time"</span>: &#123;</div><div class="line">                            <span class="string">"gte"</span>: <span class="string">"2017-12-21 19:19:44"</span>,</div><div class="line">                            <span class="string">"lte"</span>: <span class="string">"now"</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">"match"</span>, title=<span class="string">'Python'</span>).query(<span class="string">"range"</span>, crawl_time=&#123;<span class="string">'gte'</span>:<span class="string">'2017-12-21 19:19:44'</span>,<span class="string">'lte'</span>: <span class="string">'now'</span>&#125;)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="bool查询"><a href="#bool查询" class="headerlink" title="bool查询"></a>bool查询</h5><ul>
<li>must 等同于 AND</li>
<li>must_not 等同于 NOT</li>
<li>should 等同于 OR</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"python"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"c"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">q = Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) &amp; Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">q = Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) | Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">q = ~Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) &amp; ~Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">result = search.query(q)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="highlighting高亮"><a href="#highlighting高亮" class="headerlink" title="highlighting高亮"></a>highlighting高亮</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"python"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"match"</span>: &#123;</div><div class="line">                        <span class="string">"title"</span>: <span class="string">"c"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"highlight"</span>: &#123;</div><div class="line">        <span class="string">"fields"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: &#123;</div><div class="line">                <span class="string">"fragment_size"</span>: <span class="number">50</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">q = Q(<span class="string">"match"</span>, title=<span class="string">'python'</span>) &amp; Q(<span class="string">"match"</span>, title=<span class="string">'c'</span>)</div><div class="line">s = search.query(q)</div><div class="line">result = s.highlight(<span class="string">'title'</span>, fragment_size=<span class="number">50</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure>
<h5 id="模糊-fuzzy-查询"><a href="#模糊-fuzzy-查询" class="headerlink" title="模糊(fuzzy)查询"></a>模糊(fuzzy)查询</h5><p>在 Match检索 和多匹配检索中可以启用模糊匹配来捕捉拼写错误;模糊度是基于原始单词的编辑距离来指定,当术语长度大于 5 个字符时，AUTO 的模糊值等同于指定值 “2”。但是，80％ 拼写错误的编辑距离为 1，所以，将模糊值设置为 1 可能会提高您的整体搜索性能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span>,</div><div class="line">                <span class="string">"content"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"fuzziness"</span>: <span class="string">"AUTO"</span>,</div><div class="line">            <span class="string">"query"</span>: <span class="string">"Python"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'Python'</span>, fields=[<span class="string">'title'</span>, <span class="string">'content'</span>], fuzziness=<span class="string">'AUTO'</span>)</div><div class="line">q = search.query(multi_match)</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="通配符-wildcard-查询"><a href="#通配符-wildcard-查询" class="headerlink" title="通配符(wildcard)查询"></a>通配符(wildcard)查询</h5><p>通配符查询允许指定匹配的模式，而不是整个词组（term）检索</p>
<p>？ 匹配任何字符, * 匹配零个或多个字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"wildcard"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: <span class="string">"pyth*"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">result = search.query(<span class="string">'wildcard'</span>, title=<span class="string">'python*'</span>)</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="match-phrase查询-短语查询"><a href="#match-phrase查询-短语查询" class="headerlink" title="match_phrase查询(短语查询)"></a>match_phrase查询(短语查询)</h5><p>匹配短语查询要求查询字符串中的所有词都存在于文档中，按照查询字符串中指定的顺序并且彼此靠近;默认情况下，这些词必须完全相邻，但可以指定偏离值（slop value)，该值指示在仍然考虑文档匹配的情况下词与词之间的偏离值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"type"</span>: <span class="string">"phrase"</span>,</div><div class="line">            <span class="string">"slop"</span>: <span class="number">6</span>,</div><div class="line">            <span class="string">"query"</span>: <span class="string">"python下载"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'python下载'</span>, fields=[<span class="string">'title'</span>],</div><div class="line">                                 type=<span class="string">'phrase'</span>,</div><div class="line">                                 slop=<span class="number">4</span></div><div class="line">                                 )</div><div class="line">q = search.query(multi_match)</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="短语前缀-Match-Phrase-Prefix-查询"><a href="#短语前缀-Match-Phrase-Prefix-查询" class="headerlink" title="短语前缀(Match Phrase Prefix)查询"></a>短语前缀(Match Phrase Prefix)查询</h5><p>匹配词组前缀查询在查询时提供搜索即时类型或“相对简单”的自动完成版本，而无需以任何方式准备数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"multi_match"</span>: &#123;</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                <span class="string">"title"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"type"</span>: <span class="string">"phrase_prefix"</span>,</div><div class="line">            <span class="string">"slop"</span>: <span class="number">2</span>,</div><div class="line">            <span class="string">"query"</span>: <span class="string">"python精通"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">multi_match = MultiMatch(query=<span class="string">'python精通'</span>, fields=[<span class="string">'title'</span>],</div><div class="line">                                 type=<span class="string">'phrase_prefix'</span>,</div><div class="line">                                 slop=<span class="number">2</span></div><div class="line">                                 )</div><div class="line">q = search.query(multi_match).source([<span class="string">'title'</span>])</div><div class="line">result = q.query()</div><div class="line">data = result.execute()</div><div class="line">data = data.to_dict()[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="aggregation聚合"><a href="#aggregation聚合" class="headerlink" title="aggregation聚合"></a>aggregation聚合</h5><p>聚合类型: Bucketing, Metric, Matrix, Pipeline<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># metric 计算相关, max, min, avg等</span></div><div class="line">GET zhihuquestion/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"match_all"</span>: &#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"aggs"</span>: &#123;</div><div class="line">        <span class="string">"max_click_num"</span>: &#123;</div><div class="line">            <span class="string">"max"</span>: &#123;</div><div class="line">                <span class="string">"field"</span>: <span class="string">"click_num"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># python</span></div><div class="line">_agg = A(<span class="string">'max'</span>, field=<span class="string">'click_num'</span>)</div><div class="line">result = search.aggs.metric(<span class="string">'max_click_num'</span>, _agg)</div><div class="line">data = result.execute()</div><div class="line"><span class="keyword">print</span> data.aggregations.max_click_num   <span class="comment"># 得到点击量最大的值</span></div><div class="line"> </div><div class="line"><span class="comment"># bucket</span></div><div class="line">_agg = A(<span class="string">'terms'</span>, field=<span class="string">'comment'</span>)</div><div class="line">f = search.aggs.bucket(<span class="string">'bucket_comment'</span>, _agg)</div><div class="line">query_word = json.dumps(f.to_dict())</div><div class="line"><span class="keyword">print</span> query_word</div><div class="line">response = search.execute()</div><div class="line"><span class="keyword">print</span> response.aggregations.bucket_comment.buckets</div><div class="line"><span class="keyword">print</span> response.to_dict()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt; 通过elasticsearch_dsl提供的API操作es进行基本查询操作&lt;/p&gt;
&lt;h4 id=&quot;创建mapping&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://ttxsgoto.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch_dsl" scheme="https://ttxsgoto.github.io/tags/Elasticsearch-dsl/"/>
    
  </entry>
  
  <entry>
    <title>Python Sqlalchemy模块</title>
    <link href="https://ttxsgoto.github.io/2017/12/24/python-sqlalchemy/"/>
    <id>https://ttxsgoto.github.io/2017/12/24/python-sqlalchemy/</id>
    <published>2017-12-24T04:27:23.000Z</published>
    <updated>2017-12-24T13:16:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line"><span class="comment"># echo=True是开启调试</span></div><div class="line"><span class="comment"># 连接到数据库, 返回engine实例,只有触发数据库事件,才连接数据库操作</span></div><div class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:root@127.0.0.1:3307/test?charset=utf8'</span>, echo=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 声明映射, 通常一个应用使用一个base实例，所有实体类都应该继承此类对象</span></div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="comment"># 定义表字段结构</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    CREATE TABLE addresses (</div><div class="line">            id INTEGER NOT NULL AUTO_INCREMENT,</div><div class="line">            email_address VARCHAR(30) NOT NULL,</div><div class="line">            user_id INTEGER,</div><div class="line">            PRIMARY KEY (id),</div><div class="line">            FOREIGN KEY(user_id) REFERENCES ttxs_users (id)</div><div class="line">        )</div><div class="line">    """</div><div class="line">    __tablename__ = <span class="string">'addresses'</span></div><div class="line">    </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    email_address = Column(String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</div><div class="line">    user_id = Column(Integer, ForeignKey(<span class="string">'ttxs_users.id'</span>))</div><div class="line">    user = relationship(<span class="string">"User"</span>, back_populates=<span class="string">'addresses'</span>) <span class="comment"># 通过relationship()来指明关系</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;Address(email_address='%s')&gt;"</span> % self.email_address</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    CREATE TABLE ttxs_users (</div><div class="line">        id INTEGER NOT NULL AUTO_INCREMENT,</div><div class="line">        name VARCHAR(30),</div><div class="line">        fullname VARCHAR(30),</div><div class="line">        password VARCHAR(30),</div><div class="line">        PRIMARY KEY (id)</div><div class="line">    )</div><div class="line">    """</div><div class="line">    __tablename__ = <span class="string">'ttxs_users'</span></div><div class="line">    </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">30</span>))</div><div class="line">    fullname = Column(String(<span class="number">30</span>))</div><div class="line">    password = Column(String(<span class="number">30</span>))</div><div class="line">    addresses = relationship(Address, order_by=Address.id, back_populates=<span class="string">"user"</span>) <span class="comment"># 通过relationship()来指明关系</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(name='%s', fullname='%s', password='%s')&gt;"</span> % (self.name, self.fullname, self.password)</div><div class="line"> </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(cls, **kwargs)</span>:</span></div><div class="line">    	<span class="keyword">try</span>:</div><div class="line">            r = cls(**kwargs)</div><div class="line">            session.add(r)</div><div class="line">            session.commit()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            session.rollback()</div><div class="line">            <span class="keyword">raise</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div><div class="line"> </div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">ed_user = User(name=<span class="string">'ttxsgoto'</span>, fullname=<span class="string">'ttxsgoto'</span>, password=<span class="string">'password'</span>)</div><div class="line">print(ed_user.name, ed_user.id) <span class="comment"># ttxsgoto None</span></div><div class="line"> </div><div class="line">ed_user.password = <span class="string">'f8s7ccs'</span></div><div class="line"> </div><div class="line"><span class="comment"># 添加ed_user的email_address</span></div><div class="line">ed_user.addresses = [</div><div class="line">    Address(email_address=<span class="string">'ttxsgoto01@163.com'</span>),</div><div class="line">    Address(email_address=<span class="string">'ttxsgoto02@163.com'</span>)</div><div class="line">]</div><div class="line"> </div><div class="line"><span class="comment"># 创建会话, Session是真正与数据库通信的handler</span></div><div class="line"><span class="comment"># 绑定数据库,方法一</span></div><div class="line">Session = sessionmaker(bind=engine)</div><div class="line"><span class="comment"># 绑定数据库,方法二</span></div><div class="line"><span class="comment"># Session = sessionmaker()</span></div><div class="line"><span class="comment"># Session.configure(bind=engine)</span></div><div class="line"> </div><div class="line">session = Session()</div><div class="line"> </div><div class="line"><span class="comment"># 插入数据</span></div><div class="line">session.add(ed_user)</div><div class="line"><span class="comment"># 插入多条数据</span></div><div class="line">session.add_all([</div><div class="line">    User(name=<span class="string">'ttxsgoto01'</span>, fullname=<span class="string">'ttxsgoto01'</span>, password=<span class="string">'ttxsgoto01'</span>),</div><div class="line">    User(name=<span class="string">'ttxsgoto02'</span>, fullname=<span class="string">'ttxsgoto02'</span>, password=<span class="string">'ttxsgoto02'</span>),</div><div class="line">    User(name=<span class="string">'ttxsgoto03'</span>, fullname=<span class="string">'ttxsgoto03'</span>, password=<span class="string">'ttxsgoto03'</span>)</div><div class="line">])</div><div class="line"> </div><div class="line"><span class="comment"># 提交写入数据</span></div><div class="line">session.flush()</div><div class="line">session.commit()</div><div class="line"> </div><div class="line">our_user = session.query(User).filter_by(name=<span class="string">'ttxsgoto'</span>).first()</div><div class="line">print(ed_user <span class="keyword">is</span> our_user)</div><div class="line">print(our_user)</div><div class="line">print(session.dirty)</div><div class="line">print(session.new)</div><div class="line"> </div><div class="line"><span class="comment"># 查询</span></div><div class="line"><span class="keyword">for</span> instance <span class="keyword">in</span> session.query(User).order_by(User.id):</div><div class="line">    print(instance.name, instance.fullname, instance.password)</div><div class="line"> </div><div class="line"><span class="comment">############################## 相关查询 ##############################</span></div><div class="line"><span class="comment"># ==</span></div><div class="line">querys = session.query(User).filter(User.name == <span class="string">'ttxsgoto'</span>)   <span class="comment">#得到的是查询sql语句</span></div><div class="line"><span class="comment"># !=</span></div><div class="line">querys = session.query(User).filter(User.name != <span class="string">'ttxsgoto'</span>)</div><div class="line"><span class="comment"># like</span></div><div class="line">querys = session.query(User).filter(User.name.like(<span class="string">'%ttxsgoto%'</span>))</div><div class="line"><span class="comment"># ilike</span></div><div class="line">querys = session.query(User).filter(User.name.ilike(<span class="string">'%ttxsgoto%'</span>))</div><div class="line"><span class="comment"># in</span></div><div class="line">querys = session.query(User).filter(User.name.in_([<span class="string">'ttxsgoto01'</span>, <span class="string">'ttxsgoto02'</span>]))</div><div class="line"><span class="comment"># not in</span></div><div class="line">querys = session.query(User).filter(~User.name.in_([<span class="string">'ttxsgoto01'</span>, <span class="string">'ttxsgoto02'</span>]))</div><div class="line"><span class="comment"># is null</span></div><div class="line">querys = session.query(User).filter(User.name == <span class="keyword">None</span>)</div><div class="line"><span class="comment"># is not null</span></div><div class="line">querys = session.query(User).filter(User.name != <span class="keyword">None</span>)</div><div class="line"><span class="comment"># and</span></div><div class="line">querys = session.query(User).filter(User.name == <span class="string">'ttxsgoto'</span>, User.password == <span class="string">'f8s7ccs'</span>)</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="keyword">from</span>  sqlalchemy <span class="keyword">import</span> or_</div><div class="line">querys = session.query(User).filter(or_(User.name == <span class="string">'ttxsgoto'</span>, User.name == <span class="string">'ttxsgoto01'</span>))</div><div class="line"><span class="comment"># match</span></div><div class="line">querys = session.query(User).filter(User.name.match(<span class="string">'ttxsgoto'</span>))</div><div class="line"><span class="comment"># all()</span></div><div class="line">querys = session.query(User).all()</div><div class="line"><span class="comment"># first()</span></div><div class="line">querys = session.query(User).first()</div><div class="line">print(querys.name)</div><div class="line"><span class="comment"># one() / one_or_none()</span></div><div class="line">querys = session.query(User.id == <span class="number">13</span>).one()</div><div class="line"><span class="comment"># count</span></div><div class="line">querys = session.query(User).filter(User.name.like(<span class="string">'%ttxsgoto%'</span>)).count()</div><div class="line"><span class="keyword">for</span> query <span class="keyword">in</span> querys:</div><div class="line">    print(<span class="string">'query---&gt;'</span>, query.name)</div><div class="line"><span class="comment"># Querying with joins</span></div><div class="line">querys =session.query(User, Address).filter(User.id==Address.user_id).filter(Address.email_address==<span class="string">'ttxsgoto01@163.com'</span>).all()</div><div class="line"><span class="comment"># join</span></div><div class="line">querys =session.query(User).join(Address).filter(Address.email_address==<span class="string">'ttxsgoto01@163.com'</span>).all() <span class="comment"># 这里查询的是User表中信息</span></div><div class="line">querys = session.query(User).join(Address, User.id == Address.user_id).all()</div><div class="line"><span class="keyword">for</span> u, a <span class="keyword">in</span> querys:</div><div class="line">    print(<span class="string">'query---&gt;'</span>, u.name, a.email_address)</div><div class="line"> </div><div class="line"><span class="comment"># delete</span></div><div class="line">user = session.query(User).filter_by(id=<span class="number">6</span>).first()</div><div class="line">session.delete(user)</div><div class="line">session.commit()</div></pre></td></tr></table></figure>
<h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><h5 id="一对多-one-to-many"><a href="#一对多-one-to-many" class="headerlink" title="一对多(one to many)"></a>一对多(one to many)</h5><p>一对多(one to many) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在一的一方为一对多</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line">DB_URL = <span class="string">'sqlite:///test.db'</span></div><div class="line">engine = create_engine(DB_URL)</div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(<span class="string">'Child'</span>, backref=<span class="string">'parent'</span>)  <span class="comment"># backref建立双向关系</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'parent.id'</span>))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure>
<h5 id="多对一-many-to-one"><a href="#多对一-many-to-one" class="headerlink" title="多对一(many to one)"></a>多对一(many to one)</h5><p>多对一(many to one) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在多的一方为多对一<br>一个child可能有多个parent(父亲和母亲),这里的外键(child_id)和relationship(child)都定义在多(parent)的一方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line">DB_URL = <span class="string">'sqlite:///test.db'</span></div><div class="line">engine = create_engine(DB_URL)</div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'parent1'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    child_id = Column(Integer, ForeignKey(<span class="string">'child1.id'</span>))</div><div class="line">    child = relationship(<span class="string">'Child1'</span>, backref=<span class="string">'parent1'</span>, cascade= <span class="string">'all'</span>)   <span class="comment"># cascade设置关联删除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'child1'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>
<h5 id="一对一-one-to-one"><a href="#一对一-one-to-one" class="headerlink" title="一对一(one to one)"></a>一对一(one to one)</h5><p>只需在一对多的relationship加上一个参数uselist=False,或者在多对一的backref中添加uselist=False ,即将对应关系变成一对一</p>
<h5 id="多对多-many-to-many"><a href="#多对多-many-to-many" class="headerlink" title="多对多(many to many)"></a>多对多(many to many)</h5><p>需要定义一张中间关联表来完成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"> </div><div class="line">DB_URL = <span class="string">'sqlite:///test.db'</span></div><div class="line">engine = create_engine(DB_URL)</div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Association</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'association'</span></div><div class="line"> </div><div class="line">    left_id = Column(Integer, ForeignKey(<span class="string">'left.id'</span>), primary_key=<span class="keyword">True</span>)</div><div class="line">    right_id = Column(Integer, ForeignKey(<span class="string">'right.id'</span>), primary_key=<span class="keyword">True</span>)</div><div class="line">    extra_data = Column(String(<span class="number">50</span>))</div><div class="line">    child = relationship(<span class="string">"Child2"</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'left'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    children = relationship(</div><div class="line">        <span class="string">"Association"</span>,)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'right'</span></div><div class="line"> </div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 将表结构写入数据库中</span></div><div class="line">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作&lt;
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="Sqlalchemy" scheme="https://ttxsgoto.github.io/tags/Sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy Scrapy+Selenium抓取本站博客</title>
    <link href="https://ttxsgoto.github.io/2017/12/17/scrapy-selenium/"/>
    <id>https://ttxsgoto.github.io/2017/12/17/scrapy-selenium/</id>
    <published>2017-12-17T13:12:00.000Z</published>
    <updated>2017-12-17T14:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li>通过scrapy+selenium对本站blog进行抓取</li>
<li>抓取到的数据通过sqlalchemy操作写入mysql</li>
<li>用来练习scrapy+selenium模拟操作浏览器，没有对blog正文进行相应处理</li>
</ol>
<h4 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h4><ul>
<li>定义表结构(models.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> sqlalchemy.engine.url <span class="keyword">import</span> URL</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, Text, DateTime, Date</div><div class="line"><span class="keyword">from</span> tutorial_spider.settings <span class="keyword">import</span> MYSQL_DATABASE</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> create_engine(URL(**MYSQL_DATABASE), echo=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_news_table</span><span class="params">(engine)</span>:</span></div><div class="line">    Base.metadata.create_all(engine)</div><div class="line"> </div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoBlog</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'spider_ttxsgotoblog'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    title = Column(String(<span class="number">32</span>))          <span class="comment"># 标题</span></div><div class="line">    url = Column(String(<span class="number">128</span>))           <span class="comment"># url</span></div><div class="line">    publish = Column(String(<span class="number">32</span>))        <span class="comment"># 发布日期</span></div><div class="line">    content = Column(Text)              <span class="comment"># 内容</span></div><div class="line">    classify = Column(String(<span class="number">32</span>))       <span class="comment"># 分类</span></div><div class="line">    lable = Column(String(<span class="number">32</span>))          <span class="comment"># 标签</span></div><div class="line">    create_time = Column(String(<span class="number">32</span>))    <span class="comment"># 创建时间</span></div></pre></td></tr></table></figure>
<ul>
<li>定义item(items.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> tutorial_spider.models <span class="keyword">import</span> TtxsgotoBlog</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line"> </div><div class="line">    title = scrapy.Field()          <span class="comment"># 标题</span></div><div class="line">    url = scrapy.Field()            <span class="comment"># url</span></div><div class="line">    publish = scrapy.Field()        <span class="comment"># 发布日期</span></div><div class="line">    content = scrapy.Field()        <span class="comment"># 内容</span></div><div class="line">    classify = scrapy.Field(        <span class="comment"># 分类</span></div><div class="line">        output_processor=Join(<span class="string">','</span>)</div><div class="line">    )</div><div class="line">    lable = scrapy.Field()          <span class="comment"># 标签</span></div><div class="line">    create_time = scrapy.Field()    <span class="comment"># 创建时间</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_to_mysql</span><span class="params">(self)</span>:</span></div><div class="line">        item_sql = TtxsgotoBlog(</div><div class="line">            title=self[<span class="string">"title"</span>],</div><div class="line">            url=self[<span class="string">"url"</span>],</div><div class="line">            publish=self[<span class="string">"publish"</span>],</div><div class="line">            content=self[<span class="string">"content"</span>],</div><div class="line">            classify=self[<span class="string">"classify"</span>],</div><div class="line">            lable=self[<span class="string">"lable"</span>],</div><div class="line">            create_time=self[<span class="string">"create_time"</span>]</div><div class="line">        )</div><div class="line">        <span class="keyword">return</span> item_sql</div></pre></td></tr></table></figure>
<ul>
<li>数据处理pipeline(pipelines.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line"><span class="keyword">from</span> tutorial_spider.models <span class="keyword">import</span> db_connect, create_news_table</div><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"><span class="keyword">import</span> logging</div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_scope</span><span class="params">(Session)</span>:</span></div><div class="line">    session = Session()</div><div class="line">    session.expire_on_commit = <span class="keyword">False</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">yield</span> session</div><div class="line">        session.commit()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        session.rollback()</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        session.close()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicMyslqchemyPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        engine = db_connect()</div><div class="line">        create_news_table(engine)</div><div class="line">        self.Session = sessionmaker(bind=engine)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        insert_sql = item.insert_to_mysql()</div><div class="line">        <span class="keyword">with</span> session_scope(self.Session) <span class="keyword">as</span> session:</div><div class="line">            session.add(insert_sql)</div><div class="line">        <span class="comment"># return item</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoBlogMysqlchemyPipeline</span><span class="params">(BasicMyslqchemyPipeline)</span>:</span></div><div class="line">    <span class="string">"""保存ttxsgoto Blog到数据库"""</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<ul>
<li>抓取逻辑(spiders/ttxsgoto.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">    - scrapy + selenium 爬取ttxsgoto.github.io 文章</div><div class="line">    - 主要用来练习scrapy和selenium结合完成抓取工作</div><div class="line">    - 使用过程非标准scrapy框架</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> scrapy.xlib.pydispatch <span class="keyword">import</span> dispatcher</div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</div><div class="line"><span class="keyword">from</span> tutorial_spider.items <span class="keyword">import</span> TtxsgotoItem</div><div class="line"><span class="keyword">from</span> tutorial_spider.pipelines <span class="keyword">import</span> TtxsgotoBlogMysqlchemyPipeline</div><div class="line"> </div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'ttxsgoto'</span></div><div class="line">    allowed_domains = [<span class="string">'ttxsgoto.github.io'</span>]</div><div class="line">    start_urls = [<span class="string">'http://ttxsgoto.github.io/'</span>]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        self.driver = webdriver.Chrome()</div><div class="line">        self.driver.maximize_window()</div><div class="line">        logger.info(<span class="string">"开始爬取ttxsgoto.github.io数据"</span>)</div><div class="line">        super(TtxsgotoSpider, self).__init__(*args, **kwargs)</div><div class="line">        dispatcher.connect(self.close_driver, signals.spider_closed)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_driver</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">       关闭浏览器</div><div class="line">        '''</div><div class="line">        self.driver.quit()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver.get(self.start_urls[<span class="number">0</span>])</div><div class="line">        res = HtmlResponse(url=<span class="string">'index html'</span>, body=self.driver.page_source, encoding=<span class="string">"utf-8"</span>)</div><div class="line">        title_text = res.css(<span class="string">'#main section h1 a::text'</span>)[<span class="number">0</span>].root.strip()</div><div class="line">        self.driver.find_element_by_link_text(title_text).click()    <span class="comment"># 点击进去</span></div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">if</span> title_text <span class="keyword">in</span> self.driver.page_source:</div><div class="line">            self.detail_parse(self.driver.page_source, title_text)</div><div class="line"> </div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                key_word = self.driver.find_elements_by_class_name(<span class="string">"next"</span>)[<span class="number">0</span>].text  <span class="comment"># 进行下一篇文章抓取</span></div><div class="line">            <span class="keyword">except</span> (TypeError,IndexError):</div><div class="line">                self.driver.quit()</div><div class="line">                key_word = <span class="keyword">None</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> key_word:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            self.driver.find_element_by_link_text(key_word).click()</div><div class="line">            time.sleep(<span class="number">2</span>)</div><div class="line">            res = HtmlResponse(url=<span class="string">'next html'</span>, body=self.driver.page_source, encoding=<span class="string">"utf-8"</span>)</div><div class="line">            title_text = res.css(<span class="string">'.article-info h1 a::text'</span>).extract_first()</div><div class="line">            self.detail_parse(self.driver.page_source, title_text)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_parse</span><span class="params">(self, page_source, title)</span>:</span></div><div class="line">        res = HtmlResponse(url=<span class="string">'detail html'</span>, body=page_source, encoding=<span class="string">"utf-8"</span>)</div><div class="line">        item = TtxsgotoItem()</div><div class="line">        item[<span class="string">'title'</span>] = title   <span class="comment"># 标题</span></div><div class="line">        _url = res.css(<span class="string">'#main h1 a::attr(href)'</span>).extract_first()</div><div class="line">        item[<span class="string">'url'</span>] = parse.urljoin(self.start_urls[<span class="number">0</span>], _url)   <span class="comment"># url</span></div><div class="line">        item[<span class="string">'publish'</span>] = res.css(<span class="string">'.article-time time::text'</span>).extract_first()   <span class="comment"># 发布日期</span></div><div class="line">        item[<span class="string">'content'</span>] = res.css(<span class="string">'.article-content'</span>).extract_first()   <span class="comment"># 内容</span></div><div class="line">        classify_list = res.css(<span class="string">'.article-tags a::text'</span>).extract()</div><div class="line">        item[<span class="string">'classify'</span>] = <span class="string">','</span>.join(classify_list)  <span class="comment"># 分类</span></div><div class="line">        item[<span class="string">'lable'</span>] = res.css(<span class="string">'.article-categories a::text'</span>).extract_first()   <span class="comment"># 标签</span></div><div class="line">        item[<span class="string">'create_time'</span>] = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>) <span class="comment"># 创建日期</span></div><div class="line">        pipeline = TtxsgotoBlogMysqlchemyPipeline()</div><div class="line">        pipeline.process_item(item, self.name)	<span class="comment"># 写入数据库</span></div></pre></td></tr></table></figure>
<h4 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h4><p><img src="https://ttxsgoto.github.io/img/scrapy/selenium01.png" alt=""></p>
<h4 id="代码github"><a href="#代码github" class="headerlink" title="代码github"></a>代码github</h4><p><a href="https://github.com/ttxsgoto/tutorial_spider" target="_blank" rel="external">Github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;通过scrapy+selenium对本站blog进行抓取&lt;/li&gt;
&lt;li&gt;抓取到的数据通过sqlalchemy操作写入mysq
    
    </summary>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/categories/Scrapy/"/>
    
    
      <category term="Selenium" scheme="https://ttxsgoto.github.io/tags/Selenium/"/>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy Scrapy抓取本站博客</title>
    <link href="https://ttxsgoto.github.io/2017/12/16/scrapy-sample/"/>
    <id>https://ttxsgoto.github.io/2017/12/16/scrapy-sample/</id>
    <published>2017-12-16T13:38:23.000Z</published>
    <updated>2017-12-17T14:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li>通过scrapy对本站blog进行抓取</li>
<li>抓取到的数据通过sqlalchemy操作写入mysql</li>
</ol>
<h4 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h4><ul>
<li>定义表结构(models.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> sqlalchemy.engine.url <span class="keyword">import</span> URL</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, Text, DateTime, Date</div><div class="line"><span class="keyword">from</span> tutorial_spider.settings <span class="keyword">import</span> MYSQL_DATABASE</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> create_engine(URL(**MYSQL_DATABASE), echo=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_news_table</span><span class="params">(engine)</span>:</span></div><div class="line">    Base.metadata.create_all(engine)</div><div class="line"> </div><div class="line">Base = declarative_base()</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoBlog</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'spider_ttxsgotoblog'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    title = Column(String(<span class="number">32</span>))          <span class="comment"># 标题</span></div><div class="line">    url = Column(String(<span class="number">128</span>))           <span class="comment"># url</span></div><div class="line">    publish = Column(String(<span class="number">32</span>))        <span class="comment"># 发布日期</span></div><div class="line">    content = Column(Text)              <span class="comment"># 内容</span></div><div class="line">    classify = Column(String(<span class="number">32</span>))       <span class="comment"># 分类</span></div><div class="line">    lable = Column(String(<span class="number">32</span>))          <span class="comment"># 标签</span></div><div class="line">    create_time = Column(String(<span class="number">32</span>))    <span class="comment"># 创建时间</span></div></pre></td></tr></table></figure>
<ul>
<li>定义item(items.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> tutorial_spider.models <span class="keyword">import</span> TtxsgotoBlog</div><div class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TakeFirstItemLoader</span><span class="params">(ItemLoader)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    自定义item_loader, 修改为 默认取列表中的第一个值</div><div class="line">    """</div><div class="line">    default_output_processor = TakeFirst()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line"> </div><div class="line">    title = scrapy.Field()          <span class="comment"># 标题</span></div><div class="line">    url = scrapy.Field()            <span class="comment"># url</span></div><div class="line">    publish = scrapy.Field()        <span class="comment"># 发布日期</span></div><div class="line">    content = scrapy.Field()        <span class="comment"># 内容</span></div><div class="line">    classify = scrapy.Field(        <span class="comment"># 分类</span></div><div class="line">        output_processor=Join(<span class="string">','</span>)</div><div class="line">    )</div><div class="line">    lable = scrapy.Field()          <span class="comment"># 标签</span></div><div class="line">    create_time = scrapy.Field()    <span class="comment"># 创建时间</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_to_mysql</span><span class="params">(self)</span>:</span></div><div class="line">        item_sql = TtxsgotoBlog(</div><div class="line">            title=self[<span class="string">"title"</span>],</div><div class="line">            url=self[<span class="string">"url"</span>],</div><div class="line">            publish=self[<span class="string">"publish"</span>],</div><div class="line">            content=self[<span class="string">"content"</span>],</div><div class="line">            classify=self[<span class="string">"classify"</span>],</div><div class="line">            lable=self[<span class="string">"lable"</span>],</div><div class="line">            create_time=self[<span class="string">"create_time"</span>]</div><div class="line">        )</div><div class="line">        <span class="keyword">return</span> item_sql</div></pre></td></tr></table></figure>
<ul>
<li>数据处理pipeline(pipelines.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line"><span class="keyword">from</span> tutorial_spider.models <span class="keyword">import</span> db_connect, create_news_table</div><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"><span class="keyword">import</span> logging</div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_scope</span><span class="params">(Session)</span>:</span></div><div class="line">    session = Session()</div><div class="line">    session.expire_on_commit = <span class="keyword">False</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">yield</span> session</div><div class="line">        session.commit()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        session.rollback()</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        session.close()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicMyslqchemyPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        engine = db_connect()</div><div class="line">        create_news_table(engine)</div><div class="line">        self.Session = sessionmaker(bind=engine)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        insert_sql = item.insert_to_mysql()</div><div class="line">        <span class="keyword">with</span> session_scope(self.Session) <span class="keyword">as</span> session:</div><div class="line">            session.add(insert_sql)</div><div class="line">        <span class="comment"># return item</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoFilterPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""过滤某些item"""</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> item[<span class="string">'title'</span>] == <span class="string">'Python Selenium模块'</span>:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">'Drop item---&gt;'</span>, item)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> item</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtxsgotoBlogMysqlchemyPipeline</span><span class="params">(BasicMyslqchemyPipeline)</span>:</span></div><div class="line">    <span class="string">"""保存ttxsgoto Blog到数据库"""</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<ul>
<li>抓取逻辑(spiders/ttxsgoto01.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"> </div><div class="line"><span class="keyword">from</span> tutorial_spider.items <span class="keyword">import</span> TakeFirstItemLoader, TtxsgotoItem</div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ttxsgoto01Spider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'ttxsgoto01'</span></div><div class="line">    allowed_domains = [<span class="string">'ttxsgoto.github.io'</span>]</div><div class="line">    start_urls = [<span class="string">'http://ttxsgoto.github.io/'</span>]</div><div class="line"> </div><div class="line">    custom_settings = &#123;	<span class="comment"># 该项目对应settings</span></div><div class="line">        <span class="string">"ITEM_PIPELINES"</span>: &#123;</div><div class="line">            <span class="string">'tutorial_spider.pipelines.TtxsgotoFilterPipeline'</span>: <span class="number">10</span>,</div><div class="line">            <span class="string">'tutorial_spider.pipelines.TtxsgotoBlogMysqlchemyPipeline'</span>: <span class="number">20</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        articles = response.css(<span class="string">'#main .post'</span>)</div><div class="line">        <span class="keyword">for</span> article <span class="keyword">in</span> articles:</div><div class="line">            article_url = article.css(<span class="string">'h1 a::attr(href)'</span>).extract_first()</div><div class="line">            url = parse.urljoin(response.url, article_url)</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse_article)</div><div class="line"> </div><div class="line">        next_url = response.css(<span class="string">'#page-nav a[rel="next"][href]'</span>).css(<span class="string">'::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_url:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url=parse.urljoin(response.url, next_url), callback=self.parse)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_article</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""解析文章详情"""</span></div><div class="line">        item_loader = TakeFirstItemLoader(item=TtxsgotoItem(), selector=response)</div><div class="line">        item_loader.add_css(<span class="string">'title'</span>, <span class="string">'#main header a::text'</span>)</div><div class="line">        item_loader.add_value(<span class="string">'url'</span>, response.url)</div><div class="line">        item_loader.add_css(<span class="string">'publish'</span>, <span class="string">'.article-time time::text'</span>)</div><div class="line">        item_loader.add_css(<span class="string">'content'</span>, <span class="string">'.article-content'</span>)</div><div class="line">        item_loader.add_css(<span class="string">'classify'</span>, <span class="string">'.article-tags a::text'</span>)</div><div class="line">        item_loader.add_css(<span class="string">'lable'</span>, <span class="string">'.article-categories a::text'</span>)</div><div class="line">        item_loader.add_value(<span class="string">'create_time'</span>, datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</div><div class="line">        item = item_loader.load_item()</div><div class="line">        <span class="keyword">yield</span> item</div></pre></td></tr></table></figure>
<h4 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h4><p><img src="https://ttxsgoto.github.io/img/scrapy/selenium01.png" alt=""></p>
<h4 id="代码github"><a href="#代码github" class="headerlink" title="代码github"></a>代码github</h4><p><a href="https://github.com/ttxsgoto/tutorial_spider" target="_blank" rel="external">Github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;通过scrapy对本站blog进行抓取&lt;/li&gt;
&lt;li&gt;抓取到的数据通过sqlalchemy操作写入mysql&lt;/li&gt;
&lt;/
    
    </summary>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/categories/Scrapy/"/>
    
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>运维 Git日常笔记</title>
    <link href="https://ttxsgoto.github.io/2017/12/14/yw-git-basic/"/>
    <id>https://ttxsgoto.github.io/2017/12/14/yw-git-basic/</id>
    <published>2017-12-14T14:10:05.000Z</published>
    <updated>2017-12-15T10:21:29.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">git push origin master		# 将本地origin提交到远端 </div><div class="line">git push origin master -f       # 将本地origin 强制覆盖远端</div><div class="line">git pull --rebase upstream master# 将upstream master 和本地master合并到本地</div><div class="line">git checkout -b xxx   		# 创建并切换到xxx分支;相当于（git branch dev；git checkout dev）</div><div class="line">git checkout xxx      		# 切换到xxx分支</div><div class="line">git checkout -- xxx   		# 撤销xxx文件的修改内容</div><div class="line">git branch            		# 查看本地分支</div><div class="line">git branch -d xxx     		# 删除xxx分支</div><div class="line">git branch -D xxx     		# 强制删除xxx分支</div><div class="line">git status    	      		# 查看文件是否被修改过</div><div class="line">git diff      	      		# 查看文件修改</div><div class="line">git merge dev         		# 将dev分支的工作成果合并到master分支上，git merge命令用于合并指定分支到当前分支(Fast-forward 说明这次合并是&quot;快进模式&quot;)</div><div class="line"> </div><div class="line">##### git clone #####</div><div class="line">git clone git@github.com:ttxsgoto/studypy.git     	# 克隆为origin名称</div><div class="line">git clone -o abc git@github.com:ttxsgoto/studypy.git    # -o 指定 克隆出来的名称为abc</div><div class="line">git clone git@github.com:ttxsgoto/studypy.git  xxx  	# 将远端的版本克隆下来到 xxx文件下</div><div class="line"> </div><div class="line">##### git remote #####</div><div class="line">git remote -v  		   	# 查看主机名称和远端的地址</div><div class="line">git remote show xxx(主机名) 	# 查看xxx的具体相关信息</div><div class="line">git remote add name url    	# 添加仓库名称</div><div class="line">git remote rm name    	   	# 删除本地仓库名称</div><div class="line">git remote rename old new  	# 修改本地仓库名称</div><div class="line"> </div><div class="line">##### git fetch #####</div><div class="line">git fetch    			# 将远程所有的更新取回本地</div><div class="line">git fetch 远程主机名    	 	# 将某个远程主机的更新，全部取回本地</div><div class="line">git fetch 远程主机名    分支名	# 将远程主机的分支，取回本地</div><div class="line"> </div><div class="line">##### git pull #####</div><div class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div><div class="line">git pull origin master  	# 远程主机的master分支和当前所在分支合并</div><div class="line">git pull origin next:master     # 取回origin主机的next分支和本地master分支合并</div><div class="line">git pull --rebase &lt;remote&gt;  &lt;master&gt;:&lt;master&gt;    # 合并采用--rebase模式合并</div><div class="line"> </div><div class="line">##### git push #####</div><div class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</div><div class="line">git push origin master    	# 将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</div><div class="line">git push origin :master    	# 删除远程分支名master</div><div class="line">git push -u origin master    	# -u 选项指定一个默认主机，这样后面就可以不加任何参数使用</div><div class="line">git push --all origin           # 无论是否存在对应的远程分支，将本地的所有分支都推送到远程主机</div><div class="line">git push --force origin         # 远程主机版本比本地版本新，推送时会报错，需要先git pull合并差异在推送，也可以强制推送，添加--force参数</div><div class="line">git push origin --tags          # git push 不会推送标签(tag),可以使用--tags选项，来推送标签</div><div class="line"> </div><div class="line">##### git stash #####</div><div class="line">git stash  			# 将工作暂存起来，进行其他操作</div><div class="line">git stash pop  			# 将栈中的信息重新打开</div><div class="line">git stash list  		# 列出栈中的信息</div><div class="line"> </div><div class="line">##### git log #####</div><div class="line">git log --graph --pretty=oneline --abbrev-commit  # 查看分支合并图</div><div class="line">git log --pretty=oneline</div><div class="line"> </div><div class="line">##### git reset #####</div><div class="line">git log   			# 查看详细日志，有时间点</div><div class="line">git reflog 			# 查看命令历史，以便确定要回到未来的哪个版本</div><div class="line">git reset --hard 83ec811628a08  # 回到相对应的版本，需要知道版本号，版本号没必要写全，前几位就可以</div></pre></td></tr></table></figure>
<h4 id="git-检查修改"><a href="#git-检查修改" class="headerlink" title="git 检查修改"></a>git 检查修改</h4><ol>
<li>已修改，未暂存, 查看更改内容— git diff   内容修改后，没有使用 git add xxx 添加到缓存区</li>
<li>已暂存，未提交, 查看更改内容— git diff –cached  使用git add xxx已添加到缓存区</li>
<li>已提交，未推送,  查看更改内容— git diff master origin/master 使用git commit 提交到本地仓库<br> – 这里master就是你的本地仓库，而origin/master就是你的远程仓库<br> – master是主分支的意思,origin就代表远程<br> – 比较本地master和origin的master区别</li>
</ol>
<h4 id="git-撤销修改"><a href="#git-撤销修改" class="headerlink" title="git 撤销修改"></a>git 撤销修改</h4><ol>
<li>已修改，未暂存,  撤销修改内容— git reset –hard 或者(git checkout xxx) 内容修改后，没有使用 git add xxx 添加到缓存区</li>
<li>已暂存，未提交,  撤销修改内容— git reset –hard 或者(git reset 然后执行 git checkout xxx)  使用git add xxx已添加到缓存区</li>
<li>已提交，未推送,  撤销修改内容— git reset –hard origin/master  使用git commit 提交到本地仓库<br> – git reset –hard origin/master 远程仓库把代码取回来</li>
<li>已推送到远程仓库, 撤销修改内容,回到上一个版本 — git reset –hard HEAD^ 然后git push origin master -f<br> –  回滚到上一个版本<br> –  将本地分支，强制覆盖origin maser</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Git" scheme="https://ttxsgoto.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Python Selenium模块</title>
    <link href="https://ttxsgoto.github.io/2017/12/13/python-selenium/"/>
    <id>https://ttxsgoto.github.io/2017/12/13/python-selenium/</id>
    <published>2017-12-12T23:39:28.000Z</published>
    <updated>2017-12-12T23:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Selenium是Thoughtworks公司的一个集成测试的强大工具，Selenium 是 ThoughtWorks 专门为 Web 应用程序编写的一个验收测试工具；使用 Selenium 的最大好处是： Selenium 测试直接在浏览器中运行，就像真实用户所做的一样。在浏览器加载js后，便可以通过xpath来解析网页了。直接pip install selenium 安装完成</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> unittest</div><div class="line"> </div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># selenium.webdriver 模块提供了所有WebDriver的实现,如Firefox, Chrome, IE and Remote</span></div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys <span class="comment"># `Keys`类提供键盘按键的支持</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PythonOrgSearch</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver = webdriver.Chrome(executable_path=/usr/bin/chromedriver)     <span class="comment"># 创建实例</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_search</span><span class="params">(self)</span>:</span></div><div class="line">        driver = self.driver</div><div class="line">        driver.get(<span class="string">"http://www.python.org"</span>) <span class="comment"># 方法将打开URL中填写的地址，WebDriver 将等待， 直到页面完全加载完毕（其实是等到”onload” 方法执行完毕），然后返回继续执行你的脚本。 值得注意的是，如果你的页面使用了大量的Ajax加载， WebDriver可能不知道什么时候页面已经完全加载</span></div><div class="line">        self.assertIn(<span class="string">"Python"</span>, driver.title)     <span class="comment"># driver.title 表示网页标题</span></div><div class="line">        elem = driver.find_element_by_name(<span class="string">"q"</span>)</div><div class="line">        elem.clear()    <span class="comment"># 预先清除input输入框中的任何预填充的文本</span></div><div class="line">        elem.send_keys(<span class="string">"pycon"</span>) <span class="comment"># 输入搜索字</span></div><div class="line">        elem.send_keys(Keys.RETURN) <span class="comment"># 发送keys，这个和使用键盘输入keys类似。 特殊的按键可以通过引入`selenium.webdriver.common.keys`的 Keys 类来输入,如enturn,</span></div><div class="line">        time.sleep(<span class="number">10</span>)</div><div class="line">        <span class="keyword">assert</span> <span class="string">"No results found."</span> <span class="keyword">not</span> <span class="keyword">in</span> driver.page_source    <span class="comment"># driver.page_source 网页html源文件</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_other</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""常用其他模块说明"""</span></div><div class="line">        browser = self.driver</div><div class="line">        browser.get(<span class="string">"http://www.python.org"</span>)</div><div class="line">        elem = browser.find_element_by_css_selector(<span class="string">'input#id-search-field'</span>)</div><div class="line">        elem.clear()</div><div class="line">        elem.send_keys(<span class="string">'python'</span>)</div><div class="line">        browser.find_element_by_css_selector(<span class="string">'button#submit'</span>).click()   <span class="comment"># 通过查找对应的元素，然后调用click方法</span></div><div class="line">        </div><div class="line">        <span class="comment"># 将得到的网页通过scrapy的Selector来解析</span></div><div class="line">        <span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line">        selector = Selector(text=browser.page_source)</div><div class="line">        submit = selector.css(<span class="string">'button#submit::text'</span>).extract_first()</div><div class="line">        self.assertEqual(<span class="string">'Go'</span>, submit.strip())</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver.close() <span class="comment"># close只会关闭一个标签页; quit关闭整个浏览器</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure>
<h4 id="页面交互"><a href="#页面交互" class="headerlink" title="页面交互"></a>页面交互</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; name=&quot;passwd&quot; id=&quot;passwd-id&quot; /&gt;</div></pre></td></tr></table></figure>
<p>查询如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">element = driver.find_element_by_id(&quot;passwd-id&quot;)</div><div class="line">element = driver.find_element_by_name(&quot;passwd&quot;)</div><div class="line">element = driver.find_element_by_xpath(&quot;//input[@id=&apos;passwd-id&apos;]&quot;)</div></pre></td></tr></table></figure></p>
<p><code>注意</code>：当使用<code>XPATH</code>时，你必须注意，如果匹配超过一个元素，只返回第一个元素。 如果上面也没找到，将会抛出 <code>NoSuchElementException</code>异常。</p>
<p>常用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">element.send_keys(&quot;some text&quot;)  # 输入内容</div><div class="line">element.send_keys(&quot; and some&quot;, Keys.ARROW_DOWN)    # 输入方向键</div><div class="line">element.clear() # 预先清楚input/textarea中内容</div><div class="line">select.deselect_all()   # 取消选择已经选择的元素</div><div class="line">driver.find_element_by_id(&quot;submit&quot;).click() # 提交</div><div class="line">driver.switch_to_alert()    # 弹出对话框</div><div class="line">driver.forward()    # 浏览历史中的前进</div><div class="line">driver.back()   # 浏览历史中的后退</div><div class="line">driver.get_cookies()    # 获取cookie</div></pre></td></tr></table></figure></p>
<h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>Selenium提供的方法：</p>
<ul>
<li>find_element</li>
<li>find_element_by_id</li>
<li>find_element_by_name</li>
<li>find_element_by_xpath</li>
<li>find_element_by_link_text</li>
<li>find_element_by_partial_link_text</li>
<li>find_element_by_tag_name</li>
<li>find_element_by_class_name</li>
<li>find_element_by_css_selector</li>
</ul>
<p>一次查找多个元素(返回list列表):</p>
<ul>
<li>find_elements</li>
<li>find_elements_by_name</li>
<li>find_elements_by_xpath</li>
<li>find_elements_by_link_text</li>
<li>find_elements_by_partial_link_text</li>
<li>find_elements_by_tag_name</li>
<li>find_elements_by_class_name</li>
<li>find_elements_by_css_selector</li>
</ul>
<hr>
<p><code>查找元素实例</code></p>
<ul>
<li><p>find_element_by_id</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"continue"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line">可以这样查找表单(form)元素</div><div class="line">login_form = driver.find_element_by_id('loginForm')</div></pre></td></tr></table></figure>
</li>
<li><p>find_element_by_name</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"continue"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"continue"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Clear"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line">name属性为 username &amp; password 的元素可以像下面这样查找</div><div class="line">username = driver.find_element_by_name('username')</div><div class="line">password = driver.find_element_by_name('password')</div><div class="line">continue = driver.find_element_by_name('continue')</div></pre></td></tr></table></figure>
</li>
<li><p>find_element_by_xpath</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"continue"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"continue"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Clear"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line">可以这样查找表单(form)元素</div><div class="line">login_form = driver.find_element_by_xpath("/html/body/form[1]")</div><div class="line">login_form = driver.find_element_by_xpath("//form[1]")</div><div class="line">login_form = driver.find_element_by_xpath("//form[@id='loginForm']")</div><div class="line"> </div><div class="line">username = driver.find_element_by_xpath("//form[input/@name='username']")</div><div class="line">username = driver.find_element_by_xpath("//form[@id='loginForm']/input[1]")</div><div class="line">username = driver.find_element_by_xpath("//input[@name='username']")</div><div class="line"> </div><div class="line">clear_button = driver.find_element_by_xpath("//input[@name='continue'][@type='button']")</div><div class="line">clear_button = driver.find_element_by_xpath("//form[@id='loginForm']/input[4]")</div></pre></td></tr></table></figure>
</li>
<li><p>find_element_by_link_text</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Are you sure you want to do this?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"continue.html"</span>&gt;</span>Continue<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"cancel.html"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line">continue.html 超链接可以被这样查找到:</div><div class="line">continue_link = driver.find_element_by_link_text('Continue')</div><div class="line">continue_link = driver.find_element_by_partial_link_text('Conti')</div></pre></td></tr></table></figure>
</li>
<li><p>find_element_by_tag_name</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Site content goes here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line">h1 元素可以如下查找</div><div class="line">heading1 = driver.find_element_by_tag_name('h1')</div></pre></td></tr></table></figure>
</li>
<li><p>find_element_by_class_name</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Site content goes here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line">p 元素可以如下查找</div><div class="line">content = driver.find_element_by_class_name('content')</div></pre></td></tr></table></figure>
</li>
<li><p>find_element_by_css_selector</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Site content goes here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> </div><div class="line">p 元素可以如下查找:</div><div class="line">content = driver.find_element_by_css_selector('p.content')</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="等待加载"><a href="#等待加载" class="headerlink" title="等待加载"></a>等待加载</h4><ul>
<li><p>显式等待</p>
<p>  显式等待是你在代码中定义等待一定条件发生后再进一步执行你的代码，最糟糕的案例是使用time.sleep()，它将条件设置为等待一个确切的时间段</p>
</li>
<li><p>隐式等待</p>
<p>  如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;Selenium是Thoughtworks公司的一个集成测试的强大工具，Selenium 是 ThoughtWorks 专门为 Web 应用
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="Selenium" scheme="https://ttxsgoto.github.io/tags/Selenium/"/>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy Selectors</title>
    <link href="https://ttxsgoto.github.io/2017/12/02/Scrapy-selectors/"/>
    <id>https://ttxsgoto.github.io/2017/12/02/Scrapy-selectors/</id>
    <published>2017-12-02T14:09:31.000Z</published>
    <updated>2017-12-12T01:57:13.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用selectors"><a href="#使用selectors" class="headerlink" title="使用selectors"></a>使用selectors</h4><h5 id="构建-Selectors"><a href="#构建-Selectors" class="headerlink" title="构建 Selectors"></a>构建 Selectors</h5><p>通过向 Selector 类的构造函数传入 text 或者是 TextResponse 对象来构造 selectors 实例；它会根据传入的类型(input type)自动的去选择最佳的解析规则(XML vs HTML)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line"> </div><div class="line"><span class="comment"># 通过text来构建</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>body = <span class="string">'&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Selector(text=body).xpath(<span class="string">'//span/text()'</span>).extract()</div><div class="line">[<span class="string">u'good'</span>]</div><div class="line"> </div><div class="line"><span class="comment"># 通过response来构建</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response = HtmlResponse(url=<span class="string">'http://example.com'</span>, body=body)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Selector(response=response).xpath(<span class="string">'//span/text()'</span>).extract()</div><div class="line">[<span class="string">u'good'</span>]</div><div class="line"> </div><div class="line"><span class="comment"># 通过.selector来构建</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.selector.xpath(<span class="string">'//span/text()'</span>).extract()</div><div class="line">[<span class="string">u'good'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="使用selectors-1"><a href="#使用selectors-1" class="headerlink" title="使用selectors"></a>使用selectors</h5><p>通常通过response.xpath()和response.css()来处理返回的html，xpath通过/text()来返回文本或者属性，css通过::text来返回文本或者属性<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;base href=&apos;http://example.com/&apos; /&gt;</div><div class="line">  &lt;title&gt;Example website&lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;div id=&apos;images&apos;&gt;</div><div class="line">   &lt;a href=&apos;image1.html&apos;&gt;Name: My image 1 &lt;br /&gt;&lt;img src=&apos;image1_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image2.html&apos;&gt;Name: My image 2 &lt;br /&gt;&lt;img src=&apos;image2_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image3.html&apos;&gt;Name: My image 3 &lt;br /&gt;&lt;img src=&apos;image3_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image4.html&apos;&gt;Name: My image 4 &lt;br /&gt;&lt;img src=&apos;image4_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=&apos;image5.html&apos;&gt;Name: My image 5 &lt;br /&gt;&lt;img src=&apos;image5_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">scrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html</div><div class="line"><span class="comment">#################################</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//title/text()'</span>)</div><div class="line">[&lt;Selector xpath=<span class="string">'//title/text()'</span> data=<span class="string">'Example website'</span>&gt;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>)</div><div class="line">[&lt;Selector xpath=<span class="string">'descendant-or-self::title/text()'</span> data=<span class="string">'Example website'</span>&gt;]</div><div class="line"><span class="comment"># 上述结果中，返回的是一个 SelectorList 实例，该实例中包含了一组 selectors；通过调用 SelectorList 的相关接口我们可以获取到每一个 selector 元素的相关内容</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'img'</span>).xpath(<span class="string">'@src'</span>).extract()</div><div class="line">[<span class="string">'image1_thumb.jpg'</span>, <span class="string">'image2_thumb.jpg'</span>, <span class="string">'image3_thumb.jpg'</span>, <span class="string">'image4_thumb.jpg'</span>, <span class="string">'image5_thumb.jpg'</span>]</div><div class="line"><span class="comment"># 通过 extract() 方法便可以从 selector 中提取出所要的文本</span></div><div class="line"><span class="comment"># extract_first() 取第一个元素的值，如果没有返回None，也可以自定义,通过extract_first(default='not-found')</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//base/@href'</span>).extract()</div><div class="line">[<span class="string">u'http://example.com/'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'base::attr(href)'</span>).extract()</div><div class="line">[<span class="string">u'http://example.com/'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[contains(@href, "image")]/@href'</span>).extract()</div><div class="line">[<span class="string">u'image1.html'</span>,</div><div class="line"> <span class="string">u'image2.html'</span>,</div><div class="line"> <span class="string">u'image3.html'</span>,</div><div class="line"> <span class="string">u'image4.html'</span>,</div><div class="line"> <span class="string">u'image5.html'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href*=image]::attr(href)'</span>).extract()</div><div class="line">[<span class="string">u'image1.html'</span>,</div><div class="line"> <span class="string">u'image2.html'</span>,</div><div class="line"> <span class="string">u'image3.html'</span>,</div><div class="line"> <span class="string">u'image4.html'</span>,</div><div class="line"> <span class="string">u'image5.html'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[contains(@href, "image")]/img/@src'</span>).extract()</div><div class="line">[<span class="string">u'image1_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image2_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image3_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image4_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image5_thumb.jpg'</span>]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href*=image] img::attr(src)'</span>).extract()</div><div class="line">[<span class="string">u'image1_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image2_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image3_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image4_thumb.jpg'</span>,</div><div class="line"> <span class="string">u'image5_thumb.jpg'</span>]</div></pre></td></tr></table></figure>
</code></pre><h5 id="嵌套selectors"><a href="#嵌套selectors" class="headerlink" title="嵌套selectors"></a>嵌套selectors</h5><pre><code>通过.xpath()或者.css()方法返回的包含相同类型的selectos 的队列，仍然可以对返回的 selector 执行.xpath()和.css()方法
</code></pre><h5 id="XPath表达式中的参数"><a href="#XPath表达式中的参数" class="headerlink" title="XPath表达式中的参数"></a>XPath表达式中的参数</h5><pre><code>XPath 允许你引用 XPath 表达式中的参数，使用$somevariable
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># `$val` used in the expression, a `val` argument needs to be passed</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//div[@id=$val]/a/text()'</span>, val=<span class="string">'images'</span>).extract_first()</div><div class="line"><span class="string">u'Name: My image 1 '</span></div></pre></td></tr></table></figure>
</code></pre><h4 id="常用selectors"><a href="#常用selectors" class="headerlink" title="常用selectors"></a>常用selectors</h4><h5 id="xpath语法"><a href="#xpath语法" class="headerlink" title="xpath语法"></a>xpath语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- article   选取所有article元素的所有子节点</div><div class="line">- /article 选取根元素article</div><div class="line">- article/a 选取所有属于article的子元素的a元素</div><div class="line">- //div 选取所有div子元素</div><div class="line">- article//div 选取所有属于article元素的后代的div元素，不管它出现在article 之下的任何位置</div><div class="line">- //@lang  选取名为lang的所有属性</div><div class="line">- //@class=&apos;xxx&apos; 选取所有名为class的属性为xxx</div><div class="line">- /article/div[1] 选取属于article子元素的第一个div元素</div><div class="line">- /article/div[last()] 选取属性article子元素的最后一个div元素</div><div class="line">- /article/div[last()-1] 倒数第二个元素</div><div class="line">- /article/div[position()&lt;3]选取最前面的两个属于article 元素的子元素的div元素。</div><div class="line">- //div[@lang] 选取所有拥有lang属性的div元素</div><div class="line">- //div[@lang=&apos;eng&apos;] 选取所有lang属性为eng的div元素</div><div class="line">- /div/* 选取属于div元素的所有子节点</div><div class="line">- //* 选取所有元素</div><div class="line">- //div[@*] 选取所有带属性的title元素</div><div class="line">- /div/a | //div/p 选取所有div元素的a和p元素</div><div class="line">- //span | //ul 选取文档中的span和ul元素</div><div class="line">- article/div/p | //span 选取所有属于article元素的div元素的p元素 以及文档中所有的span元素</div></pre></td></tr></table></figure>
<h5 id="css语法"><a href="#css语法" class="headerlink" title="css语法"></a>css语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- `*` 所有选择器</div><div class="line">- #container 选择id=container的元素</div><div class="line">- .container 选取class=container的元素</div><div class="line">- p     选择所有p元素</div><div class="line">- div,p 选择所有div和所有p元素</div><div class="line">- li a 选取所有li下的所有a节点</div><div class="line">- ul + p 选择u后面的第一个p元素</div><div class="line">- div#container &gt; ul 选取id为container的div的第一个ul子元素</div><div class="line">- h2 a::text	h2元素下a标签对应的值</div><div class="line">- a::attr(href)	a元素中属性为href对应的值</div><div class="line">- [target] 选择带有 target 属性所有元素</div><div class="line">- [target=_blank] 选择 target=&quot;_blank&quot; 的所有元素</div><div class="line">- [title~=flower]   选择 title 属性包含单词 &quot;flower&quot; 的所有元素</div><div class="line">- [lang|=en]    选择 lang 属性值以 &quot;en&quot; 开头的所有元素</div><div class="line">- ul ~ p 选取与ul相邻的所有p元素</div><div class="line">- a[title] 选取所有有title属性的a元素</div><div class="line">- a[href=&quot;http://xxx.com&quot;] 选取所有href属性为xxx.com值的a元素</div><div class="line">- a[href*=&quot;xxx&quot;] 选取所有href属性包含xxx的a元素</div><div class="line">- a[href^=&quot;http&quot;] 选取所有href属性值以http开头的a元素</div><div class="line">- a[href$=&quot;.jpg&quot;] 选取所有href属性值以.jpg结尾的a元素</div><div class="line">- input[type=radio]:checked 选择选中的radio的元素</div><div class="line">- div:not(#container) 选取所有id非container的div属性</div><div class="line">- li:nth-child(3) 选取第三个li元素</div><div class="line">- tr:nth-child(2n) 第偶数个tr</div></pre></td></tr></table></figure>
<h4 id="XPATH和CSS用法"><a href="#XPATH和CSS用法" class="headerlink" title="XPATH和CSS用法"></a>XPATH和CSS用法</h4><table>
<thead>
<tr>
<th>XPATH</th>
<th>CSS</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>//div/a</td>
<td>div &gt; a</td>
<td>div的子元素a</td>
</tr>
<tr>
<td>//div//a</td>
<td>div a</td>
<td>div的后代元素a</td>
</tr>
<tr>
<td>//div[@id=’example’]</td>
<td>#example</td>
<td>获取id=example的元素</td>
</tr>
<tr>
<td>//div[@class=’example’]</td>
<td>.example</td>
<td>获取class=example的元素</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;使用selectors&quot;&gt;&lt;a href=&quot;#使用selectors&quot; class=&quot;headerlink&quot; title=&quot;使用selectors&quot;&gt;&lt;/a&gt;使用selectors&lt;/h4&gt;&lt;h5 id=&quot;构建-Selectors&quot;&gt;&lt;a href=&quot;#构建-Se
    
    </summary>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/categories/Scrapy/"/>
    
    
      <category term="Selectors" scheme="https://ttxsgoto.github.io/tags/Selectors/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy Itemloaders</title>
    <link href="https://ttxsgoto.github.io/2017/12/02/Scrapy-itemloaders/"/>
    <id>https://ttxsgoto.github.io/2017/12/02/Scrapy-itemloaders/</id>
    <published>2017-12-02T14:01:14.000Z</published>
    <updated>2017-12-06T03:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Item-Loaders"><a href="#Item-Loaders" class="headerlink" title="Item Loaders"></a>Item Loaders</h3><p>Item Loaders 被设计用来提供一个既弹性又高效简便的构件， 以扩展或重写爬虫或源格式(HTML, XML之类的)等区域的解析规则</p>
<h3 id="使用item-loader填充item"><a href="#使用item-loader填充item" class="headerlink" title="使用item loader填充item"></a>使用item loader填充item</h3><ul>
<li>add_xpath  # 通过xpath选取数据</li>
<li>add_css    # 通过css选取数据</li>
<li>add_value  # 通过value得到数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">item = ItemLoader(item=Movietop250Item(), response=response)</div><div class="line"> </div><div class="line">item.add_css(<span class="string">'num'</span>, <span class="string">"node.css('em::text')"</span>)</div><div class="line">item.add_css(<span class="string">'movie_detail_url'</span>, <span class="string">'.hd a::attr(href)'</span>)</div><div class="line">item.add_css(<span class="string">'img_url'</span>, <span class="string">'a img::attr(src)'</span>)</div><div class="line">item.add_css(<span class="string">'name'</span>, <span class="string">'a img::attr(src)'</span>)</div><div class="line">item.add_css(<span class="string">'grade'</span>, <span class="string">'.rating_num::text'</span>)</div><div class="line">item.add_css(<span class="string">'comment'</span>, <span class="string">'.star span::text'</span>)</div><div class="line">item.add_css(<span class="string">'info'</span>, <span class="string">'.inq::text'</span>)</div><div class="line"></div><div class="line">load_item = item.load_item()    <span class="comment"># load_item() 方法,返回通过调用 add_xpath(), add_css(), and add_value() 所提取和收集到的数据的Item.</span></div><div class="line"><span class="keyword">yield</span> load_item</div></pre></td></tr></table></figure>
<h3 id="输入-输出处理器"><a href="#输入-输出处理器" class="headerlink" title="输入/输出处理器"></a>输入/输出处理器</h3><ul>
<li>Item Loader每个字段中都包含一个输入处理器和一个输出处理器</li>
<li>input_processor输入处理器：收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内(但未分配给该Item)</li>
<li>output_processor输出处理器：收集所有的数据后, 调用 ItemLoader.load_item()得到Item 对象。在这步中先调用输出处理器来处理之前收集到的数据，然后再存入Item中。输出处理器的结果是被分配到Item的最终值</li>
</ul>
<h3 id="Items-Loaders"><a href="#Items-Loaders" class="headerlink" title="Items Loaders"></a>Items Loaders</h3><p>Item Loaders 的声明类似于Items，以class的语法来声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</div><div class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst, MapCompose, Join</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductLoader</span><span class="params">(ItemLoader)</span>:</span></div><div class="line">    default_output_processor = TakeFirst()</div><div class="line">    name_in = MapCompose(unicode.title)</div><div class="line">    name_out = Join()</div><div class="line">    price_in = MapCompose(unicode.strip)</div><div class="line"> </div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p>
<p>input processors 以_in为后缀来声明，output processors 以_out 为后缀来声明。也可以用ItemLoader.default_input_processor 和ItemLoader.default_output_processor 属性来声明默认的 input/output processors</p>
<h3 id="Input-and-Output-Processors"><a href="#Input-and-Output-Processors" class="headerlink" title="Input and Output Processors"></a>Input and Output Processors</h3><p>在定义Item的时候声明输入输出处理器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Join, MapCompose, TakeFirst</div><div class="line"><span class="keyword">from</span> w3lib.html <span class="keyword">import</span> remove_tags</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_price</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="string">"""定义方法来处理值"""</span></div><div class="line">    <span class="keyword">if</span> value.isdigit():</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    name = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_tags),</div><div class="line">        output_processor=Join(),</div><div class="line">    )</div><div class="line">    price = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_tags, filter_price),</div><div class="line">        output_processor=TakeFirst(),</div><div class="line">    )</div></pre></td></tr></table></figure></p>
<p>input and output processors方式的优先级排序如下:</p>
<ul>
<li>在Item Loader 中声明的 field-specific 属性: field_in and field_out (most precedence)</li>
<li>Item中的字段元数据(input_processor and output_processor key)</li>
<li>Item Loader 默认处理器: ItemLoader.default_input_processor() and ItemLoader.default_output_processor() (least precedence)</li>
</ul>
<h3 id="内置的处理器"><a href="#内置的处理器" class="headerlink" title="内置的处理器"></a>内置的处理器</h3><ul>
<li><p>Identity 最简单的处理器，不进行任何处理，直接返回原来的数据,无参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Identity</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Identity()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>TakeFirst 返回第一个非空(non-null/non-empty)值，常用于单值字段的输出处理器,无参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = TakeFirst()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">''</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line"><span class="string">'one'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Join(separator=u’ ‘)返回用分隔符连接后的值,分隔符默认为空格 ,默认为空类似于u’’.join</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Join</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Join()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line"><span class="string">u'one two three'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Join(<span class="string">'&lt;br&gt;'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line"><span class="string">u'one&lt;br&gt;two&lt;br&gt;three'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Compose(<em>functions, *</em>default_loader_context)给定多个函数组合构造处理器,每个输入值被传递到第一个函数，然后其输出再传递到第二个函数，直到最后一个函数返回整个处理器的输出<br>默认情况下，当遇到None值的时候停止处理。可以通过传递参数stop_on_none=False改变这种行为,每个函数可以选择接收一个loader_context参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Compose</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Compose(<span class="keyword">lambda</span> v: v[<span class="number">0</span>], str.upper)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'hello'</span>, <span class="string">'world'</span>])</div><div class="line"><span class="string">'HELLO'</span></div></pre></td></tr></table></figure>
</li>
<li><p>MapCompose(<em>functions, *</em>default_loader_context)</p>
</li>
</ul>
<p>与Compose处理器类似，区别在于各个函数结果在内部传递的方式</p>
<pre><code>输入值是被迭代的处理的，每一个元素被单独传入第一个函数进行处理。处理的结果被|连接起来(concatenate)形成一个新的迭代器，并被传入第二个函数，以此类推，直到最后一个函数。最后一个函数的输出被连接起来形成处理器的输出。
每个函数能返回一个值或者一个值列表，也能返回None(会被下一个函数所忽略)
这个处理器提供了方便的方式来组合多个处理单值的函数。因此它常用与输入处理器，因为用extract()函数提取出来的值是一个unicode strings列表。
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">filter_world</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">None</span> <span class="keyword">if</span> x == <span class="string">'world'</span> <span class="keyword">else</span> x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> MapCompose</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc = MapCompose(filter_world, unicode.upper)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">u'hello'</span>, <span class="string">u'world'</span>, <span class="string">u'this'</span>, <span class="string">u'is'</span>, <span class="string">u'scrapy'</span>])</div><div class="line">[<span class="string">u'HELLO, u'</span>THIS<span class="string">', u'</span>IS<span class="string">', u'</span>SCRAPY<span class="string">']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-Loaders&quot;&gt;&lt;a href=&quot;#Item-Loaders&quot; class=&quot;headerlink&quot; title=&quot;Item Loaders&quot;&gt;&lt;/a&gt;Item Loaders&lt;/h3&gt;&lt;p&gt;Item Loaders 被设计用来提供一个既弹性又高效简便
    
    </summary>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/categories/Scrapy/"/>
    
    
      <category term="Itemloaders" scheme="https://ttxsgoto.github.io/tags/Itemloaders/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy Architecture</title>
    <link href="https://ttxsgoto.github.io/2017/12/01/scrapy-state/"/>
    <id>https://ttxsgoto.github.io/2017/12/01/scrapy-state/</id>
    <published>2017-12-01T14:03:49.000Z</published>
    <updated>2017-12-04T08:41:39.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="https://ttxsgoto.github.io/img/scrapy/scrapy.png" alt="Scrapy"><br>所有过程的流向都依赖于 ENGINE 模块<br>1.Engine从Spider中得到初始的Requests，Requests将被用来进行爬取；<br>2.Engine将得到的Requests放入Scheduler中，然后不断从Scheduler询问下次可以进行爬去的Requests；<br>3.Scheduler返回下一次需要被爬取的Requests给Engine；<br>4.Engine将Requests发送给Downloader，通过Downloader Middlewares 的<code>process_request()</code> 方法进行传递；<br>5.Downloader完成了对该页面的下载，Downloader将会生成一个与该页面相关的Response对象，通过Downloader Middlewares的<code>process_response()</code>方法进行传递,将其反馈给Engine；<br>6.Engine从Downloader得到Response再发送给Spider进行处理；通过Spidder Middlewares的<code>process_spider_input()</code>方法进行传递；<br>7.Spider 处理从Engine返回的Reponse对象，返回被爬取的items和新的Requests给Engine继续处理,通过Spider Middlewares的<code>process_spider_output()</code>方法进行传递；<br>8.Engine发送已经被处理的Items到Item Pipelines，然后将新的Requests发送给Scheduler请求下一次可能的新的Request进行爬取；<br>9.再重复整个流程，直到Scheduler中没有新的Requests</p>
<h4 id="Scrapy主要模块"><a href="#Scrapy主要模块" class="headerlink" title="Scrapy主要模块"></a>Scrapy主要模块</h4><ul>
<li>Engine:核心引擎来控制所有组件之间的数据流向</li>
<li>Scheduler:从Engine当中获取Requests，然后将它们放入队列当中，当Engine需要再触发</li>
<li>Downloader:主要是取得web页面，然后将它们返回给Engine，Engine再反馈给Spider</li>
<li>Downloader middleware:位于Engine和Downloader之间的一个特殊的“钩子(hook)”，主要处理从Engine发送给 Downloader的Requests，以及从Downloader传递给Engine的Responses</li>
<li>Spiders:自定义类，用来解析Responses并提取相关的元素items</li>
<li>Spider middleware:是Engine和Spiders之间的一个特殊的钩子(hook)，主要处理spider的input(reponses)和output(items和requests)</li>
<li>Item Pipeline:处理Spider提取完成的items,对数据进行清洗，验证和持久化处理</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架构&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://ttxsgoto.github.io/img/scrapy/scrapy.png&quot; alt=&quot;Scrap
    
    </summary>
    
      <category term="Scrapy" scheme="https://ttxsgoto.github.io/categories/Scrapy/"/>
    
    
      <category term="Architecture" scheme="https://ttxsgoto.github.io/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Django Channels</title>
    <link href="https://ttxsgoto.github.io/2017/11/26/django-Channels/"/>
    <id>https://ttxsgoto.github.io/2017/11/26/django-Channels/</id>
    <published>2017-11-26T14:20:43.000Z</published>
    <updated>2017-12-04T07:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel，可实现该功能</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>Channels基本上就是任务队列：消息被生产者推到通道，然后传递给监听通道的消费者</p>
<h4 id="Channels工作层："><a href="#Channels工作层：" class="headerlink" title="Channels工作层："></a>Channels工作层：</h4><ol>
<li>接口服务器，Django和用户（浏览器）之间通信的桥梁，包括一个实现WSGI协议的适配器和一个独立的websocket服务器</li>
<li>通道后端， 在接口服务器和worker之间传递消息，由插拔式的python代码和存储组成，存储可以是内存、数据库或者redis，推荐使用redis，兼具其余两者的优点</li>
<li>worker，监听所有channel，当有新消息到来时候唤醒功能函数</li>
</ol>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li><p>安装Channels</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install -U channels</div><div class="line"> </div><div class="line"><span class="comment"># settings.py</span></div><div class="line"> <span class="string">'channels'</span>,</div></pre></td></tr></table></figure>
</li>
<li><p>选择一个通道层(redis)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">pip install -U asgi_redis</div><div class="line"> </div><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># Channel settings</span></div><div class="line">CHANNEL_LAYERS = &#123;</div><div class="line">    <span class="string">"default"</span>: &#123;</div><div class="line">        <span class="string">"BACKEND"</span>: <span class="string">"asgi_redis.RedisChannelLayer"</span>,</div><div class="line">        <span class="string">"CONFIG"</span>: &#123;</div><div class="line">            <span class="string">"hosts"</span>: [os.environ.get(<span class="string">'REDIS_URL'</span>, <span class="string">'redis://redis@127.0.0.1:6379'</span>)],</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"ROUTING"</span>: <span class="string">"proj.routing.channel_routing"</span>,</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>routing.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">channel_routing = &#123;</div><div class="line">    <span class="comment"># Wire up websocket channels to our consumers:</span></div><div class="line">    <span class="string">'websocket.connect'</span>: consumers.ws_connect,</div><div class="line">    <span class="string">'websocket.receive'</span>: consumers.ws_receive,</div><div class="line">    <span class="string">'websocket.disconnect'</span>: consumers.ws_disconnect,</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment"># - 'websocket.connect': consumers.ws_connect  第一次通过WebSocket连接上时，一条消息被发送到 websocket.connect 通道</span></div><div class="line"><span class="comment"># - 'websocket.receive': consumers.ws_receive 每条客户端通过已建立的socket发送的消息都被发送到 websocket.receive通道</span></div><div class="line"><span class="comment"># - 'websocket.disconnect': consumers.ws_disconnect 当客户端断开连接时，一条消息被发送到websocket.disconnect通道</span></div></pre></td></tr></table></figure>
</li>
<li><p>consumers.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> Group</div><div class="line"><span class="keyword">from</span> channels.sessions <span class="keyword">import</span> channel_session</div><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line"><span class="meta">@channel_session</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_connect</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    创建message</div><div class="line">    """</div><div class="line">    group = <span class="string">'test'</span></div><div class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">    Group(group, channel_layer=message.channel_layer).add(message.reply_channel)</div><div class="line">    message.channel_session[<span class="string">'group'</span>] = group    <span class="comment"># 通过session保存组信息</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@channel_session</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_receive</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    发送message</div><div class="line">    """</div><div class="line">    group = message.channel_session[<span class="string">'group'</span>]</div><div class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">    data = json.loads(message[<span class="string">'text'</span>])</div><div class="line">    Group(group, channel_layer=message.channel_layer).send(&#123;<span class="string">'text'</span>: json.dumps(data.as_dict())&#125;)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">@channel_session</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_disconnect</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    关闭message</div><div class="line">    """</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        group = message.channel_session.get(<span class="string">'group'</span>)</div><div class="line">        message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">        Group(group, channel_layer=message.channel_layer).discard(message.reply_channel)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> channels.asgi</div><div class="line"> </div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"proj.settings"</span>)</div><div class="line">channel_layer = channels.asgi.get_channel_layer()</div><div class="line"> </div><div class="line"><span class="comment"># 测试环境中运行</span></div><div class="line">python manage.py runserver</div><div class="line"><span class="comment"># 前台接口服务daphne</span></div><div class="line">daphne chat.asgi:channel_layer -p <span class="number">8888</span> -b <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -v2 --access-log=/var/log/asgi.log</div><div class="line"><span class="comment"># 后台消息消费者</span></div><div class="line">python manage.py runworker</div></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># asgi.sh</span></div><div class="line"><span class="keyword">exec</span> daphne asgi:channel_layer \</div><div class="line">    -b <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> \</div><div class="line">    -p <span class="number">8004</span> -v2 \</div><div class="line">    --access-log=/var/logs/asgi.log</div><div class="line"><span class="comment"># worker.sh</span></div><div class="line"><span class="keyword">exec</span> python manage.py runworker</div><div class="line"><span class="comment"># 通过supervisord来启动两个服务</span></div><div class="line">   </div><div class="line"><span class="comment"># nginx配置支持ws， 这里指定特定url规则来处理ws其他的url不使用ws</span></div><div class="line">location ~ ^/channel/ &#123;</div><div class="line">        client_max_body_size <span class="number">10</span>M;</div><div class="line">        proxy_pass         http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8004</span>;</div><div class="line">        proxy_set_header   Host $host:<span class="number">80</span>;</div><div class="line">        proxy_set_header   X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line"> </div><div class="line">        <span class="comment"># 支持ws配置如下</span></div><div class="line">        proxy_http_version <span class="number">1.1</span>;</div><div class="line">        proxy_set_header Upgrade $http_upgrade;</div><div class="line">        proxy_set_header Connection <span class="string">"upgrade"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> 7.其他 </p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># In consumers.py</span></div><div class="line"><span class="keyword">from</span> channels <span class="keyword">import</span> Channel, Group</div><div class="line"><span class="keyword">from</span> channels.sessions <span class="keyword">import</span> channel_session</div><div class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> channel_session_user, channel_session_user_from_http</div><div class="line"> </div><div class="line"><span class="comment"># Connected to websocket.connect</span></div><div class="line"><span class="meta">@channel_session_user_from_http	# 在message中添加user对象，也可保存相关的信息到session中</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_add</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="comment"># Accept connection</span></div><div class="line">    message.reply_channel.send(&#123;<span class="string">"accept"</span>: <span class="keyword">True</span>&#125;)</div><div class="line">    <span class="comment"># Add them to the right group</span></div><div class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).add(message.reply_channel)</div><div class="line"> </div><div class="line"><span class="comment"># Connected to websocket.receive</span></div><div class="line"><span class="meta">@channel_session_user </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_message</span><span class="params">(message)</span>:</span></div><div class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).send(&#123;</div><div class="line">        <span class="string">"text"</span>: message[<span class="string">'text'</span>],</div><div class="line">    &#125;)</div><div class="line"> </div><div class="line"><span class="comment"># Connected to websocket.disconnect</span></div><div class="line"><span class="meta">@channel_session_user</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ws_disconnect</span><span class="params">(message)</span>:</span></div><div class="line">    Group(<span class="string">"chat-%s"</span> % message.user.username[<span class="number">0</span>]).discard(message.reply_channel)</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul>
<li><a href="https://channels.readthedocs.io/en/latest/getting-started.html" target="_blank" rel="external">https://channels.readthedocs.io/en/latest/getting-started.html</a></li>
<li><a href="https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django" target="_blank" rel="external">https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django</a></li>
<li><a href="https://github.com/jacobian/channels-example" target="_blank" rel="external">https://github.com/jacobian/channels-example</a></li>
<li><a href="https://github.com/heshiyou/livelog" target="_blank" rel="external">https://github.com/heshiyou/livelog</a></li>
<li><a href="http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/" target="_blank" rel="external">http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Channels" scheme="https://ttxsgoto.github.io/tags/Channels/"/>
    
  </entry>
  
  <entry>
    <title>Django Logging</title>
    <link href="https://ttxsgoto.github.io/2017/11/13/django-logging/"/>
    <id>https://ttxsgoto.github.io/2017/11/13/django-logging/</id>
    <published>2017-11-13T14:41:28.000Z</published>
    <updated>2017-12-04T01:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="logging组成"><a href="#logging组成" class="headerlink" title="logging组成"></a>logging组成</h4><ul>
<li><p>记录器(Logger)</p>
<p>  logger决定消息需要处理，即将传递该消息给一个Handler</p>
</li>
<li><p>处理程序(Handler)</p>
<p>  handler决定如何处理logger中的每条信息，表示详细的日志行为，如写入文件或者屏幕显示等</p>
<p>  handler中也有日志级别，如果消息的日志级别小于handler的级别，handler将忽略该消息</p>
</li>
<li><p>过滤器(Filters)</p>
<p>  用于对从logger传递给handler的日志记录进行额外的控制</p>
<p>  filters可以用于修改将要处理的日志记录的优先级</p>
<p>  filters可以安装在logger或者handler上，多个filter可以串联起来实现多层filter行为</p>
</li>
<li><p>格式化(Formatter)</p>
<p>  日志记录需要转换成文本</p>
</li>
</ul>
<h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><ul>
<li>DEBUG: 用于调试底层系统信息</li>
<li>INFO: 普通的系统信息</li>
<li>WARNING: 警告信息</li>
<li>ERROR： 错误信息</li>
<li>CRITICAL: 严重错误信息</li>
</ul>
<h4 id="使用logging"><a href="#使用logging" class="headerlink" title="使用logging"></a>使用logging</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"> </div><div class="line"><span class="comment"># 调用获取logger的实例</span></div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"> </div><div class="line"><span class="comment"># 使用</span></div><div class="line">logger.error(<span class="string">'Something wrong!'</span>)</div><div class="line">logger.debug(<span class="string">'debug'</span>)</div><div class="line">logger.info(<span class="string">'info'</span>)</div><div class="line">logger.warning(<span class="string">'warning'</span>)</div><div class="line">logger.critical(<span class="string">'critical'</span>)</div><div class="line">logger.log(<span class="string">'log'</span>)   <span class="comment"># 打印消息时手动指定日志级别</span></div><div class="line">logger.exception() <span class="comment"># 创建一个error级别日志消息</span></div></pre></td></tr></table></figure>
<h4 id="实例-settings-py"><a href="#实例-settings-py" class="headerlink" title="实例(settings.py)"></a>实例(settings.py)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">LOGGING = &#123;</div><div class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,   <span class="comment"># 默认配置中的所有logger 都将禁用</span></div><div class="line">    <span class="string">'formatters'</span>: &#123;</div><div class="line">       <span class="string">'standard'</span>: &#123;</div><div class="line">            <span class="string">'format'</span>: <span class="string">'%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'</span>&#125;,  <span class="comment">#日志格式</span></div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">    <span class="comment"># 'filters': &#123;</span></div><div class="line">    <span class="comment">#     'require_debug_false': &#123;</span></div><div class="line">    <span class="comment">#         '()': 'django.utils.log.RequireDebugFalse',</span></div><div class="line">    <span class="comment">#     &#125;,</span></div><div class="line">    <span class="comment"># &#125;,</span></div><div class="line">    <span class="string">'handlers'</span>: &#123;</div><div class="line">        <span class="string">'default'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'class'</span>:<span class="string">'logging.handlers.RotatingFileHandler'</span>,</div><div class="line">            <span class="string">'filename'</span>: <span class="string">"../logs/server.log"</span>,   <span class="comment"># 日志输出文件</span></div><div class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,                                    <span class="comment"># 文件大小</span></div><div class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,                                           <span class="comment"># 备份份数</span></div><div class="line">            <span class="string">'formatter'</span>:<span class="string">'standard'</span>,                                     <span class="comment">#使用哪种formatters日志格式</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'error'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>:<span class="string">'ERROR'</span>,</div><div class="line">            <span class="string">'class'</span>:<span class="string">'logging.handlers.RotatingFileHandler'</span>,</div><div class="line">            <span class="string">'filename'</span>: <span class="string">"../logs/server.log"</span>,</div><div class="line">            <span class="string">'maxBytes'</span>:<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,</div><div class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,</div><div class="line">            <span class="string">'formatter'</span>:<span class="string">'standard'</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'console'</span>:&#123;</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</div><div class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span></div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'loggers'</span>: &#123;</div><div class="line">        <span class="string">'django'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">True</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'django.request'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'default'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">False</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'django.db.backends'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>,],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">False</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'ttxs'</span>: &#123;</div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'default'</span>, <span class="string">'error'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;logging组成&quot;&gt;&lt;a href=&quot;#logging组成&quot; class=&quot;headerlink&quot; title=&quot;logging组成&quot;&gt;&lt;/a&gt;logging组成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;记录器(Logger)&lt;/p&gt;
&lt;p&gt;  logger决定消息需要
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Logging" scheme="https://ttxsgoto.github.io/tags/Logging/"/>
    
  </entry>
  
  <entry>
    <title>Django Signals信号</title>
    <link href="https://ttxsgoto.github.io/2017/09/27/django-signals/"/>
    <id>https://ttxsgoto.github.io/2017/09/27/django-signals/</id>
    <published>2017-09-27T14:41:10.000Z</published>
    <updated>2017-12-04T01:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Django 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组receiver某些操作已经发生;这在多处代码和同一事件有关联的情况下很有用</p>
<h3 id="预定义信号"><a href="#预定义信号" class="headerlink" title="预定义信号"></a>预定义信号</h3><ul>
<li><p>在模型 save()方法调用之前或之后发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.db.models.signals.pre_save </div><div class="line">django.db.models.signals.post_save</div></pre></td></tr></table></figure>
</li>
<li><p>在模型delete()方法或查询集的delete() 方法调用之前或之后发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.db.models.signals.pre_delete</div><div class="line">django.db.models.signals.post_delete</div></pre></td></tr></table></figure>
</li>
<li><p>模型上的 ManyToManyField 修改时发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django.db.models.signals.m2m_changed</div></pre></td></tr></table></figure>
</li>
<li><p>Django建立或关闭HTTP 请求时发送</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django.core.signals.request_started</div><div class="line">django.core.signals.request_finished</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义和发送信号"><a href="#定义和发送信号" class="headerlink" title="定义和发送信号"></a>定义和发送信号</h3><h4 id="定义信号"><a href="#定义信号" class="headerlink" title="定义信号"></a>定义信号</h4><p>所有信号都是 django.dispatch.Signal 的实例。providing_args是一个列表，由信号将提供给监听者的参数名称组成。理论上是这样，但是实际上并没有任何检查来保证向监听者提供了这些参数。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">from</span> django.dispatch <span class="keyword">import</span> Signal</div><div class="line"> s_email_sended = Signal(providing_args=[</div><div class="line">    <span class="string">'email_tpl'</span>, <span class="string">'email_subject'</span>, <span class="string">'email_content'</span>, <span class="string">'email_cate'</span>, <span class="string">'sender'</span>, <span class="string">'position'</span>,</div><div class="line">    <span class="string">'candidate'</span>, <span class="string">'candidate_email'</span>, <span class="string">'interviewer'</span>, <span class="string">'interview_email'</span></div><div class="line">])</div><div class="line"> </div><div class="line"><span class="comment"># s_email_sended实例信号，向接受者提供了列表中的参数，最终接受者得到的参数还是需要看send()发送过来的参数</span></div></pre></td></tr></table></figure></p>
<h4 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h4><p> Django中有两种方法用于发送信号:</p>
<ul>
<li>Signal.send(sender, **kwargs)</li>
<li>Signal.send_robust(sender, **kwargs)</li>
</ul>
<p>send()  不会捕获任何由receiver 产生的异常。它会简单地让错误往上传递。所以在错误产生的情况，不是所有receiver 都会获得通知.</p>
<p>send_robust()捕获所有继承自Python Exception类的异常，并且确保所有receiver 都能得到信号的通知。如果发生错误，错误实例会在产生错误的receiver 的二元组中返回.</p>
<p>调用 Signal.send()或者Signal.send_robust()来发送信号。你必须提供sender 参数（大多数情况下它是一个类），并且可以提供尽可能多的关键字参数。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s_email_sended.send(</div><div class="line">           sender=staff,</div><div class="line">           candidate=review.resume_forward.candidate,</div><div class="line">           candidate_email=review.resume_forward.candidate.email,</div><div class="line">           email_subject=subject,</div><div class="line">           email_content=message,</div><div class="line">           email_cate=FlowEmailSendedLog.EMAIL_CATE_INTERVIEWER</div><div class="line">       )</div></pre></td></tr></table></figure></p>
<h4 id="Receiver-函数"><a href="#Receiver-函数" class="headerlink" title="Receiver 函数"></a>Receiver 函数</h4><p>我们需要定义接收器函数，回调函数。接受器可以是Python函数或者方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_callback</span><span class="params">(sender, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">"Request finished!"</span>)</div><div class="line"><span class="comment"># 注意函数接受一个sender参数，以及通配符关键字参数(**kwargs)；所有信号处理器都必须接受这些参数</span></div></pre></td></tr></table></figure></p>
<h4 id="绑定receivers到signal"><a href="#绑定receivers到signal" class="headerlink" title="绑定receivers到signal"></a>绑定receivers到signal</h4><p>1.使用receiver() 装饰器来自动连接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.signals <span class="keyword">import</span> request_finished</div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</div><div class="line"> </div><div class="line"><span class="meta">@receiver(request_finished)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_callback</span><span class="params">(sender, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">"Request finished!"</span>)</div><div class="line"><span class="comment"># 现在，我们的my_callback函数会在每次请求结束时调用</span></div></pre></td></tr></table></figure></p>
<p>2.手动方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.signals <span class="keyword">import</span> request_finished</div><div class="line">request_finished.connect(my_callback)</div></pre></td></tr></table></figure></p>
<h4 id="断开信号"><a href="#断开信号" class="headerlink" title="断开信号"></a>断开信号</h4><p>  Signal.disconnect([receiver=None, sender=None, weak=True, dispatch_uid=None])</p>
<p>  调用Signal.disconnect()来断开信号的接收器。 Signal.connect()中描述了所有参数。如果接收器成功断开，返回 True ，否则返回False。</p>
<p>receiver 参数表示要断开的已注册receiver。如果使用dispatch_uid 标识receiver，它可以为None</p>
<h3 id="自定义signal"><a href="#自定义signal" class="headerlink" title="自定义signal"></a>自定义signal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义信号，定义的信号应该在信号发送过来的字段</span></div><div class="line">s_email_sended = Signal(providing_args=[</div><div class="line">    <span class="string">'email_tpl'</span>, <span class="string">'email_subject'</span>, <span class="string">'email_content'</span>, <span class="string">'email_cate'</span>, <span class="string">'sender'</span>, <span class="string">'position'</span>,</div><div class="line">    <span class="string">'candidate'</span>, <span class="string">'candidate_email'</span>, <span class="string">'interviewer'</span>, <span class="string">'interview_email'</span></div><div class="line">])</div><div class="line"> </div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> Signal</div><div class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</div><div class="line"> </div><div class="line"><span class="comment"># 发送信号</span></div><div class="line">s_email_sended.send(</div><div class="line">            sender=staff,</div><div class="line">            candidate=candidate,</div><div class="line">            candidate_email=candidate.email,</div><div class="line">            email_subject=subject,</div><div class="line">            email_content=message,</div><div class="line">            email_cate=EmailSendedLog.EMAIL_CATE_TYPE</div><div class="line">        )</div><div class="line"> </div><div class="line"><span class="comment"># 接收信号</span></div><div class="line"><span class="meta">@receiver(s_email_sended)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_email_send_log</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> (<span class="string">'sender'</span>, <span class="string">'email_subject'</span>, <span class="string">'email_content'</span>, <span class="string">'email_cate'</span>):</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kwargs.get(field):</div><div class="line">            logs.error(<span class="string">"&#123;&#125; can't be null: email_sender/email_subject/email_content/email_cate"</span>.format(field))</div><div class="line">            <span class="keyword">return</span></div><div class="line"> </div><div class="line">    kwargs.pop(<span class="string">'signal'</span>)</div><div class="line">    EmailSendedLog.objects.create(**kwargs)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;Django 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组rec
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Signals" scheme="https://ttxsgoto.github.io/tags/Signals/"/>
    
  </entry>
  
</feed>
