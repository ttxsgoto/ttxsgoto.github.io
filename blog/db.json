{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/airflow/airflow01.png","path":"img/airflow/airflow01.png","modified":0,"renderable":0},{"_id":"source/img/airflow/airflow02.png","path":"img/airflow/airflow02.png","modified":0,"renderable":0},{"_id":"source/img/airflow/airflow03.png","path":"img/airflow/airflow03.png","modified":0,"renderable":0},{"_id":"source/img/copy/copy01.png","path":"img/copy/copy01.png","modified":0,"renderable":0},{"_id":"source/img/copy/copy02.png","path":"img/copy/copy02.png","modified":0,"renderable":0},{"_id":"source/img/django/django_test01.png","path":"img/django/django_test01.png","modified":0,"renderable":0},{"_id":"source/img/django/page.png","path":"img/django/page.png","modified":0,"renderable":0},{"_id":"source/img/mysql/btree_index.jpg","path":"img/mysql/btree_index.jpg","modified":0,"renderable":0},{"_id":"source/img/rabbitmq/03.png","path":"img/rabbitmq/03.png","modified":0,"renderable":0},{"_id":"source/img/rabbitmq/01.png","path":"img/rabbitmq/01.png","modified":0,"renderable":0},{"_id":"source/img/rabbitmq/02.png","path":"img/rabbitmq/02.png","modified":0,"renderable":0},{"_id":"source/img/rabbitmq/04.png","path":"img/rabbitmq/04.png","modified":0,"renderable":0},{"_id":"source/img/rabbitmq/05.png","path":"img/rabbitmq/05.png","modified":0,"renderable":0},{"_id":"source/img/rabbitmq/06.png","path":"img/rabbitmq/06.png","modified":0,"renderable":0},{"_id":"source/img/rabbitmq/07.png","path":"img/rabbitmq/07.png","modified":0,"renderable":0},{"_id":"source/img/scrapy/scrapy.png","path":"img/scrapy/scrapy.png","modified":0,"renderable":0},{"_id":"themes/Tinnypp/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/css/多说自定义.css","path":"css/多说自定义.css","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/2.png","path":"img/2.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/3.png","path":"img/3.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/blueprint-dark.png","path":"img/blueprint-dark.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/log.jpeg","path":"img/log.jpeg","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/dots-2x.png","path":"img/dots-2x.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/myLogo.png","path":"img/myLogo.png","modified":0,"renderable":1},{"_id":"source/img/django/permission.png","path":"img/django/permission.png","modified":0,"renderable":0},{"_id":"source/img/celery/celery01.png","path":"img/celery/celery01.png","modified":0,"renderable":0},{"_id":"source/img/docker_network/1.png","path":"img/docker_network/1.png","modified":0,"renderable":0},{"_id":"source/img/docker_network/2.png","path":"img/docker_network/2.png","modified":0,"renderable":0},{"_id":"source/img/docker_network/3.png","path":"img/docker_network/3.png","modified":0,"renderable":0},{"_id":"source/img/scrapy/selenium01.png","path":"img/scrapy/selenium01.png","modified":0,"renderable":0},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/img/1.jpg","path":"img/1.jpg","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"source/img/ansible/ansible01.png","path":"img/ansible/ansible01.png","modified":0,"renderable":0},{"_id":"source/img/mysql/btree_index.png","path":"img/mysql/btree_index.png","modified":0,"renderable":0},{"_id":"source/img/elk/elk.png","path":"img/elk/elk.png","modified":0,"renderable":0},{"_id":"source/img/vue/echarts/pie.png","path":"img/vue/echarts/pie.png","modified":0,"renderable":0},{"_id":"source/img/vue/echarts/line.png","path":"img/vue/echarts/line.png","modified":0,"renderable":0},{"_id":"source/img/vue/echarts/bar.png","path":"img/vue/echarts/bar.png","modified":0,"renderable":0},{"_id":"themes/Tinnypp/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"dacb912b5bfd0a5d1140d30f701c0e63eea5866a","modified":1562281644000},{"_id":"source/._.DS_Store","hash":"11050c2745c99ec8dacff161c2a0a22ffacb8b47","modified":1562281644000},{"_id":"themes/Tinnypp/.gitignore","hash":"b0e9116ebcfa1a73ee8d8c6c67d8686f57bccdc5","modified":1562281644000},{"_id":"themes/Tinnypp/README.md","hash":"193070834c2990d82ca341e3a8584a3390999e4f","modified":1562281644000},{"_id":"themes/Tinnypp/_config.yml","hash":"99ace57bb27774120457d143b5c03b55e541bcd6","modified":1562281644000},{"_id":"themes/Tinnypp/.DS_Store","hash":"6d2e29411805af0e7bffb65ef858dbe20fbd095e","modified":1562281644000},{"_id":"themes/Tinnypp/_config.yml.bak","hash":"7a687384e70e10383dc897eeb62e724220df52da","modified":1562281644000},{"_id":"themes/Tinnypp/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1562281644000},{"_id":"source/_posts/._awk_uniq_sort.md","hash":"ddcc4b0a6aa5f41e512e8f27be630c644e7e94de","modified":1562281644000},{"_id":"source/_posts/._.DS_Store","hash":"11050c2745c99ec8dacff161c2a0a22ffacb8b47","modified":1562281644000},{"_id":"source/about/index.md","hash":"9b89eb776dd05918064314e593d188698342ddc9","modified":1562281644000},{"_id":"source/_posts/.DS_Store","hash":"9b1fc55bc65fc6579ee66432bed77992c994bed9","modified":1562281644000},{"_id":"source/_posts/._cpu.md","hash":"261b293afb443fb6b7be11508973a3fbf333f58c","modified":1562281644000},{"_id":"source/_posts/._docker_network.md","hash":"2512b6e06692f6bc8251ddff39ebf16e08c375a1","modified":1562281644000},{"_id":"source/_posts/API.md","hash":"94156bfc9eb681506d20fe72bc27dbb3f0d7b971","modified":1562281644000},{"_id":"source/_posts/API-auth.md","hash":"9fb1a6fe1b2c3fc87a401536cbddb4cd10d890da","modified":1562281644000},{"_id":"source/_posts/ConfigParser.md","hash":"44eb5f15f3b5a80d32f5a14b3d5dd9a0883530aa","modified":1562281644000},{"_id":"source/_posts/Scrapy-itemloaders.md","hash":"68a7bf7add84dd2b436e403c9e52c30a151f0ac7","modified":1562281644000},{"_id":"source/_posts/Filters.md","hash":"c692cd297131c6c9a6c314a34a1355f977234d09","modified":1562281644000},{"_id":"source/_posts/Scrapy-selectors.md","hash":"4f026877f19112078c2252e5eaed2a77d849c06d","modified":1562281644000},{"_id":"source/_posts/Throtting.md","hash":"104a319f0e9b322567f3c36bb54e9a02eff392b8","modified":1562281644000},{"_id":"source/_posts/angular-apply-watch.md","hash":"91fd8177dacd08652d7f4a5029f13e98a83bbabc","modified":1562281644000},{"_id":"source/_posts/angular-directive.md","hash":"574cff6e808b63c3cd54715f5a01eca56a49f1ac","modified":1562281644000},{"_id":"source/_posts/angular-modal.md","hash":"fdcc9bfc87516c7eb6ab4ede708882901e89068a","modified":1562281644000},{"_id":"source/_posts/ansible.md","hash":"767bab190d4690ba844b6a40f14e93d38224873f","modified":1562281644000},{"_id":"source/_posts/angular-servers.md","hash":"05207101f7d07cdd87862b14aa91142118089143","modified":1562281644000},{"_id":"source/_posts/awk_uniq_sort.md","hash":"bdc213f89c90b6b8e007f2584df0d4681a923c65","modified":1562281644000},{"_id":"source/_posts/celery.md","hash":"e62a577c889de64f7c7859a870e8cb62210996c2","modified":1562281644000},{"_id":"source/_posts/class.md","hash":"3ca51a6db05fd5dadd1f2ec19e68b115fb407cae","modified":1562281644000},{"_id":"source/_posts/datetime.md","hash":"9419fb59e088f06568e216cbaa42f89b2e81a400","modified":1564208738000},{"_id":"source/_posts/collections.md","hash":"a9d02d53140560ccb22d62507af17b840002022d","modified":1562281644000},{"_id":"source/_posts/copy-deepcopy.md","hash":"6665721814855c7e5f41522998a8c1e9d1a62e44","modified":1562281644000},{"_id":"source/_posts/cpu.md","hash":"741dc087f6214f3352f68ee48fbaea0489b5b8c6","modified":1562281644000},{"_id":"source/_posts/decorator.md","hash":"18093de408480b43c11585e03520800fc064b2c5","modified":1562281644000},{"_id":"source/_posts/descriptor.md","hash":"30fa81a07d6df2e55db9e7ac735de2d8c86c1b31","modified":1562281644000},{"_id":"source/_posts/django-Channels.md","hash":"13cdab351bd80cbbbb509e489504e2079408c57d","modified":1562281644000},{"_id":"source/_posts/django-define-auth.md","hash":"d059e0f81630ae750cc0681d2e857789f965b610","modified":1562281644000},{"_id":"source/_posts/django-forms.md","hash":"b71b36f6388d45651121d5d74aaaa541378a7fe4","modified":1562281644000},{"_id":"source/_posts/django-logging.md","hash":"d0685f901393c199ac5a3ba1f648b80beb57b253","modified":1562281644000},{"_id":"source/_posts/django-models-basic.md","hash":"9b1de9bddc5e15bd98095f05fad2acaa3539dd92","modified":1562281644000},{"_id":"source/_posts/django-migrations-error.md","hash":"c169e616ed3395785e242c42d55f87ed719dc02d","modified":1562281644000},{"_id":"source/_posts/django-orm-queryset.md","hash":"f8f30464572f5a98e332ff355bc7f8b3fde49e2a","modified":1562281644000},{"_id":"source/_posts/django-page.md","hash":"2272cbb89ba8c18bfa8a5acff5a61a704db040b6","modified":1562281644000},{"_id":"source/_posts/django-signals.md","hash":"6cd183430dd2e0da8e0d16f6787a4f0a5828511e","modified":1562281644000},{"_id":"source/_posts/django-test.md","hash":"e04a1a273a23f5017bcdb8faae70b1cfd43bf3aa","modified":1562281644000},{"_id":"source/_posts/docker-command.md","hash":"634a38efa9b3b6ebdc9b7b3d4ae1a3d43d0db5cd","modified":1562281644000},{"_id":"source/_posts/django-url-permisson.md","hash":"3b37d29f20c8f180d1306dd06eb8e469c80b80da","modified":1562281644000},{"_id":"source/_posts/docker-compose.md","hash":"8dceda80ff9f991eeda66b102f8142d14ff735ac","modified":1562281644000},{"_id":"source/_posts/docker_network.md","hash":"7d1c7da43bf9612fbc9047b89cc86301c419a177","modified":1562281644000},{"_id":"source/_posts/elasticsearch-elasticsearch-dsl.md","hash":"1191bd92bc0fefbe7ca79d1a598a6f8f6bc547a3","modified":1562281644000},{"_id":"source/_posts/elasticsearch-elk.md","hash":"1d633ebfacd8737ec670f6e872a8838f2da55e5f","modified":1562281644000},{"_id":"source/_posts/elasticsearch-mongo-to-es.md","hash":"bc61d9c315ff21804d04513fbb4caf6561c75912","modified":1562281644000},{"_id":"source/_posts/fabric.md","hash":"b07ab504de81335e08e40755505d7cdb322048c5","modified":1562281644000},{"_id":"source/_posts/hexo.md","hash":"53a3d0ff1beacf75c04c6528b48f18cdb4129c06","modified":1562281644000},{"_id":"source/_posts/elasticsearch-mysql-to-es.md","hash":"d8bc04c53b73b676063d14aa3c85a3daed73956b","modified":1562281644000},{"_id":"source/_posts/importlib.md","hash":"5b5de384d21bbbe39db983e5a068ec8e043a3c81","modified":1562281644000},{"_id":"source/_posts/iptables-forward.md","hash":"34f2215f262469344918bebe19468ef183361748","modified":1562281644000},{"_id":"source/_posts/logging.md","hash":"5ae624cad0bfd48db434d4db5db5d6314678631a","modified":1562281644000},{"_id":"source/_posts/mongo.md","hash":"efe6001febe8fae998c8f4b87b85815c634cfb67","modified":1562281644000},{"_id":"source/_posts/mysql-queryset.md","hash":"5641aa9ebb53e730b827bf465468cf39db7943fc","modified":1562281644000},{"_id":"source/_posts/mysqldb.md","hash":"ac8252e8dc7a5d3cefa907e3172389d67c8f83d6","modified":1562281644000},{"_id":"source/_posts/python-asyncio-basic.md","hash":"f2d711339141e3fcfbaf6f566c2d662063898676","modified":1562281644000},{"_id":"source/_posts/python-contextlib.md","hash":"fd4f0e7274f1b10d203c07d2c0d68149ffe43189","modified":1562281644000},{"_id":"source/_posts/python-descriptor02.md","hash":"0d52a097e352f09ca10dd65b781e388ba9b94dc4","modified":1562281644000},{"_id":"source/_posts/python-django-celery.md","hash":"353c6e6f188493069082bf33367431ebf66d5d61","modified":1562281644000},{"_id":"source/_posts/python-dyn-attr-prop.md","hash":"344cd24391c72a67688baeee7bb9283321ff93a4","modified":1562281644000},{"_id":"source/_posts/python-magic-function.md","hash":"d5b7083021310737dfe011c782f8b4e50112a3b9","modified":1562281644000},{"_id":"source/_posts/python-selenium.md","hash":"ae7577024d981b9af9e67b1dd379a47c1efab715","modified":1562281644000},{"_id":"source/_posts/re.md","hash":"9bdd230eee856890c407969a7a083d79d43bc6fe","modified":1562281644000},{"_id":"source/_posts/python-sqlalchemy.md","hash":"337d5a24fdc33b074910adc7a0ec996adbd7e82e","modified":1562281644000},{"_id":"source/_posts/rabbitmq.md","hash":"01c18e06b950d38e2b44dac12425150deb2b31fd","modified":1562281644000},{"_id":"source/_posts/redis.md","hash":"49dd2d11a52c12b2341fdde3563dee7df9adad52","modified":1562281644000},{"_id":"source/_posts/redis-advance.md","hash":"565f8b70b15b04ac981f6a022e2b3e0d87fe2c9c","modified":1562281644000},{"_id":"source/_posts/rest-framwork-note.md","hash":"bb4fbdaef5c0d2292190f1b0c013f5da7481ad91","modified":1562281644000},{"_id":"source/_posts/rest-framwork-serializer-efficient.md","hash":"5166a91ca99732acb38a1aab7297f907247e3e93","modified":1562281644000},{"_id":"source/_posts/rest-framwork-serializers.md","hash":"bda8249e42d4ec6402dd0cc9701f29d01c9bf599","modified":1562281644000},{"_id":"source/_posts/scrapy-state.md","hash":"098e60c47843b6fdd91825c8c8369f5e1d9f4a10","modified":1562281644000},{"_id":"source/_posts/scrapy-selenium.md","hash":"bb4cf1098479ca9f35edbcde9b96c4805d56313c","modified":1562281644000},{"_id":"source/_posts/scrapy-sample.md","hash":"22cec905b1e685e4553d23bb376a38c1f7cd533d","modified":1562281644000},{"_id":"source/_posts/setup.md","hash":"677acb82a0479f4ef4d01a9f6604af9cd3fa6810","modified":1562281644000},{"_id":"source/_posts/threading.md","hash":"d58c847e167dacc1470a2a15cda2624e51a1c682","modified":1562281644000},{"_id":"source/_posts/vim.md","hash":"b5537465d0ec1f7f4c601d953fe07ad582407cfe","modified":1562281644000},{"_id":"source/_posts/tmux.md","hash":"7748da5766e6aee1d3f9b9b7453cfd8c27565e10","modified":1562281644000},{"_id":"source/_posts/vue-echarts.md","hash":"c61ab893b13339801da513e2fc64012d04d6fcf7","modified":1562281644000},{"_id":"source/_posts/yw-airflow-install.md","hash":"09fcb717ab0bc21cf25612d0c21c88d234b249c6","modified":1564208738000},{"_id":"source/_posts/vue-life-cycle-function.md","hash":"3e7d2a5357aa4c2cb6fff7eddd7270be1563f03b","modified":1562281644000},{"_id":"source/_posts/yield.md","hash":"605a9a56172f03cabd73bad44b23df9ec1a21309","modified":1562281644000},{"_id":"source/_posts/yw-airflow-dynamic-dags-tasks.md","hash":"59484a782a1e317c0708b3af4b92bba2d10273fe","modified":1564208738000},{"_id":"source/_posts/yw-apollo.md","hash":"9a63d23ed75b271c916eec3b89e34ad28ba0e396","modified":1562281644000},{"_id":"source/_posts/yw-chroot.md","hash":"715df87d93ef44f6714916855a834b42a079f871","modified":1562281644000},{"_id":"source/_posts/yw-fg.md","hash":"bb30bcefe94b55a7f04e6149b30c5f6d0cc1a458","modified":1562281644000},{"_id":"source/_posts/yw-airflow-operator.md","hash":"7a2d98d0dcc2732912ef2413c94f5c311c54a406","modified":1564208738000},{"_id":"source/_posts/yw-git-basic.md","hash":"861189bce4e82a3c6f70103f45caaf3d9f9a5768","modified":1562281644000},{"_id":"source/_posts/yw-jenkins-ci.md","hash":"b2a8f5c6af3e675b4e37c77101ba221aa320ff42","modified":1562281644000},{"_id":"source/_posts/yw-mysql-count.md","hash":"e2f8522250ee91d504843bae858af7ceabdc0be0","modified":1562281644000},{"_id":"source/_posts/yw-mysql-addindex-to-string.md","hash":"837bb850535a787662c3d0c42229d9bd07a31a3a","modified":1562281644000},{"_id":"source/_posts/yw-java-jvm.md","hash":"c3d098f3cd32049aaba6169203a24296d5922fb0","modified":1562281644000},{"_id":"source/_posts/yw-mysql-index.md","hash":"220cb19e986991fda675d03f5202c2948321494c","modified":1562281644000},{"_id":"source/_posts/yw-mysql-index02.md","hash":"cd48ea37484960e8eb10709e20e6728217fc7502","modified":1562281644000},{"_id":"source/_posts/yw-mysql-lock.md","hash":"0cad6e54edfa29373acfb1af1b9af03ac5733812","modified":1562281644000},{"_id":"source/_posts/yw-mysql-order-by.md","hash":"fd5d4d3a3291fb0515280344b6d5bf67b79123a9","modified":1562281644000},{"_id":"source/_posts/yw-mysql-question.md","hash":"da50cdd8d44cd77bd47e1f30444a17ca8ca986a7","modified":1562281644000},{"_id":"source/_posts/yw-mysql-redo-binlog.md","hash":"49409e86bc68c75303da7116cc5e9c9cd8110d5e","modified":1562281644000},{"_id":"source/_posts/yw-mysql-select-index.md","hash":"4d931e31d8ad052f4e156f63938c8053a4944467","modified":1562281644000},{"_id":"source/_posts/yw-mysql-store.md","hash":"816fa298467cb004b6c6afcf0c8c878dcb3b61d8","modified":1562281644000},{"_id":"source/_posts/yw-mysql-transaction.md","hash":"9b9b826bb277639c08be6b3d83a4d7ec62fafd0b","modified":1562281644000},{"_id":"source/_posts/yw-mysql-unique-index.md","hash":"375838a0b717cdc1d40c26a49708fe6e9a200d0f","modified":1562281644000},{"_id":"source/_posts/yw-pwd.md","hash":"635e06959dc45fa35a1d163b14ec4cd2be5cbeb7","modified":1562281644000},{"_id":"source/_posts/yw-sersync.md","hash":"64df28d22cd1e2fdf72e7e52c19355111f1e0688","modified":1562281644000},{"_id":"source/_posts/yw-systemd.md","hash":"8117096342b25f0f877bb4fb52077861fd1fa216","modified":1562281644000},{"_id":"source/_posts/yw-zabbix.md","hash":"fd77e1b507b49b2f05e4746ef9a99331cd34c7e6","modified":1562281644000},{"_id":"source/search/index.md","hash":"33ba535f337a8bbb12473103dcb0aa5505b36fac","modified":1562281644000},{"_id":"source/img/.DS_Store","hash":"8c3a1911d99b644b35b1e2f44318359dbe23b447","modified":1562281644000},{"_id":"themes/Tinnypp/languages/zh-TW.yml","hash":"d00740d05b70e4ef469662d594ae17252d7ea5a7","modified":1562281644000},{"_id":"source/img/._.DS_Store","hash":"11050c2745c99ec8dacff161c2a0a22ffacb8b47","modified":1562281644000},{"_id":"themes/Tinnypp/languages/zh-CN.yml","hash":"b100c69a085fce4c85422507390b1d2acb15c2f7","modified":1562281644000},{"_id":"themes/Tinnypp/languages/default.yml","hash":"19935fd15f0ba067d5355ceaff0d4b17a1cdfeb3","modified":1562281644000},{"_id":"themes/Tinnypp/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1562281644000},{"_id":"themes/Tinnypp/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1562281644000},{"_id":"themes/Tinnypp/layout/index.ejs","hash":"7c247133b47686768764dcc883908b3c752d3f8c","modified":1562281644000},{"_id":"themes/Tinnypp/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1562281644000},{"_id":"themes/Tinnypp/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1562281644000},{"_id":"themes/Tinnypp/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1562281644000},{"_id":"themes/Tinnypp/scripts/highlight.pack.js","hash":"0813d386edbe80ee9a47391564002ad52a50c039","modified":1562281644000},{"_id":"themes/Tinnypp/layout/layout.ejs","hash":"b6e59993e4427326136beaf36422a924a769c5dc","modified":1562281644000},{"_id":"themes/Tinnypp/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1562281644000},{"_id":"themes/Tinnypp/source/.DS_Store","hash":"3f3088852103d1d51880f32820ee0ec23625b97b","modified":1562281644000},{"_id":"source/img/airflow/airflow01.png","hash":"78f1b243f84c15732856e98ee5771b7a96d040f4","modified":1564208738000},{"_id":"source/img/airflow/airflow02.png","hash":"d12836265db4c195f9dfcf1261f6aa147ca7cdeb","modified":1564208738000},{"_id":"source/img/airflow/airflow03.png","hash":"b73a3442c4073b59b4d4f81260055a995a51943b","modified":1564208738000},{"_id":"source/img/ansible/._ansible01.png","hash":"0bfb64e59c9252028da6fe98a099b8a20496b8cf","modified":1562281644000},{"_id":"source/img/celery/._celery01.png","hash":"66dd3c56afdb3e700badfafcc10c9a6297400588","modified":1562281644000},{"_id":"source/img/copy/._copy01.png","hash":"cc4b10ea47a718e159fe52c7be0ad710490b33d7","modified":1562281644000},{"_id":"source/img/copy/._copy02.png","hash":"aa9a78582f1d16de43bc9d36c5bc3c07a67a2c2c","modified":1562281644000},{"_id":"source/img/django/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1562281644000},{"_id":"source/img/django/._.DS_Store","hash":"11050c2745c99ec8dacff161c2a0a22ffacb8b47","modified":1562281644000},{"_id":"source/img/copy/copy01.png","hash":"274389c32663e2346548706e160468b3100e37de","modified":1562281644000},{"_id":"source/img/copy/copy02.png","hash":"9a2f71afe5786da0b811ae873d537cd7845c7333","modified":1562281644000},{"_id":"source/img/django/._django_test01.png","hash":"4fab226959076f81958bbbaac54443cfc5cde2fc","modified":1562281644000},{"_id":"source/img/django/._permission.png","hash":"879623d3e7a238cc0941533a9382fcff96116597","modified":1562281644000},{"_id":"source/img/django/._page.png","hash":"239757df7d65e03d6e91c84ef9eceb745a3ca503","modified":1562281644000},{"_id":"source/img/django/django_test01.png","hash":"a5a4cd769692eb02f47ef586442c9bb27cfa75e2","modified":1562281644000},{"_id":"source/img/django/page.png","hash":"8e854beb09f6ba11bd3dceac3a886cd0e7cacf88","modified":1562281644000},{"_id":"source/img/docker_network/._2.png","hash":"467594b79445a21d4ea9eb7bfeebc7545e31c878","modified":1562281644000},{"_id":"source/img/docker_network/._1.png","hash":"d5752f2f2d7a739c37ef43c0ee9333ec7b8b29a1","modified":1562281644000},{"_id":"source/img/docker_network/._3.png","hash":"e04d6e9cf4c4922f1410b28e570c1ca60e6ef698","modified":1562281644000},{"_id":"source/img/elk/._elk.png","hash":"3fac087dde7fd13aead728379617cfa551bdb1e9","modified":1562281644000},{"_id":"source/img/mysql/._btree_index.jpg","hash":"dfc97c78f10f1d562ff91373ddab30d5f7f638ee","modified":1562281644000},{"_id":"source/img/mysql/._btree_index.png","hash":"bf98f8f5547d6f1d5be93dc45f70a7a477075434","modified":1562281644000},{"_id":"source/img/mysql/btree_index.jpg","hash":"19cdd018cd2cb64e484faf3c88ce67b6fa6bfe8d","modified":1562281644000},{"_id":"source/img/rabbitmq/._02.png","hash":"cf1a33b7c54cf432ab2cb2664036d184954d5eb3","modified":1562281644000},{"_id":"source/img/rabbitmq/._01.png","hash":"8fde9dc20190d65c7c81aeac449ef9ebdf18bedb","modified":1562281644000},{"_id":"source/img/rabbitmq/._03.png","hash":"536daa19427f59903206909742d7453ae7d0a8a7","modified":1562281644000},{"_id":"source/img/rabbitmq/._05.png","hash":"e38ad2c740704bbe62c7eae652cc34ac86513018","modified":1562281644000},{"_id":"source/img/rabbitmq/._06.png","hash":"781a5d96b6dcc4613d6ad957c21130f51c04e08f","modified":1562281644000},{"_id":"source/img/rabbitmq/._04.png","hash":"e1d65d3a7a6a483befaaf7e087f7f936a69ba2af","modified":1562281644000},{"_id":"source/img/rabbitmq/._07.png","hash":"8027c9b910afdbecb10a23aa2d9952b356888381","modified":1562281644000},{"_id":"source/img/rabbitmq/03.png","hash":"d3f37d15682f6c25cabd16a83d8b368173abd5a0","modified":1562281644000},{"_id":"source/img/rabbitmq/01.png","hash":"535ac09c3e2f29569053d88cbfbc6ad8446bbfea","modified":1562281644000},{"_id":"source/img/rabbitmq/02.png","hash":"59455aacaa19fb0910131fcc98275f721985c0e8","modified":1562281644000},{"_id":"source/img/rabbitmq/04.png","hash":"2f9e64ffd3a451cb04135037cdae9503bbdd698e","modified":1562281644000},{"_id":"source/img/rabbitmq/05.png","hash":"1a594fe497675e34309296e4b52650caae6ef6b7","modified":1562281644000},{"_id":"source/img/rabbitmq/06.png","hash":"21a20bdcdac2bd590bce1b0599b053f29a9c4f21","modified":1562281644000},{"_id":"source/img/rabbitmq/07.png","hash":"f990b514b3ff128c7593dafce0e748cb8cd1f2fd","modified":1562281644000},{"_id":"source/img/scrapy/._scrapy.png","hash":"9b2758ca5ae50e4ad44ff9491dc1b4bfe4411b1a","modified":1562281644000},{"_id":"source/img/scrapy/._selenium01.png","hash":"cf0b28b97b3f19583c44e8a6173ab125eafe617a","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/after_footer.ejs","hash":"f1c893461b5ae59c436a9599e2e0e0ea23f32478","modified":1562281644000},{"_id":"source/img/scrapy/scrapy.png","hash":"88cfe62067f544a5d63d5de6751ea83aab9b7ee6","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/categories.ejs","hash":"b6e67d3b777a2a8125a0d58541a4d2c2f259a92a","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/archive.ejs","hash":"fe03fa81bb8dfa7a618853d8f47c4d7991783734","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/footer.ejs","hash":"433f384ea29f11cada1d2f15e8bfb6f72fa14846","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/article.ejs","hash":"19638d0ef2b90b55d04c403fff6ada623165ba36","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/footer.ejs.bak","hash":"a73adfbcf3c3d6fa488ddabe42805a7d54273d75","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/google_analytics.ejs","hash":"7ebccafcfdaca5cb5b8f4f06548f1d50958726ef","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/head.ejs","hash":"9120fccff325577b1a2785d7645b9921cb90badc","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/header.ejs","hash":"26486dfc6f1e24be2abaa82446b417eb16ac8bb6","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/mobile-nav.ejs","hash":"7907a34f30f33ccb66c814539c90c5f6c02b5331","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/search.ejs","hash":"096ddf79f652c42c176e18f33cf93dcc9bd956d3","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/header.ejs.bak","hash":"26486dfc6f1e24be2abaa82446b417eb16ac8bb6","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/toc.ejs","hash":"379b55d5e1c2af23ff936def8d43f3f5d9920efe","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/search.ejs.bak","hash":"21b3ca7c5934c4ec4064af72a21aad9a4bb900e3","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/sidebar.ejs","hash":"d8ac1a578845d4204506a929793d4a1460b18247","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/author.ejs","hash":"ab647b97f55e550af54598dee0c4bb132ef43c46","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/links.ejs","hash":"68ae29594b5df094612c4f7c8ab9068ced112495","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/category.ejs","hash":"ab647b97f55e550af54598dee0c4bb132ef43c46","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/recent_posts.ejs","hash":"267c34c67abf0ca71bd0736268f39778b52d5e0c","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/tag.ejs","hash":"b994f8c43b190b852568e355944d5af151dcefe6","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/style.styl","hash":"60f734e92e9a7900f4e355b2ff8488107fe375fb","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/font-awesome.min.css","hash":"ad41baac2bfc615bf7f1a7440480d4f2ff91592f","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/多说自定义.css","hash":"0f85feb8799a91a87801ea77600cd66d1cba0b30","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/._1.jpg","hash":"9ad241d62cc0d8303d0d940802f35d679639ff2f","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/._2.png","hash":"5078e89992b61d7fc15dd8b10d471b68212ae90e","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/._3.png","hash":"ce8bdac27f82d09f010f53ded04ad0bc865e5a7a","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/._favicon.ico","hash":"b88c4bfd3c239451cb0f33d31d68874c1eb76a04","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/._log.jpeg","hash":"26342010a83c4b32e252eecfaf064dc5dd2423d7","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/._logo.png","hash":"b6ce66c01d2f8059a274bb830945563be7e26b50","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/._myLogo.png","hash":"e6954c4062fcecd9b29b055e4e1db41e4d099a11","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/2.png","hash":"2f2eb7b2d42188906f310521c656daa85194e711","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/3.png","hash":"f8ef0729926af5b38fbf199d5d5404b4319046a5","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/blueprint-dark.png","hash":"fe154fcccb513b9626048e45f835da99e4e134b8","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/log.jpeg","hash":"250fac786e6366b566edfdd44046716d030550c6","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/dots-2x.png","hash":"2d900f9f8a0b53067401138d8cb411c83e747e8e","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/favicon.ico","hash":"9328f48f31b282b5bdf8495d19b553f5f221689f","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/logo.png","hash":"3b38e8deaf1ba16d3e6d1dd810aaf6b47015a778","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/logo.svg","hash":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/myLogo.png","hash":"d84480df12e69fa882d2c811b7239055f9503037","modified":1562281644000},{"_id":"source/img/django/permission.png","hash":"b21470a3b1882d0de3ab72370f9f0903561a79ba","modified":1562281644000},{"_id":"source/img/celery/celery01.png","hash":"5ca5807b743a5930e30a927766adeb142dfd9790","modified":1562281644000},{"_id":"source/img/docker_network/1.png","hash":"5690de18c32e435902a35875e64e32d46546e833","modified":1562281644000},{"_id":"source/img/docker_network/2.png","hash":"e13ee9bf0e6f338ad0ea6dce77618759f2a5bbc7","modified":1562281644000},{"_id":"source/img/docker_network/3.png","hash":"7f919448af2bdcb4696ea47e9c063303685e0883","modified":1562281644000},{"_id":"source/img/scrapy/selenium01.png","hash":"2ffe83900b74f2425954bb2d769f63d2e73ea66b","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1562281644000},{"_id":"themes/Tinnypp/source/img/1.jpg","hash":"1944dd79ed2af388743226bd9e8bab681ead1738","modified":1562281644000},{"_id":"themes/Tinnypp/source/js/jquery-2.1.0.min.js","hash":"0faaa0c56f563693cdeafa299f97e3d5bd6fcdd8","modified":1562281644000},{"_id":"themes/Tinnypp/source/js/embed.js","hash":"7ddf0ca1b194d3a4fa2a6b877a09ab2a6baa0e93","modified":1562281644000},{"_id":"source/img/ansible/ansible01.png","hash":"5e140db7d99df34ba01b607620ae8d231e6afa8a","modified":1562281644000},{"_id":"source/img/mysql/btree_index.png","hash":"112902201406395b399d2fd5613dc94177499267","modified":1562281644000},{"_id":"source/img/elk/elk.png","hash":"7a69e7fbb8ca0f92aa120d2687bc92b170503af3","modified":1562281644000},{"_id":"source/img/vue/echarts/pie.png","hash":"bbe2a9e5c3de44311ffd1094bf05c7b238e41122","modified":1562281644000},{"_id":"source/img/vue/echarts/line.png","hash":"102246b78bc23a707c494245f88a9479c6de4590","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/article.ejs","hash":"07c47aaa2d370d624f5becccf5b78f261a7efbdc","modified":1562281644000},{"_id":"source/img/vue/echarts/bar.png","hash":"aed317fad5749c3eff3bc7e904a7454f447a0c82","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/catetags.ejs","hash":"fa03892b35dc344de7a722b9393978286c0376fe","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/gallery.ejs","hash":"6bd8723f24b192158e6e840bf14028503ad50045","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/footer.ejs","hash":"a4dc14cd47d22f1b73860bc3c7f424eae3d282dd","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/pagination.ejs","hash":"69612e9daa4b32e61050cf820d61e520600f6c1c","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/jiathis.ejs","hash":"5043a5058887cf6ad15182cfde345d36cb6ab323","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/header.ejs","hash":"a7ed2c6cf87deae595bfb85a95cbd282ba2bb71b","modified":1562281644000},{"_id":"themes/Tinnypp/layout/_partial/post/comment.ejs","hash":"34f2670b9ec160b0cf46d1262d57484802eb4b30","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_base/code.styl","hash":"09da5216f0bb37b7a1ff7265a2862f0d2dbbe2d2","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_base/font.styl","hash":"772749cc7c6a47410bb667f8127b37767d029283","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_base/public.styl","hash":"e2d4eb2645091b8210b3656e12803f0195f91249","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_base/variable.styl","hash":"465a2718f7c0432958bdd431ffc0376c3dfb3acc","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/addByMe.styl","hash":"59b77aef57ab13547618f58243c216861be59b6a","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/article.styl","hash":"5230d866da7dbff9a4ab83cef6f6d511982c7d13","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/aside.styl","hash":"46631da20e6f05b8ae54c5da757265c0c4bf96b7","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/footer.styl","hash":"e36b1b28558bf2b6d9d71c52ad085ef3f89c92eb","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/header.styl","hash":"574dda1fc11f81e1b6537b9d1b41d833c0c3895c","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/gallery.styl","hash":"b85a32c4bc71f720d74143a17a202fe8fa067950","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/helper.styl","hash":"110f684415ed5cd38baec1c40d35abe264bc5ff8","modified":1562281644000},{"_id":"themes/Tinnypp/source/css/_partial/index.styl","hash":"f5f86b6f3037b1c94afabcca52d43426ae791d05","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1562281644000},{"_id":"themes/Tinnypp/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1562281644000},{"_id":"themes/Tinnypp/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1562281644000},{"_id":"public/atom.xml","hash":"2a409a1ec50e5da9b9042a04256af9c721fb24e2","modified":1564208802832},{"_id":"public/about/index.html","hash":"b5283e367b7cf376adea832738918c7e039487b3","modified":1564208803860},{"_id":"public/search/index.html","hash":"ee5032eee1b7a99b9693068c99c67d7f6b24c562","modified":1564208803860},{"_id":"public/2019/01/07/yw-apollo/index.html","hash":"8bd0c4b2ed3fc9419f1c82823b3be15f95674f71","modified":1564208803861},{"_id":"public/2019/01/04/yw-jenkins-ci/index.html","hash":"8c81fb5510cb1d56c2b5c0c3531540f80a4afae7","modified":1564208803861},{"_id":"public/2018/12/28/yw-mysql-count/index.html","hash":"03c8d82e49f51465c7972ae0d07309e46407253a","modified":1564208803861},{"_id":"public/2018/12/28/yw-mysql-order-by/index.html","hash":"b6008d384787ba441137eb039847ce287d3128a0","modified":1564208803861},{"_id":"public/2018/12/28/yw-mysql-addindex-to-string/index.html","hash":"17b5ac0d2c334c00ed42abfd36e1e94c397b21eb","modified":1564208803861},{"_id":"public/2018/12/25/yw-mysql-redo-binlog/index.html","hash":"b31e41a3766d477b802cc74b5222de836c242cb8","modified":1564208803861},{"_id":"public/2018/12/21/yw-mysql-select-index/index.html","hash":"c710a7450f4e12a6ca322a2c67a51ca60954cf86","modified":1564208803861},{"_id":"public/2018/12/20/yw-mysql-unique-index/index.html","hash":"0893d9f40d4693a1a3faae4cbb3dfb3be88716b9","modified":1564208803861},{"_id":"public/2018/12/03/yw-mysql-question/index.html","hash":"79298bc08ea8724f471a0b56266048f4e79aad7d","modified":1564208803861},{"_id":"public/2018/09/17/django-migrations-error/index.html","hash":"3ec88367e82fefae21b4e8513ea10e2a3877aa01","modified":1564208803861},{"_id":"public/2017/12/01/scrapy-state/index.html","hash":"c7cc9f10356bfe7630aaa08f98a278b72e21a0ec","modified":1564208803861},{"_id":"public/2017/07/21/iptables-forward/index.html","hash":"fcb95d5b8ffa6073984e9f21f0ff10f3a8593b9b","modified":1564208803861},{"_id":"public/2017/05/14/rest-framwork-serializers/index.html","hash":"ad0e660d307d155453b766e9b01f6be80ee564d1","modified":1564208803861},{"_id":"public/2017/04/16/importlib/index.html","hash":"4eceb7f419fea5ffaf2543f75d4e4555ef3aa41b","modified":1564208803861},{"_id":"public/2017/04/08/yw-mysql-store/index.html","hash":"b0d5088301b2e4a5a4938036cf49e65d20136ec0","modified":1564208803861},{"_id":"public/2017/04/05/yw-pwd/index.html","hash":"4b376376e607867a2b50c6688dc2fec94af5912a","modified":1564208803861},{"_id":"public/2017/04/07/yw-chroot/index.html","hash":"ba6ee796a65640eb21a4a7343ea38e3064dac5d4","modified":1564208803861},{"_id":"public/2017/03/06/yw-zabbix/index.html","hash":"6d786a0ec6374aa07c49acd88b6c28969fecc2c2","modified":1564208803861},{"_id":"public/2017/03/06/logging/index.html","hash":"543a4af75f26a21165ec0996034b5599e3d6166b","modified":1564208803861},{"_id":"public/2017/02/07/awk_uniq_sort/index.html","hash":"4a8fee5ff85c60f523aa69dd86cdfc8c293af58a","modified":1564208803861},{"_id":"public/2017/02/01/hexo/index.html","hash":"3522ff5ebe308f7069593e3ec3a024dbb0e6e9e5","modified":1564208803861},{"_id":"public/categories/python/index.html","hash":"22936722c441b5b7ff60717e70b91f8b88df8dc0","modified":1564208803862},{"_id":"public/categories/python/page/2/index.html","hash":"7996ef7ff7da4c3befe28038eeaa40e8c23cc269","modified":1564208803862},{"_id":"public/categories/python/page/3/index.html","hash":"50094f11c5643041059ef428cabd4ea0744ac38b","modified":1564208803862},{"_id":"public/categories/Scrapy/index.html","hash":"3a962704b17da9a864c43c7a2c0b933921d4e5fd","modified":1564208803862},{"_id":"public/categories/DRF/index.html","hash":"998fc615b3ed0bd62e69723933ee383d7de49a85","modified":1564208803862},{"_id":"public/categories/Frontend/index.html","hash":"d80363bff42a9df1e1205a9ccd67f017fad7d2f6","modified":1564208803862},{"_id":"public/categories/运维/index.html","hash":"1532468f8f911c19fe89253da44fe89eecf25d9b","modified":1564208803862},{"_id":"public/categories/运维/page/2/index.html","hash":"79fa5158198d51deef5d66827ca2ffba16702ceb","modified":1564208803862},{"_id":"public/categories/运维/page/3/index.html","hash":"f42fee2e6c3e2bc11536e41c1bf66fb5ca8b4e59","modified":1564208803862},{"_id":"public/categories/Django/index.html","hash":"0a84831d756927fd708578e8c62a6e816fafcdd1","modified":1564208803862},{"_id":"public/categories/Django/page/2/index.html","hash":"583a14a8f44fe98ba14e67746c95c22eaed35367","modified":1564208803862},{"_id":"public/categories/Docker/index.html","hash":"5d1b7f5816589068beaf705b06ad1fffe31cf64e","modified":1564208803862},{"_id":"public/categories/Elasticsearch/index.html","hash":"54ec1a4c1e84637d632bb9e2c9d2d8715fb07fd7","modified":1564208803862},{"_id":"public/categories/Mysql/index.html","hash":"bf073be21f55c74b4acf962789285344bf56d96d","modified":1564208803862},{"_id":"public/categories/Mysql/page/2/index.html","hash":"03e8bed822d25a3c7c96e2ee8e1a27f05dc78f91","modified":1564208803862},{"_id":"public/categories/中间件/index.html","hash":"ae67b3d01b27e5ded89b194593bb3fabd11b6d69","modified":1564208803862},{"_id":"public/archives/index.html","hash":"dc32612c7a835cdc3f71959d8bd5fd4982fd598e","modified":1564208803862},{"_id":"public/archives/page/2/index.html","hash":"ae43c6e455d9e276bd1c885d388b1b210cafb7ef","modified":1564208803862},{"_id":"public/archives/page/3/index.html","hash":"bec493052e8b01f92d53e3d544c0a8576dd2d742","modified":1564208803862},{"_id":"public/archives/page/4/index.html","hash":"d04a9ef93307e14086499be451922074705dead9","modified":1564208803862},{"_id":"public/archives/page/5/index.html","hash":"8dc413bdb52dbabf225d4ab1763c67772f7d825e","modified":1564208803862},{"_id":"public/archives/page/6/index.html","hash":"ff7d6842727a6b1c01727b80f9360c512a3bb3e6","modified":1564208803862},{"_id":"public/archives/page/7/index.html","hash":"416ba5fc8fdf18c63c521bc76989433f6e782394","modified":1564208803862},{"_id":"public/archives/page/8/index.html","hash":"71aeedcfa0cc47c8fa35114fcdd58044182ddd8e","modified":1564208803862},{"_id":"public/archives/page/9/index.html","hash":"a9554c7105ba25a926de0d7d43fc88f6e8e6217d","modified":1564208803862},{"_id":"public/archives/page/10/index.html","hash":"697601cda2a94a689239e06de9f5c1b5a9a468e8","modified":1564208803862},{"_id":"public/archives/2017/index.html","hash":"730ab9af8d2a16f9ec83f4ce61acd617832825cc","modified":1564208803863},{"_id":"public/archives/2017/page/2/index.html","hash":"6b09440d45fb8961930ef574ecb1be3ed74529f4","modified":1564208803863},{"_id":"public/archives/2017/page/3/index.html","hash":"55427bf58baddfb9c80608ebb70c10725fde5777","modified":1564208803863},{"_id":"public/archives/2017/page/4/index.html","hash":"a8392cacabedc043678b3736f2d12f9037fef5be","modified":1564208803863},{"_id":"public/archives/2017/page/5/index.html","hash":"286a4994ac73b7db70692c71520a50ba340283b4","modified":1564208803863},{"_id":"public/archives/2017/page/6/index.html","hash":"b7c15cc60538615bc1444f76781407f9b8937a6f","modified":1564208803863},{"_id":"public/archives/2017/page/7/index.html","hash":"64794b632acc999cc2dab4409b7e2203b00cca79","modified":1564208803863},{"_id":"public/archives/2017/02/index.html","hash":"676bcf4a8c0141633c97b4dca549da319b36b947","modified":1564208803863},{"_id":"public/archives/2017/02/page/2/index.html","hash":"938cf6be0cbc133e749ff2472111ac2bf19505d5","modified":1564208803863},{"_id":"public/archives/2017/03/index.html","hash":"ec97cb4599215d299eaea63c56caee09d50dce82","modified":1564208803863},{"_id":"public/archives/2017/03/page/2/index.html","hash":"76f71c59a5ffc394ef39cc94c8182f2f89dc928a","modified":1564208803863},{"_id":"public/archives/2017/04/index.html","hash":"ace8344341b0e999e4ed5b4b6ea381f6d45ab6e4","modified":1564208803863},{"_id":"public/archives/2017/06/index.html","hash":"4a9f91ec4e21961508600169fc729f33d735e773","modified":1564208803863},{"_id":"public/archives/2017/05/index.html","hash":"2fb1f579c95e0f042c3e35b46bd6b3a50df89433","modified":1564208803863},{"_id":"public/archives/2017/07/index.html","hash":"96d4423b3956f7ce89df8cd39425a90070c5466c","modified":1564208803863},{"_id":"public/archives/2017/08/index.html","hash":"c7b6978a3f54e9bad7a162cdcaed6906ac97cf98","modified":1564208803863},{"_id":"public/archives/2017/09/index.html","hash":"5e975476f5f1e11ac9568d38d7b24adcebcaac51","modified":1564208803863},{"_id":"public/archives/2017/11/index.html","hash":"c7b4051dfbf63abe61953408b5dd38aa16f1360f","modified":1564208803863},{"_id":"public/archives/2017/12/index.html","hash":"ba43e3f6d42a4f52a022818e48de2b7c722c1173","modified":1564208803863},{"_id":"public/archives/2017/12/page/2/index.html","hash":"99f3ce87dc7f9986890c3af6fdfb266a5beebde6","modified":1564208803863},{"_id":"public/archives/2018/index.html","hash":"c054bbe7e30f8c56e8fb714cdaa8bb0a1bca6bf3","modified":1564208803863},{"_id":"public/archives/2018/page/2/index.html","hash":"bb4098ccf10d5895eda0f7fd164763c88e230941","modified":1564208803863},{"_id":"public/archives/2018/page/3/index.html","hash":"d30820c7b0327f3ab57d3fe20119b0e113a7fc7b","modified":1564208803863},{"_id":"public/archives/2018/01/index.html","hash":"4ada3abdb20e1c0762b36a60324318a86e9cb930","modified":1564208803863},{"_id":"public/archives/2018/02/index.html","hash":"15a4f30b59912c0d4cecb3b2f451f9249b9880cb","modified":1564208803863},{"_id":"public/archives/2018/04/index.html","hash":"64bbbbb27037785b8739123d4ab6184cce299be1","modified":1564208803863},{"_id":"public/archives/2018/08/index.html","hash":"3047f420e6e855bf8df9351a27fdfd6a859152b1","modified":1564208803863},{"_id":"public/archives/2018/09/index.html","hash":"df201c79d0b4c404ea1d8ee7a45daf8bc260fd83","modified":1564208803864},{"_id":"public/archives/2018/10/index.html","hash":"c2d9a188326e2b1fc70589792c777175f113228f","modified":1564208803864},{"_id":"public/archives/2018/12/index.html","hash":"0ec07bc16791e2fb12ec67714127cbaa5f4466c3","modified":1564208803864},{"_id":"public/archives/2019/index.html","hash":"2cf1b3e09ab0ca479afeb494e320576eab0fef61","modified":1564208803864},{"_id":"public/archives/2019/01/index.html","hash":"ee9252bbd105be1209f6a99f72b72e90e13ecf8d","modified":1564208803864},{"_id":"public/archives/2019/06/index.html","hash":"8caadbfe8c7e75575094afaed16f5aa081e28e44","modified":1564208803864},{"_id":"public/archives/2019/07/index.html","hash":"bdf742a5962bb6f18dcaae0f55509acf9df7eea1","modified":1564208803864},{"_id":"public/page/10/index.html","hash":"fda029426a23afb6427543bc5916f14daadf505a","modified":1564208803864},{"_id":"public/tags/Api/index.html","hash":"283b7243920c97bb18f765d8ad7fc1e4b4b19ee2","modified":1564208803864},{"_id":"public/tags/ConfigParser/index.html","hash":"87284b813a7b426190591b4685f1afc525057300","modified":1564208803864},{"_id":"public/tags/Itemloaders/index.html","hash":"e8f25f1ed5b62f179569c73dd2f20431e71897f4","modified":1564208803864},{"_id":"public/tags/Filters/index.html","hash":"455ffc5fb1629dda4bccf2603cff5e53b0f8364a","modified":1564208803864},{"_id":"public/tags/Selectors/index.html","hash":"8966185d6be149dd8a8f9e1973be3fa3d0e8ae04","modified":1564208803864},{"_id":"public/tags/DRF/index.html","hash":"addd9912f3a1a15dba17dab9429efe3bd7be6894","modified":1564208803864},{"_id":"public/tags/Throtting/index.html","hash":"6f76c3b4db40205a0e3c51faac8d85ebd8443d54","modified":1564208803864},{"_id":"public/tags/Angularjs/index.html","hash":"7f31f9d073392cc3b2b00a204d3ba81829b777ec","modified":1564208803864},{"_id":"public/tags/Ansible/index.html","hash":"c323ff2d7f265b187a5fcbda06ff0a19e09f6d34","modified":1564208803864},{"_id":"public/tags/Awk/index.html","hash":"3ae40d4ce01b0581184d5f0dca4aea124283dd4a","modified":1564208803864},{"_id":"public/tags/Sort/index.html","hash":"45f07200c9365415bbe55f9d68df75496c59e0f8","modified":1564208803864},{"_id":"public/tags/Uniq/index.html","hash":"ad29a544c7f1c57fc5d4f0467a93cbaab8f44065","modified":1564208803864},{"_id":"public/tags/Celery/index.html","hash":"2abdece3fbb7d0353d74c4cb82c1e8e310331fbc","modified":1564208803864},{"_id":"public/tags/Class/index.html","hash":"6ba9b40d6d1966b47f98c48ae6f2f12ceae3df0a","modified":1564208803864},{"_id":"public/tags/Datetime/index.html","hash":"334a2e43ef46409edea3c02e9f51ff486280d02f","modified":1564208803864},{"_id":"public/tags/Collections/index.html","hash":"3ffb370a14b8a3009da3f3b407badd7b85ffa218","modified":1564208803864},{"_id":"public/tags/Copy/index.html","hash":"7e0a53c88d91aff9978ec76993affcb8e66847fa","modified":1564208803864},{"_id":"public/tags/Deepcopy/index.html","hash":"54c6cd2047bbf32a0f13e81936708513102b7b0e","modified":1564208803864},{"_id":"public/tags/CPU/index.html","hash":"1c41d403d0e6ad441789f022e6d4f3ef046ce1ba","modified":1564208803864},{"_id":"public/tags/Decorator/index.html","hash":"e4d0bfa3568e14cc4ca18efe84183c6196aea3f1","modified":1564208803865},{"_id":"public/tags/Descriptor/index.html","hash":"422792028dd8a5d35065bab464cc1aeb1df4a06b","modified":1564208803865},{"_id":"public/tags/Channels/index.html","hash":"251756cd6bc20391a342593be235c1e02b58089b","modified":1564208803865},{"_id":"public/tags/Auth/index.html","hash":"aa2aff43005e396854bf0a1b9cd4beaaad8f3f2a","modified":1564208803865},{"_id":"public/tags/Forms/index.html","hash":"657e8d6a37a93c32529e0e5581ac692d4ddbcc46","modified":1564208803865},{"_id":"public/tags/migrate/index.html","hash":"3e70b70dd15998893d945e2dec0be2ac2cfa8fe2","modified":1564208803865},{"_id":"public/tags/Logging/index.html","hash":"0790c8cc8c6ed16f02e1c84ca14831bdee0a785b","modified":1564208803865},{"_id":"public/tags/分页/index.html","hash":"6926ce03db6a55537ed5945f3e10a7b304bcd389","modified":1564208803865},{"_id":"public/tags/ORM/index.html","hash":"645f75e7afe1ae607ef4d582b904696834cdedcd","modified":1564208803865},{"_id":"public/tags/Queryset/index.html","hash":"28b4a00527e59961d2bf3c4a12799ce4fd077bf8","modified":1564208803865},{"_id":"public/tags/Models/index.html","hash":"337e0f79cdd1f06b00bb8add96c406003e898037","modified":1564208803865},{"_id":"public/tags/Signals/index.html","hash":"8e7b6ac9b08251ca01fba70df4e12105c95b08ad","modified":1564208803865},{"_id":"public/tags/Docker/index.html","hash":"177ab612f0fc69b62460c5197f2c650967683506","modified":1564208803865},{"_id":"public/tags/docker-compose/index.html","hash":"d7d1364121954b5d49c2f69990c1362ffe2d7181","modified":1564208803865},{"_id":"public/tags/TestCase/index.html","hash":"daa9bd8e8d96bb0392295fb442f32b862fa944d2","modified":1564208803865},{"_id":"public/tags/unittest/index.html","hash":"cddf56e01f9a64a85e0cb4bd0079cfc6ea53070d","modified":1564208803865},{"_id":"public/tags/permisson/index.html","hash":"100464231174c84fb42d42afc5a4fe05e579cf8b","modified":1564208803865},{"_id":"public/tags/Elasticsearch-dsl/index.html","hash":"9364df40609bfeaffe66ef1f9707b3ebcac8cb87","modified":1564208803865},{"_id":"public/tags/Network/index.html","hash":"29acaefbc038855367936341d6ae0417909cf380","modified":1564208803865},{"_id":"public/tags/ELK/index.html","hash":"6e30bcca410fbdd618595d6700f4ee1ebfeb8943","modified":1564208803865},{"_id":"public/tags/Mongo-connector/index.html","hash":"e2aa7dc423c13702e1731a127673a110ac338873","modified":1564208803865},{"_id":"public/tags/Hexo/index.html","hash":"0182ee280c7c004d207f3c9d2edad2e90ec7005b","modified":1564208803865},{"_id":"public/tags/Fabric/index.html","hash":"a4eebec79a3315ab5848983fcc88c704949f8009","modified":1564208803865},{"_id":"public/tags/Logstash-input-jdbc/index.html","hash":"b073954ac0b8ab84b853ba676d92cf8dd8ff5b0d","modified":1564208803865},{"_id":"public/tags/Importlib/index.html","hash":"72934e6e6a6a6ac302806d96a2bda2374ef8ca84","modified":1564208803865},{"_id":"public/tags/Mongo/index.html","hash":"922c065b8f361a505b1c80398436153a365672b0","modified":1564208803865},{"_id":"public/tags/Mysql/index.html","hash":"6aa637e050dc105dbb95ddca23555c1170317595","modified":1564208803865},{"_id":"public/tags/Mysqldb/index.html","hash":"73bb3647fefc2b2b9315964b88592b87cecac1f0","modified":1564208803865},{"_id":"public/tags/asyncio/index.html","hash":"6cc11b39cf71e0cf1633e65f0b096805fe965a43","modified":1564208803866},{"_id":"public/tags/Contextlib/index.html","hash":"d7a875d4d86b098961440dbecf26821ba3a5156b","modified":1564208803866},{"_id":"public/tags/Djcelery/index.html","hash":"8bf014152eeba59a91b70df6e15bc64d397f1e94","modified":1564208803867},{"_id":"public/tags/property/index.html","hash":"660da698dce3980b2eb5a08546fa39719ebdf48b","modified":1564208803867},{"_id":"public/tags/class/index.html","hash":"22f7de8f555f0ce85a403e84c8113fc0fb902543","modified":1564208803867},{"_id":"public/tags/Selenium/index.html","hash":"5db7b488a074ff8d3d2dfc61df5f262b8f9e1023","modified":1564208803867},{"_id":"public/tags/Scrapy/index.html","hash":"84f014412338369ce0bbb67933f28bcec592a8e5","modified":1564208803867},{"_id":"public/tags/Sqlalchemy/index.html","hash":"3fd34035ce309f1d76e8f6e90cad62618b35e933","modified":1564208803867},{"_id":"public/tags/Iptables/index.html","hash":"f80889e0281a5653a49934273099fa7f8f7c658d","modified":1564208803867},{"_id":"public/tags/Redis/index.html","hash":"843baf4f9f32fbd46bb3bc2d47023ebde427ee72","modified":1564208803867},{"_id":"public/tags/Re/index.html","hash":"0c2be1c185e00e3961ff3fe66597ed86657d153a","modified":1564208803867},{"_id":"public/tags/RabbitMQ/index.html","hash":"3e53a2cb558bcc5e9e318bbc405d02258a4fb561","modified":1564208803867},{"_id":"public/tags/Serializer/index.html","hash":"1290f1de550da1dd7ea374dd5d161e8194a8010f","modified":1564208803867},{"_id":"public/tags/ModelSerializer/index.html","hash":"7efcf116f29306aa79c92c12b4657d8e186bef7d","modified":1564208803867},{"_id":"public/tags/Architecture/index.html","hash":"a88881d056cdf9b11d0579bc50664f8aa3e25d49","modified":1564208803867},{"_id":"public/tags/Setuptools/index.html","hash":"98565cec0b109af7fbdc37bde30bd431bd067f88","modified":1564208803867},{"_id":"public/tags/Threading/index.html","hash":"dbb266190a06e8586e76ea3204297b9cd53c75f9","modified":1564208803867},{"_id":"public/tags/Vim/index.html","hash":"7eaad3355a2a18abeb19e7d3b29339b81c89fbcc","modified":1564208803867},{"_id":"public/tags/Pycharm/index.html","hash":"ef45d7511452c1459d801dec3d32bfbf27a3cab0","modified":1564208803867},{"_id":"public/tags/Items2/index.html","hash":"b8d2c09225a1e45363a817059174176aeed530be","modified":1564208803867},{"_id":"public/tags/Tmux/index.html","hash":"ae925dc26c7c225833f4fda85429b56edab5eb07","modified":1564208803867},{"_id":"public/tags/vue/index.html","hash":"22e2f523a0a3497a2aec40e010c500aaa763a0de","modified":1564208803867},{"_id":"public/tags/echarts/index.html","hash":"976a5858474e735cb9139a26378ffab929147186","modified":1564208803868},{"_id":"public/tags/Airflow/index.html","hash":"cb08fe79eaed1edf622c631f6dc9b9db3c39610d","modified":1564208803868},{"_id":"public/tags/Vue/index.html","hash":"8e9cf99abee26e18aed68f5d0e489d3e6f60199e","modified":1564208803868},{"_id":"public/tags/Apollo/index.html","hash":"a5aea62c89ae097e12fb0493893f57b7ef8c18ee","modified":1564208803868},{"_id":"public/tags/Yeild/index.html","hash":"a4d958a3976e9ee2ba1bd3154e224a3c80bb08e9","modified":1564208803868},{"_id":"public/tags/Generator/index.html","hash":"ba0492908fd5562d1ea064029599a57daa41d0d6","modified":1564208803868},{"_id":"public/tags/chroot/index.html","hash":"94662b6a147fbaf1926d5ebf50bcc6dfd276d6e5","modified":1564208803868},{"_id":"public/tags/fg/index.html","hash":"ec0863e47305af1873c406e8f2fb9a8e00618371","modified":1564208803868},{"_id":"public/tags/Git/index.html","hash":"5894bd282643207fae3d73dbed87a4145b91e902","modified":1564208803868},{"_id":"public/tags/Jenkins/index.html","hash":"db323c7eb5ab826fb979f98dab0f03ba31bddab9","modified":1564208803868},{"_id":"public/tags/count/index.html","hash":"b25a43121fe7fcb0642df9afe72d57fe46737b51","modified":1564208803868},{"_id":"public/tags/Index/index.html","hash":"89df17621c789b0e184fafa39520184398d5edd3","modified":1564208803868},{"_id":"public/tags/Jvm/index.html","hash":"02b1663669b78275bbfa8af6e2616fb57531ed96","modified":1564208803868},{"_id":"public/tags/Lock/index.html","hash":"2528f9e0d8a0a3cfa2726836e884e38f8dc4e5b0","modified":1564208803868},{"_id":"public/tags/排序/index.html","hash":"f3dfafc1ff0a4a769625a8659fc7a63e7d38f1c4","modified":1564208803868},{"_id":"public/tags/binlog/index.html","hash":"a1686fb7f21f2cfee82f494d3350a8e0fa7b1567","modified":1564208803868},{"_id":"public/tags/Transaction/index.html","hash":"58ec90b1e6b97f0123b10fc99caabe61a7684298","modified":1564208803868},{"_id":"public/tags/sersync/index.html","hash":"b5474282dd53650492025f0ba11ec88255a9a80e","modified":1564208803868},{"_id":"public/tags/password/index.html","hash":"ba0f3800a64ba3203d319fcc17b5c9ca581dcd53","modified":1564208803868},{"_id":"public/tags/systemd/index.html","hash":"76b2d0e52563b74a773a781805bb86815731d164","modified":1564208803868},{"_id":"public/tags/Zabbix/index.html","hash":"d23d6878982296dadc600c55c6f6a2a064657696","modified":1564208803868},{"_id":"public/2019/07/28/yw-airflow-dynamic-dags-tasks/index.html","hash":"5723c8fab44cbd2270e7ab08d9101017af35ae59","modified":1564208803868},{"_id":"public/2019/07/27/yw-airflow-operator/index.html","hash":"fcd02d2faa0152646558ecc1f5fdc9cbbd377bfb","modified":1564208803868},{"_id":"public/2019/07/26/yw-airflow-install/index.html","hash":"00e21227e8d5a4858f00620e59cef515a95d8712","modified":1564208803868},{"_id":"public/2019/07/03/vue-echarts/index.html","hash":"ebb26a6d6b6ee41c10c711707b05bd596c358770","modified":1564208803868},{"_id":"public/2019/06/30/vue-life-cycle-function/index.html","hash":"dc8fc7d107f898c9a8e7d09e56632d2a76ca0daa","modified":1564208803868},{"_id":"public/2019/06/29/yw-systemd/index.html","hash":"816932608ec3dc736eb3438323c63ca22a8b6cb1","modified":1564208803868},{"_id":"public/2019/01/10/yw-sersync/index.html","hash":"8aab25a1868c9967a2d86e4123a680ebb149200c","modified":1564208803868},{"_id":"public/2018/12/27/yw-mysql-lock/index.html","hash":"7a50fa158c1f888e8d7845b81c9bd245b4327dfd","modified":1564208803869},{"_id":"public/2018/12/26/yw-mysql-transaction/index.html","hash":"a93890a1a063408307adfcbfc8c28d840358369d","modified":1564208803869},{"_id":"public/2018/10/24/python-django-celery/index.html","hash":"eaf1ee1db563b65baed642bb18b681db4da28e67","modified":1564208803869},{"_id":"public/2018/09/28/redis-advance/index.html","hash":"4e82aa95d38fcfda8d2394971cef62224c52a45c","modified":1564208803869},{"_id":"public/2018/09/16/mysql-queryset/index.html","hash":"3673595cc1ae50950bd59a483055c648b9d15605","modified":1564208803869},{"_id":"public/2018/08/25/rabbitmq/index.html","hash":"0fc008645f795a12dd759cac0720040e34d890ef","modified":1564208803869},{"_id":"public/2018/08/11/yw-mysql-index02/index.html","hash":"f6e6592fa6d563259ffc1f260ea847a21bf5f244","modified":1564208803869},{"_id":"public/2018/08/10/python-asyncio-basic/index.html","hash":"1fbf938fecd088ed8e2d139e2ed53d57a1af213c","modified":1564208803869},{"_id":"public/2018/04/15/yw-mysql-index/index.html","hash":"a0deae0aa359e650747ae47b3bb1281733082c4f","modified":1564208803869},{"_id":"public/2018/04/14/rest-framwork-serializer-efficient/index.html","hash":"6394f9cfbc899d8fac54088cc8f2b847e07c4fca","modified":1564208803869},{"_id":"public/2018/04/13/django-orm-queryset/index.html","hash":"3ecffce0ee65f31ef49b4ce1eb6e83661edb03ef","modified":1564208803869},{"_id":"public/2018/02/11/python-magic-function/index.html","hash":"63c27dcca68f172a5a4265889fd42a913278d668","modified":1564208803869},{"_id":"public/2018/02/05/django-define-auth/index.html","hash":"f11ef22d67771d05d004625ec459eaf470ae4faf","modified":1564208803869},{"_id":"public/2018/02/01/python-descriptor02/index.html","hash":"836eed0a4867dbefc27cb0c139bf98c2457b1f13","modified":1564208803869},{"_id":"public/2018/01/31/descriptor/index.html","hash":"4d41530776d4d77bc0bbbbb10f8842142938e80f","modified":1564208803869},{"_id":"public/2018/01/30/python-dyn-attr-prop/index.html","hash":"ca41d37ae0dd48f24b336b52380b34cccc905641","modified":1564208803870},{"_id":"public/2018/01/17/django-url-permisson/index.html","hash":"be4a04ec7277b292029e2364245ffb9c23d188bf","modified":1564208803870},{"_id":"public/2017/12/27/elasticsearch-mongo-to-es/index.html","hash":"76106a2f4c88bfc81d18d4b6304932f17d406638","modified":1564208803870},{"_id":"public/2017/12/27/elasticsearch-mysql-to-es/index.html","hash":"d04fedfea2dc02ca2c4aaebadfdadce90edccefd","modified":1564208803870},{"_id":"public/2017/12/26/elasticsearch-elk/index.html","hash":"98c26f00956a4a15c3a207c3d4ae752e171f2edf","modified":1564208803870},{"_id":"public/2017/12/24/elasticsearch-elasticsearch-dsl/index.html","hash":"36d277e1147827ff161c3decf483634ede6f3826","modified":1564208803870},{"_id":"public/2017/12/24/python-sqlalchemy/index.html","hash":"ba96169fe94661fec7df6fcd3c3a9193c3e149e8","modified":1564208803870},{"_id":"public/2017/12/17/scrapy-selenium/index.html","hash":"28f50878b0067ed0f56f1026a8d576bcc3dfa628","modified":1564208803870},{"_id":"public/2017/12/16/scrapy-sample/index.html","hash":"1ee572f39c9034d3170478ef22b13d4126d7d057","modified":1564208803870},{"_id":"public/2017/12/14/yw-git-basic/index.html","hash":"ec8f278eb65c319b92f566045836088a64da9155","modified":1564208803870},{"_id":"public/2017/12/13/python-selenium/index.html","hash":"59e8bd066c465cdcad8a33b636955f25968e5780","modified":1564208803870},{"_id":"public/2017/12/02/Scrapy-selectors/index.html","hash":"a469e8a6721abaa27f86e4f0c853075396ef3aff","modified":1564208803870},{"_id":"public/2017/12/02/Scrapy-itemloaders/index.html","hash":"847152277006c5e91ebe20d95ee8a4eab91b306b","modified":1564208803870},{"_id":"public/2017/11/26/django-Channels/index.html","hash":"5f3ee8b3f2f93a73713649ecca1c7287bff9b82a","modified":1564208803870},{"_id":"public/2017/11/13/django-logging/index.html","hash":"15c7e2f584c922d50cb1e2c81c12a97ae7363b26","modified":1564208803870},{"_id":"public/2017/09/27/django-signals/index.html","hash":"47f6502b811d5e88b24105862b4928878cbb95cb","modified":1564208803870},{"_id":"public/2017/09/16/angular-apply-watch/index.html","hash":"481accf1af0cd532ee65708e3a467adef6bfe230","modified":1564208803870},{"_id":"public/2017/09/02/angular-modal/index.html","hash":"cab35bd899bf44bf77774d4d3703aab35cc9357d","modified":1564208803870},{"_id":"public/2017/08/22/angular-directive/index.html","hash":"8e31e4ccd1d2392a25bfb1ab67127deec5beff73","modified":1564208803870},{"_id":"public/2017/08/20/angular-servers/index.html","hash":"d2f6c786c9754a88af010684cf0ed516a12c393c","modified":1564208803870},{"_id":"public/2017/08/10/Throtting/index.html","hash":"63e4315acc228a897da9016d8cf7a69b555ed5c7","modified":1564208803871},{"_id":"public/2017/08/11/Filters/index.html","hash":"7aec0fafa41f1790f3f49bd2e36d66852063af6a","modified":1564208803871},{"_id":"public/2017/07/15/django-forms/index.html","hash":"d1acff406fdd0ddbb553d7e6bba8e2f00d761b05","modified":1564208803871},{"_id":"public/2017/07/02/collections/index.html","hash":"175a1742483208e74b78310528c5119b7924b81f","modified":1564208803871},{"_id":"public/2017/06/14/setup/index.html","hash":"915bdab9de9a421d35c3219ff26e68faed196646","modified":1564208803871},{"_id":"public/2017/05/24/copy-deepcopy/index.html","hash":"a41af9d2ad73b609110b9f8f7596c8139a3272c0","modified":1564208803871},{"_id":"public/2017/05/15/yw-fg/index.html","hash":"76ff97a2a945d09e2c8d8674c8fdc56599593c32","modified":1564208803871},{"_id":"public/2017/05/14/rest-framwork-note/index.html","hash":"952482cd006ef6019044da3d855bbf3251522922","modified":1564208803871},{"_id":"public/2017/05/13/decorator/index.html","hash":"b3b39d43f71d0bf57f9b08eb2188bbef096a384b","modified":1564208803871},{"_id":"public/2017/04/17/threading/index.html","hash":"6a236bdb24f21c7dc750a04a225d62c0ad566da5","modified":1564208803871},{"_id":"public/2017/04/15/yw-java-jvm/index.html","hash":"f2c1909bab36e0df5203ae11e44fe70871d7a542","modified":1564208803871},{"_id":"public/2017/04/11/python-contextlib/index.html","hash":"9674d963aefbb1c03a5f94a45ec1073908744853","modified":1564208803871},{"_id":"public/2017/04/10/datetime/index.html","hash":"be832474d7bb335158cd93a0350473a405cb31f8","modified":1564208803871},{"_id":"public/2017/04/05/django-models-basic/index.html","hash":"b1976e2e4c6dfd910eeb74030974aa46c1091a13","modified":1564208803871},{"_id":"public/2017/03/30/re/index.html","hash":"a6c29ead7dc7f49c9a381c9aa0ee61f0f061849a","modified":1564208803871},{"_id":"public/2017/03/29/tmux/index.html","hash":"900e10cf9d6cde2c4fd3c82159340829c7073f36","modified":1564208803871},{"_id":"public/2017/03/28/django-test/index.html","hash":"99552b3f90551e437cec3a838961dae6aed02b03","modified":1564208803871},{"_id":"public/2017/03/27/API-auth/index.html","hash":"9f8d935bf63b981c9dfbd93a1fc41c25edc7aa52","modified":1564208803871},{"_id":"public/2017/03/26/API/index.html","hash":"45b028da865e400c988d82d28bd286c7053c73d4","modified":1564208803871},{"_id":"public/2017/03/25/mysqldb/index.html","hash":"a7e8624e9dd838b0d1dd2453d0a971b2a2e2ea25","modified":1564208803871},{"_id":"public/2017/03/19/fabric/index.html","hash":"73cc076b8e53b6a5487439527514d890c2c9685d","modified":1564208803871},{"_id":"public/2017/03/18/ansible/index.html","hash":"53d131aeeb7cd34f704a1b1bffe67ac19eff5508","modified":1564208803872},{"_id":"public/2017/03/12/celery/index.html","hash":"ccefaceb0da70759ee61514f33d9181a86b60d24","modified":1564208803872},{"_id":"public/2017/03/08/django-page/index.html","hash":"cd001edda6f2dec03f0507ccc7134caeda5cb2df","modified":1564208803872},{"_id":"public/2017/03/07/ConfigParser/index.html","hash":"94a5329a37768076c81e7814a12fe521ef98c23c","modified":1564208803872},{"_id":"public/2017/02/18/redis/index.html","hash":"f8e6e33842c429c14267cf52005beec8a4135f29","modified":1564208803872},{"_id":"public/2017/02/16/mongo/index.html","hash":"1af1c17270b6580dd9de83c412afa3d01b3a4de7","modified":1564208803872},{"_id":"public/2017/02/15/class/index.html","hash":"95ac7e3c6060660a2f36e6e85cd7e2d7f0f1df63","modified":1564208803872},{"_id":"public/2017/02/11/docker-compose/index.html","hash":"be016e76578613b5ee6a8be189115152b659d9c3","modified":1564208803872},{"_id":"public/2017/02/09/yield/index.html","hash":"55693785bdab7ccbad04d40c8716a48f87f9080d","modified":1564208803872},{"_id":"public/2017/02/09/docker-command/index.html","hash":"5b763619833d3c845d6a71114e4f71cacac12104","modified":1564208803872},{"_id":"public/2017/02/08/docker_network/index.html","hash":"353149ede61459e696cebef59c7652850187391f","modified":1564208803872},{"_id":"public/2017/02/06/vim/index.html","hash":"c49b890608e0dbadeefaa7bdaadc0bb159a7b349","modified":1564208803872},{"_id":"public/2017/02/05/cpu/index.html","hash":"86c9c0284aa0aca402e366279357c4970096faef","modified":1564208803872},{"_id":"public/index.html","hash":"030ece8a2de0e36b139f13c082557102356611c4","modified":1564208803872},{"_id":"public/page/2/index.html","hash":"72c836044323263280238296105e31fd2caa1520","modified":1564208803872},{"_id":"public/page/3/index.html","hash":"8c0af1165e087d171cd95ae9e5c20c533eeea833","modified":1564208803872},{"_id":"public/page/4/index.html","hash":"c052285dda5926c2dafe8a6dc6180058cd23976d","modified":1564208803872},{"_id":"public/page/5/index.html","hash":"c058bcbd5aa8d9fb69ece5be984dde44ae7aecb0","modified":1564208803872},{"_id":"public/page/6/index.html","hash":"def064a88095e7845500b5439008328cbc3c4b94","modified":1564208803872},{"_id":"public/page/7/index.html","hash":"c91a62d72954ed2d98f5d5d62c14f7e01f695715","modified":1564208803872},{"_id":"public/page/8/index.html","hash":"2f3bcfdafe4833296e6c47bd94cdaa719b030571","modified":1564208803872},{"_id":"public/page/9/index.html","hash":"442170ecb4b140739d6981227e46825b1dc037a5","modified":1564208803872},{"_id":"public/img/airflow/airflow01.png","hash":"78f1b243f84c15732856e98ee5771b7a96d040f4","modified":1564208803894},{"_id":"public/img/airflow/airflow02.png","hash":"d12836265db4c195f9dfcf1261f6aa147ca7cdeb","modified":1564208803895},{"_id":"public/img/copy/copy01.png","hash":"274389c32663e2346548706e160468b3100e37de","modified":1564208803895},{"_id":"public/img/copy/copy02.png","hash":"9a2f71afe5786da0b811ae873d537cd7845c7333","modified":1564208803895},{"_id":"public/img/django/django_test01.png","hash":"a5a4cd769692eb02f47ef586442c9bb27cfa75e2","modified":1564208803895},{"_id":"public/img/airflow/airflow03.png","hash":"b73a3442c4073b59b4d4f81260055a995a51943b","modified":1564208803895},{"_id":"public/img/django/page.png","hash":"8e854beb09f6ba11bd3dceac3a886cd0e7cacf88","modified":1564208803895},{"_id":"public/img/mysql/btree_index.jpg","hash":"19cdd018cd2cb64e484faf3c88ce67b6fa6bfe8d","modified":1564208803895},{"_id":"public/img/rabbitmq/03.png","hash":"d3f37d15682f6c25cabd16a83d8b368173abd5a0","modified":1564208803895},{"_id":"public/img/rabbitmq/01.png","hash":"535ac09c3e2f29569053d88cbfbc6ad8446bbfea","modified":1564208803895},{"_id":"public/img/rabbitmq/02.png","hash":"59455aacaa19fb0910131fcc98275f721985c0e8","modified":1564208803895},{"_id":"public/img/rabbitmq/04.png","hash":"2f9e64ffd3a451cb04135037cdae9503bbdd698e","modified":1564208803895},{"_id":"public/img/rabbitmq/05.png","hash":"1a594fe497675e34309296e4b52650caae6ef6b7","modified":1564208803895},{"_id":"public/img/rabbitmq/06.png","hash":"21a20bdcdac2bd590bce1b0599b053f29a9c4f21","modified":1564208803895},{"_id":"public/img/rabbitmq/07.png","hash":"f990b514b3ff128c7593dafce0e748cb8cd1f2fd","modified":1564208803895},{"_id":"public/img/scrapy/scrapy.png","hash":"88cfe62067f544a5d63d5de6751ea83aab9b7ee6","modified":1564208803895},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1564208803895},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1564208803895},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1564208803895},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1564208803896},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1564208803896},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1564208803896},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1564208803896},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1564208803896},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1564208803896},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1564208803896},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1564208803896},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1564208803896},{"_id":"public/img/2.png","hash":"2f2eb7b2d42188906f310521c656daa85194e711","modified":1564208803896},{"_id":"public/img/3.png","hash":"f8ef0729926af5b38fbf199d5d5404b4319046a5","modified":1564208803896},{"_id":"public/img/log.jpeg","hash":"250fac786e6366b566edfdd44046716d030550c6","modified":1564208803896},{"_id":"public/img/blueprint-dark.png","hash":"fe154fcccb513b9626048e45f835da99e4e134b8","modified":1564208803896},{"_id":"public/img/dots-2x.png","hash":"2d900f9f8a0b53067401138d8cb411c83e747e8e","modified":1564208803896},{"_id":"public/img/logo.png","hash":"3b38e8deaf1ba16d3e6d1dd810aaf6b47015a778","modified":1564208803896},{"_id":"public/img/favicon.ico","hash":"9328f48f31b282b5bdf8495d19b553f5f221689f","modified":1564208803896},{"_id":"public/img/logo.svg","hash":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1564208803896},{"_id":"public/img/myLogo.png","hash":"d84480df12e69fa882d2c811b7239055f9503037","modified":1564208803896},{"_id":"public/img/vue/echarts/pie.png","hash":"bbe2a9e5c3de44311ffd1094bf05c7b238e41122","modified":1564208803896},{"_id":"public/img/vue/echarts/line.png","hash":"102246b78bc23a707c494245f88a9479c6de4590","modified":1564208803896},{"_id":"public/img/vue/echarts/bar.png","hash":"aed317fad5749c3eff3bc7e904a7454f447a0c82","modified":1564208803896},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1564208803896},{"_id":"public/img/django/permission.png","hash":"b21470a3b1882d0de3ab72370f9f0903561a79ba","modified":1564208805841},{"_id":"public/img/celery/celery01.png","hash":"5ca5807b743a5930e30a927766adeb142dfd9790","modified":1564208805842},{"_id":"public/img/docker_network/1.png","hash":"5690de18c32e435902a35875e64e32d46546e833","modified":1564208805844},{"_id":"public/img/docker_network/2.png","hash":"e13ee9bf0e6f338ad0ea6dce77618759f2a5bbc7","modified":1564208805844},{"_id":"public/img/docker_network/3.png","hash":"7f919448af2bdcb4696ea47e9c063303685e0883","modified":1564208805844},{"_id":"public/img/scrapy/selenium01.png","hash":"2ffe83900b74f2425954bb2d769f63d2e73ea66b","modified":1564208805844},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1564208805844},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1564208805844},{"_id":"public/img/1.jpg","hash":"1944dd79ed2af388743226bd9e8bab681ead1738","modified":1564208805844},{"_id":"public/css/多说自定义.css","hash":"f6ab48d48db96dc0e1a5d0c94f6b0505c91e532d","modified":1564208805858},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1564208805858},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1564208805858},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1564208805858},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1564208805858},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1564208805858},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1564208805858},{"_id":"public/css/style.css","hash":"c3bfb7a8d3a64cd2e401bd67657185fed7cef721","modified":1564208805858},{"_id":"public/css/font-awesome.min.css","hash":"ad41baac2bfc615bf7f1a7440480d4f2ff91592f","modified":1564208805858},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1564208805858},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1564208805858},{"_id":"public/js/jquery-2.1.0.min.js","hash":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1564208805858},{"_id":"public/js/embed.js","hash":"7ddf0ca1b194d3a4fa2a6b877a09ab2a6baa0e93","modified":1564208805858},{"_id":"public/img/ansible/ansible01.png","hash":"5e140db7d99df34ba01b607620ae8d231e6afa8a","modified":1564208805858},{"_id":"public/img/elk/elk.png","hash":"7a69e7fbb8ca0f92aa120d2687bc92b170503af3","modified":1564208805858},{"_id":"public/img/mysql/btree_index.png","hash":"112902201406395b399d2fd5613dc94177499267","modified":1564208805859},{"_id":"public/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1564208805872}],"Category":[{"name":"python","_id":"cjyl5j5u00004ct8u315lonl0"},{"name":"Scrapy","_id":"cjyl5j5ut000lct8uw8tniq3l"},{"name":"DRF","_id":"cjyl5j5ux000rct8ulao3iaky"},{"name":"Frontend","_id":"cjyl5j5vf0019ct8uf86lu2bl"},{"name":"运维","_id":"cjyl5j5w10022ct8ulhdrxzsn"},{"name":"Django","_id":"cjyl5j5wg002nct8ufbwgt07d"},{"name":"Docker","_id":"cjyl5j5xl0048ct8uobmdekp8"},{"name":"Elasticsearch","_id":"cjyl5j5xu004nct8u4akxah62"},{"name":"Mysql","_id":"cjyl5j5yo005mct8ucqh5smag"},{"name":"中间件","_id":"cjyl5j5yu005uct8usey3qss5"}],"Data":[],"Page":[{"title":"about","date":"2017-02-08T05:01:47.000Z","_content":"\n#### 专注python后端开发，运维自动化工具\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-02-08 13:01:47\n---\n\n#### 专注python后端开发，运维自动化工具\n","updated":"2019-07-04T23:07:24.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjyl5j5tm0000ct8upevz0622","content":"<h4 id=\"专注python后端开发，运维自动化工具\"><a href=\"#专注python后端开发，运维自动化工具\" class=\"headerlink\" title=\"专注python后端开发，运维自动化工具\"></a>专注python后端开发，运维自动化工具</h4>","excerpt":"","more":"<h4 id=\"专注python后端开发，运维自动化工具\"><a href=\"#专注python后端开发，运维自动化工具\" class=\"headerlink\" title=\"专注python后端开发，运维自动化工具\"></a>专注python后端开发，运维自动化工具</h4>"},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n---\n","date":"2019-07-04T23:07:24.000Z","updated":"2019-07-04T23:07:24.000Z","path":"search/index.html","comments":1,"_id":"cjyl5j5tv0002ct8uayicrp7n","content":"","excerpt":"","more":""}],"Post":[{"title":"Python 最简单API实现","date":"2017-03-26T13:51:41.000Z","_content":"#### 背景\n以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便，主要因为需要授权和做相关的防火墙策略（如果有几百上千台client，就算用网段的形式，也需要重复操作），而且如果数据库的信息发生变化时，需要把所有客户端的数据库信息进行修改，比较麻烦；最近学习了一种通过url方式将数据传递给服务端，实现简单的api功能，简单例子如下：\n\n#### 实现\n- 客户端\n\n```python\n#!/usr/bin/env python\n#coding:utf8\n \nimport json\nimport platform\nimport psutil\nimport urllib,urllib2\nfrom multiprocessing import cpu_count\n \nsys_info={}\nsys_info['system'] = []\nsys_info['cpu'] = []\nsys_info['mem'] = []\nsys_info['disk'] = []\nsys_info['wip'] = []\n \n#系统信息\nsystem=sys_info['system'].append(platform.uname()[0])\n \n#cpu个数\ncpu_count=sys_info['cpu'].append(cpu_count())\n \n#内存\nmem = psutil.virtual_memory()\nmem_info = sys_info['mem'].append(mem.total * 1 / (1024**3))\n \n#磁盘空间\nsdiskusage = psutil.disk_usage('/')\ndisk_info =sys_info['disk'].append(sdiskusage.total * 1 / (1024**3))\n\n#外网ip\ndef pub_ip():\n    url = \"http://ip.cip.cc\"\n    wip = urllib2.urlopen(url).readline().rstrip()\n    return  wip\nsys_info['wip'].append(pub_ip())\n \nif __name__ == '__main__':\n    print json.dumps(sys_info,indent=4,ensure_ascii=False)\n    data = urllib.urlencode(query=sys_info)\n    respose = urllib.urlopen(url=\"http://127.0.0.1:8090/serveradd/\", data=data)\n```\n- 服务端\n\n```python\n############### urls.py ################\nurl(r'^serveradd/$','app.views.serveradd'),\n \n############### views.py ################\ndef serveradd(req):\n    if req.method == 'GET':\n        print \"GET method\"\n    elif req.method == 'POST':\n        print \"POST method\"\n        request_dict = req.POST\n        system = request_dict.get('system')\n        wip = request_dict.get('wip')\n        data = {k: v for k, v in request_dict.items()}\n        host = Host.objects.filter(wip=wip).first()\n        if not host:\n            host = Host(**data)\n        host.save(force_insert=True)\n    \tdata = {\n            'msg': 'ok',\n            'status': 'ok'\n            }\n    return HttpResponse(data)\n \n############### 结果 ################\nPOST method\n<QueryDict: {u'mem': [u'[4L]'], u'cpu': [u'[4]'], u'disk': [u'[232]'], u'system': [u\"['Darwin']\"], u'wip': [u\"['12.196.9.193']\"]}>\n----['Darwin']----['12.196.9.193']\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/API.md","raw":"---\ntitle: Python 最简单API实现\ndate: 2017-03-26 21:51:41\ntags:\n  - Api\ncategories:\n  - python\n---\n#### 背景\n以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便，主要因为需要授权和做相关的防火墙策略（如果有几百上千台client，就算用网段的形式，也需要重复操作），而且如果数据库的信息发生变化时，需要把所有客户端的数据库信息进行修改，比较麻烦；最近学习了一种通过url方式将数据传递给服务端，实现简单的api功能，简单例子如下：\n\n#### 实现\n- 客户端\n\n```python\n#!/usr/bin/env python\n#coding:utf8\n \nimport json\nimport platform\nimport psutil\nimport urllib,urllib2\nfrom multiprocessing import cpu_count\n \nsys_info={}\nsys_info['system'] = []\nsys_info['cpu'] = []\nsys_info['mem'] = []\nsys_info['disk'] = []\nsys_info['wip'] = []\n \n#系统信息\nsystem=sys_info['system'].append(platform.uname()[0])\n \n#cpu个数\ncpu_count=sys_info['cpu'].append(cpu_count())\n \n#内存\nmem = psutil.virtual_memory()\nmem_info = sys_info['mem'].append(mem.total * 1 / (1024**3))\n \n#磁盘空间\nsdiskusage = psutil.disk_usage('/')\ndisk_info =sys_info['disk'].append(sdiskusage.total * 1 / (1024**3))\n\n#外网ip\ndef pub_ip():\n    url = \"http://ip.cip.cc\"\n    wip = urllib2.urlopen(url).readline().rstrip()\n    return  wip\nsys_info['wip'].append(pub_ip())\n \nif __name__ == '__main__':\n    print json.dumps(sys_info,indent=4,ensure_ascii=False)\n    data = urllib.urlencode(query=sys_info)\n    respose = urllib.urlopen(url=\"http://127.0.0.1:8090/serveradd/\", data=data)\n```\n- 服务端\n\n```python\n############### urls.py ################\nurl(r'^serveradd/$','app.views.serveradd'),\n \n############### views.py ################\ndef serveradd(req):\n    if req.method == 'GET':\n        print \"GET method\"\n    elif req.method == 'POST':\n        print \"POST method\"\n        request_dict = req.POST\n        system = request_dict.get('system')\n        wip = request_dict.get('wip')\n        data = {k: v for k, v in request_dict.items()}\n        host = Host.objects.filter(wip=wip).first()\n        if not host:\n            host = Host(**data)\n        host.save(force_insert=True)\n    \tdata = {\n            'msg': 'ok',\n            'status': 'ok'\n            }\n    return HttpResponse(data)\n \n############### 结果 ################\nPOST method\n<QueryDict: {u'mem': [u'[4L]'], u'cpu': [u'[4]'], u'disk': [u'[232]'], u'system': [u\"['Darwin']\"], u'wip': [u\"['12.196.9.193']\"]}>\n----['Darwin']----['12.196.9.193']\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"API","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5to0001ct8upqghmr36","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便，主要因为需要授权和做相关的防火墙策略（如果有几百上千台client，就算用网段的形式，也需要重复操作），而且如果数据库的信息发生变化时，需要把所有客户端的数据库信息进行修改，比较麻烦；最近学习了一种通过url方式将数据传递给服务端，实现简单的api功能，简单例子如下：</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> platform</div><div class=\"line\"><span class=\"keyword\">import</span> psutil</div><div class=\"line\"><span class=\"keyword\">import</span> urllib,urllib2</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> cpu_count</div><div class=\"line\"> </div><div class=\"line\">sys_info=&#123;&#125;</div><div class=\"line\">sys_info[<span class=\"string\">'system'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'cpu'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'mem'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'disk'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>] = []</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#系统信息</span></div><div class=\"line\">system=sys_info[<span class=\"string\">'system'</span>].append(platform.uname()[<span class=\"number\">0</span>])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#cpu个数</span></div><div class=\"line\">cpu_count=sys_info[<span class=\"string\">'cpu'</span>].append(cpu_count())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#内存</span></div><div class=\"line\">mem = psutil.virtual_memory()</div><div class=\"line\">mem_info = sys_info[<span class=\"string\">'mem'</span>].append(mem.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#磁盘空间</span></div><div class=\"line\">sdiskusage = psutil.disk_usage(<span class=\"string\">'/'</span>)</div><div class=\"line\">disk_info =sys_info[<span class=\"string\">'disk'</span>].append(sdiskusage.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#外网ip</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pub_ip</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    url = <span class=\"string\">\"http://ip.cip.cc\"</span></div><div class=\"line\">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class=\"line\">    <span class=\"keyword\">return</span>  wip</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>].append(pub_ip())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> json.dumps(sys_info,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\">    data = urllib.urlencode(query=sys_info)</div><div class=\"line\">    respose = urllib.urlopen(url=<span class=\"string\">\"http://127.0.0.1:8090/serveradd/\"</span>, data=data)</div></pre></td></tr></table></figure>\n<ul>\n<li>服务端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">############### urls.py ################</span></div><div class=\"line\">url(<span class=\"string\">r'^serveradd/$'</span>,<span class=\"string\">'app.views.serveradd'</span>),</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############### views.py ################</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serveradd</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> req.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"GET method\"</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> req.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"POST method\"</span></div><div class=\"line\">        request_dict = req.POST</div><div class=\"line\">        system = request_dict.get(<span class=\"string\">'system'</span>)</div><div class=\"line\">        wip = request_dict.get(<span class=\"string\">'wip'</span>)</div><div class=\"line\">        data = &#123;k: v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> request_dict.items()&#125;</div><div class=\"line\">        host = Host.objects.filter(wip=wip).first()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> host:</div><div class=\"line\">            host = Host(**data)</div><div class=\"line\">        host.save(force_insert=<span class=\"keyword\">True</span>)</div><div class=\"line\">    \tdata = &#123;</div><div class=\"line\">            <span class=\"string\">'msg'</span>: <span class=\"string\">'ok'</span>,</div><div class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'ok'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(data)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############### 结果 ################</span></div><div class=\"line\">POST method</div><div class=\"line\">&lt;QueryDict: &#123;<span class=\"string\">u'mem'</span>: [<span class=\"string\">u'[4L]'</span>], <span class=\"string\">u'cpu'</span>: [<span class=\"string\">u'[4]'</span>], <span class=\"string\">u'disk'</span>: [<span class=\"string\">u'[232]'</span>], <span class=\"string\">u'system'</span>: [<span class=\"string\">u\"['Darwin']\"</span>], <span class=\"string\">u'wip'</span>: [<span class=\"string\">u\"['12.196.9.193']\"</span>]&#125;&gt;</div><div class=\"line\">----[<span class=\"string\">'Darwin'</span>]----[<span class=\"string\">'12.196.9.193'</span>]</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>以前的一个项目中，在做系统资源上报时，因不知道怎么将数据上报给服务端再展示，后来用了一种最直接和不安全的方式，直接写入数据库，这样做很不方便，主要因为需要授权和做相关的防火墙策略（如果有几百上千台client，就算用网段的形式，也需要重复操作），而且如果数据库的信息发生变化时，需要把所有客户端的数据库信息进行修改，比较麻烦；最近学习了一种通过url方式将数据传递给服务端，实现简单的api功能，简单例子如下：</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> platform</div><div class=\"line\"><span class=\"keyword\">import</span> psutil</div><div class=\"line\"><span class=\"keyword\">import</span> urllib,urllib2</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> cpu_count</div><div class=\"line\"> </div><div class=\"line\">sys_info=&#123;&#125;</div><div class=\"line\">sys_info[<span class=\"string\">'system'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'cpu'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'mem'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'disk'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>] = []</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#系统信息</span></div><div class=\"line\">system=sys_info[<span class=\"string\">'system'</span>].append(platform.uname()[<span class=\"number\">0</span>])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#cpu个数</span></div><div class=\"line\">cpu_count=sys_info[<span class=\"string\">'cpu'</span>].append(cpu_count())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#内存</span></div><div class=\"line\">mem = psutil.virtual_memory()</div><div class=\"line\">mem_info = sys_info[<span class=\"string\">'mem'</span>].append(mem.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#磁盘空间</span></div><div class=\"line\">sdiskusage = psutil.disk_usage(<span class=\"string\">'/'</span>)</div><div class=\"line\">disk_info =sys_info[<span class=\"string\">'disk'</span>].append(sdiskusage.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#外网ip</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pub_ip</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    url = <span class=\"string\">\"http://ip.cip.cc\"</span></div><div class=\"line\">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class=\"line\">    <span class=\"keyword\">return</span>  wip</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>].append(pub_ip())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> json.dumps(sys_info,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\">    data = urllib.urlencode(query=sys_info)</div><div class=\"line\">    respose = urllib.urlopen(url=<span class=\"string\">\"http://127.0.0.1:8090/serveradd/\"</span>, data=data)</div></pre></td></tr></table></figure>\n<ul>\n<li>服务端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">############### urls.py ################</span></div><div class=\"line\">url(<span class=\"string\">r'^serveradd/$'</span>,<span class=\"string\">'app.views.serveradd'</span>),</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############### views.py ################</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serveradd</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> req.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"GET method\"</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> req.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"POST method\"</span></div><div class=\"line\">        request_dict = req.POST</div><div class=\"line\">        system = request_dict.get(<span class=\"string\">'system'</span>)</div><div class=\"line\">        wip = request_dict.get(<span class=\"string\">'wip'</span>)</div><div class=\"line\">        data = &#123;k: v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> request_dict.items()&#125;</div><div class=\"line\">        host = Host.objects.filter(wip=wip).first()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> host:</div><div class=\"line\">            host = Host(**data)</div><div class=\"line\">        host.save(force_insert=<span class=\"keyword\">True</span>)</div><div class=\"line\">    \tdata = &#123;</div><div class=\"line\">            <span class=\"string\">'msg'</span>: <span class=\"string\">'ok'</span>,</div><div class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'ok'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(data)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############### 结果 ################</span></div><div class=\"line\">POST method</div><div class=\"line\">&lt;QueryDict: &#123;<span class=\"string\">u'mem'</span>: [<span class=\"string\">u'[4L]'</span>], <span class=\"string\">u'cpu'</span>: [<span class=\"string\">u'[4]'</span>], <span class=\"string\">u'disk'</span>: [<span class=\"string\">u'[232]'</span>], <span class=\"string\">u'system'</span>: [<span class=\"string\">u\"['Darwin']\"</span>], <span class=\"string\">u'wip'</span>: [<span class=\"string\">u\"['12.196.9.193']\"</span>]&#125;&gt;</div><div class=\"line\">----[<span class=\"string\">'Darwin'</span>]----[<span class=\"string\">'12.196.9.193'</span>]</div></pre></td></tr></table></figure>\n"},{"title":"Python API接口认证","date":"2017-03-27T14:09:52.000Z","_content":"#### 背景\n之前写过一篇文章[《简单API的实现》](https://ttxsgoto.github.io/2017/03/26/API/)，这篇文章说明了通过api方式把数据传递给服务端处理，但这过程中没有认证功能，无论谁发任何内容，都一并接收，这样明显存在不安全性，这篇文章在原来的基础上，添加了接口认证功能。\n\n#### 接口认证方式\n方式一：\n```\n客户端：\n    - 通过定义密钥\n    - 将密钥加密发送给服务端\n服务端：\n    - 服务端定义相同的密钥\n    - 通过相同的加密算法，得到一个值\n    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比\n缺点：\n    - 密钥固定不变，加密后的值固定不变，易暴露，安全性低\n```\n方式二：\n```\n客户端：\n    - 通过定义密钥\n    - 将秘钥和当前时间戳一起加密，得到一个值\n    - 将加密后密钥和时间戳一起发送给服务端\n服务端：\n    - 服务端定义相同的密钥\n    - 将当前服务器端时间和发送过来的客户端时间进行对比，设置可接受的时间范围如：120s；如果服务器当前时间-发送过来的客户端>120s ，即返回false\n    - 将服务端的密钥和客户端时间进行相同的加密算法，得到一个值\n    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比，是否一致\n优点：\n    - 加密后的密钥每次不同，不易破解\n    - 设置有效时长，增加安全性\n缺点：\n    - 客户端时间和服务端时间不能相差太大，如太大造成认证失败，不易排查问题，最好使用同一时钟服务器进行同步\n```\n#### 实现\n- 客户端\n\n```python\n#!/usr/bin/env python\n#coding:utf8\n \nimport json\nimport platform\nimport psutil\nimport urllib,urllib2\nimport time\nimport hashlib\nfrom multiprocessing import cpu_count\n  \nsys_info={}\nsys_info['system'] = [] \nsys_info['cpu'] = []\nsys_info['mem'] = [] \nsys_info['disk'] = []\nsys_info['wip'] = []\nsys_info['apikey'] = []\n  \n#系统信息\nsystem=sys_info['system'].append(platform.uname()[0])\n  \n#cpu个数\ncpu_count=sys_info['cpu'].append(cpu_count())\n  \n#内存\nmem = psutil.virtual_memory()\nmem_info = sys_info['mem'].append(mem.total * 1 / (1024**3))\n  \n#磁盘空间\nsdiskusage = psutil.disk_usage('/')\ndisk_info =sys_info['disk'].append(sdiskusage.total * 1 / (1024**3))\n  \n#外网ip\ndef pub_ip():\n    url = \"http://ip.cip.cc\"\n    wip = urllib2.urlopen(url).readline().rstrip()\n    return  wip\nsys_info['wip'].append(pub_ip())\n \n#认证密钥\ndef Api_key():\n    client_key = \"ddfd-grgf-dsgf-dgfd\"    #客户端定义的key\n    hash_obj = hashlib.md5()     #使用md5加密，也可以使用sha256\n    time_span = time.time()\n    hash_obj.update(\"%s|%f\" %(client_key,time_span))    #更新消息，这个update整个文件\n    encryption = hash_obj.hexdigest()    #计算消息摘要\n    result = \"%s|%f\" %(encryption,time_span)\n    return result\nsys_info['apikey'].append(Api_key())\n  \nif __name__ == '__main__':\n    print json.dumps(sys_info,indent=4,ensure_ascii=False)\n    data = urllib.urlencode(query=sys_info)\n    print data\n    respose = urllib.urlopen(url=\"http://127.0.0.1:8090/serveradd/\", data=data)\n```\n- 服务端\n\n```python\n############### urls.py ################\nurl(r'^serveradd/$','app.views.serveradd'),\n \n############### views.py ################\ndef api_valid(data):\n    import time,hashlib\n    server_key = \"ddfd-grgf-dsgf-dgfd\"    #服务端定义的key，也可定义在其他位置\n    try:\n        encryption , time_span = data.split(\"|\")\n        print \"------->\" ,encryption\n        print \"------->\" ,time_span\n        time_span = float(time_span)\n        #time.sleep(6)    #模拟认证超时时间\n        now_time = time.time()\n        if (now_time - time_span) > 5:\n            print \"超时，认证失败\"\n            return False\n        hash_obj = hashlib.md5()    #使用md5加密\n        print \"hash_obj------------\",hash_obj\n         \n        hash_obj.update(\"%s|%f\" %(server_key,time_span))     #更新消息，这个update整个文件\n        print hash_obj.hexdigest()    #计算消息摘要\n        if hash_obj.hexdigest() == encryption:\n            return True\n        else:\n            print \"客户端和服务端密钥不一致，认证失败.\"\n            return False\n    except Exception,e:\n        pass\n    return False\n     \ndef api_auth(func):\n    def wrapper(req):\n        request_dict = req.POST\n        api_key = request_dict.get('apikey')\n        api_key = api_key[2:-2]\n        print api_key\n        if not api_key:\n            return HttpResponse(\"Unauthorized.\")\n        if not api_valid(api_key):\n            return HttpResponse(\"Unauthorized.\")\n        return func(req)\n    return wrapper\n \n@api_auth\ndef serveradd(req):\n    if req.method == 'GET':\n        print \"GET method\"\n    elif req.method == 'POST':\n        print \"POST method\"\n        request_dict = req.POST\n        system = request_dict.get('system')\n        wip = request_dict.get('wip')\n        data = {k: v for k, v in request_dict.items()}\n        host = Host.objects.filter(wip=wip).first()\n        if not host:\n            host = Host(**data)\n        host.save(force_insert=True)\n    \tdata = {\n            'msg': 'ok',\n            'status': 'ok'\n            }\n    return HttpResponse(data)\n\n```\n```\n#### 结果说明\n1.认证成功，内容如下：\nPOST method-------\n<QueryDict: {u'apikey': [u\"['a73421ee7c21d9d590b956f07ed16ca2|1477795149.448697']\"], u'mem': [u'[4L]'], u'system': [u\"['Darwin']\"], u'wip': [u\"['14.196.121.237']\"], u'disk': [u'[232]'], u'cpu': [u'[4]']}>\n----['Darwin']----['14.196.121.237']\n \n2.当key不同时，服务端没有收到客户端发送过来的信息，内容如下：\n1ab7370c45587a9d4d0d1d8f28bd09d7|1477795289.186698\n-------> 1ab7370c45587a9d4d0d1d8f28bd09d7\n-------> 1477795289.186698\ne9d558f11074410464d1769fb2930e81\n客户端和服务端密钥不一致，认证失败。\n \n3.当认证时间超时时(这里设置超时时间为5s，模拟发送过来的时间为6s后)，服务端没有收到客户端发送过来的信息，内容如下：\n9dc916fbb04c1310cece3aaa5b2d1b7e|1477795521.379039\n-------> 9dc916fbb04c1310cece3aaa5b2d1b7e\n-------> 1477795521.379039\n超时，认证失败\n```\n\n\n\n\n\n","source":"_posts/API-auth.md","raw":"---\ntitle: Python API接口认证\ndate: 2017-03-27 22:09:52\ntags:\n  - Api\ncategories:\n  - python\n---\n#### 背景\n之前写过一篇文章[《简单API的实现》](https://ttxsgoto.github.io/2017/03/26/API/)，这篇文章说明了通过api方式把数据传递给服务端处理，但这过程中没有认证功能，无论谁发任何内容，都一并接收，这样明显存在不安全性，这篇文章在原来的基础上，添加了接口认证功能。\n\n#### 接口认证方式\n方式一：\n```\n客户端：\n    - 通过定义密钥\n    - 将密钥加密发送给服务端\n服务端：\n    - 服务端定义相同的密钥\n    - 通过相同的加密算法，得到一个值\n    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比\n缺点：\n    - 密钥固定不变，加密后的值固定不变，易暴露，安全性低\n```\n方式二：\n```\n客户端：\n    - 通过定义密钥\n    - 将秘钥和当前时间戳一起加密，得到一个值\n    - 将加密后密钥和时间戳一起发送给服务端\n服务端：\n    - 服务端定义相同的密钥\n    - 将当前服务器端时间和发送过来的客户端时间进行对比，设置可接受的时间范围如：120s；如果服务器当前时间-发送过来的客户端>120s ，即返回false\n    - 将服务端的密钥和客户端时间进行相同的加密算法，得到一个值\n    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比，是否一致\n优点：\n    - 加密后的密钥每次不同，不易破解\n    - 设置有效时长，增加安全性\n缺点：\n    - 客户端时间和服务端时间不能相差太大，如太大造成认证失败，不易排查问题，最好使用同一时钟服务器进行同步\n```\n#### 实现\n- 客户端\n\n```python\n#!/usr/bin/env python\n#coding:utf8\n \nimport json\nimport platform\nimport psutil\nimport urllib,urllib2\nimport time\nimport hashlib\nfrom multiprocessing import cpu_count\n  \nsys_info={}\nsys_info['system'] = [] \nsys_info['cpu'] = []\nsys_info['mem'] = [] \nsys_info['disk'] = []\nsys_info['wip'] = []\nsys_info['apikey'] = []\n  \n#系统信息\nsystem=sys_info['system'].append(platform.uname()[0])\n  \n#cpu个数\ncpu_count=sys_info['cpu'].append(cpu_count())\n  \n#内存\nmem = psutil.virtual_memory()\nmem_info = sys_info['mem'].append(mem.total * 1 / (1024**3))\n  \n#磁盘空间\nsdiskusage = psutil.disk_usage('/')\ndisk_info =sys_info['disk'].append(sdiskusage.total * 1 / (1024**3))\n  \n#外网ip\ndef pub_ip():\n    url = \"http://ip.cip.cc\"\n    wip = urllib2.urlopen(url).readline().rstrip()\n    return  wip\nsys_info['wip'].append(pub_ip())\n \n#认证密钥\ndef Api_key():\n    client_key = \"ddfd-grgf-dsgf-dgfd\"    #客户端定义的key\n    hash_obj = hashlib.md5()     #使用md5加密，也可以使用sha256\n    time_span = time.time()\n    hash_obj.update(\"%s|%f\" %(client_key,time_span))    #更新消息，这个update整个文件\n    encryption = hash_obj.hexdigest()    #计算消息摘要\n    result = \"%s|%f\" %(encryption,time_span)\n    return result\nsys_info['apikey'].append(Api_key())\n  \nif __name__ == '__main__':\n    print json.dumps(sys_info,indent=4,ensure_ascii=False)\n    data = urllib.urlencode(query=sys_info)\n    print data\n    respose = urllib.urlopen(url=\"http://127.0.0.1:8090/serveradd/\", data=data)\n```\n- 服务端\n\n```python\n############### urls.py ################\nurl(r'^serveradd/$','app.views.serveradd'),\n \n############### views.py ################\ndef api_valid(data):\n    import time,hashlib\n    server_key = \"ddfd-grgf-dsgf-dgfd\"    #服务端定义的key，也可定义在其他位置\n    try:\n        encryption , time_span = data.split(\"|\")\n        print \"------->\" ,encryption\n        print \"------->\" ,time_span\n        time_span = float(time_span)\n        #time.sleep(6)    #模拟认证超时时间\n        now_time = time.time()\n        if (now_time - time_span) > 5:\n            print \"超时，认证失败\"\n            return False\n        hash_obj = hashlib.md5()    #使用md5加密\n        print \"hash_obj------------\",hash_obj\n         \n        hash_obj.update(\"%s|%f\" %(server_key,time_span))     #更新消息，这个update整个文件\n        print hash_obj.hexdigest()    #计算消息摘要\n        if hash_obj.hexdigest() == encryption:\n            return True\n        else:\n            print \"客户端和服务端密钥不一致，认证失败.\"\n            return False\n    except Exception,e:\n        pass\n    return False\n     \ndef api_auth(func):\n    def wrapper(req):\n        request_dict = req.POST\n        api_key = request_dict.get('apikey')\n        api_key = api_key[2:-2]\n        print api_key\n        if not api_key:\n            return HttpResponse(\"Unauthorized.\")\n        if not api_valid(api_key):\n            return HttpResponse(\"Unauthorized.\")\n        return func(req)\n    return wrapper\n \n@api_auth\ndef serveradd(req):\n    if req.method == 'GET':\n        print \"GET method\"\n    elif req.method == 'POST':\n        print \"POST method\"\n        request_dict = req.POST\n        system = request_dict.get('system')\n        wip = request_dict.get('wip')\n        data = {k: v for k, v in request_dict.items()}\n        host = Host.objects.filter(wip=wip).first()\n        if not host:\n            host = Host(**data)\n        host.save(force_insert=True)\n    \tdata = {\n            'msg': 'ok',\n            'status': 'ok'\n            }\n    return HttpResponse(data)\n\n```\n```\n#### 结果说明\n1.认证成功，内容如下：\nPOST method-------\n<QueryDict: {u'apikey': [u\"['a73421ee7c21d9d590b956f07ed16ca2|1477795149.448697']\"], u'mem': [u'[4L]'], u'system': [u\"['Darwin']\"], u'wip': [u\"['14.196.121.237']\"], u'disk': [u'[232]'], u'cpu': [u'[4]']}>\n----['Darwin']----['14.196.121.237']\n \n2.当key不同时，服务端没有收到客户端发送过来的信息，内容如下：\n1ab7370c45587a9d4d0d1d8f28bd09d7|1477795289.186698\n-------> 1ab7370c45587a9d4d0d1d8f28bd09d7\n-------> 1477795289.186698\ne9d558f11074410464d1769fb2930e81\n客户端和服务端密钥不一致，认证失败。\n \n3.当认证时间超时时(这里设置超时时间为5s，模拟发送过来的时间为6s后)，服务端没有收到客户端发送过来的信息，内容如下：\n9dc916fbb04c1310cece3aaa5b2d1b7e|1477795521.379039\n-------> 9dc916fbb04c1310cece3aaa5b2d1b7e\n-------> 1477795521.379039\n超时，认证失败\n```\n\n\n\n\n\n","slug":"API-auth","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5tx0003ct8ufgbyv2zw","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>之前写过一篇文章<a href=\"https://ttxsgoto.github.io/2017/03/26/API/\">《简单API的实现》</a>，这篇文章说明了通过api方式把数据传递给服务端处理，但这过程中没有认证功能，无论谁发任何内容，都一并接收，这样明显存在不安全性，这篇文章在原来的基础上，添加了接口认证功能。</p>\n<h4 id=\"接口认证方式\"><a href=\"#接口认证方式\" class=\"headerlink\" title=\"接口认证方式\"></a>接口认证方式</h4><p>方式一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">客户端：</div><div class=\"line\">    - 通过定义密钥</div><div class=\"line\">    - 将密钥加密发送给服务端</div><div class=\"line\">服务端：</div><div class=\"line\">    - 服务端定义相同的密钥</div><div class=\"line\">    - 通过相同的加密算法，得到一个值</div><div class=\"line\">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比</div><div class=\"line\">缺点：</div><div class=\"line\">    - 密钥固定不变，加密后的值固定不变，易暴露，安全性低</div></pre></td></tr></table></figure></p>\n<p>方式二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">客户端：</div><div class=\"line\">    - 通过定义密钥</div><div class=\"line\">    - 将秘钥和当前时间戳一起加密，得到一个值</div><div class=\"line\">    - 将加密后密钥和时间戳一起发送给服务端</div><div class=\"line\">服务端：</div><div class=\"line\">    - 服务端定义相同的密钥</div><div class=\"line\">    - 将当前服务器端时间和发送过来的客户端时间进行对比，设置可接受的时间范围如：120s；如果服务器当前时间-发送过来的客户端&gt;120s ，即返回false</div><div class=\"line\">    - 将服务端的密钥和客户端时间进行相同的加密算法，得到一个值</div><div class=\"line\">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比，是否一致</div><div class=\"line\">优点：</div><div class=\"line\">    - 加密后的密钥每次不同，不易破解</div><div class=\"line\">    - 设置有效时长，增加安全性</div><div class=\"line\">缺点：</div><div class=\"line\">    - 客户端时间和服务端时间不能相差太大，如太大造成认证失败，不易排查问题，最好使用同一时钟服务器进行同步</div></pre></td></tr></table></figure></p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> platform</div><div class=\"line\"><span class=\"keyword\">import</span> psutil</div><div class=\"line\"><span class=\"keyword\">import</span> urllib,urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> hashlib</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> cpu_count</div><div class=\"line\">  </div><div class=\"line\">sys_info=&#123;&#125;</div><div class=\"line\">sys_info[<span class=\"string\">'system'</span>] = [] </div><div class=\"line\">sys_info[<span class=\"string\">'cpu'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'mem'</span>] = [] </div><div class=\"line\">sys_info[<span class=\"string\">'disk'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'apikey'</span>] = []</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#系统信息</span></div><div class=\"line\">system=sys_info[<span class=\"string\">'system'</span>].append(platform.uname()[<span class=\"number\">0</span>])</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#cpu个数</span></div><div class=\"line\">cpu_count=sys_info[<span class=\"string\">'cpu'</span>].append(cpu_count())</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#内存</span></div><div class=\"line\">mem = psutil.virtual_memory()</div><div class=\"line\">mem_info = sys_info[<span class=\"string\">'mem'</span>].append(mem.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#磁盘空间</span></div><div class=\"line\">sdiskusage = psutil.disk_usage(<span class=\"string\">'/'</span>)</div><div class=\"line\">disk_info =sys_info[<span class=\"string\">'disk'</span>].append(sdiskusage.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#外网ip</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pub_ip</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    url = <span class=\"string\">\"http://ip.cip.cc\"</span></div><div class=\"line\">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class=\"line\">    <span class=\"keyword\">return</span>  wip</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>].append(pub_ip())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#认证密钥</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Api_key</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    client_key = <span class=\"string\">\"ddfd-grgf-dsgf-dgfd\"</span>    <span class=\"comment\">#客户端定义的key</span></div><div class=\"line\">    hash_obj = hashlib.md5()     <span class=\"comment\">#使用md5加密，也可以使用sha256</span></div><div class=\"line\">    time_span = time.time()</div><div class=\"line\">    hash_obj.update(<span class=\"string\">\"%s|%f\"</span> %(client_key,time_span))    <span class=\"comment\">#更新消息，这个update整个文件</span></div><div class=\"line\">    encryption = hash_obj.hexdigest()    <span class=\"comment\">#计算消息摘要</span></div><div class=\"line\">    result = <span class=\"string\">\"%s|%f\"</span> %(encryption,time_span)</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">sys_info[<span class=\"string\">'apikey'</span>].append(Api_key())</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> json.dumps(sys_info,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\">    data = urllib.urlencode(query=sys_info)</div><div class=\"line\">    <span class=\"keyword\">print</span> data</div><div class=\"line\">    respose = urllib.urlopen(url=<span class=\"string\">\"http://127.0.0.1:8090/serveradd/\"</span>, data=data)</div></pre></td></tr></table></figure>\n<ul>\n<li>服务端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">############### urls.py ################</span></div><div class=\"line\">url(<span class=\"string\">r'^serveradd/$'</span>,<span class=\"string\">'app.views.serveradd'</span>),</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############### views.py ################</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">api_valid</span><span class=\"params\">(data)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">import</span> time,hashlib</div><div class=\"line\">    server_key = <span class=\"string\">\"ddfd-grgf-dsgf-dgfd\"</span>    <span class=\"comment\">#服务端定义的key，也可定义在其他位置</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        encryption , time_span = data.split(<span class=\"string\">\"|\"</span>)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"-------&gt;\"</span> ,encryption</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"-------&gt;\"</span> ,time_span</div><div class=\"line\">        time_span = float(time_span)</div><div class=\"line\">        <span class=\"comment\">#time.sleep(6)    #模拟认证超时时间</span></div><div class=\"line\">        now_time = time.time()</div><div class=\"line\">        <span class=\"keyword\">if</span> (now_time - time_span) &gt; <span class=\"number\">5</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"超时，认证失败\"</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        hash_obj = hashlib.md5()    <span class=\"comment\">#使用md5加密</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"hash_obj------------\"</span>,hash_obj</div><div class=\"line\">         </div><div class=\"line\">        hash_obj.update(<span class=\"string\">\"%s|%f\"</span> %(server_key,time_span))     <span class=\"comment\">#更新消息，这个update整个文件</span></div><div class=\"line\">        <span class=\"keyword\">print</span> hash_obj.hexdigest()    <span class=\"comment\">#计算消息摘要</span></div><div class=\"line\">        <span class=\"keyword\">if</span> hash_obj.hexdigest() == encryption:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"客户端和服务端密钥不一致，认证失败.\"</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception,e:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">     </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">api_auth</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">        request_dict = req.POST</div><div class=\"line\">        api_key = request_dict.get(<span class=\"string\">'apikey'</span>)</div><div class=\"line\">        api_key = api_key[<span class=\"number\">2</span>:<span class=\"number\">-2</span>]</div><div class=\"line\">        <span class=\"keyword\">print</span> api_key</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> api_key:</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Unauthorized.\"</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> api_valid(api_key):</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Unauthorized.\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> func(req)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@api_auth</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serveradd</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> req.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"GET method\"</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> req.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"POST method\"</span></div><div class=\"line\">        request_dict = req.POST</div><div class=\"line\">        system = request_dict.get(<span class=\"string\">'system'</span>)</div><div class=\"line\">        wip = request_dict.get(<span class=\"string\">'wip'</span>)</div><div class=\"line\">        data = &#123;k: v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> request_dict.items()&#125;</div><div class=\"line\">        host = Host.objects.filter(wip=wip).first()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> host:</div><div class=\"line\">            host = Host(**data)</div><div class=\"line\">        host.save(force_insert=<span class=\"keyword\">True</span>)</div><div class=\"line\">    \tdata = &#123;</div><div class=\"line\">            <span class=\"string\">'msg'</span>: <span class=\"string\">'ok'</span>,</div><div class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'ok'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(data)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">#### 结果说明</div><div class=\"line\">1.认证成功，内容如下：</div><div class=\"line\">POST method-------</div><div class=\"line\">&lt;QueryDict: &#123;u&apos;apikey&apos;: [u&quot;[&apos;a73421ee7c21d9d590b956f07ed16ca2|1477795149.448697&apos;]&quot;], u&apos;mem&apos;: [u&apos;[4L]&apos;], u&apos;system&apos;: [u&quot;[&apos;Darwin&apos;]&quot;], u&apos;wip&apos;: [u&quot;[&apos;14.196.121.237&apos;]&quot;], u&apos;disk&apos;: [u&apos;[232]&apos;], u&apos;cpu&apos;: [u&apos;[4]&apos;]&#125;&gt;</div><div class=\"line\">----[&apos;Darwin&apos;]----[&apos;14.196.121.237&apos;]</div><div class=\"line\"> </div><div class=\"line\">2.当key不同时，服务端没有收到客户端发送过来的信息，内容如下：</div><div class=\"line\">1ab7370c45587a9d4d0d1d8f28bd09d7|1477795289.186698</div><div class=\"line\">-------&gt; 1ab7370c45587a9d4d0d1d8f28bd09d7</div><div class=\"line\">-------&gt; 1477795289.186698</div><div class=\"line\">e9d558f11074410464d1769fb2930e81</div><div class=\"line\">客户端和服务端密钥不一致，认证失败。</div><div class=\"line\"> </div><div class=\"line\">3.当认证时间超时时(这里设置超时时间为5s，模拟发送过来的时间为6s后)，服务端没有收到客户端发送过来的信息，内容如下：</div><div class=\"line\">9dc916fbb04c1310cece3aaa5b2d1b7e|1477795521.379039</div><div class=\"line\">-------&gt; 9dc916fbb04c1310cece3aaa5b2d1b7e</div><div class=\"line\">-------&gt; 1477795521.379039</div><div class=\"line\">超时，认证失败</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>之前写过一篇文章<a href=\"https://ttxsgoto.github.io/2017/03/26/API/\">《简单API的实现》</a>，这篇文章说明了通过api方式把数据传递给服务端处理，但这过程中没有认证功能，无论谁发任何内容，都一并接收，这样明显存在不安全性，这篇文章在原来的基础上，添加了接口认证功能。</p>\n<h4 id=\"接口认证方式\"><a href=\"#接口认证方式\" class=\"headerlink\" title=\"接口认证方式\"></a>接口认证方式</h4><p>方式一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">客户端：</div><div class=\"line\">    - 通过定义密钥</div><div class=\"line\">    - 将密钥加密发送给服务端</div><div class=\"line\">服务端：</div><div class=\"line\">    - 服务端定义相同的密钥</div><div class=\"line\">    - 通过相同的加密算法，得到一个值</div><div class=\"line\">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比</div><div class=\"line\">缺点：</div><div class=\"line\">    - 密钥固定不变，加密后的值固定不变，易暴露，安全性低</div></pre></td></tr></table></figure></p>\n<p>方式二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">客户端：</div><div class=\"line\">    - 通过定义密钥</div><div class=\"line\">    - 将秘钥和当前时间戳一起加密，得到一个值</div><div class=\"line\">    - 将加密后密钥和时间戳一起发送给服务端</div><div class=\"line\">服务端：</div><div class=\"line\">    - 服务端定义相同的密钥</div><div class=\"line\">    - 将当前服务器端时间和发送过来的客户端时间进行对比，设置可接受的时间范围如：120s；如果服务器当前时间-发送过来的客户端&gt;120s ，即返回false</div><div class=\"line\">    - 将服务端的密钥和客户端时间进行相同的加密算法，得到一个值</div><div class=\"line\">    - 把服务端加密后的值和客户端发送过来的加密的密钥进行对比，是否一致</div><div class=\"line\">优点：</div><div class=\"line\">    - 加密后的密钥每次不同，不易破解</div><div class=\"line\">    - 设置有效时长，增加安全性</div><div class=\"line\">缺点：</div><div class=\"line\">    - 客户端时间和服务端时间不能相差太大，如太大造成认证失败，不易排查问题，最好使用同一时钟服务器进行同步</div></pre></td></tr></table></figure></p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> platform</div><div class=\"line\"><span class=\"keyword\">import</span> psutil</div><div class=\"line\"><span class=\"keyword\">import</span> urllib,urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> hashlib</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> cpu_count</div><div class=\"line\">  </div><div class=\"line\">sys_info=&#123;&#125;</div><div class=\"line\">sys_info[<span class=\"string\">'system'</span>] = [] </div><div class=\"line\">sys_info[<span class=\"string\">'cpu'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'mem'</span>] = [] </div><div class=\"line\">sys_info[<span class=\"string\">'disk'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>] = []</div><div class=\"line\">sys_info[<span class=\"string\">'apikey'</span>] = []</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#系统信息</span></div><div class=\"line\">system=sys_info[<span class=\"string\">'system'</span>].append(platform.uname()[<span class=\"number\">0</span>])</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#cpu个数</span></div><div class=\"line\">cpu_count=sys_info[<span class=\"string\">'cpu'</span>].append(cpu_count())</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#内存</span></div><div class=\"line\">mem = psutil.virtual_memory()</div><div class=\"line\">mem_info = sys_info[<span class=\"string\">'mem'</span>].append(mem.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#磁盘空间</span></div><div class=\"line\">sdiskusage = psutil.disk_usage(<span class=\"string\">'/'</span>)</div><div class=\"line\">disk_info =sys_info[<span class=\"string\">'disk'</span>].append(sdiskusage.total * <span class=\"number\">1</span> / (<span class=\"number\">1024</span>**<span class=\"number\">3</span>))</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#外网ip</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pub_ip</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    url = <span class=\"string\">\"http://ip.cip.cc\"</span></div><div class=\"line\">    wip = urllib2.urlopen(url).readline().rstrip()</div><div class=\"line\">    <span class=\"keyword\">return</span>  wip</div><div class=\"line\">sys_info[<span class=\"string\">'wip'</span>].append(pub_ip())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#认证密钥</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Api_key</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    client_key = <span class=\"string\">\"ddfd-grgf-dsgf-dgfd\"</span>    <span class=\"comment\">#客户端定义的key</span></div><div class=\"line\">    hash_obj = hashlib.md5()     <span class=\"comment\">#使用md5加密，也可以使用sha256</span></div><div class=\"line\">    time_span = time.time()</div><div class=\"line\">    hash_obj.update(<span class=\"string\">\"%s|%f\"</span> %(client_key,time_span))    <span class=\"comment\">#更新消息，这个update整个文件</span></div><div class=\"line\">    encryption = hash_obj.hexdigest()    <span class=\"comment\">#计算消息摘要</span></div><div class=\"line\">    result = <span class=\"string\">\"%s|%f\"</span> %(encryption,time_span)</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">sys_info[<span class=\"string\">'apikey'</span>].append(Api_key())</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> json.dumps(sys_info,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"keyword\">False</span>)</div><div class=\"line\">    data = urllib.urlencode(query=sys_info)</div><div class=\"line\">    <span class=\"keyword\">print</span> data</div><div class=\"line\">    respose = urllib.urlopen(url=<span class=\"string\">\"http://127.0.0.1:8090/serveradd/\"</span>, data=data)</div></pre></td></tr></table></figure>\n<ul>\n<li>服务端</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">############### urls.py ################</span></div><div class=\"line\">url(<span class=\"string\">r'^serveradd/$'</span>,<span class=\"string\">'app.views.serveradd'</span>),</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############### views.py ################</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">api_valid</span><span class=\"params\">(data)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">import</span> time,hashlib</div><div class=\"line\">    server_key = <span class=\"string\">\"ddfd-grgf-dsgf-dgfd\"</span>    <span class=\"comment\">#服务端定义的key，也可定义在其他位置</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        encryption , time_span = data.split(<span class=\"string\">\"|\"</span>)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"-------&gt;\"</span> ,encryption</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"-------&gt;\"</span> ,time_span</div><div class=\"line\">        time_span = float(time_span)</div><div class=\"line\">        <span class=\"comment\">#time.sleep(6)    #模拟认证超时时间</span></div><div class=\"line\">        now_time = time.time()</div><div class=\"line\">        <span class=\"keyword\">if</span> (now_time - time_span) &gt; <span class=\"number\">5</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"超时，认证失败\"</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        hash_obj = hashlib.md5()    <span class=\"comment\">#使用md5加密</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"hash_obj------------\"</span>,hash_obj</div><div class=\"line\">         </div><div class=\"line\">        hash_obj.update(<span class=\"string\">\"%s|%f\"</span> %(server_key,time_span))     <span class=\"comment\">#更新消息，这个update整个文件</span></div><div class=\"line\">        <span class=\"keyword\">print</span> hash_obj.hexdigest()    <span class=\"comment\">#计算消息摘要</span></div><div class=\"line\">        <span class=\"keyword\">if</span> hash_obj.hexdigest() == encryption:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"客户端和服务端密钥不一致，认证失败.\"</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception,e:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">     </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">api_auth</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">        request_dict = req.POST</div><div class=\"line\">        api_key = request_dict.get(<span class=\"string\">'apikey'</span>)</div><div class=\"line\">        api_key = api_key[<span class=\"number\">2</span>:<span class=\"number\">-2</span>]</div><div class=\"line\">        <span class=\"keyword\">print</span> api_key</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> api_key:</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Unauthorized.\"</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> api_valid(api_key):</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Unauthorized.\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> func(req)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@api_auth</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serveradd</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> req.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"GET method\"</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> req.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"POST method\"</span></div><div class=\"line\">        request_dict = req.POST</div><div class=\"line\">        system = request_dict.get(<span class=\"string\">'system'</span>)</div><div class=\"line\">        wip = request_dict.get(<span class=\"string\">'wip'</span>)</div><div class=\"line\">        data = &#123;k: v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> request_dict.items()&#125;</div><div class=\"line\">        host = Host.objects.filter(wip=wip).first()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> host:</div><div class=\"line\">            host = Host(**data)</div><div class=\"line\">        host.save(force_insert=<span class=\"keyword\">True</span>)</div><div class=\"line\">    \tdata = &#123;</div><div class=\"line\">            <span class=\"string\">'msg'</span>: <span class=\"string\">'ok'</span>,</div><div class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'ok'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(data)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">#### 结果说明</div><div class=\"line\">1.认证成功，内容如下：</div><div class=\"line\">POST method-------</div><div class=\"line\">&lt;QueryDict: &#123;u&apos;apikey&apos;: [u&quot;[&apos;a73421ee7c21d9d590b956f07ed16ca2|1477795149.448697&apos;]&quot;], u&apos;mem&apos;: [u&apos;[4L]&apos;], u&apos;system&apos;: [u&quot;[&apos;Darwin&apos;]&quot;], u&apos;wip&apos;: [u&quot;[&apos;14.196.121.237&apos;]&quot;], u&apos;disk&apos;: [u&apos;[232]&apos;], u&apos;cpu&apos;: [u&apos;[4]&apos;]&#125;&gt;</div><div class=\"line\">----[&apos;Darwin&apos;]----[&apos;14.196.121.237&apos;]</div><div class=\"line\"> </div><div class=\"line\">2.当key不同时，服务端没有收到客户端发送过来的信息，内容如下：</div><div class=\"line\">1ab7370c45587a9d4d0d1d8f28bd09d7|1477795289.186698</div><div class=\"line\">-------&gt; 1ab7370c45587a9d4d0d1d8f28bd09d7</div><div class=\"line\">-------&gt; 1477795289.186698</div><div class=\"line\">e9d558f11074410464d1769fb2930e81</div><div class=\"line\">客户端和服务端密钥不一致，认证失败。</div><div class=\"line\"> </div><div class=\"line\">3.当认证时间超时时(这里设置超时时间为5s，模拟发送过来的时间为6s后)，服务端没有收到客户端发送过来的信息，内容如下：</div><div class=\"line\">9dc916fbb04c1310cece3aaa5b2d1b7e|1477795521.379039</div><div class=\"line\">-------&gt; 9dc916fbb04c1310cece3aaa5b2d1b7e</div><div class=\"line\">-------&gt; 1477795521.379039</div><div class=\"line\">超时，认证失败</div></pre></td></tr></table></figure>\n"},{"title":"Python ConfigParser模块","date":"2017-03-07T13:57:05.000Z","_content":"ConfigParser模块记录常用方法\n```python\n#!/usr/bin/env python\n#coding: utf-8\nimport ConfigParser\ndef main():\n    \"\"\"\n    基本的读取配置文件\n    -read(filename) 直接读取ini文件内容\n    -sections() 得到所有的section，并以列表的形式返回\n    -options(section) 得到该section的所有option\n    -items(section) 得到该section的所有键值对\n    -get(section,option) 得到section中option的值，返回为string类型\n    -getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数\n    基本的写入配置文件\n    -add_section(section) 添加一个新的section\n    -set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件\n    \"\"\"\n    cf = ConfigParser.ConfigParser()\n    cf.read('db.txt')\n    sec = cf.sections()                         #获取所有sections的值\n    print sec\n    opt = cf.options('db1')                     #获取指定sections的options\n    print opt\n    val = cf.items('db1')                       #获取指定section的配置信息，为list\n    print val,type(val)\n    val_str = cf.get('db1', 'db_host')          #获取sections中option的值\n    print val_str\n    cf.set('db1','db_host','192.168.1.55')      #设置某个option的值\n    cf.write(open('db.txt','w'))\n    try:\n        cf.add_section('ttxsgoto')              #添加一个section\n        cf.set('ttxsgoto', 'hostname', 'ttxsgoto')\n        cf.write(open('db.txt','w'))\n    except Exception:\n        pass\n    cf.remove_option('ttxsgoto', 'hostname')    #删除option\n    cf.remove_section('ttxsgoto')               #删除section\n    cf.write(open('db.txt','w'))\n\ndef write():\n    config = ConfigParser.RawConfigParser()\n    config.add_section('Section1')\n    config.set('Section1','an_int','15')\n    config.set('Section1','a_bool','true')\n    config.set('Section1','a_float','3.1415')\n    config.set('Section1', 'baz', 'fun')\n    config.set('Section1', 'bar', 'Python')\n    config.set('Section1','foo','%(bar)s is %(baz)s !')\n    with open('example.cfg','wb') as configfile:\n        config.write(configfile)\n\ndef read():\n    config = ConfigParser.RawConfigParser()\n    config.read('example.cfg')\n    a_float = config.getfloat('Section1', 'a_float')\n    an_int = config.getint('Section1', 'an_int')\n    print a_float + an_int\n    if config.getboolean('Section1', 'a_bool'):\n        print config.get('Section1','foo')\n\ndef read1():\n    config = ConfigParser.ConfigParser()\n    config.read('example.cfg')\n    print config.get('Section1', 'foo', 0)  #0 默认，显示定义的字符串\n    print config.get('Section1','foo',1)    #设置为1，显示原字符串\n    print config.get('Section1','foo',0,{'bar':'Document','baz':'evil'}) #设置section的对应的options\n\ndef read2():\n    config = ConfigParser.SafeConfigParser({'bar':'Life','baz':'hard'})\n    config.read('example.cfg')\n    print config.get('Section1','foo')  #\"Python is fun!\"\n    config.remove_option('Section1', 'bar')\n    config.remove_option('Section1','baz')\n    print config.get('Section1','foo')  #\"Life is hard!\"\n    \nif __name__ == '__main__':\n    main()\n```\n\n\n\n","source":"_posts/ConfigParser.md","raw":"---\ntitle: Python ConfigParser模块\ndate: 2017-03-07 21:57:05\ntags:\n  - ConfigParser\ncategories:\n  - python\n---\nConfigParser模块记录常用方法\n```python\n#!/usr/bin/env python\n#coding: utf-8\nimport ConfigParser\ndef main():\n    \"\"\"\n    基本的读取配置文件\n    -read(filename) 直接读取ini文件内容\n    -sections() 得到所有的section，并以列表的形式返回\n    -options(section) 得到该section的所有option\n    -items(section) 得到该section的所有键值对\n    -get(section,option) 得到section中option的值，返回为string类型\n    -getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数\n    基本的写入配置文件\n    -add_section(section) 添加一个新的section\n    -set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件\n    \"\"\"\n    cf = ConfigParser.ConfigParser()\n    cf.read('db.txt')\n    sec = cf.sections()                         #获取所有sections的值\n    print sec\n    opt = cf.options('db1')                     #获取指定sections的options\n    print opt\n    val = cf.items('db1')                       #获取指定section的配置信息，为list\n    print val,type(val)\n    val_str = cf.get('db1', 'db_host')          #获取sections中option的值\n    print val_str\n    cf.set('db1','db_host','192.168.1.55')      #设置某个option的值\n    cf.write(open('db.txt','w'))\n    try:\n        cf.add_section('ttxsgoto')              #添加一个section\n        cf.set('ttxsgoto', 'hostname', 'ttxsgoto')\n        cf.write(open('db.txt','w'))\n    except Exception:\n        pass\n    cf.remove_option('ttxsgoto', 'hostname')    #删除option\n    cf.remove_section('ttxsgoto')               #删除section\n    cf.write(open('db.txt','w'))\n\ndef write():\n    config = ConfigParser.RawConfigParser()\n    config.add_section('Section1')\n    config.set('Section1','an_int','15')\n    config.set('Section1','a_bool','true')\n    config.set('Section1','a_float','3.1415')\n    config.set('Section1', 'baz', 'fun')\n    config.set('Section1', 'bar', 'Python')\n    config.set('Section1','foo','%(bar)s is %(baz)s !')\n    with open('example.cfg','wb') as configfile:\n        config.write(configfile)\n\ndef read():\n    config = ConfigParser.RawConfigParser()\n    config.read('example.cfg')\n    a_float = config.getfloat('Section1', 'a_float')\n    an_int = config.getint('Section1', 'an_int')\n    print a_float + an_int\n    if config.getboolean('Section1', 'a_bool'):\n        print config.get('Section1','foo')\n\ndef read1():\n    config = ConfigParser.ConfigParser()\n    config.read('example.cfg')\n    print config.get('Section1', 'foo', 0)  #0 默认，显示定义的字符串\n    print config.get('Section1','foo',1)    #设置为1，显示原字符串\n    print config.get('Section1','foo',0,{'bar':'Document','baz':'evil'}) #设置section的对应的options\n\ndef read2():\n    config = ConfigParser.SafeConfigParser({'bar':'Life','baz':'hard'})\n    config.read('example.cfg')\n    print config.get('Section1','foo')  #\"Python is fun!\"\n    config.remove_option('Section1', 'bar')\n    config.remove_option('Section1','baz')\n    print config.get('Section1','foo')  #\"Life is hard!\"\n    \nif __name__ == '__main__':\n    main()\n```\n\n\n\n","slug":"ConfigParser","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5u50006ct8u31dql2rr","content":"<p>ConfigParser模块记录常用方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> ConfigParser</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    基本的读取配置文件</div><div class=\"line\">    -read(filename) 直接读取ini文件内容</div><div class=\"line\">    -sections() 得到所有的section，并以列表的形式返回</div><div class=\"line\">    -options(section) 得到该section的所有option</div><div class=\"line\">    -items(section) 得到该section的所有键值对</div><div class=\"line\">    -get(section,option) 得到section中option的值，返回为string类型</div><div class=\"line\">    -getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数</div><div class=\"line\">    基本的写入配置文件</div><div class=\"line\">    -add_section(section) 添加一个新的section</div><div class=\"line\">    -set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    cf = ConfigParser.ConfigParser()</div><div class=\"line\">    cf.read(<span class=\"string\">'db.txt'</span>)</div><div class=\"line\">    sec = cf.sections()                         <span class=\"comment\">#获取所有sections的值</span></div><div class=\"line\">    <span class=\"keyword\">print</span> sec</div><div class=\"line\">    opt = cf.options(<span class=\"string\">'db1'</span>)                     <span class=\"comment\">#获取指定sections的options</span></div><div class=\"line\">    <span class=\"keyword\">print</span> opt</div><div class=\"line\">    val = cf.items(<span class=\"string\">'db1'</span>)                       <span class=\"comment\">#获取指定section的配置信息，为list</span></div><div class=\"line\">    <span class=\"keyword\">print</span> val,type(val)</div><div class=\"line\">    val_str = cf.get(<span class=\"string\">'db1'</span>, <span class=\"string\">'db_host'</span>)          <span class=\"comment\">#获取sections中option的值</span></div><div class=\"line\">    <span class=\"keyword\">print</span> val_str</div><div class=\"line\">    cf.set(<span class=\"string\">'db1'</span>,<span class=\"string\">'db_host'</span>,<span class=\"string\">'192.168.1.55'</span>)      <span class=\"comment\">#设置某个option的值</span></div><div class=\"line\">    cf.write(open(<span class=\"string\">'db.txt'</span>,<span class=\"string\">'w'</span>))</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        cf.add_section(<span class=\"string\">'ttxsgoto'</span>)              <span class=\"comment\">#添加一个section</span></div><div class=\"line\">        cf.set(<span class=\"string\">'ttxsgoto'</span>, <span class=\"string\">'hostname'</span>, <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\">        cf.write(open(<span class=\"string\">'db.txt'</span>,<span class=\"string\">'w'</span>))</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">    cf.remove_option(<span class=\"string\">'ttxsgoto'</span>, <span class=\"string\">'hostname'</span>)    <span class=\"comment\">#删除option</span></div><div class=\"line\">    cf.remove_section(<span class=\"string\">'ttxsgoto'</span>)               <span class=\"comment\">#删除section</span></div><div class=\"line\">    cf.write(open(<span class=\"string\">'db.txt'</span>,<span class=\"string\">'w'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.RawConfigParser()</div><div class=\"line\">    config.add_section(<span class=\"string\">'Section1'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'an_int'</span>,<span class=\"string\">'15'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'a_bool'</span>,<span class=\"string\">'true'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'a_float'</span>,<span class=\"string\">'3.1415'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>, <span class=\"string\">'baz'</span>, <span class=\"string\">'fun'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'Python'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>,<span class=\"string\">'%(bar)s is %(baz)s !'</span>)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'example.cfg'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> configfile:</div><div class=\"line\">        config.write(configfile)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.RawConfigParser()</div><div class=\"line\">    config.read(<span class=\"string\">'example.cfg'</span>)</div><div class=\"line\">    a_float = config.getfloat(<span class=\"string\">'Section1'</span>, <span class=\"string\">'a_float'</span>)</div><div class=\"line\">    an_int = config.getint(<span class=\"string\">'Section1'</span>, <span class=\"string\">'an_int'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> a_float + an_int</div><div class=\"line\">    <span class=\"keyword\">if</span> config.getboolean(<span class=\"string\">'Section1'</span>, <span class=\"string\">'a_bool'</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.ConfigParser()</div><div class=\"line\">    config.read(<span class=\"string\">'example.cfg'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>, <span class=\"string\">'foo'</span>, <span class=\"number\">0</span>)  <span class=\"comment\">#0 默认，显示定义的字符串</span></div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>,<span class=\"number\">1</span>)    <span class=\"comment\">#设置为1，显示原字符串</span></div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>,<span class=\"number\">0</span>,&#123;<span class=\"string\">'bar'</span>:<span class=\"string\">'Document'</span>,<span class=\"string\">'baz'</span>:<span class=\"string\">'evil'</span>&#125;) <span class=\"comment\">#设置section的对应的options</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read2</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.SafeConfigParser(&#123;<span class=\"string\">'bar'</span>:<span class=\"string\">'Life'</span>,<span class=\"string\">'baz'</span>:<span class=\"string\">'hard'</span>&#125;)</div><div class=\"line\">    config.read(<span class=\"string\">'example.cfg'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>)  <span class=\"comment\">#\"Python is fun!\"</span></div><div class=\"line\">    config.remove_option(<span class=\"string\">'Section1'</span>, <span class=\"string\">'bar'</span>)</div><div class=\"line\">    config.remove_option(<span class=\"string\">'Section1'</span>,<span class=\"string\">'baz'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>)  <span class=\"comment\">#\"Life is hard!\"</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>ConfigParser模块记录常用方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> ConfigParser</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    基本的读取配置文件</div><div class=\"line\">    -read(filename) 直接读取ini文件内容</div><div class=\"line\">    -sections() 得到所有的section，并以列表的形式返回</div><div class=\"line\">    -options(section) 得到该section的所有option</div><div class=\"line\">    -items(section) 得到该section的所有键值对</div><div class=\"line\">    -get(section,option) 得到section中option的值，返回为string类型</div><div class=\"line\">    -getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数</div><div class=\"line\">    基本的写入配置文件</div><div class=\"line\">    -add_section(section) 添加一个新的section</div><div class=\"line\">    -set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    cf = ConfigParser.ConfigParser()</div><div class=\"line\">    cf.read(<span class=\"string\">'db.txt'</span>)</div><div class=\"line\">    sec = cf.sections()                         <span class=\"comment\">#获取所有sections的值</span></div><div class=\"line\">    <span class=\"keyword\">print</span> sec</div><div class=\"line\">    opt = cf.options(<span class=\"string\">'db1'</span>)                     <span class=\"comment\">#获取指定sections的options</span></div><div class=\"line\">    <span class=\"keyword\">print</span> opt</div><div class=\"line\">    val = cf.items(<span class=\"string\">'db1'</span>)                       <span class=\"comment\">#获取指定section的配置信息，为list</span></div><div class=\"line\">    <span class=\"keyword\">print</span> val,type(val)</div><div class=\"line\">    val_str = cf.get(<span class=\"string\">'db1'</span>, <span class=\"string\">'db_host'</span>)          <span class=\"comment\">#获取sections中option的值</span></div><div class=\"line\">    <span class=\"keyword\">print</span> val_str</div><div class=\"line\">    cf.set(<span class=\"string\">'db1'</span>,<span class=\"string\">'db_host'</span>,<span class=\"string\">'192.168.1.55'</span>)      <span class=\"comment\">#设置某个option的值</span></div><div class=\"line\">    cf.write(open(<span class=\"string\">'db.txt'</span>,<span class=\"string\">'w'</span>))</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        cf.add_section(<span class=\"string\">'ttxsgoto'</span>)              <span class=\"comment\">#添加一个section</span></div><div class=\"line\">        cf.set(<span class=\"string\">'ttxsgoto'</span>, <span class=\"string\">'hostname'</span>, <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\">        cf.write(open(<span class=\"string\">'db.txt'</span>,<span class=\"string\">'w'</span>))</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">    cf.remove_option(<span class=\"string\">'ttxsgoto'</span>, <span class=\"string\">'hostname'</span>)    <span class=\"comment\">#删除option</span></div><div class=\"line\">    cf.remove_section(<span class=\"string\">'ttxsgoto'</span>)               <span class=\"comment\">#删除section</span></div><div class=\"line\">    cf.write(open(<span class=\"string\">'db.txt'</span>,<span class=\"string\">'w'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.RawConfigParser()</div><div class=\"line\">    config.add_section(<span class=\"string\">'Section1'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'an_int'</span>,<span class=\"string\">'15'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'a_bool'</span>,<span class=\"string\">'true'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'a_float'</span>,<span class=\"string\">'3.1415'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>, <span class=\"string\">'baz'</span>, <span class=\"string\">'fun'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'Python'</span>)</div><div class=\"line\">    config.set(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>,<span class=\"string\">'%(bar)s is %(baz)s !'</span>)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'example.cfg'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> configfile:</div><div class=\"line\">        config.write(configfile)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.RawConfigParser()</div><div class=\"line\">    config.read(<span class=\"string\">'example.cfg'</span>)</div><div class=\"line\">    a_float = config.getfloat(<span class=\"string\">'Section1'</span>, <span class=\"string\">'a_float'</span>)</div><div class=\"line\">    an_int = config.getint(<span class=\"string\">'Section1'</span>, <span class=\"string\">'an_int'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> a_float + an_int</div><div class=\"line\">    <span class=\"keyword\">if</span> config.getboolean(<span class=\"string\">'Section1'</span>, <span class=\"string\">'a_bool'</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.ConfigParser()</div><div class=\"line\">    config.read(<span class=\"string\">'example.cfg'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>, <span class=\"string\">'foo'</span>, <span class=\"number\">0</span>)  <span class=\"comment\">#0 默认，显示定义的字符串</span></div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>,<span class=\"number\">1</span>)    <span class=\"comment\">#设置为1，显示原字符串</span></div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>,<span class=\"number\">0</span>,&#123;<span class=\"string\">'bar'</span>:<span class=\"string\">'Document'</span>,<span class=\"string\">'baz'</span>:<span class=\"string\">'evil'</span>&#125;) <span class=\"comment\">#设置section的对应的options</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read2</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    config = ConfigParser.SafeConfigParser(&#123;<span class=\"string\">'bar'</span>:<span class=\"string\">'Life'</span>,<span class=\"string\">'baz'</span>:<span class=\"string\">'hard'</span>&#125;)</div><div class=\"line\">    config.read(<span class=\"string\">'example.cfg'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>)  <span class=\"comment\">#\"Python is fun!\"</span></div><div class=\"line\">    config.remove_option(<span class=\"string\">'Section1'</span>, <span class=\"string\">'bar'</span>)</div><div class=\"line\">    config.remove_option(<span class=\"string\">'Section1'</span>,<span class=\"string\">'baz'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> config.get(<span class=\"string\">'Section1'</span>,<span class=\"string\">'foo'</span>)  <span class=\"comment\">#\"Life is hard!\"</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure></p>\n"},{"title":"Scrapy Itemloaders","date":"2017-12-02T14:01:14.000Z","_content":"\n### Item Loaders\nItem Loaders 被设计用来提供一个既弹性又高效简便的构件， 以扩展或重写爬虫或源格式(HTML, XML之类的)等区域的解析规则\n\n\n### 使用item loader填充item\n- add_xpath  # 通过xpath选取数据\n- add_css    # 通过css选取数据\n- add_value  # 通过value得到数据\n\n```python\nitem = ItemLoader(item=Movietop250Item(), response=response)\n \nitem.add_css('num', \"node.css('em::text')\")\nitem.add_css('movie_detail_url', '.hd a::attr(href)')\nitem.add_css('img_url', 'a img::attr(src)')\nitem.add_css('name', 'a img::attr(src)')\nitem.add_css('grade', '.rating_num::text')\nitem.add_css('comment', '.star span::text')\nitem.add_css('info', '.inq::text')\n\nload_item = item.load_item()    # load_item() 方法,返回通过调用 add_xpath(), add_css(), and add_value() 所提取和收集到的数据的Item.\nyield load_item\n```\n\n### 输入/输出处理器\n- Item Loader每个字段中都包含一个输入处理器和一个输出处理器\n- input_processor输入处理器：收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内(但未分配给该Item)\n- output_processor输出处理器：收集所有的数据后, 调用 ItemLoader.load_item()得到Item 对象。在这步中先调用输出处理器来处理之前收集到的数据，然后再存入Item中。输出处理器的结果是被分配到Item的最终值\n\n### Items Loaders\nItem Loaders 的声明类似于Items，以class的语法来声明：\n```python\nfrom scrapy.loader import ItemLoader\nfrom scrapy.loader.processors import TakeFirst, MapCompose, Join\n  \nclass ProductLoader(ItemLoader):\n    default_output_processor = TakeFirst()\n    name_in = MapCompose(unicode.title)\n    name_out = Join()\n    price_in = MapCompose(unicode.strip)\n \n    # ...\n```\ninput processors 以_in为后缀来声明，output processors 以_out 为后缀来声明。也可以用ItemLoader.default_input_processor 和ItemLoader.default_output_processor 属性来声明默认的 input/output processors\n\n### Input and Output Processors\n\n在定义Item的时候声明输入输出处理器\n```python\nimport scrapy\nfrom scrapy.loader.processors import Join, MapCompose, TakeFirst\nfrom w3lib.html import remove_tags\n \ndef filter_price(value):\n    \"\"\"定义方法来处理值\"\"\"\n    if value.isdigit():\n        return value\n \nclass Product(scrapy.Item):\n    name = scrapy.Field(\n        input_processor=MapCompose(remove_tags),\n        output_processor=Join(),\n    )\n    price = scrapy.Field(\n        input_processor=MapCompose(remove_tags, filter_price),\n        output_processor=TakeFirst(),\n    )\n```\ninput and output processors方式的优先级排序如下:\n- 在Item Loader 中声明的 field-specific 属性: field_in and field_out (most precedence)\n- Item中的字段元数据(input_processor and output_processor key)\n- Item Loader 默认处理器: ItemLoader.default_input_processor() and ItemLoader.default_output_processor() (least precedence)\n\n### 内置的处理器\n- Identity 最简单的处理器，不进行任何处理，直接返回原来的数据,无参数\n```python\n>>> from scrapy.loader.processors import Identity\n>>> proc = Identity()\n>>> proc(['one', 'two', 'three'])\n['one', 'two', 'three']\n```\n- TakeFirst 返回第一个非空(non-null/non-empty)值，常用于单值字段的输出处理器,无参数\n```python\n>>> from scrapy.loader.processors import TakeFirst\n>>> proc = TakeFirst()\n>>> proc(['', 'one', 'two', 'three'])\n'one'\n```\n- Join(separator=u' ')返回用分隔符连接后的值,分隔符默认为空格 ,默认为空类似于u''.join\n```python\n>>> from scrapy.loader.processors import Join\n>>> proc = Join()\n>>> proc(['one', 'two', 'three'])\nu'one two three'\n>>> proc = Join('<br>')\n>>> proc(['one', 'two', 'three'])\nu'one<br>two<br>three'\n```\n- Compose(*functions, **default_loader_context)给定多个函数组合构造处理器,每个输入值被传递到第一个函数，然后其输出再传递到第二个函数，直到最后一个函数返回整个处理器的输出\n默认情况下，当遇到None值的时候停止处理。可以通过传递参数stop_on_none=False改变这种行为,每个函数可以选择接收一个loader_context参数\n```python\n>>> from scrapy.loader.processors import Compose\n>>> proc = Compose(lambda v: v[0], str.upper)\n>>> proc(['hello', 'world'])\n'HELLO'\n```\n- MapCompose(*functions, **default_loader_context)\n\n与Compose处理器类似，区别在于各个函数结果在内部传递的方式\n\n    输入值是被迭代的处理的，每一个元素被单独传入第一个函数进行处理。处理的结果被|连接起来(concatenate)形成一个新的迭代器，并被传入第二个函数，以此类推，直到最后一个函数。最后一个函数的输出被连接起来形成处理器的输出。\n    每个函数能返回一个值或者一个值列表，也能返回None(会被下一个函数所忽略)\n    这个处理器提供了方便的方式来组合多个处理单值的函数。因此它常用与输入处理器，因为用extract()函数提取出来的值是一个unicode strings列表。\n```python\n>>> def filter_world(x):\n...     return None if x == 'world' else x\n...\n>>> from scrapy.loader.processors import MapCompose\n>>> proc = MapCompose(filter_world, unicode.upper)\n>>> proc([u'hello', u'world', u'this', u'is', u'scrapy'])\n[u'HELLO, u'THIS', u'IS', u'SCRAPY']\n```\n","source":"_posts/Scrapy-itemloaders.md","raw":"---\ntitle: Scrapy Itemloaders\ndate: 2017-12-02 22:01:14\ntags:\n  - Itemloaders\ncategories:\n  - Scrapy\n---\n\n### Item Loaders\nItem Loaders 被设计用来提供一个既弹性又高效简便的构件， 以扩展或重写爬虫或源格式(HTML, XML之类的)等区域的解析规则\n\n\n### 使用item loader填充item\n- add_xpath  # 通过xpath选取数据\n- add_css    # 通过css选取数据\n- add_value  # 通过value得到数据\n\n```python\nitem = ItemLoader(item=Movietop250Item(), response=response)\n \nitem.add_css('num', \"node.css('em::text')\")\nitem.add_css('movie_detail_url', '.hd a::attr(href)')\nitem.add_css('img_url', 'a img::attr(src)')\nitem.add_css('name', 'a img::attr(src)')\nitem.add_css('grade', '.rating_num::text')\nitem.add_css('comment', '.star span::text')\nitem.add_css('info', '.inq::text')\n\nload_item = item.load_item()    # load_item() 方法,返回通过调用 add_xpath(), add_css(), and add_value() 所提取和收集到的数据的Item.\nyield load_item\n```\n\n### 输入/输出处理器\n- Item Loader每个字段中都包含一个输入处理器和一个输出处理器\n- input_processor输入处理器：收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内(但未分配给该Item)\n- output_processor输出处理器：收集所有的数据后, 调用 ItemLoader.load_item()得到Item 对象。在这步中先调用输出处理器来处理之前收集到的数据，然后再存入Item中。输出处理器的结果是被分配到Item的最终值\n\n### Items Loaders\nItem Loaders 的声明类似于Items，以class的语法来声明：\n```python\nfrom scrapy.loader import ItemLoader\nfrom scrapy.loader.processors import TakeFirst, MapCompose, Join\n  \nclass ProductLoader(ItemLoader):\n    default_output_processor = TakeFirst()\n    name_in = MapCompose(unicode.title)\n    name_out = Join()\n    price_in = MapCompose(unicode.strip)\n \n    # ...\n```\ninput processors 以_in为后缀来声明，output processors 以_out 为后缀来声明。也可以用ItemLoader.default_input_processor 和ItemLoader.default_output_processor 属性来声明默认的 input/output processors\n\n### Input and Output Processors\n\n在定义Item的时候声明输入输出处理器\n```python\nimport scrapy\nfrom scrapy.loader.processors import Join, MapCompose, TakeFirst\nfrom w3lib.html import remove_tags\n \ndef filter_price(value):\n    \"\"\"定义方法来处理值\"\"\"\n    if value.isdigit():\n        return value\n \nclass Product(scrapy.Item):\n    name = scrapy.Field(\n        input_processor=MapCompose(remove_tags),\n        output_processor=Join(),\n    )\n    price = scrapy.Field(\n        input_processor=MapCompose(remove_tags, filter_price),\n        output_processor=TakeFirst(),\n    )\n```\ninput and output processors方式的优先级排序如下:\n- 在Item Loader 中声明的 field-specific 属性: field_in and field_out (most precedence)\n- Item中的字段元数据(input_processor and output_processor key)\n- Item Loader 默认处理器: ItemLoader.default_input_processor() and ItemLoader.default_output_processor() (least precedence)\n\n### 内置的处理器\n- Identity 最简单的处理器，不进行任何处理，直接返回原来的数据,无参数\n```python\n>>> from scrapy.loader.processors import Identity\n>>> proc = Identity()\n>>> proc(['one', 'two', 'three'])\n['one', 'two', 'three']\n```\n- TakeFirst 返回第一个非空(non-null/non-empty)值，常用于单值字段的输出处理器,无参数\n```python\n>>> from scrapy.loader.processors import TakeFirst\n>>> proc = TakeFirst()\n>>> proc(['', 'one', 'two', 'three'])\n'one'\n```\n- Join(separator=u' ')返回用分隔符连接后的值,分隔符默认为空格 ,默认为空类似于u''.join\n```python\n>>> from scrapy.loader.processors import Join\n>>> proc = Join()\n>>> proc(['one', 'two', 'three'])\nu'one two three'\n>>> proc = Join('<br>')\n>>> proc(['one', 'two', 'three'])\nu'one<br>two<br>three'\n```\n- Compose(*functions, **default_loader_context)给定多个函数组合构造处理器,每个输入值被传递到第一个函数，然后其输出再传递到第二个函数，直到最后一个函数返回整个处理器的输出\n默认情况下，当遇到None值的时候停止处理。可以通过传递参数stop_on_none=False改变这种行为,每个函数可以选择接收一个loader_context参数\n```python\n>>> from scrapy.loader.processors import Compose\n>>> proc = Compose(lambda v: v[0], str.upper)\n>>> proc(['hello', 'world'])\n'HELLO'\n```\n- MapCompose(*functions, **default_loader_context)\n\n与Compose处理器类似，区别在于各个函数结果在内部传递的方式\n\n    输入值是被迭代的处理的，每一个元素被单独传入第一个函数进行处理。处理的结果被|连接起来(concatenate)形成一个新的迭代器，并被传入第二个函数，以此类推，直到最后一个函数。最后一个函数的输出被连接起来形成处理器的输出。\n    每个函数能返回一个值或者一个值列表，也能返回None(会被下一个函数所忽略)\n    这个处理器提供了方便的方式来组合多个处理单值的函数。因此它常用与输入处理器，因为用extract()函数提取出来的值是一个unicode strings列表。\n```python\n>>> def filter_world(x):\n...     return None if x == 'world' else x\n...\n>>> from scrapy.loader.processors import MapCompose\n>>> proc = MapCompose(filter_world, unicode.upper)\n>>> proc([u'hello', u'world', u'this', u'is', u'scrapy'])\n[u'HELLO, u'THIS', u'IS', u'SCRAPY']\n```\n","slug":"Scrapy-itemloaders","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5u80007ct8uw6hsyfiw","content":"<h3 id=\"Item-Loaders\"><a href=\"#Item-Loaders\" class=\"headerlink\" title=\"Item Loaders\"></a>Item Loaders</h3><p>Item Loaders 被设计用来提供一个既弹性又高效简便的构件， 以扩展或重写爬虫或源格式(HTML, XML之类的)等区域的解析规则</p>\n<h3 id=\"使用item-loader填充item\"><a href=\"#使用item-loader填充item\" class=\"headerlink\" title=\"使用item loader填充item\"></a>使用item loader填充item</h3><ul>\n<li>add_xpath  # 通过xpath选取数据</li>\n<li>add_css    # 通过css选取数据</li>\n<li>add_value  # 通过value得到数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">item = ItemLoader(item=Movietop250Item(), response=response)</div><div class=\"line\"> </div><div class=\"line\">item.add_css(<span class=\"string\">'num'</span>, <span class=\"string\">\"node.css('em::text')\"</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'movie_detail_url'</span>, <span class=\"string\">'.hd a::attr(href)'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'img_url'</span>, <span class=\"string\">'a img::attr(src)'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'name'</span>, <span class=\"string\">'a img::attr(src)'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'grade'</span>, <span class=\"string\">'.rating_num::text'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'comment'</span>, <span class=\"string\">'.star span::text'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'info'</span>, <span class=\"string\">'.inq::text'</span>)</div><div class=\"line\"></div><div class=\"line\">load_item = item.load_item()    <span class=\"comment\"># load_item() 方法,返回通过调用 add_xpath(), add_css(), and add_value() 所提取和收集到的数据的Item.</span></div><div class=\"line\"><span class=\"keyword\">yield</span> load_item</div></pre></td></tr></table></figure>\n<h3 id=\"输入-输出处理器\"><a href=\"#输入-输出处理器\" class=\"headerlink\" title=\"输入/输出处理器\"></a>输入/输出处理器</h3><ul>\n<li>Item Loader每个字段中都包含一个输入处理器和一个输出处理器</li>\n<li>input_processor输入处理器：收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内(但未分配给该Item)</li>\n<li>output_processor输出处理器：收集所有的数据后, 调用 ItemLoader.load_item()得到Item 对象。在这步中先调用输出处理器来处理之前收集到的数据，然后再存入Item中。输出处理器的结果是被分配到Item的最终值</li>\n</ul>\n<h3 id=\"Items-Loaders\"><a href=\"#Items-Loaders\" class=\"headerlink\" title=\"Items Loaders\"></a>Items Loaders</h3><p>Item Loaders 的声明类似于Items，以class的语法来声明：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader <span class=\"keyword\">import</span> ItemLoader</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> TakeFirst, MapCompose, Join</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductLoader</span><span class=\"params\">(ItemLoader)</span>:</span></div><div class=\"line\">    default_output_processor = TakeFirst()</div><div class=\"line\">    name_in = MapCompose(unicode.title)</div><div class=\"line\">    name_out = Join()</div><div class=\"line\">    price_in = MapCompose(unicode.strip)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># ...</span></div></pre></td></tr></table></figure></p>\n<p>input processors 以_in为后缀来声明，output processors 以_out 为后缀来声明。也可以用ItemLoader.default_input_processor 和ItemLoader.default_output_processor 属性来声明默认的 input/output processors</p>\n<h3 id=\"Input-and-Output-Processors\"><a href=\"#Input-and-Output-Processors\" class=\"headerlink\" title=\"Input and Output Processors\"></a>Input and Output Processors</h3><p>在定义Item的时候声明输入输出处理器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Join, MapCompose, TakeFirst</div><div class=\"line\"><span class=\"keyword\">from</span> w3lib.html <span class=\"keyword\">import</span> remove_tags</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter_price</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"定义方法来处理值\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">if</span> value.isdigit():</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\">    name = scrapy.Field(</div><div class=\"line\">        input_processor=MapCompose(remove_tags),</div><div class=\"line\">        output_processor=Join(),</div><div class=\"line\">    )</div><div class=\"line\">    price = scrapy.Field(</div><div class=\"line\">        input_processor=MapCompose(remove_tags, filter_price),</div><div class=\"line\">        output_processor=TakeFirst(),</div><div class=\"line\">    )</div></pre></td></tr></table></figure></p>\n<p>input and output processors方式的优先级排序如下:</p>\n<ul>\n<li>在Item Loader 中声明的 field-specific 属性: field_in and field_out (most precedence)</li>\n<li>Item中的字段元数据(input_processor and output_processor key)</li>\n<li>Item Loader 默认处理器: ItemLoader.default_input_processor() and ItemLoader.default_output_processor() (least precedence)</li>\n</ul>\n<h3 id=\"内置的处理器\"><a href=\"#内置的处理器\" class=\"headerlink\" title=\"内置的处理器\"></a>内置的处理器</h3><ul>\n<li><p>Identity 最简单的处理器，不进行任何处理，直接返回原来的数据,无参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Identity</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Identity()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\">[<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>TakeFirst 返回第一个非空(non-null/non-empty)值，常用于单值字段的输出处理器,无参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> TakeFirst</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = TakeFirst()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">''</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\"><span class=\"string\">'one'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Join(separator=u’ ‘)返回用分隔符连接后的值,分隔符默认为空格 ,默认为空类似于u’’.join</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Join</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Join()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\"><span class=\"string\">u'one two three'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Join(<span class=\"string\">'&lt;br&gt;'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\"><span class=\"string\">u'one&lt;br&gt;two&lt;br&gt;three'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Compose(<em>functions, *</em>default_loader_context)给定多个函数组合构造处理器,每个输入值被传递到第一个函数，然后其输出再传递到第二个函数，直到最后一个函数返回整个处理器的输出<br>默认情况下，当遇到None值的时候停止处理。可以通过传递参数stop_on_none=False改变这种行为,每个函数可以选择接收一个loader_context参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Compose</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Compose(<span class=\"keyword\">lambda</span> v: v[<span class=\"number\">0</span>], str.upper)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>])</div><div class=\"line\"><span class=\"string\">'HELLO'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>MapCompose(<em>functions, *</em>default_loader_context)</p>\n</li>\n</ul>\n<p>与Compose处理器类似，区别在于各个函数结果在内部传递的方式</p>\n<pre><code>输入值是被迭代的处理的，每一个元素被单独传入第一个函数进行处理。处理的结果被|连接起来(concatenate)形成一个新的迭代器，并被传入第二个函数，以此类推，直到最后一个函数。最后一个函数的输出被连接起来形成处理器的输出。\n每个函数能返回一个值或者一个值列表，也能返回None(会被下一个函数所忽略)\n这个处理器提供了方便的方式来组合多个处理单值的函数。因此它常用与输入处理器，因为用extract()函数提取出来的值是一个unicode strings列表。\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter_world</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span> <span class=\"keyword\">if</span> x == <span class=\"string\">'world'</span> <span class=\"keyword\">else</span> x</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> MapCompose</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = MapCompose(filter_world, unicode.upper)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">u'hello'</span>, <span class=\"string\">u'world'</span>, <span class=\"string\">u'this'</span>, <span class=\"string\">u'is'</span>, <span class=\"string\">u'scrapy'</span>])</div><div class=\"line\">[<span class=\"string\">u'HELLO, u'</span>THIS<span class=\"string\">', u'</span>IS<span class=\"string\">', u'</span>SCRAPY<span class=\"string\">']</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"Item-Loaders\"><a href=\"#Item-Loaders\" class=\"headerlink\" title=\"Item Loaders\"></a>Item Loaders</h3><p>Item Loaders 被设计用来提供一个既弹性又高效简便的构件， 以扩展或重写爬虫或源格式(HTML, XML之类的)等区域的解析规则</p>\n<h3 id=\"使用item-loader填充item\"><a href=\"#使用item-loader填充item\" class=\"headerlink\" title=\"使用item loader填充item\"></a>使用item loader填充item</h3><ul>\n<li>add_xpath  # 通过xpath选取数据</li>\n<li>add_css    # 通过css选取数据</li>\n<li>add_value  # 通过value得到数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">item = ItemLoader(item=Movietop250Item(), response=response)</div><div class=\"line\"> </div><div class=\"line\">item.add_css(<span class=\"string\">'num'</span>, <span class=\"string\">\"node.css('em::text')\"</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'movie_detail_url'</span>, <span class=\"string\">'.hd a::attr(href)'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'img_url'</span>, <span class=\"string\">'a img::attr(src)'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'name'</span>, <span class=\"string\">'a img::attr(src)'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'grade'</span>, <span class=\"string\">'.rating_num::text'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'comment'</span>, <span class=\"string\">'.star span::text'</span>)</div><div class=\"line\">item.add_css(<span class=\"string\">'info'</span>, <span class=\"string\">'.inq::text'</span>)</div><div class=\"line\"></div><div class=\"line\">load_item = item.load_item()    <span class=\"comment\"># load_item() 方法,返回通过调用 add_xpath(), add_css(), and add_value() 所提取和收集到的数据的Item.</span></div><div class=\"line\"><span class=\"keyword\">yield</span> load_item</div></pre></td></tr></table></figure>\n<h3 id=\"输入-输出处理器\"><a href=\"#输入-输出处理器\" class=\"headerlink\" title=\"输入/输出处理器\"></a>输入/输出处理器</h3><ul>\n<li>Item Loader每个字段中都包含一个输入处理器和一个输出处理器</li>\n<li>input_processor输入处理器：收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内(但未分配给该Item)</li>\n<li>output_processor输出处理器：收集所有的数据后, 调用 ItemLoader.load_item()得到Item 对象。在这步中先调用输出处理器来处理之前收集到的数据，然后再存入Item中。输出处理器的结果是被分配到Item的最终值</li>\n</ul>\n<h3 id=\"Items-Loaders\"><a href=\"#Items-Loaders\" class=\"headerlink\" title=\"Items Loaders\"></a>Items Loaders</h3><p>Item Loaders 的声明类似于Items，以class的语法来声明：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader <span class=\"keyword\">import</span> ItemLoader</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> TakeFirst, MapCompose, Join</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductLoader</span><span class=\"params\">(ItemLoader)</span>:</span></div><div class=\"line\">    default_output_processor = TakeFirst()</div><div class=\"line\">    name_in = MapCompose(unicode.title)</div><div class=\"line\">    name_out = Join()</div><div class=\"line\">    price_in = MapCompose(unicode.strip)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># ...</span></div></pre></td></tr></table></figure></p>\n<p>input processors 以_in为后缀来声明，output processors 以_out 为后缀来声明。也可以用ItemLoader.default_input_processor 和ItemLoader.default_output_processor 属性来声明默认的 input/output processors</p>\n<h3 id=\"Input-and-Output-Processors\"><a href=\"#Input-and-Output-Processors\" class=\"headerlink\" title=\"Input and Output Processors\"></a>Input and Output Processors</h3><p>在定义Item的时候声明输入输出处理器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Join, MapCompose, TakeFirst</div><div class=\"line\"><span class=\"keyword\">from</span> w3lib.html <span class=\"keyword\">import</span> remove_tags</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter_price</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"定义方法来处理值\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">if</span> value.isdigit():</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\">    name = scrapy.Field(</div><div class=\"line\">        input_processor=MapCompose(remove_tags),</div><div class=\"line\">        output_processor=Join(),</div><div class=\"line\">    )</div><div class=\"line\">    price = scrapy.Field(</div><div class=\"line\">        input_processor=MapCompose(remove_tags, filter_price),</div><div class=\"line\">        output_processor=TakeFirst(),</div><div class=\"line\">    )</div></pre></td></tr></table></figure></p>\n<p>input and output processors方式的优先级排序如下:</p>\n<ul>\n<li>在Item Loader 中声明的 field-specific 属性: field_in and field_out (most precedence)</li>\n<li>Item中的字段元数据(input_processor and output_processor key)</li>\n<li>Item Loader 默认处理器: ItemLoader.default_input_processor() and ItemLoader.default_output_processor() (least precedence)</li>\n</ul>\n<h3 id=\"内置的处理器\"><a href=\"#内置的处理器\" class=\"headerlink\" title=\"内置的处理器\"></a>内置的处理器</h3><ul>\n<li><p>Identity 最简单的处理器，不进行任何处理，直接返回原来的数据,无参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Identity</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Identity()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\">[<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>TakeFirst 返回第一个非空(non-null/non-empty)值，常用于单值字段的输出处理器,无参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> TakeFirst</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = TakeFirst()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">''</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\"><span class=\"string\">'one'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Join(separator=u’ ‘)返回用分隔符连接后的值,分隔符默认为空格 ,默认为空类似于u’’.join</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Join</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Join()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\"><span class=\"string\">u'one two three'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Join(<span class=\"string\">'&lt;br&gt;'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>])</div><div class=\"line\"><span class=\"string\">u'one&lt;br&gt;two&lt;br&gt;three'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Compose(<em>functions, *</em>default_loader_context)给定多个函数组合构造处理器,每个输入值被传递到第一个函数，然后其输出再传递到第二个函数，直到最后一个函数返回整个处理器的输出<br>默认情况下，当遇到None值的时候停止处理。可以通过传递参数stop_on_none=False改变这种行为,每个函数可以选择接收一个loader_context参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> Compose</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = Compose(<span class=\"keyword\">lambda</span> v: v[<span class=\"number\">0</span>], str.upper)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>])</div><div class=\"line\"><span class=\"string\">'HELLO'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>MapCompose(<em>functions, *</em>default_loader_context)</p>\n</li>\n</ul>\n<p>与Compose处理器类似，区别在于各个函数结果在内部传递的方式</p>\n<pre><code>输入值是被迭代的处理的，每一个元素被单独传入第一个函数进行处理。处理的结果被|连接起来(concatenate)形成一个新的迭代器，并被传入第二个函数，以此类推，直到最后一个函数。最后一个函数的输出被连接起来形成处理器的输出。\n每个函数能返回一个值或者一个值列表，也能返回None(会被下一个函数所忽略)\n这个处理器提供了方便的方式来组合多个处理单值的函数。因此它常用与输入处理器，因为用extract()函数提取出来的值是一个unicode strings列表。\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter_world</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span> <span class=\"keyword\">if</span> x == <span class=\"string\">'world'</span> <span class=\"keyword\">else</span> x</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> MapCompose</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc = MapCompose(filter_world, unicode.upper)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>proc([<span class=\"string\">u'hello'</span>, <span class=\"string\">u'world'</span>, <span class=\"string\">u'this'</span>, <span class=\"string\">u'is'</span>, <span class=\"string\">u'scrapy'</span>])</div><div class=\"line\">[<span class=\"string\">u'HELLO, u'</span>THIS<span class=\"string\">', u'</span>IS<span class=\"string\">', u'</span>SCRAPY<span class=\"string\">']</span></div></pre></td></tr></table></figure>\n"},{"title":"DRF Filters","date":"2017-08-11T12:10:55.000Z","_content":"DRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求\n\n#### 全局filter\n```\npip install django-filter\n```\n在 settings 里指定应用到全局的 filter\n```\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',)\n}\n```\n#### filter定义字段\nfilters.py\n```python\nfrom django_filters import FilterSet\n \nclass UserRecordFilter(FilterSet):\n    class Meta:\n        model = UserRecord\n        fields = ['source', 'source_id', 'url',]\n        fields = {\n        'from_channel':['gt', 'lt', 'in', 'exact', 'range', 'isnull', 'icontains']\n            # 大于, 小于，多个，等于, 范围, 是否为空bool,模糊查询\n        }\n        exclude = ['from_channel', 'created_time'] # 排除字段\n        together = ['from_channel', 'resume_id'] # 字段并集，同时满足条件\n```\nviews.py\n```python\nclass UserRecordViewSet(ModelViewSet):\n    serializer_class = UserRecordSerializer\n    queryset = UserRecord.objects.all()\n    filter_class = UserRecordFilter\n    filter_backends = (DjangoFilterBackend,)\n\n# 请求url\n# http://127.0.0.1:8888/api/v2/user_records?source_id=3&url=url\n```\n\n#### viewset 的 filter\n为 viewset 分别指定 filter，方法就是在定义 viewset 的时候定义一个名为 filter_backend 的类变量：\n```python\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer = UserSerializer\n    filter_backends = (filters.DjangoFilterBackend,)\n```\n#### 默认的 filter\n- SearchFilter\n```python\nfilter_backends = (filters.SearchFilter,)\nsearch_fields = ('username', 'email')  # 指定搜索的域\n \n# 请求url\n# http://127.0.0.1:8888/api/v2/user_records?search=username\n```\n- OrderingFilter\n```python\nfilter_backends = (filters.OrderingFilter,)\nordering_fields = ('created_time')\n \n# 请求url\n# http://127.0.0.1:8888/api/v2/user_records?ordering=-created_time\n```\n#### 自定义 filter\n自定义filter，只需要定义 filter_queryset(self, request, queryset, view) 方法，并返回一个queryset即可\n```python\nclass NodenameFilter(filters.BaseFilterBackend):\n\n    \"\"\"\n    根据 nodename 来筛选[nodename]\n    \"\"\"\n \n    def filter_queryset(self, request, queryset, view):\n        nodename = request.QUERY_PARAMS.get('nodename')\n        if nodename:\n            return queryset.filter(nodename=nodename)\n        else:\n            return queryset\n```\n\n#### 参考链接\nhttps://django-filter.readthedocs.io/en/develop/index.html#\n","source":"_posts/Filters.md","raw":"---\ntitle: DRF Filters\ndate: 2017-08-11 20:10:55\ntags:\n  - Filters\ncategories:\n  - DRF\n---\nDRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求\n\n#### 全局filter\n```\npip install django-filter\n```\n在 settings 里指定应用到全局的 filter\n```\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',)\n}\n```\n#### filter定义字段\nfilters.py\n```python\nfrom django_filters import FilterSet\n \nclass UserRecordFilter(FilterSet):\n    class Meta:\n        model = UserRecord\n        fields = ['source', 'source_id', 'url',]\n        fields = {\n        'from_channel':['gt', 'lt', 'in', 'exact', 'range', 'isnull', 'icontains']\n            # 大于, 小于，多个，等于, 范围, 是否为空bool,模糊查询\n        }\n        exclude = ['from_channel', 'created_time'] # 排除字段\n        together = ['from_channel', 'resume_id'] # 字段并集，同时满足条件\n```\nviews.py\n```python\nclass UserRecordViewSet(ModelViewSet):\n    serializer_class = UserRecordSerializer\n    queryset = UserRecord.objects.all()\n    filter_class = UserRecordFilter\n    filter_backends = (DjangoFilterBackend,)\n\n# 请求url\n# http://127.0.0.1:8888/api/v2/user_records?source_id=3&url=url\n```\n\n#### viewset 的 filter\n为 viewset 分别指定 filter，方法就是在定义 viewset 的时候定义一个名为 filter_backend 的类变量：\n```python\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer = UserSerializer\n    filter_backends = (filters.DjangoFilterBackend,)\n```\n#### 默认的 filter\n- SearchFilter\n```python\nfilter_backends = (filters.SearchFilter,)\nsearch_fields = ('username', 'email')  # 指定搜索的域\n \n# 请求url\n# http://127.0.0.1:8888/api/v2/user_records?search=username\n```\n- OrderingFilter\n```python\nfilter_backends = (filters.OrderingFilter,)\nordering_fields = ('created_time')\n \n# 请求url\n# http://127.0.0.1:8888/api/v2/user_records?ordering=-created_time\n```\n#### 自定义 filter\n自定义filter，只需要定义 filter_queryset(self, request, queryset, view) 方法，并返回一个queryset即可\n```python\nclass NodenameFilter(filters.BaseFilterBackend):\n\n    \"\"\"\n    根据 nodename 来筛选[nodename]\n    \"\"\"\n \n    def filter_queryset(self, request, queryset, view):\n        nodename = request.QUERY_PARAMS.get('nodename')\n        if nodename:\n            return queryset.filter(nodename=nodename)\n        else:\n            return queryset\n```\n\n#### 参考链接\nhttps://django-filter.readthedocs.io/en/develop/index.html#\n","slug":"Filters","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5ua0008ct8u4irucbzq","content":"<p>DRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求</p>\n<h4 id=\"全局filter\"><a href=\"#全局filter\" class=\"headerlink\" title=\"全局filter\"></a>全局filter</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install django-filter</div></pre></td></tr></table></figure>\n<p>在 settings 里指定应用到全局的 filter<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">    &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;rest_framework.filters.DjangoFilterBackend&apos;,)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"filter定义字段\"><a href=\"#filter定义字段\" class=\"headerlink\" title=\"filter定义字段\"></a>filter定义字段</h4><p>filters.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django_filters <span class=\"keyword\">import</span> FilterSet</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRecordFilter</span><span class=\"params\">(FilterSet)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = UserRecord</div><div class=\"line\">        fields = [<span class=\"string\">'source'</span>, <span class=\"string\">'source_id'</span>, <span class=\"string\">'url'</span>,]</div><div class=\"line\">        fields = &#123;</div><div class=\"line\">        <span class=\"string\">'from_channel'</span>:[<span class=\"string\">'gt'</span>, <span class=\"string\">'lt'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'exact'</span>, <span class=\"string\">'range'</span>, <span class=\"string\">'isnull'</span>, <span class=\"string\">'icontains'</span>]</div><div class=\"line\">            <span class=\"comment\"># 大于, 小于，多个，等于, 范围, 是否为空bool,模糊查询</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        exclude = [<span class=\"string\">'from_channel'</span>, <span class=\"string\">'created_time'</span>] <span class=\"comment\"># 排除字段</span></div><div class=\"line\">        together = [<span class=\"string\">'from_channel'</span>, <span class=\"string\">'resume_id'</span>] <span class=\"comment\"># 字段并集，同时满足条件</span></div></pre></td></tr></table></figure></p>\n<p>views.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRecordViewSet</span><span class=\"params\">(ModelViewSet)</span>:</span></div><div class=\"line\">    serializer_class = UserRecordSerializer</div><div class=\"line\">    queryset = UserRecord.objects.all()</div><div class=\"line\">    filter_class = UserRecordFilter</div><div class=\"line\">    filter_backends = (DjangoFilterBackend,)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 请求url</span></div><div class=\"line\"><span class=\"comment\"># http://127.0.0.1:8888/api/v2/user_records?source_id=3&amp;url=url</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"viewset-的-filter\"><a href=\"#viewset-的-filter\" class=\"headerlink\" title=\"viewset 的 filter\"></a>viewset 的 filter</h4><p>为 viewset 分别指定 filter，方法就是在定义 viewset 的时候定义一个名为 filter_backend 的类变量：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserListView</span><span class=\"params\">(generics.ListAPIView)</span>:</span></div><div class=\"line\">    queryset = User.objects.all()</div><div class=\"line\">    serializer = UserSerializer</div><div class=\"line\">    filter_backends = (filters.DjangoFilterBackend,)</div></pre></td></tr></table></figure></p>\n<h4 id=\"默认的-filter\"><a href=\"#默认的-filter\" class=\"headerlink\" title=\"默认的 filter\"></a>默认的 filter</h4><ul>\n<li><p>SearchFilter</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">filter_backends = (filters.SearchFilter,)</div><div class=\"line\">search_fields = (<span class=\"string\">'username'</span>, <span class=\"string\">'email'</span>)  <span class=\"comment\"># 指定搜索的域</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 请求url</span></div><div class=\"line\"><span class=\"comment\"># http://127.0.0.1:8888/api/v2/user_records?search=username</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>OrderingFilter</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">filter_backends = (filters.OrderingFilter,)</div><div class=\"line\">ordering_fields = (<span class=\"string\">'created_time'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 请求url</span></div><div class=\"line\"><span class=\"comment\"># http://127.0.0.1:8888/api/v2/user_records?ordering=-created_time</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"自定义-filter\"><a href=\"#自定义-filter\" class=\"headerlink\" title=\"自定义 filter\"></a>自定义 filter</h4><p>自定义filter，只需要定义 filter_queryset(self, request, queryset, view) 方法，并返回一个queryset即可<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodenameFilter</span><span class=\"params\">(filters.BaseFilterBackend)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    根据 nodename 来筛选[nodename]</div><div class=\"line\">    \"\"\"</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter_queryset</span><span class=\"params\">(self, request, queryset, view)</span>:</span></div><div class=\"line\">        nodename = request.QUERY_PARAMS.get(<span class=\"string\">'nodename'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> nodename:</div><div class=\"line\">            <span class=\"keyword\">return</span> queryset.filter(nodename=nodename)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> queryset</div></pre></td></tr></table></figure></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://django-filter.readthedocs.io/en/develop/index.html#\" target=\"_blank\" rel=\"external\">https://django-filter.readthedocs.io/en/develop/index.html#</a></p>\n","excerpt":"","more":"<p>DRF通过 url参数 来对数据进行一些排序或过滤的操作,rest-framwork提供了filters来满足这一需求</p>\n<h4 id=\"全局filter\"><a href=\"#全局filter\" class=\"headerlink\" title=\"全局filter\"></a>全局filter</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install django-filter</div></pre></td></tr></table></figure>\n<p>在 settings 里指定应用到全局的 filter<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">    &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;rest_framework.filters.DjangoFilterBackend&apos;,)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"filter定义字段\"><a href=\"#filter定义字段\" class=\"headerlink\" title=\"filter定义字段\"></a>filter定义字段</h4><p>filters.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django_filters <span class=\"keyword\">import</span> FilterSet</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRecordFilter</span><span class=\"params\">(FilterSet)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = UserRecord</div><div class=\"line\">        fields = [<span class=\"string\">'source'</span>, <span class=\"string\">'source_id'</span>, <span class=\"string\">'url'</span>,]</div><div class=\"line\">        fields = &#123;</div><div class=\"line\">        <span class=\"string\">'from_channel'</span>:[<span class=\"string\">'gt'</span>, <span class=\"string\">'lt'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'exact'</span>, <span class=\"string\">'range'</span>, <span class=\"string\">'isnull'</span>, <span class=\"string\">'icontains'</span>]</div><div class=\"line\">            <span class=\"comment\"># 大于, 小于，多个，等于, 范围, 是否为空bool,模糊查询</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        exclude = [<span class=\"string\">'from_channel'</span>, <span class=\"string\">'created_time'</span>] <span class=\"comment\"># 排除字段</span></div><div class=\"line\">        together = [<span class=\"string\">'from_channel'</span>, <span class=\"string\">'resume_id'</span>] <span class=\"comment\"># 字段并集，同时满足条件</span></div></pre></td></tr></table></figure></p>\n<p>views.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRecordViewSet</span><span class=\"params\">(ModelViewSet)</span>:</span></div><div class=\"line\">    serializer_class = UserRecordSerializer</div><div class=\"line\">    queryset = UserRecord.objects.all()</div><div class=\"line\">    filter_class = UserRecordFilter</div><div class=\"line\">    filter_backends = (DjangoFilterBackend,)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 请求url</span></div><div class=\"line\"><span class=\"comment\"># http://127.0.0.1:8888/api/v2/user_records?source_id=3&amp;url=url</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"viewset-的-filter\"><a href=\"#viewset-的-filter\" class=\"headerlink\" title=\"viewset 的 filter\"></a>viewset 的 filter</h4><p>为 viewset 分别指定 filter，方法就是在定义 viewset 的时候定义一个名为 filter_backend 的类变量：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserListView</span><span class=\"params\">(generics.ListAPIView)</span>:</span></div><div class=\"line\">    queryset = User.objects.all()</div><div class=\"line\">    serializer = UserSerializer</div><div class=\"line\">    filter_backends = (filters.DjangoFilterBackend,)</div></pre></td></tr></table></figure></p>\n<h4 id=\"默认的-filter\"><a href=\"#默认的-filter\" class=\"headerlink\" title=\"默认的 filter\"></a>默认的 filter</h4><ul>\n<li><p>SearchFilter</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">filter_backends = (filters.SearchFilter,)</div><div class=\"line\">search_fields = (<span class=\"string\">'username'</span>, <span class=\"string\">'email'</span>)  <span class=\"comment\"># 指定搜索的域</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 请求url</span></div><div class=\"line\"><span class=\"comment\"># http://127.0.0.1:8888/api/v2/user_records?search=username</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>OrderingFilter</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">filter_backends = (filters.OrderingFilter,)</div><div class=\"line\">ordering_fields = (<span class=\"string\">'created_time'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 请求url</span></div><div class=\"line\"><span class=\"comment\"># http://127.0.0.1:8888/api/v2/user_records?ordering=-created_time</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"自定义-filter\"><a href=\"#自定义-filter\" class=\"headerlink\" title=\"自定义 filter\"></a>自定义 filter</h4><p>自定义filter，只需要定义 filter_queryset(self, request, queryset, view) 方法，并返回一个queryset即可<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodenameFilter</span><span class=\"params\">(filters.BaseFilterBackend)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    根据 nodename 来筛选[nodename]</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter_queryset</span><span class=\"params\">(self, request, queryset, view)</span>:</span></div><div class=\"line\">        nodename = request.QUERY_PARAMS.get(<span class=\"string\">'nodename'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> nodename:</div><div class=\"line\">            <span class=\"keyword\">return</span> queryset.filter(nodename=nodename)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> queryset</div></pre></td></tr></table></figure></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://django-filter.readthedocs.io/en/develop/index.html#\">https://django-filter.readthedocs.io/en/develop/index.html#</a></p>\n"},{"title":"Scrapy Selectors","date":"2017-12-02T14:09:31.000Z","_content":"#### 使用selectors\n##### 构建 Selectors\n\n通过向 Selector 类的构造函数传入 text 或者是 TextResponse 对象来构造 selectors 实例；它会根据传入的类型(input type)自动的去选择最佳的解析规则(XML vs HTML)\n```python\n>>> from scrapy.selector import Selector\n>>> from scrapy.http import HtmlResponse\n \n# 通过text来构建\n>>> body = '<html><body><span>good</span></body></html>'\n>>> Selector(text=body).xpath('//span/text()').extract()\n[u'good']\n \n# 通过response来构建\n>>> response = HtmlResponse(url='http://example.com', body=body)\n>>> Selector(response=response).xpath('//span/text()').extract()\n[u'good']\n \n# 通过.selector来构建\n>>> response.selector.xpath('//span/text()').extract()\n[u'good']\n\n```\n##### 使用selectors\n通常通过response.xpath()和response.css()来处理返回的html，xpath通过/text()来返回文本或者属性，css通过::text来返回文本或者属性\n\t```\n\t<html>\n\t <head>\n\t  <base href='http://example.com/' />\n\t  <title>Example website</title>\n\t </head>\n\t <body>\n\t  <div id='images'>\n\t   <a href='image1.html'>Name: My image 1 <br /><img src='image1_thumb.jpg' /></a>\n\t   <a href='image2.html'>Name: My image 2 <br /><img src='image2_thumb.jpg' /></a>\n\t   <a href='image3.html'>Name: My image 3 <br /><img src='image3_thumb.jpg' /></a>\n\t   <a href='image4.html'>Name: My image 4 <br /><img src='image4_thumb.jpg' /></a>\n\t   <a href='image5.html'>Name: My image 5 <br /><img src='image5_thumb.jpg' /></a>\n\t  </div>\n\t </body>\n\t</html>\n\t```\n\n\t```python\n\tscrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html\n\t#################################\n\t>>> response.xpath('//title/text()')\n\t[<Selector xpath='//title/text()' data='Example website'>]\n\t>>> response.css('title::text')\n\t[<Selector xpath='descendant-or-self::title/text()' data='Example website'>]\n\t# 上述结果中，返回的是一个 SelectorList 实例，该实例中包含了一组 selectors；通过调用 SelectorList 的相关接口我们可以获取到每一个 selector 元素的相关内容\n\t \n\t>>> response.css('img').xpath('@src').extract()\n\t['image1_thumb.jpg', 'image2_thumb.jpg', 'image3_thumb.jpg', 'image4_thumb.jpg', 'image5_thumb.jpg']\n\t# 通过 extract() 方法便可以从 selector 中提取出所要的文本\n\t# extract_first() 取第一个元素的值，如果没有返回None，也可以自定义,通过extract_first(default='not-found')\n\t \n\t>>> response.xpath('//base/@href').extract()\n\t[u'http://example.com/']\n\t \n\t>>> response.css('base::attr(href)').extract()\n\t[u'http://example.com/']\n\t \n\t>>> response.xpath('//a[contains(@href, \"image\")]/@href').extract()\n\t[u'image1.html',\n\t u'image2.html',\n\t u'image3.html',\n\t u'image4.html',\n\t u'image5.html']\n\t \n\t>>> response.css('a[href*=image]::attr(href)').extract()\n\t[u'image1.html',\n\t u'image2.html',\n\t u'image3.html',\n\t u'image4.html',\n\t u'image5.html']\n\t \n\t>>> response.xpath('//a[contains(@href, \"image\")]/img/@src').extract()\n\t[u'image1_thumb.jpg',\n\t u'image2_thumb.jpg',\n\t u'image3_thumb.jpg',\n\t u'image4_thumb.jpg',\n\t u'image5_thumb.jpg']\n\t \n\t>>> response.css('a[href*=image] img::attr(src)').extract()\n\t[u'image1_thumb.jpg',\n\t u'image2_thumb.jpg',\n\t u'image3_thumb.jpg',\n\t u'image4_thumb.jpg',\n\t u'image5_thumb.jpg']\n\t \n\t```\n##### 嵌套selectors\n\n\t通过.xpath()或者.css()方法返回的包含相同类型的selectos 的队列，仍然可以对返回的 selector 执行.xpath()和.css()方法\n\n##### XPath表达式中的参数\n\n\tXPath 允许你引用 XPath 表达式中的参数，使用$somevariable\n\t```python\n\t>>> # `$val` used in the expression, a `val` argument needs to be passed\n\t>>> response.xpath('//div[@id=$val]/a/text()', val='images').extract_first()\n\tu'Name: My image 1 '\n\t```\n\n#### 常用selectors\n##### xpath语法\n```\n- article   选取所有article元素的所有子节点\n- /article 选取根元素article\n- article/a 选取所有属于article的子元素的a元素\n- //div 选取所有div子元素\n- article//div 选取所有属于article元素的后代的div元素，不管它出现在article 之下的任何位置\n- //@lang  选取名为lang的所有属性\n- //@class='xxx' 选取所有名为class的属性为xxx\n- /article/div[1] 选取属于article子元素的第一个div元素\n- /article/div[last()] 选取属性article子元素的最后一个div元素\n- /article/div[last()-1] 倒数第二个元素\n- /article/div[position()<3]选取最前面的两个属于article 元素的子元素的div元素。\n- //div[@lang] 选取所有拥有lang属性的div元素\n- //div[@lang='eng'] 选取所有lang属性为eng的div元素\n- /div/* 选取属于div元素的所有子节点\n- //* 选取所有元素\n- //div[@*] 选取所有带属性的title元素\n- /div/a | //div/p 选取所有div元素的a和p元素\n- //span | //ul 选取文档中的span和ul元素\n- article/div/p | //span 选取所有属于article元素的div元素的p元素 以及文档中所有的span元素\n```\n##### css语法\n```\n- `*` 所有选择器\n- #container 选择id=container的元素\n- .container 选取class=container的元素\n- p     选择所有p元素\n- div,p 选择所有div和所有p元素\n- li a 选取所有li下的所有a节点\n- ul + p 选择u后面的第一个p元素\n- div#container > ul 选取id为container的div的第一个ul子元素\n- h2 a::text\th2元素下a标签对应的值\n- a::attr(href)\ta元素中属性为href对应的值\n- [target] 选择带有 target 属性所有元素\n- [target=_blank] 选择 target=\"_blank\" 的所有元素\n- [title~=flower]   选择 title 属性包含单词 \"flower\" 的所有元素\n- [lang|=en]    选择 lang 属性值以 \"en\" 开头的所有元素\n- ul ~ p 选取与ul相邻的所有p元素\n- a[title] 选取所有有title属性的a元素\n- a[href=\"http://xxx.com\"] 选取所有href属性为xxx.com值的a元素\n- a[href*=\"xxx\"] 选取所有href属性包含xxx的a元素\n- a[href^=\"http\"] 选取所有href属性值以http开头的a元素\n- a[href$=\".jpg\"] 选取所有href属性值以.jpg结尾的a元素\n- input[type=radio]:checked 选择选中的radio的元素\n- div:not(#container) 选取所有id非container的div属性\n- li:nth-child(3) 选取第三个li元素\n- tr:nth-child(2n) 第偶数个tr\n```\n\n#### XPATH和CSS用法\n| XPATH | CSS |\tdesc\n|--------|--------|-------|\n| //div/a| div > a| div的子元素a|\n| //div//a| div a| div的后代元素a|\n| //div[@id='example']| #example| 获取id=example的元素|\n| //div[@class='example']|.example|获取class=example的元素|\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Scrapy-selectors.md","raw":"---\ntitle: Scrapy Selectors\ndate: 2017-12-02 22:09:31\ntags:\n  - Selectors\ncategories:\n  - Scrapy\n---\n#### 使用selectors\n##### 构建 Selectors\n\n通过向 Selector 类的构造函数传入 text 或者是 TextResponse 对象来构造 selectors 实例；它会根据传入的类型(input type)自动的去选择最佳的解析规则(XML vs HTML)\n```python\n>>> from scrapy.selector import Selector\n>>> from scrapy.http import HtmlResponse\n \n# 通过text来构建\n>>> body = '<html><body><span>good</span></body></html>'\n>>> Selector(text=body).xpath('//span/text()').extract()\n[u'good']\n \n# 通过response来构建\n>>> response = HtmlResponse(url='http://example.com', body=body)\n>>> Selector(response=response).xpath('//span/text()').extract()\n[u'good']\n \n# 通过.selector来构建\n>>> response.selector.xpath('//span/text()').extract()\n[u'good']\n\n```\n##### 使用selectors\n通常通过response.xpath()和response.css()来处理返回的html，xpath通过/text()来返回文本或者属性，css通过::text来返回文本或者属性\n\t```\n\t<html>\n\t <head>\n\t  <base href='http://example.com/' />\n\t  <title>Example website</title>\n\t </head>\n\t <body>\n\t  <div id='images'>\n\t   <a href='image1.html'>Name: My image 1 <br /><img src='image1_thumb.jpg' /></a>\n\t   <a href='image2.html'>Name: My image 2 <br /><img src='image2_thumb.jpg' /></a>\n\t   <a href='image3.html'>Name: My image 3 <br /><img src='image3_thumb.jpg' /></a>\n\t   <a href='image4.html'>Name: My image 4 <br /><img src='image4_thumb.jpg' /></a>\n\t   <a href='image5.html'>Name: My image 5 <br /><img src='image5_thumb.jpg' /></a>\n\t  </div>\n\t </body>\n\t</html>\n\t```\n\n\t```python\n\tscrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html\n\t#################################\n\t>>> response.xpath('//title/text()')\n\t[<Selector xpath='//title/text()' data='Example website'>]\n\t>>> response.css('title::text')\n\t[<Selector xpath='descendant-or-self::title/text()' data='Example website'>]\n\t# 上述结果中，返回的是一个 SelectorList 实例，该实例中包含了一组 selectors；通过调用 SelectorList 的相关接口我们可以获取到每一个 selector 元素的相关内容\n\t \n\t>>> response.css('img').xpath('@src').extract()\n\t['image1_thumb.jpg', 'image2_thumb.jpg', 'image3_thumb.jpg', 'image4_thumb.jpg', 'image5_thumb.jpg']\n\t# 通过 extract() 方法便可以从 selector 中提取出所要的文本\n\t# extract_first() 取第一个元素的值，如果没有返回None，也可以自定义,通过extract_first(default='not-found')\n\t \n\t>>> response.xpath('//base/@href').extract()\n\t[u'http://example.com/']\n\t \n\t>>> response.css('base::attr(href)').extract()\n\t[u'http://example.com/']\n\t \n\t>>> response.xpath('//a[contains(@href, \"image\")]/@href').extract()\n\t[u'image1.html',\n\t u'image2.html',\n\t u'image3.html',\n\t u'image4.html',\n\t u'image5.html']\n\t \n\t>>> response.css('a[href*=image]::attr(href)').extract()\n\t[u'image1.html',\n\t u'image2.html',\n\t u'image3.html',\n\t u'image4.html',\n\t u'image5.html']\n\t \n\t>>> response.xpath('//a[contains(@href, \"image\")]/img/@src').extract()\n\t[u'image1_thumb.jpg',\n\t u'image2_thumb.jpg',\n\t u'image3_thumb.jpg',\n\t u'image4_thumb.jpg',\n\t u'image5_thumb.jpg']\n\t \n\t>>> response.css('a[href*=image] img::attr(src)').extract()\n\t[u'image1_thumb.jpg',\n\t u'image2_thumb.jpg',\n\t u'image3_thumb.jpg',\n\t u'image4_thumb.jpg',\n\t u'image5_thumb.jpg']\n\t \n\t```\n##### 嵌套selectors\n\n\t通过.xpath()或者.css()方法返回的包含相同类型的selectos 的队列，仍然可以对返回的 selector 执行.xpath()和.css()方法\n\n##### XPath表达式中的参数\n\n\tXPath 允许你引用 XPath 表达式中的参数，使用$somevariable\n\t```python\n\t>>> # `$val` used in the expression, a `val` argument needs to be passed\n\t>>> response.xpath('//div[@id=$val]/a/text()', val='images').extract_first()\n\tu'Name: My image 1 '\n\t```\n\n#### 常用selectors\n##### xpath语法\n```\n- article   选取所有article元素的所有子节点\n- /article 选取根元素article\n- article/a 选取所有属于article的子元素的a元素\n- //div 选取所有div子元素\n- article//div 选取所有属于article元素的后代的div元素，不管它出现在article 之下的任何位置\n- //@lang  选取名为lang的所有属性\n- //@class='xxx' 选取所有名为class的属性为xxx\n- /article/div[1] 选取属于article子元素的第一个div元素\n- /article/div[last()] 选取属性article子元素的最后一个div元素\n- /article/div[last()-1] 倒数第二个元素\n- /article/div[position()<3]选取最前面的两个属于article 元素的子元素的div元素。\n- //div[@lang] 选取所有拥有lang属性的div元素\n- //div[@lang='eng'] 选取所有lang属性为eng的div元素\n- /div/* 选取属于div元素的所有子节点\n- //* 选取所有元素\n- //div[@*] 选取所有带属性的title元素\n- /div/a | //div/p 选取所有div元素的a和p元素\n- //span | //ul 选取文档中的span和ul元素\n- article/div/p | //span 选取所有属于article元素的div元素的p元素 以及文档中所有的span元素\n```\n##### css语法\n```\n- `*` 所有选择器\n- #container 选择id=container的元素\n- .container 选取class=container的元素\n- p     选择所有p元素\n- div,p 选择所有div和所有p元素\n- li a 选取所有li下的所有a节点\n- ul + p 选择u后面的第一个p元素\n- div#container > ul 选取id为container的div的第一个ul子元素\n- h2 a::text\th2元素下a标签对应的值\n- a::attr(href)\ta元素中属性为href对应的值\n- [target] 选择带有 target 属性所有元素\n- [target=_blank] 选择 target=\"_blank\" 的所有元素\n- [title~=flower]   选择 title 属性包含单词 \"flower\" 的所有元素\n- [lang|=en]    选择 lang 属性值以 \"en\" 开头的所有元素\n- ul ~ p 选取与ul相邻的所有p元素\n- a[title] 选取所有有title属性的a元素\n- a[href=\"http://xxx.com\"] 选取所有href属性为xxx.com值的a元素\n- a[href*=\"xxx\"] 选取所有href属性包含xxx的a元素\n- a[href^=\"http\"] 选取所有href属性值以http开头的a元素\n- a[href$=\".jpg\"] 选取所有href属性值以.jpg结尾的a元素\n- input[type=radio]:checked 选择选中的radio的元素\n- div:not(#container) 选取所有id非container的div属性\n- li:nth-child(3) 选取第三个li元素\n- tr:nth-child(2n) 第偶数个tr\n```\n\n#### XPATH和CSS用法\n| XPATH | CSS |\tdesc\n|--------|--------|-------|\n| //div/a| div > a| div的子元素a|\n| //div//a| div a| div的后代元素a|\n| //div[@id='example']| #example| 获取id=example的元素|\n| //div[@class='example']|.example|获取class=example的元素|\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Scrapy-selectors","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5uh000cct8u2gluozuq","content":"<h4 id=\"使用selectors\"><a href=\"#使用selectors\" class=\"headerlink\" title=\"使用selectors\"></a>使用selectors</h4><h5 id=\"构建-Selectors\"><a href=\"#构建-Selectors\" class=\"headerlink\" title=\"构建 Selectors\"></a>构建 Selectors</h5><p>通过向 Selector 类的构造函数传入 text 或者是 TextResponse 对象来构造 selectors 实例；它会根据传入的类型(input type)自动的去选择最佳的解析规则(XML vs HTML)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.selector <span class=\"keyword\">import</span> Selector</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> HtmlResponse</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过text来构建</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>body = <span class=\"string\">'&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Selector(text=body).xpath(<span class=\"string\">'//span/text()'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'good'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过response来构建</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response = HtmlResponse(url=<span class=\"string\">'http://example.com'</span>, body=body)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Selector(response=response).xpath(<span class=\"string\">'//span/text()'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'good'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过.selector来构建</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.selector.xpath(<span class=\"string\">'//span/text()'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'good'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"使用selectors-1\"><a href=\"#使用selectors-1\" class=\"headerlink\" title=\"使用selectors\"></a>使用selectors</h5><p>通常通过response.xpath()和response.css()来处理返回的html，xpath通过/text()来返回文本或者属性，css通过::text来返回文本或者属性<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"> &lt;head&gt;</div><div class=\"line\">  &lt;base href=&apos;http://example.com/&apos; /&gt;</div><div class=\"line\">  &lt;title&gt;Example website&lt;/title&gt;</div><div class=\"line\"> &lt;/head&gt;</div><div class=\"line\"> &lt;body&gt;</div><div class=\"line\">  &lt;div id=&apos;images&apos;&gt;</div><div class=\"line\">   &lt;a href=&apos;image1.html&apos;&gt;Name: My image 1 &lt;br /&gt;&lt;img src=&apos;image1_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image2.html&apos;&gt;Name: My image 2 &lt;br /&gt;&lt;img src=&apos;image2_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image3.html&apos;&gt;Name: My image 3 &lt;br /&gt;&lt;img src=&apos;image3_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image4.html&apos;&gt;Name: My image 4 &lt;br /&gt;&lt;img src=&apos;image4_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image5.html&apos;&gt;Name: My image 5 &lt;br /&gt;&lt;img src=&apos;image5_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\"> &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html</div><div class=\"line\"><span class=\"comment\">#################################</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//title/text()'</span>)</div><div class=\"line\">[&lt;Selector xpath=<span class=\"string\">'//title/text()'</span> data=<span class=\"string\">'Example website'</span>&gt;]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'title::text'</span>)</div><div class=\"line\">[&lt;Selector xpath=<span class=\"string\">'descendant-or-self::title/text()'</span> data=<span class=\"string\">'Example website'</span>&gt;]</div><div class=\"line\"><span class=\"comment\"># 上述结果中，返回的是一个 SelectorList 实例，该实例中包含了一组 selectors；通过调用 SelectorList 的相关接口我们可以获取到每一个 selector 元素的相关内容</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'img'</span>).xpath(<span class=\"string\">'@src'</span>).extract()</div><div class=\"line\">[<span class=\"string\">'image1_thumb.jpg'</span>, <span class=\"string\">'image2_thumb.jpg'</span>, <span class=\"string\">'image3_thumb.jpg'</span>, <span class=\"string\">'image4_thumb.jpg'</span>, <span class=\"string\">'image5_thumb.jpg'</span>]</div><div class=\"line\"><span class=\"comment\"># 通过 extract() 方法便可以从 selector 中提取出所要的文本</span></div><div class=\"line\"><span class=\"comment\"># extract_first() 取第一个元素的值，如果没有返回None，也可以自定义,通过extract_first(default='not-found')</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//base/@href'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'http://example.com/'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'base::attr(href)'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'http://example.com/'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//a[contains(@href, \"image\")]/@href'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5.html'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'a[href*=image]::attr(href)'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5.html'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//a[contains(@href, \"image\")]/img/@src'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5_thumb.jpg'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'a[href*=image] img::attr(src)'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5_thumb.jpg'</span>]</div></pre></td></tr></table></figure>\n</code></pre><h5 id=\"嵌套selectors\"><a href=\"#嵌套selectors\" class=\"headerlink\" title=\"嵌套selectors\"></a>嵌套selectors</h5><pre><code>通过.xpath()或者.css()方法返回的包含相同类型的selectos 的队列，仍然可以对返回的 selector 执行.xpath()和.css()方法\n</code></pre><h5 id=\"XPath表达式中的参数\"><a href=\"#XPath表达式中的参数\" class=\"headerlink\" title=\"XPath表达式中的参数\"></a>XPath表达式中的参数</h5><pre><code>XPath 允许你引用 XPath 表达式中的参数，使用$somevariable\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># `$val` used in the expression, a `val` argument needs to be passed</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//div[@id=$val]/a/text()'</span>, val=<span class=\"string\">'images'</span>).extract_first()</div><div class=\"line\"><span class=\"string\">u'Name: My image 1 '</span></div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"常用selectors\"><a href=\"#常用selectors\" class=\"headerlink\" title=\"常用selectors\"></a>常用selectors</h4><h5 id=\"xpath语法\"><a href=\"#xpath语法\" class=\"headerlink\" title=\"xpath语法\"></a>xpath语法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">- article   选取所有article元素的所有子节点</div><div class=\"line\">- /article 选取根元素article</div><div class=\"line\">- article/a 选取所有属于article的子元素的a元素</div><div class=\"line\">- //div 选取所有div子元素</div><div class=\"line\">- article//div 选取所有属于article元素的后代的div元素，不管它出现在article 之下的任何位置</div><div class=\"line\">- //@lang  选取名为lang的所有属性</div><div class=\"line\">- //@class=&apos;xxx&apos; 选取所有名为class的属性为xxx</div><div class=\"line\">- /article/div[1] 选取属于article子元素的第一个div元素</div><div class=\"line\">- /article/div[last()] 选取属性article子元素的最后一个div元素</div><div class=\"line\">- /article/div[last()-1] 倒数第二个元素</div><div class=\"line\">- /article/div[position()&lt;3]选取最前面的两个属于article 元素的子元素的div元素。</div><div class=\"line\">- //div[@lang] 选取所有拥有lang属性的div元素</div><div class=\"line\">- //div[@lang=&apos;eng&apos;] 选取所有lang属性为eng的div元素</div><div class=\"line\">- /div/* 选取属于div元素的所有子节点</div><div class=\"line\">- //* 选取所有元素</div><div class=\"line\">- //div[@*] 选取所有带属性的title元素</div><div class=\"line\">- /div/a | //div/p 选取所有div元素的a和p元素</div><div class=\"line\">- //span | //ul 选取文档中的span和ul元素</div><div class=\"line\">- article/div/p | //span 选取所有属于article元素的div元素的p元素 以及文档中所有的span元素</div></pre></td></tr></table></figure>\n<h5 id=\"css语法\"><a href=\"#css语法\" class=\"headerlink\" title=\"css语法\"></a>css语法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">- `*` 所有选择器</div><div class=\"line\">- #container 选择id=container的元素</div><div class=\"line\">- .container 选取class=container的元素</div><div class=\"line\">- p     选择所有p元素</div><div class=\"line\">- div,p 选择所有div和所有p元素</div><div class=\"line\">- li a 选取所有li下的所有a节点</div><div class=\"line\">- ul + p 选择u后面的第一个p元素</div><div class=\"line\">- div#container &gt; ul 选取id为container的div的第一个ul子元素</div><div class=\"line\">- h2 a::text\th2元素下a标签对应的值</div><div class=\"line\">- a::attr(href)\ta元素中属性为href对应的值</div><div class=\"line\">- [target] 选择带有 target 属性所有元素</div><div class=\"line\">- [target=_blank] 选择 target=&quot;_blank&quot; 的所有元素</div><div class=\"line\">- [title~=flower]   选择 title 属性包含单词 &quot;flower&quot; 的所有元素</div><div class=\"line\">- [lang|=en]    选择 lang 属性值以 &quot;en&quot; 开头的所有元素</div><div class=\"line\">- ul ~ p 选取与ul相邻的所有p元素</div><div class=\"line\">- a[title] 选取所有有title属性的a元素</div><div class=\"line\">- a[href=&quot;http://xxx.com&quot;] 选取所有href属性为xxx.com值的a元素</div><div class=\"line\">- a[href*=&quot;xxx&quot;] 选取所有href属性包含xxx的a元素</div><div class=\"line\">- a[href^=&quot;http&quot;] 选取所有href属性值以http开头的a元素</div><div class=\"line\">- a[href$=&quot;.jpg&quot;] 选取所有href属性值以.jpg结尾的a元素</div><div class=\"line\">- input[type=radio]:checked 选择选中的radio的元素</div><div class=\"line\">- div:not(#container) 选取所有id非container的div属性</div><div class=\"line\">- li:nth-child(3) 选取第三个li元素</div><div class=\"line\">- tr:nth-child(2n) 第偶数个tr</div></pre></td></tr></table></figure>\n<h4 id=\"XPATH和CSS用法\"><a href=\"#XPATH和CSS用法\" class=\"headerlink\" title=\"XPATH和CSS用法\"></a>XPATH和CSS用法</h4><table>\n<thead>\n<tr>\n<th>XPATH</th>\n<th>CSS</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>//div/a</td>\n<td>div &gt; a</td>\n<td>div的子元素a</td>\n</tr>\n<tr>\n<td>//div//a</td>\n<td>div a</td>\n<td>div的后代元素a</td>\n</tr>\n<tr>\n<td>//div[@id=’example’]</td>\n<td>#example</td>\n<td>获取id=example的元素</td>\n</tr>\n<tr>\n<td>//div[@class=’example’]</td>\n<td>.example</td>\n<td>获取class=example的元素</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h4 id=\"使用selectors\"><a href=\"#使用selectors\" class=\"headerlink\" title=\"使用selectors\"></a>使用selectors</h4><h5 id=\"构建-Selectors\"><a href=\"#构建-Selectors\" class=\"headerlink\" title=\"构建 Selectors\"></a>构建 Selectors</h5><p>通过向 Selector 类的构造函数传入 text 或者是 TextResponse 对象来构造 selectors 实例；它会根据传入的类型(input type)自动的去选择最佳的解析规则(XML vs HTML)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.selector <span class=\"keyword\">import</span> Selector</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> HtmlResponse</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过text来构建</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>body = <span class=\"string\">'&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Selector(text=body).xpath(<span class=\"string\">'//span/text()'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'good'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过response来构建</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response = HtmlResponse(url=<span class=\"string\">'http://example.com'</span>, body=body)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Selector(response=response).xpath(<span class=\"string\">'//span/text()'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'good'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过.selector来构建</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.selector.xpath(<span class=\"string\">'//span/text()'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'good'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"使用selectors-1\"><a href=\"#使用selectors-1\" class=\"headerlink\" title=\"使用selectors\"></a>使用selectors</h5><p>通常通过response.xpath()和response.css()来处理返回的html，xpath通过/text()来返回文本或者属性，css通过::text来返回文本或者属性<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"> &lt;head&gt;</div><div class=\"line\">  &lt;base href=&apos;http://example.com/&apos; /&gt;</div><div class=\"line\">  &lt;title&gt;Example website&lt;/title&gt;</div><div class=\"line\"> &lt;/head&gt;</div><div class=\"line\"> &lt;body&gt;</div><div class=\"line\">  &lt;div id=&apos;images&apos;&gt;</div><div class=\"line\">   &lt;a href=&apos;image1.html&apos;&gt;Name: My image 1 &lt;br /&gt;&lt;img src=&apos;image1_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image2.html&apos;&gt;Name: My image 2 &lt;br /&gt;&lt;img src=&apos;image2_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image3.html&apos;&gt;Name: My image 3 &lt;br /&gt;&lt;img src=&apos;image3_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image4.html&apos;&gt;Name: My image 4 &lt;br /&gt;&lt;img src=&apos;image4_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">   &lt;a href=&apos;image5.html&apos;&gt;Name: My image 5 &lt;br /&gt;&lt;img src=&apos;image5_thumb.jpg&apos; /&gt;&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\"> &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html</div><div class=\"line\"><span class=\"comment\">#################################</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//title/text()'</span>)</div><div class=\"line\">[&lt;Selector xpath=<span class=\"string\">'//title/text()'</span> data=<span class=\"string\">'Example website'</span>&gt;]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'title::text'</span>)</div><div class=\"line\">[&lt;Selector xpath=<span class=\"string\">'descendant-or-self::title/text()'</span> data=<span class=\"string\">'Example website'</span>&gt;]</div><div class=\"line\"><span class=\"comment\"># 上述结果中，返回的是一个 SelectorList 实例，该实例中包含了一组 selectors；通过调用 SelectorList 的相关接口我们可以获取到每一个 selector 元素的相关内容</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'img'</span>).xpath(<span class=\"string\">'@src'</span>).extract()</div><div class=\"line\">[<span class=\"string\">'image1_thumb.jpg'</span>, <span class=\"string\">'image2_thumb.jpg'</span>, <span class=\"string\">'image3_thumb.jpg'</span>, <span class=\"string\">'image4_thumb.jpg'</span>, <span class=\"string\">'image5_thumb.jpg'</span>]</div><div class=\"line\"><span class=\"comment\"># 通过 extract() 方法便可以从 selector 中提取出所要的文本</span></div><div class=\"line\"><span class=\"comment\"># extract_first() 取第一个元素的值，如果没有返回None，也可以自定义,通过extract_first(default='not-found')</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//base/@href'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'http://example.com/'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'base::attr(href)'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'http://example.com/'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//a[contains(@href, \"image\")]/@href'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5.html'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'a[href*=image]::attr(href)'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4.html'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5.html'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//a[contains(@href, \"image\")]/img/@src'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5_thumb.jpg'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.css(<span class=\"string\">'a[href*=image] img::attr(src)'</span>).extract()</div><div class=\"line\">[<span class=\"string\">u'image1_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image2_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image3_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image4_thumb.jpg'</span>,</div><div class=\"line\"> <span class=\"string\">u'image5_thumb.jpg'</span>]</div></pre></td></tr></table></figure>\n</code></pre><h5 id=\"嵌套selectors\"><a href=\"#嵌套selectors\" class=\"headerlink\" title=\"嵌套selectors\"></a>嵌套selectors</h5><pre><code>通过.xpath()或者.css()方法返回的包含相同类型的selectos 的队列，仍然可以对返回的 selector 执行.xpath()和.css()方法\n</code></pre><h5 id=\"XPath表达式中的参数\"><a href=\"#XPath表达式中的参数\" class=\"headerlink\" title=\"XPath表达式中的参数\"></a>XPath表达式中的参数</h5><pre><code>XPath 允许你引用 XPath 表达式中的参数，使用$somevariable\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># `$val` used in the expression, a `val` argument needs to be passed</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>response.xpath(<span class=\"string\">'//div[@id=$val]/a/text()'</span>, val=<span class=\"string\">'images'</span>).extract_first()</div><div class=\"line\"><span class=\"string\">u'Name: My image 1 '</span></div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"常用selectors\"><a href=\"#常用selectors\" class=\"headerlink\" title=\"常用selectors\"></a>常用selectors</h4><h5 id=\"xpath语法\"><a href=\"#xpath语法\" class=\"headerlink\" title=\"xpath语法\"></a>xpath语法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">- article   选取所有article元素的所有子节点</div><div class=\"line\">- /article 选取根元素article</div><div class=\"line\">- article/a 选取所有属于article的子元素的a元素</div><div class=\"line\">- //div 选取所有div子元素</div><div class=\"line\">- article//div 选取所有属于article元素的后代的div元素，不管它出现在article 之下的任何位置</div><div class=\"line\">- //@lang  选取名为lang的所有属性</div><div class=\"line\">- //@class=&apos;xxx&apos; 选取所有名为class的属性为xxx</div><div class=\"line\">- /article/div[1] 选取属于article子元素的第一个div元素</div><div class=\"line\">- /article/div[last()] 选取属性article子元素的最后一个div元素</div><div class=\"line\">- /article/div[last()-1] 倒数第二个元素</div><div class=\"line\">- /article/div[position()&lt;3]选取最前面的两个属于article 元素的子元素的div元素。</div><div class=\"line\">- //div[@lang] 选取所有拥有lang属性的div元素</div><div class=\"line\">- //div[@lang=&apos;eng&apos;] 选取所有lang属性为eng的div元素</div><div class=\"line\">- /div/* 选取属于div元素的所有子节点</div><div class=\"line\">- //* 选取所有元素</div><div class=\"line\">- //div[@*] 选取所有带属性的title元素</div><div class=\"line\">- /div/a | //div/p 选取所有div元素的a和p元素</div><div class=\"line\">- //span | //ul 选取文档中的span和ul元素</div><div class=\"line\">- article/div/p | //span 选取所有属于article元素的div元素的p元素 以及文档中所有的span元素</div></pre></td></tr></table></figure>\n<h5 id=\"css语法\"><a href=\"#css语法\" class=\"headerlink\" title=\"css语法\"></a>css语法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">- `*` 所有选择器</div><div class=\"line\">- #container 选择id=container的元素</div><div class=\"line\">- .container 选取class=container的元素</div><div class=\"line\">- p     选择所有p元素</div><div class=\"line\">- div,p 选择所有div和所有p元素</div><div class=\"line\">- li a 选取所有li下的所有a节点</div><div class=\"line\">- ul + p 选择u后面的第一个p元素</div><div class=\"line\">- div#container &gt; ul 选取id为container的div的第一个ul子元素</div><div class=\"line\">- h2 a::text\th2元素下a标签对应的值</div><div class=\"line\">- a::attr(href)\ta元素中属性为href对应的值</div><div class=\"line\">- [target] 选择带有 target 属性所有元素</div><div class=\"line\">- [target=_blank] 选择 target=&quot;_blank&quot; 的所有元素</div><div class=\"line\">- [title~=flower]   选择 title 属性包含单词 &quot;flower&quot; 的所有元素</div><div class=\"line\">- [lang|=en]    选择 lang 属性值以 &quot;en&quot; 开头的所有元素</div><div class=\"line\">- ul ~ p 选取与ul相邻的所有p元素</div><div class=\"line\">- a[title] 选取所有有title属性的a元素</div><div class=\"line\">- a[href=&quot;http://xxx.com&quot;] 选取所有href属性为xxx.com值的a元素</div><div class=\"line\">- a[href*=&quot;xxx&quot;] 选取所有href属性包含xxx的a元素</div><div class=\"line\">- a[href^=&quot;http&quot;] 选取所有href属性值以http开头的a元素</div><div class=\"line\">- a[href$=&quot;.jpg&quot;] 选取所有href属性值以.jpg结尾的a元素</div><div class=\"line\">- input[type=radio]:checked 选择选中的radio的元素</div><div class=\"line\">- div:not(#container) 选取所有id非container的div属性</div><div class=\"line\">- li:nth-child(3) 选取第三个li元素</div><div class=\"line\">- tr:nth-child(2n) 第偶数个tr</div></pre></td></tr></table></figure>\n<h4 id=\"XPATH和CSS用法\"><a href=\"#XPATH和CSS用法\" class=\"headerlink\" title=\"XPATH和CSS用法\"></a>XPATH和CSS用法</h4><table>\n<thead>\n<tr>\n<th>XPATH</th>\n<th>CSS</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>//div/a</td>\n<td>div &gt; a</td>\n<td>div的子元素a</td>\n</tr>\n<tr>\n<td>//div//a</td>\n<td>div a</td>\n<td>div的后代元素a</td>\n</tr>\n<tr>\n<td>//div[@id=’example’]</td>\n<td>#example</td>\n<td>获取id=example的元素</td>\n</tr>\n<tr>\n<td>//div[@class=’example’]</td>\n<td>.example</td>\n<td>获取class=example的元素</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"DRF Throtting","date":"2017-08-10T11:56:37.000Z","_content":"Django Rest framework 频率控制配置说明\n#### 全局设置\nsetting.py\n```python\n    # 设置节流方案\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 开启匿名用户接口请求频率限制\n        'rest_framework.throttling.AnonRateThrottle',\n        # 开启授权用户接口请求频率限制\n        'rest_framework.throttling.UserRateThrottle',\n        # 开启自定义设置接口请求频率，在views中通过设置throttle_scope 来使用\n        'rest_framework.throttling.ScopedRateThrottle',\n        # 自定义\n        'app.throttling.UserRecordThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 频率限制有second, minute, hour, day\n        # 匿名用户请求频率\n        'anon': '1000/day',\n        # 授权用户请求频率\n        'user': '20000/day',\n        # 自定义请求频率,DEFAULT_THROTTLE_CLASSES中需要设置ScopedRateThrottle\n        'ttxs': '10/minute',\n        # 自定义请求频率\n        'user_record': None\n    },\n```\n#### 自定义\nthrottling.py\n```python\nfrom rest_framework.throttling import UserRateThrottle, AnonRateThrottle\n \nclass UserRecordThrottle(UserRateThrottle):\n    scope = 'user_record'\n    rate = '5/minute'\n```\n使用方式说明：\n\n方式一: 在views.py中使用，设置为throttle_classes = ([UserRecordThrottle,])\n\n方式二: 在setting.py中设置，\n- 在DEFAULT_THROTTLE_CLASSES添加'app.throttling.UserRecordThrottle'\n- DEFAULT_THROTTLE_RATES中添加user_record\n- 在views.py中通过throttle_scope = 'user_record' 调用\n\n#### 类视图使用\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n \nclass ExampleView(APIView):\n    throttle_classes = ([UserRateThrottle,UserParserRecordThrottle])\n    throttle_scope = 'ttxs' # 设置了ScopedRateThrottle对应的RATES\n    \n    def get(self, request, format=None):\n        pass\n        return Response('ok')\n \n# 超过设置访问频率后，错误信息\n{\n  \"msg\": \"request was throttled.\",\n  \"code\": 10429\n}\n```\n#### 其他说明\n1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准\n2. 频率限制是针对单个接口的频率，而不是所有接口的频率\n","source":"_posts/Throtting.md","raw":"---\ntitle: DRF Throtting\ndate: 2017-08-10 19:56:37\ntags:\n  - DRF\n  - Throtting\ncategories:\n  - DRF\n---\nDjango Rest framework 频率控制配置说明\n#### 全局设置\nsetting.py\n```python\n    # 设置节流方案\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 开启匿名用户接口请求频率限制\n        'rest_framework.throttling.AnonRateThrottle',\n        # 开启授权用户接口请求频率限制\n        'rest_framework.throttling.UserRateThrottle',\n        # 开启自定义设置接口请求频率，在views中通过设置throttle_scope 来使用\n        'rest_framework.throttling.ScopedRateThrottle',\n        # 自定义\n        'app.throttling.UserRecordThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 频率限制有second, minute, hour, day\n        # 匿名用户请求频率\n        'anon': '1000/day',\n        # 授权用户请求频率\n        'user': '20000/day',\n        # 自定义请求频率,DEFAULT_THROTTLE_CLASSES中需要设置ScopedRateThrottle\n        'ttxs': '10/minute',\n        # 自定义请求频率\n        'user_record': None\n    },\n```\n#### 自定义\nthrottling.py\n```python\nfrom rest_framework.throttling import UserRateThrottle, AnonRateThrottle\n \nclass UserRecordThrottle(UserRateThrottle):\n    scope = 'user_record'\n    rate = '5/minute'\n```\n使用方式说明：\n\n方式一: 在views.py中使用，设置为throttle_classes = ([UserRecordThrottle,])\n\n方式二: 在setting.py中设置，\n- 在DEFAULT_THROTTLE_CLASSES添加'app.throttling.UserRecordThrottle'\n- DEFAULT_THROTTLE_RATES中添加user_record\n- 在views.py中通过throttle_scope = 'user_record' 调用\n\n#### 类视图使用\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n \nclass ExampleView(APIView):\n    throttle_classes = ([UserRateThrottle,UserParserRecordThrottle])\n    throttle_scope = 'ttxs' # 设置了ScopedRateThrottle对应的RATES\n    \n    def get(self, request, format=None):\n        pass\n        return Response('ok')\n \n# 超过设置访问频率后，错误信息\n{\n  \"msg\": \"request was throttled.\",\n  \"code\": 10429\n}\n```\n#### 其他说明\n1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准\n2. 频率限制是针对单个接口的频率，而不是所有接口的频率\n","slug":"Throtting","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5ul000ect8ubjcrjqad","content":"<p>Django Rest framework 频率控制配置说明</p>\n<h4 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h4><p>setting.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置节流方案</span></div><div class=\"line\"><span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</div><div class=\"line\">    <span class=\"comment\"># 开启匿名用户接口请求频率限制</span></div><div class=\"line\">    <span class=\"string\">'rest_framework.throttling.AnonRateThrottle'</span>,</div><div class=\"line\">    <span class=\"comment\"># 开启授权用户接口请求频率限制</span></div><div class=\"line\">    <span class=\"string\">'rest_framework.throttling.UserRateThrottle'</span>,</div><div class=\"line\">    <span class=\"comment\"># 开启自定义设置接口请求频率，在views中通过设置throttle_scope 来使用</span></div><div class=\"line\">    <span class=\"string\">'rest_framework.throttling.ScopedRateThrottle'</span>,</div><div class=\"line\">    <span class=\"comment\"># 自定义</span></div><div class=\"line\">    <span class=\"string\">'app.throttling.UserRecordThrottle'</span>,</div><div class=\"line\">),</div><div class=\"line\"><span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</div><div class=\"line\">    <span class=\"comment\"># 频率限制有second, minute, hour, day</span></div><div class=\"line\">    <span class=\"comment\"># 匿名用户请求频率</span></div><div class=\"line\">    <span class=\"string\">'anon'</span>: <span class=\"string\">'1000/day'</span>,</div><div class=\"line\">    <span class=\"comment\"># 授权用户请求频率</span></div><div class=\"line\">    <span class=\"string\">'user'</span>: <span class=\"string\">'20000/day'</span>,</div><div class=\"line\">    <span class=\"comment\"># 自定义请求频率,DEFAULT_THROTTLE_CLASSES中需要设置ScopedRateThrottle</span></div><div class=\"line\">    <span class=\"string\">'ttxs'</span>: <span class=\"string\">'10/minute'</span>,</div><div class=\"line\">    <span class=\"comment\"># 自定义请求频率</span></div><div class=\"line\">    <span class=\"string\">'user_record'</span>: <span class=\"keyword\">None</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h4 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><p>throttling.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle, AnonRateThrottle</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRecordThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></div><div class=\"line\">    scope = <span class=\"string\">'user_record'</span></div><div class=\"line\">    rate = <span class=\"string\">'5/minute'</span></div></pre></td></tr></table></figure></p>\n<p>使用方式说明：</p>\n<p>方式一: 在views.py中使用，设置为throttle_classes = ([UserRecordThrottle,])</p>\n<p>方式二: 在setting.py中设置，</p>\n<ul>\n<li>在DEFAULT_THROTTLE_CLASSES添加’app.throttling.UserRecordThrottle’</li>\n<li>DEFAULT_THROTTLE_RATES中添加user_record</li>\n<li>在views.py中通过throttle_scope = ‘user_record’ 调用</li>\n</ul>\n<h4 id=\"类视图使用\"><a href=\"#类视图使用\" class=\"headerlink\" title=\"类视图使用\"></a>类视图使用</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIView)</span>:</span></div><div class=\"line\">    throttle_classes = ([UserRateThrottle,UserParserRecordThrottle])</div><div class=\"line\">    throttle_scope = <span class=\"string\">'ttxs'</span> <span class=\"comment\"># 设置了ScopedRateThrottle对应的RATES</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Response(<span class=\"string\">'ok'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 超过设置访问频率后，错误信息</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"request was throttled.\"</span>,</div><div class=\"line\">  <span class=\"string\">\"code\"</span>: <span class=\"number\">10429</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"其他说明\"><a href=\"#其他说明\" class=\"headerlink\" title=\"其他说明\"></a>其他说明</h4><ol>\n<li>匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准</li>\n<li>频率限制是针对单个接口的频率，而不是所有接口的频率</li>\n</ol>\n","excerpt":"","more":"<p>Django Rest framework 频率控制配置说明</p>\n<h4 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h4><p>setting.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置节流方案</span></div><div class=\"line\"><span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</div><div class=\"line\">    <span class=\"comment\"># 开启匿名用户接口请求频率限制</span></div><div class=\"line\">    <span class=\"string\">'rest_framework.throttling.AnonRateThrottle'</span>,</div><div class=\"line\">    <span class=\"comment\"># 开启授权用户接口请求频率限制</span></div><div class=\"line\">    <span class=\"string\">'rest_framework.throttling.UserRateThrottle'</span>,</div><div class=\"line\">    <span class=\"comment\"># 开启自定义设置接口请求频率，在views中通过设置throttle_scope 来使用</span></div><div class=\"line\">    <span class=\"string\">'rest_framework.throttling.ScopedRateThrottle'</span>,</div><div class=\"line\">    <span class=\"comment\"># 自定义</span></div><div class=\"line\">    <span class=\"string\">'app.throttling.UserRecordThrottle'</span>,</div><div class=\"line\">),</div><div class=\"line\"><span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</div><div class=\"line\">    <span class=\"comment\"># 频率限制有second, minute, hour, day</span></div><div class=\"line\">    <span class=\"comment\"># 匿名用户请求频率</span></div><div class=\"line\">    <span class=\"string\">'anon'</span>: <span class=\"string\">'1000/day'</span>,</div><div class=\"line\">    <span class=\"comment\"># 授权用户请求频率</span></div><div class=\"line\">    <span class=\"string\">'user'</span>: <span class=\"string\">'20000/day'</span>,</div><div class=\"line\">    <span class=\"comment\"># 自定义请求频率,DEFAULT_THROTTLE_CLASSES中需要设置ScopedRateThrottle</span></div><div class=\"line\">    <span class=\"string\">'ttxs'</span>: <span class=\"string\">'10/minute'</span>,</div><div class=\"line\">    <span class=\"comment\"># 自定义请求频率</span></div><div class=\"line\">    <span class=\"string\">'user_record'</span>: <span class=\"keyword\">None</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h4 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><p>throttling.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle, AnonRateThrottle</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRecordThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></div><div class=\"line\">    scope = <span class=\"string\">'user_record'</span></div><div class=\"line\">    rate = <span class=\"string\">'5/minute'</span></div></pre></td></tr></table></figure></p>\n<p>使用方式说明：</p>\n<p>方式一: 在views.py中使用，设置为throttle_classes = ([UserRecordThrottle,])</p>\n<p>方式二: 在setting.py中设置，</p>\n<ul>\n<li>在DEFAULT_THROTTLE_CLASSES添加’app.throttling.UserRecordThrottle’</li>\n<li>DEFAULT_THROTTLE_RATES中添加user_record</li>\n<li>在views.py中通过throttle_scope = ‘user_record’ 调用</li>\n</ul>\n<h4 id=\"类视图使用\"><a href=\"#类视图使用\" class=\"headerlink\" title=\"类视图使用\"></a>类视图使用</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIView)</span>:</span></div><div class=\"line\">    throttle_classes = ([UserRateThrottle,UserParserRecordThrottle])</div><div class=\"line\">    throttle_scope = <span class=\"string\">'ttxs'</span> <span class=\"comment\"># 设置了ScopedRateThrottle对应的RATES</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Response(<span class=\"string\">'ok'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 超过设置访问频率后，错误信息</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"request was throttled.\"</span>,</div><div class=\"line\">  <span class=\"string\">\"code\"</span>: <span class=\"number\">10429</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"其他说明\"><a href=\"#其他说明\" class=\"headerlink\" title=\"其他说明\"></a>其他说明</h4><ol>\n<li>匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准</li>\n<li>频率限制是针对单个接口的频率，而不是所有接口的频率</li>\n</ol>\n"},{"title":"Angularjs Directive自定义指令","date":"2017-08-22T11:56:41.000Z","_content":"#### 创建自定义指令\n\n- 定义指令\n```js\n.directive('unorderedList', function() {\n    return function(scope, element, attrs) {\n        // scope:指令被应用到的视图的作用域\n        // element:指令被应用到的html元素\n        // attrs:html元素的属性\n        var data = scope[attrs[\"unorderedList\"]];\n        var name = attrs['Name'];\n        }\n    });\n```\n\n#### 自定义指令属性\n##### restrict\n可选参数，标识符在模板中作为元素，属性，类，注释或组合，默认为A\n    - E 元素名使用  <my-directive>123</my-directive>\n    - A 属性使用 <div my-directive> \n    - C 类名使用 <div class=\"my-directive\"></div>\n    - M 注释使用 <!-- directive: my-directive --> \n##### template\n指令内容表示为html\n\n    - 模板内容html文本，这个内容会根据replace参数的设置替换节点或只替换节点内容\n    - 一个函数，可以接受两个参数tElement和tAttrs\n        - tElement：是指使用此指令的元素\n        - tAttrs：实例的属性\n```html\n<hello-world title = '这是一个directive'></hello-world>\n \napp.directive(\"helloWorld\",function(){  \n        return{  \n         restrict:'EAC',  \n         template: function(tElement,tAttrs){  \n            var _html = '';  \n            _html += '<div>' +'hello '+tAttrs.title+'</div>';  \n            return _html;  \n         }  \n     };  \n });  \n\n```\n##### templateUrl\n外部模板文件\n    - 加载模板所要使用的URL\n    - 可以加载当前模板内对应的text/ng-template script id\n    - 大体同template\n\n##### replace\n指定模板内容是否替换掉指令所应用的元素\n    - 如果配置为true则替换指令所在元素,但是class和属性还是会，如果为false或者不指定，则把当前指令追加到所在元素内部\n    - 对于restrict为元素E 在最终效果中是多余的，所有replace通常设置为true\n    - 当replace属性为true的时候,template的最外层必须用一整个标签包裹起来\n```html\n<!--js-->\nangular.module('myApp',[])\n    .directive(\"myDirective\",function () {\n        return{\n            restrict: \"EACM\",\n            template: \"<h3>hello ttxs</h3>\",\n            replace: true\n        }\n    })\n<!--html-->\n    <div>\n        <my-directive></my-directive>\n        <div my-directive></div>\n        <div class=\"my-directive\"></div>\n        <!-- directive: my-directive -->\n    </div>\n\n```\n \n##### compile\n指令编译的三个阶段\n\n    1. 标准浏览器API转化-将html转化成dom，即自定义的html标签需要符合html格式\n    2. angular compile - 搜索匹配directive，按照priority排序，并执行directive上的compile方法\n    3. angular link 执行directive上的link方法，进行scope绑定及事件绑定\n\n- compile函数用来对模板自身进行转换，仅在编译阶段运行一次\n- compile中直接返回的函数时postLink,表示link参数需要执行的函数，也可以返回一个对象里面包括preLink和postLink\n- 当定义了compile参数，将忽略link参数，因为compile里返回的就是该指令需要执行的link函数\n- 想在dom渲染前对它进行操作，并不需要scope参数所在所有相同directive里共享某些方法，这时应该定义compile，性能比较好\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n<div ng-app=\"myApp\">\n    <div ng-controller=\"firstController\">\n        <!--1.将div转化为dom结构-->\n        <!--2. 默认的优先级为0，哪个先定义先使用-->\n        <div ng-repeat=\"user in users\" custom-directive>\n        <!--<div custom-directive>-->\n        </div>\n    </div>\n</div>\n \n<script type=\"text/javascript\" src=\"angularjs.js\"></script>\n<script type=\"text/javascript\" src=\"app/index.js\"></script>\n</body>\n</html>\n \n<!--js-->\nvar myApp = angular.module('myApp', [])\n    .directive(\"customDirective\", function () {\n        return{\n            restrict: 'ECAM',\n            template: '<div> {{user.name}} </div>',\n            replace:true ,\n            compile: function (tElement,tAttrs,transclude) {\n                console.info('编译阶段...,用于修改dom元素或结构');\n                tElement.append(angular.element(\"<span>abc</span>\"))\n                console.info(tElement); // 元素\n                console.info(tAttrs);   // 元素属性\n                console.info(transclude);   // transclude对象\n                return{\n                    // 编译阶段之后，指令连接到子元素之前运行\n                    pre: function preLink(scope,iElement,iAttrs,controller) {\n                        console.log('preLink......')\n \n                    },\n                    // 表示所有子元素指令都连接之后才运行\n                    post: function postLink(scope,iElement,iAttrs,controller) {\n                        iElement.on('click', function () {\n                            scope.$apply(function () {\n                                scope.user.name = 'click --> abd';  // 进行一次脏检查\n                            })\n                        });\n                        console.log('postLink......')\n                    }\n \n                };  // 这里return 的就是link函数\n \n                // postLink\n                // return function () {\n                //     console.info('compile function');\n                // }\n \n            },\n \n            // 该link函数表示的就是postlink\n            link:function () {\n                console.info('Link.....')\n            }\n        }\n    })\n \n    .controller('firstController', ['$scope', function ($scope) {\n        $scope.users = [\n            {\n                id:10,\n                name:'ttxsgoto01'\n            },\n            {\n                id:20,\n                name:'ttxsgoto02'\n            }\n        ];\n    }]);\n\n```\n\n##### link\n指令需要处理大量DOM操作时，使用link方法；当只返回一个链接函数时，所创建的指令只能被当作一个属性来使用\n\n    - 对特定的元素注册事件\n    - 需要用到scope参数来实现dom元素行为\n```js\nlink: function(scope, element, attrs, ctrl, linker){\n    // scope: 指令所在作用域\n    // element: 指令元素\n    // attrs: 指令元素的属性的集合\n    // ctrl: 需要和require属性一起使用，用于调用其他指令的方法,指令之间的互相通信\n    // linker: transclude()函数\n    // do something\n}\n```\n\n##### require\n字符串或者数组\n\n    - 字符串代表另一个指令的名字，作为link函数的第四个参数\n    - 对应前缀查找控制器的行为\n        \n        - 没有前缀，指令会在自身提供的控制器中进行查找，如果找不到任何控制器，则会抛出一个error\n        - ？如果在当前的指令没有找到所需的控制器，则会将null传给link连接函数的第四个参数\n        - ^如果在当前的指令没有找到所需的控制器，则会查找父元素的控制器\n        - ?^组合\n\n##### priority\n指令的优先级，可选参数，若在单个DOM元素上有多个指令，则优先级高的先执行\n\n##### terminal\nbool型，可选参数，true/false ，若设置为true，则优先级低于此指令的其他指令则无效，不会被调用优先级相同任然会执行\n\n\n##### scope\nbool值或者对象，可选参数，默认为false，表示继承父级作用域\n- 如果值为true，表示继承父作用域，并创建自己的作用域(子作用域),即使同一个控制器里数据也不共享\n- 如果为对象，{}则表示创建一个全新的隔离作用域,不能使用父级对应的属性\n   通过绑定策略来访问父作用域的属性:\n   - 通过属性值进行绑定，可读取控制器中定义的属性值，使用@来进行单向文本（字符串）绑定，单项读取父级元素不能改变，这里引用的父级的属性只能是字符串，不能为对象，左右两边都是属性\n        ```html\n        <div isolated-directive other-name=\"{{ name }}\"></div> <!--{{ name }}为父作用域的值 -->\n \n        angular.module('myApp')\n            .directive(\"isolatedDirective\", function () {\n                return {\n                    scope: {\n                        name: '@otherName'\n                        },\n                    template: 'Name: {{ name }}'\n                    };\n            });\n        ```\n  - 使用'='创建在指令的独立作用域和外部作用域中的双向绑定对象\n        ```html\n        <div isolated-directive other-name=\"name\"></div> <!--{{ name }}为父作用域的值 -->\n        angular.module('myApp')\n            .directive(\"isolatedDirective\", function () {\n                return {\n                    scope: {\n                        name: '=otherName'\n                        },\n                    template: 'Name: {{ name }}'\n                    };\n            });\n        ```\n注意：这里@和= 在使用上的区别，一是功能的不同，二是调用方式不同，@使用other-name={{name}},=使用other-name=\"name\"\n\n  - 使用'&'调用父作用域中属性包装成一个函数或者父作用域的函数，从而以函数的方式读写父作用域的属性;允许传入一个可被指令内部调用的函数\n        ```html\n        <div isolated-directive action=\"click()\"></div>\n \n        angular.module('myApp')\n            .controller(\"myController\", function ($scope) {\n                $scope.value = \"hello world\";\n                $scope.click = function () {\n                        $scope.value = Math.random();\n                    };\n                })\n            .directive(\"isolatedDirective\", function () {\n                return {\n                    scope: {\n                        action: \"&\"\n                        },\n                    template: '<input type=\"button\" value=\"data\" ng-click=\"action()\"/>'\n                    }\n                })\n        <!-- 被传入到指令action属性的click()函数在控制器中定义, 当ng-click实际触发控制器中定义的action()函数 -->\n        ```\n```\n当为false时候，儿子继承父亲的值，改变父亲的值，儿子的值也随之变化，反之亦如此。（继承不隔离）\n当为true时候，儿子继承父亲的值，改变父亲的值，儿子的值随之变化，但是改变儿子的值，父亲的值不变。（继承隔离）\n当为{}时候，没有继承父亲的值，所以儿子的值为空，改变任何一方的值均不能影响另一方的值。（不继承隔离）\n\n```\n```html\n<head>\n    <title>Directive Scopes</title>\n    <script src=\"angular.js\"></script>\n    <link href=\"bootstrap.css\" rel=\"stylesheet\" />\n    <link href=\"bootstrap-theme.css\" rel=\"stylesheet\" />\n    <script type=\"text/ng-template\" id=\"scopeTemplate\">\n        <div class=\"panel-body\">\n            <p>Name: <input ng-model=\"data.name\" /></p>\n            <p>City: <input ng-model=\"city\" /></p>\n            <p>Country: <input ng-model=\"country\" /></p>\n        </div>\n    </script>\n    <script type=\"text/javascript\">\n        angular.module(\"exampleApp\", [])\n            .directive(\"scopeDemo\", function () {\n                return {\n                    template: function() {\n                        return angular.element(\n                            document.querySelector(\"#scopeTemplate\")).html();\n                    },\n                    scope: true,    //同一个控制器里数据也不共享\n                    scope: {\n                        local: \"@nameprop\"  //单项绑定，说明：属性local的值来自一个nameprop特性的单项绑定获得\n                        local: \"=nameprop\" //双向绑定\n                        cityFn: \"&city\" //&符号说明指定特性的值绑定到一个函数，左边为一个函数调用，右边为一个属性\n                    } //隔离作用域\n                }\n            })\n        .controller(\"scopeCtrl\", function ($scope) {\n            $scope.data = { name: \"Adam\" };\n            $scope.city = \"London\";\n        });\n    </script>\n \n</head>\n```\n##### transclude\n布尔值或者字符element，默认值为false，\n    true:提取包含在指令那个元素里面的内容，再将它放置在指令模板的特定位置。当我们开启transclude之后，我们就可以使用ng-transclude来指明应该在什么地方放置transclude的内容\n```html\n# html\n<head>\n    <title>Ttxsgoto</title>\n    <script src=\"angular.js\"></script>\n    <script src=\"app.js\"></script>\n    <link href=\"bootstrap.css\" rel=\"stylesheet\" />\n    <link href=\"bootstrap-theme.css\" rel=\"stylesheet\" />\n    <script type=\"text/ng-template\" id=\"transclude.html\">\n        <div>\n            abc:{{title}}<br>\n            def:<div ng-transclude></div>\n        </div>\n    </script>\n \n</head>\n<body>\n    <input ng-model=\"title\" /><br>\n    <textarea cols=\"30\" rows=\"4\" ng-model=\"text\"></textarea>\n    <div transclude-directive>{{text}}</div>\n</body>\n \n# js\n.directive(\"transcludeDirective\", function () {\n        return{\n            restrict: \"EACM\",\n            templateUrl: \"transclude.html\",\n            replace: true,\n            transclude: true\n        }\n \n    })\n```\n\n##### controller\n可以为字符串或者函数，可以直接在指令内部定义为匿名函数，同样可以注入任何服务\n- 如果为字符串，则将字符串当做是控制器的名字，来查找注册在应用中的控制器的构造函数\n- 直接在指令内部定义匿名函数\n\n##### controllerAs\n不用将属性和方法挂载到$scope上，而是this上；设置控制器别名\n\n","source":"_posts/angular-directive.md","raw":"---\ntitle: Angularjs Directive自定义指令\ndate: 2017-08-22 19:56:41\ntags:\n  - Angularjs\ncategories:\n  - Frontend\n---\n#### 创建自定义指令\n\n- 定义指令\n```js\n.directive('unorderedList', function() {\n    return function(scope, element, attrs) {\n        // scope:指令被应用到的视图的作用域\n        // element:指令被应用到的html元素\n        // attrs:html元素的属性\n        var data = scope[attrs[\"unorderedList\"]];\n        var name = attrs['Name'];\n        }\n    });\n```\n\n#### 自定义指令属性\n##### restrict\n可选参数，标识符在模板中作为元素，属性，类，注释或组合，默认为A\n    - E 元素名使用  <my-directive>123</my-directive>\n    - A 属性使用 <div my-directive> \n    - C 类名使用 <div class=\"my-directive\"></div>\n    - M 注释使用 <!-- directive: my-directive --> \n##### template\n指令内容表示为html\n\n    - 模板内容html文本，这个内容会根据replace参数的设置替换节点或只替换节点内容\n    - 一个函数，可以接受两个参数tElement和tAttrs\n        - tElement：是指使用此指令的元素\n        - tAttrs：实例的属性\n```html\n<hello-world title = '这是一个directive'></hello-world>\n \napp.directive(\"helloWorld\",function(){  \n        return{  \n         restrict:'EAC',  \n         template: function(tElement,tAttrs){  \n            var _html = '';  \n            _html += '<div>' +'hello '+tAttrs.title+'</div>';  \n            return _html;  \n         }  \n     };  \n });  \n\n```\n##### templateUrl\n外部模板文件\n    - 加载模板所要使用的URL\n    - 可以加载当前模板内对应的text/ng-template script id\n    - 大体同template\n\n##### replace\n指定模板内容是否替换掉指令所应用的元素\n    - 如果配置为true则替换指令所在元素,但是class和属性还是会，如果为false或者不指定，则把当前指令追加到所在元素内部\n    - 对于restrict为元素E 在最终效果中是多余的，所有replace通常设置为true\n    - 当replace属性为true的时候,template的最外层必须用一整个标签包裹起来\n```html\n<!--js-->\nangular.module('myApp',[])\n    .directive(\"myDirective\",function () {\n        return{\n            restrict: \"EACM\",\n            template: \"<h3>hello ttxs</h3>\",\n            replace: true\n        }\n    })\n<!--html-->\n    <div>\n        <my-directive></my-directive>\n        <div my-directive></div>\n        <div class=\"my-directive\"></div>\n        <!-- directive: my-directive -->\n    </div>\n\n```\n \n##### compile\n指令编译的三个阶段\n\n    1. 标准浏览器API转化-将html转化成dom，即自定义的html标签需要符合html格式\n    2. angular compile - 搜索匹配directive，按照priority排序，并执行directive上的compile方法\n    3. angular link 执行directive上的link方法，进行scope绑定及事件绑定\n\n- compile函数用来对模板自身进行转换，仅在编译阶段运行一次\n- compile中直接返回的函数时postLink,表示link参数需要执行的函数，也可以返回一个对象里面包括preLink和postLink\n- 当定义了compile参数，将忽略link参数，因为compile里返回的就是该指令需要执行的link函数\n- 想在dom渲染前对它进行操作，并不需要scope参数所在所有相同directive里共享某些方法，这时应该定义compile，性能比较好\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n<div ng-app=\"myApp\">\n    <div ng-controller=\"firstController\">\n        <!--1.将div转化为dom结构-->\n        <!--2. 默认的优先级为0，哪个先定义先使用-->\n        <div ng-repeat=\"user in users\" custom-directive>\n        <!--<div custom-directive>-->\n        </div>\n    </div>\n</div>\n \n<script type=\"text/javascript\" src=\"angularjs.js\"></script>\n<script type=\"text/javascript\" src=\"app/index.js\"></script>\n</body>\n</html>\n \n<!--js-->\nvar myApp = angular.module('myApp', [])\n    .directive(\"customDirective\", function () {\n        return{\n            restrict: 'ECAM',\n            template: '<div> {{user.name}} </div>',\n            replace:true ,\n            compile: function (tElement,tAttrs,transclude) {\n                console.info('编译阶段...,用于修改dom元素或结构');\n                tElement.append(angular.element(\"<span>abc</span>\"))\n                console.info(tElement); // 元素\n                console.info(tAttrs);   // 元素属性\n                console.info(transclude);   // transclude对象\n                return{\n                    // 编译阶段之后，指令连接到子元素之前运行\n                    pre: function preLink(scope,iElement,iAttrs,controller) {\n                        console.log('preLink......')\n \n                    },\n                    // 表示所有子元素指令都连接之后才运行\n                    post: function postLink(scope,iElement,iAttrs,controller) {\n                        iElement.on('click', function () {\n                            scope.$apply(function () {\n                                scope.user.name = 'click --> abd';  // 进行一次脏检查\n                            })\n                        });\n                        console.log('postLink......')\n                    }\n \n                };  // 这里return 的就是link函数\n \n                // postLink\n                // return function () {\n                //     console.info('compile function');\n                // }\n \n            },\n \n            // 该link函数表示的就是postlink\n            link:function () {\n                console.info('Link.....')\n            }\n        }\n    })\n \n    .controller('firstController', ['$scope', function ($scope) {\n        $scope.users = [\n            {\n                id:10,\n                name:'ttxsgoto01'\n            },\n            {\n                id:20,\n                name:'ttxsgoto02'\n            }\n        ];\n    }]);\n\n```\n\n##### link\n指令需要处理大量DOM操作时，使用link方法；当只返回一个链接函数时，所创建的指令只能被当作一个属性来使用\n\n    - 对特定的元素注册事件\n    - 需要用到scope参数来实现dom元素行为\n```js\nlink: function(scope, element, attrs, ctrl, linker){\n    // scope: 指令所在作用域\n    // element: 指令元素\n    // attrs: 指令元素的属性的集合\n    // ctrl: 需要和require属性一起使用，用于调用其他指令的方法,指令之间的互相通信\n    // linker: transclude()函数\n    // do something\n}\n```\n\n##### require\n字符串或者数组\n\n    - 字符串代表另一个指令的名字，作为link函数的第四个参数\n    - 对应前缀查找控制器的行为\n        \n        - 没有前缀，指令会在自身提供的控制器中进行查找，如果找不到任何控制器，则会抛出一个error\n        - ？如果在当前的指令没有找到所需的控制器，则会将null传给link连接函数的第四个参数\n        - ^如果在当前的指令没有找到所需的控制器，则会查找父元素的控制器\n        - ?^组合\n\n##### priority\n指令的优先级，可选参数，若在单个DOM元素上有多个指令，则优先级高的先执行\n\n##### terminal\nbool型，可选参数，true/false ，若设置为true，则优先级低于此指令的其他指令则无效，不会被调用优先级相同任然会执行\n\n\n##### scope\nbool值或者对象，可选参数，默认为false，表示继承父级作用域\n- 如果值为true，表示继承父作用域，并创建自己的作用域(子作用域),即使同一个控制器里数据也不共享\n- 如果为对象，{}则表示创建一个全新的隔离作用域,不能使用父级对应的属性\n   通过绑定策略来访问父作用域的属性:\n   - 通过属性值进行绑定，可读取控制器中定义的属性值，使用@来进行单向文本（字符串）绑定，单项读取父级元素不能改变，这里引用的父级的属性只能是字符串，不能为对象，左右两边都是属性\n        ```html\n        <div isolated-directive other-name=\"{{ name }}\"></div> <!--{{ name }}为父作用域的值 -->\n \n        angular.module('myApp')\n            .directive(\"isolatedDirective\", function () {\n                return {\n                    scope: {\n                        name: '@otherName'\n                        },\n                    template: 'Name: {{ name }}'\n                    };\n            });\n        ```\n  - 使用'='创建在指令的独立作用域和外部作用域中的双向绑定对象\n        ```html\n        <div isolated-directive other-name=\"name\"></div> <!--{{ name }}为父作用域的值 -->\n        angular.module('myApp')\n            .directive(\"isolatedDirective\", function () {\n                return {\n                    scope: {\n                        name: '=otherName'\n                        },\n                    template: 'Name: {{ name }}'\n                    };\n            });\n        ```\n注意：这里@和= 在使用上的区别，一是功能的不同，二是调用方式不同，@使用other-name={{name}},=使用other-name=\"name\"\n\n  - 使用'&'调用父作用域中属性包装成一个函数或者父作用域的函数，从而以函数的方式读写父作用域的属性;允许传入一个可被指令内部调用的函数\n        ```html\n        <div isolated-directive action=\"click()\"></div>\n \n        angular.module('myApp')\n            .controller(\"myController\", function ($scope) {\n                $scope.value = \"hello world\";\n                $scope.click = function () {\n                        $scope.value = Math.random();\n                    };\n                })\n            .directive(\"isolatedDirective\", function () {\n                return {\n                    scope: {\n                        action: \"&\"\n                        },\n                    template: '<input type=\"button\" value=\"data\" ng-click=\"action()\"/>'\n                    }\n                })\n        <!-- 被传入到指令action属性的click()函数在控制器中定义, 当ng-click实际触发控制器中定义的action()函数 -->\n        ```\n```\n当为false时候，儿子继承父亲的值，改变父亲的值，儿子的值也随之变化，反之亦如此。（继承不隔离）\n当为true时候，儿子继承父亲的值，改变父亲的值，儿子的值随之变化，但是改变儿子的值，父亲的值不变。（继承隔离）\n当为{}时候，没有继承父亲的值，所以儿子的值为空，改变任何一方的值均不能影响另一方的值。（不继承隔离）\n\n```\n```html\n<head>\n    <title>Directive Scopes</title>\n    <script src=\"angular.js\"></script>\n    <link href=\"bootstrap.css\" rel=\"stylesheet\" />\n    <link href=\"bootstrap-theme.css\" rel=\"stylesheet\" />\n    <script type=\"text/ng-template\" id=\"scopeTemplate\">\n        <div class=\"panel-body\">\n            <p>Name: <input ng-model=\"data.name\" /></p>\n            <p>City: <input ng-model=\"city\" /></p>\n            <p>Country: <input ng-model=\"country\" /></p>\n        </div>\n    </script>\n    <script type=\"text/javascript\">\n        angular.module(\"exampleApp\", [])\n            .directive(\"scopeDemo\", function () {\n                return {\n                    template: function() {\n                        return angular.element(\n                            document.querySelector(\"#scopeTemplate\")).html();\n                    },\n                    scope: true,    //同一个控制器里数据也不共享\n                    scope: {\n                        local: \"@nameprop\"  //单项绑定，说明：属性local的值来自一个nameprop特性的单项绑定获得\n                        local: \"=nameprop\" //双向绑定\n                        cityFn: \"&city\" //&符号说明指定特性的值绑定到一个函数，左边为一个函数调用，右边为一个属性\n                    } //隔离作用域\n                }\n            })\n        .controller(\"scopeCtrl\", function ($scope) {\n            $scope.data = { name: \"Adam\" };\n            $scope.city = \"London\";\n        });\n    </script>\n \n</head>\n```\n##### transclude\n布尔值或者字符element，默认值为false，\n    true:提取包含在指令那个元素里面的内容，再将它放置在指令模板的特定位置。当我们开启transclude之后，我们就可以使用ng-transclude来指明应该在什么地方放置transclude的内容\n```html\n# html\n<head>\n    <title>Ttxsgoto</title>\n    <script src=\"angular.js\"></script>\n    <script src=\"app.js\"></script>\n    <link href=\"bootstrap.css\" rel=\"stylesheet\" />\n    <link href=\"bootstrap-theme.css\" rel=\"stylesheet\" />\n    <script type=\"text/ng-template\" id=\"transclude.html\">\n        <div>\n            abc:{{title}}<br>\n            def:<div ng-transclude></div>\n        </div>\n    </script>\n \n</head>\n<body>\n    <input ng-model=\"title\" /><br>\n    <textarea cols=\"30\" rows=\"4\" ng-model=\"text\"></textarea>\n    <div transclude-directive>{{text}}</div>\n</body>\n \n# js\n.directive(\"transcludeDirective\", function () {\n        return{\n            restrict: \"EACM\",\n            templateUrl: \"transclude.html\",\n            replace: true,\n            transclude: true\n        }\n \n    })\n```\n\n##### controller\n可以为字符串或者函数，可以直接在指令内部定义为匿名函数，同样可以注入任何服务\n- 如果为字符串，则将字符串当做是控制器的名字，来查找注册在应用中的控制器的构造函数\n- 直接在指令内部定义匿名函数\n\n##### controllerAs\n不用将属性和方法挂载到$scope上，而是this上；设置控制器别名\n\n","slug":"angular-directive","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5uq000ict8ugfp9b0iz","content":"<h4 id=\"创建自定义指令\"><a href=\"#创建自定义指令\" class=\"headerlink\" title=\"创建自定义指令\"></a>创建自定义指令</h4><ul>\n<li>定义指令<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'unorderedList'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// scope:指令被应用到的视图的作用域</span></div><div class=\"line\">        <span class=\"comment\">// element:指令被应用到的html元素</span></div><div class=\"line\">        <span class=\"comment\">// attrs:html元素的属性</span></div><div class=\"line\">        <span class=\"keyword\">var</span> data = scope[attrs[<span class=\"string\">\"unorderedList\"</span>]];</div><div class=\"line\">        <span class=\"keyword\">var</span> name = attrs[<span class=\"string\">'Name'</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"自定义指令属性\"><a href=\"#自定义指令属性\" class=\"headerlink\" title=\"自定义指令属性\"></a>自定义指令属性</h4><h5 id=\"restrict\"><a href=\"#restrict\" class=\"headerlink\" title=\"restrict\"></a>restrict</h5><p>可选参数，标识符在模板中作为元素，属性，类，注释或组合，默认为A</p>\n<pre><code>- E 元素名使用  &lt;my-directive&gt;123&lt;/my-directive&gt;\n- A 属性使用 &lt;div my-directive&gt; \n- C 类名使用 &lt;div class=&quot;my-directive&quot;&gt;&lt;/div&gt;\n- M 注释使用 &lt;!-- directive: my-directive --&gt; \n</code></pre><h5 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h5><p>指令内容表示为html</p>\n<pre><code>- 模板内容html文本，这个内容会根据replace参数的设置替换节点或只替换节点内容\n- 一个函数，可以接受两个参数tElement和tAttrs\n    - tElement：是指使用此指令的元素\n    - tAttrs：实例的属性\n</code></pre><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hello-world</span> <span class=\"attr\">title</span> = <span class=\"string\">'这是一个directive'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello-world</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">app.directive(\"helloWorld\",function()&#123;  </div><div class=\"line\">        return&#123;  </div><div class=\"line\">         restrict:'EAC',  </div><div class=\"line\">         template: function(tElement,tAttrs)&#123;  </div><div class=\"line\">            var _html = '';  </div><div class=\"line\">            _html += '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>' +'hello '+tAttrs.title+'<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>';  </div><div class=\"line\">            return _html;  </div><div class=\"line\">         &#125;  </div><div class=\"line\">     &#125;;  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"templateUrl\"><a href=\"#templateUrl\" class=\"headerlink\" title=\"templateUrl\"></a>templateUrl</h5><p>外部模板文件</p>\n<pre><code>- 加载模板所要使用的URL\n- 可以加载当前模板内对应的text/ng-template script id\n- 大体同template\n</code></pre><h5 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h5><p>指定模板内容是否替换掉指令所应用的元素</p>\n<pre><code>- 如果配置为true则替换指令所在元素,但是class和属性还是会，如果为false或者不指定，则把当前指令追加到所在元素内部\n- 对于restrict为元素E 在最终效果中是多余的，所有replace通常设置为true\n- 当replace属性为true的时候,template的最外层必须用一整个标签包裹起来\n</code></pre><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--js--&gt;</span></div><div class=\"line\">angular.module('myApp',[])</div><div class=\"line\">    .directive(\"myDirective\",function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            restrict: \"EACM\",</div><div class=\"line\">            template: \"<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>hello ttxs<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>\",</div><div class=\"line\">            replace: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"comment\">&lt;!--html--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">my-directive</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-directive</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">my-directive</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my-directive\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- directive: my-directive --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h5><p>指令编译的三个阶段</p>\n<pre><code>1. 标准浏览器API转化-将html转化成dom，即自定义的html标签需要符合html格式\n2. angular compile - 搜索匹配directive，按照priority排序，并执行directive上的compile方法\n3. angular link 执行directive上的link方法，进行scope绑定及事件绑定\n</code></pre><ul>\n<li>compile函数用来对模板自身进行转换，仅在编译阶段运行一次</li>\n<li>compile中直接返回的函数时postLink,表示link参数需要执行的函数，也可以返回一个对象里面包括preLink和postLink</li>\n<li>当定义了compile参数，将忽略link参数，因为compile里返回的就是该指令需要执行的link函数</li>\n<li>想在dom渲染前对它进行操作，并不需要scope参数所在所有相同directive里共享某些方法，这时应该定义compile，性能比较好</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"firstController\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--1.将div转化为dom结构--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--2. 默认的优先级为0，哪个先定义先使用--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"user in users\"</span> <span class=\"attr\">custom-directive</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;div custom-directive&gt;--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angularjs.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">&lt;!--js--&gt;</span></div><div class=\"line\">var myApp = angular.module('myApp', [])</div><div class=\"line\">    .directive(\"customDirective\", function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            restrict: 'ECAM',</div><div class=\"line\">            template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> &#123;&#123;user.name&#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>',</div><div class=\"line\">            replace:true ,</div><div class=\"line\">            compile: function (tElement,tAttrs,transclude) &#123;</div><div class=\"line\">                console.info('编译阶段...,用于修改dom元素或结构');</div><div class=\"line\">                tElement.append(angular.element(\"<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>abc<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>\"))</div><div class=\"line\">                console.info(tElement); // 元素</div><div class=\"line\">                console.info(tAttrs);   // 元素属性</div><div class=\"line\">                console.info(transclude);   // transclude对象</div><div class=\"line\">                return&#123;</div><div class=\"line\">                    // 编译阶段之后，指令连接到子元素之前运行</div><div class=\"line\">                    pre: function preLink(scope,iElement,iAttrs,controller) &#123;</div><div class=\"line\">                        console.log('preLink......')</div><div class=\"line\"> </div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    // 表示所有子元素指令都连接之后才运行</div><div class=\"line\">                    post: function postLink(scope,iElement,iAttrs,controller) &#123;</div><div class=\"line\">                        iElement.on('click', function () &#123;</div><div class=\"line\">                            scope.$apply(function () &#123;</div><div class=\"line\">                                scope.user.name = 'click --&gt; abd';  // 进行一次脏检查</div><div class=\"line\">                            &#125;)</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                        console.log('postLink......')</div><div class=\"line\">                    &#125;</div><div class=\"line\"> </div><div class=\"line\">                &#125;;  // 这里return 的就是link函数</div><div class=\"line\"> </div><div class=\"line\">                // postLink</div><div class=\"line\">                // return function () &#123;</div><div class=\"line\">                //     console.info('compile function');</div><div class=\"line\">                // &#125;</div><div class=\"line\"> </div><div class=\"line\">            &#125;,</div><div class=\"line\"> </div><div class=\"line\">            // 该link函数表示的就是postlink</div><div class=\"line\">            link:function () &#123;</div><div class=\"line\">                console.info('Link.....')</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"> </div><div class=\"line\">    .controller('firstController', ['$scope', function ($scope) &#123;</div><div class=\"line\">        $scope.users = [</div><div class=\"line\">            &#123;</div><div class=\"line\">                id:10,</div><div class=\"line\">                name:'ttxsgoto01'</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                id:20,</div><div class=\"line\">                name:'ttxsgoto02'</div><div class=\"line\">            &#125;</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;]);</div></pre></td></tr></table></figure>\n<h5 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h5><p>指令需要处理大量DOM操作时，使用link方法；当只返回一个链接函数时，所创建的指令只能被当作一个属性来使用</p>\n<pre><code>- 对特定的元素注册事件\n- 需要用到scope参数来实现dom元素行为\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs, ctrl, linker</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// scope: 指令所在作用域</span></div><div class=\"line\">    <span class=\"comment\">// element: 指令元素</span></div><div class=\"line\">    <span class=\"comment\">// attrs: 指令元素的属性的集合</span></div><div class=\"line\">    <span class=\"comment\">// ctrl: 需要和require属性一起使用，用于调用其他指令的方法,指令之间的互相通信</span></div><div class=\"line\">    <span class=\"comment\">// linker: transclude()函数</span></div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h5><p>字符串或者数组</p>\n<pre><code>- 字符串代表另一个指令的名字，作为link函数的第四个参数\n- 对应前缀查找控制器的行为\n\n    - 没有前缀，指令会在自身提供的控制器中进行查找，如果找不到任何控制器，则会抛出一个error\n    - ？如果在当前的指令没有找到所需的控制器，则会将null传给link连接函数的第四个参数\n    - ^如果在当前的指令没有找到所需的控制器，则会查找父元素的控制器\n    - ?^组合\n</code></pre><h5 id=\"priority\"><a href=\"#priority\" class=\"headerlink\" title=\"priority\"></a>priority</h5><p>指令的优先级，可选参数，若在单个DOM元素上有多个指令，则优先级高的先执行</p>\n<h5 id=\"terminal\"><a href=\"#terminal\" class=\"headerlink\" title=\"terminal\"></a>terminal</h5><p>bool型，可选参数，true/false ，若设置为true，则优先级低于此指令的其他指令则无效，不会被调用优先级相同任然会执行</p>\n<h5 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h5><p>bool值或者对象，可选参数，默认为false，表示继承父级作用域</p>\n<ul>\n<li>如果值为true，表示继承父作用域，并创建自己的作用域(子作用域),即使同一个控制器里数据也不共享</li>\n<li><p>如果为对象，{}则表示创建一个全新的隔离作用域,不能使用父级对应的属性<br> 通过绑定策略来访问父作用域的属性:</p>\n<ul>\n<li>通过属性值进行绑定，可读取控制器中定义的属性值，使用@来进行单向文本（字符串）绑定，单项读取父级元素不能改变，这里引用的父级的属性只能是字符串，不能为对象，左右两边都是属性   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">isolated-directive</span> <span class=\"attr\">other-name</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class=\"line\"> </div><div class=\"line\">angular.module('myApp')</div><div class=\"line\">    .directive(\"isolatedDirective\", function () &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            scope: &#123;</div><div class=\"line\">                name: '@otherName'</div><div class=\"line\">                &#125;,</div><div class=\"line\">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class=\"line\">            &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>使用’=’创建在指令的独立作用域和外部作用域中的双向绑定对象<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">isolated-directive</span> <span class=\"attr\">other-name</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class=\"line\">angular.module('myApp')</div><div class=\"line\">    .directive(\"isolatedDirective\", function () &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            scope: &#123;</div><div class=\"line\">                name: '=otherName'</div><div class=\"line\">                &#125;,</div><div class=\"line\">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class=\"line\">            &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<p>注意：这里@和= 在使用上的区别，一是功能的不同，二是调用方式不同，@使用other-name=,=使用other-name=”name”</p>\n<ul>\n<li>使用’&amp;’调用父作用域中属性包装成一个函数或者父作用域的函数，从而以函数的方式读写父作用域的属性;允许传入一个可被指令内部调用的函数<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">isolated-directive</span> <span class=\"attr\">action</span>=<span class=\"string\">\"click()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">angular.module('myApp')</div><div class=\"line\">    .controller(\"myController\", function ($scope) &#123;</div><div class=\"line\">        $scope.value = \"hello world\";</div><div class=\"line\">        $scope.click = function () &#123;</div><div class=\"line\">                $scope.value = Math.random();</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    .directive(\"isolatedDirective\", function () &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            scope: &#123;</div><div class=\"line\">                action: \"&amp;\"</div><div class=\"line\">                &#125;,</div><div class=\"line\">            template: '<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"data\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"action()\"</span>/&gt;</span>'</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\"><span class=\"comment\">&lt;!-- 被传入到指令action属性的click()函数在控制器中定义, 当ng-click实际触发控制器中定义的action()函数 --&gt;</span></div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">当为false时候，儿子继承父亲的值，改变父亲的值，儿子的值也随之变化，反之亦如此。（继承不隔离）</div><div class=\"line\">当为true时候，儿子继承父亲的值，改变父亲的值，儿子的值随之变化，但是改变儿子的值，父亲的值不变。（继承隔离）</div><div class=\"line\">当为&#123;&#125;时候，没有继承父亲的值，所以儿子的值为空，改变任何一方的值均不能影响另一方的值。（不继承隔离）</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Directive Scopes<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap-theme.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scopeTemplate\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-body\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"data.name\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>City: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"city\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Country: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"country\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        angular.module(<span class=\"string\">\"exampleApp\"</span>, [])</div><div class=\"line\">            .directive(<span class=\"string\">\"scopeDemo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                    <span class=\"attr\">template</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> angular.element(</div><div class=\"line\">                            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#scopeTemplate\"</span>)).html();</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"attr\">scope</span>: <span class=\"literal\">true</span>,    <span class=\"comment\">//同一个控制器里数据也不共享</span></div><div class=\"line\">                    scope: &#123;</div><div class=\"line\">                        <span class=\"attr\">local</span>: <span class=\"string\">\"@nameprop\"</span>  <span class=\"comment\">//单项绑定，说明：属性local的值来自一个nameprop特性的单项绑定获得</span></div><div class=\"line\">                        local: <span class=\"string\">\"=nameprop\"</span> <span class=\"comment\">//双向绑定</span></div><div class=\"line\">                        cityFn: <span class=\"string\">\"&amp;city\"</span> <span class=\"comment\">//&amp;符号说明指定特性的值绑定到一个函数，左边为一个函数调用，右边为一个属性</span></div><div class=\"line\">                    &#125; <span class=\"comment\">//隔离作用域</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        .controller(<span class=\"string\">\"scopeCtrl\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">            $scope.data = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Adam\"</span> &#125;;</div><div class=\"line\">            $scope.city = <span class=\"string\">\"London\"</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"transclude\"><a href=\"#transclude\" class=\"headerlink\" title=\"transclude\"></a>transclude</h5><p>布尔值或者字符element，默认值为false，<br>    true:提取包含在指令那个元素里面的内容，再将它放置在指令模板的特定位置。当我们开启transclude之后，我们就可以使用ng-transclude来指明应该在什么地方放置transclude的内容<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Ttxsgoto<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap-theme.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transclude.html\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            abc:&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">            def:<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-transclude</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"title\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">transclude-directive</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"># js</div><div class=\"line\">.directive(\"transcludeDirective\", function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            restrict: \"EACM\",</div><div class=\"line\">            templateUrl: \"transclude.html\",</div><div class=\"line\">            replace: true,</div><div class=\"line\">            transclude: true</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<h5 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h5><p>可以为字符串或者函数，可以直接在指令内部定义为匿名函数，同样可以注入任何服务</p>\n<ul>\n<li>如果为字符串，则将字符串当做是控制器的名字，来查找注册在应用中的控制器的构造函数</li>\n<li>直接在指令内部定义匿名函数</li>\n</ul>\n<h5 id=\"controllerAs\"><a href=\"#controllerAs\" class=\"headerlink\" title=\"controllerAs\"></a>controllerAs</h5><p>不用将属性和方法挂载到$scope上，而是this上；设置控制器别名</p>\n","excerpt":"","more":"<h4 id=\"创建自定义指令\"><a href=\"#创建自定义指令\" class=\"headerlink\" title=\"创建自定义指令\"></a>创建自定义指令</h4><ul>\n<li>定义指令<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'unorderedList'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// scope:指令被应用到的视图的作用域</span></div><div class=\"line\">        <span class=\"comment\">// element:指令被应用到的html元素</span></div><div class=\"line\">        <span class=\"comment\">// attrs:html元素的属性</span></div><div class=\"line\">        <span class=\"keyword\">var</span> data = scope[attrs[<span class=\"string\">\"unorderedList\"</span>]];</div><div class=\"line\">        <span class=\"keyword\">var</span> name = attrs[<span class=\"string\">'Name'</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"自定义指令属性\"><a href=\"#自定义指令属性\" class=\"headerlink\" title=\"自定义指令属性\"></a>自定义指令属性</h4><h5 id=\"restrict\"><a href=\"#restrict\" class=\"headerlink\" title=\"restrict\"></a>restrict</h5><p>可选参数，标识符在模板中作为元素，属性，类，注释或组合，默认为A</p>\n<pre><code>- E 元素名使用  &lt;my-directive&gt;123&lt;/my-directive&gt;\n- A 属性使用 &lt;div my-directive&gt; \n- C 类名使用 &lt;div class=&quot;my-directive&quot;&gt;&lt;/div&gt;\n- M 注释使用 &lt;!-- directive: my-directive --&gt; \n</code></pre><h5 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h5><p>指令内容表示为html</p>\n<pre><code>- 模板内容html文本，这个内容会根据replace参数的设置替换节点或只替换节点内容\n- 一个函数，可以接受两个参数tElement和tAttrs\n    - tElement：是指使用此指令的元素\n    - tAttrs：实例的属性\n</code></pre><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hello-world</span> <span class=\"attr\">title</span> = <span class=\"string\">'这是一个directive'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello-world</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">app.directive(\"helloWorld\",function()&#123;  </div><div class=\"line\">        return&#123;  </div><div class=\"line\">         restrict:'EAC',  </div><div class=\"line\">         template: function(tElement,tAttrs)&#123;  </div><div class=\"line\">            var _html = '';  </div><div class=\"line\">            _html += '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>' +'hello '+tAttrs.title+'<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>';  </div><div class=\"line\">            return _html;  </div><div class=\"line\">         &#125;  </div><div class=\"line\">     &#125;;  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"templateUrl\"><a href=\"#templateUrl\" class=\"headerlink\" title=\"templateUrl\"></a>templateUrl</h5><p>外部模板文件</p>\n<pre><code>- 加载模板所要使用的URL\n- 可以加载当前模板内对应的text/ng-template script id\n- 大体同template\n</code></pre><h5 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h5><p>指定模板内容是否替换掉指令所应用的元素</p>\n<pre><code>- 如果配置为true则替换指令所在元素,但是class和属性还是会，如果为false或者不指定，则把当前指令追加到所在元素内部\n- 对于restrict为元素E 在最终效果中是多余的，所有replace通常设置为true\n- 当replace属性为true的时候,template的最外层必须用一整个标签包裹起来\n</code></pre><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--js--&gt;</span></div><div class=\"line\">angular.module('myApp',[])</div><div class=\"line\">    .directive(\"myDirective\",function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            restrict: \"EACM\",</div><div class=\"line\">            template: \"<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>hello ttxs<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>\",</div><div class=\"line\">            replace: true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"comment\">&lt;!--html--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">my-directive</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-directive</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">my-directive</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my-directive\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- directive: my-directive --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h5><p>指令编译的三个阶段</p>\n<pre><code>1. 标准浏览器API转化-将html转化成dom，即自定义的html标签需要符合html格式\n2. angular compile - 搜索匹配directive，按照priority排序，并执行directive上的compile方法\n3. angular link 执行directive上的link方法，进行scope绑定及事件绑定\n</code></pre><ul>\n<li>compile函数用来对模板自身进行转换，仅在编译阶段运行一次</li>\n<li>compile中直接返回的函数时postLink,表示link参数需要执行的函数，也可以返回一个对象里面包括preLink和postLink</li>\n<li>当定义了compile参数，将忽略link参数，因为compile里返回的就是该指令需要执行的link函数</li>\n<li>想在dom渲染前对它进行操作，并不需要scope参数所在所有相同directive里共享某些方法，这时应该定义compile，性能比较好</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"myApp\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"firstController\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--1.将div转化为dom结构--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--2. 默认的优先级为0，哪个先定义先使用--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"user in users\"</span> <span class=\"attr\">custom-directive</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;div custom-directive&gt;--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angularjs.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">&lt;!--js--&gt;</span></div><div class=\"line\">var myApp = angular.module('myApp', [])</div><div class=\"line\">    .directive(\"customDirective\", function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            restrict: 'ECAM',</div><div class=\"line\">            template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> &#123;&#123;user.name&#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>',</div><div class=\"line\">            replace:true ,</div><div class=\"line\">            compile: function (tElement,tAttrs,transclude) &#123;</div><div class=\"line\">                console.info('编译阶段...,用于修改dom元素或结构');</div><div class=\"line\">                tElement.append(angular.element(\"<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>abc<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>\"))</div><div class=\"line\">                console.info(tElement); // 元素</div><div class=\"line\">                console.info(tAttrs);   // 元素属性</div><div class=\"line\">                console.info(transclude);   // transclude对象</div><div class=\"line\">                return&#123;</div><div class=\"line\">                    // 编译阶段之后，指令连接到子元素之前运行</div><div class=\"line\">                    pre: function preLink(scope,iElement,iAttrs,controller) &#123;</div><div class=\"line\">                        console.log('preLink......')</div><div class=\"line\"> </div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    // 表示所有子元素指令都连接之后才运行</div><div class=\"line\">                    post: function postLink(scope,iElement,iAttrs,controller) &#123;</div><div class=\"line\">                        iElement.on('click', function () &#123;</div><div class=\"line\">                            scope.$apply(function () &#123;</div><div class=\"line\">                                scope.user.name = 'click --&gt; abd';  // 进行一次脏检查</div><div class=\"line\">                            &#125;)</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                        console.log('postLink......')</div><div class=\"line\">                    &#125;</div><div class=\"line\"> </div><div class=\"line\">                &#125;;  // 这里return 的就是link函数</div><div class=\"line\"> </div><div class=\"line\">                // postLink</div><div class=\"line\">                // return function () &#123;</div><div class=\"line\">                //     console.info('compile function');</div><div class=\"line\">                // &#125;</div><div class=\"line\"> </div><div class=\"line\">            &#125;,</div><div class=\"line\"> </div><div class=\"line\">            // 该link函数表示的就是postlink</div><div class=\"line\">            link:function () &#123;</div><div class=\"line\">                console.info('Link.....')</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"> </div><div class=\"line\">    .controller('firstController', ['$scope', function ($scope) &#123;</div><div class=\"line\">        $scope.users = [</div><div class=\"line\">            &#123;</div><div class=\"line\">                id:10,</div><div class=\"line\">                name:'ttxsgoto01'</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                id:20,</div><div class=\"line\">                name:'ttxsgoto02'</div><div class=\"line\">            &#125;</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;]);</div></pre></td></tr></table></figure>\n<h5 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h5><p>指令需要处理大量DOM操作时，使用link方法；当只返回一个链接函数时，所创建的指令只能被当作一个属性来使用</p>\n<pre><code>- 对特定的元素注册事件\n- 需要用到scope参数来实现dom元素行为\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs, ctrl, linker</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// scope: 指令所在作用域</span></div><div class=\"line\">    <span class=\"comment\">// element: 指令元素</span></div><div class=\"line\">    <span class=\"comment\">// attrs: 指令元素的属性的集合</span></div><div class=\"line\">    <span class=\"comment\">// ctrl: 需要和require属性一起使用，用于调用其他指令的方法,指令之间的互相通信</span></div><div class=\"line\">    <span class=\"comment\">// linker: transclude()函数</span></div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h5><p>字符串或者数组</p>\n<pre><code>- 字符串代表另一个指令的名字，作为link函数的第四个参数\n- 对应前缀查找控制器的行为\n\n    - 没有前缀，指令会在自身提供的控制器中进行查找，如果找不到任何控制器，则会抛出一个error\n    - ？如果在当前的指令没有找到所需的控制器，则会将null传给link连接函数的第四个参数\n    - ^如果在当前的指令没有找到所需的控制器，则会查找父元素的控制器\n    - ?^组合\n</code></pre><h5 id=\"priority\"><a href=\"#priority\" class=\"headerlink\" title=\"priority\"></a>priority</h5><p>指令的优先级，可选参数，若在单个DOM元素上有多个指令，则优先级高的先执行</p>\n<h5 id=\"terminal\"><a href=\"#terminal\" class=\"headerlink\" title=\"terminal\"></a>terminal</h5><p>bool型，可选参数，true/false ，若设置为true，则优先级低于此指令的其他指令则无效，不会被调用优先级相同任然会执行</p>\n<h5 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h5><p>bool值或者对象，可选参数，默认为false，表示继承父级作用域</p>\n<ul>\n<li>如果值为true，表示继承父作用域，并创建自己的作用域(子作用域),即使同一个控制器里数据也不共享</li>\n<li><p>如果为对象，{}则表示创建一个全新的隔离作用域,不能使用父级对应的属性<br> 通过绑定策略来访问父作用域的属性:</p>\n<ul>\n<li>通过属性值进行绑定，可读取控制器中定义的属性值，使用@来进行单向文本（字符串）绑定，单项读取父级元素不能改变，这里引用的父级的属性只能是字符串，不能为对象，左右两边都是属性   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">isolated-directive</span> <span class=\"attr\">other-name</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class=\"line\"> </div><div class=\"line\">angular.module('myApp')</div><div class=\"line\">    .directive(\"isolatedDirective\", function () &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            scope: &#123;</div><div class=\"line\">                name: '@otherName'</div><div class=\"line\">                &#125;,</div><div class=\"line\">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class=\"line\">            &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>使用’=’创建在指令的独立作用域和外部作用域中的双向绑定对象<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">isolated-directive</span> <span class=\"attr\">other-name</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!--&#123;&#123; name &#125;&#125;为父作用域的值 --&gt;</span></div><div class=\"line\">angular.module('myApp')</div><div class=\"line\">    .directive(\"isolatedDirective\", function () &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            scope: &#123;</div><div class=\"line\">                name: '=otherName'</div><div class=\"line\">                &#125;,</div><div class=\"line\">            template: 'Name: &#123;&#123; name &#125;&#125;'</div><div class=\"line\">            &#125;;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<p>注意：这里@和= 在使用上的区别，一是功能的不同，二是调用方式不同，@使用other-name=,=使用other-name=”name”</p>\n<ul>\n<li>使用’&amp;’调用父作用域中属性包装成一个函数或者父作用域的函数，从而以函数的方式读写父作用域的属性;允许传入一个可被指令内部调用的函数<pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">isolated-directive</span> <span class=\"attr\">action</span>=<span class=\"string\">\"click()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">angular.module('myApp')</div><div class=\"line\">    .controller(\"myController\", function ($scope) &#123;</div><div class=\"line\">        $scope.value = \"hello world\";</div><div class=\"line\">        $scope.click = function () &#123;</div><div class=\"line\">                $scope.value = Math.random();</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    .directive(\"isolatedDirective\", function () &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            scope: &#123;</div><div class=\"line\">                action: \"&amp;\"</div><div class=\"line\">                &#125;,</div><div class=\"line\">            template: '<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"data\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"action()\"</span>/&gt;</span>'</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\"><span class=\"comment\">&lt;!-- 被传入到指令action属性的click()函数在控制器中定义, 当ng-click实际触发控制器中定义的action()函数 --&gt;</span></div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">当为false时候，儿子继承父亲的值，改变父亲的值，儿子的值也随之变化，反之亦如此。（继承不隔离）</div><div class=\"line\">当为true时候，儿子继承父亲的值，改变父亲的值，儿子的值随之变化，但是改变儿子的值，父亲的值不变。（继承隔离）</div><div class=\"line\">当为&#123;&#125;时候，没有继承父亲的值，所以儿子的值为空，改变任何一方的值均不能影响另一方的值。（不继承隔离）</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Directive Scopes<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap-theme.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scopeTemplate\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-body\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"data.name\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>City: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"city\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Country: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"country\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">        angular.module(<span class=\"string\">\"exampleApp\"</span>, [])</div><div class=\"line\">            .directive(<span class=\"string\">\"scopeDemo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                    <span class=\"attr\">template</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> angular.element(</div><div class=\"line\">                            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#scopeTemplate\"</span>)).html();</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"attr\">scope</span>: <span class=\"literal\">true</span>,    <span class=\"comment\">//同一个控制器里数据也不共享</span></div><div class=\"line\">                    scope: &#123;</div><div class=\"line\">                        <span class=\"attr\">local</span>: <span class=\"string\">\"@nameprop\"</span>  <span class=\"comment\">//单项绑定，说明：属性local的值来自一个nameprop特性的单项绑定获得</span></div><div class=\"line\">                        local: <span class=\"string\">\"=nameprop\"</span> <span class=\"comment\">//双向绑定</span></div><div class=\"line\">                        cityFn: <span class=\"string\">\"&amp;city\"</span> <span class=\"comment\">//&amp;符号说明指定特性的值绑定到一个函数，左边为一个函数调用，右边为一个属性</span></div><div class=\"line\">                    &#125; <span class=\"comment\">//隔离作用域</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        .controller(<span class=\"string\">\"scopeCtrl\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">            $scope.data = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Adam\"</span> &#125;;</div><div class=\"line\">            $scope.city = <span class=\"string\">\"London\"</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"transclude\"><a href=\"#transclude\" class=\"headerlink\" title=\"transclude\"></a>transclude</h5><p>布尔值或者字符element，默认值为false，<br>    true:提取包含在指令那个元素里面的内容，再将它放置在指令模板的特定位置。当我们开启transclude之后，我们就可以使用ng-transclude来指明应该在什么地方放置transclude的内容<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"># html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Ttxsgoto<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bootstrap-theme.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transclude.html\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            abc:&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">            def:<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-transclude</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"title\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">transclude-directive</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"># js</div><div class=\"line\">.directive(\"transcludeDirective\", function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            restrict: \"EACM\",</div><div class=\"line\">            templateUrl: \"transclude.html\",</div><div class=\"line\">            replace: true,</div><div class=\"line\">            transclude: true</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<h5 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h5><p>可以为字符串或者函数，可以直接在指令内部定义为匿名函数，同样可以注入任何服务</p>\n<ul>\n<li>如果为字符串，则将字符串当做是控制器的名字，来查找注册在应用中的控制器的构造函数</li>\n<li>直接在指令内部定义匿名函数</li>\n</ul>\n<h5 id=\"controllerAs\"><a href=\"#controllerAs\" class=\"headerlink\" title=\"controllerAs\"></a>controllerAs</h5><p>不用将属性和方法挂载到$scope上，而是this上；设置控制器别名</p>\n"},{"title":"Angularjs $apply和$watch方法","date":"2017-09-16T12:36:13.000Z","_content":"#### $apply说明\n手动触发脏检查，当我们更改一个不在AngularJS执行上下文中的数据模型(model)，需要人为的调用$apply()来提醒AngularJS数据发生变化\n\n```html\n<div ng-controller=\"firstController\">\n    {{date}}\n</div>\n \n<script>\n$scope.date = new Date();\n    setInterval(function(){\n        $scope.$apply(function()    {\n                $scope.date = new Date();\n                // 触发脏检查\n            })\n    },1000);\n</script>\n```\n#### digest说明\n当调用ng开头的指令或者服务，在这种情况下，AngularJS就会自动调用$digest()触发$digest循环。当$digest循环开始的时候，他就会启动每一个监听器(watcher)。这些监听器(watcher)会去检查当前的数据模型(model)中的值是否与最后一次计算的值相同，如果不相同，那么，对应的监听函数就会被执行\n#### $watch说明\n- 在digest执行时，如果watch观察到value和上次执行时值不一样时，就会被触发\n- angularjs内部的watch实现了页面随model的及时更新\n- $watch(watchFn, watchAction, deepWatch)\n\n    - watchFn 表达式或函数的字符串\n    - watchAction(newvalue,oldvalue,scope) watchFn发生变化时被调用\n    - deepWatch 可选布尔值命令检查被监控的对象的每个属性是否发生变化\n\n- $watch会返回一个函数，想要注销这个watch可以使用函数\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n    <div ng-app=\"\">\n \n        <div ng-controller=\"firstController\">\n            <input type=\"text\" value=\"\" ng-model=\"name\"/>\n            改变次数:{{count}}-{{name}}\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"app/index.js\"></script>\n<script type=\"text/javascript\" src=\"angularjs.js\"></script>\n</body>\n</html>\n   \n<script>\nvar firstController = function($scope){\n \n    $scope.name = 'ttxsgoto';\n    $scope.data = {\n        name :'ttxs',\n        count:20\n    }\n    $scope.count = 0;\n  \n    // 监听一个model 当一个model每次改变时 都会触发第2个函数\n    $scope.$watch('name',function(newValue,oldValue){\n  \n        ++$scope.count;\n  \n        if($scope.count > 30){\n            $scope.name = '已经大于30次了';\n        }\n    });\n  \n    $scope.$watch('data',function(){\n \n    },true)\n}\n</script>\n```\n\n\n\n\n\n","source":"_posts/angular-apply-watch.md","raw":"---\ntitle: Angularjs $apply和$watch方法\ndate: 2017-09-16 20:36:13\ntags:\n  - Angularjs\ncategories:\n  - Frontend\n---\n#### $apply说明\n手动触发脏检查，当我们更改一个不在AngularJS执行上下文中的数据模型(model)，需要人为的调用$apply()来提醒AngularJS数据发生变化\n\n```html\n<div ng-controller=\"firstController\">\n    {{date}}\n</div>\n \n<script>\n$scope.date = new Date();\n    setInterval(function(){\n        $scope.$apply(function()    {\n                $scope.date = new Date();\n                // 触发脏检查\n            })\n    },1000);\n</script>\n```\n#### digest说明\n当调用ng开头的指令或者服务，在这种情况下，AngularJS就会自动调用$digest()触发$digest循环。当$digest循环开始的时候，他就会启动每一个监听器(watcher)。这些监听器(watcher)会去检查当前的数据模型(model)中的值是否与最后一次计算的值相同，如果不相同，那么，对应的监听函数就会被执行\n#### $watch说明\n- 在digest执行时，如果watch观察到value和上次执行时值不一样时，就会被触发\n- angularjs内部的watch实现了页面随model的及时更新\n- $watch(watchFn, watchAction, deepWatch)\n\n    - watchFn 表达式或函数的字符串\n    - watchAction(newvalue,oldvalue,scope) watchFn发生变化时被调用\n    - deepWatch 可选布尔值命令检查被监控的对象的每个属性是否发生变化\n\n- $watch会返回一个函数，想要注销这个watch可以使用函数\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n    <div ng-app=\"\">\n \n        <div ng-controller=\"firstController\">\n            <input type=\"text\" value=\"\" ng-model=\"name\"/>\n            改变次数:{{count}}-{{name}}\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"app/index.js\"></script>\n<script type=\"text/javascript\" src=\"angularjs.js\"></script>\n</body>\n</html>\n   \n<script>\nvar firstController = function($scope){\n \n    $scope.name = 'ttxsgoto';\n    $scope.data = {\n        name :'ttxs',\n        count:20\n    }\n    $scope.count = 0;\n  \n    // 监听一个model 当一个model每次改变时 都会触发第2个函数\n    $scope.$watch('name',function(newValue,oldValue){\n  \n        ++$scope.count;\n  \n        if($scope.count > 30){\n            $scope.name = '已经大于30次了';\n        }\n    });\n  \n    $scope.$watch('data',function(){\n \n    },true)\n}\n</script>\n```\n\n\n\n\n\n","slug":"angular-apply-watch","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5ur000kct8ulnlkh0f9","content":"<h4 id=\"apply说明\"><a href=\"#apply说明\" class=\"headerlink\" title=\"$apply说明\"></a>$apply说明</h4><p>手动触发脏检查，当我们更改一个不在AngularJS执行上下文中的数据模型(model)，需要人为的调用$apply()来提醒AngularJS数据发生变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"firstController\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123;date&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">$scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        $scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)    </span>&#123;</div><div class=\"line\">                $scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">                <span class=\"comment\">// 触发脏检查</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"digest说明\"><a href=\"#digest说明\" class=\"headerlink\" title=\"digest说明\"></a>digest说明</h4><p>当调用ng开头的指令或者服务，在这种情况下，AngularJS就会自动调用$digest()触发$digest循环。当$digest循环开始的时候，他就会启动每一个监听器(watcher)。这些监听器(watcher)会去检查当前的数据模型(model)中的值是否与最后一次计算的值相同，如果不相同，那么，对应的监听函数就会被执行</p>\n<h4 id=\"watch说明\"><a href=\"#watch说明\" class=\"headerlink\" title=\"$watch说明\"></a>$watch说明</h4><ul>\n<li>在digest执行时，如果watch观察到value和上次执行时值不一样时，就会被触发</li>\n<li>angularjs内部的watch实现了页面随model的及时更新</li>\n<li><p>$watch(watchFn, watchAction, deepWatch)</p>\n<ul>\n<li>watchFn 表达式或函数的字符串</li>\n<li>watchAction(newvalue,oldvalue,scope) watchFn发生变化时被调用</li>\n<li>deepWatch 可选布尔值命令检查被监控的对象的每个属性是否发生变化</li>\n</ul>\n</li>\n<li><p>$watch会返回一个函数，想要注销这个watch可以使用函数</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"firstController\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"name\"</span>/&gt;</span></div><div class=\"line\">            改变次数:&#123;&#123;count&#125;&#125;-&#123;&#123;name&#125;&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angularjs.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> firstController = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    $scope.name = <span class=\"string\">'ttxsgoto'</span>;</div><div class=\"line\">    $scope.data = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> :<span class=\"string\">'ttxs'</span>,</div><div class=\"line\">        <span class=\"attr\">count</span>:<span class=\"number\">20</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    $scope.count = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">// 监听一个model 当一个model每次改变时 都会触发第2个函数</span></div><div class=\"line\">    $scope.$watch(<span class=\"string\">'name'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue,oldValue</span>)</span>&#123;</div><div class=\"line\">  </div><div class=\"line\">        ++$scope.count;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">if</span>($scope.count &gt; <span class=\"number\">30</span>)&#123;</div><div class=\"line\">            $scope.name = <span class=\"string\">'已经大于30次了'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  </div><div class=\"line\">    $scope.$watch(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;,<span class=\"literal\">true</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"apply说明\"><a href=\"#apply说明\" class=\"headerlink\" title=\"$apply说明\"></a>$apply说明</h4><p>手动触发脏检查，当我们更改一个不在AngularJS执行上下文中的数据模型(model)，需要人为的调用$apply()来提醒AngularJS数据发生变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"firstController\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123;date&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">$scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        $scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)    </span>&#123;</div><div class=\"line\">                $scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">                <span class=\"comment\">// 触发脏检查</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"digest说明\"><a href=\"#digest说明\" class=\"headerlink\" title=\"digest说明\"></a>digest说明</h4><p>当调用ng开头的指令或者服务，在这种情况下，AngularJS就会自动调用$digest()触发$digest循环。当$digest循环开始的时候，他就会启动每一个监听器(watcher)。这些监听器(watcher)会去检查当前的数据模型(model)中的值是否与最后一次计算的值相同，如果不相同，那么，对应的监听函数就会被执行</p>\n<h4 id=\"watch说明\"><a href=\"#watch说明\" class=\"headerlink\" title=\"$watch说明\"></a>$watch说明</h4><ul>\n<li>在digest执行时，如果watch观察到value和上次执行时值不一样时，就会被触发</li>\n<li>angularjs内部的watch实现了页面随model的及时更新</li>\n<li><p>$watch(watchFn, watchAction, deepWatch)</p>\n<ul>\n<li>watchFn 表达式或函数的字符串</li>\n<li>watchAction(newvalue,oldvalue,scope) watchFn发生变化时被调用</li>\n<li>deepWatch 可选布尔值命令检查被监控的对象的每个属性是否发生变化</li>\n</ul>\n</li>\n<li><p>$watch会返回一个函数，想要注销这个watch可以使用函数</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"firstController\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"name\"</span>/&gt;</span></div><div class=\"line\">            改变次数:&#123;&#123;count&#125;&#125;-&#123;&#123;name&#125;&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angularjs.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> firstController = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    $scope.name = <span class=\"string\">'ttxsgoto'</span>;</div><div class=\"line\">    $scope.data = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span> :<span class=\"string\">'ttxs'</span>,</div><div class=\"line\">        <span class=\"attr\">count</span>:<span class=\"number\">20</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    $scope.count = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">// 监听一个model 当一个model每次改变时 都会触发第2个函数</span></div><div class=\"line\">    $scope.$watch(<span class=\"string\">'name'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue,oldValue</span>)</span>&#123;</div><div class=\"line\">  </div><div class=\"line\">        ++$scope.count;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">if</span>($scope.count &gt; <span class=\"number\">30</span>)&#123;</div><div class=\"line\">            $scope.name = <span class=\"string\">'已经大于30次了'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  </div><div class=\"line\">    $scope.$watch(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;,<span class=\"literal\">true</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"Angularjs $modal模态框","date":"2017-09-02T06:23:07.000Z","_content":"记录angular模态框的使用\n#### html\n```html\n<!doctype html>\n<html ng-app=\"Modaldemo\">\n<head>\n    <script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.js\"></script>\n    <script src=\"http://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js\"></script>\n    <script src=\"app.js\"></script>\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n \n<div ng-controller=\"ModalDemoCtrl\" class=\"modal-demo\">\n    <script type=\"text/ng-template\" id=\"myModalContent.html\">\n        <div class=\"modal-header\">  //头部\n            <h3 class=\"modal-title\" id=\"modal-title\">I'm a modal!</h3>\n        </div>\n        <div class=\"modal-body\" id=\"modal-body\">    //中部\n            <ul>\n                <li ng-repeat=\"item in items\">\n                    <a href=\"#\" ng-click=\"$event.preventDefault(); selected.item = item\">{{ item }}</a>\n                </li>\n            </ul>\n            Selected: <b>{{ selected.item }}</b>\n        </div>\n        <div class=\"modal-footer\">  //底部\n            <button class=\"btn btn-primary\" type=\"button\" ng-click=\"ok()\">OK</button>\n            <button class=\"btn btn-warning\" type=\"button\" ng-click=\"cancel()\">Cancel</button>\n        </div>\n    </script>\n \n    <script type=\"text/ng-template\" id=\"stackedModal.html\">\n        <div class=\"modal-header\">\n            <h3 class=\"modal-title\" id=\"modal-title-{{name}}\">The {{name}} modal!</h3>\n        </div>\n        <div class=\"modal-body\" id=\"modal-body-{{name}}\">\n            Having multiple modals open at once is probably bad UX but it's technically possible.\n        </div>\n    </script>\n \n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"open()\">Open me!</button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"open('lg')\">Large modal</button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"open('sm')\">Small modal</button>\n \n    <button type=\"button\"\n            class=\"btn btn-default\"\n            ng-click=\"open('sm', '.modal-parent')\">\n        Modal appended to a custom parent\n    </button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"toggleAnimation()\">Toggle Animation ({{ animationsEnabled }})</button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"openMultipleModals()\">\n        Open multiple modals at once\n    </button>\n    <div ng-show=\"selected\">Selection from a modal: {{ selected }}</div>\n    <div class=\"modal-parent\">\n    </div>\n</div>\n</body>\n</html>\n```\n#### js\n```js\nmyApp = angular.module('Modaldemo', ['ui.bootstrap']);\nmyApp.controller('ModalDemoCtrl',['$scope','$uibModal','$log','$document', function ($scope, $uibModal, $log, $document) {\n    $scope.items = ['item1', 'item2', 'item3'];\n    $scope.animationsEnabled = true;\n \n    $scope.open = function (size, parentSelector) {\n        var modalInstance = $uibModal.open({\n            animation: $scope.animationsEnabled,    //打开时的动画开关\n            ariaLabelledBy: 'modal-title',\n            ariaDescribedBy: 'modal-body',\n            backdrop: true,                          //控制弹框背景是否为暗影，默认为true\n            templateUrl: 'myModalContent.html',     //模态框的页面内容\n            // template: '<div>abc</div>',          //用于显示html标签\n            keyboard: true,                         //当按下Esc时，模态对话框是否关闭，默认为ture\n            controller: 'ModalInstanceCtrl',        //模态框的控制器,是用来控制模态框\n            // controllerAs: 'ModalDemoCtrl',\n            size: size,                             //模态框的大小尺寸\n            appendTo: angular.element(document.getElementsByTagName('body')[0]),\n            resolve: {                              //定义一个成员并将他传递给$modal指定的控制器,将主控制器中的参数传到模态框控制器中\n                items: function () {                //items回调函数\n                    return $scope.items;\n                }\n            }\n        });\n \n        modalInstance.result.then(function (selectedItem) { //接收模态框返回值的函数,确认处理函数\n            console.log('selectedItem-->',selectedItem);    //模态框的返回值\n            $scope.selected = selectedItem;\n        }, function () {                                    //取消处理函数\n            $log.info('Modal dismissed at: ' + new Date());\n        });\n    };\n \n    $scope.openComponentModal = function () {\n        var modalInstance = $uibModal.open({\n            animation: $scope.animationsEnabled,\n            component: 'modalComponent',\n            resolve: {\n                items: function () {\n                    return $scope.items;\n                }\n            }\n        });\n        modalInstance.result.then(function (selectedItem) {\n            $scope.selected = selectedItem;\n        }, function () {\n            $log.info('modal-component dismissed at: ' + new Date());\n        });\n    };\n \n    $scope.openMultipleModals = function () {\n        $uibModal.open({\n            animation: $scope.animationsEnabled,\n            ariaLabelledBy: 'modal-title-bottom',\n            ariaDescribedBy: 'modal-body-bottom',\n            templateUrl: 'stackedModal.html',\n            size: 'sm',\n            controller: function($scope) {\n                $scope.name = 'bottom';\n            }\n        });\n \n        $uibModal.open({\n            animation: $scope.animationsEnabled,\n            ariaLabelledBy: 'modal-title-top',\n            ariaDescribedBy: 'modal-body-top',\n            templateUrl: 'stackedModal.html',\n            size: 'sm',\n            controller: function($scope) {\n                $scope.name = 'top';\n            }\n        });\n    };\n \n    $scope.toggleAnimation = function () {\n        $scope.animationsEnabled = !$scope.animationsEnabled;\n    };\n}]);\n \n// modal controller\nmyApp.controller('ModalInstanceCtrl',['$scope','$uibModalInstance','items', function ($scope, $uibModalInstance, items) {\n    $scope.items = items;\n    $scope.selected = {\n        item: $scope.items[0]\n    };\n \n    $scope.ok = function () {\n        console.log('ok functon');\n        $uibModalInstance.close($scope.selected.item);  //关闭模态窗口并传递一个结果\n    };\n \n    $scope.cancel = function () {\n        console.log('cancel functon');\n        $uibModalInstance.dismiss('cancel');    //撤销模态关闭方法并传递一个原因\n    };\n}]);\n```\n","source":"_posts/angular-modal.md","raw":"---\ntitle: Angularjs $modal模态框\ndate: 2017-09-02 14:23:07\ntags:\n  - Angularjs\ncategories:\n  - Frontend\n---\n记录angular模态框的使用\n#### html\n```html\n<!doctype html>\n<html ng-app=\"Modaldemo\">\n<head>\n    <script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.js\"></script>\n    <script src=\"http://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js\"></script>\n    <script src=\"app.js\"></script>\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n \n<div ng-controller=\"ModalDemoCtrl\" class=\"modal-demo\">\n    <script type=\"text/ng-template\" id=\"myModalContent.html\">\n        <div class=\"modal-header\">  //头部\n            <h3 class=\"modal-title\" id=\"modal-title\">I'm a modal!</h3>\n        </div>\n        <div class=\"modal-body\" id=\"modal-body\">    //中部\n            <ul>\n                <li ng-repeat=\"item in items\">\n                    <a href=\"#\" ng-click=\"$event.preventDefault(); selected.item = item\">{{ item }}</a>\n                </li>\n            </ul>\n            Selected: <b>{{ selected.item }}</b>\n        </div>\n        <div class=\"modal-footer\">  //底部\n            <button class=\"btn btn-primary\" type=\"button\" ng-click=\"ok()\">OK</button>\n            <button class=\"btn btn-warning\" type=\"button\" ng-click=\"cancel()\">Cancel</button>\n        </div>\n    </script>\n \n    <script type=\"text/ng-template\" id=\"stackedModal.html\">\n        <div class=\"modal-header\">\n            <h3 class=\"modal-title\" id=\"modal-title-{{name}}\">The {{name}} modal!</h3>\n        </div>\n        <div class=\"modal-body\" id=\"modal-body-{{name}}\">\n            Having multiple modals open at once is probably bad UX but it's technically possible.\n        </div>\n    </script>\n \n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"open()\">Open me!</button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"open('lg')\">Large modal</button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"open('sm')\">Small modal</button>\n \n    <button type=\"button\"\n            class=\"btn btn-default\"\n            ng-click=\"open('sm', '.modal-parent')\">\n        Modal appended to a custom parent\n    </button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"toggleAnimation()\">Toggle Animation ({{ animationsEnabled }})</button>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"openMultipleModals()\">\n        Open multiple modals at once\n    </button>\n    <div ng-show=\"selected\">Selection from a modal: {{ selected }}</div>\n    <div class=\"modal-parent\">\n    </div>\n</div>\n</body>\n</html>\n```\n#### js\n```js\nmyApp = angular.module('Modaldemo', ['ui.bootstrap']);\nmyApp.controller('ModalDemoCtrl',['$scope','$uibModal','$log','$document', function ($scope, $uibModal, $log, $document) {\n    $scope.items = ['item1', 'item2', 'item3'];\n    $scope.animationsEnabled = true;\n \n    $scope.open = function (size, parentSelector) {\n        var modalInstance = $uibModal.open({\n            animation: $scope.animationsEnabled,    //打开时的动画开关\n            ariaLabelledBy: 'modal-title',\n            ariaDescribedBy: 'modal-body',\n            backdrop: true,                          //控制弹框背景是否为暗影，默认为true\n            templateUrl: 'myModalContent.html',     //模态框的页面内容\n            // template: '<div>abc</div>',          //用于显示html标签\n            keyboard: true,                         //当按下Esc时，模态对话框是否关闭，默认为ture\n            controller: 'ModalInstanceCtrl',        //模态框的控制器,是用来控制模态框\n            // controllerAs: 'ModalDemoCtrl',\n            size: size,                             //模态框的大小尺寸\n            appendTo: angular.element(document.getElementsByTagName('body')[0]),\n            resolve: {                              //定义一个成员并将他传递给$modal指定的控制器,将主控制器中的参数传到模态框控制器中\n                items: function () {                //items回调函数\n                    return $scope.items;\n                }\n            }\n        });\n \n        modalInstance.result.then(function (selectedItem) { //接收模态框返回值的函数,确认处理函数\n            console.log('selectedItem-->',selectedItem);    //模态框的返回值\n            $scope.selected = selectedItem;\n        }, function () {                                    //取消处理函数\n            $log.info('Modal dismissed at: ' + new Date());\n        });\n    };\n \n    $scope.openComponentModal = function () {\n        var modalInstance = $uibModal.open({\n            animation: $scope.animationsEnabled,\n            component: 'modalComponent',\n            resolve: {\n                items: function () {\n                    return $scope.items;\n                }\n            }\n        });\n        modalInstance.result.then(function (selectedItem) {\n            $scope.selected = selectedItem;\n        }, function () {\n            $log.info('modal-component dismissed at: ' + new Date());\n        });\n    };\n \n    $scope.openMultipleModals = function () {\n        $uibModal.open({\n            animation: $scope.animationsEnabled,\n            ariaLabelledBy: 'modal-title-bottom',\n            ariaDescribedBy: 'modal-body-bottom',\n            templateUrl: 'stackedModal.html',\n            size: 'sm',\n            controller: function($scope) {\n                $scope.name = 'bottom';\n            }\n        });\n \n        $uibModal.open({\n            animation: $scope.animationsEnabled,\n            ariaLabelledBy: 'modal-title-top',\n            ariaDescribedBy: 'modal-body-top',\n            templateUrl: 'stackedModal.html',\n            size: 'sm',\n            controller: function($scope) {\n                $scope.name = 'top';\n            }\n        });\n    };\n \n    $scope.toggleAnimation = function () {\n        $scope.animationsEnabled = !$scope.animationsEnabled;\n    };\n}]);\n \n// modal controller\nmyApp.controller('ModalInstanceCtrl',['$scope','$uibModalInstance','items', function ($scope, $uibModalInstance, items) {\n    $scope.items = items;\n    $scope.selected = {\n        item: $scope.items[0]\n    };\n \n    $scope.ok = function () {\n        console.log('ok functon');\n        $uibModalInstance.close($scope.selected.item);  //关闭模态窗口并传递一个结果\n    };\n \n    $scope.cancel = function () {\n        console.log('cancel functon');\n        $uibModalInstance.dismiss('cancel');    //撤销模态关闭方法并传递一个原因\n    };\n}]);\n```\n","slug":"angular-modal","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5uu000nct8u4g1zibph","content":"<p>记录angular模态框的使用</p>\n<h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"Modaldemo\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ModalDemoCtrl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myModalContent.html\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span>  //头部</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-title\"</span>&gt;</span>I'm a modal!<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-body\"</span>&gt;</span>    //中部</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"$event.preventDefault(); selected.item = item\"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            Selected: <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>&#123;&#123; selected.item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-footer\"</span>&gt;</span>  //底部</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"ok()\"</span>&gt;</span>OK<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-warning\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"cancel()\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"stackedModal.html\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-title-&#123;&#123;name&#125;&#125;\"</span>&gt;</span>The &#123;&#123;name&#125;&#125; modal!<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-body-&#123;&#123;name&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">            Having multiple modals open at once is probably bad UX but it's technically possible.</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open()\"</span>&gt;</span>Open me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open('lg')\"</span>&gt;</span>Large modal<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open('sm')\"</span>&gt;</span>Small modal<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span></span></div><div class=\"line\">            <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span></div><div class=\"line\">            <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open('sm', '.modal-parent')\"</span>&gt;</div><div class=\"line\">        Modal appended to a custom parent</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"toggleAnimation()\"</span>&gt;</span>Toggle Animation (&#123;&#123; animationsEnabled &#125;&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"openMultipleModals()\"</span>&gt;</span></div><div class=\"line\">        Open multiple modals at once</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"selected\"</span>&gt;</span>Selection from a modal: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-parent\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp = angular.module(<span class=\"string\">'Modaldemo'</span>, [<span class=\"string\">'ui.bootstrap'</span>]);</div><div class=\"line\">myApp.controller(<span class=\"string\">'ModalDemoCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'$uibModal'</span>,<span class=\"string\">'$log'</span>,<span class=\"string\">'$document'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope, $uibModal, $log, $document</span>) </span>&#123;</div><div class=\"line\">    $scope.items = [<span class=\"string\">'item1'</span>, <span class=\"string\">'item2'</span>, <span class=\"string\">'item3'</span>];</div><div class=\"line\">    $scope.animationsEnabled = <span class=\"literal\">true</span>;</div><div class=\"line\"> </div><div class=\"line\">    $scope.open = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">size, parentSelector</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> modalInstance = $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,    <span class=\"comment\">//打开时的动画开关</span></div><div class=\"line\">            ariaLabelledBy: <span class=\"string\">'modal-title'</span>,</div><div class=\"line\">            <span class=\"attr\">ariaDescribedBy</span>: <span class=\"string\">'modal-body'</span>,</div><div class=\"line\">            <span class=\"attr\">backdrop</span>: <span class=\"literal\">true</span>,                          <span class=\"comment\">//控制弹框背景是否为暗影，默认为true</span></div><div class=\"line\">            templateUrl: <span class=\"string\">'myModalContent.html'</span>,     <span class=\"comment\">//模态框的页面内容</span></div><div class=\"line\">            <span class=\"comment\">// template: '&lt;div&gt;abc&lt;/div&gt;',          //用于显示html标签</span></div><div class=\"line\">            keyboard: <span class=\"literal\">true</span>,                         <span class=\"comment\">//当按下Esc时，模态对话框是否关闭，默认为ture</span></div><div class=\"line\">            controller: <span class=\"string\">'ModalInstanceCtrl'</span>,        <span class=\"comment\">//模态框的控制器,是用来控制模态框</span></div><div class=\"line\">            <span class=\"comment\">// controllerAs: 'ModalDemoCtrl',</span></div><div class=\"line\">            size: size,                             <span class=\"comment\">//模态框的大小尺寸</span></div><div class=\"line\">            appendTo: angular.element(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]),</div><div class=\"line\">            <span class=\"attr\">resolve</span>: &#123;                              <span class=\"comment\">//定义一个成员并将他传递给$modal指定的控制器,将主控制器中的参数传到模态框控制器中</span></div><div class=\"line\">                items: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;                <span class=\"comment\">//items回调函数</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> $scope.items;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        modalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selectedItem</span>) </span>&#123; <span class=\"comment\">//接收模态框返回值的函数,确认处理函数</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'selectedItem--&gt;'</span>,selectedItem);    <span class=\"comment\">//模态框的返回值</span></div><div class=\"line\">            $scope.selected = selectedItem;</div><div class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;                                    <span class=\"comment\">//取消处理函数</span></div><div class=\"line\">            $log.info(<span class=\"string\">'Modal dismissed at: '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.openComponentModal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> modalInstance = $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,</div><div class=\"line\">            <span class=\"attr\">component</span>: <span class=\"string\">'modalComponent'</span>,</div><div class=\"line\">            <span class=\"attr\">resolve</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">items</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $scope.items;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        modalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selectedItem</span>) </span>&#123;</div><div class=\"line\">            $scope.selected = selectedItem;</div><div class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $log.info(<span class=\"string\">'modal-component dismissed at: '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.openMultipleModals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,</div><div class=\"line\">            <span class=\"attr\">ariaLabelledBy</span>: <span class=\"string\">'modal-title-bottom'</span>,</div><div class=\"line\">            <span class=\"attr\">ariaDescribedBy</span>: <span class=\"string\">'modal-body-bottom'</span>,</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>: <span class=\"string\">'stackedModal.html'</span>,</div><div class=\"line\">            <span class=\"attr\">size</span>: <span class=\"string\">'sm'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">                $scope.name = <span class=\"string\">'bottom'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,</div><div class=\"line\">            <span class=\"attr\">ariaLabelledBy</span>: <span class=\"string\">'modal-title-top'</span>,</div><div class=\"line\">            <span class=\"attr\">ariaDescribedBy</span>: <span class=\"string\">'modal-body-top'</span>,</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>: <span class=\"string\">'stackedModal.html'</span>,</div><div class=\"line\">            <span class=\"attr\">size</span>: <span class=\"string\">'sm'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">                $scope.name = <span class=\"string\">'top'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.toggleAnimation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $scope.animationsEnabled = !$scope.animationsEnabled;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// modal controller</span></div><div class=\"line\">myApp.controller(<span class=\"string\">'ModalInstanceCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'$uibModalInstance'</span>,<span class=\"string\">'items'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope, $uibModalInstance, items</span>) </span>&#123;</div><div class=\"line\">    $scope.items = items;</div><div class=\"line\">    $scope.selected = &#123;</div><div class=\"line\">        <span class=\"attr\">item</span>: $scope.items[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.ok = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok functon'</span>);</div><div class=\"line\">        $uibModalInstance.close($scope.selected.item);  <span class=\"comment\">//关闭模态窗口并传递一个结果</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.cancel = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'cancel functon'</span>);</div><div class=\"line\">        $uibModalInstance.dismiss(<span class=\"string\">'cancel'</span>);    <span class=\"comment\">//撤销模态关闭方法并传递一个原因</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>记录angular模态框的使用</p>\n<h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"Modaldemo\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ModalDemoCtrl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myModalContent.html\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span>  //头部</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-title\"</span>&gt;</span>I'm a modal!<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-body\"</span>&gt;</span>    //中部</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"$event.preventDefault(); selected.item = item\"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            Selected: <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>&#123;&#123; selected.item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-footer\"</span>&gt;</span>  //底部</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"ok()\"</span>&gt;</span>OK<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-warning\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"cancel()\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"stackedModal.html\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-title-&#123;&#123;name&#125;&#125;\"</span>&gt;</span>The &#123;&#123;name&#125;&#125; modal!<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-body-&#123;&#123;name&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">            Having multiple modals open at once is probably bad UX but it's technically possible.</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open()\"</span>&gt;</span>Open me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open('lg')\"</span>&gt;</span>Large modal<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open('sm')\"</span>&gt;</span>Small modal<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span></div><div class=\"line\">            <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span></div><div class=\"line\">            <span class=\"attr\">ng-click</span>=<span class=\"string\">\"open('sm', '.modal-parent')\"</span>&gt;</span></div><div class=\"line\">        Modal appended to a custom parent</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"toggleAnimation()\"</span>&gt;</span>Toggle Animation (&#123;&#123; animationsEnabled &#125;&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"openMultipleModals()\"</span>&gt;</span></div><div class=\"line\">        Open multiple modals at once</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"selected\"</span>&gt;</span>Selection from a modal: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-parent\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp = angular.module(<span class=\"string\">'Modaldemo'</span>, [<span class=\"string\">'ui.bootstrap'</span>]);</div><div class=\"line\">myApp.controller(<span class=\"string\">'ModalDemoCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'$uibModal'</span>,<span class=\"string\">'$log'</span>,<span class=\"string\">'$document'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope, $uibModal, $log, $document</span>) </span>&#123;</div><div class=\"line\">    $scope.items = [<span class=\"string\">'item1'</span>, <span class=\"string\">'item2'</span>, <span class=\"string\">'item3'</span>];</div><div class=\"line\">    $scope.animationsEnabled = <span class=\"literal\">true</span>;</div><div class=\"line\"> </div><div class=\"line\">    $scope.open = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">size, parentSelector</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> modalInstance = $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,    <span class=\"comment\">//打开时的动画开关</span></div><div class=\"line\">            ariaLabelledBy: <span class=\"string\">'modal-title'</span>,</div><div class=\"line\">            <span class=\"attr\">ariaDescribedBy</span>: <span class=\"string\">'modal-body'</span>,</div><div class=\"line\">            <span class=\"attr\">backdrop</span>: <span class=\"literal\">true</span>,                          <span class=\"comment\">//控制弹框背景是否为暗影，默认为true</span></div><div class=\"line\">            templateUrl: <span class=\"string\">'myModalContent.html'</span>,     <span class=\"comment\">//模态框的页面内容</span></div><div class=\"line\">            <span class=\"comment\">// template: '&lt;div&gt;abc&lt;/div&gt;',          //用于显示html标签</span></div><div class=\"line\">            keyboard: <span class=\"literal\">true</span>,                         <span class=\"comment\">//当按下Esc时，模态对话框是否关闭，默认为ture</span></div><div class=\"line\">            controller: <span class=\"string\">'ModalInstanceCtrl'</span>,        <span class=\"comment\">//模态框的控制器,是用来控制模态框</span></div><div class=\"line\">            <span class=\"comment\">// controllerAs: 'ModalDemoCtrl',</span></div><div class=\"line\">            size: size,                             <span class=\"comment\">//模态框的大小尺寸</span></div><div class=\"line\">            appendTo: angular.element(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]),</div><div class=\"line\">            <span class=\"attr\">resolve</span>: &#123;                              <span class=\"comment\">//定义一个成员并将他传递给$modal指定的控制器,将主控制器中的参数传到模态框控制器中</span></div><div class=\"line\">                items: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;                <span class=\"comment\">//items回调函数</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> $scope.items;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        modalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selectedItem</span>) </span>&#123; <span class=\"comment\">//接收模态框返回值的函数,确认处理函数</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'selectedItem--&gt;'</span>,selectedItem);    <span class=\"comment\">//模态框的返回值</span></div><div class=\"line\">            $scope.selected = selectedItem;</div><div class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;                                    <span class=\"comment\">//取消处理函数</span></div><div class=\"line\">            $log.info(<span class=\"string\">'Modal dismissed at: '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.openComponentModal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> modalInstance = $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,</div><div class=\"line\">            <span class=\"attr\">component</span>: <span class=\"string\">'modalComponent'</span>,</div><div class=\"line\">            <span class=\"attr\">resolve</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">items</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $scope.items;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        modalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selectedItem</span>) </span>&#123;</div><div class=\"line\">            $scope.selected = selectedItem;</div><div class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $log.info(<span class=\"string\">'modal-component dismissed at: '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.openMultipleModals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,</div><div class=\"line\">            <span class=\"attr\">ariaLabelledBy</span>: <span class=\"string\">'modal-title-bottom'</span>,</div><div class=\"line\">            <span class=\"attr\">ariaDescribedBy</span>: <span class=\"string\">'modal-body-bottom'</span>,</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>: <span class=\"string\">'stackedModal.html'</span>,</div><div class=\"line\">            <span class=\"attr\">size</span>: <span class=\"string\">'sm'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">                $scope.name = <span class=\"string\">'bottom'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        $uibModal.open(&#123;</div><div class=\"line\">            <span class=\"attr\">animation</span>: $scope.animationsEnabled,</div><div class=\"line\">            <span class=\"attr\">ariaLabelledBy</span>: <span class=\"string\">'modal-title-top'</span>,</div><div class=\"line\">            <span class=\"attr\">ariaDescribedBy</span>: <span class=\"string\">'modal-body-top'</span>,</div><div class=\"line\">            <span class=\"attr\">templateUrl</span>: <span class=\"string\">'stackedModal.html'</span>,</div><div class=\"line\">            <span class=\"attr\">size</span>: <span class=\"string\">'sm'</span>,</div><div class=\"line\">            <span class=\"attr\">controller</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">                $scope.name = <span class=\"string\">'top'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.toggleAnimation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $scope.animationsEnabled = !$scope.animationsEnabled;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// modal controller</span></div><div class=\"line\">myApp.controller(<span class=\"string\">'ModalInstanceCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'$uibModalInstance'</span>,<span class=\"string\">'items'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope, $uibModalInstance, items</span>) </span>&#123;</div><div class=\"line\">    $scope.items = items;</div><div class=\"line\">    $scope.selected = &#123;</div><div class=\"line\">        <span class=\"attr\">item</span>: $scope.items[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.ok = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok functon'</span>);</div><div class=\"line\">        $uibModalInstance.close($scope.selected.item);  <span class=\"comment\">//关闭模态窗口并传递一个结果</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    $scope.cancel = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'cancel functon'</span>);</div><div class=\"line\">        $uibModalInstance.dismiss(<span class=\"string\">'cancel'</span>);    <span class=\"comment\">//撤销模态关闭方法并传递一个原因</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n"},{"title":"Angularjs Services常用服务","date":"2017-08-20T12:22:02.000Z","_content":"- Constant\n- Value\n- Factory\n- Service\n- Run\n- Provider\n- Decorator\n\n应用里大部分的业务逻辑和持久化数据都应该放在service里\nservice可以用来永久保存应用的数据，并且这些数据可以在不同的controller之间使用\n\n#### Constant\n- 定义常量，从注册后就不会在改变\n- constant创建服务返回一个json对象,这个对象里可以有参数,可以有方法,一般constant创建的服务不会去修改它的内容\n- 可以在注入到任何方法中调用\n- constant服务不能通过decorator进行装饰\n```js\nangular.module('myApp', [])\n  .constant('getData',{\n        url:'http://localhost:5500/products',\n        name:'ttxs',\n        age:28,\n        getId:function(){\n            return 1\n        }\n    })\n```\n\n#### Value\n- value创建服务返回一个json对象,这个对象里可以有参数,可以有方法,如果属性和方法需要被修改内容,就用value来创建服务\n- 可以注入到controller，directive\n- value可以被装饰\n\nconstant和value主要就是用于存放一些数据或方法以供使用,区别是constant一般是存放固定内容,value存放可能会被修改的内容\n\n#### Factory\n- 一个可注入的函数，调用factory时只是调用普通的function，所以factory可以返回任何东西，函数需要有返回值obj，而service可以不用返回\n- Factory 一般就是创建一个对象，然后在对这个对象添加方法与数据，最后将些对象返回即可\n- 和constant,value的区别:factory服务是有一个处理过程,经过这个过程,才返回结果的\n\n```js\nangular.module('myApp', [])\n    .factory('getData',function(){\n        var myname = 'ttxs';\n        var age = 28;\n        var id = 1;\n        return {\n            name: myname,\n            age: age,\n            getId: function(){\n                return id\n            }\n        }\n    });\n```\n#### Service\n- 可注入的构造器，它用在controller中通信或者共享数据,适合使用在功能控制比较多的service里面\n- service里可以不返回东西，因为angularJS会调用new关键字来创建对象\n- seivce定义的服务不能在.config中使用！只有provider定义的才可以\n- 这里的值都应该使用this定义\n- 自定义服务return 返回值必须为对象,不能为字符串,数字等\n```js\nvar app = angular.module('myApp', []);\napp.controller('myController', function($scope, myService) {\n    $scope.getPrivate = function() {\n        alert(myService.getPrivate());\n    };\n    $scope.getPUbluc = function() {\n        alert(myService.variable);\n    };\n});\n \napp.controller('myController2', function($scope, myService) {\n\t// do something\n});\n \napp.service('myService', function() {\n     console.log('myService');\n    var privateValue = \"I am Private\";\n    this.variable = \"This is public\";\n    this.getPrivate = function() {\n        return privateValue;\n    };\n});\n```\n#### Run\n- 在注入启动之后执行某些操作，而这些操作需要在页面对用户可用之前执行，使用run方法；即在config方法之后controller方法之前调用\n- 使用场景：远程加载模板，需要在使用前加入缓存，或者在操作前判断用户是否登录，未登录需先跳转到登录页面\n\n\n#### Provider\n- $provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务;服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务\n- provider必须有一个$get方法，是所有封装函数都是由provider封装的\n- provider是一个可配置的factory\n\n```js\nvar myApp = angular.module('myApp',[],function($provide){\n \n    // 自定义服务\n    $provide.provider('CustomService',function(){\n \n        this.$get = function(){\n            return {\n                message : 'CustomService Message'\n            }\n        }\n    });\n \n    // 自定义工厂,返回值为任意值\n    $provide.factory('CustomFactory',function(){\n        return [1,2,3,4,5,6,7];\n    });\n \n    // 自定义服务, 返回值必须为对象,不能为字符串,数字等\n    $provide.service('CustomService2',function(){\n        return ['xxx'];\n        // return 'abc';\n    })\n``` \n\n#### 总结\n1) 服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,无论修改其中的哪一个,其它所有的服务都会被改变\n2) constant服务不能通过decorator进行装饰\n3) 固定的参数和方法,使用constant;可能被修改的参数和方法,使用value\n4) 逻辑处理后得到的参数或方法,使用factory\n5) Service 是用\"new\"关键字实例化的。因此，你应该给\"this\"添加属性，然后 service 返回\"this\"。你把 service 传进 controller 之后，在controller里 \"this\" 上的属性就可以通过 service 来使用\n6) Providers 是唯一一种你可以传进 .config() 函数的 service。当你想要在 service 对象启用之前，先进行模块范围的配置，那就应该用 provider\n7) Factory/service是第一个注入时才实例化，而provider不是，它是在config之前就已实例化\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/angular-servers.md","raw":"---\ntitle: Angularjs Services常用服务\ndate: 2017-08-20 20:22:02\ntags:\n  - Angularjs\ncategories:\n  - Frontend\n---\n- Constant\n- Value\n- Factory\n- Service\n- Run\n- Provider\n- Decorator\n\n应用里大部分的业务逻辑和持久化数据都应该放在service里\nservice可以用来永久保存应用的数据，并且这些数据可以在不同的controller之间使用\n\n#### Constant\n- 定义常量，从注册后就不会在改变\n- constant创建服务返回一个json对象,这个对象里可以有参数,可以有方法,一般constant创建的服务不会去修改它的内容\n- 可以在注入到任何方法中调用\n- constant服务不能通过decorator进行装饰\n```js\nangular.module('myApp', [])\n  .constant('getData',{\n        url:'http://localhost:5500/products',\n        name:'ttxs',\n        age:28,\n        getId:function(){\n            return 1\n        }\n    })\n```\n\n#### Value\n- value创建服务返回一个json对象,这个对象里可以有参数,可以有方法,如果属性和方法需要被修改内容,就用value来创建服务\n- 可以注入到controller，directive\n- value可以被装饰\n\nconstant和value主要就是用于存放一些数据或方法以供使用,区别是constant一般是存放固定内容,value存放可能会被修改的内容\n\n#### Factory\n- 一个可注入的函数，调用factory时只是调用普通的function，所以factory可以返回任何东西，函数需要有返回值obj，而service可以不用返回\n- Factory 一般就是创建一个对象，然后在对这个对象添加方法与数据，最后将些对象返回即可\n- 和constant,value的区别:factory服务是有一个处理过程,经过这个过程,才返回结果的\n\n```js\nangular.module('myApp', [])\n    .factory('getData',function(){\n        var myname = 'ttxs';\n        var age = 28;\n        var id = 1;\n        return {\n            name: myname,\n            age: age,\n            getId: function(){\n                return id\n            }\n        }\n    });\n```\n#### Service\n- 可注入的构造器，它用在controller中通信或者共享数据,适合使用在功能控制比较多的service里面\n- service里可以不返回东西，因为angularJS会调用new关键字来创建对象\n- seivce定义的服务不能在.config中使用！只有provider定义的才可以\n- 这里的值都应该使用this定义\n- 自定义服务return 返回值必须为对象,不能为字符串,数字等\n```js\nvar app = angular.module('myApp', []);\napp.controller('myController', function($scope, myService) {\n    $scope.getPrivate = function() {\n        alert(myService.getPrivate());\n    };\n    $scope.getPUbluc = function() {\n        alert(myService.variable);\n    };\n});\n \napp.controller('myController2', function($scope, myService) {\n\t// do something\n});\n \napp.service('myService', function() {\n     console.log('myService');\n    var privateValue = \"I am Private\";\n    this.variable = \"This is public\";\n    this.getPrivate = function() {\n        return privateValue;\n    };\n});\n```\n#### Run\n- 在注入启动之后执行某些操作，而这些操作需要在页面对用户可用之前执行，使用run方法；即在config方法之后controller方法之前调用\n- 使用场景：远程加载模板，需要在使用前加入缓存，或者在操作前判断用户是否登录，未登录需先跳转到登录页面\n\n\n#### Provider\n- $provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务;服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务\n- provider必须有一个$get方法，是所有封装函数都是由provider封装的\n- provider是一个可配置的factory\n\n```js\nvar myApp = angular.module('myApp',[],function($provide){\n \n    // 自定义服务\n    $provide.provider('CustomService',function(){\n \n        this.$get = function(){\n            return {\n                message : 'CustomService Message'\n            }\n        }\n    });\n \n    // 自定义工厂,返回值为任意值\n    $provide.factory('CustomFactory',function(){\n        return [1,2,3,4,5,6,7];\n    });\n \n    // 自定义服务, 返回值必须为对象,不能为字符串,数字等\n    $provide.service('CustomService2',function(){\n        return ['xxx'];\n        // return 'abc';\n    })\n``` \n\n#### 总结\n1) 服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,无论修改其中的哪一个,其它所有的服务都会被改变\n2) constant服务不能通过decorator进行装饰\n3) 固定的参数和方法,使用constant;可能被修改的参数和方法,使用value\n4) 逻辑处理后得到的参数或方法,使用factory\n5) Service 是用\"new\"关键字实例化的。因此，你应该给\"this\"添加属性，然后 service 返回\"this\"。你把 service 传进 controller 之后，在controller里 \"this\" 上的属性就可以通过 service 来使用\n6) Providers 是唯一一种你可以传进 .config() 函数的 service。当你想要在 service 对象启用之前，先进行模块范围的配置，那就应该用 provider\n7) Factory/service是第一个注入时才实例化，而provider不是，它是在config之前就已实例化\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"angular-servers","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5uw000qct8uopfexg3s","content":"<ul>\n<li>Constant</li>\n<li>Value</li>\n<li>Factory</li>\n<li>Service</li>\n<li>Run</li>\n<li>Provider</li>\n<li>Decorator</li>\n</ul>\n<p>应用里大部分的业务逻辑和持久化数据都应该放在service里<br>service可以用来永久保存应用的数据，并且这些数据可以在不同的controller之间使用</p>\n<h4 id=\"Constant\"><a href=\"#Constant\" class=\"headerlink\" title=\"Constant\"></a>Constant</h4><ul>\n<li>定义常量，从注册后就不会在改变</li>\n<li>constant创建服务返回一个json对象,这个对象里可以有参数,可以有方法,一般constant创建的服务不会去修改它的内容</li>\n<li>可以在注入到任何方法中调用</li>\n<li>constant服务不能通过decorator进行装饰<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">  .constant(<span class=\"string\">'getData'</span>,&#123;</div><div class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">'http://localhost:5500/products'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">'ttxs'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>:<span class=\"number\">28</span>,</div><div class=\"line\">        <span class=\"attr\">getId</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"Value\"></a>Value</h4><ul>\n<li>value创建服务返回一个json对象,这个对象里可以有参数,可以有方法,如果属性和方法需要被修改内容,就用value来创建服务</li>\n<li>可以注入到controller，directive</li>\n<li>value可以被装饰</li>\n</ul>\n<p>constant和value主要就是用于存放一些数据或方法以供使用,区别是constant一般是存放固定内容,value存放可能会被修改的内容</p>\n<h4 id=\"Factory\"><a href=\"#Factory\" class=\"headerlink\" title=\"Factory\"></a>Factory</h4><ul>\n<li>一个可注入的函数，调用factory时只是调用普通的function，所以factory可以返回任何东西，函数需要有返回值obj，而service可以不用返回</li>\n<li>Factory 一般就是创建一个对象，然后在对这个对象添加方法与数据，最后将些对象返回即可</li>\n<li>和constant,value的区别:factory服务是有一个处理过程,经过这个过程,才返回结果的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">    .factory(<span class=\"string\">'getData'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> myname = <span class=\"string\">'ttxs'</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> age = <span class=\"number\">28</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> id = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: myname,</div><div class=\"line\">            <span class=\"attr\">age</span>: age,</div><div class=\"line\">            <span class=\"attr\">getId</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> id</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><ul>\n<li>可注入的构造器，它用在controller中通信或者共享数据,适合使用在功能控制比较多的service里面</li>\n<li>service里可以不返回东西，因为angularJS会调用new关键字来创建对象</li>\n<li>seivce定义的服务不能在.config中使用！只有provider定义的才可以</li>\n<li>这里的值都应该使用this定义</li>\n<li>自定义服务return 返回值必须为对象,不能为字符串,数字等<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'myController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, myService</span>) </span>&#123;</div><div class=\"line\">    $scope.getPrivate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(myService.getPrivate());</div><div class=\"line\">    &#125;;</div><div class=\"line\">    $scope.getPUbluc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(myService.variable);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">app.controller(<span class=\"string\">'myController2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, myService</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// do something</span></div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">app.service(<span class=\"string\">'myService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'myService'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> privateValue = <span class=\"string\">\"I am Private\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.variable = <span class=\"string\">\"This is public\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getPrivate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> privateValue;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h4><ul>\n<li>在注入启动之后执行某些操作，而这些操作需要在页面对用户可用之前执行，使用run方法；即在config方法之后controller方法之前调用</li>\n<li>使用场景：远程加载模板，需要在使用前加入缓存，或者在操作前判断用户是否登录，未登录需先跳转到登录页面</li>\n</ul>\n<h4 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h4><ul>\n<li>$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务;服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务</li>\n<li>provider必须有一个$get方法，是所有封装函数都是由provider封装的</li>\n<li>provider是一个可配置的factory</li>\n</ul>\n<pre><code class=\"js\"><span class=\"keyword\">var</span> myApp = angular.module(<span class=\"string\">'myApp'</span>,[],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$provide</span>)</span>{\n\n    <span class=\"comment\">// 自定义服务</span>\n    $provide.provider(<span class=\"string\">'CustomService'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n\n        <span class=\"keyword\">this</span>.$get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n            <span class=\"keyword\">return</span> {\n                <span class=\"attr\">message</span> : <span class=\"string\">'CustomService Message'</span>\n            }\n        }\n    });\n\n    <span class=\"comment\">// 自定义工厂,返回值为任意值</span>\n    $provide.factory(<span class=\"string\">'CustomFactory'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];\n    });\n\n    <span class=\"comment\">// 自定义服务, 返回值必须为对象,不能为字符串,数字等</span>\n    $provide.service(<span class=\"string\">'CustomService2'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        <span class=\"keyword\">return</span> [<span class=\"string\">'xxx'</span>];\n        <span class=\"comment\">// return 'abc';</span>\n    })\n</code></pre>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>1) 服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,无论修改其中的哪一个,其它所有的服务都会被改变<br>2) constant服务不能通过decorator进行装饰<br>3) 固定的参数和方法,使用constant;可能被修改的参数和方法,使用value<br>4) 逻辑处理后得到的参数或方法,使用factory<br>5) Service 是用”new”关键字实例化的。因此，你应该给”this”添加属性，然后 service 返回”this”。你把 service 传进 controller 之后，在controller里 “this” 上的属性就可以通过 service 来使用<br>6) Providers 是唯一一种你可以传进 .config() 函数的 service。当你想要在 service 对象启用之前，先进行模块范围的配置，那就应该用 provider<br>7) Factory/service是第一个注入时才实例化，而provider不是，它是在config之前就已实例化</p>\n","excerpt":"","more":"<ul>\n<li>Constant</li>\n<li>Value</li>\n<li>Factory</li>\n<li>Service</li>\n<li>Run</li>\n<li>Provider</li>\n<li>Decorator</li>\n</ul>\n<p>应用里大部分的业务逻辑和持久化数据都应该放在service里<br>service可以用来永久保存应用的数据，并且这些数据可以在不同的controller之间使用</p>\n<h4 id=\"Constant\"><a href=\"#Constant\" class=\"headerlink\" title=\"Constant\"></a>Constant</h4><ul>\n<li>定义常量，从注册后就不会在改变</li>\n<li>constant创建服务返回一个json对象,这个对象里可以有参数,可以有方法,一般constant创建的服务不会去修改它的内容</li>\n<li>可以在注入到任何方法中调用</li>\n<li>constant服务不能通过decorator进行装饰<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">  .constant(<span class=\"string\">'getData'</span>,&#123;</div><div class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">'http://localhost:5500/products'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">'ttxs'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>:<span class=\"number\">28</span>,</div><div class=\"line\">        <span class=\"attr\">getId</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"Value\"></a>Value</h4><ul>\n<li>value创建服务返回一个json对象,这个对象里可以有参数,可以有方法,如果属性和方法需要被修改内容,就用value来创建服务</li>\n<li>可以注入到controller，directive</li>\n<li>value可以被装饰</li>\n</ul>\n<p>constant和value主要就是用于存放一些数据或方法以供使用,区别是constant一般是存放固定内容,value存放可能会被修改的内容</p>\n<h4 id=\"Factory\"><a href=\"#Factory\" class=\"headerlink\" title=\"Factory\"></a>Factory</h4><ul>\n<li>一个可注入的函数，调用factory时只是调用普通的function，所以factory可以返回任何东西，函数需要有返回值obj，而service可以不用返回</li>\n<li>Factory 一般就是创建一个对象，然后在对这个对象添加方法与数据，最后将些对象返回即可</li>\n<li>和constant,value的区别:factory服务是有一个处理过程,经过这个过程,才返回结果的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">    .factory(<span class=\"string\">'getData'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> myname = <span class=\"string\">'ttxs'</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> age = <span class=\"number\">28</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> id = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: myname,</div><div class=\"line\">            <span class=\"attr\">age</span>: age,</div><div class=\"line\">            <span class=\"attr\">getId</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> id</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><ul>\n<li>可注入的构造器，它用在controller中通信或者共享数据,适合使用在功能控制比较多的service里面</li>\n<li>service里可以不返回东西，因为angularJS会调用new关键字来创建对象</li>\n<li>seivce定义的服务不能在.config中使用！只有provider定义的才可以</li>\n<li>这里的值都应该使用this定义</li>\n<li>自定义服务return 返回值必须为对象,不能为字符串,数字等<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'myController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, myService</span>) </span>&#123;</div><div class=\"line\">    $scope.getPrivate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(myService.getPrivate());</div><div class=\"line\">    &#125;;</div><div class=\"line\">    $scope.getPUbluc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(myService.variable);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">app.controller(<span class=\"string\">'myController2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, myService</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// do something</span></div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\">app.service(<span class=\"string\">'myService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'myService'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> privateValue = <span class=\"string\">\"I am Private\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.variable = <span class=\"string\">\"This is public\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getPrivate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> privateValue;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h4><ul>\n<li>在注入启动之后执行某些操作，而这些操作需要在页面对用户可用之前执行，使用run方法；即在config方法之后controller方法之前调用</li>\n<li>使用场景：远程加载模板，需要在使用前加入缓存，或者在操作前判断用户是否登录，未登录需先跳转到登录页面</li>\n</ul>\n<h4 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h4><ul>\n<li>$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务;服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务</li>\n<li>provider必须有一个$get方法，是所有封装函数都是由provider封装的</li>\n<li>provider是一个可配置的factory</li>\n</ul>\n<pre><code class=\"js\"><span class=\"keyword\">var</span> myApp = angular.module(<span class=\"string\">'myApp'</span>,[],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$provide</span>)</span>{\n\n    <span class=\"comment\">// 自定义服务</span>\n    $provide.provider(<span class=\"string\">'CustomService'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n\n        <span class=\"keyword\">this</span>.$get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n            <span class=\"keyword\">return</span> {\n                <span class=\"attr\">message</span> : <span class=\"string\">'CustomService Message'</span>\n            }\n        }\n    });\n\n    <span class=\"comment\">// 自定义工厂,返回值为任意值</span>\n    $provide.factory(<span class=\"string\">'CustomFactory'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];\n    });\n\n    <span class=\"comment\">// 自定义服务, 返回值必须为对象,不能为字符串,数字等</span>\n    $provide.service(<span class=\"string\">'CustomService2'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        <span class=\"keyword\">return</span> [<span class=\"string\">'xxx'</span>];\n        <span class=\"comment\">// return 'abc';</span>\n    })\n</code></pre>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>1) 服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,无论修改其中的哪一个,其它所有的服务都会被改变<br>2) constant服务不能通过decorator进行装饰<br>3) 固定的参数和方法,使用constant;可能被修改的参数和方法,使用value<br>4) 逻辑处理后得到的参数或方法,使用factory<br>5) Service 是用”new”关键字实例化的。因此，你应该给”this”添加属性，然后 service 返回”this”。你把 service 传进 controller 之后，在controller里 “this” 上的属性就可以通过 service 来使用<br>6) Providers 是唯一一种你可以传进 .config() 函数的 service。当你想要在 service 对象启用之前，先进行模块范围的配置，那就应该用 provider<br>7) Factory/service是第一个注入时才实例化，而provider不是，它是在config之前就已实例化</p>\n"},{"title":"运维 Ansible","date":"2017-03-18T13:19:30.000Z","_content":"### Ansible架构图\n![](https://ttxsgoto.github.io/img/ansible/ansible01.png)\n### Ansible特性\n    - 基于python实现，由Paramike，PyYAML和Jinjia2三个关键模块\n    - 部署简单，agentless\n    - 使用ssh协议\n    - 主从集中化模式\n    - 支持自定义模块\n    - 支持playbook\n    - 幂等性：一种操作可重复多次结果相同\n### Ansible核心组件\n    - ansible core：Ansible的核心程序\n    - host iventory：记录了每一个由Ansible管理的主机信息，信息包括ssh端口，root帐号密码，ip地址等\n    - core modules：Ansible管理主机之前，先调用core Modules中的模块，然后指明管理Host Lnventory中的主机，就可以完成管理主机\n    - custom modules：自定义模块\n    - playbook(yaml,jinjia2)：YAML格式文件，多个任务定义在一个文件中\n    - connect plugin：连接插件，Ansible和Host通信使用\n\n### Invetory文件说明\n参数说明：\n- ansible_ssh_host 将要连接的远程主机名，可用于设置别名\n- ansible_ssh_port ssh端口，非默认可通过它来设置\n- ansible_ssh_user 默认的ssh用户名\n- ansible_ssh_pass ssh密码 不安全\n- ansible_sudo_pass sudo密码 不安全\n- ansible_connection 主机连接类型\n- ansible_ssh_private_key_file ssh 使用的私钥文件.适用于有多个密钥\n- ansible_shell_type 目标系统的shell类型\n- ansible_python_interpreter 目标主机的python路径\n\n```\n[web01]\n192.168.0.1 ansible_ssh_user=root ansible_ssh_pass=xxx\n[web02]\n192.168.0.[2:5]:2222    #从2到5的主机,如果端口号不是默认22，可直接用:后定义端口号\n[web03]    #对应变量，供playbooks使用\n192.168.0.8 port=80 hostname=\"test01\"\n192.168.0.9 port=8080 hostname=\"test02\"\n[web03.vpn]\t#设置别名 访问192.168.0.190 实际访问10.8.0.190\n192.168.0.190 ansible_ssh_port=2222 ansible_ssh_host=10.8.0.190\n[web03:vars]    #对web03组定义变量，供playbooks使用\nserver1=ttxsgoto1.com\nserver2=ttxsgoto2.com\n[webservers:children]    #组嵌套，webservers组包括web01和web02下的主机\nweb01\nweb02\n[webservers:vars]    #组定义变量\nserver1=tttxsgoto.com\n \n#########################\n#  分文件定义host和group  #\n#########################\n- 独立的文件格式为yaml文件\n- 在对应的hosts目录中创建host_vars，group_vars目录，该目录存放对应的变量\n- host_vars目录用于存放host变量，all文件对所有主机有效\n- 目录下的文件名和hosts文件对应的主机和组需要一样\n---\n# Which version of WordPress to deploy\nwp_version: 4.2.4\nwp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82\n \n# These are the WordPress database settings\nwp_db_name: test\nwp_db_user: root\nwp_db_password: root\n```\n查看模块帮助信息\n    - ansible-doc -l\n    - ansible-doc -s  module_name\n\n### 变量\n- invetory中定义变量\n\n```\n[web03:vars]    #对web03组定义变量，供playbooks使用\nserver1=ttxsgoto1.com\nserver2=ttxsgoto2.com\n```\n- playbooks中定义变量\n\n```\n- hosts: webservers         #对webservers主机组下的所有主机进行操作\n  vars:           # 为该play定义两个变量\n    http_port: 80\n    max_clients: 200\n  vars_files:\t# 使用变量文件定义变量\n      - vars/server_vars.yml\n```\n在playbook文件中冒号后面的值不能以\"{ \"开头，解决办法：要在\"{ \"开始的值加上引号，如：\n```\n- hosts: app_servers\n  vars:\n    app_path: \"{{ base_path }}\"\n```\n- 通过系统变量(facts),可直接使用，如ansible_os_family，ansible_ens3.ipv4.address；\n- 运行结果当做变量使用-注册变量,register: result ,debug: msg=\"{{ result.stdout }}\"\n- 文件模板中使用的变量\n- 定义命令行变量如下\n\n### 用命令行传递参数\n- -e或者--extra-vars， -e '参数名1=值1 参数名2=值2'\n- json格式传递参数  -e '{'hosts':'local', 'user':'root'}'\n- 参数放在json文件里面中 -e \"@vars.json\"\n\nansible命令应用\n```\nansible <host-pattern> [-f forks] [-m module_name] [-a args]\nansible \"web01:web02\" -m ping \t# 多个组执行用:分隔，同时属于多个组的主机只会执行一次\n-f forks:启动并发线程数\n-m module_name:使用的模块名\n-a args:模块特有的参数\n\n```\n### 常见模块\n- command\n- cron\n- user\n- group\n- copy\n- file\n- ping\n- setup\n- service\n- shell\n- script\n- yum/apt\n\ncron:计划任务\n```\npresent: 安装任务\nabsent:移除任务\nansible local -m cron -a 'minute=*/5 job=\"/bin/echo abc > /root/abc.log\" name=\"test cron job\"  state=\"absent\" '\n```\nuser:用户管理\n```\n- name:指明添加的用户名\n- ansible local -m user -a 'name=\"user1\"'\n```\ngroup:用户组管理\n```\nansible local -m group -a 'name=user1 gid=306 system=yes'    #添加用户组\nansible local -m group -a 'name=user1 gid=306 system=yes state=absent'    #删除用户组\n```\ncopy:文件复制\n```\nsrc=:定义本地源路径\ncontent=:取代src=，定义内容直接写入到远程文件中\ndest=:定义远程路径，绝对路径\nansible local -m copy -a 'src=/etc/fstab dest=/tmp/fstab.bak owner=root  mode=777'\nansible local -m copy -a 'content=\"hello wrold\\nabc\\n\" dest=/tmp/fstab.bak owner=root \n```\nfile:文件管理属性\n```\npath=: 指明文件路径，可以使用name、dest来替换\nansible local -m file -a ' owner=bigdata group=bigdata  mode=644 path=/tmp/fstab.bak'    #修改权限和组信息\nansible local -m file -a 'path=/tmp/fstab.bak.link src=/tmp/fstab.bak state=link'  #软链接\n```\nping:测试主机联通性\n```\nansible local -m ping\n```\nsetup:收集远程主机的facts\n```\n#每个被管理节点会将自己相关的信息发生给远程的ansible主机，用于模板调用变量\nansible local -m setup\n```\nservice:常用服务的运行状态\n```\nenabled=: 开机自启动，为true和false\nname=: 服务名称\nstate=: 启动状态，started,stopped,restarted;\nansible local -m service -a \"enabled=true name=nginx state=started\"\n```\nshell:远程执行命令，可传递参数\n```\n#用到管道等功能的复杂命令时使用shell命令\nansible local -m shell -a \"echo xxx | passwd --stdin user1\"\n```\nscript:将本地脚本在远程上执行\n```\n#注意：使用相对路径指定脚本\nansible local -m script -a \"./test.sh\"\n```\nyum/apt: 安装程序包\n```\nname=:    需要安装的程序包，可以加版本号\nstate=:    present，lastest安装，absent表示卸载\nansible local -m yum -a \"name=zsh\"    #安装\nansible local -m apt -a \"name=zsh state=absent\"    #卸载\n```\n### playbook\n通过yaml将多个模块组装起来运行多个任务\n实例说明：https://github.com/ansible/ansible-examples\n\n组成结构：\nPlaybooks：\n    Tasks：任务列表,定义的一组hosts映射到task\n    Variables：变量\n    Templates：模板\n    Handlers：处理器，由某事件触发执行的操作,一般用来重启服务,或者触发系统重启操作，handlers按照声明的顺序执行\n    Roles：角色\n    Include语句\n\n运行说明：\n0)yaml语法检测\nansible-playbook –syntax-check /path/to/playbook.yaml\n1)yaml测试运行\nansible-playbook -C /path/to/playbook.yaml\n2)运行\nansiable-playbook /path/to/playbook.yml\n-t TAGS  #给指定的任务定义一个调用标识\n--tags=TAGS #给指定的任务定义一个调用标识\n--skip-tags=SKIP_TAGS #跳过指定的标签\n--start-at-task=START_AT #从哪个任务后执行\n--list-tags    #查看标签\n基本结构：\n```\n---               #任何playbook文件(其实就是yaml文件)都要以这个开头\n- hosts: webservers         #对webservers主机组下的所有主机进行操作\n  vars:           #为该play定义两个变量\n    http_port: 80\n    max_clients: 200\n  remote_user: deploy       #连接到远程主机的用户\n  sudo: yes       #以sudo模式运行该play\n  sudo_user: root           #sudo到哪个用户，默认为root，如果sudo到该用户需要密码，则在执行ansible-playbook的时候指定-K选项来输入sudo密码\n  tasks:          #开始定义task\n  - name: ensure apache is at the latest version            #这既是每个task的说明也是每个task的名字\n    yum: pkg=httpd state=latest\n    tags:         #给该task打一个标签\n      - last_http\n  - name: write the apache config file\n    template: src=/srv/httpd.j2 dest=/etc/httpd.conf\n    notify:       #提供watch功能，这里当apache配置文件改变时，就调用handlers中名为\"restart apache\"的task来重启apache\n    - restart apache\n  - name: ensure apache is running\n    service: name=httpd state=started\n  handlers:       #notify通知这里的task执行，说明：定义在handlers下的task只有在notify触发的时候才会执行\n    - name: restart apache\n      service: name=httpd state=restarted\n```\n\n```\n例子1：\n- hosts: webservers\n  remote_user: root\n  tasks:\n  - name: create nginx group\n      group: name=nginx system=yes gid=208\n  - name: create nginx user\n      user: name=nginx uid=208 system=yes\n- hosts: dbservers\n  remote_user: root\n  tasks:\n  - name: copy file to dbsrvs\n      copy: src=/etc/inittab dest=/tmp/inittab.bak\n \n例子2(handler,vars)：\n- hosts: webservers\n  remote_user: root\n  vars:\n  - package: httpd\n  - service: httpd\n  tasks:\n  - name: install httpd package\n    yum: name={{ package }} state=lastest\n  - name: install configuration file for httpd\n      copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf\n      notify:\n      - restart httpd\n  - name: start httpd service\n      service: enabled=true name=httpd state=started\n  handlers:\n  - name: restart httpd\n    service: name=httpd state=restarted\n  - name: copy file\n    copy: content=\"{{ ansible_all_ipv4_addresses }}\" dest=/tmp/test.txt\n \n例子3(条件测试)：\n- hosts: webservers\n  remote_user: root\n  vars:\n  - username: user1\n  tasks:\n  - name: create {{ username }}\n      user: name={{ userneam }}\n      when: ansible_fqdn == 'ttxsgoto'\n \n例子4(迭代-for)：\n- hosts: webservers\n  remote_user: root\n  - name: add username\n    user: name={{ item.name }} state=present groups={{ item.groups }}\n    with_items:\n      - {name:'testuser1',groups='user1'}\n      - {name:'testuser2',groups='user2'}\n- hosts: webservers\n  remote_user: root\n  - name: add username\n    user: name={{ item }} state=present groups=group1\n    with_items:\n      - testuser1\n      - testuser2\n \n例子5(templates/tags  ansible-playbook test.yml --tags='conf_chage'):\n #tags: 在playbook可以为某个任务定义一个标签，在执行playbook时，通过tags可实现仅运行指定tasks任务\n - hosts: webservers\n  remote_user: root\n  vars:\n  - package: httpd\n  - service: httpd\n  tasks:\n  - name: install httpd package\n    yum: name={{ package }} state=lastest\n  - name: install configuration file for httpd\n      template: src=/root/conf/httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf\n     tags:\n     - conf_chage\n     notify:\n      - restart httpd\n  - name: start httpd service\n      service: enabled=true name=httpd state=started\n  handlers:\n  - name: restart httpd\n    service: name=httpd state=restarted\n```\n\n### roles\nroles：用于层次化、结构化的组织playbook；role能够根据层次结构自动装载变量文件、task以及handlers等，要使用roles只需要在playbook中使用include指令；roles通过分别将变量、文件、任务、模块及处理器放置在单独的目录中，并可以便捷地通过include它们的一种机制，角色一般用于基于主机构建服务的场景中；Roles 的概念来自于这样的想法：通过 include 包含文件并将它们组合在一起，组织成一个简洁、可重用的抽象对象\n\n创建role的步骤如下：\n1. 创建以roles命名的目录\n2. 在roles目录中分别创建以各角色名称命名的目录，如websrvs等\n3. 在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建\n4. 在palybook文件中调用各角色\n\nroles内各目录中可用的文件\n```\ntasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表include包含其它的位于此目录中的task文件\nfiles目录：存放由copy或script等模块调用的文件\ntemplates目录：template模块会自动在此目录中寻找Jinja2模板文件\nhandlers目录：此目录中应当包含一个main\nvars目录：应当包含一个main.yml文件，用于定义此角色用到的变量\nmeta目录：应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关\ndefault目录：应当包含一个main.yml文件，用于为当前角色设定默认变量\n```\n\nwordpress-nginx 实例如下：\n#### 目录结构\n```\n./\n├── group_vars\n│   └── all\n├── roles\n│   ├── common\n│   │   ├── files\n│   │   │   ├── epel.repo\n│   │   │   ├── iptables-save\n│   │   │   └── RPM-GPG-KEY-EPEL-6\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   └── tasks\n│   │       └── main.yml\n│   ├── mysql\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   ├── tasks\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── my.cnf.j2\n│   ├── nginx\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   ├── tasks\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── default.conf\n│   ├── php-fpm\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   ├── tasks\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── wordpress.conf\n│   └── wordpress\n│       ├── tasks\n│       │   └── main.yml\n│       └── templates\n│           └── wp-config.php\n└── site.yml\n \n21 directories, 18 files\n```\nsite.yml -入口函数\n```\n---\n- name: Install WordPress, MySQL, Nginx, and PHP-FPM\n  hosts: all\n  remote_user: root\n  # remote_user: user\n  # become: yes\n  # become_method: sudo\n \n  roles:\n    - common\n    - mysql\n    - nginx\n    - php-fpm\n    - wordpress\n```\ngroup_vars/all -全局变量\n```\n---\n# Which version of WordPress to deploy\nwp_version: 4.2.4\nwp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82\n \n# These are the WordPress database settings\nwp_db_name: wordpress\nwp_db_user: wordpress\nwp_db_password: secret\n \n# You shouldn't need to change this.\nmysql_port: 3306\n \n# This is used for the nginx server configuration, but access to the\n# WordPress site is not restricted by a named host.\nserver_hostname: www.example.com\n \n# Disable All Updates\n# By default automatic updates are enabled, set this value to true to disable all automatic updates\nauto_up_disable: false\n \n#Define Core Update Level\n#true  = Development, minor, and major updates are all enabled\n#false = Development, minor, and major updates are all disabled\n#minor = Minor updates are enabled, development, and major updates are disabled\ncore_update_level: true\n```\n#### common\nroles/common/tasks/main.yml\n```\n---\n- name: Install libselinux-python\n  yum: name=libselinux-python state=present\n \n- name: Reload ansible_facts\n  setup:\n \n- name: Copy the EPEL repository definition\n  copy: src=epel.repo dest=/etc/yum.repos.d/epel.repo\n \n- name: Create the GPG key for EPEL\n  copy: src=RPM-GPG-KEY-EPEL-6 dest=/etc/pki/rpm-gpg\n \n- name: Set up iptables rules\n  copy: src=iptables-save dest=/etc/sysconfig/iptables\n  notify: restart iptables\n```\nroles/common/handlers/main.yml\n```\n---\n- name: restart iptables\n  service: name=iptables state=restarted\n```\n#### mysql\nroles/mysql/tasks/main.yml\n```\n---\n- name: Install Mysql package\n  yum: name={{ item }} state=present\n  with_items:\n   - mysql-server\n   - MySQL-python\n   - libselinux-python\n   - libsemanage-python\n \n- name: Configure SELinux to start mysql on any port\n  seboolean: name=mysql_connect_any state=true persistent=yes\n  when: ansible_selinux.status == \"enabled\"\n \n- name: Create Mysql configuration file\n  template: src=my.cnf.j2 dest=/etc/my.cnf\n  notify:\n  - restart mysql\n \n- name: Start Mysql Service\n  service: name=mysqld state=started enabled=yes\n```\nroles/mysql/handlers/main.yml\n```\n---\n- name: restart mysql\n  service: name=mysqld state=restarted\n```\nroles/mysql/templates/my.cnf.j2\n```\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nuser=mysql\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nport={{ mysql_port }}\n \n[mysqld_safe]\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\n```\n#### nginx\nroles/nginx/tasks/main.yml\n```\n---\n- name: Install nginx\n  yum: name=nginx state=present\n \n- name: Copy nginx configuration for wordpress\n  template: src=default.conf dest=/etc/nginx/conf.d/default.conf\n  notify: restart nginx\n```\nroles/nginx/handlers/main.yml\n```\n---\n- name: restart nginx\n  service: name=nginx state=restarted enabled=yes\n```\nroles/nginx/templates/default.conf\n```\nserver {\n        listen       80 default_server;\n        server_name  {{ server_hostname }};\n        root /srv/wordpress/ ;\n \n\tclient_max_body_size 64M;\n \n\t# Deny access to any files with a .php extension in the uploads directory\n        location ~* /(?:uploads|files)/.*\\.php$ {\n                deny all;\n        }\n \n        location / {\n                index index.php index.html index.htm;\n                try_files $uri $uri/ /index.php?$args;\n        }\n \n        location ~* \\.(gif|jpg|jpeg|png|css|js)$ {\n                expires max;\n        }\n \n        location ~ \\.php$ {\n                try_files $uri =404;\n                fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n                fastcgi_index index.php;\n                fastcgi_pass  unix:/var/run/php-fpm/wordpress.sock;\n                fastcgi_param   SCRIPT_FILENAME\n                                $document_root$fastcgi_script_name;\n                include       fastcgi_params;\n        }\n}\n```\n#### php-fpm\nroles/php-fpm/tasks/main.yml\n```\n---\n- name: Install php-fpm and deps\n  yum: name={{ item }} state=present\n  with_items:\n    - php\n    - php-fpm\n    - php-enchant\n    - php-IDNA_Convert\n    - php-mbstring\n    - php-mysql\n    - php-PHPMailer\n    - php-process\n    - php-simplepie\n    - php-xml\n \n- name: Disable default pool\n  command: mv /etc/php-fpm.d/www.conf /etc/php-fpm.d/www.disabled creates=/etc/php-fpm.d/www.disabled\n  notify: restart php-fpm\n \n- name: Copy php-fpm configuration\n  template: src=wordpress.conf dest=/etc/php-fpm.d/\n  notify: restart php-fpm\n```\nroles/php-fpm/handlers/main.yml\n```\n---\n- name: restart php-fpm\n  service: name=php-fpm state=restarted\n```\nroles/php-fpm/templates/wordpress.conf\n```\n[wordpress]\nlisten = /var/run/php-fpm/wordpress.sock\nlisten.owner = nginx\nlisten.group = nginx\nlisten.mode = 0660\nuser = wordpress\ngroup = wordpress\npm = dynamic\npm.max_children = 10\npm.start_servers = 1\npm.min_spare_servers = 1\npm.max_spare_servers = 3\npm.max_requests = 500\nchdir = /srv/wordpress/\nphp_admin_value[open_basedir] = /srv/wordpress/:/tmp\n```\n#### wordpress\nroles/wordpress/tasks/main.yml\n```\n---\n- name: Download WordPress\n  get_url: url=http://wordpress.org/wordpress-{{ wp_version }}.tar.gz dest=/srv/wordpress-{{ wp_version }}.tar.gz\n           sha256sum=\"{{ wp_sha256sum }}\"\n \n- name: Extract archive\n  command: chdir=/srv/ /bin/tar xvf wordpress-{{ wp_version }}.tar.gz creates=/srv/wordpress\n \n- name: Add group \"wordpress\"\n  group: name=wordpress\n \n- name: Add user \"wordpress\"\n  user: name=wordpress group=wordpress home=/srv/wordpress/\n \n- name: Fetch random salts for WordPress config\n  local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/\n  register: \"wp_salt\"\n  become: no\n  become_method: sudo\n \n- name: Create WordPress database\n  mysql_db: name={{ wp_db_name }} state=present\n \n- name: Create WordPress database user\n  mysql_user: name={{ wp_db_user }} password={{ wp_db_password }} priv={{ wp_db_name }}.*:ALL host='localhost' state=present\n \n- name: Copy WordPress config file\n  template: src=wp-config.php dest=/srv/wordpress/\n \n- name: Change ownership of WordPress installation\n  file: path=/srv/wordpress/ owner=wordpress group=wordpress state=directory recurse=yes setype=httpd_sys_content_t\n \n- name: Start php-fpm Service\n  service: name=php-fpm state=started enabled=yes\n```\nroles/wordpress/templates/wp-config.php\n```\n<?php\n/**\n * The base configurations of the WordPress.\n *\n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information\n * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n *\n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to \"wp-config.php\" and fill in the values.\n *\n * @package WordPress\n */\n \n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine('DB_NAME', '{{ wp_db_name }}');\n \n/** MySQL database username */\ndefine('DB_USER', '{{ wp_db_user }}');\n \n/** MySQL database password */\ndefine('DB_PASSWORD', '{{ wp_db_password }}');\n \n/** MySQL hostname */\ndefine('DB_HOST', 'localhost');\n \n/** Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8');\n \n/** The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n \n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * @since 2.6.0\n */\n \n{{ wp_salt.stdout }}\n \n/**#@-*/\n \n/**\n * WordPress Database Table prefix.\n *\n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n */\n$table_prefix  = 'wp_';\n \n/**\n * WordPress Localized Language, defaults to English.\n *\n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n */\ndefine('WPLANG', '');\n \n/**\n * For developers: WordPress debugging mode.\n *\n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n */\ndefine('WP_DEBUG', false);\n \n/** Disable Automatic Updates Completely */\ndefine( 'AUTOMATIC_UPDATER_DISABLED', {{auto_up_disable}} );\n \n/** Define AUTOMATIC Updates for Components. */\ndefine( 'WP_AUTO_UPDATE_CORE', {{core_update_level}} );\n \n/* That's all, stop editing! Happy blogging. */\n \n/** Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n\tdefine('ABSPATH', dirname(__FILE__) . '/');\n \n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/ansible.md","raw":"---\ntitle: 运维 Ansible\ndate: 2017-03-18 21:19:30\ntags:\n  - Ansible\ncategories:\n  - 运维\n---\n### Ansible架构图\n![](https://ttxsgoto.github.io/img/ansible/ansible01.png)\n### Ansible特性\n    - 基于python实现，由Paramike，PyYAML和Jinjia2三个关键模块\n    - 部署简单，agentless\n    - 使用ssh协议\n    - 主从集中化模式\n    - 支持自定义模块\n    - 支持playbook\n    - 幂等性：一种操作可重复多次结果相同\n### Ansible核心组件\n    - ansible core：Ansible的核心程序\n    - host iventory：记录了每一个由Ansible管理的主机信息，信息包括ssh端口，root帐号密码，ip地址等\n    - core modules：Ansible管理主机之前，先调用core Modules中的模块，然后指明管理Host Lnventory中的主机，就可以完成管理主机\n    - custom modules：自定义模块\n    - playbook(yaml,jinjia2)：YAML格式文件，多个任务定义在一个文件中\n    - connect plugin：连接插件，Ansible和Host通信使用\n\n### Invetory文件说明\n参数说明：\n- ansible_ssh_host 将要连接的远程主机名，可用于设置别名\n- ansible_ssh_port ssh端口，非默认可通过它来设置\n- ansible_ssh_user 默认的ssh用户名\n- ansible_ssh_pass ssh密码 不安全\n- ansible_sudo_pass sudo密码 不安全\n- ansible_connection 主机连接类型\n- ansible_ssh_private_key_file ssh 使用的私钥文件.适用于有多个密钥\n- ansible_shell_type 目标系统的shell类型\n- ansible_python_interpreter 目标主机的python路径\n\n```\n[web01]\n192.168.0.1 ansible_ssh_user=root ansible_ssh_pass=xxx\n[web02]\n192.168.0.[2:5]:2222    #从2到5的主机,如果端口号不是默认22，可直接用:后定义端口号\n[web03]    #对应变量，供playbooks使用\n192.168.0.8 port=80 hostname=\"test01\"\n192.168.0.9 port=8080 hostname=\"test02\"\n[web03.vpn]\t#设置别名 访问192.168.0.190 实际访问10.8.0.190\n192.168.0.190 ansible_ssh_port=2222 ansible_ssh_host=10.8.0.190\n[web03:vars]    #对web03组定义变量，供playbooks使用\nserver1=ttxsgoto1.com\nserver2=ttxsgoto2.com\n[webservers:children]    #组嵌套，webservers组包括web01和web02下的主机\nweb01\nweb02\n[webservers:vars]    #组定义变量\nserver1=tttxsgoto.com\n \n#########################\n#  分文件定义host和group  #\n#########################\n- 独立的文件格式为yaml文件\n- 在对应的hosts目录中创建host_vars，group_vars目录，该目录存放对应的变量\n- host_vars目录用于存放host变量，all文件对所有主机有效\n- 目录下的文件名和hosts文件对应的主机和组需要一样\n---\n# Which version of WordPress to deploy\nwp_version: 4.2.4\nwp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82\n \n# These are the WordPress database settings\nwp_db_name: test\nwp_db_user: root\nwp_db_password: root\n```\n查看模块帮助信息\n    - ansible-doc -l\n    - ansible-doc -s  module_name\n\n### 变量\n- invetory中定义变量\n\n```\n[web03:vars]    #对web03组定义变量，供playbooks使用\nserver1=ttxsgoto1.com\nserver2=ttxsgoto2.com\n```\n- playbooks中定义变量\n\n```\n- hosts: webservers         #对webservers主机组下的所有主机进行操作\n  vars:           # 为该play定义两个变量\n    http_port: 80\n    max_clients: 200\n  vars_files:\t# 使用变量文件定义变量\n      - vars/server_vars.yml\n```\n在playbook文件中冒号后面的值不能以\"{ \"开头，解决办法：要在\"{ \"开始的值加上引号，如：\n```\n- hosts: app_servers\n  vars:\n    app_path: \"{{ base_path }}\"\n```\n- 通过系统变量(facts),可直接使用，如ansible_os_family，ansible_ens3.ipv4.address；\n- 运行结果当做变量使用-注册变量,register: result ,debug: msg=\"{{ result.stdout }}\"\n- 文件模板中使用的变量\n- 定义命令行变量如下\n\n### 用命令行传递参数\n- -e或者--extra-vars， -e '参数名1=值1 参数名2=值2'\n- json格式传递参数  -e '{'hosts':'local', 'user':'root'}'\n- 参数放在json文件里面中 -e \"@vars.json\"\n\nansible命令应用\n```\nansible <host-pattern> [-f forks] [-m module_name] [-a args]\nansible \"web01:web02\" -m ping \t# 多个组执行用:分隔，同时属于多个组的主机只会执行一次\n-f forks:启动并发线程数\n-m module_name:使用的模块名\n-a args:模块特有的参数\n\n```\n### 常见模块\n- command\n- cron\n- user\n- group\n- copy\n- file\n- ping\n- setup\n- service\n- shell\n- script\n- yum/apt\n\ncron:计划任务\n```\npresent: 安装任务\nabsent:移除任务\nansible local -m cron -a 'minute=*/5 job=\"/bin/echo abc > /root/abc.log\" name=\"test cron job\"  state=\"absent\" '\n```\nuser:用户管理\n```\n- name:指明添加的用户名\n- ansible local -m user -a 'name=\"user1\"'\n```\ngroup:用户组管理\n```\nansible local -m group -a 'name=user1 gid=306 system=yes'    #添加用户组\nansible local -m group -a 'name=user1 gid=306 system=yes state=absent'    #删除用户组\n```\ncopy:文件复制\n```\nsrc=:定义本地源路径\ncontent=:取代src=，定义内容直接写入到远程文件中\ndest=:定义远程路径，绝对路径\nansible local -m copy -a 'src=/etc/fstab dest=/tmp/fstab.bak owner=root  mode=777'\nansible local -m copy -a 'content=\"hello wrold\\nabc\\n\" dest=/tmp/fstab.bak owner=root \n```\nfile:文件管理属性\n```\npath=: 指明文件路径，可以使用name、dest来替换\nansible local -m file -a ' owner=bigdata group=bigdata  mode=644 path=/tmp/fstab.bak'    #修改权限和组信息\nansible local -m file -a 'path=/tmp/fstab.bak.link src=/tmp/fstab.bak state=link'  #软链接\n```\nping:测试主机联通性\n```\nansible local -m ping\n```\nsetup:收集远程主机的facts\n```\n#每个被管理节点会将自己相关的信息发生给远程的ansible主机，用于模板调用变量\nansible local -m setup\n```\nservice:常用服务的运行状态\n```\nenabled=: 开机自启动，为true和false\nname=: 服务名称\nstate=: 启动状态，started,stopped,restarted;\nansible local -m service -a \"enabled=true name=nginx state=started\"\n```\nshell:远程执行命令，可传递参数\n```\n#用到管道等功能的复杂命令时使用shell命令\nansible local -m shell -a \"echo xxx | passwd --stdin user1\"\n```\nscript:将本地脚本在远程上执行\n```\n#注意：使用相对路径指定脚本\nansible local -m script -a \"./test.sh\"\n```\nyum/apt: 安装程序包\n```\nname=:    需要安装的程序包，可以加版本号\nstate=:    present，lastest安装，absent表示卸载\nansible local -m yum -a \"name=zsh\"    #安装\nansible local -m apt -a \"name=zsh state=absent\"    #卸载\n```\n### playbook\n通过yaml将多个模块组装起来运行多个任务\n实例说明：https://github.com/ansible/ansible-examples\n\n组成结构：\nPlaybooks：\n    Tasks：任务列表,定义的一组hosts映射到task\n    Variables：变量\n    Templates：模板\n    Handlers：处理器，由某事件触发执行的操作,一般用来重启服务,或者触发系统重启操作，handlers按照声明的顺序执行\n    Roles：角色\n    Include语句\n\n运行说明：\n0)yaml语法检测\nansible-playbook –syntax-check /path/to/playbook.yaml\n1)yaml测试运行\nansible-playbook -C /path/to/playbook.yaml\n2)运行\nansiable-playbook /path/to/playbook.yml\n-t TAGS  #给指定的任务定义一个调用标识\n--tags=TAGS #给指定的任务定义一个调用标识\n--skip-tags=SKIP_TAGS #跳过指定的标签\n--start-at-task=START_AT #从哪个任务后执行\n--list-tags    #查看标签\n基本结构：\n```\n---               #任何playbook文件(其实就是yaml文件)都要以这个开头\n- hosts: webservers         #对webservers主机组下的所有主机进行操作\n  vars:           #为该play定义两个变量\n    http_port: 80\n    max_clients: 200\n  remote_user: deploy       #连接到远程主机的用户\n  sudo: yes       #以sudo模式运行该play\n  sudo_user: root           #sudo到哪个用户，默认为root，如果sudo到该用户需要密码，则在执行ansible-playbook的时候指定-K选项来输入sudo密码\n  tasks:          #开始定义task\n  - name: ensure apache is at the latest version            #这既是每个task的说明也是每个task的名字\n    yum: pkg=httpd state=latest\n    tags:         #给该task打一个标签\n      - last_http\n  - name: write the apache config file\n    template: src=/srv/httpd.j2 dest=/etc/httpd.conf\n    notify:       #提供watch功能，这里当apache配置文件改变时，就调用handlers中名为\"restart apache\"的task来重启apache\n    - restart apache\n  - name: ensure apache is running\n    service: name=httpd state=started\n  handlers:       #notify通知这里的task执行，说明：定义在handlers下的task只有在notify触发的时候才会执行\n    - name: restart apache\n      service: name=httpd state=restarted\n```\n\n```\n例子1：\n- hosts: webservers\n  remote_user: root\n  tasks:\n  - name: create nginx group\n      group: name=nginx system=yes gid=208\n  - name: create nginx user\n      user: name=nginx uid=208 system=yes\n- hosts: dbservers\n  remote_user: root\n  tasks:\n  - name: copy file to dbsrvs\n      copy: src=/etc/inittab dest=/tmp/inittab.bak\n \n例子2(handler,vars)：\n- hosts: webservers\n  remote_user: root\n  vars:\n  - package: httpd\n  - service: httpd\n  tasks:\n  - name: install httpd package\n    yum: name={{ package }} state=lastest\n  - name: install configuration file for httpd\n      copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf\n      notify:\n      - restart httpd\n  - name: start httpd service\n      service: enabled=true name=httpd state=started\n  handlers:\n  - name: restart httpd\n    service: name=httpd state=restarted\n  - name: copy file\n    copy: content=\"{{ ansible_all_ipv4_addresses }}\" dest=/tmp/test.txt\n \n例子3(条件测试)：\n- hosts: webservers\n  remote_user: root\n  vars:\n  - username: user1\n  tasks:\n  - name: create {{ username }}\n      user: name={{ userneam }}\n      when: ansible_fqdn == 'ttxsgoto'\n \n例子4(迭代-for)：\n- hosts: webservers\n  remote_user: root\n  - name: add username\n    user: name={{ item.name }} state=present groups={{ item.groups }}\n    with_items:\n      - {name:'testuser1',groups='user1'}\n      - {name:'testuser2',groups='user2'}\n- hosts: webservers\n  remote_user: root\n  - name: add username\n    user: name={{ item }} state=present groups=group1\n    with_items:\n      - testuser1\n      - testuser2\n \n例子5(templates/tags  ansible-playbook test.yml --tags='conf_chage'):\n #tags: 在playbook可以为某个任务定义一个标签，在执行playbook时，通过tags可实现仅运行指定tasks任务\n - hosts: webservers\n  remote_user: root\n  vars:\n  - package: httpd\n  - service: httpd\n  tasks:\n  - name: install httpd package\n    yum: name={{ package }} state=lastest\n  - name: install configuration file for httpd\n      template: src=/root/conf/httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf\n     tags:\n     - conf_chage\n     notify:\n      - restart httpd\n  - name: start httpd service\n      service: enabled=true name=httpd state=started\n  handlers:\n  - name: restart httpd\n    service: name=httpd state=restarted\n```\n\n### roles\nroles：用于层次化、结构化的组织playbook；role能够根据层次结构自动装载变量文件、task以及handlers等，要使用roles只需要在playbook中使用include指令；roles通过分别将变量、文件、任务、模块及处理器放置在单独的目录中，并可以便捷地通过include它们的一种机制，角色一般用于基于主机构建服务的场景中；Roles 的概念来自于这样的想法：通过 include 包含文件并将它们组合在一起，组织成一个简洁、可重用的抽象对象\n\n创建role的步骤如下：\n1. 创建以roles命名的目录\n2. 在roles目录中分别创建以各角色名称命名的目录，如websrvs等\n3. 在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建\n4. 在palybook文件中调用各角色\n\nroles内各目录中可用的文件\n```\ntasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表include包含其它的位于此目录中的task文件\nfiles目录：存放由copy或script等模块调用的文件\ntemplates目录：template模块会自动在此目录中寻找Jinja2模板文件\nhandlers目录：此目录中应当包含一个main\nvars目录：应当包含一个main.yml文件，用于定义此角色用到的变量\nmeta目录：应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关\ndefault目录：应当包含一个main.yml文件，用于为当前角色设定默认变量\n```\n\nwordpress-nginx 实例如下：\n#### 目录结构\n```\n./\n├── group_vars\n│   └── all\n├── roles\n│   ├── common\n│   │   ├── files\n│   │   │   ├── epel.repo\n│   │   │   ├── iptables-save\n│   │   │   └── RPM-GPG-KEY-EPEL-6\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   └── tasks\n│   │       └── main.yml\n│   ├── mysql\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   ├── tasks\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── my.cnf.j2\n│   ├── nginx\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   ├── tasks\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── default.conf\n│   ├── php-fpm\n│   │   ├── handlers\n│   │   │   └── main.yml\n│   │   ├── tasks\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── wordpress.conf\n│   └── wordpress\n│       ├── tasks\n│       │   └── main.yml\n│       └── templates\n│           └── wp-config.php\n└── site.yml\n \n21 directories, 18 files\n```\nsite.yml -入口函数\n```\n---\n- name: Install WordPress, MySQL, Nginx, and PHP-FPM\n  hosts: all\n  remote_user: root\n  # remote_user: user\n  # become: yes\n  # become_method: sudo\n \n  roles:\n    - common\n    - mysql\n    - nginx\n    - php-fpm\n    - wordpress\n```\ngroup_vars/all -全局变量\n```\n---\n# Which version of WordPress to deploy\nwp_version: 4.2.4\nwp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82\n \n# These are the WordPress database settings\nwp_db_name: wordpress\nwp_db_user: wordpress\nwp_db_password: secret\n \n# You shouldn't need to change this.\nmysql_port: 3306\n \n# This is used for the nginx server configuration, but access to the\n# WordPress site is not restricted by a named host.\nserver_hostname: www.example.com\n \n# Disable All Updates\n# By default automatic updates are enabled, set this value to true to disable all automatic updates\nauto_up_disable: false\n \n#Define Core Update Level\n#true  = Development, minor, and major updates are all enabled\n#false = Development, minor, and major updates are all disabled\n#minor = Minor updates are enabled, development, and major updates are disabled\ncore_update_level: true\n```\n#### common\nroles/common/tasks/main.yml\n```\n---\n- name: Install libselinux-python\n  yum: name=libselinux-python state=present\n \n- name: Reload ansible_facts\n  setup:\n \n- name: Copy the EPEL repository definition\n  copy: src=epel.repo dest=/etc/yum.repos.d/epel.repo\n \n- name: Create the GPG key for EPEL\n  copy: src=RPM-GPG-KEY-EPEL-6 dest=/etc/pki/rpm-gpg\n \n- name: Set up iptables rules\n  copy: src=iptables-save dest=/etc/sysconfig/iptables\n  notify: restart iptables\n```\nroles/common/handlers/main.yml\n```\n---\n- name: restart iptables\n  service: name=iptables state=restarted\n```\n#### mysql\nroles/mysql/tasks/main.yml\n```\n---\n- name: Install Mysql package\n  yum: name={{ item }} state=present\n  with_items:\n   - mysql-server\n   - MySQL-python\n   - libselinux-python\n   - libsemanage-python\n \n- name: Configure SELinux to start mysql on any port\n  seboolean: name=mysql_connect_any state=true persistent=yes\n  when: ansible_selinux.status == \"enabled\"\n \n- name: Create Mysql configuration file\n  template: src=my.cnf.j2 dest=/etc/my.cnf\n  notify:\n  - restart mysql\n \n- name: Start Mysql Service\n  service: name=mysqld state=started enabled=yes\n```\nroles/mysql/handlers/main.yml\n```\n---\n- name: restart mysql\n  service: name=mysqld state=restarted\n```\nroles/mysql/templates/my.cnf.j2\n```\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nuser=mysql\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nport={{ mysql_port }}\n \n[mysqld_safe]\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\n```\n#### nginx\nroles/nginx/tasks/main.yml\n```\n---\n- name: Install nginx\n  yum: name=nginx state=present\n \n- name: Copy nginx configuration for wordpress\n  template: src=default.conf dest=/etc/nginx/conf.d/default.conf\n  notify: restart nginx\n```\nroles/nginx/handlers/main.yml\n```\n---\n- name: restart nginx\n  service: name=nginx state=restarted enabled=yes\n```\nroles/nginx/templates/default.conf\n```\nserver {\n        listen       80 default_server;\n        server_name  {{ server_hostname }};\n        root /srv/wordpress/ ;\n \n\tclient_max_body_size 64M;\n \n\t# Deny access to any files with a .php extension in the uploads directory\n        location ~* /(?:uploads|files)/.*\\.php$ {\n                deny all;\n        }\n \n        location / {\n                index index.php index.html index.htm;\n                try_files $uri $uri/ /index.php?$args;\n        }\n \n        location ~* \\.(gif|jpg|jpeg|png|css|js)$ {\n                expires max;\n        }\n \n        location ~ \\.php$ {\n                try_files $uri =404;\n                fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n                fastcgi_index index.php;\n                fastcgi_pass  unix:/var/run/php-fpm/wordpress.sock;\n                fastcgi_param   SCRIPT_FILENAME\n                                $document_root$fastcgi_script_name;\n                include       fastcgi_params;\n        }\n}\n```\n#### php-fpm\nroles/php-fpm/tasks/main.yml\n```\n---\n- name: Install php-fpm and deps\n  yum: name={{ item }} state=present\n  with_items:\n    - php\n    - php-fpm\n    - php-enchant\n    - php-IDNA_Convert\n    - php-mbstring\n    - php-mysql\n    - php-PHPMailer\n    - php-process\n    - php-simplepie\n    - php-xml\n \n- name: Disable default pool\n  command: mv /etc/php-fpm.d/www.conf /etc/php-fpm.d/www.disabled creates=/etc/php-fpm.d/www.disabled\n  notify: restart php-fpm\n \n- name: Copy php-fpm configuration\n  template: src=wordpress.conf dest=/etc/php-fpm.d/\n  notify: restart php-fpm\n```\nroles/php-fpm/handlers/main.yml\n```\n---\n- name: restart php-fpm\n  service: name=php-fpm state=restarted\n```\nroles/php-fpm/templates/wordpress.conf\n```\n[wordpress]\nlisten = /var/run/php-fpm/wordpress.sock\nlisten.owner = nginx\nlisten.group = nginx\nlisten.mode = 0660\nuser = wordpress\ngroup = wordpress\npm = dynamic\npm.max_children = 10\npm.start_servers = 1\npm.min_spare_servers = 1\npm.max_spare_servers = 3\npm.max_requests = 500\nchdir = /srv/wordpress/\nphp_admin_value[open_basedir] = /srv/wordpress/:/tmp\n```\n#### wordpress\nroles/wordpress/tasks/main.yml\n```\n---\n- name: Download WordPress\n  get_url: url=http://wordpress.org/wordpress-{{ wp_version }}.tar.gz dest=/srv/wordpress-{{ wp_version }}.tar.gz\n           sha256sum=\"{{ wp_sha256sum }}\"\n \n- name: Extract archive\n  command: chdir=/srv/ /bin/tar xvf wordpress-{{ wp_version }}.tar.gz creates=/srv/wordpress\n \n- name: Add group \"wordpress\"\n  group: name=wordpress\n \n- name: Add user \"wordpress\"\n  user: name=wordpress group=wordpress home=/srv/wordpress/\n \n- name: Fetch random salts for WordPress config\n  local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/\n  register: \"wp_salt\"\n  become: no\n  become_method: sudo\n \n- name: Create WordPress database\n  mysql_db: name={{ wp_db_name }} state=present\n \n- name: Create WordPress database user\n  mysql_user: name={{ wp_db_user }} password={{ wp_db_password }} priv={{ wp_db_name }}.*:ALL host='localhost' state=present\n \n- name: Copy WordPress config file\n  template: src=wp-config.php dest=/srv/wordpress/\n \n- name: Change ownership of WordPress installation\n  file: path=/srv/wordpress/ owner=wordpress group=wordpress state=directory recurse=yes setype=httpd_sys_content_t\n \n- name: Start php-fpm Service\n  service: name=php-fpm state=started enabled=yes\n```\nroles/wordpress/templates/wp-config.php\n```\n<?php\n/**\n * The base configurations of the WordPress.\n *\n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information\n * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n *\n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to \"wp-config.php\" and fill in the values.\n *\n * @package WordPress\n */\n \n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine('DB_NAME', '{{ wp_db_name }}');\n \n/** MySQL database username */\ndefine('DB_USER', '{{ wp_db_user }}');\n \n/** MySQL database password */\ndefine('DB_PASSWORD', '{{ wp_db_password }}');\n \n/** MySQL hostname */\ndefine('DB_HOST', 'localhost');\n \n/** Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8');\n \n/** The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n \n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * @since 2.6.0\n */\n \n{{ wp_salt.stdout }}\n \n/**#@-*/\n \n/**\n * WordPress Database Table prefix.\n *\n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n */\n$table_prefix  = 'wp_';\n \n/**\n * WordPress Localized Language, defaults to English.\n *\n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n */\ndefine('WPLANG', '');\n \n/**\n * For developers: WordPress debugging mode.\n *\n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n */\ndefine('WP_DEBUG', false);\n \n/** Disable Automatic Updates Completely */\ndefine( 'AUTOMATIC_UPDATER_DISABLED', {{auto_up_disable}} );\n \n/** Define AUTOMATIC Updates for Components. */\ndefine( 'WP_AUTO_UPDATE_CORE', {{core_update_level}} );\n \n/* That's all, stop editing! Happy blogging. */\n \n/** Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n\tdefine('ABSPATH', dirname(__FILE__) . '/');\n \n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"ansible","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5v0000tct8uhpn57n2s","content":"<h3 id=\"Ansible架构图\"><a href=\"#Ansible架构图\" class=\"headerlink\" title=\"Ansible架构图\"></a>Ansible架构图</h3><p><img src=\"https://ttxsgoto.github.io/img/ansible/ansible01.png\" alt=\"\"></p>\n<h3 id=\"Ansible特性\"><a href=\"#Ansible特性\" class=\"headerlink\" title=\"Ansible特性\"></a>Ansible特性</h3><pre><code>- 基于python实现，由Paramike，PyYAML和Jinjia2三个关键模块\n- 部署简单，agentless\n- 使用ssh协议\n- 主从集中化模式\n- 支持自定义模块\n- 支持playbook\n- 幂等性：一种操作可重复多次结果相同\n</code></pre><h3 id=\"Ansible核心组件\"><a href=\"#Ansible核心组件\" class=\"headerlink\" title=\"Ansible核心组件\"></a>Ansible核心组件</h3><pre><code>- ansible core：Ansible的核心程序\n- host iventory：记录了每一个由Ansible管理的主机信息，信息包括ssh端口，root帐号密码，ip地址等\n- core modules：Ansible管理主机之前，先调用core Modules中的模块，然后指明管理Host Lnventory中的主机，就可以完成管理主机\n- custom modules：自定义模块\n- playbook(yaml,jinjia2)：YAML格式文件，多个任务定义在一个文件中\n- connect plugin：连接插件，Ansible和Host通信使用\n</code></pre><h3 id=\"Invetory文件说明\"><a href=\"#Invetory文件说明\" class=\"headerlink\" title=\"Invetory文件说明\"></a>Invetory文件说明</h3><p>参数说明：</p>\n<ul>\n<li>ansible_ssh_host 将要连接的远程主机名，可用于设置别名</li>\n<li>ansible_ssh_port ssh端口，非默认可通过它来设置</li>\n<li>ansible_ssh_user 默认的ssh用户名</li>\n<li>ansible_ssh_pass ssh密码 不安全</li>\n<li>ansible_sudo_pass sudo密码 不安全</li>\n<li>ansible_connection 主机连接类型</li>\n<li>ansible_ssh_private_key_file ssh 使用的私钥文件.适用于有多个密钥</li>\n<li>ansible_shell_type 目标系统的shell类型</li>\n<li>ansible_python_interpreter 目标主机的python路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">[web01]</div><div class=\"line\">192.168.0.1 ansible_ssh_user=root ansible_ssh_pass=xxx</div><div class=\"line\">[web02]</div><div class=\"line\">192.168.0.[2:5]:2222    #从2到5的主机,如果端口号不是默认22，可直接用:后定义端口号</div><div class=\"line\">[web03]    #对应变量，供playbooks使用</div><div class=\"line\">192.168.0.8 port=80 hostname=&quot;test01&quot;</div><div class=\"line\">192.168.0.9 port=8080 hostname=&quot;test02&quot;</div><div class=\"line\">[web03.vpn]\t#设置别名 访问192.168.0.190 实际访问10.8.0.190</div><div class=\"line\">192.168.0.190 ansible_ssh_port=2222 ansible_ssh_host=10.8.0.190</div><div class=\"line\">[web03:vars]    #对web03组定义变量，供playbooks使用</div><div class=\"line\">server1=ttxsgoto1.com</div><div class=\"line\">server2=ttxsgoto2.com</div><div class=\"line\">[webservers:children]    #组嵌套，webservers组包括web01和web02下的主机</div><div class=\"line\">web01</div><div class=\"line\">web02</div><div class=\"line\">[webservers:vars]    #组定义变量</div><div class=\"line\">server1=tttxsgoto.com</div><div class=\"line\"> </div><div class=\"line\">#########################</div><div class=\"line\">#  分文件定义host和group  #</div><div class=\"line\">#########################</div><div class=\"line\">- 独立的文件格式为yaml文件</div><div class=\"line\">- 在对应的hosts目录中创建host_vars，group_vars目录，该目录存放对应的变量</div><div class=\"line\">- host_vars目录用于存放host变量，all文件对所有主机有效</div><div class=\"line\">- 目录下的文件名和hosts文件对应的主机和组需要一样</div><div class=\"line\">---</div><div class=\"line\"># Which version of WordPress to deploy</div><div class=\"line\">wp_version: 4.2.4</div><div class=\"line\">wp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82</div><div class=\"line\"> </div><div class=\"line\"># These are the WordPress database settings</div><div class=\"line\">wp_db_name: test</div><div class=\"line\">wp_db_user: root</div><div class=\"line\">wp_db_password: root</div></pre></td></tr></table></figure>\n<p>查看模块帮助信息</p>\n<pre><code>- ansible-doc -l\n- ansible-doc -s  module_name\n</code></pre><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li>invetory中定义变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[web03:vars]    #对web03组定义变量，供playbooks使用</div><div class=\"line\">server1=ttxsgoto1.com</div><div class=\"line\">server2=ttxsgoto2.com</div></pre></td></tr></table></figure>\n<ul>\n<li>playbooks中定义变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hosts: webservers         #对webservers主机组下的所有主机进行操作</div><div class=\"line\">  vars:           # 为该play定义两个变量</div><div class=\"line\">    http_port: 80</div><div class=\"line\">    max_clients: 200</div><div class=\"line\">  vars_files:\t# 使用变量文件定义变量</div><div class=\"line\">      - vars/server_vars.yml</div></pre></td></tr></table></figure>\n<p>在playbook文件中冒号后面的值不能以”{ “开头，解决办法：要在”{ “开始的值加上引号，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hosts: app_servers</div><div class=\"line\">  vars:</div><div class=\"line\">    app_path: &quot;&#123;&#123; base_path &#125;&#125;&quot;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>通过系统变量(facts),可直接使用，如ansible_os_family，ansible_ens3.ipv4.address；</li>\n<li>运行结果当做变量使用-注册变量,register: result ,debug: msg=”“</li>\n<li>文件模板中使用的变量</li>\n<li>定义命令行变量如下</li>\n</ul>\n<h3 id=\"用命令行传递参数\"><a href=\"#用命令行传递参数\" class=\"headerlink\" title=\"用命令行传递参数\"></a>用命令行传递参数</h3><ul>\n<li>-e或者–extra-vars， -e ‘参数名1=值1 参数名2=值2’</li>\n<li>json格式传递参数  -e ‘{‘hosts’:’local’, ‘user’:’root’}’</li>\n<li>参数放在json文件里面中 -e “@vars.json”</li>\n</ul>\n<p>ansible命令应用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</div><div class=\"line\">ansible &quot;web01:web02&quot; -m ping \t# 多个组执行用:分隔，同时属于多个组的主机只会执行一次</div><div class=\"line\">-f forks:启动并发线程数</div><div class=\"line\">-m module_name:使用的模块名</div><div class=\"line\">-a args:模块特有的参数</div></pre></td></tr></table></figure></p>\n<h3 id=\"常见模块\"><a href=\"#常见模块\" class=\"headerlink\" title=\"常见模块\"></a>常见模块</h3><ul>\n<li>command</li>\n<li>cron</li>\n<li>user</li>\n<li>group</li>\n<li>copy</li>\n<li>file</li>\n<li>ping</li>\n<li>setup</li>\n<li>service</li>\n<li>shell</li>\n<li>script</li>\n<li>yum/apt</li>\n</ul>\n<p>cron:计划任务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">present: 安装任务</div><div class=\"line\">absent:移除任务</div><div class=\"line\">ansible local -m cron -a &apos;minute=*/5 job=&quot;/bin/echo abc &gt; /root/abc.log&quot; name=&quot;test cron job&quot;  state=&quot;absent&quot; &apos;</div></pre></td></tr></table></figure></p>\n<p>user:用户管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- name:指明添加的用户名</div><div class=\"line\">- ansible local -m user -a &apos;name=&quot;user1&quot;&apos;</div></pre></td></tr></table></figure></p>\n<p>group:用户组管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible local -m group -a &apos;name=user1 gid=306 system=yes&apos;    #添加用户组</div><div class=\"line\">ansible local -m group -a &apos;name=user1 gid=306 system=yes state=absent&apos;    #删除用户组</div></pre></td></tr></table></figure></p>\n<p>copy:文件复制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=:定义本地源路径</div><div class=\"line\">content=:取代src=，定义内容直接写入到远程文件中</div><div class=\"line\">dest=:定义远程路径，绝对路径</div><div class=\"line\">ansible local -m copy -a &apos;src=/etc/fstab dest=/tmp/fstab.bak owner=root  mode=777&apos;</div><div class=\"line\">ansible local -m copy -a &apos;content=&quot;hello wrold\\nabc\\n&quot; dest=/tmp/fstab.bak owner=root</div></pre></td></tr></table></figure></p>\n<p>file:文件管理属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">path=: 指明文件路径，可以使用name、dest来替换</div><div class=\"line\">ansible local -m file -a &apos; owner=bigdata group=bigdata  mode=644 path=/tmp/fstab.bak&apos;    #修改权限和组信息</div><div class=\"line\">ansible local -m file -a &apos;path=/tmp/fstab.bak.link src=/tmp/fstab.bak state=link&apos;  #软链接</div></pre></td></tr></table></figure></p>\n<p>ping:测试主机联通性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible local -m ping</div></pre></td></tr></table></figure></p>\n<p>setup:收集远程主机的facts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#每个被管理节点会将自己相关的信息发生给远程的ansible主机，用于模板调用变量</div><div class=\"line\">ansible local -m setup</div></pre></td></tr></table></figure></p>\n<p>service:常用服务的运行状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">enabled=: 开机自启动，为true和false</div><div class=\"line\">name=: 服务名称</div><div class=\"line\">state=: 启动状态，started,stopped,restarted;</div><div class=\"line\">ansible local -m service -a &quot;enabled=true name=nginx state=started&quot;</div></pre></td></tr></table></figure></p>\n<p>shell:远程执行命令，可传递参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#用到管道等功能的复杂命令时使用shell命令</div><div class=\"line\">ansible local -m shell -a &quot;echo xxx | passwd --stdin user1&quot;</div></pre></td></tr></table></figure></p>\n<p>script:将本地脚本在远程上执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#注意：使用相对路径指定脚本</div><div class=\"line\">ansible local -m script -a &quot;./test.sh&quot;</div></pre></td></tr></table></figure></p>\n<p>yum/apt: 安装程序包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">name=:    需要安装的程序包，可以加版本号</div><div class=\"line\">state=:    present，lastest安装，absent表示卸载</div><div class=\"line\">ansible local -m yum -a &quot;name=zsh&quot;    #安装</div><div class=\"line\">ansible local -m apt -a &quot;name=zsh state=absent&quot;    #卸载</div></pre></td></tr></table></figure></p>\n<h3 id=\"playbook\"><a href=\"#playbook\" class=\"headerlink\" title=\"playbook\"></a>playbook</h3><p>通过yaml将多个模块组装起来运行多个任务<br>实例说明：<a href=\"https://github.com/ansible/ansible-examples\" target=\"_blank\" rel=\"external\">https://github.com/ansible/ansible-examples</a></p>\n<p>组成结构：<br>Playbooks：<br>    Tasks：任务列表,定义的一组hosts映射到task<br>    Variables：变量<br>    Templates：模板<br>    Handlers：处理器，由某事件触发执行的操作,一般用来重启服务,或者触发系统重启操作，handlers按照声明的顺序执行<br>    Roles：角色<br>    Include语句</p>\n<p>运行说明：<br>0)yaml语法检测<br>ansible-playbook –syntax-check /path/to/playbook.yaml<br>1)yaml测试运行<br>ansible-playbook -C /path/to/playbook.yaml<br>2)运行<br>ansiable-playbook /path/to/playbook.yml<br>-t TAGS  #给指定的任务定义一个调用标识<br>–tags=TAGS #给指定的任务定义一个调用标识<br>–skip-tags=SKIP_TAGS #跳过指定的标签<br>–start-at-task=START_AT #从哪个任务后执行<br>–list-tags    #查看标签<br>基本结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">---               #任何playbook文件(其实就是yaml文件)都要以这个开头</div><div class=\"line\">- hosts: webservers         #对webservers主机组下的所有主机进行操作</div><div class=\"line\">  vars:           #为该play定义两个变量</div><div class=\"line\">    http_port: 80</div><div class=\"line\">    max_clients: 200</div><div class=\"line\">  remote_user: deploy       #连接到远程主机的用户</div><div class=\"line\">  sudo: yes       #以sudo模式运行该play</div><div class=\"line\">  sudo_user: root           #sudo到哪个用户，默认为root，如果sudo到该用户需要密码，则在执行ansible-playbook的时候指定-K选项来输入sudo密码</div><div class=\"line\">  tasks:          #开始定义task</div><div class=\"line\">  - name: ensure apache is at the latest version            #这既是每个task的说明也是每个task的名字</div><div class=\"line\">    yum: pkg=httpd state=latest</div><div class=\"line\">    tags:         #给该task打一个标签</div><div class=\"line\">      - last_http</div><div class=\"line\">  - name: write the apache config file</div><div class=\"line\">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</div><div class=\"line\">    notify:       #提供watch功能，这里当apache配置文件改变时，就调用handlers中名为&quot;restart apache&quot;的task来重启apache</div><div class=\"line\">    - restart apache</div><div class=\"line\">  - name: ensure apache is running</div><div class=\"line\">    service: name=httpd state=started</div><div class=\"line\">  handlers:       #notify通知这里的task执行，说明：定义在handlers下的task只有在notify触发的时候才会执行</div><div class=\"line\">    - name: restart apache</div><div class=\"line\">      service: name=httpd state=restarted</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">例子1：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: create nginx group</div><div class=\"line\">      group: name=nginx system=yes gid=208</div><div class=\"line\">  - name: create nginx user</div><div class=\"line\">      user: name=nginx uid=208 system=yes</div><div class=\"line\">- hosts: dbservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: copy file to dbsrvs</div><div class=\"line\">      copy: src=/etc/inittab dest=/tmp/inittab.bak</div><div class=\"line\"> </div><div class=\"line\">例子2(handler,vars)：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  vars:</div><div class=\"line\">  - package: httpd</div><div class=\"line\">  - service: httpd</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: install httpd package</div><div class=\"line\">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class=\"line\">  - name: install configuration file for httpd</div><div class=\"line\">      copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf</div><div class=\"line\">      notify:</div><div class=\"line\">      - restart httpd</div><div class=\"line\">  - name: start httpd service</div><div class=\"line\">      service: enabled=true name=httpd state=started</div><div class=\"line\">  handlers:</div><div class=\"line\">  - name: restart httpd</div><div class=\"line\">    service: name=httpd state=restarted</div><div class=\"line\">  - name: copy file</div><div class=\"line\">    copy: content=&quot;&#123;&#123; ansible_all_ipv4_addresses &#125;&#125;&quot; dest=/tmp/test.txt</div><div class=\"line\"> </div><div class=\"line\">例子3(条件测试)：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  vars:</div><div class=\"line\">  - username: user1</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: create &#123;&#123; username &#125;&#125;</div><div class=\"line\">      user: name=&#123;&#123; userneam &#125;&#125;</div><div class=\"line\">      when: ansible_fqdn == &apos;ttxsgoto&apos;</div><div class=\"line\"> </div><div class=\"line\">例子4(迭代-for)：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  - name: add username</div><div class=\"line\">    user: name=&#123;&#123; item.name &#125;&#125; state=present groups=&#123;&#123; item.groups &#125;&#125;</div><div class=\"line\">    with_items:</div><div class=\"line\">      - &#123;name:&apos;testuser1&apos;,groups=&apos;user1&apos;&#125;</div><div class=\"line\">      - &#123;name:&apos;testuser2&apos;,groups=&apos;user2&apos;&#125;</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  - name: add username</div><div class=\"line\">    user: name=&#123;&#123; item &#125;&#125; state=present groups=group1</div><div class=\"line\">    with_items:</div><div class=\"line\">      - testuser1</div><div class=\"line\">      - testuser2</div><div class=\"line\"> </div><div class=\"line\">例子5(templates/tags  ansible-playbook test.yml --tags=&apos;conf_chage&apos;):</div><div class=\"line\"> #tags: 在playbook可以为某个任务定义一个标签，在执行playbook时，通过tags可实现仅运行指定tasks任务</div><div class=\"line\"> - hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  vars:</div><div class=\"line\">  - package: httpd</div><div class=\"line\">  - service: httpd</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: install httpd package</div><div class=\"line\">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class=\"line\">  - name: install configuration file for httpd</div><div class=\"line\">      template: src=/root/conf/httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf</div><div class=\"line\">     tags:</div><div class=\"line\">     - conf_chage</div><div class=\"line\">     notify:</div><div class=\"line\">      - restart httpd</div><div class=\"line\">  - name: start httpd service</div><div class=\"line\">      service: enabled=true name=httpd state=started</div><div class=\"line\">  handlers:</div><div class=\"line\">  - name: restart httpd</div><div class=\"line\">    service: name=httpd state=restarted</div></pre></td></tr></table></figure>\n<h3 id=\"roles\"><a href=\"#roles\" class=\"headerlink\" title=\"roles\"></a>roles</h3><p>roles：用于层次化、结构化的组织playbook；role能够根据层次结构自动装载变量文件、task以及handlers等，要使用roles只需要在playbook中使用include指令；roles通过分别将变量、文件、任务、模块及处理器放置在单独的目录中，并可以便捷地通过include它们的一种机制，角色一般用于基于主机构建服务的场景中；Roles 的概念来自于这样的想法：通过 include 包含文件并将它们组合在一起，组织成一个简洁、可重用的抽象对象</p>\n<p>创建role的步骤如下：</p>\n<ol>\n<li>创建以roles命名的目录</li>\n<li>在roles目录中分别创建以各角色名称命名的目录，如websrvs等</li>\n<li>在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建</li>\n<li>在palybook文件中调用各角色</li>\n</ol>\n<p>roles内各目录中可用的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表include包含其它的位于此目录中的task文件</div><div class=\"line\">files目录：存放由copy或script等模块调用的文件</div><div class=\"line\">templates目录：template模块会自动在此目录中寻找Jinja2模板文件</div><div class=\"line\">handlers目录：此目录中应当包含一个main</div><div class=\"line\">vars目录：应当包含一个main.yml文件，用于定义此角色用到的变量</div><div class=\"line\">meta目录：应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关</div><div class=\"line\">default目录：应当包含一个main.yml文件，用于为当前角色设定默认变量</div></pre></td></tr></table></figure></p>\n<p>wordpress-nginx 实例如下：</p>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">./</div><div class=\"line\">├── group_vars</div><div class=\"line\">│   └── all</div><div class=\"line\">├── roles</div><div class=\"line\">│   ├── common</div><div class=\"line\">│   │   ├── files</div><div class=\"line\">│   │   │   ├── epel.repo</div><div class=\"line\">│   │   │   ├── iptables-save</div><div class=\"line\">│   │   │   └── RPM-GPG-KEY-EPEL-6</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── tasks</div><div class=\"line\">│   │       └── main.yml</div><div class=\"line\">│   ├── mysql</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   ├── tasks</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── templates</div><div class=\"line\">│   │       └── my.cnf.j2</div><div class=\"line\">│   ├── nginx</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   ├── tasks</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── templates</div><div class=\"line\">│   │       └── default.conf</div><div class=\"line\">│   ├── php-fpm</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   ├── tasks</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── templates</div><div class=\"line\">│   │       └── wordpress.conf</div><div class=\"line\">│   └── wordpress</div><div class=\"line\">│       ├── tasks</div><div class=\"line\">│       │   └── main.yml</div><div class=\"line\">│       └── templates</div><div class=\"line\">│           └── wp-config.php</div><div class=\"line\">└── site.yml</div><div class=\"line\"> </div><div class=\"line\">21 directories, 18 files</div></pre></td></tr></table></figure>\n<p>site.yml -入口函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install WordPress, MySQL, Nginx, and PHP-FPM</div><div class=\"line\">  hosts: all</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  # remote_user: user</div><div class=\"line\">  # become: yes</div><div class=\"line\">  # become_method: sudo</div><div class=\"line\"> </div><div class=\"line\">  roles:</div><div class=\"line\">    - common</div><div class=\"line\">    - mysql</div><div class=\"line\">    - nginx</div><div class=\"line\">    - php-fpm</div><div class=\"line\">    - wordpress</div></pre></td></tr></table></figure></p>\n<p>group_vars/all -全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\"># Which version of WordPress to deploy</div><div class=\"line\">wp_version: 4.2.4</div><div class=\"line\">wp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82</div><div class=\"line\"> </div><div class=\"line\"># These are the WordPress database settings</div><div class=\"line\">wp_db_name: wordpress</div><div class=\"line\">wp_db_user: wordpress</div><div class=\"line\">wp_db_password: secret</div><div class=\"line\"> </div><div class=\"line\"># You shouldn&apos;t need to change this.</div><div class=\"line\">mysql_port: 3306</div><div class=\"line\"> </div><div class=\"line\"># This is used for the nginx server configuration, but access to the</div><div class=\"line\"># WordPress site is not restricted by a named host.</div><div class=\"line\">server_hostname: www.example.com</div><div class=\"line\"> </div><div class=\"line\"># Disable All Updates</div><div class=\"line\"># By default automatic updates are enabled, set this value to true to disable all automatic updates</div><div class=\"line\">auto_up_disable: false</div><div class=\"line\"> </div><div class=\"line\">#Define Core Update Level</div><div class=\"line\">#true  = Development, minor, and major updates are all enabled</div><div class=\"line\">#false = Development, minor, and major updates are all disabled</div><div class=\"line\">#minor = Minor updates are enabled, development, and major updates are disabled</div><div class=\"line\">core_update_level: true</div></pre></td></tr></table></figure></p>\n<h4 id=\"common\"><a href=\"#common\" class=\"headerlink\" title=\"common\"></a>common</h4><p>roles/common/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install libselinux-python</div><div class=\"line\">  yum: name=libselinux-python state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Reload ansible_facts</div><div class=\"line\">  setup:</div><div class=\"line\"> </div><div class=\"line\">- name: Copy the EPEL repository definition</div><div class=\"line\">  copy: src=epel.repo dest=/etc/yum.repos.d/epel.repo</div><div class=\"line\"> </div><div class=\"line\">- name: Create the GPG key for EPEL</div><div class=\"line\">  copy: src=RPM-GPG-KEY-EPEL-6 dest=/etc/pki/rpm-gpg</div><div class=\"line\"> </div><div class=\"line\">- name: Set up iptables rules</div><div class=\"line\">  copy: src=iptables-save dest=/etc/sysconfig/iptables</div><div class=\"line\">  notify: restart iptables</div></pre></td></tr></table></figure></p>\n<p>roles/common/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart iptables</div><div class=\"line\">  service: name=iptables state=restarted</div></pre></td></tr></table></figure></p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><p>roles/mysql/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install Mysql package</div><div class=\"line\">  yum: name=&#123;&#123; item &#125;&#125; state=present</div><div class=\"line\">  with_items:</div><div class=\"line\">   - mysql-server</div><div class=\"line\">   - MySQL-python</div><div class=\"line\">   - libselinux-python</div><div class=\"line\">   - libsemanage-python</div><div class=\"line\"> </div><div class=\"line\">- name: Configure SELinux to start mysql on any port</div><div class=\"line\">  seboolean: name=mysql_connect_any state=true persistent=yes</div><div class=\"line\">  when: ansible_selinux.status == &quot;enabled&quot;</div><div class=\"line\"> </div><div class=\"line\">- name: Create Mysql configuration file</div><div class=\"line\">  template: src=my.cnf.j2 dest=/etc/my.cnf</div><div class=\"line\">  notify:</div><div class=\"line\">  - restart mysql</div><div class=\"line\"> </div><div class=\"line\">- name: Start Mysql Service</div><div class=\"line\">  service: name=mysqld state=started enabled=yes</div></pre></td></tr></table></figure></p>\n<p>roles/mysql/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart mysql</div><div class=\"line\">  service: name=mysqld state=restarted</div></pre></td></tr></table></figure></p>\n<p>roles/mysql/templates/my.cnf.j2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">datadir=/var/lib/mysql</div><div class=\"line\">socket=/var/lib/mysql/mysql.sock</div><div class=\"line\">user=mysql</div><div class=\"line\"># Disabling symbolic-links is recommended to prevent assorted security risks</div><div class=\"line\">symbolic-links=0</div><div class=\"line\">port=&#123;&#123; mysql_port &#125;&#125;</div><div class=\"line\"> </div><div class=\"line\">[mysqld_safe]</div><div class=\"line\">log-error=/var/log/mysqld.log</div><div class=\"line\">pid-file=/var/run/mysqld/mysqld.pid</div></pre></td></tr></table></figure></p>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><p>roles/nginx/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install nginx</div><div class=\"line\">  yum: name=nginx state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Copy nginx configuration for wordpress</div><div class=\"line\">  template: src=default.conf dest=/etc/nginx/conf.d/default.conf</div><div class=\"line\">  notify: restart nginx</div></pre></td></tr></table></figure></p>\n<p>roles/nginx/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart nginx</div><div class=\"line\">  service: name=nginx state=restarted enabled=yes</div></pre></td></tr></table></figure></p>\n<p>roles/nginx/templates/default.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        server_name  &#123;&#123; server_hostname &#125;&#125;;</div><div class=\"line\">        root /srv/wordpress/ ;</div><div class=\"line\"> </div><div class=\"line\">\tclient_max_body_size 64M;</div><div class=\"line\"> </div><div class=\"line\">\t# Deny access to any files with a .php extension in the uploads directory</div><div class=\"line\">        location ~* /(?:uploads|files)/.*\\.php$ &#123;</div><div class=\"line\">                deny all;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        location / &#123;</div><div class=\"line\">                index index.php index.html index.htm;</div><div class=\"line\">                try_files $uri $uri/ /index.php?$args;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        location ~* \\.(gif|jpg|jpeg|png|css|js)$ &#123;</div><div class=\"line\">                expires max;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        location ~ \\.php$ &#123;</div><div class=\"line\">                try_files $uri =404;</div><div class=\"line\">                fastcgi_split_path_info ^(.+\\.php)(/.+)$;</div><div class=\"line\">                fastcgi_index index.php;</div><div class=\"line\">                fastcgi_pass  unix:/var/run/php-fpm/wordpress.sock;</div><div class=\"line\">                fastcgi_param   SCRIPT_FILENAME</div><div class=\"line\">                                $document_root$fastcgi_script_name;</div><div class=\"line\">                include       fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"php-fpm\"><a href=\"#php-fpm\" class=\"headerlink\" title=\"php-fpm\"></a>php-fpm</h4><p>roles/php-fpm/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install php-fpm and deps</div><div class=\"line\">  yum: name=&#123;&#123; item &#125;&#125; state=present</div><div class=\"line\">  with_items:</div><div class=\"line\">    - php</div><div class=\"line\">    - php-fpm</div><div class=\"line\">    - php-enchant</div><div class=\"line\">    - php-IDNA_Convert</div><div class=\"line\">    - php-mbstring</div><div class=\"line\">    - php-mysql</div><div class=\"line\">    - php-PHPMailer</div><div class=\"line\">    - php-process</div><div class=\"line\">    - php-simplepie</div><div class=\"line\">    - php-xml</div><div class=\"line\"> </div><div class=\"line\">- name: Disable default pool</div><div class=\"line\">  command: mv /etc/php-fpm.d/www.conf /etc/php-fpm.d/www.disabled creates=/etc/php-fpm.d/www.disabled</div><div class=\"line\">  notify: restart php-fpm</div><div class=\"line\"> </div><div class=\"line\">- name: Copy php-fpm configuration</div><div class=\"line\">  template: src=wordpress.conf dest=/etc/php-fpm.d/</div><div class=\"line\">  notify: restart php-fpm</div></pre></td></tr></table></figure></p>\n<p>roles/php-fpm/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart php-fpm</div><div class=\"line\">  service: name=php-fpm state=restarted</div></pre></td></tr></table></figure></p>\n<p>roles/php-fpm/templates/wordpress.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[wordpress]</div><div class=\"line\">listen = /var/run/php-fpm/wordpress.sock</div><div class=\"line\">listen.owner = nginx</div><div class=\"line\">listen.group = nginx</div><div class=\"line\">listen.mode = 0660</div><div class=\"line\">user = wordpress</div><div class=\"line\">group = wordpress</div><div class=\"line\">pm = dynamic</div><div class=\"line\">pm.max_children = 10</div><div class=\"line\">pm.start_servers = 1</div><div class=\"line\">pm.min_spare_servers = 1</div><div class=\"line\">pm.max_spare_servers = 3</div><div class=\"line\">pm.max_requests = 500</div><div class=\"line\">chdir = /srv/wordpress/</div><div class=\"line\">php_admin_value[open_basedir] = /srv/wordpress/:/tmp</div></pre></td></tr></table></figure></p>\n<h4 id=\"wordpress\"><a href=\"#wordpress\" class=\"headerlink\" title=\"wordpress\"></a>wordpress</h4><p>roles/wordpress/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Download WordPress</div><div class=\"line\">  get_url: url=http://wordpress.org/wordpress-&#123;&#123; wp_version &#125;&#125;.tar.gz dest=/srv/wordpress-&#123;&#123; wp_version &#125;&#125;.tar.gz</div><div class=\"line\">           sha256sum=&quot;&#123;&#123; wp_sha256sum &#125;&#125;&quot;</div><div class=\"line\"> </div><div class=\"line\">- name: Extract archive</div><div class=\"line\">  command: chdir=/srv/ /bin/tar xvf wordpress-&#123;&#123; wp_version &#125;&#125;.tar.gz creates=/srv/wordpress</div><div class=\"line\"> </div><div class=\"line\">- name: Add group &quot;wordpress&quot;</div><div class=\"line\">  group: name=wordpress</div><div class=\"line\"> </div><div class=\"line\">- name: Add user &quot;wordpress&quot;</div><div class=\"line\">  user: name=wordpress group=wordpress home=/srv/wordpress/</div><div class=\"line\"> </div><div class=\"line\">- name: Fetch random salts for WordPress config</div><div class=\"line\">  local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/</div><div class=\"line\">  register: &quot;wp_salt&quot;</div><div class=\"line\">  become: no</div><div class=\"line\">  become_method: sudo</div><div class=\"line\"> </div><div class=\"line\">- name: Create WordPress database</div><div class=\"line\">  mysql_db: name=&#123;&#123; wp_db_name &#125;&#125; state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Create WordPress database user</div><div class=\"line\">  mysql_user: name=&#123;&#123; wp_db_user &#125;&#125; password=&#123;&#123; wp_db_password &#125;&#125; priv=&#123;&#123; wp_db_name &#125;&#125;.*:ALL host=&apos;localhost&apos; state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Copy WordPress config file</div><div class=\"line\">  template: src=wp-config.php dest=/srv/wordpress/</div><div class=\"line\"> </div><div class=\"line\">- name: Change ownership of WordPress installation</div><div class=\"line\">  file: path=/srv/wordpress/ owner=wordpress group=wordpress state=directory recurse=yes setype=httpd_sys_content_t</div><div class=\"line\"> </div><div class=\"line\">- name: Start php-fpm Service</div><div class=\"line\">  service: name=php-fpm state=started enabled=yes</div></pre></td></tr></table></figure></p>\n<p>roles/wordpress/templates/wp-config.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">/**</div><div class=\"line\"> * The base configurations of the WordPress.</div><div class=\"line\"> *</div><div class=\"line\"> * This file has the following configurations: MySQL settings, Table Prefix,</div><div class=\"line\"> * Secret Keys, WordPress Language, and ABSPATH. You can find more information</div><div class=\"line\"> * by visiting &#123;@link http://codex.wordpress.org/Editing_wp-config.php Editing</div><div class=\"line\"> * wp-config.php&#125; Codex page. You can get the MySQL settings from your web host.</div><div class=\"line\"> *</div><div class=\"line\"> * This file is used by the wp-config.php creation script during the</div><div class=\"line\"> * installation. You don&apos;t have to use the web site, you can just copy this file</div><div class=\"line\"> * to &quot;wp-config.php&quot; and fill in the values.</div><div class=\"line\"> *</div><div class=\"line\"> * @package WordPress</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">// ** MySQL settings - You can get this info from your web host ** //</div><div class=\"line\">/** The name of the database for WordPress */</div><div class=\"line\">define(&apos;DB_NAME&apos;, &apos;&#123;&#123; wp_db_name &#125;&#125;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** MySQL database username */</div><div class=\"line\">define(&apos;DB_USER&apos;, &apos;&#123;&#123; wp_db_user &#125;&#125;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** MySQL database password */</div><div class=\"line\">define(&apos;DB_PASSWORD&apos;, &apos;&#123;&#123; wp_db_password &#125;&#125;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** MySQL hostname */</div><div class=\"line\">define(&apos;DB_HOST&apos;, &apos;localhost&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** Database Charset to use in creating database tables. */</div><div class=\"line\">define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** The Database Collate type. Don&apos;t change this if in doubt. */</div><div class=\"line\">define(&apos;DB_COLLATE&apos;, &apos;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/**#@+</div><div class=\"line\"> * Authentication Unique Keys and Salts.</div><div class=\"line\"> *</div><div class=\"line\"> * Change these to different unique phrases!</div><div class=\"line\"> * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;</div><div class=\"line\"> * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.</div><div class=\"line\"> *</div><div class=\"line\"> * @since 2.6.0</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">&#123;&#123; wp_salt.stdout &#125;&#125;</div><div class=\"line\"> </div><div class=\"line\">/**#@-*/</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * WordPress Database Table prefix.</div><div class=\"line\"> *</div><div class=\"line\"> * You can have multiple installations in one database if you give each a unique</div><div class=\"line\"> * prefix. Only numbers, letters, and underscores please!</div><div class=\"line\"> */</div><div class=\"line\">$table_prefix  = &apos;wp_&apos;;</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * WordPress Localized Language, defaults to English.</div><div class=\"line\"> *</div><div class=\"line\"> * Change this to localize WordPress. A corresponding MO file for the chosen</div><div class=\"line\"> * language must be installed to wp-content/languages. For example, install</div><div class=\"line\"> * de_DE.mo to wp-content/languages and set WPLANG to &apos;de_DE&apos; to enable German</div><div class=\"line\"> * language support.</div><div class=\"line\"> */</div><div class=\"line\">define(&apos;WPLANG&apos;, &apos;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * For developers: WordPress debugging mode.</div><div class=\"line\"> *</div><div class=\"line\"> * Change this to true to enable the display of notices during development.</div><div class=\"line\"> * It is strongly recommended that plugin and theme developers use WP_DEBUG</div><div class=\"line\"> * in their development environments.</div><div class=\"line\"> */</div><div class=\"line\">define(&apos;WP_DEBUG&apos;, false);</div><div class=\"line\"> </div><div class=\"line\">/** Disable Automatic Updates Completely */</div><div class=\"line\">define( &apos;AUTOMATIC_UPDATER_DISABLED&apos;, &#123;&#123;auto_up_disable&#125;&#125; );</div><div class=\"line\"> </div><div class=\"line\">/** Define AUTOMATIC Updates for Components. */</div><div class=\"line\">define( &apos;WP_AUTO_UPDATE_CORE&apos;, &#123;&#123;core_update_level&#125;&#125; );</div><div class=\"line\"> </div><div class=\"line\">/* That&apos;s all, stop editing! Happy blogging. */</div><div class=\"line\"> </div><div class=\"line\">/** Absolute path to the WordPress directory. */</div><div class=\"line\">if ( !defined(&apos;ABSPATH&apos;) )</div><div class=\"line\">\tdefine(&apos;ABSPATH&apos;, dirname(__FILE__) . &apos;/&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** Sets up WordPress vars and included files. */</div><div class=\"line\">require_once(ABSPATH . &apos;wp-settings.php&apos;);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"Ansible架构图\"><a href=\"#Ansible架构图\" class=\"headerlink\" title=\"Ansible架构图\"></a>Ansible架构图</h3><p><img src=\"https://ttxsgoto.github.io/img/ansible/ansible01.png\" alt=\"\"></p>\n<h3 id=\"Ansible特性\"><a href=\"#Ansible特性\" class=\"headerlink\" title=\"Ansible特性\"></a>Ansible特性</h3><pre><code>- 基于python实现，由Paramike，PyYAML和Jinjia2三个关键模块\n- 部署简单，agentless\n- 使用ssh协议\n- 主从集中化模式\n- 支持自定义模块\n- 支持playbook\n- 幂等性：一种操作可重复多次结果相同\n</code></pre><h3 id=\"Ansible核心组件\"><a href=\"#Ansible核心组件\" class=\"headerlink\" title=\"Ansible核心组件\"></a>Ansible核心组件</h3><pre><code>- ansible core：Ansible的核心程序\n- host iventory：记录了每一个由Ansible管理的主机信息，信息包括ssh端口，root帐号密码，ip地址等\n- core modules：Ansible管理主机之前，先调用core Modules中的模块，然后指明管理Host Lnventory中的主机，就可以完成管理主机\n- custom modules：自定义模块\n- playbook(yaml,jinjia2)：YAML格式文件，多个任务定义在一个文件中\n- connect plugin：连接插件，Ansible和Host通信使用\n</code></pre><h3 id=\"Invetory文件说明\"><a href=\"#Invetory文件说明\" class=\"headerlink\" title=\"Invetory文件说明\"></a>Invetory文件说明</h3><p>参数说明：</p>\n<ul>\n<li>ansible_ssh_host 将要连接的远程主机名，可用于设置别名</li>\n<li>ansible_ssh_port ssh端口，非默认可通过它来设置</li>\n<li>ansible_ssh_user 默认的ssh用户名</li>\n<li>ansible_ssh_pass ssh密码 不安全</li>\n<li>ansible_sudo_pass sudo密码 不安全</li>\n<li>ansible_connection 主机连接类型</li>\n<li>ansible_ssh_private_key_file ssh 使用的私钥文件.适用于有多个密钥</li>\n<li>ansible_shell_type 目标系统的shell类型</li>\n<li>ansible_python_interpreter 目标主机的python路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">[web01]</div><div class=\"line\">192.168.0.1 ansible_ssh_user=root ansible_ssh_pass=xxx</div><div class=\"line\">[web02]</div><div class=\"line\">192.168.0.[2:5]:2222    #从2到5的主机,如果端口号不是默认22，可直接用:后定义端口号</div><div class=\"line\">[web03]    #对应变量，供playbooks使用</div><div class=\"line\">192.168.0.8 port=80 hostname=&quot;test01&quot;</div><div class=\"line\">192.168.0.9 port=8080 hostname=&quot;test02&quot;</div><div class=\"line\">[web03.vpn]\t#设置别名 访问192.168.0.190 实际访问10.8.0.190</div><div class=\"line\">192.168.0.190 ansible_ssh_port=2222 ansible_ssh_host=10.8.0.190</div><div class=\"line\">[web03:vars]    #对web03组定义变量，供playbooks使用</div><div class=\"line\">server1=ttxsgoto1.com</div><div class=\"line\">server2=ttxsgoto2.com</div><div class=\"line\">[webservers:children]    #组嵌套，webservers组包括web01和web02下的主机</div><div class=\"line\">web01</div><div class=\"line\">web02</div><div class=\"line\">[webservers:vars]    #组定义变量</div><div class=\"line\">server1=tttxsgoto.com</div><div class=\"line\"> </div><div class=\"line\">#########################</div><div class=\"line\">#  分文件定义host和group  #</div><div class=\"line\">#########################</div><div class=\"line\">- 独立的文件格式为yaml文件</div><div class=\"line\">- 在对应的hosts目录中创建host_vars，group_vars目录，该目录存放对应的变量</div><div class=\"line\">- host_vars目录用于存放host变量，all文件对所有主机有效</div><div class=\"line\">- 目录下的文件名和hosts文件对应的主机和组需要一样</div><div class=\"line\">---</div><div class=\"line\"># Which version of WordPress to deploy</div><div class=\"line\">wp_version: 4.2.4</div><div class=\"line\">wp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82</div><div class=\"line\"> </div><div class=\"line\"># These are the WordPress database settings</div><div class=\"line\">wp_db_name: test</div><div class=\"line\">wp_db_user: root</div><div class=\"line\">wp_db_password: root</div></pre></td></tr></table></figure>\n<p>查看模块帮助信息</p>\n<pre><code>- ansible-doc -l\n- ansible-doc -s  module_name\n</code></pre><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li>invetory中定义变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[web03:vars]    #对web03组定义变量，供playbooks使用</div><div class=\"line\">server1=ttxsgoto1.com</div><div class=\"line\">server2=ttxsgoto2.com</div></pre></td></tr></table></figure>\n<ul>\n<li>playbooks中定义变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hosts: webservers         #对webservers主机组下的所有主机进行操作</div><div class=\"line\">  vars:           # 为该play定义两个变量</div><div class=\"line\">    http_port: 80</div><div class=\"line\">    max_clients: 200</div><div class=\"line\">  vars_files:\t# 使用变量文件定义变量</div><div class=\"line\">      - vars/server_vars.yml</div></pre></td></tr></table></figure>\n<p>在playbook文件中冒号后面的值不能以”{ “开头，解决办法：要在”{ “开始的值加上引号，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hosts: app_servers</div><div class=\"line\">  vars:</div><div class=\"line\">    app_path: &quot;&#123;&#123; base_path &#125;&#125;&quot;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>通过系统变量(facts),可直接使用，如ansible_os_family，ansible_ens3.ipv4.address；</li>\n<li>运行结果当做变量使用-注册变量,register: result ,debug: msg=”“</li>\n<li>文件模板中使用的变量</li>\n<li>定义命令行变量如下</li>\n</ul>\n<h3 id=\"用命令行传递参数\"><a href=\"#用命令行传递参数\" class=\"headerlink\" title=\"用命令行传递参数\"></a>用命令行传递参数</h3><ul>\n<li>-e或者–extra-vars， -e ‘参数名1=值1 参数名2=值2’</li>\n<li>json格式传递参数  -e ‘{‘hosts’:’local’, ‘user’:’root’}’</li>\n<li>参数放在json文件里面中 -e “@vars.json”</li>\n</ul>\n<p>ansible命令应用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</div><div class=\"line\">ansible &quot;web01:web02&quot; -m ping \t# 多个组执行用:分隔，同时属于多个组的主机只会执行一次</div><div class=\"line\">-f forks:启动并发线程数</div><div class=\"line\">-m module_name:使用的模块名</div><div class=\"line\">-a args:模块特有的参数</div></pre></td></tr></table></figure></p>\n<h3 id=\"常见模块\"><a href=\"#常见模块\" class=\"headerlink\" title=\"常见模块\"></a>常见模块</h3><ul>\n<li>command</li>\n<li>cron</li>\n<li>user</li>\n<li>group</li>\n<li>copy</li>\n<li>file</li>\n<li>ping</li>\n<li>setup</li>\n<li>service</li>\n<li>shell</li>\n<li>script</li>\n<li>yum/apt</li>\n</ul>\n<p>cron:计划任务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">present: 安装任务</div><div class=\"line\">absent:移除任务</div><div class=\"line\">ansible local -m cron -a &apos;minute=*/5 job=&quot;/bin/echo abc &gt; /root/abc.log&quot; name=&quot;test cron job&quot;  state=&quot;absent&quot; &apos;</div></pre></td></tr></table></figure></p>\n<p>user:用户管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- name:指明添加的用户名</div><div class=\"line\">- ansible local -m user -a &apos;name=&quot;user1&quot;&apos;</div></pre></td></tr></table></figure></p>\n<p>group:用户组管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible local -m group -a &apos;name=user1 gid=306 system=yes&apos;    #添加用户组</div><div class=\"line\">ansible local -m group -a &apos;name=user1 gid=306 system=yes state=absent&apos;    #删除用户组</div></pre></td></tr></table></figure></p>\n<p>copy:文件复制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=:定义本地源路径</div><div class=\"line\">content=:取代src=，定义内容直接写入到远程文件中</div><div class=\"line\">dest=:定义远程路径，绝对路径</div><div class=\"line\">ansible local -m copy -a &apos;src=/etc/fstab dest=/tmp/fstab.bak owner=root  mode=777&apos;</div><div class=\"line\">ansible local -m copy -a &apos;content=&quot;hello wrold\\nabc\\n&quot; dest=/tmp/fstab.bak owner=root</div></pre></td></tr></table></figure></p>\n<p>file:文件管理属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">path=: 指明文件路径，可以使用name、dest来替换</div><div class=\"line\">ansible local -m file -a &apos; owner=bigdata group=bigdata  mode=644 path=/tmp/fstab.bak&apos;    #修改权限和组信息</div><div class=\"line\">ansible local -m file -a &apos;path=/tmp/fstab.bak.link src=/tmp/fstab.bak state=link&apos;  #软链接</div></pre></td></tr></table></figure></p>\n<p>ping:测试主机联通性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible local -m ping</div></pre></td></tr></table></figure></p>\n<p>setup:收集远程主机的facts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#每个被管理节点会将自己相关的信息发生给远程的ansible主机，用于模板调用变量</div><div class=\"line\">ansible local -m setup</div></pre></td></tr></table></figure></p>\n<p>service:常用服务的运行状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">enabled=: 开机自启动，为true和false</div><div class=\"line\">name=: 服务名称</div><div class=\"line\">state=: 启动状态，started,stopped,restarted;</div><div class=\"line\">ansible local -m service -a &quot;enabled=true name=nginx state=started&quot;</div></pre></td></tr></table></figure></p>\n<p>shell:远程执行命令，可传递参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#用到管道等功能的复杂命令时使用shell命令</div><div class=\"line\">ansible local -m shell -a &quot;echo xxx | passwd --stdin user1&quot;</div></pre></td></tr></table></figure></p>\n<p>script:将本地脚本在远程上执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#注意：使用相对路径指定脚本</div><div class=\"line\">ansible local -m script -a &quot;./test.sh&quot;</div></pre></td></tr></table></figure></p>\n<p>yum/apt: 安装程序包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">name=:    需要安装的程序包，可以加版本号</div><div class=\"line\">state=:    present，lastest安装，absent表示卸载</div><div class=\"line\">ansible local -m yum -a &quot;name=zsh&quot;    #安装</div><div class=\"line\">ansible local -m apt -a &quot;name=zsh state=absent&quot;    #卸载</div></pre></td></tr></table></figure></p>\n<h3 id=\"playbook\"><a href=\"#playbook\" class=\"headerlink\" title=\"playbook\"></a>playbook</h3><p>通过yaml将多个模块组装起来运行多个任务<br>实例说明：<a href=\"https://github.com/ansible/ansible-examples\">https://github.com/ansible/ansible-examples</a></p>\n<p>组成结构：<br>Playbooks：<br>    Tasks：任务列表,定义的一组hosts映射到task<br>    Variables：变量<br>    Templates：模板<br>    Handlers：处理器，由某事件触发执行的操作,一般用来重启服务,或者触发系统重启操作，handlers按照声明的顺序执行<br>    Roles：角色<br>    Include语句</p>\n<p>运行说明：<br>0)yaml语法检测<br>ansible-playbook –syntax-check /path/to/playbook.yaml<br>1)yaml测试运行<br>ansible-playbook -C /path/to/playbook.yaml<br>2)运行<br>ansiable-playbook /path/to/playbook.yml<br>-t TAGS  #给指定的任务定义一个调用标识<br>–tags=TAGS #给指定的任务定义一个调用标识<br>–skip-tags=SKIP_TAGS #跳过指定的标签<br>–start-at-task=START_AT #从哪个任务后执行<br>–list-tags    #查看标签<br>基本结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">---               #任何playbook文件(其实就是yaml文件)都要以这个开头</div><div class=\"line\">- hosts: webservers         #对webservers主机组下的所有主机进行操作</div><div class=\"line\">  vars:           #为该play定义两个变量</div><div class=\"line\">    http_port: 80</div><div class=\"line\">    max_clients: 200</div><div class=\"line\">  remote_user: deploy       #连接到远程主机的用户</div><div class=\"line\">  sudo: yes       #以sudo模式运行该play</div><div class=\"line\">  sudo_user: root           #sudo到哪个用户，默认为root，如果sudo到该用户需要密码，则在执行ansible-playbook的时候指定-K选项来输入sudo密码</div><div class=\"line\">  tasks:          #开始定义task</div><div class=\"line\">  - name: ensure apache is at the latest version            #这既是每个task的说明也是每个task的名字</div><div class=\"line\">    yum: pkg=httpd state=latest</div><div class=\"line\">    tags:         #给该task打一个标签</div><div class=\"line\">      - last_http</div><div class=\"line\">  - name: write the apache config file</div><div class=\"line\">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</div><div class=\"line\">    notify:       #提供watch功能，这里当apache配置文件改变时，就调用handlers中名为&quot;restart apache&quot;的task来重启apache</div><div class=\"line\">    - restart apache</div><div class=\"line\">  - name: ensure apache is running</div><div class=\"line\">    service: name=httpd state=started</div><div class=\"line\">  handlers:       #notify通知这里的task执行，说明：定义在handlers下的task只有在notify触发的时候才会执行</div><div class=\"line\">    - name: restart apache</div><div class=\"line\">      service: name=httpd state=restarted</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">例子1：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: create nginx group</div><div class=\"line\">      group: name=nginx system=yes gid=208</div><div class=\"line\">  - name: create nginx user</div><div class=\"line\">      user: name=nginx uid=208 system=yes</div><div class=\"line\">- hosts: dbservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: copy file to dbsrvs</div><div class=\"line\">      copy: src=/etc/inittab dest=/tmp/inittab.bak</div><div class=\"line\"> </div><div class=\"line\">例子2(handler,vars)：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  vars:</div><div class=\"line\">  - package: httpd</div><div class=\"line\">  - service: httpd</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: install httpd package</div><div class=\"line\">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class=\"line\">  - name: install configuration file for httpd</div><div class=\"line\">      copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf</div><div class=\"line\">      notify:</div><div class=\"line\">      - restart httpd</div><div class=\"line\">  - name: start httpd service</div><div class=\"line\">      service: enabled=true name=httpd state=started</div><div class=\"line\">  handlers:</div><div class=\"line\">  - name: restart httpd</div><div class=\"line\">    service: name=httpd state=restarted</div><div class=\"line\">  - name: copy file</div><div class=\"line\">    copy: content=&quot;&#123;&#123; ansible_all_ipv4_addresses &#125;&#125;&quot; dest=/tmp/test.txt</div><div class=\"line\"> </div><div class=\"line\">例子3(条件测试)：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  vars:</div><div class=\"line\">  - username: user1</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: create &#123;&#123; username &#125;&#125;</div><div class=\"line\">      user: name=&#123;&#123; userneam &#125;&#125;</div><div class=\"line\">      when: ansible_fqdn == &apos;ttxsgoto&apos;</div><div class=\"line\"> </div><div class=\"line\">例子4(迭代-for)：</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  - name: add username</div><div class=\"line\">    user: name=&#123;&#123; item.name &#125;&#125; state=present groups=&#123;&#123; item.groups &#125;&#125;</div><div class=\"line\">    with_items:</div><div class=\"line\">      - &#123;name:&apos;testuser1&apos;,groups=&apos;user1&apos;&#125;</div><div class=\"line\">      - &#123;name:&apos;testuser2&apos;,groups=&apos;user2&apos;&#125;</div><div class=\"line\">- hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  - name: add username</div><div class=\"line\">    user: name=&#123;&#123; item &#125;&#125; state=present groups=group1</div><div class=\"line\">    with_items:</div><div class=\"line\">      - testuser1</div><div class=\"line\">      - testuser2</div><div class=\"line\"> </div><div class=\"line\">例子5(templates/tags  ansible-playbook test.yml --tags=&apos;conf_chage&apos;):</div><div class=\"line\"> #tags: 在playbook可以为某个任务定义一个标签，在执行playbook时，通过tags可实现仅运行指定tasks任务</div><div class=\"line\"> - hosts: webservers</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  vars:</div><div class=\"line\">  - package: httpd</div><div class=\"line\">  - service: httpd</div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: install httpd package</div><div class=\"line\">    yum: name=&#123;&#123; package &#125;&#125; state=lastest</div><div class=\"line\">  - name: install configuration file for httpd</div><div class=\"line\">      template: src=/root/conf/httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf</div><div class=\"line\">     tags:</div><div class=\"line\">     - conf_chage</div><div class=\"line\">     notify:</div><div class=\"line\">      - restart httpd</div><div class=\"line\">  - name: start httpd service</div><div class=\"line\">      service: enabled=true name=httpd state=started</div><div class=\"line\">  handlers:</div><div class=\"line\">  - name: restart httpd</div><div class=\"line\">    service: name=httpd state=restarted</div></pre></td></tr></table></figure>\n<h3 id=\"roles\"><a href=\"#roles\" class=\"headerlink\" title=\"roles\"></a>roles</h3><p>roles：用于层次化、结构化的组织playbook；role能够根据层次结构自动装载变量文件、task以及handlers等，要使用roles只需要在playbook中使用include指令；roles通过分别将变量、文件、任务、模块及处理器放置在单独的目录中，并可以便捷地通过include它们的一种机制，角色一般用于基于主机构建服务的场景中；Roles 的概念来自于这样的想法：通过 include 包含文件并将它们组合在一起，组织成一个简洁、可重用的抽象对象</p>\n<p>创建role的步骤如下：</p>\n<ol>\n<li>创建以roles命名的目录</li>\n<li>在roles目录中分别创建以各角色名称命名的目录，如websrvs等</li>\n<li>在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建</li>\n<li>在palybook文件中调用各角色</li>\n</ol>\n<p>roles内各目录中可用的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表include包含其它的位于此目录中的task文件</div><div class=\"line\">files目录：存放由copy或script等模块调用的文件</div><div class=\"line\">templates目录：template模块会自动在此目录中寻找Jinja2模板文件</div><div class=\"line\">handlers目录：此目录中应当包含一个main</div><div class=\"line\">vars目录：应当包含一个main.yml文件，用于定义此角色用到的变量</div><div class=\"line\">meta目录：应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关</div><div class=\"line\">default目录：应当包含一个main.yml文件，用于为当前角色设定默认变量</div></pre></td></tr></table></figure></p>\n<p>wordpress-nginx 实例如下：</p>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">./</div><div class=\"line\">├── group_vars</div><div class=\"line\">│   └── all</div><div class=\"line\">├── roles</div><div class=\"line\">│   ├── common</div><div class=\"line\">│   │   ├── files</div><div class=\"line\">│   │   │   ├── epel.repo</div><div class=\"line\">│   │   │   ├── iptables-save</div><div class=\"line\">│   │   │   └── RPM-GPG-KEY-EPEL-6</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── tasks</div><div class=\"line\">│   │       └── main.yml</div><div class=\"line\">│   ├── mysql</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   ├── tasks</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── templates</div><div class=\"line\">│   │       └── my.cnf.j2</div><div class=\"line\">│   ├── nginx</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   ├── tasks</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── templates</div><div class=\"line\">│   │       └── default.conf</div><div class=\"line\">│   ├── php-fpm</div><div class=\"line\">│   │   ├── handlers</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   ├── tasks</div><div class=\"line\">│   │   │   └── main.yml</div><div class=\"line\">│   │   └── templates</div><div class=\"line\">│   │       └── wordpress.conf</div><div class=\"line\">│   └── wordpress</div><div class=\"line\">│       ├── tasks</div><div class=\"line\">│       │   └── main.yml</div><div class=\"line\">│       └── templates</div><div class=\"line\">│           └── wp-config.php</div><div class=\"line\">└── site.yml</div><div class=\"line\"> </div><div class=\"line\">21 directories, 18 files</div></pre></td></tr></table></figure>\n<p>site.yml -入口函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install WordPress, MySQL, Nginx, and PHP-FPM</div><div class=\"line\">  hosts: all</div><div class=\"line\">  remote_user: root</div><div class=\"line\">  # remote_user: user</div><div class=\"line\">  # become: yes</div><div class=\"line\">  # become_method: sudo</div><div class=\"line\"> </div><div class=\"line\">  roles:</div><div class=\"line\">    - common</div><div class=\"line\">    - mysql</div><div class=\"line\">    - nginx</div><div class=\"line\">    - php-fpm</div><div class=\"line\">    - wordpress</div></pre></td></tr></table></figure></p>\n<p>group_vars/all -全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\"># Which version of WordPress to deploy</div><div class=\"line\">wp_version: 4.2.4</div><div class=\"line\">wp_sha256sum: 42ca594afc709cbef8528a6096f5a1efe96dcf3164e7ce321e87d57ae015cc82</div><div class=\"line\"> </div><div class=\"line\"># These are the WordPress database settings</div><div class=\"line\">wp_db_name: wordpress</div><div class=\"line\">wp_db_user: wordpress</div><div class=\"line\">wp_db_password: secret</div><div class=\"line\"> </div><div class=\"line\"># You shouldn&apos;t need to change this.</div><div class=\"line\">mysql_port: 3306</div><div class=\"line\"> </div><div class=\"line\"># This is used for the nginx server configuration, but access to the</div><div class=\"line\"># WordPress site is not restricted by a named host.</div><div class=\"line\">server_hostname: www.example.com</div><div class=\"line\"> </div><div class=\"line\"># Disable All Updates</div><div class=\"line\"># By default automatic updates are enabled, set this value to true to disable all automatic updates</div><div class=\"line\">auto_up_disable: false</div><div class=\"line\"> </div><div class=\"line\">#Define Core Update Level</div><div class=\"line\">#true  = Development, minor, and major updates are all enabled</div><div class=\"line\">#false = Development, minor, and major updates are all disabled</div><div class=\"line\">#minor = Minor updates are enabled, development, and major updates are disabled</div><div class=\"line\">core_update_level: true</div></pre></td></tr></table></figure></p>\n<h4 id=\"common\"><a href=\"#common\" class=\"headerlink\" title=\"common\"></a>common</h4><p>roles/common/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install libselinux-python</div><div class=\"line\">  yum: name=libselinux-python state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Reload ansible_facts</div><div class=\"line\">  setup:</div><div class=\"line\"> </div><div class=\"line\">- name: Copy the EPEL repository definition</div><div class=\"line\">  copy: src=epel.repo dest=/etc/yum.repos.d/epel.repo</div><div class=\"line\"> </div><div class=\"line\">- name: Create the GPG key for EPEL</div><div class=\"line\">  copy: src=RPM-GPG-KEY-EPEL-6 dest=/etc/pki/rpm-gpg</div><div class=\"line\"> </div><div class=\"line\">- name: Set up iptables rules</div><div class=\"line\">  copy: src=iptables-save dest=/etc/sysconfig/iptables</div><div class=\"line\">  notify: restart iptables</div></pre></td></tr></table></figure></p>\n<p>roles/common/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart iptables</div><div class=\"line\">  service: name=iptables state=restarted</div></pre></td></tr></table></figure></p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><p>roles/mysql/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install Mysql package</div><div class=\"line\">  yum: name=&#123;&#123; item &#125;&#125; state=present</div><div class=\"line\">  with_items:</div><div class=\"line\">   - mysql-server</div><div class=\"line\">   - MySQL-python</div><div class=\"line\">   - libselinux-python</div><div class=\"line\">   - libsemanage-python</div><div class=\"line\"> </div><div class=\"line\">- name: Configure SELinux to start mysql on any port</div><div class=\"line\">  seboolean: name=mysql_connect_any state=true persistent=yes</div><div class=\"line\">  when: ansible_selinux.status == &quot;enabled&quot;</div><div class=\"line\"> </div><div class=\"line\">- name: Create Mysql configuration file</div><div class=\"line\">  template: src=my.cnf.j2 dest=/etc/my.cnf</div><div class=\"line\">  notify:</div><div class=\"line\">  - restart mysql</div><div class=\"line\"> </div><div class=\"line\">- name: Start Mysql Service</div><div class=\"line\">  service: name=mysqld state=started enabled=yes</div></pre></td></tr></table></figure></p>\n<p>roles/mysql/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart mysql</div><div class=\"line\">  service: name=mysqld state=restarted</div></pre></td></tr></table></figure></p>\n<p>roles/mysql/templates/my.cnf.j2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">datadir=/var/lib/mysql</div><div class=\"line\">socket=/var/lib/mysql/mysql.sock</div><div class=\"line\">user=mysql</div><div class=\"line\"># Disabling symbolic-links is recommended to prevent assorted security risks</div><div class=\"line\">symbolic-links=0</div><div class=\"line\">port=&#123;&#123; mysql_port &#125;&#125;</div><div class=\"line\"> </div><div class=\"line\">[mysqld_safe]</div><div class=\"line\">log-error=/var/log/mysqld.log</div><div class=\"line\">pid-file=/var/run/mysqld/mysqld.pid</div></pre></td></tr></table></figure></p>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><p>roles/nginx/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install nginx</div><div class=\"line\">  yum: name=nginx state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Copy nginx configuration for wordpress</div><div class=\"line\">  template: src=default.conf dest=/etc/nginx/conf.d/default.conf</div><div class=\"line\">  notify: restart nginx</div></pre></td></tr></table></figure></p>\n<p>roles/nginx/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart nginx</div><div class=\"line\">  service: name=nginx state=restarted enabled=yes</div></pre></td></tr></table></figure></p>\n<p>roles/nginx/templates/default.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        server_name  &#123;&#123; server_hostname &#125;&#125;;</div><div class=\"line\">        root /srv/wordpress/ ;</div><div class=\"line\"> </div><div class=\"line\">\tclient_max_body_size 64M;</div><div class=\"line\"> </div><div class=\"line\">\t# Deny access to any files with a .php extension in the uploads directory</div><div class=\"line\">        location ~* /(?:uploads|files)/.*\\.php$ &#123;</div><div class=\"line\">                deny all;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        location / &#123;</div><div class=\"line\">                index index.php index.html index.htm;</div><div class=\"line\">                try_files $uri $uri/ /index.php?$args;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        location ~* \\.(gif|jpg|jpeg|png|css|js)$ &#123;</div><div class=\"line\">                expires max;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        location ~ \\.php$ &#123;</div><div class=\"line\">                try_files $uri =404;</div><div class=\"line\">                fastcgi_split_path_info ^(.+\\.php)(/.+)$;</div><div class=\"line\">                fastcgi_index index.php;</div><div class=\"line\">                fastcgi_pass  unix:/var/run/php-fpm/wordpress.sock;</div><div class=\"line\">                fastcgi_param   SCRIPT_FILENAME</div><div class=\"line\">                                $document_root$fastcgi_script_name;</div><div class=\"line\">                include       fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"php-fpm\"><a href=\"#php-fpm\" class=\"headerlink\" title=\"php-fpm\"></a>php-fpm</h4><p>roles/php-fpm/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Install php-fpm and deps</div><div class=\"line\">  yum: name=&#123;&#123; item &#125;&#125; state=present</div><div class=\"line\">  with_items:</div><div class=\"line\">    - php</div><div class=\"line\">    - php-fpm</div><div class=\"line\">    - php-enchant</div><div class=\"line\">    - php-IDNA_Convert</div><div class=\"line\">    - php-mbstring</div><div class=\"line\">    - php-mysql</div><div class=\"line\">    - php-PHPMailer</div><div class=\"line\">    - php-process</div><div class=\"line\">    - php-simplepie</div><div class=\"line\">    - php-xml</div><div class=\"line\"> </div><div class=\"line\">- name: Disable default pool</div><div class=\"line\">  command: mv /etc/php-fpm.d/www.conf /etc/php-fpm.d/www.disabled creates=/etc/php-fpm.d/www.disabled</div><div class=\"line\">  notify: restart php-fpm</div><div class=\"line\"> </div><div class=\"line\">- name: Copy php-fpm configuration</div><div class=\"line\">  template: src=wordpress.conf dest=/etc/php-fpm.d/</div><div class=\"line\">  notify: restart php-fpm</div></pre></td></tr></table></figure></p>\n<p>roles/php-fpm/handlers/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: restart php-fpm</div><div class=\"line\">  service: name=php-fpm state=restarted</div></pre></td></tr></table></figure></p>\n<p>roles/php-fpm/templates/wordpress.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[wordpress]</div><div class=\"line\">listen = /var/run/php-fpm/wordpress.sock</div><div class=\"line\">listen.owner = nginx</div><div class=\"line\">listen.group = nginx</div><div class=\"line\">listen.mode = 0660</div><div class=\"line\">user = wordpress</div><div class=\"line\">group = wordpress</div><div class=\"line\">pm = dynamic</div><div class=\"line\">pm.max_children = 10</div><div class=\"line\">pm.start_servers = 1</div><div class=\"line\">pm.min_spare_servers = 1</div><div class=\"line\">pm.max_spare_servers = 3</div><div class=\"line\">pm.max_requests = 500</div><div class=\"line\">chdir = /srv/wordpress/</div><div class=\"line\">php_admin_value[open_basedir] = /srv/wordpress/:/tmp</div></pre></td></tr></table></figure></p>\n<h4 id=\"wordpress\"><a href=\"#wordpress\" class=\"headerlink\" title=\"wordpress\"></a>wordpress</h4><p>roles/wordpress/tasks/main.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">- name: Download WordPress</div><div class=\"line\">  get_url: url=http://wordpress.org/wordpress-&#123;&#123; wp_version &#125;&#125;.tar.gz dest=/srv/wordpress-&#123;&#123; wp_version &#125;&#125;.tar.gz</div><div class=\"line\">           sha256sum=&quot;&#123;&#123; wp_sha256sum &#125;&#125;&quot;</div><div class=\"line\"> </div><div class=\"line\">- name: Extract archive</div><div class=\"line\">  command: chdir=/srv/ /bin/tar xvf wordpress-&#123;&#123; wp_version &#125;&#125;.tar.gz creates=/srv/wordpress</div><div class=\"line\"> </div><div class=\"line\">- name: Add group &quot;wordpress&quot;</div><div class=\"line\">  group: name=wordpress</div><div class=\"line\"> </div><div class=\"line\">- name: Add user &quot;wordpress&quot;</div><div class=\"line\">  user: name=wordpress group=wordpress home=/srv/wordpress/</div><div class=\"line\"> </div><div class=\"line\">- name: Fetch random salts for WordPress config</div><div class=\"line\">  local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/</div><div class=\"line\">  register: &quot;wp_salt&quot;</div><div class=\"line\">  become: no</div><div class=\"line\">  become_method: sudo</div><div class=\"line\"> </div><div class=\"line\">- name: Create WordPress database</div><div class=\"line\">  mysql_db: name=&#123;&#123; wp_db_name &#125;&#125; state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Create WordPress database user</div><div class=\"line\">  mysql_user: name=&#123;&#123; wp_db_user &#125;&#125; password=&#123;&#123; wp_db_password &#125;&#125; priv=&#123;&#123; wp_db_name &#125;&#125;.*:ALL host=&apos;localhost&apos; state=present</div><div class=\"line\"> </div><div class=\"line\">- name: Copy WordPress config file</div><div class=\"line\">  template: src=wp-config.php dest=/srv/wordpress/</div><div class=\"line\"> </div><div class=\"line\">- name: Change ownership of WordPress installation</div><div class=\"line\">  file: path=/srv/wordpress/ owner=wordpress group=wordpress state=directory recurse=yes setype=httpd_sys_content_t</div><div class=\"line\"> </div><div class=\"line\">- name: Start php-fpm Service</div><div class=\"line\">  service: name=php-fpm state=started enabled=yes</div></pre></td></tr></table></figure></p>\n<p>roles/wordpress/templates/wp-config.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">/**</div><div class=\"line\"> * The base configurations of the WordPress.</div><div class=\"line\"> *</div><div class=\"line\"> * This file has the following configurations: MySQL settings, Table Prefix,</div><div class=\"line\"> * Secret Keys, WordPress Language, and ABSPATH. You can find more information</div><div class=\"line\"> * by visiting &#123;@link http://codex.wordpress.org/Editing_wp-config.php Editing</div><div class=\"line\"> * wp-config.php&#125; Codex page. You can get the MySQL settings from your web host.</div><div class=\"line\"> *</div><div class=\"line\"> * This file is used by the wp-config.php creation script during the</div><div class=\"line\"> * installation. You don&apos;t have to use the web site, you can just copy this file</div><div class=\"line\"> * to &quot;wp-config.php&quot; and fill in the values.</div><div class=\"line\"> *</div><div class=\"line\"> * @package WordPress</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">// ** MySQL settings - You can get this info from your web host ** //</div><div class=\"line\">/** The name of the database for WordPress */</div><div class=\"line\">define(&apos;DB_NAME&apos;, &apos;&#123;&#123; wp_db_name &#125;&#125;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** MySQL database username */</div><div class=\"line\">define(&apos;DB_USER&apos;, &apos;&#123;&#123; wp_db_user &#125;&#125;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** MySQL database password */</div><div class=\"line\">define(&apos;DB_PASSWORD&apos;, &apos;&#123;&#123; wp_db_password &#125;&#125;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** MySQL hostname */</div><div class=\"line\">define(&apos;DB_HOST&apos;, &apos;localhost&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** Database Charset to use in creating database tables. */</div><div class=\"line\">define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** The Database Collate type. Don&apos;t change this if in doubt. */</div><div class=\"line\">define(&apos;DB_COLLATE&apos;, &apos;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/**#@+</div><div class=\"line\"> * Authentication Unique Keys and Salts.</div><div class=\"line\"> *</div><div class=\"line\"> * Change these to different unique phrases!</div><div class=\"line\"> * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;</div><div class=\"line\"> * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.</div><div class=\"line\"> *</div><div class=\"line\"> * @since 2.6.0</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">&#123;&#123; wp_salt.stdout &#125;&#125;</div><div class=\"line\"> </div><div class=\"line\">/**#@-*/</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * WordPress Database Table prefix.</div><div class=\"line\"> *</div><div class=\"line\"> * You can have multiple installations in one database if you give each a unique</div><div class=\"line\"> * prefix. Only numbers, letters, and underscores please!</div><div class=\"line\"> */</div><div class=\"line\">$table_prefix  = &apos;wp_&apos;;</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * WordPress Localized Language, defaults to English.</div><div class=\"line\"> *</div><div class=\"line\"> * Change this to localize WordPress. A corresponding MO file for the chosen</div><div class=\"line\"> * language must be installed to wp-content/languages. For example, install</div><div class=\"line\"> * de_DE.mo to wp-content/languages and set WPLANG to &apos;de_DE&apos; to enable German</div><div class=\"line\"> * language support.</div><div class=\"line\"> */</div><div class=\"line\">define(&apos;WPLANG&apos;, &apos;&apos;);</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * For developers: WordPress debugging mode.</div><div class=\"line\"> *</div><div class=\"line\"> * Change this to true to enable the display of notices during development.</div><div class=\"line\"> * It is strongly recommended that plugin and theme developers use WP_DEBUG</div><div class=\"line\"> * in their development environments.</div><div class=\"line\"> */</div><div class=\"line\">define(&apos;WP_DEBUG&apos;, false);</div><div class=\"line\"> </div><div class=\"line\">/** Disable Automatic Updates Completely */</div><div class=\"line\">define( &apos;AUTOMATIC_UPDATER_DISABLED&apos;, &#123;&#123;auto_up_disable&#125;&#125; );</div><div class=\"line\"> </div><div class=\"line\">/** Define AUTOMATIC Updates for Components. */</div><div class=\"line\">define( &apos;WP_AUTO_UPDATE_CORE&apos;, &#123;&#123;core_update_level&#125;&#125; );</div><div class=\"line\"> </div><div class=\"line\">/* That&apos;s all, stop editing! Happy blogging. */</div><div class=\"line\"> </div><div class=\"line\">/** Absolute path to the WordPress directory. */</div><div class=\"line\">if ( !defined(&apos;ABSPATH&apos;) )</div><div class=\"line\">\tdefine(&apos;ABSPATH&apos;, dirname(__FILE__) . &apos;/&apos;);</div><div class=\"line\"> </div><div class=\"line\">/** Sets up WordPress vars and included files. */</div><div class=\"line\">require_once(ABSPATH . &apos;wp-settings.php&apos;);</div></pre></td></tr></table></figure></p>\n"},{"title":"运维 Awk、Uniq、Sort基本用法","date":"2017-02-07T14:38:32.000Z","_content":"\n今天对awk、uniq、sort三个命令做了基础功能的学习，这里自己记录一下：\n\n#### 1.awk\n数据处理工具，将一行分割成多个“字段”来处理\n\n    awk -F '文本切割符'‘{处理过程}’ 文件名称\n\n如：cat /ect/passwd | awk -F ':' '{print $1}'   #以：分割，打印第一列的数据；如果为$0表示整个文件内容\n\n    cat /etc/passwd | awk -F ''BEGIN {print \"begin,goto\"} {print $1\",\"$7} END {print “end,end”}  #以空白符作为分割，打印begin，goto开始执行信息，打印1，7行，以end,end结束\n\n\n#### 2.uniq \n命令用来过滤重复部分显示文件内容,这个命令读取输入文件，并比较相邻的行\n```\n参数：\n\n-c  显示输出中，在每行行首加上本行在文件中出现的次数\n-d  只显示重复行\n-u  只显示文件中不重复的各行\n-n  前n个字段与每个字段前的空白一起被忽略\n+n  前n个字符被忽略，之前的字符被跳过（字符从0开始编号）\n-f   n与-n相同，这里n是字段数\n-s   n与+n相同，这里n是字符数\n常用： uniq -c  首行显示文件中出现的次数\n```\n\n#### 3.sort 排序\n```\n参数：\n-u  在输出行中去除重复行\n-r   默认的排序方式为升序，-r转换为降序排列\n-n  默认按照字符来排序出现10在2前面，-n以数值来排序\n-t   后面设定间隔符\n-k  指定列数\n如：sort -n -k 2 -t ： test.txt  以数值排序，按照第二列以“：”间隔来排列顺序\n```\n以上简单总结而已，后续如有其他使用，再更新！！！\n\n#### 4.日常使用相关\n\n- 截取日志中特定时间段的日志内容\n    \n        sed -n '/2016-08-25 09:44:10/,/2016-08-25 09:44:30/p'  1.txt > test.txt\n\n\n- nginx 访问日志统计访问的url\n\n    截取特定时间段的日志\n\n        cat nginx.acc.log | egrep \"12/Aug/2016\" | sed -n '/14:59:44/,/15:47:23/p' > a.txt\n\n- 排序\n\n        cat a.txt |awk -F '+0800' '{print $2}'| awk -F ' ' '{print $5}' | sort #对数据进行(ASCII)排序  \n\n- 去重，uniq -c 只会合并相邻的记录，所以在使用它之前，应该先进行排序\n\n        cat a.txt |awk -F '+0800' '{print $2}'| awk -F ' ' '{print $5}' | sort | uniq -c\n    \n- 再排序，得到 (次数  内容)的文件， sort -k 1 -n -r 指定对第一行进行排序，-n 数字排序，以降序排列\n\n        cat a.txt |awk -F '+0800' '{print $2}'| awk -F ' ' '{print $5}' | sort | uniq -c | sort -k 1 -n -r\n\n","source":"_posts/awk_uniq_sort.md","raw":"---\ntitle: 运维 Awk、Uniq、Sort基本用法\ndate: 2017-02-07 22:38:32\ntags:\n  - Awk\n  - Sort\n  - Uniq\ncategories:\n  - 运维\n---\n\n今天对awk、uniq、sort三个命令做了基础功能的学习，这里自己记录一下：\n\n#### 1.awk\n数据处理工具，将一行分割成多个“字段”来处理\n\n    awk -F '文本切割符'‘{处理过程}’ 文件名称\n\n如：cat /ect/passwd | awk -F ':' '{print $1}'   #以：分割，打印第一列的数据；如果为$0表示整个文件内容\n\n    cat /etc/passwd | awk -F ''BEGIN {print \"begin,goto\"} {print $1\",\"$7} END {print “end,end”}  #以空白符作为分割，打印begin，goto开始执行信息，打印1，7行，以end,end结束\n\n\n#### 2.uniq \n命令用来过滤重复部分显示文件内容,这个命令读取输入文件，并比较相邻的行\n```\n参数：\n\n-c  显示输出中，在每行行首加上本行在文件中出现的次数\n-d  只显示重复行\n-u  只显示文件中不重复的各行\n-n  前n个字段与每个字段前的空白一起被忽略\n+n  前n个字符被忽略，之前的字符被跳过（字符从0开始编号）\n-f   n与-n相同，这里n是字段数\n-s   n与+n相同，这里n是字符数\n常用： uniq -c  首行显示文件中出现的次数\n```\n\n#### 3.sort 排序\n```\n参数：\n-u  在输出行中去除重复行\n-r   默认的排序方式为升序，-r转换为降序排列\n-n  默认按照字符来排序出现10在2前面，-n以数值来排序\n-t   后面设定间隔符\n-k  指定列数\n如：sort -n -k 2 -t ： test.txt  以数值排序，按照第二列以“：”间隔来排列顺序\n```\n以上简单总结而已，后续如有其他使用，再更新！！！\n\n#### 4.日常使用相关\n\n- 截取日志中特定时间段的日志内容\n    \n        sed -n '/2016-08-25 09:44:10/,/2016-08-25 09:44:30/p'  1.txt > test.txt\n\n\n- nginx 访问日志统计访问的url\n\n    截取特定时间段的日志\n\n        cat nginx.acc.log | egrep \"12/Aug/2016\" | sed -n '/14:59:44/,/15:47:23/p' > a.txt\n\n- 排序\n\n        cat a.txt |awk -F '+0800' '{print $2}'| awk -F ' ' '{print $5}' | sort #对数据进行(ASCII)排序  \n\n- 去重，uniq -c 只会合并相邻的记录，所以在使用它之前，应该先进行排序\n\n        cat a.txt |awk -F '+0800' '{print $2}'| awk -F ' ' '{print $5}' | sort | uniq -c\n    \n- 再排序，得到 (次数  内容)的文件， sort -k 1 -n -r 指定对第一行进行排序，-n 数字排序，以降序排列\n\n        cat a.txt |awk -F '+0800' '{print $2}'| awk -F ' ' '{print $5}' | sort | uniq -c | sort -k 1 -n -r\n\n","slug":"awk_uniq_sort","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5v3000vct8uyi1uiy1h","content":"<p>今天对awk、uniq、sort三个命令做了基础功能的学习，这里自己记录一下：</p>\n<h4 id=\"1-awk\"><a href=\"#1-awk\" class=\"headerlink\" title=\"1.awk\"></a>1.awk</h4><p>数据处理工具，将一行分割成多个“字段”来处理</p>\n<pre><code>awk -F &apos;文本切割符&apos;‘{处理过程}’ 文件名称\n</code></pre><p>如：cat /ect/passwd | awk -F ‘:’ ‘{print $1}’   #以：分割，打印第一列的数据；如果为$0表示整个文件内容</p>\n<pre><code>cat /etc/passwd | awk -F &apos;&apos;BEGIN {print &quot;begin,goto&quot;} {print $1&quot;,&quot;$7} END {print “end,end”}  #以空白符作为分割，打印begin，goto开始执行信息，打印1，7行，以end,end结束\n</code></pre><h4 id=\"2-uniq\"><a href=\"#2-uniq\" class=\"headerlink\" title=\"2.uniq\"></a>2.uniq</h4><p>命令用来过滤重复部分显示文件内容,这个命令读取输入文件，并比较相邻的行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">参数：</div><div class=\"line\"></div><div class=\"line\">-c  显示输出中，在每行行首加上本行在文件中出现的次数</div><div class=\"line\">-d  只显示重复行</div><div class=\"line\">-u  只显示文件中不重复的各行</div><div class=\"line\">-n  前n个字段与每个字段前的空白一起被忽略</div><div class=\"line\">+n  前n个字符被忽略，之前的字符被跳过（字符从0开始编号）</div><div class=\"line\">-f   n与-n相同，这里n是字段数</div><div class=\"line\">-s   n与+n相同，这里n是字符数</div><div class=\"line\">常用： uniq -c  首行显示文件中出现的次数</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-sort-排序\"><a href=\"#3-sort-排序\" class=\"headerlink\" title=\"3.sort 排序\"></a>3.sort 排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">参数：</div><div class=\"line\">-u  在输出行中去除重复行</div><div class=\"line\">-r   默认的排序方式为升序，-r转换为降序排列</div><div class=\"line\">-n  默认按照字符来排序出现10在2前面，-n以数值来排序</div><div class=\"line\">-t   后面设定间隔符</div><div class=\"line\">-k  指定列数</div><div class=\"line\">如：sort -n -k 2 -t ： test.txt  以数值排序，按照第二列以“：”间隔来排列顺序</div></pre></td></tr></table></figure>\n<p>以上简单总结而已，后续如有其他使用，再更新！！！</p>\n<h4 id=\"4-日常使用相关\"><a href=\"#4-日常使用相关\" class=\"headerlink\" title=\"4.日常使用相关\"></a>4.日常使用相关</h4><ul>\n<li><p>截取日志中特定时间段的日志内容</p>\n<pre><code>sed -n &apos;/2016-08-25 09:44:10/,/2016-08-25 09:44:30/p&apos;  1.txt &gt; test.txt\n</code></pre></li>\n</ul>\n<ul>\n<li><p>nginx 访问日志统计访问的url</p>\n<p>  截取特定时间段的日志</p>\n<pre><code>cat nginx.acc.log | egrep &quot;12/Aug/2016&quot; | sed -n &apos;/14:59:44/,/15:47:23/p&apos; &gt; a.txt\n</code></pre></li>\n<li><p>排序</p>\n<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort #对数据进行(ASCII)排序  \n</code></pre></li>\n<li><p>去重，uniq -c 只会合并相邻的记录，所以在使用它之前，应该先进行排序</p>\n<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort | uniq -c\n</code></pre></li>\n<li><p>再排序，得到 (次数  内容)的文件， sort -k 1 -n -r 指定对第一行进行排序，-n 数字排序，以降序排列</p>\n<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort | uniq -c | sort -k 1 -n -r\n</code></pre></li>\n</ul>\n","excerpt":"","more":"<p>今天对awk、uniq、sort三个命令做了基础功能的学习，这里自己记录一下：</p>\n<h4 id=\"1-awk\"><a href=\"#1-awk\" class=\"headerlink\" title=\"1.awk\"></a>1.awk</h4><p>数据处理工具，将一行分割成多个“字段”来处理</p>\n<pre><code>awk -F &apos;文本切割符&apos;‘{处理过程}’ 文件名称\n</code></pre><p>如：cat /ect/passwd | awk -F ‘:’ ‘{print $1}’   #以：分割，打印第一列的数据；如果为$0表示整个文件内容</p>\n<pre><code>cat /etc/passwd | awk -F &apos;&apos;BEGIN {print &quot;begin,goto&quot;} {print $1&quot;,&quot;$7} END {print “end,end”}  #以空白符作为分割，打印begin，goto开始执行信息，打印1，7行，以end,end结束\n</code></pre><h4 id=\"2-uniq\"><a href=\"#2-uniq\" class=\"headerlink\" title=\"2.uniq\"></a>2.uniq</h4><p>命令用来过滤重复部分显示文件内容,这个命令读取输入文件，并比较相邻的行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">参数：</div><div class=\"line\"></div><div class=\"line\">-c  显示输出中，在每行行首加上本行在文件中出现的次数</div><div class=\"line\">-d  只显示重复行</div><div class=\"line\">-u  只显示文件中不重复的各行</div><div class=\"line\">-n  前n个字段与每个字段前的空白一起被忽略</div><div class=\"line\">+n  前n个字符被忽略，之前的字符被跳过（字符从0开始编号）</div><div class=\"line\">-f   n与-n相同，这里n是字段数</div><div class=\"line\">-s   n与+n相同，这里n是字符数</div><div class=\"line\">常用： uniq -c  首行显示文件中出现的次数</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-sort-排序\"><a href=\"#3-sort-排序\" class=\"headerlink\" title=\"3.sort 排序\"></a>3.sort 排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">参数：</div><div class=\"line\">-u  在输出行中去除重复行</div><div class=\"line\">-r   默认的排序方式为升序，-r转换为降序排列</div><div class=\"line\">-n  默认按照字符来排序出现10在2前面，-n以数值来排序</div><div class=\"line\">-t   后面设定间隔符</div><div class=\"line\">-k  指定列数</div><div class=\"line\">如：sort -n -k 2 -t ： test.txt  以数值排序，按照第二列以“：”间隔来排列顺序</div></pre></td></tr></table></figure>\n<p>以上简单总结而已，后续如有其他使用，再更新！！！</p>\n<h4 id=\"4-日常使用相关\"><a href=\"#4-日常使用相关\" class=\"headerlink\" title=\"4.日常使用相关\"></a>4.日常使用相关</h4><ul>\n<li><p>截取日志中特定时间段的日志内容</p>\n<pre><code>sed -n &apos;/2016-08-25 09:44:10/,/2016-08-25 09:44:30/p&apos;  1.txt &gt; test.txt\n</code></pre></li>\n</ul>\n<ul>\n<li><p>nginx 访问日志统计访问的url</p>\n<p>  截取特定时间段的日志</p>\n<pre><code>cat nginx.acc.log | egrep &quot;12/Aug/2016&quot; | sed -n &apos;/14:59:44/,/15:47:23/p&apos; &gt; a.txt\n</code></pre></li>\n<li><p>排序</p>\n<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort #对数据进行(ASCII)排序  \n</code></pre></li>\n<li><p>去重，uniq -c 只会合并相邻的记录，所以在使用它之前，应该先进行排序</p>\n<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort | uniq -c\n</code></pre></li>\n<li><p>再排序，得到 (次数  内容)的文件， sort -k 1 -n -r 指定对第一行进行排序，-n 数字排序，以降序排列</p>\n<pre><code>cat a.txt |awk -F &apos;+0800&apos; &apos;{print $2}&apos;| awk -F &apos; &apos; &apos;{print $5}&apos; | sort | uniq -c | sort -k 1 -n -r\n</code></pre></li>\n</ul>\n"},{"title":"Python Celery异步","date":"2017-03-12T05:18:43.000Z","_content":"### 说明\nCelery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好\n\n### 适用场景\n- 可以在 Request-Response 循环之外执行的操作：发送邮件、推送消息\n- 耗时的操作：调用第三方 API（前端通过 AJAX 展示进度和结果）\n- 周期性任务：取代 crontab\n\n### 架构设计\n![](https://ttxsgoto.github.io/img/celery/celery01.png)\nCelery的架构由三部分组成：\n\n    消息中间件（message broker）：Celery本身不提供消息服务是任务调度队列，通常以服务形式出现，可以方便的和第三方提供的消息中间件集成；包括，RabbitMQ, Redis, MongoDB；\n    任务执行单元（worker）：是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中；\n    任务执行结果存储（task result store）：用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache\n\n### 配置启动\n#### 配置\n```\n# 参数配置\n    BROKER_URL = 'redis://127.0.0.1:6379'               # 指定 Broker\n    CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # 指定 Backend\n    CELERY_TIMEZONE = 'Asia/Shanghai'                   # 指定时区，默认是 UTC\n\n    CELERY_IMPORTS = (                                  # 指定导入的任务模块\n    'celery_app.task1',\n    'celery_app.task2'\n)\n    app.config_from_object('celeryconfig')  #将配置导入到celery对象中\n```\n#### 启动\ncelery worker -A tasks --loglevel=info --concurrency=5\n参数”-A”指定了Celery实例的位置，本例是在”tasks.py”中，celery命令会自动在该文件中寻找Celery对象实例。建议指定Celery对象名称，如”-A tasks.app”。\n参数”loglevel”指定了日志等级，也可以不加，默认为warning。也可以使用 -l info来表示\n参数”concurrency”指定最大并发数，默认为CPU核数\ndelay():方法将任务发送到消息队列中，由之前启动worker执行，这时Python控制台上只会返回\"AsyncResult\"信息。如果你看下之前职程的启动窗口，你会看到多了条日志\"Received task: celery_app.task1.add[bec9a333-3af7-43ab-b93d-4a2ae6779058]  ETA:[2017-03-12 12:57:08.630629+08:00]\"\n\"delay()\"方法，它其实是对\"apply_async()\"方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用\"apply_async()\"，其常用的参数有：\n\n    countdown: 指定多少秒后任务才被执行\n    eta: 指定任务被调度的时间，参数类型是datetime\n    expires: 任务过期时间，参数类型可以是int（秒），也可以是datetime\n    retry: 任务发送失败的重试次数\n    priority: 任务优先级，范围是0-9\n    serializer: 参数和返回值的序列化方式\n\nresult = add.delay(2,5)\nresult.ready()  #True,用于检查任务执行是否成功\nresult.get(timeout=1)   #7,get方法用于获取任务结果\n\ndelay() 方法是 apply_async() 方法的简写\napply_async(args=(), kwargs={}, route_name=None, **options)\n这个调用会把 add 操作放入到队列里，然后立即返回一个 AsyncResult 对象\n当函数被@app.task装饰后，就成为可被 Celery 调度的任务\n\n### 应用实例\n#### 异步执行任务\n目录结构：\n```\n- celery_app\n    - __init__.py\n    - celeryconfig.py\n    - init.py\n    - task1.py\n    - task2.py\n    - client.py\n```\nceleryconfig.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nBROKER_URL = 'redis://127.0.0.1:6379'               # 指定 Broker\nCELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # 指定 Backend\nCELERY_TIMEZONE = 'Asia/Shanghai'                   # 指定时区，默认是 UTC\n \nCELERY_IMPORTS = (                                  # 指定导入的任务模块\n    'celery_app.task1',\n    'celery_app.task2'\n)\n```\ninit.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n'''\nDescribe:异步执行\n启动worker进程;每次修改task代码后,需要restart  celery 进程;\ncd /train/celery_demo && celery worker -A celery_app.init --loglevel=INFO\n\n'''python\nfrom celery import Celery\n \nttxsgoto = Celery(\"ttxsgoto\")   #创建一个celery任务\n \nttxsgoto.config_from_object('celery_app.celeryconfig')  #将配置导入到celery对象中\n```\ntask1.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom .init import ttxsgoto\n \n@ttxsgoto.task\ndef add(x, y):\n    time.sleep(5)\n    return x + y\n```\ntask2.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom .init import ttxsgoto\n \n@ttxsgoto.task\ndef multiply(x, y):\n    time.sleep(10)\n    return x * y\n```\nclient.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nimport task1\nimport task2\n \nprint \"异步执行开始:\",time.ctime()\ntask1.add.apply_async(args=(2,8), countdown=5) # 5 秒后执行任务\ntask2.multiply.delay(3,7)\n \nprint \"end!!!!!\"\nprint time.ctime()\n```\n启动celery并服务，并执行client.py脚本\n```\ncelery worker -A celery_app.init  -l info\npython client.py\n```\n#### 周期执行任务\n目录结构：\n```\n- celery_app_cron\n    - __init__.py\n    - celeryconfig.py\n    - init.py\n    - task1.py\n    - task2.py\n```\nceleryconfig.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nfrom datetime import timedelta\nfrom celery.schedules import crontab\nfrom celery import Celery\n \nBROKER_URL = 'redis://127.0.0.1:6379'               # 指定 Broker\nCELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # 指定 Backend\nCELERY_TIMEZONE = 'Asia/Shanghai'                   # 指定时区，默认是 UTC\n \nCELERY_IMPORTS = (                                  # 指定导入的任务模块\n    'celery_app_cron.task1',\n    'celery_app_cron.task2'\n)\n \n#ttxsgoto = Celery(\"cron\",broker= BROKER_URL, backend= CELERY_RESULT_BACKEND)\n \n#定时任务设置\nCELERYBEAT_SCHEDULE = {\n    'add-every-30s':{\n        'task':'celery_app_cron.task1.add',         #任务执行的函数\n        'schedule':timedelta(seconds=30),           # 每30s执行一次\n        'args':(3,12)                                # 任务函数参数\n    },\n\n    'multiply-erverday-7-10':{\n        'task':'celery_app_cron.task2.multiply',\n        #'schedule':crontab(hour=7,minute=10),      #cron计划任务,每天7:10进行\n        'args':(3,15)\n    }\n}\n```\ninit.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n'''\nDescribe:定时任务\n启动worker进程;每次修改task代码后,需要restart  celery 进程;\ncd /train/celery_demo && celery -A celery_app_cron.init worker --loglevel=INFO\ncd /train/celery_demo && celery -A celery_app_cron.init beat\n放在一起执行:\ncd /train/celery_demo && celery -B -A celery_app_cron.init worker --loglevel=INFO\n'''\nfrom celery import Celery\n \nttxsgoto = Celery(\"cron\")\nttxsgoto.config_from_object('celery_app_cron.celeryconfig')\n```\ntask1.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom .init import ttxsgoto\n \n@ttxsgoto.task\ndef add(x, y):\n    time.sleep(5)\n    return x + y\n```\ntask2.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom init import ttxsgoto\n \n@ttxsgoto.task\ndef multiply(x, y):\n    time.sleep(10)\n    return x * y\n```\n启动celery服务，可以看到执行结果，30s运行一次task1.add\n```\ncelery worker beat -A celery_app_cron.init -l info\n```","source":"_posts/celery.md","raw":"---\ntitle: Python Celery异步\ndate: 2017-03-12 13:18:43\ntags:\n  - Celery\ncategories:\n  - python\n---\n### 说明\nCelery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好\n\n### 适用场景\n- 可以在 Request-Response 循环之外执行的操作：发送邮件、推送消息\n- 耗时的操作：调用第三方 API（前端通过 AJAX 展示进度和结果）\n- 周期性任务：取代 crontab\n\n### 架构设计\n![](https://ttxsgoto.github.io/img/celery/celery01.png)\nCelery的架构由三部分组成：\n\n    消息中间件（message broker）：Celery本身不提供消息服务是任务调度队列，通常以服务形式出现，可以方便的和第三方提供的消息中间件集成；包括，RabbitMQ, Redis, MongoDB；\n    任务执行单元（worker）：是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中；\n    任务执行结果存储（task result store）：用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache\n\n### 配置启动\n#### 配置\n```\n# 参数配置\n    BROKER_URL = 'redis://127.0.0.1:6379'               # 指定 Broker\n    CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # 指定 Backend\n    CELERY_TIMEZONE = 'Asia/Shanghai'                   # 指定时区，默认是 UTC\n\n    CELERY_IMPORTS = (                                  # 指定导入的任务模块\n    'celery_app.task1',\n    'celery_app.task2'\n)\n    app.config_from_object('celeryconfig')  #将配置导入到celery对象中\n```\n#### 启动\ncelery worker -A tasks --loglevel=info --concurrency=5\n参数”-A”指定了Celery实例的位置，本例是在”tasks.py”中，celery命令会自动在该文件中寻找Celery对象实例。建议指定Celery对象名称，如”-A tasks.app”。\n参数”loglevel”指定了日志等级，也可以不加，默认为warning。也可以使用 -l info来表示\n参数”concurrency”指定最大并发数，默认为CPU核数\ndelay():方法将任务发送到消息队列中，由之前启动worker执行，这时Python控制台上只会返回\"AsyncResult\"信息。如果你看下之前职程的启动窗口，你会看到多了条日志\"Received task: celery_app.task1.add[bec9a333-3af7-43ab-b93d-4a2ae6779058]  ETA:[2017-03-12 12:57:08.630629+08:00]\"\n\"delay()\"方法，它其实是对\"apply_async()\"方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用\"apply_async()\"，其常用的参数有：\n\n    countdown: 指定多少秒后任务才被执行\n    eta: 指定任务被调度的时间，参数类型是datetime\n    expires: 任务过期时间，参数类型可以是int（秒），也可以是datetime\n    retry: 任务发送失败的重试次数\n    priority: 任务优先级，范围是0-9\n    serializer: 参数和返回值的序列化方式\n\nresult = add.delay(2,5)\nresult.ready()  #True,用于检查任务执行是否成功\nresult.get(timeout=1)   #7,get方法用于获取任务结果\n\ndelay() 方法是 apply_async() 方法的简写\napply_async(args=(), kwargs={}, route_name=None, **options)\n这个调用会把 add 操作放入到队列里，然后立即返回一个 AsyncResult 对象\n当函数被@app.task装饰后，就成为可被 Celery 调度的任务\n\n### 应用实例\n#### 异步执行任务\n目录结构：\n```\n- celery_app\n    - __init__.py\n    - celeryconfig.py\n    - init.py\n    - task1.py\n    - task2.py\n    - client.py\n```\nceleryconfig.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nBROKER_URL = 'redis://127.0.0.1:6379'               # 指定 Broker\nCELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # 指定 Backend\nCELERY_TIMEZONE = 'Asia/Shanghai'                   # 指定时区，默认是 UTC\n \nCELERY_IMPORTS = (                                  # 指定导入的任务模块\n    'celery_app.task1',\n    'celery_app.task2'\n)\n```\ninit.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n'''\nDescribe:异步执行\n启动worker进程;每次修改task代码后,需要restart  celery 进程;\ncd /train/celery_demo && celery worker -A celery_app.init --loglevel=INFO\n\n'''python\nfrom celery import Celery\n \nttxsgoto = Celery(\"ttxsgoto\")   #创建一个celery任务\n \nttxsgoto.config_from_object('celery_app.celeryconfig')  #将配置导入到celery对象中\n```\ntask1.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom .init import ttxsgoto\n \n@ttxsgoto.task\ndef add(x, y):\n    time.sleep(5)\n    return x + y\n```\ntask2.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom .init import ttxsgoto\n \n@ttxsgoto.task\ndef multiply(x, y):\n    time.sleep(10)\n    return x * y\n```\nclient.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nimport task1\nimport task2\n \nprint \"异步执行开始:\",time.ctime()\ntask1.add.apply_async(args=(2,8), countdown=5) # 5 秒后执行任务\ntask2.multiply.delay(3,7)\n \nprint \"end!!!!!\"\nprint time.ctime()\n```\n启动celery并服务，并执行client.py脚本\n```\ncelery worker -A celery_app.init  -l info\npython client.py\n```\n#### 周期执行任务\n目录结构：\n```\n- celery_app_cron\n    - __init__.py\n    - celeryconfig.py\n    - init.py\n    - task1.py\n    - task2.py\n```\nceleryconfig.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nfrom datetime import timedelta\nfrom celery.schedules import crontab\nfrom celery import Celery\n \nBROKER_URL = 'redis://127.0.0.1:6379'               # 指定 Broker\nCELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # 指定 Backend\nCELERY_TIMEZONE = 'Asia/Shanghai'                   # 指定时区，默认是 UTC\n \nCELERY_IMPORTS = (                                  # 指定导入的任务模块\n    'celery_app_cron.task1',\n    'celery_app_cron.task2'\n)\n \n#ttxsgoto = Celery(\"cron\",broker= BROKER_URL, backend= CELERY_RESULT_BACKEND)\n \n#定时任务设置\nCELERYBEAT_SCHEDULE = {\n    'add-every-30s':{\n        'task':'celery_app_cron.task1.add',         #任务执行的函数\n        'schedule':timedelta(seconds=30),           # 每30s执行一次\n        'args':(3,12)                                # 任务函数参数\n    },\n\n    'multiply-erverday-7-10':{\n        'task':'celery_app_cron.task2.multiply',\n        #'schedule':crontab(hour=7,minute=10),      #cron计划任务,每天7:10进行\n        'args':(3,15)\n    }\n}\n```\ninit.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n'''\nDescribe:定时任务\n启动worker进程;每次修改task代码后,需要restart  celery 进程;\ncd /train/celery_demo && celery -A celery_app_cron.init worker --loglevel=INFO\ncd /train/celery_demo && celery -A celery_app_cron.init beat\n放在一起执行:\ncd /train/celery_demo && celery -B -A celery_app_cron.init worker --loglevel=INFO\n'''\nfrom celery import Celery\n \nttxsgoto = Celery(\"cron\")\nttxsgoto.config_from_object('celery_app_cron.celeryconfig')\n```\ntask1.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom .init import ttxsgoto\n \n@ttxsgoto.task\ndef add(x, y):\n    time.sleep(5)\n    return x + y\n```\ntask2.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nimport time\nfrom init import ttxsgoto\n \n@ttxsgoto.task\ndef multiply(x, y):\n    time.sleep(10)\n    return x * y\n```\n启动celery服务，可以看到执行结果，30s运行一次task1.add\n```\ncelery worker beat -A celery_app_cron.init -l info\n```","slug":"celery","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5v9000zct8u30iqr30k","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>可以在 Request-Response 循环之外执行的操作：发送邮件、推送消息</li>\n<li>耗时的操作：调用第三方 API（前端通过 AJAX 展示进度和结果）</li>\n<li>周期性任务：取代 crontab</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p><img src=\"https://ttxsgoto.github.io/img/celery/celery01.png\" alt=\"\"><br>Celery的架构由三部分组成：</p>\n<pre><code>消息中间件（message broker）：Celery本身不提供消息服务是任务调度队列，通常以服务形式出现，可以方便的和第三方提供的消息中间件集成；包括，RabbitMQ, Redis, MongoDB；\n任务执行单元（worker）：是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中；\n任务执行结果存储（task result store）：用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache\n</code></pre><h3 id=\"配置启动\"><a href=\"#配置启动\" class=\"headerlink\" title=\"配置启动\"></a>配置启动</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 参数配置</div><div class=\"line\">    BROKER_URL = &apos;redis://127.0.0.1:6379&apos;               # 指定 Broker</div><div class=\"line\">    CELERY_RESULT_BACKEND = &apos;redis://127.0.0.1:6379/0&apos;  # 指定 Backend</div><div class=\"line\">    CELERY_TIMEZONE = &apos;Asia/Shanghai&apos;                   # 指定时区，默认是 UTC</div><div class=\"line\"></div><div class=\"line\">    CELERY_IMPORTS = (                                  # 指定导入的任务模块</div><div class=\"line\">    &apos;celery_app.task1&apos;,</div><div class=\"line\">    &apos;celery_app.task2&apos;</div><div class=\"line\">)</div><div class=\"line\">    app.config_from_object(&apos;celeryconfig&apos;)  #将配置导入到celery对象中</div></pre></td></tr></table></figure>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><p>celery worker -A tasks –loglevel=info –concurrency=5<br>参数”-A”指定了Celery实例的位置，本例是在”tasks.py”中，celery命令会自动在该文件中寻找Celery对象实例。建议指定Celery对象名称，如”-A tasks.app”。<br>参数”loglevel”指定了日志等级，也可以不加，默认为warning。也可以使用 -l info来表示<br>参数”concurrency”指定最大并发数，默认为CPU核数<br>delay():方法将任务发送到消息队列中，由之前启动worker执行，这时Python控制台上只会返回”AsyncResult”信息。如果你看下之前职程的启动窗口，你会看到多了条日志”Received task: celery_app.task1.add[bec9a333-3af7-43ab-b93d-4a2ae6779058]  ETA:[2017-03-12 12:57:08.630629+08:00]”<br>“delay()”方法，它其实是对”apply_async()”方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用”apply_async()”，其常用的参数有：</p>\n<pre><code>countdown: 指定多少秒后任务才被执行\neta: 指定任务被调度的时间，参数类型是datetime\nexpires: 任务过期时间，参数类型可以是int（秒），也可以是datetime\nretry: 任务发送失败的重试次数\npriority: 任务优先级，范围是0-9\nserializer: 参数和返回值的序列化方式\n</code></pre><p>result = add.delay(2,5)<br>result.ready()  #True,用于检查任务执行是否成功<br>result.get(timeout=1)   #7,get方法用于获取任务结果</p>\n<p>delay() 方法是 apply_async() 方法的简写<br>apply_async(args=(), kwargs={}, route_name=None, **options)<br>这个调用会把 add 操作放入到队列里，然后立即返回一个 AsyncResult 对象<br>当函数被@app.task装饰后，就成为可被 Celery 调度的任务</p>\n<h3 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h3><h4 id=\"异步执行任务\"><a href=\"#异步执行任务\" class=\"headerlink\" title=\"异步执行任务\"></a>异步执行任务</h4><p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- celery_app</div><div class=\"line\">    - __init__.py</div><div class=\"line\">    - celeryconfig.py</div><div class=\"line\">    - init.py</div><div class=\"line\">    - task1.py</div><div class=\"line\">    - task2.py</div><div class=\"line\">    - client.py</div></pre></td></tr></table></figure></p>\n<p>celeryconfig.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\">BROKER_URL = <span class=\"string\">'redis://127.0.0.1:6379'</span>               <span class=\"comment\"># 指定 Broker</span></div><div class=\"line\">CELERY_RESULT_BACKEND = <span class=\"string\">'redis://127.0.0.1:6379/0'</span>  <span class=\"comment\"># 指定 Backend</span></div><div class=\"line\">CELERY_TIMEZONE = <span class=\"string\">'Asia/Shanghai'</span>                   <span class=\"comment\"># 指定时区，默认是 UTC</span></div><div class=\"line\"> </div><div class=\"line\">CELERY_IMPORTS = (                                  <span class=\"comment\"># 指定导入的任务模块</span></div><div class=\"line\">    <span class=\"string\">'celery_app.task1'</span>,</div><div class=\"line\">    <span class=\"string\">'celery_app.task2'</span></div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>init.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">Describe:异步执行</div><div class=\"line\">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery worker -A celery_app.init --loglevel=INFO</div><div class=\"line\"></div><div class=\"line\">'''python</div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"> </div><div class=\"line\">ttxsgoto = Celery(<span class=\"string\">\"ttxsgoto\"</span>)   <span class=\"comment\">#创建一个celery任务</span></div><div class=\"line\"> </div><div class=\"line\">ttxsgoto.config_from_object(<span class=\"string\">'celery_app.celeryconfig'</span>)  <span class=\"comment\">#将配置导入到celery对象中</span></div></pre></td></tr></table></figure></p>\n<p>task1.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> .init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div></pre></td></tr></table></figure></p>\n<p>task2.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> .init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x * y</div></pre></td></tr></table></figure></p>\n<p>client.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> task1</div><div class=\"line\"><span class=\"keyword\">import</span> task2</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"异步执行开始:\"</span>,time.ctime()</div><div class=\"line\">task1.add.apply_async(args=(<span class=\"number\">2</span>,<span class=\"number\">8</span>), countdown=<span class=\"number\">5</span>) <span class=\"comment\"># 5 秒后执行任务</span></div><div class=\"line\">task2.multiply.delay(<span class=\"number\">3</span>,<span class=\"number\">7</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"end!!!!!\"</span></div><div class=\"line\"><span class=\"keyword\">print</span> time.ctime()</div></pre></td></tr></table></figure></p>\n<p>启动celery并服务，并执行client.py脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">celery worker -A celery_app.init  -l info</div><div class=\"line\">python client.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"周期执行任务\"><a href=\"#周期执行任务\" class=\"headerlink\" title=\"周期执行任务\"></a>周期执行任务</h4><p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- celery_app_cron</div><div class=\"line\">    - __init__.py</div><div class=\"line\">    - celeryconfig.py</div><div class=\"line\">    - init.py</div><div class=\"line\">    - task1.py</div><div class=\"line\">    - task2.py</div></pre></td></tr></table></figure></p>\n<p>celeryconfig.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</div><div class=\"line\"><span class=\"keyword\">from</span> celery.schedules <span class=\"keyword\">import</span> crontab</div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"> </div><div class=\"line\">BROKER_URL = <span class=\"string\">'redis://127.0.0.1:6379'</span>               <span class=\"comment\"># 指定 Broker</span></div><div class=\"line\">CELERY_RESULT_BACKEND = <span class=\"string\">'redis://127.0.0.1:6379/0'</span>  <span class=\"comment\"># 指定 Backend</span></div><div class=\"line\">CELERY_TIMEZONE = <span class=\"string\">'Asia/Shanghai'</span>                   <span class=\"comment\"># 指定时区，默认是 UTC</span></div><div class=\"line\"> </div><div class=\"line\">CELERY_IMPORTS = (                                  <span class=\"comment\"># 指定导入的任务模块</span></div><div class=\"line\">    <span class=\"string\">'celery_app_cron.task1'</span>,</div><div class=\"line\">    <span class=\"string\">'celery_app_cron.task2'</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#ttxsgoto = Celery(\"cron\",broker= BROKER_URL, backend= CELERY_RESULT_BACKEND)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#定时任务设置</span></div><div class=\"line\">CELERYBEAT_SCHEDULE = &#123;</div><div class=\"line\">    <span class=\"string\">'add-every-30s'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'task'</span>:<span class=\"string\">'celery_app_cron.task1.add'</span>,         <span class=\"comment\">#任务执行的函数</span></div><div class=\"line\">        <span class=\"string\">'schedule'</span>:timedelta(seconds=<span class=\"number\">30</span>),           <span class=\"comment\"># 每30s执行一次</span></div><div class=\"line\">        <span class=\"string\">'args'</span>:(<span class=\"number\">3</span>,<span class=\"number\">12</span>)                                <span class=\"comment\"># 任务函数参数</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'multiply-erverday-7-10'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'task'</span>:<span class=\"string\">'celery_app_cron.task2.multiply'</span>,</div><div class=\"line\">        <span class=\"comment\">#'schedule':crontab(hour=7,minute=10),      #cron计划任务,每天7:10进行</span></div><div class=\"line\">        <span class=\"string\">'args'</span>:(<span class=\"number\">3</span>,<span class=\"number\">15</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>init.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">Describe:定时任务</div><div class=\"line\">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init worker --loglevel=INFO</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init beat</div><div class=\"line\">放在一起执行:</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery -B -A celery_app_cron.init worker --loglevel=INFO</div><div class=\"line\">'''</div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"> </div><div class=\"line\">ttxsgoto = Celery(<span class=\"string\">\"cron\"</span>)</div><div class=\"line\">ttxsgoto.config_from_object(<span class=\"string\">'celery_app_cron.celeryconfig'</span>)</div></pre></td></tr></table></figure></p>\n<p>task1.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> .init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div></pre></td></tr></table></figure></p>\n<p>task2.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x * y</div></pre></td></tr></table></figure></p>\n<p>启动celery服务，可以看到执行结果，30s运行一次task1.add<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">celery worker beat -A celery_app_cron.init -l info</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>Celery是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，同时对调度的支持也很好</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>可以在 Request-Response 循环之外执行的操作：发送邮件、推送消息</li>\n<li>耗时的操作：调用第三方 API（前端通过 AJAX 展示进度和结果）</li>\n<li>周期性任务：取代 crontab</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p><img src=\"https://ttxsgoto.github.io/img/celery/celery01.png\" alt=\"\"><br>Celery的架构由三部分组成：</p>\n<pre><code>消息中间件（message broker）：Celery本身不提供消息服务是任务调度队列，通常以服务形式出现，可以方便的和第三方提供的消息中间件集成；包括，RabbitMQ, Redis, MongoDB；\n任务执行单元（worker）：是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中；\n任务执行结果存储（task result store）：用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache\n</code></pre><h3 id=\"配置启动\"><a href=\"#配置启动\" class=\"headerlink\" title=\"配置启动\"></a>配置启动</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 参数配置</div><div class=\"line\">    BROKER_URL = &apos;redis://127.0.0.1:6379&apos;               # 指定 Broker</div><div class=\"line\">    CELERY_RESULT_BACKEND = &apos;redis://127.0.0.1:6379/0&apos;  # 指定 Backend</div><div class=\"line\">    CELERY_TIMEZONE = &apos;Asia/Shanghai&apos;                   # 指定时区，默认是 UTC</div><div class=\"line\"></div><div class=\"line\">    CELERY_IMPORTS = (                                  # 指定导入的任务模块</div><div class=\"line\">    &apos;celery_app.task1&apos;,</div><div class=\"line\">    &apos;celery_app.task2&apos;</div><div class=\"line\">)</div><div class=\"line\">    app.config_from_object(&apos;celeryconfig&apos;)  #将配置导入到celery对象中</div></pre></td></tr></table></figure>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><p>celery worker -A tasks –loglevel=info –concurrency=5<br>参数”-A”指定了Celery实例的位置，本例是在”tasks.py”中，celery命令会自动在该文件中寻找Celery对象实例。建议指定Celery对象名称，如”-A tasks.app”。<br>参数”loglevel”指定了日志等级，也可以不加，默认为warning。也可以使用 -l info来表示<br>参数”concurrency”指定最大并发数，默认为CPU核数<br>delay():方法将任务发送到消息队列中，由之前启动worker执行，这时Python控制台上只会返回”AsyncResult”信息。如果你看下之前职程的启动窗口，你会看到多了条日志”Received task: celery_app.task1.add[bec9a333-3af7-43ab-b93d-4a2ae6779058]  ETA:[2017-03-12 12:57:08.630629+08:00]”<br>“delay()”方法，它其实是对”apply_async()”方法的封装，使得你只要传入任务所需的参数即可。对于特殊的任务调度需求，你需要使用”apply_async()”，其常用的参数有：</p>\n<pre><code>countdown: 指定多少秒后任务才被执行\neta: 指定任务被调度的时间，参数类型是datetime\nexpires: 任务过期时间，参数类型可以是int（秒），也可以是datetime\nretry: 任务发送失败的重试次数\npriority: 任务优先级，范围是0-9\nserializer: 参数和返回值的序列化方式\n</code></pre><p>result = add.delay(2,5)<br>result.ready()  #True,用于检查任务执行是否成功<br>result.get(timeout=1)   #7,get方法用于获取任务结果</p>\n<p>delay() 方法是 apply_async() 方法的简写<br>apply_async(args=(), kwargs={}, route_name=None, **options)<br>这个调用会把 add 操作放入到队列里，然后立即返回一个 AsyncResult 对象<br>当函数被@app.task装饰后，就成为可被 Celery 调度的任务</p>\n<h3 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h3><h4 id=\"异步执行任务\"><a href=\"#异步执行任务\" class=\"headerlink\" title=\"异步执行任务\"></a>异步执行任务</h4><p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- celery_app</div><div class=\"line\">    - __init__.py</div><div class=\"line\">    - celeryconfig.py</div><div class=\"line\">    - init.py</div><div class=\"line\">    - task1.py</div><div class=\"line\">    - task2.py</div><div class=\"line\">    - client.py</div></pre></td></tr></table></figure></p>\n<p>celeryconfig.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\">BROKER_URL = <span class=\"string\">'redis://127.0.0.1:6379'</span>               <span class=\"comment\"># 指定 Broker</span></div><div class=\"line\">CELERY_RESULT_BACKEND = <span class=\"string\">'redis://127.0.0.1:6379/0'</span>  <span class=\"comment\"># 指定 Backend</span></div><div class=\"line\">CELERY_TIMEZONE = <span class=\"string\">'Asia/Shanghai'</span>                   <span class=\"comment\"># 指定时区，默认是 UTC</span></div><div class=\"line\"> </div><div class=\"line\">CELERY_IMPORTS = (                                  <span class=\"comment\"># 指定导入的任务模块</span></div><div class=\"line\">    <span class=\"string\">'celery_app.task1'</span>,</div><div class=\"line\">    <span class=\"string\">'celery_app.task2'</span></div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>init.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">Describe:异步执行</div><div class=\"line\">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery worker -A celery_app.init --loglevel=INFO</div><div class=\"line\"></div><div class=\"line\">'''</span>python</div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"> </div><div class=\"line\">ttxsgoto = Celery(<span class=\"string\">\"ttxsgoto\"</span>)   <span class=\"comment\">#创建一个celery任务</span></div><div class=\"line\"> </div><div class=\"line\">ttxsgoto.config_from_object(<span class=\"string\">'celery_app.celeryconfig'</span>)  <span class=\"comment\">#将配置导入到celery对象中</span></div></pre></td></tr></table></figure></p>\n<p>task1.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> .init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div></pre></td></tr></table></figure></p>\n<p>task2.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> .init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x * y</div></pre></td></tr></table></figure></p>\n<p>client.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> task1</div><div class=\"line\"><span class=\"keyword\">import</span> task2</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"异步执行开始:\"</span>,time.ctime()</div><div class=\"line\">task1.add.apply_async(args=(<span class=\"number\">2</span>,<span class=\"number\">8</span>), countdown=<span class=\"number\">5</span>) <span class=\"comment\"># 5 秒后执行任务</span></div><div class=\"line\">task2.multiply.delay(<span class=\"number\">3</span>,<span class=\"number\">7</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"end!!!!!\"</span></div><div class=\"line\"><span class=\"keyword\">print</span> time.ctime()</div></pre></td></tr></table></figure></p>\n<p>启动celery并服务，并执行client.py脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">celery worker -A celery_app.init  -l info</div><div class=\"line\">python client.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"周期执行任务\"><a href=\"#周期执行任务\" class=\"headerlink\" title=\"周期执行任务\"></a>周期执行任务</h4><p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- celery_app_cron</div><div class=\"line\">    - __init__.py</div><div class=\"line\">    - celeryconfig.py</div><div class=\"line\">    - init.py</div><div class=\"line\">    - task1.py</div><div class=\"line\">    - task2.py</div></pre></td></tr></table></figure></p>\n<p>celeryconfig.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</div><div class=\"line\"><span class=\"keyword\">from</span> celery.schedules <span class=\"keyword\">import</span> crontab</div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"> </div><div class=\"line\">BROKER_URL = <span class=\"string\">'redis://127.0.0.1:6379'</span>               <span class=\"comment\"># 指定 Broker</span></div><div class=\"line\">CELERY_RESULT_BACKEND = <span class=\"string\">'redis://127.0.0.1:6379/0'</span>  <span class=\"comment\"># 指定 Backend</span></div><div class=\"line\">CELERY_TIMEZONE = <span class=\"string\">'Asia/Shanghai'</span>                   <span class=\"comment\"># 指定时区，默认是 UTC</span></div><div class=\"line\"> </div><div class=\"line\">CELERY_IMPORTS = (                                  <span class=\"comment\"># 指定导入的任务模块</span></div><div class=\"line\">    <span class=\"string\">'celery_app_cron.task1'</span>,</div><div class=\"line\">    <span class=\"string\">'celery_app_cron.task2'</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#ttxsgoto = Celery(\"cron\",broker= BROKER_URL, backend= CELERY_RESULT_BACKEND)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#定时任务设置</span></div><div class=\"line\">CELERYBEAT_SCHEDULE = &#123;</div><div class=\"line\">    <span class=\"string\">'add-every-30s'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'task'</span>:<span class=\"string\">'celery_app_cron.task1.add'</span>,         <span class=\"comment\">#任务执行的函数</span></div><div class=\"line\">        <span class=\"string\">'schedule'</span>:timedelta(seconds=<span class=\"number\">30</span>),           <span class=\"comment\"># 每30s执行一次</span></div><div class=\"line\">        <span class=\"string\">'args'</span>:(<span class=\"number\">3</span>,<span class=\"number\">12</span>)                                <span class=\"comment\"># 任务函数参数</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'multiply-erverday-7-10'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'task'</span>:<span class=\"string\">'celery_app_cron.task2.multiply'</span>,</div><div class=\"line\">        <span class=\"comment\">#'schedule':crontab(hour=7,minute=10),      #cron计划任务,每天7:10进行</span></div><div class=\"line\">        <span class=\"string\">'args'</span>:(<span class=\"number\">3</span>,<span class=\"number\">15</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>init.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">Describe:定时任务</div><div class=\"line\">启动worker进程;每次修改task代码后,需要restart  celery 进程;</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init worker --loglevel=INFO</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery -A celery_app_cron.init beat</div><div class=\"line\">放在一起执行:</div><div class=\"line\">cd /train/celery_demo &amp;&amp; celery -B -A celery_app_cron.init worker --loglevel=INFO</div><div class=\"line\">'''</span></div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"> </div><div class=\"line\">ttxsgoto = Celery(<span class=\"string\">\"cron\"</span>)</div><div class=\"line\">ttxsgoto.config_from_object(<span class=\"string\">'celery_app_cron.celeryconfig'</span>)</div></pre></td></tr></table></figure></p>\n<p>task1.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> .init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div></pre></td></tr></table></figure></p>\n<p>task2.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> init <span class=\"keyword\">import</span> ttxsgoto</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@ttxsgoto.task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> x * y</div></pre></td></tr></table></figure></p>\n<p>启动celery服务，可以看到执行结果，30s运行一次task1.add<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">celery worker beat -A celery_app_cron.init -l info</div></pre></td></tr></table></figure></p>\n"},{"title":"Python Class","date":"2017-02-15T12:40:38.000Z","_content":"### 相关概念\n---\n类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板\n对象：是类的一个实例，如大客车；则是一个一个具体的对象，各个实例拥有的数据相互独立，互不影响\n范例说明：汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来\n\n方法：人会走，会思考，定义一个类的各个功能,类中定义的函数\n数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据\n消息传递：狗叫了，人听见了，就叫通信\n\n继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）,狗都四条腿走路\n封装：人不能引用狗的特性，比如四条腿走路\n多态性：一个叫的功能，可能是低吼，也也可能是大声叫\n抽象性：简单复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义\n类方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写\n\n静态字段：在class中直接定义的字段，直接通过class去获取，也可通过实例来访问，如 value = \"abc\"\n动态字段：在class中对象中定义的字段，通过class的实例来访问，不能通过class直接访问，如在init函数后定义的字段\n静态方法：在类中直接定义，没有self参数，同时使用staticmethod装饰器装饰，访问时直接通过class访问\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass Person(object):\n    name = \"静态字段\"\n    def __init__(self,name,age):\n        self.Name = name\n        self.Age = age\n    def run(self):\n        print self.Name + \"正在跑步\"\n    @staticmethod\n    def run1():\n        print \"静态方法\"\n    @classmethod\n    def run2(cls):\n        print \"类方法\"\n    @property    #转换为特性，直接以属性的形式访问\n    def Bar(self):\n        print self.Name\n\nperson1 = Person('人1',20)\n# 访问动态字段\nprint person1.Name\n# 访问动态方法\nperson1.run()\n# 访问静态字段\nprint Person.name\n# 访问静态方法\nPerson.run1()\n# 调用类方法\nPerson.run2()\n# property的访问形式,直接以属性的形式访问\nperson1.Bar\n```\n---\n### 装饰器\n@staticmethod ：类中的静态方法设置\n@classmethod：类方法设置\n@property ：将类中的方法转换为特性，直接以属性的形式访问\n\n@staticmethod和@classmethod的作用与区别：\n```\n@staticmethod和@classmethod都可以直接类名.方法名(),实例名.方法名()调用\n@staticmethod不需要表示自身对象的self和自身类的cls参数，和使用函数一样\n@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数\n```\n\npython类的定义：\n\n    使用class关键字定义一个类，并且类名的首字母要大写\n    当程序员需要创建的类型不能用简单类型表示时就需要创建类\n    类把需要的变量和函数组合在一起，这种包含也称之为“封装”\n\n对象的创建：\n创建对象的过程称之为实例化；当一个对象被创建后，包括三个方面的特性： 对象的句柄，属性和方法\n句柄：用来区分不同的对象，如a，b\n对象的属性和方法与类中的成员变量和成员函数对应\n\n---\n### 类的属性\n类由属性和方法组成，类的属性是对数据的封装，类的方法则是对类的行为的封装。类的属性按使用范围分为公有属性和私有属性，类的属性范围取决于属性的名称\n公有属性：所谓公有属性就是在类中和类外调用的属性\n私有属性：不能被类以外的函数调用（可以通过instance._classname_attribute方式访问，但只用于调试程序）\n定义方式：以“\\__”双下划线开始的成员变量就是私有属性，否则是公有属性\n私有属性通过内部方法调用，实现对数据的封装隐藏。\n内置属性：由系统在定义类的时候默认添加的，由前后两个下划线构成__dict__，__module__\n\n---\n### 类的方法\n和函数定义一样，但是需要self作为第一个参数\n类的方法也分为：公有方法和私有方法\n    私有方法：不能被外部的类和方法调用，私有方法的定义和私有属性都是一样的，在方法的前面加上“__”双下划线\n    类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用（是继承的关系）\n    静态方法：相当与“全局函数”，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义静态方法没有“self”语句；\n    用于区分函数和类的方法（必须有一个self），self参数表示指向对象本身\n\n\n内部类：\n    所谓内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界;\n    一般不赞同使用内部类，会使程序结构复杂，但是理解内部类有助于理解模块的调用\n\n---\n### 构造函数与析构函数\n构造函数：用于初始化类的内部状态，python提供的构造函数是__init__();\n__init__()方法是可选的，如果不提供，python会给出一个默认的__init__方法\n__init__(self,name,score):  用于定义初始化类的属性，在实例时，可以将相关属性的值定义好\n一般对数据的获取需要自定义的get和set方法\n\n析构函数：用于释放对象占用的资源，python提供的析构函数是__del__();\n__del__()也是可选的，如果不提供，则python会在后台提供默认析构函数\n如果要显式的调用析够函数，可以使用del关键字，方式如下：  del  对象名\n\n__call__()方法：通过实例化后，直接使用person1()来执行call方法\n\n__str__()方法：通过实例化后，直接print person1 就可以显示str中返回的内容\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass Person(object):\n    def __init__(self,name,age):\n        self.Name = name\n        self.Age = age\n    def run(self):\n        print self.Name + \"正在跑步\"\n\n    def __del__(self):\n        print \"解释器要销毁了\"\n\n    def __call__(self):\n        print \"这是call方法\"\nperson1 = Person('人1',20)\nperson1()    #可以通过实例化后，添加括号直接执行call方法\nperson1.run()\n```\n---\n### 类的特殊成员\n```\n__doc__\t   类的描述信息，print Foo.__doc__\n__module__ 当前操作的对象在那个模块，f = Foo();print f.__module__  # 输出__main__，即：输出模块\n__class__  当前操作的对象的类是什么，f = Foo();print f.__class__   # 输出<class '__main__.Foo'>，即：输出类\n__init__   构造方法，通过类创建对象时，自动触发执行\n__del__\t   析构方法，当对象在内存中被释放时，自动触发执行\n__call__   对象后面加括号，触发执行；f = Foo(); f()或者 Foo()() 执行__call__方法\n__dict__   类或对象中的所有成员;\tf = Foo();print Foo.__dict__,print f.__dict__\n__str__\t   默认输出该方法的返回值;  f = Foo();print f\n__getitem__  用于索引操作，如字典以,表示获取\n__setitem__\t 用于索引操作，如字典以,表示设置\n__delitem__  用于索引操作，如字典以,表示删除\n__iter__   用于迭代器，之所以列表、字典、元组可以进行for循环，因为类型内部定义了__iter__\n__new__    在__init__之前被调用的特殊方法,用来创建对象并返回之的方法\n```\n\n---\n### 垃圾回收机制\n    python采用垃圾回收机制来清理不再使用的对象；python提供gc模块释放不再使用的对象python采用“引用计数”的算法方式来处理回收，即：当某个对象在其作用域内不再被其他对象引用的时候，python会自动清除对象； \n    python的函数collect()可以一次性收集所有待处理的对象（gc.collect()）\n\n---\n### 类的继承，多继承\n我们定义一个class时，可以从某个现有的class继承，新的class称之为子类（Subclass），而被继承的class的class称之为父类（Base class）。\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass Father(object):\n    def __init__(self):\n        self.Fname =\"father\"\n    def Func(self):\n        print \"Father func \"\n    def run(self):\n        print \"Father func_public\"\nclass Son(Father):\n    def __init__(self):\n        self.Sname = \"son\"\n    def Bar(self):\n        print \"Son bar_function\"\n    def run(self): #重写父类的方法\n        Father.run(self)\n        print \"xxxxxxxxxx\"\n\ns1 = Son()\ns1.Func()\ns1.run()\n```\n### 多继承\n```python\nclass A(object):\n    def __init__(self):\n        print \"A class\"\n    def run(self):\n        print \"THis is A run Function\"\nclass B(A):\n    def __init__(self):\n        print \"B class\"\n    def run(self):\n        print \"This is B run Function\"\nclass C(A):\n    def __init__(self):\n        print \"C class\"\n    def run(self):\n        print \"This is C run Function\"\nclass D(B,C):\n    def __init__(self):\n        print \"D class\"\n\nc = D()\nc.run()\n```\n\n在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以看着是父类的类型；但是反过来不行\n```python\n#!/usr/bin/env python\n#coding:utf8\n\nclass SchoolMember(object):#基类\n\tdef __init__(self,name,age,sex):\n    \tself.name=name\n\t\tself.age=age\n\t\tself.sex=sex\n\tdef tell(self):\n    \tprint \"\"\"--info of %s----\n        \tname:%s\n\t\t\tage:%s\n            sex:%s\n            \"\"\" %(self.name,self.name,self.age,self.sex)\nclass School(object):\n\tdef __init__(self,name,addr,tel):\n    \tself.school_name=name\n        self.addr=addr\n        self.tel=tel\n        self.stu_list=[]\n        self.tech_list=[]\nclass Student(SchoolMember,School):#子类，继承，多继承\n\tdef __init__(self,name,age,sex,grade,school):\n    \tSchoolMember.__init__(self,name,age,sex)#初始化基类变量\n\t\tself.grade=grade\n\t\tself.school=school\n    def pay_money(self):\n\t\tprint \"-----%s is paying the tuition fee----\" %(self.name)\n\tdef tell(self):\n\t\tSchoolMember.tell(self)\n\t\tprint \"---------from school name : ---------%s\" %(self.school.school_name)\n\nschool1 = School('AAAA','AAAA',999)\nschool2 = School('BBBB','BBBB',999)\ns1 = Student('a',23,'M','python',school1)\ns2 = Student('b',24,'M','Linux',school2)\ns1.tell()\ns2.tell()\n```\n---\n### 多态\n当子类和父类都存在相同的方法时，子类的方法会覆盖父类的方法，在代码运行时，总是会调用子类的相应方法\n当父类中有某种方法，传入的任何类型只要是父类或者子类就会自动的调用相关父类或子类的方法，即多态\n\n“开闭”原则：\n对扩展开放：允许新增子类\n对修改封闭：不需要修改依赖父类的相关函数\n\n---\n### 新式类和经典类\n在定义时，有无object\n\n区别：\n1.在继承\\__init\\__函数写法\n新式类：Father.\\__init\\__(self.name,self.sex)\n新式类：super(Son,self).\\__init\\____(name,age,sex)\n\n2.继承特性\n经典类：深度优先\n新式类：广度优先\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass A(object):\n    def __init__(self):\n        print \"A class\"\n    def run(self):\n        print \"THis is A run Function\"\nclass B(A):\n    def __init__(self):\n        print \"B class\"\n        A.__init__(self)    #新式类继承init函数，方法一\n#         super(B, self).__init__() #新式类继承init函数，方法二\nclass C(A):\n    def __init__(self):\n        print \"C class\"\n    def run(self):\n        print \"This is C run Function\"\nclass D(B,C):\n    def __init__(self):\n        print \"D class\"\nd = D()\nd.run()\n\"\"\"\n经典类(深度优先)：D-B-A-C\n结果：\nD class\nTHis is A run Function\n新式类(广度优先)：\n结果： D-B-C-A\nD class\nThis is C run Function\n\"\"\"\n```\n","source":"_posts/class.md","raw":"---\ntitle: Python Class\ndate: 2017-02-15 20:40:38\ntags:\n  - Class\ncategories:\n  - python\n---\n### 相关概念\n---\n类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板\n对象：是类的一个实例，如大客车；则是一个一个具体的对象，各个实例拥有的数据相互独立，互不影响\n范例说明：汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来\n\n方法：人会走，会思考，定义一个类的各个功能,类中定义的函数\n数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据\n消息传递：狗叫了，人听见了，就叫通信\n\n继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）,狗都四条腿走路\n封装：人不能引用狗的特性，比如四条腿走路\n多态性：一个叫的功能，可能是低吼，也也可能是大声叫\n抽象性：简单复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义\n类方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写\n\n静态字段：在class中直接定义的字段，直接通过class去获取，也可通过实例来访问，如 value = \"abc\"\n动态字段：在class中对象中定义的字段，通过class的实例来访问，不能通过class直接访问，如在init函数后定义的字段\n静态方法：在类中直接定义，没有self参数，同时使用staticmethod装饰器装饰，访问时直接通过class访问\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass Person(object):\n    name = \"静态字段\"\n    def __init__(self,name,age):\n        self.Name = name\n        self.Age = age\n    def run(self):\n        print self.Name + \"正在跑步\"\n    @staticmethod\n    def run1():\n        print \"静态方法\"\n    @classmethod\n    def run2(cls):\n        print \"类方法\"\n    @property    #转换为特性，直接以属性的形式访问\n    def Bar(self):\n        print self.Name\n\nperson1 = Person('人1',20)\n# 访问动态字段\nprint person1.Name\n# 访问动态方法\nperson1.run()\n# 访问静态字段\nprint Person.name\n# 访问静态方法\nPerson.run1()\n# 调用类方法\nPerson.run2()\n# property的访问形式,直接以属性的形式访问\nperson1.Bar\n```\n---\n### 装饰器\n@staticmethod ：类中的静态方法设置\n@classmethod：类方法设置\n@property ：将类中的方法转换为特性，直接以属性的形式访问\n\n@staticmethod和@classmethod的作用与区别：\n```\n@staticmethod和@classmethod都可以直接类名.方法名(),实例名.方法名()调用\n@staticmethod不需要表示自身对象的self和自身类的cls参数，和使用函数一样\n@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数\n```\n\npython类的定义：\n\n    使用class关键字定义一个类，并且类名的首字母要大写\n    当程序员需要创建的类型不能用简单类型表示时就需要创建类\n    类把需要的变量和函数组合在一起，这种包含也称之为“封装”\n\n对象的创建：\n创建对象的过程称之为实例化；当一个对象被创建后，包括三个方面的特性： 对象的句柄，属性和方法\n句柄：用来区分不同的对象，如a，b\n对象的属性和方法与类中的成员变量和成员函数对应\n\n---\n### 类的属性\n类由属性和方法组成，类的属性是对数据的封装，类的方法则是对类的行为的封装。类的属性按使用范围分为公有属性和私有属性，类的属性范围取决于属性的名称\n公有属性：所谓公有属性就是在类中和类外调用的属性\n私有属性：不能被类以外的函数调用（可以通过instance._classname_attribute方式访问，但只用于调试程序）\n定义方式：以“\\__”双下划线开始的成员变量就是私有属性，否则是公有属性\n私有属性通过内部方法调用，实现对数据的封装隐藏。\n内置属性：由系统在定义类的时候默认添加的，由前后两个下划线构成__dict__，__module__\n\n---\n### 类的方法\n和函数定义一样，但是需要self作为第一个参数\n类的方法也分为：公有方法和私有方法\n    私有方法：不能被外部的类和方法调用，私有方法的定义和私有属性都是一样的，在方法的前面加上“__”双下划线\n    类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用（是继承的关系）\n    静态方法：相当与“全局函数”，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义静态方法没有“self”语句；\n    用于区分函数和类的方法（必须有一个self），self参数表示指向对象本身\n\n\n内部类：\n    所谓内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界;\n    一般不赞同使用内部类，会使程序结构复杂，但是理解内部类有助于理解模块的调用\n\n---\n### 构造函数与析构函数\n构造函数：用于初始化类的内部状态，python提供的构造函数是__init__();\n__init__()方法是可选的，如果不提供，python会给出一个默认的__init__方法\n__init__(self,name,score):  用于定义初始化类的属性，在实例时，可以将相关属性的值定义好\n一般对数据的获取需要自定义的get和set方法\n\n析构函数：用于释放对象占用的资源，python提供的析构函数是__del__();\n__del__()也是可选的，如果不提供，则python会在后台提供默认析构函数\n如果要显式的调用析够函数，可以使用del关键字，方式如下：  del  对象名\n\n__call__()方法：通过实例化后，直接使用person1()来执行call方法\n\n__str__()方法：通过实例化后，直接print person1 就可以显示str中返回的内容\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass Person(object):\n    def __init__(self,name,age):\n        self.Name = name\n        self.Age = age\n    def run(self):\n        print self.Name + \"正在跑步\"\n\n    def __del__(self):\n        print \"解释器要销毁了\"\n\n    def __call__(self):\n        print \"这是call方法\"\nperson1 = Person('人1',20)\nperson1()    #可以通过实例化后，添加括号直接执行call方法\nperson1.run()\n```\n---\n### 类的特殊成员\n```\n__doc__\t   类的描述信息，print Foo.__doc__\n__module__ 当前操作的对象在那个模块，f = Foo();print f.__module__  # 输出__main__，即：输出模块\n__class__  当前操作的对象的类是什么，f = Foo();print f.__class__   # 输出<class '__main__.Foo'>，即：输出类\n__init__   构造方法，通过类创建对象时，自动触发执行\n__del__\t   析构方法，当对象在内存中被释放时，自动触发执行\n__call__   对象后面加括号，触发执行；f = Foo(); f()或者 Foo()() 执行__call__方法\n__dict__   类或对象中的所有成员;\tf = Foo();print Foo.__dict__,print f.__dict__\n__str__\t   默认输出该方法的返回值;  f = Foo();print f\n__getitem__  用于索引操作，如字典以,表示获取\n__setitem__\t 用于索引操作，如字典以,表示设置\n__delitem__  用于索引操作，如字典以,表示删除\n__iter__   用于迭代器，之所以列表、字典、元组可以进行for循环，因为类型内部定义了__iter__\n__new__    在__init__之前被调用的特殊方法,用来创建对象并返回之的方法\n```\n\n---\n### 垃圾回收机制\n    python采用垃圾回收机制来清理不再使用的对象；python提供gc模块释放不再使用的对象python采用“引用计数”的算法方式来处理回收，即：当某个对象在其作用域内不再被其他对象引用的时候，python会自动清除对象； \n    python的函数collect()可以一次性收集所有待处理的对象（gc.collect()）\n\n---\n### 类的继承，多继承\n我们定义一个class时，可以从某个现有的class继承，新的class称之为子类（Subclass），而被继承的class的class称之为父类（Base class）。\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass Father(object):\n    def __init__(self):\n        self.Fname =\"father\"\n    def Func(self):\n        print \"Father func \"\n    def run(self):\n        print \"Father func_public\"\nclass Son(Father):\n    def __init__(self):\n        self.Sname = \"son\"\n    def Bar(self):\n        print \"Son bar_function\"\n    def run(self): #重写父类的方法\n        Father.run(self)\n        print \"xxxxxxxxxx\"\n\ns1 = Son()\ns1.Func()\ns1.run()\n```\n### 多继承\n```python\nclass A(object):\n    def __init__(self):\n        print \"A class\"\n    def run(self):\n        print \"THis is A run Function\"\nclass B(A):\n    def __init__(self):\n        print \"B class\"\n    def run(self):\n        print \"This is B run Function\"\nclass C(A):\n    def __init__(self):\n        print \"C class\"\n    def run(self):\n        print \"This is C run Function\"\nclass D(B,C):\n    def __init__(self):\n        print \"D class\"\n\nc = D()\nc.run()\n```\n\n在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以看着是父类的类型；但是反过来不行\n```python\n#!/usr/bin/env python\n#coding:utf8\n\nclass SchoolMember(object):#基类\n\tdef __init__(self,name,age,sex):\n    \tself.name=name\n\t\tself.age=age\n\t\tself.sex=sex\n\tdef tell(self):\n    \tprint \"\"\"--info of %s----\n        \tname:%s\n\t\t\tage:%s\n            sex:%s\n            \"\"\" %(self.name,self.name,self.age,self.sex)\nclass School(object):\n\tdef __init__(self,name,addr,tel):\n    \tself.school_name=name\n        self.addr=addr\n        self.tel=tel\n        self.stu_list=[]\n        self.tech_list=[]\nclass Student(SchoolMember,School):#子类，继承，多继承\n\tdef __init__(self,name,age,sex,grade,school):\n    \tSchoolMember.__init__(self,name,age,sex)#初始化基类变量\n\t\tself.grade=grade\n\t\tself.school=school\n    def pay_money(self):\n\t\tprint \"-----%s is paying the tuition fee----\" %(self.name)\n\tdef tell(self):\n\t\tSchoolMember.tell(self)\n\t\tprint \"---------from school name : ---------%s\" %(self.school.school_name)\n\nschool1 = School('AAAA','AAAA',999)\nschool2 = School('BBBB','BBBB',999)\ns1 = Student('a',23,'M','python',school1)\ns2 = Student('b',24,'M','Linux',school2)\ns1.tell()\ns2.tell()\n```\n---\n### 多态\n当子类和父类都存在相同的方法时，子类的方法会覆盖父类的方法，在代码运行时，总是会调用子类的相应方法\n当父类中有某种方法，传入的任何类型只要是父类或者子类就会自动的调用相关父类或子类的方法，即多态\n\n“开闭”原则：\n对扩展开放：允许新增子类\n对修改封闭：不需要修改依赖父类的相关函数\n\n---\n### 新式类和经典类\n在定义时，有无object\n\n区别：\n1.在继承\\__init\\__函数写法\n新式类：Father.\\__init\\__(self.name,self.sex)\n新式类：super(Son,self).\\__init\\____(name,age,sex)\n\n2.继承特性\n经典类：深度优先\n新式类：广度优先\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nclass A(object):\n    def __init__(self):\n        print \"A class\"\n    def run(self):\n        print \"THis is A run Function\"\nclass B(A):\n    def __init__(self):\n        print \"B class\"\n        A.__init__(self)    #新式类继承init函数，方法一\n#         super(B, self).__init__() #新式类继承init函数，方法二\nclass C(A):\n    def __init__(self):\n        print \"C class\"\n    def run(self):\n        print \"This is C run Function\"\nclass D(B,C):\n    def __init__(self):\n        print \"D class\"\nd = D()\nd.run()\n\"\"\"\n经典类(深度优先)：D-B-A-C\n结果：\nD class\nTHis is A run Function\n新式类(广度优先)：\n结果： D-B-C-A\nD class\nThis is C run Function\n\"\"\"\n```\n","slug":"class","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vb0011ct8uyahutxay","content":"<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><hr>\n<p>类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板<br>对象：是类的一个实例，如大客车；则是一个一个具体的对象，各个实例拥有的数据相互独立，互不影响<br>范例说明：汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来</p>\n<p>方法：人会走，会思考，定义一个类的各个功能,类中定义的函数<br>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据<br>消息传递：狗叫了，人听见了，就叫通信</p>\n<p>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）,狗都四条腿走路<br>封装：人不能引用狗的特性，比如四条腿走路<br>多态性：一个叫的功能，可能是低吼，也也可能是大声叫<br>抽象性：简单复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义<br>类方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写</p>\n<p>静态字段：在class中直接定义的字段，直接通过class去获取，也可通过实例来访问，如 value = “abc”<br>动态字段：在class中对象中定义的字段，通过class的实例来访问，不能通过class直接访问，如在init函数后定义的字段<br>静态方法：在类中直接定义，没有self参数，同时使用staticmethod装饰器装饰，访问时直接通过class访问</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">\"静态字段\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></div><div class=\"line\">        self.Name = name</div><div class=\"line\">        self.Age = age</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.Name + <span class=\"string\">\"正在跑步\"</span></div><div class=\"line\"><span class=\"meta\">    @staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"静态方法\"</span></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run2</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"类方法\"</span></div><div class=\"line\"><span class=\"meta\">    @property    #转换为特性，直接以属性的形式访问</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Bar</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.Name</div><div class=\"line\"></div><div class=\"line\">person1 = Person(<span class=\"string\">'人1'</span>,<span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"comment\"># 访问动态字段</span></div><div class=\"line\"><span class=\"keyword\">print</span> person1.Name</div><div class=\"line\"><span class=\"comment\"># 访问动态方法</span></div><div class=\"line\">person1.run()</div><div class=\"line\"><span class=\"comment\"># 访问静态字段</span></div><div class=\"line\"><span class=\"keyword\">print</span> Person.name</div><div class=\"line\"><span class=\"comment\"># 访问静态方法</span></div><div class=\"line\">Person.run1()</div><div class=\"line\"><span class=\"comment\"># 调用类方法</span></div><div class=\"line\">Person.run2()</div><div class=\"line\"><span class=\"comment\"># property的访问形式,直接以属性的形式访问</span></div><div class=\"line\">person1.Bar</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>@staticmethod ：类中的静态方法设置<br>@classmethod：类方法设置<br>@property ：将类中的方法转换为特性，直接以属性的形式访问</p>\n<p>@staticmethod和@classmethod的作用与区别：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@staticmethod和@classmethod都可以直接类名.方法名(),实例名.方法名()调用</div><div class=\"line\">@staticmethod不需要表示自身对象的self和自身类的cls参数，和使用函数一样</div><div class=\"line\">@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数</div></pre></td></tr></table></figure></p>\n<p>python类的定义：</p>\n<pre><code>使用class关键字定义一个类，并且类名的首字母要大写\n当程序员需要创建的类型不能用简单类型表示时就需要创建类\n类把需要的变量和函数组合在一起，这种包含也称之为“封装”\n</code></pre><p>对象的创建：<br>创建对象的过程称之为实例化；当一个对象被创建后，包括三个方面的特性： 对象的句柄，属性和方法<br>句柄：用来区分不同的对象，如a，b<br>对象的属性和方法与类中的成员变量和成员函数对应</p>\n<hr>\n<h3 id=\"类的属性\"><a href=\"#类的属性\" class=\"headerlink\" title=\"类的属性\"></a>类的属性</h3><p>类由属性和方法组成，类的属性是对数据的封装，类的方法则是对类的行为的封装。类的属性按使用范围分为公有属性和私有属性，类的属性范围取决于属性的名称<br>公有属性：所谓公有属性就是在类中和类外调用的属性<br>私有属性：不能被类以外的函数调用（可以通过instance._classname_attribute方式访问，但只用于调试程序）<br>定义方式：以“__”双下划线开始的成员变量就是私有属性，否则是公有属性<br>私有属性通过内部方法调用，实现对数据的封装隐藏。<br>内置属性：由系统在定义类的时候默认添加的，由前后两个下划线构成<strong>dict</strong>，<strong>module</strong></p>\n<hr>\n<h3 id=\"类的方法\"><a href=\"#类的方法\" class=\"headerlink\" title=\"类的方法\"></a>类的方法</h3><p>和函数定义一样，但是需要self作为第一个参数<br>类的方法也分为：公有方法和私有方法<br>    私有方法：不能被外部的类和方法调用，私有方法的定义和私有属性都是一样的，在方法的前面加上“__”双下划线<br>    类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用（是继承的关系）<br>    静态方法：相当与“全局函数”，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义静态方法没有“self”语句；<br>    用于区分函数和类的方法（必须有一个self），self参数表示指向对象本身</p>\n<p>内部类：<br>    所谓内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界;<br>    一般不赞同使用内部类，会使程序结构复杂，但是理解内部类有助于理解模块的调用</p>\n<hr>\n<h3 id=\"构造函数与析构函数\"><a href=\"#构造函数与析构函数\" class=\"headerlink\" title=\"构造函数与析构函数\"></a>构造函数与析构函数</h3><p>构造函数：用于初始化类的内部状态，python提供的构造函数是<strong>init</strong>();<br><strong>init</strong>()方法是可选的，如果不提供，python会给出一个默认的<strong>init</strong>方法<br><strong>init</strong>(self,name,score):  用于定义初始化类的属性，在实例时，可以将相关属性的值定义好<br>一般对数据的获取需要自定义的get和set方法</p>\n<p>析构函数：用于释放对象占用的资源，python提供的析构函数是<strong>del</strong>();<br><strong>del</strong>()也是可选的，如果不提供，则python会在后台提供默认析构函数<br>如果要显式的调用析够函数，可以使用del关键字，方式如下：  del  对象名</p>\n<p><strong>call</strong>()方法：通过实例化后，直接使用person1()来执行call方法</p>\n<p><strong>str</strong>()方法：通过实例化后，直接print person1 就可以显示str中返回的内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></div><div class=\"line\">        self.Name = name</div><div class=\"line\">        self.Age = age</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.Name + <span class=\"string\">\"正在跑步\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"解释器要销毁了\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"这是call方法\"</span></div><div class=\"line\">person1 = Person(<span class=\"string\">'人1'</span>,<span class=\"number\">20</span>)</div><div class=\"line\">person1()    <span class=\"comment\">#可以通过实例化后，添加括号直接执行call方法</span></div><div class=\"line\">person1.run()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"类的特殊成员\"><a href=\"#类的特殊成员\" class=\"headerlink\" title=\"类的特殊成员\"></a>类的特殊成员</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">__doc__\t   类的描述信息，print Foo.__doc__</div><div class=\"line\">__module__ 当前操作的对象在那个模块，f = Foo();print f.__module__  # 输出__main__，即：输出模块</div><div class=\"line\">__class__  当前操作的对象的类是什么，f = Foo();print f.__class__   # 输出&lt;class &apos;__main__.Foo&apos;&gt;，即：输出类</div><div class=\"line\">__init__   构造方法，通过类创建对象时，自动触发执行</div><div class=\"line\">__del__\t   析构方法，当对象在内存中被释放时，自动触发执行</div><div class=\"line\">__call__   对象后面加括号，触发执行；f = Foo(); f()或者 Foo()() 执行__call__方法</div><div class=\"line\">__dict__   类或对象中的所有成员;\tf = Foo();print Foo.__dict__,print f.__dict__</div><div class=\"line\">__str__\t   默认输出该方法的返回值;  f = Foo();print f</div><div class=\"line\">__getitem__  用于索引操作，如字典以,表示获取</div><div class=\"line\">__setitem__\t 用于索引操作，如字典以,表示设置</div><div class=\"line\">__delitem__  用于索引操作，如字典以,表示删除</div><div class=\"line\">__iter__   用于迭代器，之所以列表、字典、元组可以进行for循环，因为类型内部定义了__iter__</div><div class=\"line\">__new__    在__init__之前被调用的特殊方法,用来创建对象并返回之的方法</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><pre><code>python采用垃圾回收机制来清理不再使用的对象；python提供gc模块释放不再使用的对象python采用“引用计数”的算法方式来处理回收，即：当某个对象在其作用域内不再被其他对象引用的时候，python会自动清除对象； \npython的函数collect()可以一次性收集所有待处理的对象（gc.collect()）\n</code></pre><hr>\n<h3 id=\"类的继承，多继承\"><a href=\"#类的继承，多继承\" class=\"headerlink\" title=\"类的继承，多继承\"></a>类的继承，多继承</h3><p>我们定义一个class时，可以从某个现有的class继承，新的class称之为子类（Subclass），而被继承的class的class称之为父类（Base class）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.Fname =<span class=\"string\">\"father\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Func</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Father func \"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Father func_public\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span><span class=\"params\">(Father)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.Sname = <span class=\"string\">\"son\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Bar</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Son bar_function\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#重写父类的方法</span></div><div class=\"line\">        Father.run(self)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"xxxxxxxxxx\"</span></div><div class=\"line\"></div><div class=\"line\">s1 = Son()</div><div class=\"line\">s1.Func()</div><div class=\"line\">s1.run()</div></pre></td></tr></table></figure>\n<h3 id=\"多继承\"><a href=\"#多继承\" class=\"headerlink\" title=\"多继承\"></a>多继承</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"A class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"THis is A run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"B class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"This is B run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"C class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"This is C run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span><span class=\"params\">(B,C)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"D class\"</span></div><div class=\"line\"></div><div class=\"line\">c = D()</div><div class=\"line\">c.run()</div></pre></td></tr></table></figure>\n<p>在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以看着是父类的类型；但是反过来不行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchoolMember</span><span class=\"params\">(object)</span>:</span><span class=\"comment\">#基类</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age,sex)</span>:</span></div><div class=\"line\">    \tself.name=name</div><div class=\"line\">\t\tself.age=age</div><div class=\"line\">\t\tself.sex=sex</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">print</span> <span class=\"string\">\"\"\"--info of %s----</span></div><div class=\"line\">        \tname:%s</div><div class=\"line\">\t\t\tage:%s</div><div class=\"line\">            sex:%s</div><div class=\"line\">            \"\"\" %(self.name,self.name,self.age,self.sex)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,addr,tel)</span>:</span></div><div class=\"line\">    \tself.school_name=name</div><div class=\"line\">        self.addr=addr</div><div class=\"line\">        self.tel=tel</div><div class=\"line\">        self.stu_list=[]</div><div class=\"line\">        self.tech_list=[]</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(SchoolMember,School)</span>:</span><span class=\"comment\">#子类，继承，多继承</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age,sex,grade,school)</span>:</span></div><div class=\"line\">    \tSchoolMember.__init__(self,name,age,sex)<span class=\"comment\">#初始化基类变量</span></div><div class=\"line\">\t\tself.grade=grade</div><div class=\"line\">\t\tself.school=school</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pay_money</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"-----%s is paying the tuition fee----\"</span> %(self.name)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tSchoolMember.tell(self)</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"---------from school name : ---------%s\"</span> %(self.school.school_name)</div><div class=\"line\"></div><div class=\"line\">school1 = School(<span class=\"string\">'AAAA'</span>,<span class=\"string\">'AAAA'</span>,<span class=\"number\">999</span>)</div><div class=\"line\">school2 = School(<span class=\"string\">'BBBB'</span>,<span class=\"string\">'BBBB'</span>,<span class=\"number\">999</span>)</div><div class=\"line\">s1 = Student(<span class=\"string\">'a'</span>,<span class=\"number\">23</span>,<span class=\"string\">'M'</span>,<span class=\"string\">'python'</span>,school1)</div><div class=\"line\">s2 = Student(<span class=\"string\">'b'</span>,<span class=\"number\">24</span>,<span class=\"string\">'M'</span>,<span class=\"string\">'Linux'</span>,school2)</div><div class=\"line\">s1.tell()</div><div class=\"line\">s2.tell()</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>当子类和父类都存在相同的方法时，子类的方法会覆盖父类的方法，在代码运行时，总是会调用子类的相应方法<br>当父类中有某种方法，传入的任何类型只要是父类或者子类就会自动的调用相关父类或子类的方法，即多态</p>\n<p>“开闭”原则：<br>对扩展开放：允许新增子类<br>对修改封闭：不需要修改依赖父类的相关函数</p>\n<hr>\n<h3 id=\"新式类和经典类\"><a href=\"#新式类和经典类\" class=\"headerlink\" title=\"新式类和经典类\"></a>新式类和经典类</h3><p>在定义时，有无object</p>\n<p>区别：<br>1.在继承__init__函数写法<br>新式类：Father.__init__(self.name,self.sex)<br>新式类：super(Son,self).__init____(name,age,sex)</p>\n<p>2.继承特性<br>经典类：深度优先<br>新式类：广度优先</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"A class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"THis is A run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"B class\"</span></div><div class=\"line\">        A.__init__(self)    <span class=\"comment\">#新式类继承init函数，方法一</span></div><div class=\"line\"><span class=\"comment\">#         super(B, self).__init__() #新式类继承init函数，方法二</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"C class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"This is C run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span><span class=\"params\">(B,C)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"D class\"</span></div><div class=\"line\">d = D()</div><div class=\"line\">d.run()</div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">经典类(深度优先)：D-B-A-C</div><div class=\"line\">结果：</div><div class=\"line\">D class</div><div class=\"line\">THis is A run Function</div><div class=\"line\">新式类(广度优先)：</div><div class=\"line\">结果： D-B-C-A</div><div class=\"line\">D class</div><div class=\"line\">This is C run Function</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><hr>\n<p>类：是对事物的抽象，人/动物/机器,如汽车模型；创建实例的模板<br>对象：是类的一个实例，如大客车；则是一个一个具体的对象，各个实例拥有的数据相互独立，互不影响<br>范例说明：汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来</p>\n<p>方法：人会走，会思考，定义一个类的各个功能,类中定义的函数<br>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据<br>消息传递：狗叫了，人听见了，就叫通信</p>\n<p>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）,狗都四条腿走路<br>封装：人不能引用狗的特性，比如四条腿走路<br>多态性：一个叫的功能，可能是低吼，也也可能是大声叫<br>抽象性：简单复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义<br>类方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写</p>\n<p>静态字段：在class中直接定义的字段，直接通过class去获取，也可通过实例来访问，如 value = “abc”<br>动态字段：在class中对象中定义的字段，通过class的实例来访问，不能通过class直接访问，如在init函数后定义的字段<br>静态方法：在类中直接定义，没有self参数，同时使用staticmethod装饰器装饰，访问时直接通过class访问</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">\"静态字段\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></div><div class=\"line\">        self.Name = name</div><div class=\"line\">        self.Age = age</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.Name + <span class=\"string\">\"正在跑步\"</span></div><div class=\"line\"><span class=\"meta\">    @staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"静态方法\"</span></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run2</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"类方法\"</span></div><div class=\"line\"><span class=\"meta\">    @property    #转换为特性，直接以属性的形式访问</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Bar</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.Name</div><div class=\"line\"></div><div class=\"line\">person1 = Person(<span class=\"string\">'人1'</span>,<span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"comment\"># 访问动态字段</span></div><div class=\"line\"><span class=\"keyword\">print</span> person1.Name</div><div class=\"line\"><span class=\"comment\"># 访问动态方法</span></div><div class=\"line\">person1.run()</div><div class=\"line\"><span class=\"comment\"># 访问静态字段</span></div><div class=\"line\"><span class=\"keyword\">print</span> Person.name</div><div class=\"line\"><span class=\"comment\"># 访问静态方法</span></div><div class=\"line\">Person.run1()</div><div class=\"line\"><span class=\"comment\"># 调用类方法</span></div><div class=\"line\">Person.run2()</div><div class=\"line\"><span class=\"comment\"># property的访问形式,直接以属性的形式访问</span></div><div class=\"line\">person1.Bar</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>@staticmethod ：类中的静态方法设置<br>@classmethod：类方法设置<br>@property ：将类中的方法转换为特性，直接以属性的形式访问</p>\n<p>@staticmethod和@classmethod的作用与区别：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@staticmethod和@classmethod都可以直接类名.方法名(),实例名.方法名()调用</div><div class=\"line\">@staticmethod不需要表示自身对象的self和自身类的cls参数，和使用函数一样</div><div class=\"line\">@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数</div></pre></td></tr></table></figure></p>\n<p>python类的定义：</p>\n<pre><code>使用class关键字定义一个类，并且类名的首字母要大写\n当程序员需要创建的类型不能用简单类型表示时就需要创建类\n类把需要的变量和函数组合在一起，这种包含也称之为“封装”\n</code></pre><p>对象的创建：<br>创建对象的过程称之为实例化；当一个对象被创建后，包括三个方面的特性： 对象的句柄，属性和方法<br>句柄：用来区分不同的对象，如a，b<br>对象的属性和方法与类中的成员变量和成员函数对应</p>\n<hr>\n<h3 id=\"类的属性\"><a href=\"#类的属性\" class=\"headerlink\" title=\"类的属性\"></a>类的属性</h3><p>类由属性和方法组成，类的属性是对数据的封装，类的方法则是对类的行为的封装。类的属性按使用范围分为公有属性和私有属性，类的属性范围取决于属性的名称<br>公有属性：所谓公有属性就是在类中和类外调用的属性<br>私有属性：不能被类以外的函数调用（可以通过instance._classname_attribute方式访问，但只用于调试程序）<br>定义方式：以“__”双下划线开始的成员变量就是私有属性，否则是公有属性<br>私有属性通过内部方法调用，实现对数据的封装隐藏。<br>内置属性：由系统在定义类的时候默认添加的，由前后两个下划线构成<strong>dict</strong>，<strong>module</strong></p>\n<hr>\n<h3 id=\"类的方法\"><a href=\"#类的方法\" class=\"headerlink\" title=\"类的方法\"></a>类的方法</h3><p>和函数定义一样，但是需要self作为第一个参数<br>类的方法也分为：公有方法和私有方法<br>    私有方法：不能被外部的类和方法调用，私有方法的定义和私有属性都是一样的，在方法的前面加上“__”双下划线<br>    类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用（是继承的关系）<br>    静态方法：相当与“全局函数”，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义静态方法没有“self”语句；<br>    用于区分函数和类的方法（必须有一个self），self参数表示指向对象本身</p>\n<p>内部类：<br>    所谓内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界;<br>    一般不赞同使用内部类，会使程序结构复杂，但是理解内部类有助于理解模块的调用</p>\n<hr>\n<h3 id=\"构造函数与析构函数\"><a href=\"#构造函数与析构函数\" class=\"headerlink\" title=\"构造函数与析构函数\"></a>构造函数与析构函数</h3><p>构造函数：用于初始化类的内部状态，python提供的构造函数是<strong>init</strong>();<br><strong>init</strong>()方法是可选的，如果不提供，python会给出一个默认的<strong>init</strong>方法<br><strong>init</strong>(self,name,score):  用于定义初始化类的属性，在实例时，可以将相关属性的值定义好<br>一般对数据的获取需要自定义的get和set方法</p>\n<p>析构函数：用于释放对象占用的资源，python提供的析构函数是<strong>del</strong>();<br><strong>del</strong>()也是可选的，如果不提供，则python会在后台提供默认析构函数<br>如果要显式的调用析够函数，可以使用del关键字，方式如下：  del  对象名</p>\n<p><strong>call</strong>()方法：通过实例化后，直接使用person1()来执行call方法</p>\n<p><strong>str</strong>()方法：通过实例化后，直接print person1 就可以显示str中返回的内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></div><div class=\"line\">        self.Name = name</div><div class=\"line\">        self.Age = age</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.Name + <span class=\"string\">\"正在跑步\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"解释器要销毁了\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"这是call方法\"</span></div><div class=\"line\">person1 = Person(<span class=\"string\">'人1'</span>,<span class=\"number\">20</span>)</div><div class=\"line\">person1()    <span class=\"comment\">#可以通过实例化后，添加括号直接执行call方法</span></div><div class=\"line\">person1.run()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"类的特殊成员\"><a href=\"#类的特殊成员\" class=\"headerlink\" title=\"类的特殊成员\"></a>类的特殊成员</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">__doc__\t   类的描述信息，print Foo.__doc__</div><div class=\"line\">__module__ 当前操作的对象在那个模块，f = Foo();print f.__module__  # 输出__main__，即：输出模块</div><div class=\"line\">__class__  当前操作的对象的类是什么，f = Foo();print f.__class__   # 输出&lt;class &apos;__main__.Foo&apos;&gt;，即：输出类</div><div class=\"line\">__init__   构造方法，通过类创建对象时，自动触发执行</div><div class=\"line\">__del__\t   析构方法，当对象在内存中被释放时，自动触发执行</div><div class=\"line\">__call__   对象后面加括号，触发执行；f = Foo(); f()或者 Foo()() 执行__call__方法</div><div class=\"line\">__dict__   类或对象中的所有成员;\tf = Foo();print Foo.__dict__,print f.__dict__</div><div class=\"line\">__str__\t   默认输出该方法的返回值;  f = Foo();print f</div><div class=\"line\">__getitem__  用于索引操作，如字典以,表示获取</div><div class=\"line\">__setitem__\t 用于索引操作，如字典以,表示设置</div><div class=\"line\">__delitem__  用于索引操作，如字典以,表示删除</div><div class=\"line\">__iter__   用于迭代器，之所以列表、字典、元组可以进行for循环，因为类型内部定义了__iter__</div><div class=\"line\">__new__    在__init__之前被调用的特殊方法,用来创建对象并返回之的方法</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><pre><code>python采用垃圾回收机制来清理不再使用的对象；python提供gc模块释放不再使用的对象python采用“引用计数”的算法方式来处理回收，即：当某个对象在其作用域内不再被其他对象引用的时候，python会自动清除对象； \npython的函数collect()可以一次性收集所有待处理的对象（gc.collect()）\n</code></pre><hr>\n<h3 id=\"类的继承，多继承\"><a href=\"#类的继承，多继承\" class=\"headerlink\" title=\"类的继承，多继承\"></a>类的继承，多继承</h3><p>我们定义一个class时，可以从某个现有的class继承，新的class称之为子类（Subclass），而被继承的class的class称之为父类（Base class）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.Fname =<span class=\"string\">\"father\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Func</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Father func \"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Father func_public\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span><span class=\"params\">(Father)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.Sname = <span class=\"string\">\"son\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Bar</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Son bar_function\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#重写父类的方法</span></div><div class=\"line\">        Father.run(self)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"xxxxxxxxxx\"</span></div><div class=\"line\"></div><div class=\"line\">s1 = Son()</div><div class=\"line\">s1.Func()</div><div class=\"line\">s1.run()</div></pre></td></tr></table></figure>\n<h3 id=\"多继承\"><a href=\"#多继承\" class=\"headerlink\" title=\"多继承\"></a>多继承</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"A class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"THis is A run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"B class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"This is B run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"C class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"This is C run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span><span class=\"params\">(B,C)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"D class\"</span></div><div class=\"line\"></div><div class=\"line\">c = D()</div><div class=\"line\">c.run()</div></pre></td></tr></table></figure>\n<p>在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以看着是父类的类型；但是反过来不行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchoolMember</span><span class=\"params\">(object)</span>:</span><span class=\"comment\">#基类</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age,sex)</span>:</span></div><div class=\"line\">    \tself.name=name</div><div class=\"line\">\t\tself.age=age</div><div class=\"line\">\t\tself.sex=sex</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">print</span> <span class=\"string\">\"\"\"--info of %s----</div><div class=\"line\">        \tname:%s</div><div class=\"line\">\t\t\tage:%s</div><div class=\"line\">            sex:%s</div><div class=\"line\">            \"\"\"</span> %(self.name,self.name,self.age,self.sex)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,addr,tel)</span>:</span></div><div class=\"line\">    \tself.school_name=name</div><div class=\"line\">        self.addr=addr</div><div class=\"line\">        self.tel=tel</div><div class=\"line\">        self.stu_list=[]</div><div class=\"line\">        self.tech_list=[]</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(SchoolMember,School)</span>:</span><span class=\"comment\">#子类，继承，多继承</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age,sex,grade,school)</span>:</span></div><div class=\"line\">    \tSchoolMember.__init__(self,name,age,sex)<span class=\"comment\">#初始化基类变量</span></div><div class=\"line\">\t\tself.grade=grade</div><div class=\"line\">\t\tself.school=school</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pay_money</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"-----%s is paying the tuition fee----\"</span> %(self.name)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tSchoolMember.tell(self)</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"---------from school name : ---------%s\"</span> %(self.school.school_name)</div><div class=\"line\"></div><div class=\"line\">school1 = School(<span class=\"string\">'AAAA'</span>,<span class=\"string\">'AAAA'</span>,<span class=\"number\">999</span>)</div><div class=\"line\">school2 = School(<span class=\"string\">'BBBB'</span>,<span class=\"string\">'BBBB'</span>,<span class=\"number\">999</span>)</div><div class=\"line\">s1 = Student(<span class=\"string\">'a'</span>,<span class=\"number\">23</span>,<span class=\"string\">'M'</span>,<span class=\"string\">'python'</span>,school1)</div><div class=\"line\">s2 = Student(<span class=\"string\">'b'</span>,<span class=\"number\">24</span>,<span class=\"string\">'M'</span>,<span class=\"string\">'Linux'</span>,school2)</div><div class=\"line\">s1.tell()</div><div class=\"line\">s2.tell()</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>当子类和父类都存在相同的方法时，子类的方法会覆盖父类的方法，在代码运行时，总是会调用子类的相应方法<br>当父类中有某种方法，传入的任何类型只要是父类或者子类就会自动的调用相关父类或子类的方法，即多态</p>\n<p>“开闭”原则：<br>对扩展开放：允许新增子类<br>对修改封闭：不需要修改依赖父类的相关函数</p>\n<hr>\n<h3 id=\"新式类和经典类\"><a href=\"#新式类和经典类\" class=\"headerlink\" title=\"新式类和经典类\"></a>新式类和经典类</h3><p>在定义时，有无object</p>\n<p>区别：<br>1.在继承__init__函数写法<br>新式类：Father.__init__(self.name,self.sex)<br>新式类：super(Son,self).__init____(name,age,sex)</p>\n<p>2.继承特性<br>经典类：深度优先<br>新式类：广度优先</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"A class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"THis is A run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"B class\"</span></div><div class=\"line\">        A.__init__(self)    <span class=\"comment\">#新式类继承init函数，方法一</span></div><div class=\"line\"><span class=\"comment\">#         super(B, self).__init__() #新式类继承init函数，方法二</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"C class\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"This is C run Function\"</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span><span class=\"params\">(B,C)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"D class\"</span></div><div class=\"line\">d = D()</div><div class=\"line\">d.run()</div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">经典类(深度优先)：D-B-A-C</div><div class=\"line\">结果：</div><div class=\"line\">D class</div><div class=\"line\">THis is A run Function</div><div class=\"line\">新式类(广度优先)：</div><div class=\"line\">结果： D-B-C-A</div><div class=\"line\">D class</div><div class=\"line\">This is C run Function</div><div class=\"line\">\"\"\"</span></div></pre></td></tr></table></figure>\n"},{"title":"Python Datetime模块","date":"2017-04-10T13:51:17.000Z","_content":"日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.\n\n#### 时间转换为字符串(格式化输出)\n```python\ndatetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n# strftime参数，strftime(format[, tuple]) -> string\npython中时间日期格式化符号：\n%y 两位数的年份表示（00-99）\n%Y 四位数的年份表示（000-9999）\n%m 月份（01-12）\n%d 月内中的一天（0-31）\n%H 24小时制小时数（0-23）\n%I 12小时制小时数（01-12）\n%M 分钟数（00-59）\n%S 秒（00-59）\n%a 本地简化星期名称\n%A 本地完整星期名称\n%b 本地简化的月份名称\n%B 本地完整的月份名称\n%c 本地相应的日期表示和时间表示\n%j 年内的一天（001-366）\n%p 本地A.M.或P.M.的等价符\n%U 一年中的星期数（00-53）星期天为星期的开始\n%w 星期（0-6），星期天为星期的开始\n%W 一年中的星期数（00-53）星期一为星期的开始\n%x 本地相应的日期表示\n%X 本地相应的时间表示\n%Z 当前时区的名称\n%% %号本身\n```\n#### 字符串和datetime转换\n```python\n'''\n把str转换为datetime,转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串\n'''\nIn [1]: from datetime import datetime\n \nIn [2]: print datetime.now()\n2017-04-10 21:10:03.619051\n \nIn [3]: type(datetime.now())\nOut[3]: datetime.datetime\n \nIn [4]: str = '2017-04-10 21:13:14'\n \nIn [5]: type(str)\nOut[5]: str\n \nIn [6]: daytime = datetime.strptime(str,'%Y-%m-%d %H:%M:%S')\n \nIn [7]: daytime\nOut[7]: datetime.datetime(2017, 4, 10, 21, 13, 14)\n \nIn [8]: print daytime\n2017-04-10 21:13:14\n \nIn [9]: type(daytime)\nOut[9]: datetime.datetime\n```\n\n#### data和datetime转换\n```python\n# datetime ——> date\nIn [1]: import datetime\nIn [2]: datetime.datetime.now().date()\nOut[2]: datetime.date(2017, 6, 20)\n \n# date ——> datetime\nIn [5]: today = datetime.date.today()\n \nIn [6]: datetime.datetime.combine(today, datetime.time())\nOut[6]: datetime.datetime(2017, 6, 20, 0, 0)\nIn [7]: datetime.datetime.combine(today, datetime.time.min)\nOut[7]: datetime.datetime(2017, 6, 20, 0, 0)\n```\n#### 当前时间\n```python\n'''\ndatetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入。\n如果仅导入import datetime，则需要使用datetime.datetime.now()返回当前日期和时间，其类型是datetime\n'''\nIn [1]: from datetime import datetime\n \nIn [2]: now = datetime.now()\n \nIn [3]: now\nOut[3]: datetime.datetime(2017, 4, 10, 20, 11, 7, 241762)\n \nIn [4]: print now\n2017-04-10 20:11:07.241762\n \nIn [5]: type(now)\nOut[5]: datetime.datetime\n```\n#### 特定时间\n```python\nIn [1]: from datetime import datetime\n \nIn [2]: day = datetime(2017,4,10,13,14)\n \nIn [3]: day\nOut[3]: datetime.datetime(2017, 4, 10, 13, 14)\n \nIn [4]: print day\n2017-04-10 13:14:00\n```\n#### 时间加减\n```python\n'''\n对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，需要导入timedelta\n'''\nIn [1]: from datetime import datetime,timedelta\n \nIn [2]: now = datetime.now()\n \nIn [3]: now\nOut[3]: datetime.datetime(2017, 4, 10, 21, 39, 8, 413031)\n \nIn [4]: now+timedelta(hours=2)\nOut[4]: datetime.datetime(2017, 4, 10, 23, 39, 8, 413031)\n \nIn [5]: now-timedelta(days=2)\nOut[5]: datetime.datetime(2017, 4, 8, 21, 39, 8, 413031)\n \nIn [6]: now+timedelta(days=1,hours=1)\nOut[6]: datetime.datetime(2017, 4, 11, 22, 39, 8, 413031)\n```\n#### 时区转换\n时区对应的时间戳转换问题\n```python\nimport pytz, time\n    \ndate_str = '2019-04-23 14:29:18.106'\nutc = pytz.timezone('UTC')\ntz = pytz.timezone('Asia/Shanghai')\nnow = datetime.now(tz)\nprint('now---->', now, now.astimezone(utc))\naytime = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S.%f')\nts = int(aytime.timestamp())\ntz_datetime = datetime.fromtimestamp(ts, tz)  # 中国时间\ntz_stamp = time.mktime(tz_datetime.timetuple())\nprint('tz_stamp--->', tz_stamp)\nutc_datetime = datetime.fromtimestamp(ts, utc)  # UTC时间\nutc_stamp = time.mktime(utc_datetime.timetuple())\nprint('utc_stamp--->', utc_stamp)\nprint('------>', tz_datetime, utc_datetime)\n```\n","source":"_posts/datetime.md","raw":"---\ntitle: Python Datetime模块\ndate: 2017-04-10 21:51:17\ntags:\n  - Datetime\ncategories:\n  - python\n---\n日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.\n\n#### 时间转换为字符串(格式化输出)\n```python\ndatetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n# strftime参数，strftime(format[, tuple]) -> string\npython中时间日期格式化符号：\n%y 两位数的年份表示（00-99）\n%Y 四位数的年份表示（000-9999）\n%m 月份（01-12）\n%d 月内中的一天（0-31）\n%H 24小时制小时数（0-23）\n%I 12小时制小时数（01-12）\n%M 分钟数（00-59）\n%S 秒（00-59）\n%a 本地简化星期名称\n%A 本地完整星期名称\n%b 本地简化的月份名称\n%B 本地完整的月份名称\n%c 本地相应的日期表示和时间表示\n%j 年内的一天（001-366）\n%p 本地A.M.或P.M.的等价符\n%U 一年中的星期数（00-53）星期天为星期的开始\n%w 星期（0-6），星期天为星期的开始\n%W 一年中的星期数（00-53）星期一为星期的开始\n%x 本地相应的日期表示\n%X 本地相应的时间表示\n%Z 当前时区的名称\n%% %号本身\n```\n#### 字符串和datetime转换\n```python\n'''\n把str转换为datetime,转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串\n'''\nIn [1]: from datetime import datetime\n \nIn [2]: print datetime.now()\n2017-04-10 21:10:03.619051\n \nIn [3]: type(datetime.now())\nOut[3]: datetime.datetime\n \nIn [4]: str = '2017-04-10 21:13:14'\n \nIn [5]: type(str)\nOut[5]: str\n \nIn [6]: daytime = datetime.strptime(str,'%Y-%m-%d %H:%M:%S')\n \nIn [7]: daytime\nOut[7]: datetime.datetime(2017, 4, 10, 21, 13, 14)\n \nIn [8]: print daytime\n2017-04-10 21:13:14\n \nIn [9]: type(daytime)\nOut[9]: datetime.datetime\n```\n\n#### data和datetime转换\n```python\n# datetime ——> date\nIn [1]: import datetime\nIn [2]: datetime.datetime.now().date()\nOut[2]: datetime.date(2017, 6, 20)\n \n# date ——> datetime\nIn [5]: today = datetime.date.today()\n \nIn [6]: datetime.datetime.combine(today, datetime.time())\nOut[6]: datetime.datetime(2017, 6, 20, 0, 0)\nIn [7]: datetime.datetime.combine(today, datetime.time.min)\nOut[7]: datetime.datetime(2017, 6, 20, 0, 0)\n```\n#### 当前时间\n```python\n'''\ndatetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入。\n如果仅导入import datetime，则需要使用datetime.datetime.now()返回当前日期和时间，其类型是datetime\n'''\nIn [1]: from datetime import datetime\n \nIn [2]: now = datetime.now()\n \nIn [3]: now\nOut[3]: datetime.datetime(2017, 4, 10, 20, 11, 7, 241762)\n \nIn [4]: print now\n2017-04-10 20:11:07.241762\n \nIn [5]: type(now)\nOut[5]: datetime.datetime\n```\n#### 特定时间\n```python\nIn [1]: from datetime import datetime\n \nIn [2]: day = datetime(2017,4,10,13,14)\n \nIn [3]: day\nOut[3]: datetime.datetime(2017, 4, 10, 13, 14)\n \nIn [4]: print day\n2017-04-10 13:14:00\n```\n#### 时间加减\n```python\n'''\n对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，需要导入timedelta\n'''\nIn [1]: from datetime import datetime,timedelta\n \nIn [2]: now = datetime.now()\n \nIn [3]: now\nOut[3]: datetime.datetime(2017, 4, 10, 21, 39, 8, 413031)\n \nIn [4]: now+timedelta(hours=2)\nOut[4]: datetime.datetime(2017, 4, 10, 23, 39, 8, 413031)\n \nIn [5]: now-timedelta(days=2)\nOut[5]: datetime.datetime(2017, 4, 8, 21, 39, 8, 413031)\n \nIn [6]: now+timedelta(days=1,hours=1)\nOut[6]: datetime.datetime(2017, 4, 11, 22, 39, 8, 413031)\n```\n#### 时区转换\n时区对应的时间戳转换问题\n```python\nimport pytz, time\n    \ndate_str = '2019-04-23 14:29:18.106'\nutc = pytz.timezone('UTC')\ntz = pytz.timezone('Asia/Shanghai')\nnow = datetime.now(tz)\nprint('now---->', now, now.astimezone(utc))\naytime = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S.%f')\nts = int(aytime.timestamp())\ntz_datetime = datetime.fromtimestamp(ts, tz)  # 中国时间\ntz_stamp = time.mktime(tz_datetime.timetuple())\nprint('tz_stamp--->', tz_stamp)\nutc_datetime = datetime.fromtimestamp(ts, utc)  # UTC时间\nutc_stamp = time.mktime(utc_datetime.timetuple())\nprint('utc_stamp--->', utc_stamp)\nprint('------>', tz_datetime, utc_datetime)\n```\n","slug":"datetime","published":1,"updated":"2019-07-27T06:25:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vc0014ct8uwyk6kzmd","content":"<p>日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.</p>\n<h4 id=\"时间转换为字符串-格式化输出\"><a href=\"#时间转换为字符串-格式化输出\" class=\"headerlink\" title=\"时间转换为字符串(格式化输出)\"></a>时间转换为字符串(格式化输出)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">datetime.datetime.now().strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>)</div><div class=\"line\"><span class=\"comment\"># strftime参数，strftime(format[, tuple]) -&gt; string</span></div><div class=\"line\">python中时间日期格式化符号：</div><div class=\"line\">%y 两位数的年份表示（<span class=\"number\">00</span><span class=\"number\">-99</span>）</div><div class=\"line\">%Y 四位数的年份表示（<span class=\"number\">000</span><span class=\"number\">-9999</span>）</div><div class=\"line\">%m 月份（<span class=\"number\">01</span><span class=\"number\">-12</span>）</div><div class=\"line\">%d 月内中的一天（<span class=\"number\">0</span><span class=\"number\">-31</span>）</div><div class=\"line\">%H <span class=\"number\">24</span>小时制小时数（<span class=\"number\">0</span><span class=\"number\">-23</span>）</div><div class=\"line\">%I <span class=\"number\">12</span>小时制小时数（<span class=\"number\">01</span><span class=\"number\">-12</span>）</div><div class=\"line\">%M 分钟数（<span class=\"number\">00</span><span class=\"number\">-59</span>）</div><div class=\"line\">%S 秒（<span class=\"number\">00</span><span class=\"number\">-59</span>）</div><div class=\"line\">%a 本地简化星期名称</div><div class=\"line\">%A 本地完整星期名称</div><div class=\"line\">%b 本地简化的月份名称</div><div class=\"line\">%B 本地完整的月份名称</div><div class=\"line\">%c 本地相应的日期表示和时间表示</div><div class=\"line\">%j 年内的一天（<span class=\"number\">001</span><span class=\"number\">-366</span>）</div><div class=\"line\">%p 本地A.M.或P.M.的等价符</div><div class=\"line\">%U 一年中的星期数（<span class=\"number\">00</span><span class=\"number\">-53</span>）星期天为星期的开始</div><div class=\"line\">%w 星期（<span class=\"number\">0</span><span class=\"number\">-6</span>），星期天为星期的开始</div><div class=\"line\">%W 一年中的星期数（<span class=\"number\">00</span><span class=\"number\">-53</span>）星期一为星期的开始</div><div class=\"line\">%x 本地相应的日期表示</div><div class=\"line\">%X 本地相应的时间表示</div><div class=\"line\">%Z 当前时区的名称</div><div class=\"line\">%% %号本身</div></pre></td></tr></table></figure>\n<h4 id=\"字符串和datetime转换\"><a href=\"#字符串和datetime转换\" class=\"headerlink\" title=\"字符串和datetime转换\"></a>字符串和datetime转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">把str转换为datetime,转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串</div><div class=\"line\">'''</div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: <span class=\"keyword\">print</span> datetime.now()</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">21</span>:<span class=\"number\">10</span>:<span class=\"number\">03.619051</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: type(datetime.now())</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: str = <span class=\"string\">'2017-04-10 21:13:14'</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: type(str)</div><div class=\"line\">Out[<span class=\"number\">5</span>]: str</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: daytime = datetime.strptime(str,<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">7</span>]: daytime</div><div class=\"line\">Out[<span class=\"number\">7</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">8</span>]: <span class=\"keyword\">print</span> daytime</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">21</span>:<span class=\"number\">13</span>:<span class=\"number\">14</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">9</span>]: type(daytime)</div><div class=\"line\">Out[<span class=\"number\">9</span>]: datetime.datetime</div></pre></td></tr></table></figure>\n<h4 id=\"data和datetime转换\"><a href=\"#data和datetime转换\" class=\"headerlink\" title=\"data和datetime转换\"></a>data和datetime转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># datetime ——&gt; date</span></div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">import</span> datetime</div><div class=\"line\">In [<span class=\"number\">2</span>]: datetime.datetime.now().date()</div><div class=\"line\">Out[<span class=\"number\">2</span>]: datetime.date(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># date ——&gt; datetime</span></div><div class=\"line\">In [<span class=\"number\">5</span>]: today = datetime.date.today()</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: datetime.datetime.combine(today, datetime.time())</div><div class=\"line\">Out[<span class=\"number\">6</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</div><div class=\"line\">In [<span class=\"number\">7</span>]: datetime.datetime.combine(today, datetime.time.min)</div><div class=\"line\">Out[<span class=\"number\">7</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"当前时间\"><a href=\"#当前时间\" class=\"headerlink\" title=\"当前时间\"></a>当前时间</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入。</div><div class=\"line\">如果仅导入import datetime，则需要使用datetime.datetime.now()返回当前日期和时间，其类型是datetime</div><div class=\"line\">'''</div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: now = datetime.now()</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: now</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">241762</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: <span class=\"keyword\">print</span> now</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">20</span>:<span class=\"number\">11</span>:<span class=\"number\">07.241762</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: type(now)</div><div class=\"line\">Out[<span class=\"number\">5</span>]: datetime.datetime</div></pre></td></tr></table></figure>\n<h4 id=\"特定时间\"><a href=\"#特定时间\" class=\"headerlink\" title=\"特定时间\"></a>特定时间</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: day = datetime(<span class=\"number\">2017</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: day</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: <span class=\"keyword\">print</span> day</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">13</span>:<span class=\"number\">14</span>:<span class=\"number\">00</span></div></pre></td></tr></table></figure>\n<h4 id=\"时间加减\"><a href=\"#时间加减\" class=\"headerlink\" title=\"时间加减\"></a>时间加减</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，需要导入timedelta</div><div class=\"line\">'''</div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime,timedelta</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: now = datetime.now()</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: now</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: now+timedelta(hours=<span class=\"number\">2</span>)</div><div class=\"line\">Out[<span class=\"number\">4</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">23</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: now-timedelta(days=<span class=\"number\">2</span>)</div><div class=\"line\">Out[<span class=\"number\">5</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">21</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: now+timedelta(days=<span class=\"number\">1</span>,hours=<span class=\"number\">1</span>)</div><div class=\"line\">Out[<span class=\"number\">6</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"时区转换\"><a href=\"#时区转换\" class=\"headerlink\" title=\"时区转换\"></a>时区转换</h4><p>时区对应的时间戳转换问题<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pytz, time</div><div class=\"line\">    </div><div class=\"line\">date_str = <span class=\"string\">'2019-04-23 14:29:18.106'</span></div><div class=\"line\">utc = pytz.timezone(<span class=\"string\">'UTC'</span>)</div><div class=\"line\">tz = pytz.timezone(<span class=\"string\">'Asia/Shanghai'</span>)</div><div class=\"line\">now = datetime.now(tz)</div><div class=\"line\">print(<span class=\"string\">'now----&gt;'</span>, now, now.astimezone(utc))</div><div class=\"line\">aytime = datetime.strptime(date_str, <span class=\"string\">'%Y-%m-%d %H:%M:%S.%f'</span>)</div><div class=\"line\">ts = int(aytime.timestamp())</div><div class=\"line\">tz_datetime = datetime.fromtimestamp(ts, tz)  <span class=\"comment\"># 中国时间</span></div><div class=\"line\">tz_stamp = time.mktime(tz_datetime.timetuple())</div><div class=\"line\">print(<span class=\"string\">'tz_stamp---&gt;'</span>, tz_stamp)</div><div class=\"line\">utc_datetime = datetime.fromtimestamp(ts, utc)  <span class=\"comment\"># UTC时间</span></div><div class=\"line\">utc_stamp = time.mktime(utc_datetime.timetuple())</div><div class=\"line\">print(<span class=\"string\">'utc_stamp---&gt;'</span>, utc_stamp)</div><div class=\"line\">print(<span class=\"string\">'------&gt;'</span>, tz_datetime, utc_datetime)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>日常工作中常用到时间处理，一般使用datetime模块来解决，datetime模块包括一些函数和类，用于完成日期和时间的解析、格式化和相关的运行.</p>\n<h4 id=\"时间转换为字符串-格式化输出\"><a href=\"#时间转换为字符串-格式化输出\" class=\"headerlink\" title=\"时间转换为字符串(格式化输出)\"></a>时间转换为字符串(格式化输出)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">datetime.datetime.now().strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>)</div><div class=\"line\"><span class=\"comment\"># strftime参数，strftime(format[, tuple]) -&gt; string</span></div><div class=\"line\">python中时间日期格式化符号：</div><div class=\"line\">%y 两位数的年份表示（<span class=\"number\">00</span><span class=\"number\">-99</span>）</div><div class=\"line\">%Y 四位数的年份表示（<span class=\"number\">000</span><span class=\"number\">-9999</span>）</div><div class=\"line\">%m 月份（<span class=\"number\">01</span><span class=\"number\">-12</span>）</div><div class=\"line\">%d 月内中的一天（<span class=\"number\">0</span><span class=\"number\">-31</span>）</div><div class=\"line\">%H <span class=\"number\">24</span>小时制小时数（<span class=\"number\">0</span><span class=\"number\">-23</span>）</div><div class=\"line\">%I <span class=\"number\">12</span>小时制小时数（<span class=\"number\">01</span><span class=\"number\">-12</span>）</div><div class=\"line\">%M 分钟数（<span class=\"number\">00</span><span class=\"number\">-59</span>）</div><div class=\"line\">%S 秒（<span class=\"number\">00</span><span class=\"number\">-59</span>）</div><div class=\"line\">%a 本地简化星期名称</div><div class=\"line\">%A 本地完整星期名称</div><div class=\"line\">%b 本地简化的月份名称</div><div class=\"line\">%B 本地完整的月份名称</div><div class=\"line\">%c 本地相应的日期表示和时间表示</div><div class=\"line\">%j 年内的一天（<span class=\"number\">001</span><span class=\"number\">-366</span>）</div><div class=\"line\">%p 本地A.M.或P.M.的等价符</div><div class=\"line\">%U 一年中的星期数（<span class=\"number\">00</span><span class=\"number\">-53</span>）星期天为星期的开始</div><div class=\"line\">%w 星期（<span class=\"number\">0</span><span class=\"number\">-6</span>），星期天为星期的开始</div><div class=\"line\">%W 一年中的星期数（<span class=\"number\">00</span><span class=\"number\">-53</span>）星期一为星期的开始</div><div class=\"line\">%x 本地相应的日期表示</div><div class=\"line\">%X 本地相应的时间表示</div><div class=\"line\">%Z 当前时区的名称</div><div class=\"line\">%% %号本身</div></pre></td></tr></table></figure>\n<h4 id=\"字符串和datetime转换\"><a href=\"#字符串和datetime转换\" class=\"headerlink\" title=\"字符串和datetime转换\"></a>字符串和datetime转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">把str转换为datetime,转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串</div><div class=\"line\">'''</span></div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: <span class=\"keyword\">print</span> datetime.now()</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">21</span>:<span class=\"number\">10</span>:<span class=\"number\">03.619051</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: type(datetime.now())</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: str = <span class=\"string\">'2017-04-10 21:13:14'</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: type(str)</div><div class=\"line\">Out[<span class=\"number\">5</span>]: str</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: daytime = datetime.strptime(str,<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">7</span>]: daytime</div><div class=\"line\">Out[<span class=\"number\">7</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">8</span>]: <span class=\"keyword\">print</span> daytime</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">21</span>:<span class=\"number\">13</span>:<span class=\"number\">14</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">9</span>]: type(daytime)</div><div class=\"line\">Out[<span class=\"number\">9</span>]: datetime.datetime</div></pre></td></tr></table></figure>\n<h4 id=\"data和datetime转换\"><a href=\"#data和datetime转换\" class=\"headerlink\" title=\"data和datetime转换\"></a>data和datetime转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># datetime ——&gt; date</span></div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">import</span> datetime</div><div class=\"line\">In [<span class=\"number\">2</span>]: datetime.datetime.now().date()</div><div class=\"line\">Out[<span class=\"number\">2</span>]: datetime.date(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># date ——&gt; datetime</span></div><div class=\"line\">In [<span class=\"number\">5</span>]: today = datetime.date.today()</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: datetime.datetime.combine(today, datetime.time())</div><div class=\"line\">Out[<span class=\"number\">6</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</div><div class=\"line\">In [<span class=\"number\">7</span>]: datetime.datetime.combine(today, datetime.time.min)</div><div class=\"line\">Out[<span class=\"number\">7</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"当前时间\"><a href=\"#当前时间\" class=\"headerlink\" title=\"当前时间\"></a>当前时间</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入。</div><div class=\"line\">如果仅导入import datetime，则需要使用datetime.datetime.now()返回当前日期和时间，其类型是datetime</div><div class=\"line\">'''</span></div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: now = datetime.now()</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: now</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">241762</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: <span class=\"keyword\">print</span> now</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">20</span>:<span class=\"number\">11</span>:<span class=\"number\">07.241762</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: type(now)</div><div class=\"line\">Out[<span class=\"number\">5</span>]: datetime.datetime</div></pre></td></tr></table></figure>\n<h4 id=\"特定时间\"><a href=\"#特定时间\" class=\"headerlink\" title=\"特定时间\"></a>特定时间</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: day = datetime(<span class=\"number\">2017</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: day</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: <span class=\"keyword\">print</span> day</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-10</span> <span class=\"number\">13</span>:<span class=\"number\">14</span>:<span class=\"number\">00</span></div></pre></td></tr></table></figure>\n<h4 id=\"时间加减\"><a href=\"#时间加减\" class=\"headerlink\" title=\"时间加减\"></a>时间加减</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，需要导入timedelta</div><div class=\"line\">'''</span></div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime,timedelta</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: now = datetime.now()</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: now</div><div class=\"line\">Out[<span class=\"number\">3</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: now+timedelta(hours=<span class=\"number\">2</span>)</div><div class=\"line\">Out[<span class=\"number\">4</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">23</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: now-timedelta(days=<span class=\"number\">2</span>)</div><div class=\"line\">Out[<span class=\"number\">5</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">21</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: now+timedelta(days=<span class=\"number\">1</span>,hours=<span class=\"number\">1</span>)</div><div class=\"line\">Out[<span class=\"number\">6</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">39</span>, <span class=\"number\">8</span>, <span class=\"number\">413031</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"时区转换\"><a href=\"#时区转换\" class=\"headerlink\" title=\"时区转换\"></a>时区转换</h4><p>时区对应的时间戳转换问题<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pytz, time</div><div class=\"line\">    </div><div class=\"line\">date_str = <span class=\"string\">'2019-04-23 14:29:18.106'</span></div><div class=\"line\">utc = pytz.timezone(<span class=\"string\">'UTC'</span>)</div><div class=\"line\">tz = pytz.timezone(<span class=\"string\">'Asia/Shanghai'</span>)</div><div class=\"line\">now = datetime.now(tz)</div><div class=\"line\">print(<span class=\"string\">'now----&gt;'</span>, now, now.astimezone(utc))</div><div class=\"line\">aytime = datetime.strptime(date_str, <span class=\"string\">'%Y-%m-%d %H:%M:%S.%f'</span>)</div><div class=\"line\">ts = int(aytime.timestamp())</div><div class=\"line\">tz_datetime = datetime.fromtimestamp(ts, tz)  <span class=\"comment\"># 中国时间</span></div><div class=\"line\">tz_stamp = time.mktime(tz_datetime.timetuple())</div><div class=\"line\">print(<span class=\"string\">'tz_stamp---&gt;'</span>, tz_stamp)</div><div class=\"line\">utc_datetime = datetime.fromtimestamp(ts, utc)  <span class=\"comment\"># UTC时间</span></div><div class=\"line\">utc_stamp = time.mktime(utc_datetime.timetuple())</div><div class=\"line\">print(<span class=\"string\">'utc_stamp---&gt;'</span>, utc_stamp)</div><div class=\"line\">print(<span class=\"string\">'------&gt;'</span>, tz_datetime, utc_datetime)</div></pre></td></tr></table></figure></p>\n"},{"title":"Python Collections模块","date":"2017-07-02T12:53:00.000Z","_content":"Python拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：\n\n#### namedtuple\n功能:将名称映射到序列的元素上 namedtuple是不可变的;用于将元祖的位置访问转换为通过名称访问,使代码易读；\n常用于将csv/sqlite3中得到的大型元祖列表,通过元素来访问数据,容易出错,这时将返回的元祖转换为命名元祖就很有必要\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import namedtuple\nimport csv\n \nEmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')  # typename: 元组名称 field_names: 元祖字段名称\nfor emp in map(EmployeeRecord._make, csv.reader(open(\"employees.csv\", \"rb\"))):\n    print emp.name, emp.title\n \nimport sqlite3\nconn = sqlite3.connect('/companydata')\ncursor = conn.cursor()\ncursor.execute('SELECT name, age, title, department, paygrade FROM employees')\nfor emp in map(EmployeeRecord._make, cursor.fetchall()):\n    print emp.name, emp.title\n \ndict_website=[('a','www.a.com','aaa'),('b','www.b.com','bbb'),('c','www.c.com','ccc')]\nname_websit = namedtuple('sites',['name','www','finder'])\nfor website in dict_website:\n    print  name_websit._make(website)\n \nSubscriber = namedtuple('Sub', 'addr, joined, name')\nlist_demo = ('cd', '2017-07-01', 'ttxsgoto')\nprint Subscriber._make(list_demo)\nttxsgoto = Subscriber('ttxs', '2017-07-01', 'goto')\nprint ttxsgoto\nprint ttxsgoto.addr, ttxsgoto.joined, len(ttxsgoto)\n########## 结果 ##########\n\"\"\"\nsites(name='a', www='www.a.com', finder='aaa')\nsites(name='b', www='www.b.com', finder='bbb')\nsites(name='c', www='www.c.com', finder='ccc')\nSub(addr='cd', joined='2017-07-01', name='ttxsgoto')\nSub(addr='ttxs', joined='2017-07-01', name='goto')\nttxs 2017-07-01 3\n\"\"\"\n```\n#### Counter\n功能:统计序列中元素出现的次数\nmost_common(n): 统计出现次数,从高到低,依次排列个数\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import Counter\n \ndefault_list = ['a', 'b', 'b', 1, 1, 3]\nc = Counter(default_list)\n \nprint c, c.most_common(2)\n########## 结果 ##########\n# Counter({1: 2, 'b': 2, 'a': 1, 3: 1}) [(1, 2), ('b', 2)]\n```\n#### OrderedDict\n功能:指定字典中的顺序,根据添加顺序排序,大小为普通dict的2倍多\n因为添加了额外的链表,如果涉及大量数据,需要考虑本身占用的内存\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import OrderedDict\n \nitems = (\n    ('a',1),\n    ('b',2),\n    ('c',3),\n)\n \ndefault_dict = dict(items)\norder_dict = OrderedDict(items)\n \nprint default_dict, order_dict\n########## 结果 ##########\n# {'a': 1, 'c': 3, 'b': 2} OrderedDict([('a', 1), ('b', 2), ('c', 3)])\n\n```\n#### defaultdict\n功能:带有默认值的字典, 一键多值的字典\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import defaultdict\n \nmembers = (\n    ['male', 'John'],\n    ['male', 'Jack'],\n    ['female', 'Lily'],\n    ['male', 'Pony'],\n    ['female', 'Lucy'],\n)\n \nresult_list = defaultdict(list)  # 默认列表\nresult_dict = defaultdict(dict)  # 默认字典\nresult_set = defaultdict(set)    # 默认集合\n \nfor sex, name in members:\n    result_list[sex].append(name)  # 列表\n    result_dict[sex] = name        # 字典\n    result_set[sex].add(name)      # 集合\n \nprint result_list, result_dict, result_set\n########## 结果 ##########\n\"\"\"\ndefaultdict(<type 'list'>, {'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']})\ndefaultdict(<type 'dict'>, {'male': 'Pony', 'female': 'Lucy'})\ndefaultdict(<type 'set'>, {'male': set(['John', 'Pony', 'Jack']), 'female': set(['Lily', 'Lucy'])})\n\"\"\"\n```\n\n#### 参考链接\nhttps://docs.python.org/2/library/collections.html#module-collections\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/collections.md","raw":"---\ntitle: Python Collections模块\ndate: 2017-07-02 20:53:00\ntags:\n  - Collections\ncategories:\n  - python\n---\nPython拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：\n\n#### namedtuple\n功能:将名称映射到序列的元素上 namedtuple是不可变的;用于将元祖的位置访问转换为通过名称访问,使代码易读；\n常用于将csv/sqlite3中得到的大型元祖列表,通过元素来访问数据,容易出错,这时将返回的元祖转换为命名元祖就很有必要\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import namedtuple\nimport csv\n \nEmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')  # typename: 元组名称 field_names: 元祖字段名称\nfor emp in map(EmployeeRecord._make, csv.reader(open(\"employees.csv\", \"rb\"))):\n    print emp.name, emp.title\n \nimport sqlite3\nconn = sqlite3.connect('/companydata')\ncursor = conn.cursor()\ncursor.execute('SELECT name, age, title, department, paygrade FROM employees')\nfor emp in map(EmployeeRecord._make, cursor.fetchall()):\n    print emp.name, emp.title\n \ndict_website=[('a','www.a.com','aaa'),('b','www.b.com','bbb'),('c','www.c.com','ccc')]\nname_websit = namedtuple('sites',['name','www','finder'])\nfor website in dict_website:\n    print  name_websit._make(website)\n \nSubscriber = namedtuple('Sub', 'addr, joined, name')\nlist_demo = ('cd', '2017-07-01', 'ttxsgoto')\nprint Subscriber._make(list_demo)\nttxsgoto = Subscriber('ttxs', '2017-07-01', 'goto')\nprint ttxsgoto\nprint ttxsgoto.addr, ttxsgoto.joined, len(ttxsgoto)\n########## 结果 ##########\n\"\"\"\nsites(name='a', www='www.a.com', finder='aaa')\nsites(name='b', www='www.b.com', finder='bbb')\nsites(name='c', www='www.c.com', finder='ccc')\nSub(addr='cd', joined='2017-07-01', name='ttxsgoto')\nSub(addr='ttxs', joined='2017-07-01', name='goto')\nttxs 2017-07-01 3\n\"\"\"\n```\n#### Counter\n功能:统计序列中元素出现的次数\nmost_common(n): 统计出现次数,从高到低,依次排列个数\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import Counter\n \ndefault_list = ['a', 'b', 'b', 1, 1, 3]\nc = Counter(default_list)\n \nprint c, c.most_common(2)\n########## 结果 ##########\n# Counter({1: 2, 'b': 2, 'a': 1, 3: 1}) [(1, 2), ('b', 2)]\n```\n#### OrderedDict\n功能:指定字典中的顺序,根据添加顺序排序,大小为普通dict的2倍多\n因为添加了额外的链表,如果涉及大量数据,需要考虑本身占用的内存\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import OrderedDict\n \nitems = (\n    ('a',1),\n    ('b',2),\n    ('c',3),\n)\n \ndefault_dict = dict(items)\norder_dict = OrderedDict(items)\n \nprint default_dict, order_dict\n########## 结果 ##########\n# {'a': 1, 'c': 3, 'b': 2} OrderedDict([('a', 1), ('b', 2), ('c', 3)])\n\n```\n#### defaultdict\n功能:带有默认值的字典, 一键多值的字典\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom collections import defaultdict\n \nmembers = (\n    ['male', 'John'],\n    ['male', 'Jack'],\n    ['female', 'Lily'],\n    ['male', 'Pony'],\n    ['female', 'Lucy'],\n)\n \nresult_list = defaultdict(list)  # 默认列表\nresult_dict = defaultdict(dict)  # 默认字典\nresult_set = defaultdict(set)    # 默认集合\n \nfor sex, name in members:\n    result_list[sex].append(name)  # 列表\n    result_dict[sex] = name        # 字典\n    result_set[sex].add(name)      # 集合\n \nprint result_list, result_dict, result_set\n########## 结果 ##########\n\"\"\"\ndefaultdict(<type 'list'>, {'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']})\ndefaultdict(<type 'dict'>, {'male': 'Pony', 'female': 'Lucy'})\ndefaultdict(<type 'set'>, {'male': set(['John', 'Pony', 'Jack']), 'female': set(['Lily', 'Lucy'])})\n\"\"\"\n```\n\n#### 参考链接\nhttps://docs.python.org/2/library/collections.html#module-collections\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"collections","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5ve0018ct8umtgs15fi","content":"<p>Python拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：</p>\n<h4 id=\"namedtuple\"><a href=\"#namedtuple\" class=\"headerlink\" title=\"namedtuple\"></a>namedtuple</h4><p>功能:将名称映射到序列的元素上 namedtuple是不可变的;用于将元祖的位置访问转换为通过名称访问,使代码易读；<br>常用于将csv/sqlite3中得到的大型元祖列表,通过元素来访问数据,容易出错,这时将返回的元祖转换为命名元祖就很有必要<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</div><div class=\"line\"><span class=\"keyword\">import</span> csv</div><div class=\"line\"> </div><div class=\"line\">EmployeeRecord = namedtuple(<span class=\"string\">'EmployeeRecord'</span>, <span class=\"string\">'name, age, title, department, paygrade'</span>)  <span class=\"comment\"># typename: 元组名称 field_names: 元祖字段名称</span></div><div class=\"line\"><span class=\"keyword\">for</span> emp <span class=\"keyword\">in</span> map(EmployeeRecord._make, csv.reader(open(<span class=\"string\">\"employees.csv\"</span>, <span class=\"string\">\"rb\"</span>))):</div><div class=\"line\">    <span class=\"keyword\">print</span> emp.name, emp.title</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\">conn = sqlite3.connect(<span class=\"string\">'/companydata'</span>)</div><div class=\"line\">cursor = conn.cursor()</div><div class=\"line\">cursor.execute(<span class=\"string\">'SELECT name, age, title, department, paygrade FROM employees'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> emp <span class=\"keyword\">in</span> map(EmployeeRecord._make, cursor.fetchall()):</div><div class=\"line\">    <span class=\"keyword\">print</span> emp.name, emp.title</div><div class=\"line\"> </div><div class=\"line\">dict_website=[(<span class=\"string\">'a'</span>,<span class=\"string\">'www.a.com'</span>,<span class=\"string\">'aaa'</span>),(<span class=\"string\">'b'</span>,<span class=\"string\">'www.b.com'</span>,<span class=\"string\">'bbb'</span>),(<span class=\"string\">'c'</span>,<span class=\"string\">'www.c.com'</span>,<span class=\"string\">'ccc'</span>)]</div><div class=\"line\">name_websit = namedtuple(<span class=\"string\">'sites'</span>,[<span class=\"string\">'name'</span>,<span class=\"string\">'www'</span>,<span class=\"string\">'finder'</span>])</div><div class=\"line\"><span class=\"keyword\">for</span> website <span class=\"keyword\">in</span> dict_website:</div><div class=\"line\">    <span class=\"keyword\">print</span>  name_websit._make(website)</div><div class=\"line\"> </div><div class=\"line\">Subscriber = namedtuple(<span class=\"string\">'Sub'</span>, <span class=\"string\">'addr, joined, name'</span>)</div><div class=\"line\">list_demo = (<span class=\"string\">'cd'</span>, <span class=\"string\">'2017-07-01'</span>, <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> Subscriber._make(list_demo)</div><div class=\"line\">ttxsgoto = Subscriber(<span class=\"string\">'ttxs'</span>, <span class=\"string\">'2017-07-01'</span>, <span class=\"string\">'goto'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> ttxsgoto</div><div class=\"line\"><span class=\"keyword\">print</span> ttxsgoto.addr, ttxsgoto.joined, len(ttxsgoto)</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">sites(name='a', www='www.a.com', finder='aaa')</div><div class=\"line\">sites(name='b', www='www.b.com', finder='bbb')</div><div class=\"line\">sites(name='c', www='www.c.com', finder='ccc')</div><div class=\"line\">Sub(addr='cd', joined='2017-07-01', name='ttxsgoto')</div><div class=\"line\">Sub(addr='ttxs', joined='2017-07-01', name='goto')</div><div class=\"line\">ttxs 2017-07-01 3</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure></p>\n<h4 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h4><p>功能:统计序列中元素出现的次数<br>most_common(n): 统计出现次数,从高到低,依次排列个数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</div><div class=\"line\"> </div><div class=\"line\">default_list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'b'</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">c = Counter(default_list)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> c, c.most_common(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"comment\"># Counter(&#123;1: 2, 'b': 2, 'a': 1, 3: 1&#125;) [(1, 2), ('b', 2)]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"OrderedDict\"><a href=\"#OrderedDict\" class=\"headerlink\" title=\"OrderedDict\"></a>OrderedDict</h4><p>功能:指定字典中的顺序,根据添加顺序排序,大小为普通dict的2倍多<br>因为添加了额外的链表,如果涉及大量数据,需要考虑本身占用的内存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</div><div class=\"line\"> </div><div class=\"line\">items = (</div><div class=\"line\">    (<span class=\"string\">'a'</span>,<span class=\"number\">1</span>),</div><div class=\"line\">    (<span class=\"string\">'b'</span>,<span class=\"number\">2</span>),</div><div class=\"line\">    (<span class=\"string\">'c'</span>,<span class=\"number\">3</span>),</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">default_dict = dict(items)</div><div class=\"line\">order_dict = OrderedDict(items)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> default_dict, order_dict</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"comment\"># &#123;'a': 1, 'c': 3, 'b': 2&#125; OrderedDict([('a', 1), ('b', 2), ('c', 3)])</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h4><p>功能:带有默认值的字典, 一键多值的字典<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</div><div class=\"line\"> </div><div class=\"line\">members = (</div><div class=\"line\">    [<span class=\"string\">'male'</span>, <span class=\"string\">'John'</span>],</div><div class=\"line\">    [<span class=\"string\">'male'</span>, <span class=\"string\">'Jack'</span>],</div><div class=\"line\">    [<span class=\"string\">'female'</span>, <span class=\"string\">'Lily'</span>],</div><div class=\"line\">    [<span class=\"string\">'male'</span>, <span class=\"string\">'Pony'</span>],</div><div class=\"line\">    [<span class=\"string\">'female'</span>, <span class=\"string\">'Lucy'</span>],</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">result_list = defaultdict(list)  <span class=\"comment\"># 默认列表</span></div><div class=\"line\">result_dict = defaultdict(dict)  <span class=\"comment\"># 默认字典</span></div><div class=\"line\">result_set = defaultdict(set)    <span class=\"comment\"># 默认集合</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> sex, name <span class=\"keyword\">in</span> members:</div><div class=\"line\">    result_list[sex].append(name)  <span class=\"comment\"># 列表</span></div><div class=\"line\">    result_dict[sex] = name        <span class=\"comment\"># 字典</span></div><div class=\"line\">    result_set[sex].add(name)      <span class=\"comment\"># 集合</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> result_list, result_dict, result_set</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">defaultdict(&lt;type 'list'&gt;, &#123;'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']&#125;)</div><div class=\"line\">defaultdict(&lt;type 'dict'&gt;, &#123;'male': 'Pony', 'female': 'Lucy'&#125;)</div><div class=\"line\">defaultdict(&lt;type 'set'&gt;, &#123;'male': set(['John', 'Pony', 'Jack']), 'female': set(['Lily', 'Lucy'])&#125;)</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://docs.python.org/2/library/collections.html#module-collections\" target=\"_blank\" rel=\"external\">https://docs.python.org/2/library/collections.html#module-collections</a></p>\n","excerpt":"","more":"<p>Python拥有内置的数据类型，比如str, int, list, tuple, dict；collections模块在这基础上进行了扩展，使用更加灵活，常用方法整理如下：</p>\n<h4 id=\"namedtuple\"><a href=\"#namedtuple\" class=\"headerlink\" title=\"namedtuple\"></a>namedtuple</h4><p>功能:将名称映射到序列的元素上 namedtuple是不可变的;用于将元祖的位置访问转换为通过名称访问,使代码易读；<br>常用于将csv/sqlite3中得到的大型元祖列表,通过元素来访问数据,容易出错,这时将返回的元祖转换为命名元祖就很有必要<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</div><div class=\"line\"><span class=\"keyword\">import</span> csv</div><div class=\"line\"> </div><div class=\"line\">EmployeeRecord = namedtuple(<span class=\"string\">'EmployeeRecord'</span>, <span class=\"string\">'name, age, title, department, paygrade'</span>)  <span class=\"comment\"># typename: 元组名称 field_names: 元祖字段名称</span></div><div class=\"line\"><span class=\"keyword\">for</span> emp <span class=\"keyword\">in</span> map(EmployeeRecord._make, csv.reader(open(<span class=\"string\">\"employees.csv\"</span>, <span class=\"string\">\"rb\"</span>))):</div><div class=\"line\">    <span class=\"keyword\">print</span> emp.name, emp.title</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\">conn = sqlite3.connect(<span class=\"string\">'/companydata'</span>)</div><div class=\"line\">cursor = conn.cursor()</div><div class=\"line\">cursor.execute(<span class=\"string\">'SELECT name, age, title, department, paygrade FROM employees'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> emp <span class=\"keyword\">in</span> map(EmployeeRecord._make, cursor.fetchall()):</div><div class=\"line\">    <span class=\"keyword\">print</span> emp.name, emp.title</div><div class=\"line\"> </div><div class=\"line\">dict_website=[(<span class=\"string\">'a'</span>,<span class=\"string\">'www.a.com'</span>,<span class=\"string\">'aaa'</span>),(<span class=\"string\">'b'</span>,<span class=\"string\">'www.b.com'</span>,<span class=\"string\">'bbb'</span>),(<span class=\"string\">'c'</span>,<span class=\"string\">'www.c.com'</span>,<span class=\"string\">'ccc'</span>)]</div><div class=\"line\">name_websit = namedtuple(<span class=\"string\">'sites'</span>,[<span class=\"string\">'name'</span>,<span class=\"string\">'www'</span>,<span class=\"string\">'finder'</span>])</div><div class=\"line\"><span class=\"keyword\">for</span> website <span class=\"keyword\">in</span> dict_website:</div><div class=\"line\">    <span class=\"keyword\">print</span>  name_websit._make(website)</div><div class=\"line\"> </div><div class=\"line\">Subscriber = namedtuple(<span class=\"string\">'Sub'</span>, <span class=\"string\">'addr, joined, name'</span>)</div><div class=\"line\">list_demo = (<span class=\"string\">'cd'</span>, <span class=\"string\">'2017-07-01'</span>, <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> Subscriber._make(list_demo)</div><div class=\"line\">ttxsgoto = Subscriber(<span class=\"string\">'ttxs'</span>, <span class=\"string\">'2017-07-01'</span>, <span class=\"string\">'goto'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> ttxsgoto</div><div class=\"line\"><span class=\"keyword\">print</span> ttxsgoto.addr, ttxsgoto.joined, len(ttxsgoto)</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">sites(name='a', www='www.a.com', finder='aaa')</div><div class=\"line\">sites(name='b', www='www.b.com', finder='bbb')</div><div class=\"line\">sites(name='c', www='www.c.com', finder='ccc')</div><div class=\"line\">Sub(addr='cd', joined='2017-07-01', name='ttxsgoto')</div><div class=\"line\">Sub(addr='ttxs', joined='2017-07-01', name='goto')</div><div class=\"line\">ttxs 2017-07-01 3</div><div class=\"line\">\"\"\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h4><p>功能:统计序列中元素出现的次数<br>most_common(n): 统计出现次数,从高到低,依次排列个数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</div><div class=\"line\"> </div><div class=\"line\">default_list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'b'</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">c = Counter(default_list)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> c, c.most_common(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"comment\"># Counter(&#123;1: 2, 'b': 2, 'a': 1, 3: 1&#125;) [(1, 2), ('b', 2)]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"OrderedDict\"><a href=\"#OrderedDict\" class=\"headerlink\" title=\"OrderedDict\"></a>OrderedDict</h4><p>功能:指定字典中的顺序,根据添加顺序排序,大小为普通dict的2倍多<br>因为添加了额外的链表,如果涉及大量数据,需要考虑本身占用的内存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</div><div class=\"line\"> </div><div class=\"line\">items = (</div><div class=\"line\">    (<span class=\"string\">'a'</span>,<span class=\"number\">1</span>),</div><div class=\"line\">    (<span class=\"string\">'b'</span>,<span class=\"number\">2</span>),</div><div class=\"line\">    (<span class=\"string\">'c'</span>,<span class=\"number\">3</span>),</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">default_dict = dict(items)</div><div class=\"line\">order_dict = OrderedDict(items)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> default_dict, order_dict</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"comment\"># &#123;'a': 1, 'c': 3, 'b': 2&#125; OrderedDict([('a', 1), ('b', 2), ('c', 3)])</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h4><p>功能:带有默认值的字典, 一键多值的字典<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</div><div class=\"line\"> </div><div class=\"line\">members = (</div><div class=\"line\">    [<span class=\"string\">'male'</span>, <span class=\"string\">'John'</span>],</div><div class=\"line\">    [<span class=\"string\">'male'</span>, <span class=\"string\">'Jack'</span>],</div><div class=\"line\">    [<span class=\"string\">'female'</span>, <span class=\"string\">'Lily'</span>],</div><div class=\"line\">    [<span class=\"string\">'male'</span>, <span class=\"string\">'Pony'</span>],</div><div class=\"line\">    [<span class=\"string\">'female'</span>, <span class=\"string\">'Lucy'</span>],</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">result_list = defaultdict(list)  <span class=\"comment\"># 默认列表</span></div><div class=\"line\">result_dict = defaultdict(dict)  <span class=\"comment\"># 默认字典</span></div><div class=\"line\">result_set = defaultdict(set)    <span class=\"comment\"># 默认集合</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> sex, name <span class=\"keyword\">in</span> members:</div><div class=\"line\">    result_list[sex].append(name)  <span class=\"comment\"># 列表</span></div><div class=\"line\">    result_dict[sex] = name        <span class=\"comment\"># 字典</span></div><div class=\"line\">    result_set[sex].add(name)      <span class=\"comment\"># 集合</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> result_list, result_dict, result_set</div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">defaultdict(&lt;type 'list'&gt;, &#123;'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']&#125;)</div><div class=\"line\">defaultdict(&lt;type 'dict'&gt;, &#123;'male': 'Pony', 'female': 'Lucy'&#125;)</div><div class=\"line\">defaultdict(&lt;type 'set'&gt;, &#123;'male': set(['John', 'Pony', 'Jack']), 'female': set(['Lily', 'Lucy'])&#125;)</div><div class=\"line\">\"\"\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://docs.python.org/2/library/collections.html#module-collections\">https://docs.python.org/2/library/collections.html#module-collections</a></p>\n"},{"title":"Python 深拷贝/浅拷贝和赋值","date":"2017-05-24T13:38:11.000Z","_content":"\n#### 概念说明\n- 赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变类型的值时，对应内部的引用发生变化；其中可变类型(列表，字典)，不可变类型(数字，字符串，元祖)\n- 浅拷贝：只拷贝父对象，不会拷贝对象的内部的子对象,只是原对象元素的引用，下列操作相当于浅拷贝\n  \t- 使用切片操作[:]\n  \t- 使用list/dir/set\n  \t- 使用copy.copy()\n- 深拷贝：拷贝对象及其子对象,创建一个新的对象，不使用原来的对应对象引用\n\n\n#### 实例\n\n##### 赋值\n\n```python\nIn [1]: l1 = [1, 2, 3, [4, 5], (7,8)]\n \nIn [2]: l2 = l1\n \nIn [3]: id(l1), id(l2)\nOut[3]: (4360956240, 4360956240)\t# 指向相同的内存地址\n \nIn [4]: l1[3].append(6)\n \nIn [5]: l1\nOut[5]: [1, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [6]: l2\nOut[6]: [1, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [7]: id(l1), id(l2)\nOut[7]: (4360956240, 4360956240)\n \nIn [8]: l2[0] = 0\n \nIn [9]: l2\nOut[9]: [0, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [10]: l1\nOut[10]: [0, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [11]: l1 is l2\nOut[11]: True\n \nIn [12]: id(l1[3])\nOut[12]: 4360955808\n \nIn [13]: id(l2[3])\nOut[13]: 4360955808\n```\n##### 浅拷贝\n\n```python\nimport copy\n \nl1 = [3, [66, 55, 44], (7, 8, 9)]\n \n# l2 = list(l1)\t# 相当于浅拷贝操作,l1 l2代表不同的列表，但两者引用同一个列表和元祖，如下图一\nl2 = copy.copy(l1)\n \nprint '=================《流畅的python》第217页 浅拷贝================='\nprint 'id-----',id(l1[1]), id(l2[1])\t# 4318639744 4318639744\nprint 'id-----',id(l1), id(l2)\t# 4318640104 4318555600\n \nl1.append(100) # [3, [66, 55, 44], (7, 8, 9), 100]\nl1[1].remove(55) #  [3, [66, 44], (7, 8, 9), 100]\nprint 'l1---->', l1 # [3, [66, 44], (7, 8, 9), 100]\nprint 'l2---->', l2 # [3, [66, 44], (7, 8, 9)]\nprint '============================================='\nl2[1] += [33, 22] # [3, [66, 44, 33, 22], (7, 8, 9)]\nl2[2] += (10, 11) # [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]\nprint 'l1====>', l1 # [3, [66, 44, 33, 22], (7, 8, 9), 100]\nprint 'l2====>', l2 # [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]\nprint '================= 如下图二===================='\n```\n![图一](https://ttxsgoto.github.io/img/copy/copy01.png)\n![图二](https://ttxsgoto.github.io/img/copy/copy02.png)\n\n##### 深拷贝\n\n```python\nimport copy\n \nclass Bus(object):\n \n    def __init__(self, passengers=None):\n        if passengers is None:\n            self.passengers = []\n        else:\n            self.passengers = list(passengers)\n \n    def pick(self, name):\n        self.passengers.append(name)\n \n    def drop(self, name):\n        self.passengers.remove(name)\n \nbus1 = Bus(['AAA', 'BBB', 'CCC'])\nbus2 = copy.copy(bus1)\nbus3 = copy.deepcopy(bus1)\n \nprint id(bus1), id(bus2), id(bus3)\n# 4318715792 4318757008 4318757072\n \nbus1.drop('AAA')\nprint bus2.passengers\n# [u'BBB', u'CCC']\nprint id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)\n# 4560506320 4560506320 4560590464 bus2是bus1的浅复制的副本,所以id相同\nprint bus3.passengers\n# [u'AAA', u'BBB', u'CCC']\n```\n\n\n\n\n\n\n","source":"_posts/copy-deepcopy.md","raw":"---\ntitle: Python 深拷贝/浅拷贝和赋值\ndate: 2017-05-24 21:38:11\ntags:\n  - Copy\n  - Deepcopy\ncategories:\n  - python\n---\n\n#### 概念说明\n- 赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变类型的值时，对应内部的引用发生变化；其中可变类型(列表，字典)，不可变类型(数字，字符串，元祖)\n- 浅拷贝：只拷贝父对象，不会拷贝对象的内部的子对象,只是原对象元素的引用，下列操作相当于浅拷贝\n  \t- 使用切片操作[:]\n  \t- 使用list/dir/set\n  \t- 使用copy.copy()\n- 深拷贝：拷贝对象及其子对象,创建一个新的对象，不使用原来的对应对象引用\n\n\n#### 实例\n\n##### 赋值\n\n```python\nIn [1]: l1 = [1, 2, 3, [4, 5], (7,8)]\n \nIn [2]: l2 = l1\n \nIn [3]: id(l1), id(l2)\nOut[3]: (4360956240, 4360956240)\t# 指向相同的内存地址\n \nIn [4]: l1[3].append(6)\n \nIn [5]: l1\nOut[5]: [1, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [6]: l2\nOut[6]: [1, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [7]: id(l1), id(l2)\nOut[7]: (4360956240, 4360956240)\n \nIn [8]: l2[0] = 0\n \nIn [9]: l2\nOut[9]: [0, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [10]: l1\nOut[10]: [0, 2, 3, [4, 5, 6], (7, 8)]\n \nIn [11]: l1 is l2\nOut[11]: True\n \nIn [12]: id(l1[3])\nOut[12]: 4360955808\n \nIn [13]: id(l2[3])\nOut[13]: 4360955808\n```\n##### 浅拷贝\n\n```python\nimport copy\n \nl1 = [3, [66, 55, 44], (7, 8, 9)]\n \n# l2 = list(l1)\t# 相当于浅拷贝操作,l1 l2代表不同的列表，但两者引用同一个列表和元祖，如下图一\nl2 = copy.copy(l1)\n \nprint '=================《流畅的python》第217页 浅拷贝================='\nprint 'id-----',id(l1[1]), id(l2[1])\t# 4318639744 4318639744\nprint 'id-----',id(l1), id(l2)\t# 4318640104 4318555600\n \nl1.append(100) # [3, [66, 55, 44], (7, 8, 9), 100]\nl1[1].remove(55) #  [3, [66, 44], (7, 8, 9), 100]\nprint 'l1---->', l1 # [3, [66, 44], (7, 8, 9), 100]\nprint 'l2---->', l2 # [3, [66, 44], (7, 8, 9)]\nprint '============================================='\nl2[1] += [33, 22] # [3, [66, 44, 33, 22], (7, 8, 9)]\nl2[2] += (10, 11) # [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]\nprint 'l1====>', l1 # [3, [66, 44, 33, 22], (7, 8, 9), 100]\nprint 'l2====>', l2 # [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]\nprint '================= 如下图二===================='\n```\n![图一](https://ttxsgoto.github.io/img/copy/copy01.png)\n![图二](https://ttxsgoto.github.io/img/copy/copy02.png)\n\n##### 深拷贝\n\n```python\nimport copy\n \nclass Bus(object):\n \n    def __init__(self, passengers=None):\n        if passengers is None:\n            self.passengers = []\n        else:\n            self.passengers = list(passengers)\n \n    def pick(self, name):\n        self.passengers.append(name)\n \n    def drop(self, name):\n        self.passengers.remove(name)\n \nbus1 = Bus(['AAA', 'BBB', 'CCC'])\nbus2 = copy.copy(bus1)\nbus3 = copy.deepcopy(bus1)\n \nprint id(bus1), id(bus2), id(bus3)\n# 4318715792 4318757008 4318757072\n \nbus1.drop('AAA')\nprint bus2.passengers\n# [u'BBB', u'CCC']\nprint id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)\n# 4560506320 4560506320 4560590464 bus2是bus1的浅复制的副本,所以id相同\nprint bus3.passengers\n# [u'AAA', u'BBB', u'CCC']\n```\n\n\n\n\n\n\n","slug":"copy-deepcopy","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vg001bct8ul7r9b7qx","content":"<h4 id=\"概念说明\"><a href=\"#概念说明\" class=\"headerlink\" title=\"概念说明\"></a>概念说明</h4><ul>\n<li>赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变类型的值时，对应内部的引用发生变化；其中可变类型(列表，字典)，不可变类型(数字，字符串，元祖)</li>\n<li>浅拷贝：只拷贝父对象，不会拷贝对象的内部的子对象,只是原对象元素的引用，下列操作相当于浅拷贝<pre><code>- 使用切片操作[:]\n- 使用list/dir/set\n- 使用copy.copy()\n</code></pre></li>\n<li>深拷贝：拷贝对象及其子对象,创建一个新的对象，不使用原来的对应对象引用</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">1</span>]: l1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>], (<span class=\"number\">7</span>,<span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: l2 = l1</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: id(l1), id(l2)</div><div class=\"line\">Out[<span class=\"number\">3</span>]: (<span class=\"number\">4360956240</span>, <span class=\"number\">4360956240</span>)\t<span class=\"comment\"># 指向相同的内存地址</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: l1[<span class=\"number\">3</span>].append(<span class=\"number\">6</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: l1</div><div class=\"line\">Out[<span class=\"number\">5</span>]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: l2</div><div class=\"line\">Out[<span class=\"number\">6</span>]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">7</span>]: id(l1), id(l2)</div><div class=\"line\">Out[<span class=\"number\">7</span>]: (<span class=\"number\">4360956240</span>, <span class=\"number\">4360956240</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">8</span>]: l2[<span class=\"number\">0</span>] = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">9</span>]: l2</div><div class=\"line\">Out[<span class=\"number\">9</span>]: [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">10</span>]: l1</div><div class=\"line\">Out[<span class=\"number\">10</span>]: [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">11</span>]: l1 <span class=\"keyword\">is</span> l2</div><div class=\"line\">Out[<span class=\"number\">11</span>]: <span class=\"keyword\">True</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">12</span>]: id(l1[<span class=\"number\">3</span>])</div><div class=\"line\">Out[<span class=\"number\">12</span>]: <span class=\"number\">4360955808</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">13</span>]: id(l2[<span class=\"number\">3</span>])</div><div class=\"line\">Out[<span class=\"number\">13</span>]: <span class=\"number\">4360955808</span></div></pre></td></tr></table></figure>\n<h5 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"> </div><div class=\"line\">l1 = [<span class=\"number\">3</span>, [<span class=\"number\">66</span>, <span class=\"number\">55</span>, <span class=\"number\">44</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># l2 = list(l1)\t# 相当于浅拷贝操作,l1 l2代表不同的列表，但两者引用同一个列表和元祖，如下图一</span></div><div class=\"line\">l2 = copy.copy(l1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'=================《流畅的python》第217页 浅拷贝================='</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'id-----'</span>,id(l1[<span class=\"number\">1</span>]), id(l2[<span class=\"number\">1</span>])\t<span class=\"comment\"># 4318639744 4318639744</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'id-----'</span>,id(l1), id(l2)\t<span class=\"comment\"># 4318640104 4318555600</span></div><div class=\"line\"> </div><div class=\"line\">l1.append(<span class=\"number\">100</span>) <span class=\"comment\"># [3, [66, 55, 44], (7, 8, 9), 100]</span></div><div class=\"line\">l1[<span class=\"number\">1</span>].remove(<span class=\"number\">55</span>) <span class=\"comment\">#  [3, [66, 44], (7, 8, 9), 100]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l1----&gt;'</span>, l1 <span class=\"comment\"># [3, [66, 44], (7, 8, 9), 100]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l2----&gt;'</span>, l2 <span class=\"comment\"># [3, [66, 44], (7, 8, 9)]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'============================================='</span></div><div class=\"line\">l2[<span class=\"number\">1</span>] += [<span class=\"number\">33</span>, <span class=\"number\">22</span>] <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9)]</span></div><div class=\"line\">l2[<span class=\"number\">2</span>] += (<span class=\"number\">10</span>, <span class=\"number\">11</span>) <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l1====&gt;'</span>, l1 <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9), 100]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l2====&gt;'</span>, l2 <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'================= 如下图二===================='</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ttxsgoto.github.io/img/copy/copy01.png\" alt=\"图一\"><br><img src=\"https://ttxsgoto.github.io/img/copy/copy02.png\" alt=\"图二\"></p>\n<h5 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            self.passengers = []</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.passengers = list(passengers)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.passengers.append(name)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.passengers.remove(name)</div><div class=\"line\"> </div><div class=\"line\">bus1 = Bus([<span class=\"string\">'AAA'</span>, <span class=\"string\">'BBB'</span>, <span class=\"string\">'CCC'</span>])</div><div class=\"line\">bus2 = copy.copy(bus1)</div><div class=\"line\">bus3 = copy.deepcopy(bus1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> id(bus1), id(bus2), id(bus3)</div><div class=\"line\"><span class=\"comment\"># 4318715792 4318757008 4318757072</span></div><div class=\"line\"> </div><div class=\"line\">bus1.drop(<span class=\"string\">'AAA'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> bus2.passengers</div><div class=\"line\"><span class=\"comment\"># [u'BBB', u'CCC']</span></div><div class=\"line\"><span class=\"keyword\">print</span> id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</div><div class=\"line\"><span class=\"comment\"># 4560506320 4560506320 4560590464 bus2是bus1的浅复制的副本,所以id相同</span></div><div class=\"line\"><span class=\"keyword\">print</span> bus3.passengers</div><div class=\"line\"><span class=\"comment\"># [u'AAA', u'BBB', u'CCC']</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"概念说明\"><a href=\"#概念说明\" class=\"headerlink\" title=\"概念说明\"></a>概念说明</h4><ul>\n<li>赋值：对象的赋值是进行对象引用（内存地址）传递，引用的地址没有变化，相当于设置了另外一个别名；注意：当修改不可变类型的值时，对应内部的引用发生变化；其中可变类型(列表，字典)，不可变类型(数字，字符串，元祖)</li>\n<li>浅拷贝：只拷贝父对象，不会拷贝对象的内部的子对象,只是原对象元素的引用，下列操作相当于浅拷贝<pre><code>- 使用切片操作[:]\n- 使用list/dir/set\n- 使用copy.copy()\n</code></pre></li>\n<li>深拷贝：拷贝对象及其子对象,创建一个新的对象，不使用原来的对应对象引用</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">In [<span class=\"number\">1</span>]: l1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>], (<span class=\"number\">7</span>,<span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: l2 = l1</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">3</span>]: id(l1), id(l2)</div><div class=\"line\">Out[<span class=\"number\">3</span>]: (<span class=\"number\">4360956240</span>, <span class=\"number\">4360956240</span>)\t<span class=\"comment\"># 指向相同的内存地址</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">4</span>]: l1[<span class=\"number\">3</span>].append(<span class=\"number\">6</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">5</span>]: l1</div><div class=\"line\">Out[<span class=\"number\">5</span>]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">6</span>]: l2</div><div class=\"line\">Out[<span class=\"number\">6</span>]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">7</span>]: id(l1), id(l2)</div><div class=\"line\">Out[<span class=\"number\">7</span>]: (<span class=\"number\">4360956240</span>, <span class=\"number\">4360956240</span>)</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">8</span>]: l2[<span class=\"number\">0</span>] = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">9</span>]: l2</div><div class=\"line\">Out[<span class=\"number\">9</span>]: [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">10</span>]: l1</div><div class=\"line\">Out[<span class=\"number\">10</span>]: [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>)]</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">11</span>]: l1 <span class=\"keyword\">is</span> l2</div><div class=\"line\">Out[<span class=\"number\">11</span>]: <span class=\"keyword\">True</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">12</span>]: id(l1[<span class=\"number\">3</span>])</div><div class=\"line\">Out[<span class=\"number\">12</span>]: <span class=\"number\">4360955808</span></div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">13</span>]: id(l2[<span class=\"number\">3</span>])</div><div class=\"line\">Out[<span class=\"number\">13</span>]: <span class=\"number\">4360955808</span></div></pre></td></tr></table></figure>\n<h5 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"> </div><div class=\"line\">l1 = [<span class=\"number\">3</span>, [<span class=\"number\">66</span>, <span class=\"number\">55</span>, <span class=\"number\">44</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># l2 = list(l1)\t# 相当于浅拷贝操作,l1 l2代表不同的列表，但两者引用同一个列表和元祖，如下图一</span></div><div class=\"line\">l2 = copy.copy(l1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'=================《流畅的python》第217页 浅拷贝================='</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'id-----'</span>,id(l1[<span class=\"number\">1</span>]), id(l2[<span class=\"number\">1</span>])\t<span class=\"comment\"># 4318639744 4318639744</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'id-----'</span>,id(l1), id(l2)\t<span class=\"comment\"># 4318640104 4318555600</span></div><div class=\"line\"> </div><div class=\"line\">l1.append(<span class=\"number\">100</span>) <span class=\"comment\"># [3, [66, 55, 44], (7, 8, 9), 100]</span></div><div class=\"line\">l1[<span class=\"number\">1</span>].remove(<span class=\"number\">55</span>) <span class=\"comment\">#  [3, [66, 44], (7, 8, 9), 100]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l1----&gt;'</span>, l1 <span class=\"comment\"># [3, [66, 44], (7, 8, 9), 100]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l2----&gt;'</span>, l2 <span class=\"comment\"># [3, [66, 44], (7, 8, 9)]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'============================================='</span></div><div class=\"line\">l2[<span class=\"number\">1</span>] += [<span class=\"number\">33</span>, <span class=\"number\">22</span>] <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9)]</span></div><div class=\"line\">l2[<span class=\"number\">2</span>] += (<span class=\"number\">10</span>, <span class=\"number\">11</span>) <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l1====&gt;'</span>, l1 <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9), 100]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'l2====&gt;'</span>, l2 <span class=\"comment\"># [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'================= 如下图二===================='</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ttxsgoto.github.io/img/copy/copy01.png\" alt=\"图一\"><br><img src=\"https://ttxsgoto.github.io/img/copy/copy02.png\" alt=\"图二\"></p>\n<h5 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            self.passengers = []</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.passengers = list(passengers)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.passengers.append(name)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.passengers.remove(name)</div><div class=\"line\"> </div><div class=\"line\">bus1 = Bus([<span class=\"string\">'AAA'</span>, <span class=\"string\">'BBB'</span>, <span class=\"string\">'CCC'</span>])</div><div class=\"line\">bus2 = copy.copy(bus1)</div><div class=\"line\">bus3 = copy.deepcopy(bus1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> id(bus1), id(bus2), id(bus3)</div><div class=\"line\"><span class=\"comment\"># 4318715792 4318757008 4318757072</span></div><div class=\"line\"> </div><div class=\"line\">bus1.drop(<span class=\"string\">'AAA'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> bus2.passengers</div><div class=\"line\"><span class=\"comment\"># [u'BBB', u'CCC']</span></div><div class=\"line\"><span class=\"keyword\">print</span> id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</div><div class=\"line\"><span class=\"comment\"># 4560506320 4560506320 4560590464 bus2是bus1的浅复制的副本,所以id相同</span></div><div class=\"line\"><span class=\"keyword\">print</span> bus3.passengers</div><div class=\"line\"><span class=\"comment\"># [u'AAA', u'BBB', u'CCC']</span></div></pre></td></tr></table></figure>\n"},{"title":"运维 CPU性能命令","date":"2017-02-05T14:05:33.000Z","_content":"### 基本概念\n---\nCPU使用率:通过测量一段时间内cpu实例忙于执行工作的时间比例获得，以百分比表示\n\nCPI(每指令周期数)：用来描述cpu如何使用它的时钟周期，同时也可以用来理解CPU使用率的本质；CPI较高代表cpu进场陷入停滞，通常都是在访问内存，较低的CPI表示cpu基本没有停滞，指令吞吐较高\n\nIPC(每周期指令数)：它为CPI的倒数\n\n饱和度：一个100%使用率的cpu称为饱和\n\n#### cpu上下文切换\n\n过多的上下文切换会把cpu时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降\n\n#### cpu使用率说明相关指标\n- user(us),代表用户态cpu时间，它不包括nice时间，包括guest时间\n- nice(ni),代表低优先级用户态cpu时间\n- system(sys),代表内核态cpu时间\n- idle(id),代表空闲时间，不包括等待io的时间(iowait)\n- irq(hi),代表处理硬中断的cpu时间\n- softirq(si),代表处理软中断的cpu时间\n- steal(st),代表当系统运行在虚拟机中的时候，被其他虚拟机占用的cpu时间\n- guest(guest),运行虚拟机的cpu时间\n- guest_nice(gnice),代表以低优先级运行虚拟机的时间\n\n#### CPU使用说明例子\n\n> CPU 很无辜，是个任劳任怨的打工仔，每时每刻都有工作在做（进程、线程）并且自己有一张工作清单（可运行队列），由老板（进程调度）来决定他该干什么，他需要 和老板沟通以便得到老板的想法并及时调整自己的工作（上下文切换），部分工作做完以后还需要及时向老板汇报（中断），所以打工仔（CPU）除了做自己该做 的工作以外，还有大量时间和精力花在沟通和汇报上。\n>\n> 打工仔接受和完成多少任务并向老板汇报了（中断）；\n>\n> 打工仔和老板沟通、协商每项工作的工作进度（上下文切换）；\n>\n> 打工仔的工作列表是不是都有排满（可运行队列）；\n>\n> 打工仔工作效率如何，是不是在偷懒（CPU 利用率）。\n\n#### 性能命令如下\n\n    - uptime\n    - top\n    - vmstart\n    - mpstat\n    - pidstat\n    - dstat\n\n说明如下：\n\n##### uptime命令，用来统计系统当前的运行状态\n        12:02:32 up 235 days, 18:58,  4 users,  load average: 0.02, 0.10, 0.07\n\n其中load average这三个值表示系统在1min，5min，15min内的平均负载，这三个值一般不能大于系统CPU的个数。如果长期大于cpu个数表示cpu不足以服务线程，说明cpu繁忙，有些线程在等待，可能会影响系统性能\n\n平均负载：表示对cpu资源的需求，通过汇总正在运行的线程数（使用率）和正在排队等待运行的线程数(饱和度)计算得到.\n\n##### top    查看负载情况 主要关注负载1,5,15min\n\n该命令显示了最消耗cpu的任务，并带有cpu消耗百分比，TIME和%CPU显示了CPU占用的时间（这里是分钟时间）\n\n    ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head  查看占用cpu资源最多的10个进程方法\n\n    ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head  查看占用内存资源最多的10个进程方法\n\n    ps -eo comm,pid,pcpu,pmem --sort -pcpu | head -20\n\n##### vmstart 命令（虚拟内存统计），\n最后几列显示了cpu平均负载，少于10%可能是一个有问题\nvmstart [-V] [-n] [delay [count]]\n\n    -V  表示打印出版本信息，可选参数  \n    -n  表示在周期性循环输出，输出的头部信息仅显示一次\n    delay 表示两次输出之间的时间间隔\n    count 表示按照“delay”指定的时间间隔统计的次数，默认为1次\n\n```\nvmstart 3 5\n1 procs -----------memory----------  ---swap-- -----io---- --system-- -----cpu-----\n2 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n3 2  0   7400 171448 171212 7667080    0    0    70   605    0    0  2  1 97  1  0\n4 0  0   7400 171828 171212 7667100    0    0     0  2387 1322 1572  1  1 99  0  0\n```\n在cpu评估中，主要注意procs项中的r项的值和cpu项中us、sy和id列的值\n这些值都是所有cpu的系统平均数，r除外，是总数r 应小于cpu个数\n当脏页达到内存页面设置的值时，开始写入硬盘，通过  /sbin/sysctl -n vm.dirty_background_ratio   查看，默认值为10\n当系统物理内存剩余量在该值范围时，开始大量使用swap交换空间\n```\nr，所有等待的加上正在运行的线程数，这些线程都是可运行状态，只不过 CPU 暂时不可用；\nb，被 blocked 的进程数，正在等待 IO 请求；\nin，被处理过的中断数\ncs，系统上正在做上下文切换的数目\nus，用户占用 CPU 的百分比\nsys，内核和中断占用 CPU 的百分比\nwa，所有可运行的线程被 blocked 以后都在等待 IO，这时候 CPU 空闲的百分比\nid，CPU 完全空闲的百分比\nswpd，已使用的 SWAP 空间大小，KB 为单位；\nfree，可用的物理内存大小，KB 为单位；\nbuff，物理内存用来缓存读写操作的 buffer 大小，KB 为单位；\ncache，物理内存用来缓存进程地址空间的 cache 大小，KB 为单位；\nsi，数据从 SWAP 读取到 RAM（swap in）的大小，KB 为单位；\nso，数据从 RAM 写到 SWAP（swap out）的大小，KB 为单位；\nbi，磁盘块从文件系统或 SWAP 读取到 RAM（blocks in）的大小，block 为单位；\nbo，磁盘块从 RAM 写到文件系统或 SWAP（blocks out）的大小，block 为单位；\n```\n\n##### mpstat命令\n(每个CPU统计信息）,检查单个cpu是否繁忙\n```\nmpstat -P ALL 1\n05:43:50 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle\n05:43:51 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    3    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    7    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n \n-P ALL 用来打印每个CPU的信息\n-P 1 1  用来打印第二个cpu的信息\n%usr ：用户态时间\n%nice :以nice优先级运行的进程用户态时间\n%sys ：系统态时间（内核）\n%iowait ：I/O等待\n%irq   ：硬件中断CPU用量\n%soft  ：软件中断CPU用量\n%steal ：耗费在服务其他租户的时间\n%guest ：花在访客虚拟机的时间\n%idle：空闲时间\n \n重要列有：usr，sys和idle\n```\n##### pidstat 按进程或线程来打印cpu用量\n包括用户态和系统态时间的分解，默认情况下仅输出活动的进程的信息\n```\npidstat 1\n05:49:59 PM       PID    %usr %system  %guest    %CPU   CPU  Command\n05:50:00 PM        37    0.00    0.99    0.00    0.99     3  kblockd/3\n05:50:00 PM        60    0.00    0.99    0.00    0.99     0  kswapd0\n05:50:00 PM     18520    0.99    0.99    0.00    1.98     0  pidstat\n05:50:00 PM     18524    0.00   16.83    0.00   16.83     0  tar\n05:50:00 PM     18525   53.47   13.86    0.00   67.33     0  gzip\n-t  打印每个线程的统计信息\n-p ALL  用来打印所有的进程，包括空闲进程\n \n常用命令:\npidstat -d -p pid 1\t# 每秒查看对应pid对应进程的io使用情况\npidstat -d 1\t\t# 每秒查看所有程序对应的io情况\npidstat -u 1\t\t# 每秒获取所有程序对应的cpu情况\npidstat -r 1\t\t# 每秒查看所有程序对应的内存情况\npidstat -w 5    # 查看进程的上下文切换情况\n- cswch/s 每秒自愿上下文切换的次数，进程无法获取所需资源导致的上下文切换，如io，内存等系统资源不足\n- nvcswch/s 每秒非自愿上下文切换的次数，被系统强制调度，进而发生的上下文切换，如大量进程都在争抢cpu，cpu成为瓶颈\n```\n##### dstat 命令，比较全部的查看系统资源信息\n\n常用命令： dstat -cdlnmpsy  查看比较全面的信息\n```\n-c  cpu\n-d disk\n-l  load\n-n net\n-m memory\n-p procs\n-s swap\n-y system\n--output   xxx.csv   生成csv文件，可以通过excel打开\n \ndstat -cdlnmpsy\n---total-cpu-usage---- -dsk/total- ---load-avg--- -net/total- ---procs--->\nusr sys idl wai hiq siq| read  writ| 1m   5m  15m | recv  send|run blk new>\n  2   1  97   0   0   0|  73k  115k|   0 0.01 0.05|   0     0 |  0   0 1.2>\n  0   1  99   0   0   0|   0     0 |   0 0.01 0.05| 146B 1058B|  0   0   0>\n  0   1 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0>\n  1   0  99   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0>\n  0   0 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0>\n  0   1  99   0   0   0|   0    12k|   0 0.01 0.05| 146B  514B|1.0   0   0>\n \ndstat --top-io --top-bio\n```\nPS:相关内容参照《性能之巅-洞悉系统、企业与云计算》第6章-cpu章节\n","source":"_posts/cpu.md","raw":"---\ntitle: 运维 CPU性能命令\ndate: 2017-02-05 22:05:33\ntags:\n  - CPU\ncategories:\n  - 运维\n---\n### 基本概念\n---\nCPU使用率:通过测量一段时间内cpu实例忙于执行工作的时间比例获得，以百分比表示\n\nCPI(每指令周期数)：用来描述cpu如何使用它的时钟周期，同时也可以用来理解CPU使用率的本质；CPI较高代表cpu进场陷入停滞，通常都是在访问内存，较低的CPI表示cpu基本没有停滞，指令吞吐较高\n\nIPC(每周期指令数)：它为CPI的倒数\n\n饱和度：一个100%使用率的cpu称为饱和\n\n#### cpu上下文切换\n\n过多的上下文切换会把cpu时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降\n\n#### cpu使用率说明相关指标\n- user(us),代表用户态cpu时间，它不包括nice时间，包括guest时间\n- nice(ni),代表低优先级用户态cpu时间\n- system(sys),代表内核态cpu时间\n- idle(id),代表空闲时间，不包括等待io的时间(iowait)\n- irq(hi),代表处理硬中断的cpu时间\n- softirq(si),代表处理软中断的cpu时间\n- steal(st),代表当系统运行在虚拟机中的时候，被其他虚拟机占用的cpu时间\n- guest(guest),运行虚拟机的cpu时间\n- guest_nice(gnice),代表以低优先级运行虚拟机的时间\n\n#### CPU使用说明例子\n\n> CPU 很无辜，是个任劳任怨的打工仔，每时每刻都有工作在做（进程、线程）并且自己有一张工作清单（可运行队列），由老板（进程调度）来决定他该干什么，他需要 和老板沟通以便得到老板的想法并及时调整自己的工作（上下文切换），部分工作做完以后还需要及时向老板汇报（中断），所以打工仔（CPU）除了做自己该做 的工作以外，还有大量时间和精力花在沟通和汇报上。\n>\n> 打工仔接受和完成多少任务并向老板汇报了（中断）；\n>\n> 打工仔和老板沟通、协商每项工作的工作进度（上下文切换）；\n>\n> 打工仔的工作列表是不是都有排满（可运行队列）；\n>\n> 打工仔工作效率如何，是不是在偷懒（CPU 利用率）。\n\n#### 性能命令如下\n\n    - uptime\n    - top\n    - vmstart\n    - mpstat\n    - pidstat\n    - dstat\n\n说明如下：\n\n##### uptime命令，用来统计系统当前的运行状态\n        12:02:32 up 235 days, 18:58,  4 users,  load average: 0.02, 0.10, 0.07\n\n其中load average这三个值表示系统在1min，5min，15min内的平均负载，这三个值一般不能大于系统CPU的个数。如果长期大于cpu个数表示cpu不足以服务线程，说明cpu繁忙，有些线程在等待，可能会影响系统性能\n\n平均负载：表示对cpu资源的需求，通过汇总正在运行的线程数（使用率）和正在排队等待运行的线程数(饱和度)计算得到.\n\n##### top    查看负载情况 主要关注负载1,5,15min\n\n该命令显示了最消耗cpu的任务，并带有cpu消耗百分比，TIME和%CPU显示了CPU占用的时间（这里是分钟时间）\n\n    ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head  查看占用cpu资源最多的10个进程方法\n\n    ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head  查看占用内存资源最多的10个进程方法\n\n    ps -eo comm,pid,pcpu,pmem --sort -pcpu | head -20\n\n##### vmstart 命令（虚拟内存统计），\n最后几列显示了cpu平均负载，少于10%可能是一个有问题\nvmstart [-V] [-n] [delay [count]]\n\n    -V  表示打印出版本信息，可选参数  \n    -n  表示在周期性循环输出，输出的头部信息仅显示一次\n    delay 表示两次输出之间的时间间隔\n    count 表示按照“delay”指定的时间间隔统计的次数，默认为1次\n\n```\nvmstart 3 5\n1 procs -----------memory----------  ---swap-- -----io---- --system-- -----cpu-----\n2 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n3 2  0   7400 171448 171212 7667080    0    0    70   605    0    0  2  1 97  1  0\n4 0  0   7400 171828 171212 7667100    0    0     0  2387 1322 1572  1  1 99  0  0\n```\n在cpu评估中，主要注意procs项中的r项的值和cpu项中us、sy和id列的值\n这些值都是所有cpu的系统平均数，r除外，是总数r 应小于cpu个数\n当脏页达到内存页面设置的值时，开始写入硬盘，通过  /sbin/sysctl -n vm.dirty_background_ratio   查看，默认值为10\n当系统物理内存剩余量在该值范围时，开始大量使用swap交换空间\n```\nr，所有等待的加上正在运行的线程数，这些线程都是可运行状态，只不过 CPU 暂时不可用；\nb，被 blocked 的进程数，正在等待 IO 请求；\nin，被处理过的中断数\ncs，系统上正在做上下文切换的数目\nus，用户占用 CPU 的百分比\nsys，内核和中断占用 CPU 的百分比\nwa，所有可运行的线程被 blocked 以后都在等待 IO，这时候 CPU 空闲的百分比\nid，CPU 完全空闲的百分比\nswpd，已使用的 SWAP 空间大小，KB 为单位；\nfree，可用的物理内存大小，KB 为单位；\nbuff，物理内存用来缓存读写操作的 buffer 大小，KB 为单位；\ncache，物理内存用来缓存进程地址空间的 cache 大小，KB 为单位；\nsi，数据从 SWAP 读取到 RAM（swap in）的大小，KB 为单位；\nso，数据从 RAM 写到 SWAP（swap out）的大小，KB 为单位；\nbi，磁盘块从文件系统或 SWAP 读取到 RAM（blocks in）的大小，block 为单位；\nbo，磁盘块从 RAM 写到文件系统或 SWAP（blocks out）的大小，block 为单位；\n```\n\n##### mpstat命令\n(每个CPU统计信息）,检查单个cpu是否繁忙\n```\nmpstat -P ALL 1\n05:43:50 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle\n05:43:51 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    3    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n05:43:51 PM    7    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n \n-P ALL 用来打印每个CPU的信息\n-P 1 1  用来打印第二个cpu的信息\n%usr ：用户态时间\n%nice :以nice优先级运行的进程用户态时间\n%sys ：系统态时间（内核）\n%iowait ：I/O等待\n%irq   ：硬件中断CPU用量\n%soft  ：软件中断CPU用量\n%steal ：耗费在服务其他租户的时间\n%guest ：花在访客虚拟机的时间\n%idle：空闲时间\n \n重要列有：usr，sys和idle\n```\n##### pidstat 按进程或线程来打印cpu用量\n包括用户态和系统态时间的分解，默认情况下仅输出活动的进程的信息\n```\npidstat 1\n05:49:59 PM       PID    %usr %system  %guest    %CPU   CPU  Command\n05:50:00 PM        37    0.00    0.99    0.00    0.99     3  kblockd/3\n05:50:00 PM        60    0.00    0.99    0.00    0.99     0  kswapd0\n05:50:00 PM     18520    0.99    0.99    0.00    1.98     0  pidstat\n05:50:00 PM     18524    0.00   16.83    0.00   16.83     0  tar\n05:50:00 PM     18525   53.47   13.86    0.00   67.33     0  gzip\n-t  打印每个线程的统计信息\n-p ALL  用来打印所有的进程，包括空闲进程\n \n常用命令:\npidstat -d -p pid 1\t# 每秒查看对应pid对应进程的io使用情况\npidstat -d 1\t\t# 每秒查看所有程序对应的io情况\npidstat -u 1\t\t# 每秒获取所有程序对应的cpu情况\npidstat -r 1\t\t# 每秒查看所有程序对应的内存情况\npidstat -w 5    # 查看进程的上下文切换情况\n- cswch/s 每秒自愿上下文切换的次数，进程无法获取所需资源导致的上下文切换，如io，内存等系统资源不足\n- nvcswch/s 每秒非自愿上下文切换的次数，被系统强制调度，进而发生的上下文切换，如大量进程都在争抢cpu，cpu成为瓶颈\n```\n##### dstat 命令，比较全部的查看系统资源信息\n\n常用命令： dstat -cdlnmpsy  查看比较全面的信息\n```\n-c  cpu\n-d disk\n-l  load\n-n net\n-m memory\n-p procs\n-s swap\n-y system\n--output   xxx.csv   生成csv文件，可以通过excel打开\n \ndstat -cdlnmpsy\n---total-cpu-usage---- -dsk/total- ---load-avg--- -net/total- ---procs--->\nusr sys idl wai hiq siq| read  writ| 1m   5m  15m | recv  send|run blk new>\n  2   1  97   0   0   0|  73k  115k|   0 0.01 0.05|   0     0 |  0   0 1.2>\n  0   1  99   0   0   0|   0     0 |   0 0.01 0.05| 146B 1058B|  0   0   0>\n  0   1 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0>\n  1   0  99   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0>\n  0   0 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0>\n  0   1  99   0   0   0|   0    12k|   0 0.01 0.05| 146B  514B|1.0   0   0>\n \ndstat --top-io --top-bio\n```\nPS:相关内容参照《性能之巅-洞悉系统、企业与云计算》第6章-cpu章节\n","slug":"cpu","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vj001ect8udc28rnc6","content":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><hr>\n<p>CPU使用率:通过测量一段时间内cpu实例忙于执行工作的时间比例获得，以百分比表示</p>\n<p>CPI(每指令周期数)：用来描述cpu如何使用它的时钟周期，同时也可以用来理解CPU使用率的本质；CPI较高代表cpu进场陷入停滞，通常都是在访问内存，较低的CPI表示cpu基本没有停滞，指令吞吐较高</p>\n<p>IPC(每周期指令数)：它为CPI的倒数</p>\n<p>饱和度：一个100%使用率的cpu称为饱和</p>\n<h4 id=\"cpu上下文切换\"><a href=\"#cpu上下文切换\" class=\"headerlink\" title=\"cpu上下文切换\"></a>cpu上下文切换</h4><p>过多的上下文切换会把cpu时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降</p>\n<h4 id=\"cpu使用率说明相关指标\"><a href=\"#cpu使用率说明相关指标\" class=\"headerlink\" title=\"cpu使用率说明相关指标\"></a>cpu使用率说明相关指标</h4><ul>\n<li>user(us),代表用户态cpu时间，它不包括nice时间，包括guest时间</li>\n<li>nice(ni),代表低优先级用户态cpu时间</li>\n<li>system(sys),代表内核态cpu时间</li>\n<li>idle(id),代表空闲时间，不包括等待io的时间(iowait)</li>\n<li>irq(hi),代表处理硬中断的cpu时间</li>\n<li>softirq(si),代表处理软中断的cpu时间</li>\n<li>steal(st),代表当系统运行在虚拟机中的时候，被其他虚拟机占用的cpu时间</li>\n<li>guest(guest),运行虚拟机的cpu时间</li>\n<li>guest_nice(gnice),代表以低优先级运行虚拟机的时间</li>\n</ul>\n<h4 id=\"CPU使用说明例子\"><a href=\"#CPU使用说明例子\" class=\"headerlink\" title=\"CPU使用说明例子\"></a>CPU使用说明例子</h4><blockquote>\n<p>CPU 很无辜，是个任劳任怨的打工仔，每时每刻都有工作在做（进程、线程）并且自己有一张工作清单（可运行队列），由老板（进程调度）来决定他该干什么，他需要 和老板沟通以便得到老板的想法并及时调整自己的工作（上下文切换），部分工作做完以后还需要及时向老板汇报（中断），所以打工仔（CPU）除了做自己该做 的工作以外，还有大量时间和精力花在沟通和汇报上。</p>\n<p>打工仔接受和完成多少任务并向老板汇报了（中断）；</p>\n<p>打工仔和老板沟通、协商每项工作的工作进度（上下文切换）；</p>\n<p>打工仔的工作列表是不是都有排满（可运行队列）；</p>\n<p>打工仔工作效率如何，是不是在偷懒（CPU 利用率）。</p>\n</blockquote>\n<h4 id=\"性能命令如下\"><a href=\"#性能命令如下\" class=\"headerlink\" title=\"性能命令如下\"></a>性能命令如下</h4><pre><code>- uptime\n- top\n- vmstart\n- mpstat\n- pidstat\n- dstat\n</code></pre><p>说明如下：</p>\n<h5 id=\"uptime命令，用来统计系统当前的运行状态\"><a href=\"#uptime命令，用来统计系统当前的运行状态\" class=\"headerlink\" title=\"uptime命令，用来统计系统当前的运行状态\"></a>uptime命令，用来统计系统当前的运行状态</h5><pre><code>12:02:32 up 235 days, 18:58,  4 users,  load average: 0.02, 0.10, 0.07\n</code></pre><p>其中load average这三个值表示系统在1min，5min，15min内的平均负载，这三个值一般不能大于系统CPU的个数。如果长期大于cpu个数表示cpu不足以服务线程，说明cpu繁忙，有些线程在等待，可能会影响系统性能</p>\n<p>平均负载：表示对cpu资源的需求，通过汇总正在运行的线程数（使用率）和正在排队等待运行的线程数(饱和度)计算得到.</p>\n<h5 id=\"top-查看负载情况-主要关注负载1-5-15min\"><a href=\"#top-查看负载情况-主要关注负载1-5-15min\" class=\"headerlink\" title=\"top    查看负载情况 主要关注负载1,5,15min\"></a>top    查看负载情况 主要关注负载1,5,15min</h5><p>该命令显示了最消耗cpu的任务，并带有cpu消耗百分比，TIME和%CPU显示了CPU占用的时间（这里是分钟时间）</p>\n<pre><code>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head  查看占用cpu资源最多的10个进程方法\n\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head  查看占用内存资源最多的10个进程方法\n\nps -eo comm,pid,pcpu,pmem --sort -pcpu | head -20\n</code></pre><h5 id=\"vmstart-命令（虚拟内存统计），\"><a href=\"#vmstart-命令（虚拟内存统计），\" class=\"headerlink\" title=\"vmstart 命令（虚拟内存统计），\"></a>vmstart 命令（虚拟内存统计），</h5><p>最后几列显示了cpu平均负载，少于10%可能是一个有问题<br>vmstart [-V] [-n] [delay [count]]</p>\n<pre><code>-V  表示打印出版本信息，可选参数  \n-n  表示在周期性循环输出，输出的头部信息仅显示一次\ndelay 表示两次输出之间的时间间隔\ncount 表示按照“delay”指定的时间间隔统计的次数，默认为1次\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">vmstart 3 5</div><div class=\"line\">1 procs -----------memory----------  ---swap-- -----io---- --system-- -----cpu-----</div><div class=\"line\">2 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class=\"line\">3 2  0   7400 171448 171212 7667080    0    0    70   605    0    0  2  1 97  1  0</div><div class=\"line\">4 0  0   7400 171828 171212 7667100    0    0     0  2387 1322 1572  1  1 99  0  0</div></pre></td></tr></table></figure>\n<p>在cpu评估中，主要注意procs项中的r项的值和cpu项中us、sy和id列的值<br>这些值都是所有cpu的系统平均数，r除外，是总数r 应小于cpu个数<br>当脏页达到内存页面设置的值时，开始写入硬盘，通过  /sbin/sysctl -n vm.dirty_background_ratio   查看，默认值为10<br>当系统物理内存剩余量在该值范围时，开始大量使用swap交换空间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">r，所有等待的加上正在运行的线程数，这些线程都是可运行状态，只不过 CPU 暂时不可用；</div><div class=\"line\">b，被 blocked 的进程数，正在等待 IO 请求；</div><div class=\"line\">in，被处理过的中断数</div><div class=\"line\">cs，系统上正在做上下文切换的数目</div><div class=\"line\">us，用户占用 CPU 的百分比</div><div class=\"line\">sys，内核和中断占用 CPU 的百分比</div><div class=\"line\">wa，所有可运行的线程被 blocked 以后都在等待 IO，这时候 CPU 空闲的百分比</div><div class=\"line\">id，CPU 完全空闲的百分比</div><div class=\"line\">swpd，已使用的 SWAP 空间大小，KB 为单位；</div><div class=\"line\">free，可用的物理内存大小，KB 为单位；</div><div class=\"line\">buff，物理内存用来缓存读写操作的 buffer 大小，KB 为单位；</div><div class=\"line\">cache，物理内存用来缓存进程地址空间的 cache 大小，KB 为单位；</div><div class=\"line\">si，数据从 SWAP 读取到 RAM（swap in）的大小，KB 为单位；</div><div class=\"line\">so，数据从 RAM 写到 SWAP（swap out）的大小，KB 为单位；</div><div class=\"line\">bi，磁盘块从文件系统或 SWAP 读取到 RAM（blocks in）的大小，block 为单位；</div><div class=\"line\">bo，磁盘块从 RAM 写到文件系统或 SWAP（blocks out）的大小，block 为单位；</div></pre></td></tr></table></figure></p>\n<h5 id=\"mpstat命令\"><a href=\"#mpstat命令\" class=\"headerlink\" title=\"mpstat命令\"></a>mpstat命令</h5><p>(每个CPU统计信息）,检查单个cpu是否繁忙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">mpstat -P ALL 1</div><div class=\"line\">05:43:50 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle</div><div class=\"line\">05:43:51 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    3    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    7    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\"> </div><div class=\"line\">-P ALL 用来打印每个CPU的信息</div><div class=\"line\">-P 1 1  用来打印第二个cpu的信息</div><div class=\"line\">%usr ：用户态时间</div><div class=\"line\">%nice :以nice优先级运行的进程用户态时间</div><div class=\"line\">%sys ：系统态时间（内核）</div><div class=\"line\">%iowait ：I/O等待</div><div class=\"line\">%irq   ：硬件中断CPU用量</div><div class=\"line\">%soft  ：软件中断CPU用量</div><div class=\"line\">%steal ：耗费在服务其他租户的时间</div><div class=\"line\">%guest ：花在访客虚拟机的时间</div><div class=\"line\">%idle：空闲时间</div><div class=\"line\"> </div><div class=\"line\">重要列有：usr，sys和idle</div></pre></td></tr></table></figure></p>\n<h5 id=\"pidstat-按进程或线程来打印cpu用量\"><a href=\"#pidstat-按进程或线程来打印cpu用量\" class=\"headerlink\" title=\"pidstat 按进程或线程来打印cpu用量\"></a>pidstat 按进程或线程来打印cpu用量</h5><p>包括用户态和系统态时间的分解，默认情况下仅输出活动的进程的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">pidstat 1</div><div class=\"line\">05:49:59 PM       PID    %usr %system  %guest    %CPU   CPU  Command</div><div class=\"line\">05:50:00 PM        37    0.00    0.99    0.00    0.99     3  kblockd/3</div><div class=\"line\">05:50:00 PM        60    0.00    0.99    0.00    0.99     0  kswapd0</div><div class=\"line\">05:50:00 PM     18520    0.99    0.99    0.00    1.98     0  pidstat</div><div class=\"line\">05:50:00 PM     18524    0.00   16.83    0.00   16.83     0  tar</div><div class=\"line\">05:50:00 PM     18525   53.47   13.86    0.00   67.33     0  gzip</div><div class=\"line\">-t  打印每个线程的统计信息</div><div class=\"line\">-p ALL  用来打印所有的进程，包括空闲进程</div><div class=\"line\"> </div><div class=\"line\">常用命令:</div><div class=\"line\">pidstat -d -p pid 1\t# 每秒查看对应pid对应进程的io使用情况</div><div class=\"line\">pidstat -d 1\t\t# 每秒查看所有程序对应的io情况</div><div class=\"line\">pidstat -u 1\t\t# 每秒获取所有程序对应的cpu情况</div><div class=\"line\">pidstat -r 1\t\t# 每秒查看所有程序对应的内存情况</div><div class=\"line\">pidstat -w 5    # 查看进程的上下文切换情况</div><div class=\"line\">- cswch/s 每秒自愿上下文切换的次数，进程无法获取所需资源导致的上下文切换，如io，内存等系统资源不足</div><div class=\"line\">- nvcswch/s 每秒非自愿上下文切换的次数，被系统强制调度，进而发生的上下文切换，如大量进程都在争抢cpu，cpu成为瓶颈</div></pre></td></tr></table></figure></p>\n<h5 id=\"dstat-命令，比较全部的查看系统资源信息\"><a href=\"#dstat-命令，比较全部的查看系统资源信息\" class=\"headerlink\" title=\"dstat 命令，比较全部的查看系统资源信息\"></a>dstat 命令，比较全部的查看系统资源信息</h5><p>常用命令： dstat -cdlnmpsy  查看比较全面的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">-c  cpu</div><div class=\"line\">-d disk</div><div class=\"line\">-l  load</div><div class=\"line\">-n net</div><div class=\"line\">-m memory</div><div class=\"line\">-p procs</div><div class=\"line\">-s swap</div><div class=\"line\">-y system</div><div class=\"line\">--output   xxx.csv   生成csv文件，可以通过excel打开</div><div class=\"line\"> </div><div class=\"line\">dstat -cdlnmpsy</div><div class=\"line\">---total-cpu-usage---- -dsk/total- ---load-avg--- -net/total- ---procs---&gt;</div><div class=\"line\">usr sys idl wai hiq siq| read  writ| 1m   5m  15m | recv  send|run blk new&gt;</div><div class=\"line\">  2   1  97   0   0   0|  73k  115k|   0 0.01 0.05|   0     0 |  0   0 1.2&gt;</div><div class=\"line\">  0   1  99   0   0   0|   0     0 |   0 0.01 0.05| 146B 1058B|  0   0   0&gt;</div><div class=\"line\">  0   1 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class=\"line\">  1   0  99   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class=\"line\">  0   0 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class=\"line\">  0   1  99   0   0   0|   0    12k|   0 0.01 0.05| 146B  514B|1.0   0   0&gt;</div><div class=\"line\"> </div><div class=\"line\">dstat --top-io --top-bio</div></pre></td></tr></table></figure></p>\n<p>PS:相关内容参照《性能之巅-洞悉系统、企业与云计算》第6章-cpu章节</p>\n","excerpt":"","more":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><hr>\n<p>CPU使用率:通过测量一段时间内cpu实例忙于执行工作的时间比例获得，以百分比表示</p>\n<p>CPI(每指令周期数)：用来描述cpu如何使用它的时钟周期，同时也可以用来理解CPU使用率的本质；CPI较高代表cpu进场陷入停滞，通常都是在访问内存，较低的CPI表示cpu基本没有停滞，指令吞吐较高</p>\n<p>IPC(每周期指令数)：它为CPI的倒数</p>\n<p>饱和度：一个100%使用率的cpu称为饱和</p>\n<h4 id=\"cpu上下文切换\"><a href=\"#cpu上下文切换\" class=\"headerlink\" title=\"cpu上下文切换\"></a>cpu上下文切换</h4><p>过多的上下文切换会把cpu时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降</p>\n<h4 id=\"cpu使用率说明相关指标\"><a href=\"#cpu使用率说明相关指标\" class=\"headerlink\" title=\"cpu使用率说明相关指标\"></a>cpu使用率说明相关指标</h4><ul>\n<li>user(us),代表用户态cpu时间，它不包括nice时间，包括guest时间</li>\n<li>nice(ni),代表低优先级用户态cpu时间</li>\n<li>system(sys),代表内核态cpu时间</li>\n<li>idle(id),代表空闲时间，不包括等待io的时间(iowait)</li>\n<li>irq(hi),代表处理硬中断的cpu时间</li>\n<li>softirq(si),代表处理软中断的cpu时间</li>\n<li>steal(st),代表当系统运行在虚拟机中的时候，被其他虚拟机占用的cpu时间</li>\n<li>guest(guest),运行虚拟机的cpu时间</li>\n<li>guest_nice(gnice),代表以低优先级运行虚拟机的时间</li>\n</ul>\n<h4 id=\"CPU使用说明例子\"><a href=\"#CPU使用说明例子\" class=\"headerlink\" title=\"CPU使用说明例子\"></a>CPU使用说明例子</h4><blockquote>\n<p>CPU 很无辜，是个任劳任怨的打工仔，每时每刻都有工作在做（进程、线程）并且自己有一张工作清单（可运行队列），由老板（进程调度）来决定他该干什么，他需要 和老板沟通以便得到老板的想法并及时调整自己的工作（上下文切换），部分工作做完以后还需要及时向老板汇报（中断），所以打工仔（CPU）除了做自己该做 的工作以外，还有大量时间和精力花在沟通和汇报上。</p>\n<p>打工仔接受和完成多少任务并向老板汇报了（中断）；</p>\n<p>打工仔和老板沟通、协商每项工作的工作进度（上下文切换）；</p>\n<p>打工仔的工作列表是不是都有排满（可运行队列）；</p>\n<p>打工仔工作效率如何，是不是在偷懒（CPU 利用率）。</p>\n</blockquote>\n<h4 id=\"性能命令如下\"><a href=\"#性能命令如下\" class=\"headerlink\" title=\"性能命令如下\"></a>性能命令如下</h4><pre><code>- uptime\n- top\n- vmstart\n- mpstat\n- pidstat\n- dstat\n</code></pre><p>说明如下：</p>\n<h5 id=\"uptime命令，用来统计系统当前的运行状态\"><a href=\"#uptime命令，用来统计系统当前的运行状态\" class=\"headerlink\" title=\"uptime命令，用来统计系统当前的运行状态\"></a>uptime命令，用来统计系统当前的运行状态</h5><pre><code>12:02:32 up 235 days, 18:58,  4 users,  load average: 0.02, 0.10, 0.07\n</code></pre><p>其中load average这三个值表示系统在1min，5min，15min内的平均负载，这三个值一般不能大于系统CPU的个数。如果长期大于cpu个数表示cpu不足以服务线程，说明cpu繁忙，有些线程在等待，可能会影响系统性能</p>\n<p>平均负载：表示对cpu资源的需求，通过汇总正在运行的线程数（使用率）和正在排队等待运行的线程数(饱和度)计算得到.</p>\n<h5 id=\"top-查看负载情况-主要关注负载1-5-15min\"><a href=\"#top-查看负载情况-主要关注负载1-5-15min\" class=\"headerlink\" title=\"top    查看负载情况 主要关注负载1,5,15min\"></a>top    查看负载情况 主要关注负载1,5,15min</h5><p>该命令显示了最消耗cpu的任务，并带有cpu消耗百分比，TIME和%CPU显示了CPU占用的时间（这里是分钟时间）</p>\n<pre><code>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head  查看占用cpu资源最多的10个进程方法\n\nps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head  查看占用内存资源最多的10个进程方法\n\nps -eo comm,pid,pcpu,pmem --sort -pcpu | head -20\n</code></pre><h5 id=\"vmstart-命令（虚拟内存统计），\"><a href=\"#vmstart-命令（虚拟内存统计），\" class=\"headerlink\" title=\"vmstart 命令（虚拟内存统计），\"></a>vmstart 命令（虚拟内存统计），</h5><p>最后几列显示了cpu平均负载，少于10%可能是一个有问题<br>vmstart [-V] [-n] [delay [count]]</p>\n<pre><code>-V  表示打印出版本信息，可选参数  \n-n  表示在周期性循环输出，输出的头部信息仅显示一次\ndelay 表示两次输出之间的时间间隔\ncount 表示按照“delay”指定的时间间隔统计的次数，默认为1次\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">vmstart 3 5</div><div class=\"line\">1 procs -----------memory----------  ---swap-- -----io---- --system-- -----cpu-----</div><div class=\"line\">2 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class=\"line\">3 2  0   7400 171448 171212 7667080    0    0    70   605    0    0  2  1 97  1  0</div><div class=\"line\">4 0  0   7400 171828 171212 7667100    0    0     0  2387 1322 1572  1  1 99  0  0</div></pre></td></tr></table></figure>\n<p>在cpu评估中，主要注意procs项中的r项的值和cpu项中us、sy和id列的值<br>这些值都是所有cpu的系统平均数，r除外，是总数r 应小于cpu个数<br>当脏页达到内存页面设置的值时，开始写入硬盘，通过  /sbin/sysctl -n vm.dirty_background_ratio   查看，默认值为10<br>当系统物理内存剩余量在该值范围时，开始大量使用swap交换空间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">r，所有等待的加上正在运行的线程数，这些线程都是可运行状态，只不过 CPU 暂时不可用；</div><div class=\"line\">b，被 blocked 的进程数，正在等待 IO 请求；</div><div class=\"line\">in，被处理过的中断数</div><div class=\"line\">cs，系统上正在做上下文切换的数目</div><div class=\"line\">us，用户占用 CPU 的百分比</div><div class=\"line\">sys，内核和中断占用 CPU 的百分比</div><div class=\"line\">wa，所有可运行的线程被 blocked 以后都在等待 IO，这时候 CPU 空闲的百分比</div><div class=\"line\">id，CPU 完全空闲的百分比</div><div class=\"line\">swpd，已使用的 SWAP 空间大小，KB 为单位；</div><div class=\"line\">free，可用的物理内存大小，KB 为单位；</div><div class=\"line\">buff，物理内存用来缓存读写操作的 buffer 大小，KB 为单位；</div><div class=\"line\">cache，物理内存用来缓存进程地址空间的 cache 大小，KB 为单位；</div><div class=\"line\">si，数据从 SWAP 读取到 RAM（swap in）的大小，KB 为单位；</div><div class=\"line\">so，数据从 RAM 写到 SWAP（swap out）的大小，KB 为单位；</div><div class=\"line\">bi，磁盘块从文件系统或 SWAP 读取到 RAM（blocks in）的大小，block 为单位；</div><div class=\"line\">bo，磁盘块从 RAM 写到文件系统或 SWAP（blocks out）的大小，block 为单位；</div></pre></td></tr></table></figure></p>\n<h5 id=\"mpstat命令\"><a href=\"#mpstat命令\" class=\"headerlink\" title=\"mpstat命令\"></a>mpstat命令</h5><p>(每个CPU统计信息）,检查单个cpu是否繁忙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">mpstat -P ALL 1</div><div class=\"line\">05:43:50 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle</div><div class=\"line\">05:43:51 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    3    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\">05:43:51 PM    7    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</div><div class=\"line\"> </div><div class=\"line\">-P ALL 用来打印每个CPU的信息</div><div class=\"line\">-P 1 1  用来打印第二个cpu的信息</div><div class=\"line\">%usr ：用户态时间</div><div class=\"line\">%nice :以nice优先级运行的进程用户态时间</div><div class=\"line\">%sys ：系统态时间（内核）</div><div class=\"line\">%iowait ：I/O等待</div><div class=\"line\">%irq   ：硬件中断CPU用量</div><div class=\"line\">%soft  ：软件中断CPU用量</div><div class=\"line\">%steal ：耗费在服务其他租户的时间</div><div class=\"line\">%guest ：花在访客虚拟机的时间</div><div class=\"line\">%idle：空闲时间</div><div class=\"line\"> </div><div class=\"line\">重要列有：usr，sys和idle</div></pre></td></tr></table></figure></p>\n<h5 id=\"pidstat-按进程或线程来打印cpu用量\"><a href=\"#pidstat-按进程或线程来打印cpu用量\" class=\"headerlink\" title=\"pidstat 按进程或线程来打印cpu用量\"></a>pidstat 按进程或线程来打印cpu用量</h5><p>包括用户态和系统态时间的分解，默认情况下仅输出活动的进程的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">pidstat 1</div><div class=\"line\">05:49:59 PM       PID    %usr %system  %guest    %CPU   CPU  Command</div><div class=\"line\">05:50:00 PM        37    0.00    0.99    0.00    0.99     3  kblockd/3</div><div class=\"line\">05:50:00 PM        60    0.00    0.99    0.00    0.99     0  kswapd0</div><div class=\"line\">05:50:00 PM     18520    0.99    0.99    0.00    1.98     0  pidstat</div><div class=\"line\">05:50:00 PM     18524    0.00   16.83    0.00   16.83     0  tar</div><div class=\"line\">05:50:00 PM     18525   53.47   13.86    0.00   67.33     0  gzip</div><div class=\"line\">-t  打印每个线程的统计信息</div><div class=\"line\">-p ALL  用来打印所有的进程，包括空闲进程</div><div class=\"line\"> </div><div class=\"line\">常用命令:</div><div class=\"line\">pidstat -d -p pid 1\t# 每秒查看对应pid对应进程的io使用情况</div><div class=\"line\">pidstat -d 1\t\t# 每秒查看所有程序对应的io情况</div><div class=\"line\">pidstat -u 1\t\t# 每秒获取所有程序对应的cpu情况</div><div class=\"line\">pidstat -r 1\t\t# 每秒查看所有程序对应的内存情况</div><div class=\"line\">pidstat -w 5    # 查看进程的上下文切换情况</div><div class=\"line\">- cswch/s 每秒自愿上下文切换的次数，进程无法获取所需资源导致的上下文切换，如io，内存等系统资源不足</div><div class=\"line\">- nvcswch/s 每秒非自愿上下文切换的次数，被系统强制调度，进而发生的上下文切换，如大量进程都在争抢cpu，cpu成为瓶颈</div></pre></td></tr></table></figure></p>\n<h5 id=\"dstat-命令，比较全部的查看系统资源信息\"><a href=\"#dstat-命令，比较全部的查看系统资源信息\" class=\"headerlink\" title=\"dstat 命令，比较全部的查看系统资源信息\"></a>dstat 命令，比较全部的查看系统资源信息</h5><p>常用命令： dstat -cdlnmpsy  查看比较全面的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">-c  cpu</div><div class=\"line\">-d disk</div><div class=\"line\">-l  load</div><div class=\"line\">-n net</div><div class=\"line\">-m memory</div><div class=\"line\">-p procs</div><div class=\"line\">-s swap</div><div class=\"line\">-y system</div><div class=\"line\">--output   xxx.csv   生成csv文件，可以通过excel打开</div><div class=\"line\"> </div><div class=\"line\">dstat -cdlnmpsy</div><div class=\"line\">---total-cpu-usage---- -dsk/total- ---load-avg--- -net/total- ---procs---&gt;</div><div class=\"line\">usr sys idl wai hiq siq| read  writ| 1m   5m  15m | recv  send|run blk new&gt;</div><div class=\"line\">  2   1  97   0   0   0|  73k  115k|   0 0.01 0.05|   0     0 |  0   0 1.2&gt;</div><div class=\"line\">  0   1  99   0   0   0|   0     0 |   0 0.01 0.05| 146B 1058B|  0   0   0&gt;</div><div class=\"line\">  0   1 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class=\"line\">  1   0  99   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class=\"line\">  0   0 100   0   0   0|   0     0 |   0 0.01 0.05| 146B  514B|  0   0   0&gt;</div><div class=\"line\">  0   1  99   0   0   0|   0    12k|   0 0.01 0.05| 146B  514B|1.0   0   0&gt;</div><div class=\"line\"> </div><div class=\"line\">dstat --top-io --top-bio</div></pre></td></tr></table></figure></p>\n<p>PS:相关内容参照《性能之巅-洞悉系统、企业与云计算》第6章-cpu章节</p>\n"},{"title":"Python Descriptor描述符01","date":"2018-01-31T12:24:28.000Z","_content":"### 描述符说明\n\t- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符\n\t- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写\n\t- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中\n\t  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找\n      顺序为a.__dict__['x'],然后是type(a).__dict__['x'].如果还是没找\n      到就往上级(父类)中查找最后查找是否有__getattr__\n\t- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用\n\t  描述符的__get__()方法，对于设置和删除也是同样的原理\n\t- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;\n\t- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;\n\n### 调用方法\n    - 描述符作为属性访问时,是被自动调用\n    - 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__['x'].__get__(None, Class)\n    - 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__['x'].__get__(object, type(object))\n\n### 描述符用途,使用场景\n    - 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符\n    - 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符\n    - 描述符会'劫持'那些本是self.__dict__的操作\n    - 把一个类的操作托付给另外一个类\n    - 静态方法,类方法,parperty都是构建描述符的类\n\n### 实例\n\n#### 实例一\n\n```python\n# 属性进行相应的处理而不会对整体有影响\n \nclass Integer(object):\n \n    def __init__(self, age):\n        self.age = age\n \n    def __get__(self, instance, owner):\n        print '__get__-----', self, instance, owner\n        if instance is None:\n            return self\n        # return instance.__dict__[self.age]  # 获取dict中对应的属性值\n        return self.age\n \n    def __set__(self, instance, value):\n        print '__set__-----', self, instance, value\n        if value < 0 or type(eval(str(value))) == float:\n            raise ValueError('Age must int and not negative ')\n        # instance.__dict__[self.age] = value # 修改dict中对应的属性值\n        self.age = value\n \n    def __del__(self):\n        del self.age\n        pass\n \n \nclass SexType(object):\n \n    def __init__(self, sex):\n        self.sex = sex\n \n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        # return instance.__dict__[self.sex]  # 获取dict中对应的属性值\n        return self.sex\n \n    def __set__(self, instance, value):\n        if value not in ['M', 'W']:\n            raise ValueError('The value must be M/W ')\n        # instance.__dict__[self.sex] = value # 修改dict中对应的属性值\n        self.sex = value\n \n    def __del__(self):\n        del self.sex\n        pass\n \n \nclass Person(object):\n    age = Integer('age')\n    sex = SexType('sex')\n \n    def __init__(self, name, sex, age):\n        self.name = name\n        self.sex = sex\n        self.age = age\n \n    @property\n    def info(self):\n        return 'Person info --name:{},--sex:{},--age:{}'.format(self.name, self.sex, self.age)\n \nA = Person(name='ttxsgoto', sex='W', age= 15 )\n \nprint A.__dict__\nprint Person.__dict__\nprint A.info\n \n########## 结果 ##########\n'''\n{'name': 'ttxsgoto'}\n{'info': <property object at 0x1028ad418>, '__module__': '__main__', 'age': <__main__.Integer object at 0x1028b30d0>, 'sex': <__main__.SexType object at 0x1028b3110>, '__dict__': <attribute '__dict__' of 'Person' objects>, '__weakref__': <attribute '__weakref__' of 'Person' objects>, '__doc__': None, '__init__': <function __init__ at 0x1028b2578>}\n__get__----- <__main__.Integer object at 0x1028b30d0> <__main__.Person object at 0x1028b3150> <class '__main__.Person'>\nPerson info --name:ttxsgoto,--sex:W,--age:15\n'''\n```\n\n#### 实例二\n\n```python\n# 数据描述符和非数据描述符的区别\n \nclass Access(object):\n \n    def __init__(self, var=None, name='var'):\n        self.var = var\n        self.name = name\n \n    def __get__(self, instance, owner):\n        print '__get__----', self, instance, owner, self.name\n        return self.var\n \n    def __set__(self, instance, value):  # 含有__set__方法为数据描述符\n        print '__set__----', self, instance, value\n        self.var = value\n \n \nclass MyClass(object):\n    x = Access(10, 'ttxsgoto')\n \n    def __init__(self, x):\n        self.x = x\n \nt = MyClass(100)\nprint '----\\n', t.x\nprint '====\\n', t.__dict__\nprint 'xxxx\\n', MyClass.__dict__\nprint 'yyyy\\n', MyClass.x\n \n########### 数据描述符的输出 ###########\n'''\n__set__---- <__main__.Access object at 0x10687c2d0> <__main__.MyClass object at 0x10687c610> 100\n----\n__get__---- <__main__.Access object at 0x10687c2d0> <__main__.MyClass object at 0x10687c610> <class '__main__.MyClass'> ttxsgoto\n100\n====\n{}\nxxxx\n{'__module__': '__main__', '__dict__': <attribute '__dict__' of 'MyClass' objects>, 'x': <__main__.Access object at 0x10687c2d0>, '__weakref__': <attribute '__weakref__' of 'MyClass' objects>, '__doc__': None, '__init__': <function __init__ at 0x10687b320>}\nyyyy\n__get__---- <__main__.Access object at 0x10687c2d0> None <class '__main__.MyClass'> ttxsgoto\n100\n'''\n \n########### 非数据描述符的输出 ###########\n'''\n----\n100\n====\n{'x': 100}\nxxxx\n{'__module__': '__main__', '__dict__': <attribute '__dict__' of 'MyClass' objects>, 'x': <__main__.Access object at 0x1012502d0>, '__weakref__': <attribute '__weakref__' of 'MyClass' objects>, '__doc__': None, '__init__': <function __init__ at 0x10124f050>}\nyyyy\n__get__---- <__main__.Access object at 0x1012502d0> None <class '__main__.MyClass'> ttxsgoto\n10\n'''\n```","source":"_posts/descriptor.md","raw":"---\ntitle: Python Descriptor描述符01\ndate: 2018-01-31 20:24:28\ntags:\n  - Descriptor\ncategories:\n  - python\n---\n### 描述符说明\n\t- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符\n\t- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写\n\t- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中\n\t  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找\n      顺序为a.__dict__['x'],然后是type(a).__dict__['x'].如果还是没找\n      到就往上级(父类)中查找最后查找是否有__getattr__\n\t- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用\n\t  描述符的__get__()方法，对于设置和删除也是同样的原理\n\t- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;\n\t- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;\n\n### 调用方法\n    - 描述符作为属性访问时,是被自动调用\n    - 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__['x'].__get__(None, Class)\n    - 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__['x'].__get__(object, type(object))\n\n### 描述符用途,使用场景\n    - 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符\n    - 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符\n    - 描述符会'劫持'那些本是self.__dict__的操作\n    - 把一个类的操作托付给另外一个类\n    - 静态方法,类方法,parperty都是构建描述符的类\n\n### 实例\n\n#### 实例一\n\n```python\n# 属性进行相应的处理而不会对整体有影响\n \nclass Integer(object):\n \n    def __init__(self, age):\n        self.age = age\n \n    def __get__(self, instance, owner):\n        print '__get__-----', self, instance, owner\n        if instance is None:\n            return self\n        # return instance.__dict__[self.age]  # 获取dict中对应的属性值\n        return self.age\n \n    def __set__(self, instance, value):\n        print '__set__-----', self, instance, value\n        if value < 0 or type(eval(str(value))) == float:\n            raise ValueError('Age must int and not negative ')\n        # instance.__dict__[self.age] = value # 修改dict中对应的属性值\n        self.age = value\n \n    def __del__(self):\n        del self.age\n        pass\n \n \nclass SexType(object):\n \n    def __init__(self, sex):\n        self.sex = sex\n \n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        # return instance.__dict__[self.sex]  # 获取dict中对应的属性值\n        return self.sex\n \n    def __set__(self, instance, value):\n        if value not in ['M', 'W']:\n            raise ValueError('The value must be M/W ')\n        # instance.__dict__[self.sex] = value # 修改dict中对应的属性值\n        self.sex = value\n \n    def __del__(self):\n        del self.sex\n        pass\n \n \nclass Person(object):\n    age = Integer('age')\n    sex = SexType('sex')\n \n    def __init__(self, name, sex, age):\n        self.name = name\n        self.sex = sex\n        self.age = age\n \n    @property\n    def info(self):\n        return 'Person info --name:{},--sex:{},--age:{}'.format(self.name, self.sex, self.age)\n \nA = Person(name='ttxsgoto', sex='W', age= 15 )\n \nprint A.__dict__\nprint Person.__dict__\nprint A.info\n \n########## 结果 ##########\n'''\n{'name': 'ttxsgoto'}\n{'info': <property object at 0x1028ad418>, '__module__': '__main__', 'age': <__main__.Integer object at 0x1028b30d0>, 'sex': <__main__.SexType object at 0x1028b3110>, '__dict__': <attribute '__dict__' of 'Person' objects>, '__weakref__': <attribute '__weakref__' of 'Person' objects>, '__doc__': None, '__init__': <function __init__ at 0x1028b2578>}\n__get__----- <__main__.Integer object at 0x1028b30d0> <__main__.Person object at 0x1028b3150> <class '__main__.Person'>\nPerson info --name:ttxsgoto,--sex:W,--age:15\n'''\n```\n\n#### 实例二\n\n```python\n# 数据描述符和非数据描述符的区别\n \nclass Access(object):\n \n    def __init__(self, var=None, name='var'):\n        self.var = var\n        self.name = name\n \n    def __get__(self, instance, owner):\n        print '__get__----', self, instance, owner, self.name\n        return self.var\n \n    def __set__(self, instance, value):  # 含有__set__方法为数据描述符\n        print '__set__----', self, instance, value\n        self.var = value\n \n \nclass MyClass(object):\n    x = Access(10, 'ttxsgoto')\n \n    def __init__(self, x):\n        self.x = x\n \nt = MyClass(100)\nprint '----\\n', t.x\nprint '====\\n', t.__dict__\nprint 'xxxx\\n', MyClass.__dict__\nprint 'yyyy\\n', MyClass.x\n \n########### 数据描述符的输出 ###########\n'''\n__set__---- <__main__.Access object at 0x10687c2d0> <__main__.MyClass object at 0x10687c610> 100\n----\n__get__---- <__main__.Access object at 0x10687c2d0> <__main__.MyClass object at 0x10687c610> <class '__main__.MyClass'> ttxsgoto\n100\n====\n{}\nxxxx\n{'__module__': '__main__', '__dict__': <attribute '__dict__' of 'MyClass' objects>, 'x': <__main__.Access object at 0x10687c2d0>, '__weakref__': <attribute '__weakref__' of 'MyClass' objects>, '__doc__': None, '__init__': <function __init__ at 0x10687b320>}\nyyyy\n__get__---- <__main__.Access object at 0x10687c2d0> None <class '__main__.MyClass'> ttxsgoto\n100\n'''\n \n########### 非数据描述符的输出 ###########\n'''\n----\n100\n====\n{'x': 100}\nxxxx\n{'__module__': '__main__', '__dict__': <attribute '__dict__' of 'MyClass' objects>, 'x': <__main__.Access object at 0x1012502d0>, '__weakref__': <attribute '__weakref__' of 'MyClass' objects>, '__doc__': None, '__init__': <function __init__ at 0x10124f050>}\nyyyy\n__get__---- <__main__.Access object at 0x1012502d0> None <class '__main__.MyClass'> ttxsgoto\n10\n'''\n```","slug":"descriptor","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vn001hct8uenj1rb1c","content":"<h3 id=\"描述符说明\"><a href=\"#描述符说明\" class=\"headerlink\" title=\"描述符说明\"></a>描述符说明</h3><pre><code>- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符\n- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写\n- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中\n  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找\n  顺序为a.__dict__[&apos;x&apos;],然后是type(a).__dict__[&apos;x&apos;].如果还是没找\n  到就往上级(父类)中查找最后查找是否有__getattr__\n- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用\n  描述符的__get__()方法，对于设置和删除也是同样的原理\n- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;\n- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;\n</code></pre><h3 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h3><pre><code>- 描述符作为属性访问时,是被自动调用\n- 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__[&apos;x&apos;].__get__(None, Class)\n- 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__[&apos;x&apos;].__get__(object, type(object))\n</code></pre><h3 id=\"描述符用途-使用场景\"><a href=\"#描述符用途-使用场景\" class=\"headerlink\" title=\"描述符用途,使用场景\"></a>描述符用途,使用场景</h3><pre><code>- 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符\n- 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符\n- 描述符会&apos;劫持&apos;那些本是self.__dict__的操作\n- 把一个类的操作托付给另外一个类\n- 静态方法,类方法,parperty都是构建描述符的类\n</code></pre><h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 属性进行相应的处理而不会对整体有影响</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Integer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, age)</span>:</span></div><div class=\"line\">        self.age = age</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__get__-----'</span>, self, instance, owner</div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"comment\"># return instance.__dict__[self.age]  # 获取dict中对应的属性值</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.age</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__set__-----'</span>, self, instance, value</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> type(eval(str(value))) == float:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Age must int and not negative '</span>)</div><div class=\"line\">        <span class=\"comment\"># instance.__dict__[self.age] = value # 修改dict中对应的属性值</span></div><div class=\"line\">        self.age = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">del</span> self.age</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SexType</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, sex)</span>:</span></div><div class=\"line\">        self.sex = sex</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"comment\"># return instance.__dict__[self.sex]  # 获取dict中对应的属性值</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.sex</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'M'</span>, <span class=\"string\">'W'</span>]:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'The value must be M/W '</span>)</div><div class=\"line\">        <span class=\"comment\"># instance.__dict__[self.sex] = value # 修改dict中对应的属性值</span></div><div class=\"line\">        self.sex = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">del</span> self.sex</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    age = Integer(<span class=\"string\">'age'</span>)</div><div class=\"line\">    sex = SexType(<span class=\"string\">'sex'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, sex, age)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.sex = sex</div><div class=\"line\">        self.age = age</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Person info --name:&#123;&#125;,--sex:&#123;&#125;,--age:&#123;&#125;'</span>.format(self.name, self.sex, self.age)</div><div class=\"line\"> </div><div class=\"line\">A = Person(name=<span class=\"string\">'ttxsgoto'</span>, sex=<span class=\"string\">'W'</span>, age= <span class=\"number\">15</span> )</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> A.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> Person.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> A.info</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">&#123;'name': 'ttxsgoto'&#125;</div><div class=\"line\">&#123;'info': &lt;property object at 0x1028ad418&gt;, '__module__': '__main__', 'age': &lt;__main__.Integer object at 0x1028b30d0&gt;, 'sex': &lt;__main__.SexType object at 0x1028b3110&gt;, '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x1028b2578&gt;&#125;</div><div class=\"line\">__get__----- &lt;__main__.Integer object at 0x1028b30d0&gt; &lt;__main__.Person object at 0x1028b3150&gt; &lt;class '__main__.Person'&gt;</div><div class=\"line\">Person info --name:ttxsgoto,--sex:W,--age:15</div><div class=\"line\">'''</div></pre></td></tr></table></figure>\n<h4 id=\"实例二\"><a href=\"#实例二\" class=\"headerlink\" title=\"实例二\"></a>实例二</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 数据描述符和非数据描述符的区别</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Access</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, var=None, name=<span class=\"string\">'var'</span>)</span>:</span></div><div class=\"line\">        self.var = var</div><div class=\"line\">        self.name = name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__get__----'</span>, self, instance, owner, self.name</div><div class=\"line\">        <span class=\"keyword\">return</span> self.var</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span>  <span class=\"comment\"># 含有__set__方法为数据描述符</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__set__----'</span>, self, instance, value</div><div class=\"line\">        self.var = value</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    x = Access(<span class=\"number\">10</span>, <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></div><div class=\"line\">        self.x = x</div><div class=\"line\"> </div><div class=\"line\">t = MyClass(<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'----\\n'</span>, t.x</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'====\\n'</span>, t.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'xxxx\\n'</span>, MyClass.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'yyyy\\n'</span>, MyClass.x</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########### 数据描述符的输出 ###########</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">__set__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; 100</div><div class=\"line\">----</div><div class=\"line\">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class=\"line\">100</div><div class=\"line\">====</div><div class=\"line\">&#123;&#125;</div><div class=\"line\">xxxx</div><div class=\"line\">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x10687c2d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10687b320&gt;&#125;</div><div class=\"line\">yyyy</div><div class=\"line\">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class=\"line\">100</div><div class=\"line\">'''</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########### 非数据描述符的输出 ###########</span></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">----</div><div class=\"line\">100</div><div class=\"line\">====</div><div class=\"line\">&#123;'x': 100&#125;</div><div class=\"line\">xxxx</div><div class=\"line\">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x1012502d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10124f050&gt;&#125;</div><div class=\"line\">yyyy</div><div class=\"line\">__get__---- &lt;__main__.Access object at 0x1012502d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class=\"line\">10</div><div class=\"line\">'''</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"描述符说明\"><a href=\"#描述符说明\" class=\"headerlink\" title=\"描述符说明\"></a>描述符说明</h3><pre><code>- 只要是定义了__get__()、__set()__、__delete()__中任意一个方法的对象都叫描述符\n- 描述符是一个具有绑定行为的对象属性，其属性的访问被描述符协议方法覆写\n- 通常来说Python对象的属性控制默认是这样的：从对象的字典(__dict__)中\n  获取（get），设置（set）,删除（delete），比如：对于实例a，a.x的查找\n  顺序为a.__dict__[&apos;x&apos;],然后是type(a).__dict__[&apos;x&apos;].如果还是没找\n  到就往上级(父类)中查找最后查找是否有__getattr__\n- 如果属性x是一个描述符，那么访问a.x时不再从字典__dict__中读取，而是调用\n  描述符的__get__()方法，对于设置和删除也是同样的原理\n- 同时含有__get__,__set__方法,为数据描述符对象;仅实现__get__方法,为非数据描述符对象;\n- 数据描述符优先于实例的字典，对于相同名字的会覆盖;实例的字典优先于非数据描述符,但不会覆盖;\n</code></pre><h3 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h3><pre><code>- 描述符作为属性访问时,是被自动调用\n- 类属性描述符对象,使用type.__getattribute__,把Class.x转换成Class.__dict__[&apos;x&apos;].__get__(None, Class)\n- 实例属性描述符对象,使用object.__getattribute__,把object.x转换为type(object).__dict__[&apos;x&apos;].__get__(object, type(object))\n</code></pre><h3 id=\"描述符用途-使用场景\"><a href=\"#描述符用途-使用场景\" class=\"headerlink\" title=\"描述符用途,使用场景\"></a>描述符用途,使用场景</h3><pre><code>- 当希望对某些类的属性进行特别的处理而不会对整体的其他属性有影响的话,可以使用修饰符\n- 只要一个类实现了__get__,__set__,__delete__方法的任意一种就是描述符\n- 描述符会&apos;劫持&apos;那些本是self.__dict__的操作\n- 把一个类的操作托付给另外一个类\n- 静态方法,类方法,parperty都是构建描述符的类\n</code></pre><h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 属性进行相应的处理而不会对整体有影响</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Integer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, age)</span>:</span></div><div class=\"line\">        self.age = age</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__get__-----'</span>, self, instance, owner</div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"comment\"># return instance.__dict__[self.age]  # 获取dict中对应的属性值</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.age</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__set__-----'</span>, self, instance, value</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> type(eval(str(value))) == float:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Age must int and not negative '</span>)</div><div class=\"line\">        <span class=\"comment\"># instance.__dict__[self.age] = value # 修改dict中对应的属性值</span></div><div class=\"line\">        self.age = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">del</span> self.age</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SexType</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, sex)</span>:</span></div><div class=\"line\">        self.sex = sex</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"comment\"># return instance.__dict__[self.sex]  # 获取dict中对应的属性值</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.sex</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'M'</span>, <span class=\"string\">'W'</span>]:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'The value must be M/W '</span>)</div><div class=\"line\">        <span class=\"comment\"># instance.__dict__[self.sex] = value # 修改dict中对应的属性值</span></div><div class=\"line\">        self.sex = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">del</span> self.sex</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    age = Integer(<span class=\"string\">'age'</span>)</div><div class=\"line\">    sex = SexType(<span class=\"string\">'sex'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, sex, age)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.sex = sex</div><div class=\"line\">        self.age = age</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Person info --name:&#123;&#125;,--sex:&#123;&#125;,--age:&#123;&#125;'</span>.format(self.name, self.sex, self.age)</div><div class=\"line\"> </div><div class=\"line\">A = Person(name=<span class=\"string\">'ttxsgoto'</span>, sex=<span class=\"string\">'W'</span>, age= <span class=\"number\">15</span> )</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> A.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> Person.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> A.info</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########## 结果 ##########</span></div><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">&#123;'name': 'ttxsgoto'&#125;</div><div class=\"line\">&#123;'info': &lt;property object at 0x1028ad418&gt;, '__module__': '__main__', 'age': &lt;__main__.Integer object at 0x1028b30d0&gt;, 'sex': &lt;__main__.SexType object at 0x1028b3110&gt;, '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x1028b2578&gt;&#125;</div><div class=\"line\">__get__----- &lt;__main__.Integer object at 0x1028b30d0&gt; &lt;__main__.Person object at 0x1028b3150&gt; &lt;class '__main__.Person'&gt;</div><div class=\"line\">Person info --name:ttxsgoto,--sex:W,--age:15</div><div class=\"line\">'''</span></div></pre></td></tr></table></figure>\n<h4 id=\"实例二\"><a href=\"#实例二\" class=\"headerlink\" title=\"实例二\"></a>实例二</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 数据描述符和非数据描述符的区别</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Access</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, var=None, name=<span class=\"string\">'var'</span>)</span>:</span></div><div class=\"line\">        self.var = var</div><div class=\"line\">        self.name = name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__get__----'</span>, self, instance, owner, self.name</div><div class=\"line\">        <span class=\"keyword\">return</span> self.var</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span>  <span class=\"comment\"># 含有__set__方法为数据描述符</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'__set__----'</span>, self, instance, value</div><div class=\"line\">        self.var = value</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    x = Access(<span class=\"number\">10</span>, <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></div><div class=\"line\">        self.x = x</div><div class=\"line\"> </div><div class=\"line\">t = MyClass(<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'----\\n'</span>, t.x</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'====\\n'</span>, t.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'xxxx\\n'</span>, MyClass.__dict__</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'yyyy\\n'</span>, MyClass.x</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########### 数据描述符的输出 ###########</span></div><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">__set__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; 100</div><div class=\"line\">----</div><div class=\"line\">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; &lt;__main__.MyClass object at 0x10687c610&gt; &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class=\"line\">100</div><div class=\"line\">====</div><div class=\"line\">&#123;&#125;</div><div class=\"line\">xxxx</div><div class=\"line\">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x10687c2d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10687b320&gt;&#125;</div><div class=\"line\">yyyy</div><div class=\"line\">__get__---- &lt;__main__.Access object at 0x10687c2d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class=\"line\">100</div><div class=\"line\">'''</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########### 非数据描述符的输出 ###########</span></div><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">----</div><div class=\"line\">100</div><div class=\"line\">====</div><div class=\"line\">&#123;'x': 100&#125;</div><div class=\"line\">xxxx</div><div class=\"line\">&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 'x': &lt;__main__.Access object at 0x1012502d0&gt;, '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x10124f050&gt;&#125;</div><div class=\"line\">yyyy</div><div class=\"line\">__get__---- &lt;__main__.Access object at 0x1012502d0&gt; None &lt;class '__main__.MyClass'&gt; ttxsgoto</div><div class=\"line\">10</div><div class=\"line\">'''</span></div></pre></td></tr></table></figure>"},{"title":"Python Decorator装饰器","date":"2017-05-13T02:57:35.000Z","_content":"### 功能\n给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）\n\n### 特性\n\t- 能把装饰的函数替换成其他函数\n\t- 装饰器在加载/导入模块时立即执行,被装饰的函数在被调用的时候运行\n\n### 变量作用域\n- 内部函数,不修改全局变量可以访问全局变量\n- 内部函数,修改同名全局变量,则python会认为它是一个局部变量\n- 在内部函数修改同名全局变量之前调用变量名称, 则引发UnboundLocalError\n\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nb = 6\n \ndef f1(a):\n    print(a)\n    # b = 4\n    print(b)\n    b = 4\n    print(b)\n \nf1(3)\n \n# UnboundLocalError: local variable 'b' referenced before assignment\n\"\"\"\n对于上面的说明:\n“Python 编译函数的定义体时，它判断 b 是局部变量，因为在函数中给它赋值了。生成的字节码证实了这种判断，Python 会尝试从本地环境获取 b。后面调用 f1(3) 时， f1 的定义体会获取并打印局部变量 a 的值，但是尝试获取局部变量 b 的值时，发现 b 没有绑定值。”\n摘录来自: [巴西] Luciano Ramalho. “流畅的Python”。\n\"\"\"\n \nb = 6\n \ndef f2(a):\n    global b    # 函数中b为全局变量\n    print(a)\n    print(b)\n    b = 4\n    print(b)\n \nf2(3)\n```\n\n### 闭包\n闭包指延伸了作用域的函数，其中包含函数定义体中引用，但是不在定义体中定义的非全局变量，函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量\n\n最常用功能： 闭包使得局部变量在函数外被访问成为可能\n\n自由变量(freevariable): 指未在本地作用域中绑定的变量，也就是上面所说的局部变量\n\n通过函数名.code.co_freevars来获取自由变量对应的名称 通过函数名.closure[0].cell_contents 来获取自由变量的值\n```python\ndef add(x):\n    def inner(y):\n        return x + y\n    return inner\n \nadd1 = add(5)\nprint(add1(10))     # 15\nprint(add1.__code__.co_freevars)    # ('x',)\nprint(add1.__closure__[0].cell_contents)    # 5\n```\n\t- 当函数离开创建环境后,依然持有其上下文状态\n\t- 要形成闭包，首先需要一个嵌套的函数，即函数中定义了另一个函数，子函数引用父函\n\t  数的变量,子函数称为闭包;\n\t- Python中函数也是对象，所以函数也有很多属性，和闭包相关的属性是 \n\t  __closure__,__closure__ 属性定义的是一个包含 cell 对象的元组，其中元组\n      中的每一个cell对象用来保存作用域中变量的值\n\n``` python\n#!/usr/bin/env python\n#coding: utf_8\n \ndef func(n):\n    print 'id(n)----> {}'.format(id(n))\n \n    def new_power(x):\n        return x**n\n    print 'id(new_power)----> {}'.format(id(new_power))\n    return new_power\n \nfirst = func(5) # 在调用func函数时产生一个闭包new_power,并且已拥有局部变量n的值,即使func生命周期结束后,值n依然存在,因为n被new_power引用,所以不会被回收\n \nprint id(first)\ndel func\nprint first(2)\nprint first.__closure__, first.__closure__[0].cell_contents # 函数也为对象,其中的闭包属性\n##### 运行结果 #####\nid(n)----> 140676064892712\nid(new_power)----> 4357115728\n4357115728\n32\n```\n\n### 理解\n装饰器就是执行一个函数,当执行到@auth时，内部的动作为：\n\t- 执行auth函数，并将@auth下面的函数作为auth函数的参数，即@auth == auth(f1)\n\t- 将执行完的auth函数返回值赋给@auth下面的函数的函数名，即 f1 = auth(f1),相当于执行inner函数\n### 装饰器实例\n\n#### 函数(无参数)的装饰器\n```python\ndef auth(func):\n    def inner():\n        print \"before\"    #执行函数前执行动作\n        func()\n        print \"after\"    #执行函数后执行动作\n    return inner\n     \n@auth  #@auth ==> f1 = auth(f1) ==>f1() 相当于执行inner函数，func为f1函数\ndef f1():\n    print \"This is f1 function\"\n \nf1()\n \n#### 运行结果 ####\nbefore\nThis is f1 function\nafter\n```\n#### 函数含有(一个/多个)参数的装饰器\n```python\ndef auth_arg(func):\n    def inner(*args, **kwargs):  # 传递一个/多个参数\n        print \"before\"\n        ret1,ret2 = func(*args, **kwargs)  # 相当于f2(*args, **kwargs)函数\n        print \"after\"\n        return ret1,ret2\n    return inner\n \n@auth_arg\ndef f2(*args, **kwargs):\n    print  args,kwargs\n    return args,kwargs\n \nkey1 = 'ttxsgoto'\ndict1 = {}\ndict1['ttxs'] = 'goto'\nret1, ret2 = f2(key1, **dict1)\nprint ret1, ret2\n\n#### 运行结果 ####\nbefore\n('ttxsgoto',) {'ttxs': 'goto'}\nafter\n('ttxsgoto',) {'ttxs': 'goto'}\n```\n\n#### 有参数的装饰器\n```python\ndef auth_arg(list1=[]):\n    if not list1:\n        print 'None ....'\n        raise Exception('LIST is  Null ')\n    new_list = []\n    for li in list1:\n        li += 'a'\n        new_list.append(li)\n    print new_list\n    def inner(func):\n        print 'Before'\n        def in_inner(*args, **kwargs):\n            ret1, ret2 = func(*args, **kwargs)\n            return ret1, ret2\n        return in_inner\n    return inner\n \n@auth_arg(list1=['a', '1'])\ndef f3(*args, **kwargs):\n    print \"f3 ---\", args, kwargs\n    return args, kwargs\n \na = [1,2]\ndict1={}\ndict1['ttxs'] = 'goto'\n \nprint f3(a, **dict1)\n \n#### 运行结果 ####\n['aa', '1a']\nBefore\nf3 --- ([1, 2],) {'ttxs': 'goto'}\n```\n#### 多装饰器\n- 在foo函数上层包裹了一层w1，又包裹了一次w2，一个嵌套一个函数，执行\n- 可用于登录后再判断有没有权限，可以使用两个装饰器\n\n```python\ndef w1(func):\n    def inner():\n        print \"before01\"\n        func()\n        print \"after01\"\n    return inner\n \ndef w2(func):\n    def inner():\n        print \"before02\"\n        func()\n        print \"after02\"\n    return inner\n \n@w2\n@w1\ndef foo():\n    print \"foo\"\n \nfoo() #先执行w1，在执行w2，嵌套执行，foo = w2(w1(foo)))\n#### 运行结果 ####\nbefore02\nbefore01\nfoo\nafter01\nafter02\n```\n#### 函数的类装饰器(1)\n```python\nclass Foo(object):\n    '''\n    类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法\n    '''\n \n    def __init__(self, func):\n    \tprint \"__init__  function\"\n        self.func = func\n \n    def __call__(self, *args, **kwargs):\n        print \"Before...\"\n        self.func()\n        print \"After...\"\n \n@Foo\ndef bar():\n    print 'bar funtion()'\n \nbar()\n \n#### 运行结果 ####\n__init__  function\nBefore...\nbar funtion()\nAfter...\n```\n#### 函数的类装饰器(2)\n```python\nclass Decorate(object):\n \n    def __init__(self,arg_list=[]):\n        self.arg_list = arg_list\n \n    def __call__(self, func):\n        if not self.arg_list:\n                print 'None ....'\n                raise Exception('LIST is  Null ')\n        new_list = []\n        for li in self.arg_list:\n            li += 'a'\n            new_list.append(li)\n        print new_list\n        def inner(*args, **kwargs):\n            ret1, ret2 = func(*args, **kwargs)\n            return ret1, ret2\n        return inner\n \n@Decorate(arg_list=['a', 'b'])\ndef f3(*args, **kwargs):\n    print \"f3  function\", args, kwargs\n    return args, kwargs\n \na = [1,2]\ndict1={}\ndict1['ttxs'] = 'goto'\nret = f3(a, **dict1)\nprint ret\n \n#### 运行结果 ####\n['aa', 'ba']\nf3  function ([1, 2],) {'ttxs': 'goto'}\n(([1, 2],), {'ttxs': 'goto'})\n```\n### 装饰器的不足\n使用装饰器极大地复用了代码，缺点就是原函数的元信息丢失\n```python\nfrom functools import wraps\n \ndef auth(func):\n    @wraps(func)\t#保持原函数信息一致，如果没有该装饰器，返回为inner函数\n    def inner():\n        print \"before\"\n        func()\n        print \"after\"\n    return inner\n \n@auth\ndef f1():\n    print \"This is f1 function\"\n \nf1()\nprint f1, f1.__name__\n#### 运行结果 ####\nbefore\nThis is f1 function\nafter\n<function inner at 0x10e55b140> inner\t#这些显示为inner函数,本来调用的是f1函数\n\n```\n\n\n\n\n\n\n","source":"_posts/decorator.md","raw":"---\ntitle: Python Decorator装饰器\ndate: 2017-05-13 10:57:35\ntags:\n  - Decorator\ncategories:\n  - python\n---\n### 功能\n给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）\n\n### 特性\n\t- 能把装饰的函数替换成其他函数\n\t- 装饰器在加载/导入模块时立即执行,被装饰的函数在被调用的时候运行\n\n### 变量作用域\n- 内部函数,不修改全局变量可以访问全局变量\n- 内部函数,修改同名全局变量,则python会认为它是一个局部变量\n- 在内部函数修改同名全局变量之前调用变量名称, 则引发UnboundLocalError\n\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nb = 6\n \ndef f1(a):\n    print(a)\n    # b = 4\n    print(b)\n    b = 4\n    print(b)\n \nf1(3)\n \n# UnboundLocalError: local variable 'b' referenced before assignment\n\"\"\"\n对于上面的说明:\n“Python 编译函数的定义体时，它判断 b 是局部变量，因为在函数中给它赋值了。生成的字节码证实了这种判断，Python 会尝试从本地环境获取 b。后面调用 f1(3) 时， f1 的定义体会获取并打印局部变量 a 的值，但是尝试获取局部变量 b 的值时，发现 b 没有绑定值。”\n摘录来自: [巴西] Luciano Ramalho. “流畅的Python”。\n\"\"\"\n \nb = 6\n \ndef f2(a):\n    global b    # 函数中b为全局变量\n    print(a)\n    print(b)\n    b = 4\n    print(b)\n \nf2(3)\n```\n\n### 闭包\n闭包指延伸了作用域的函数，其中包含函数定义体中引用，但是不在定义体中定义的非全局变量，函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量\n\n最常用功能： 闭包使得局部变量在函数外被访问成为可能\n\n自由变量(freevariable): 指未在本地作用域中绑定的变量，也就是上面所说的局部变量\n\n通过函数名.code.co_freevars来获取自由变量对应的名称 通过函数名.closure[0].cell_contents 来获取自由变量的值\n```python\ndef add(x):\n    def inner(y):\n        return x + y\n    return inner\n \nadd1 = add(5)\nprint(add1(10))     # 15\nprint(add1.__code__.co_freevars)    # ('x',)\nprint(add1.__closure__[0].cell_contents)    # 5\n```\n\t- 当函数离开创建环境后,依然持有其上下文状态\n\t- 要形成闭包，首先需要一个嵌套的函数，即函数中定义了另一个函数，子函数引用父函\n\t  数的变量,子函数称为闭包;\n\t- Python中函数也是对象，所以函数也有很多属性，和闭包相关的属性是 \n\t  __closure__,__closure__ 属性定义的是一个包含 cell 对象的元组，其中元组\n      中的每一个cell对象用来保存作用域中变量的值\n\n``` python\n#!/usr/bin/env python\n#coding: utf_8\n \ndef func(n):\n    print 'id(n)----> {}'.format(id(n))\n \n    def new_power(x):\n        return x**n\n    print 'id(new_power)----> {}'.format(id(new_power))\n    return new_power\n \nfirst = func(5) # 在调用func函数时产生一个闭包new_power,并且已拥有局部变量n的值,即使func生命周期结束后,值n依然存在,因为n被new_power引用,所以不会被回收\n \nprint id(first)\ndel func\nprint first(2)\nprint first.__closure__, first.__closure__[0].cell_contents # 函数也为对象,其中的闭包属性\n##### 运行结果 #####\nid(n)----> 140676064892712\nid(new_power)----> 4357115728\n4357115728\n32\n```\n\n### 理解\n装饰器就是执行一个函数,当执行到@auth时，内部的动作为：\n\t- 执行auth函数，并将@auth下面的函数作为auth函数的参数，即@auth == auth(f1)\n\t- 将执行完的auth函数返回值赋给@auth下面的函数的函数名，即 f1 = auth(f1),相当于执行inner函数\n### 装饰器实例\n\n#### 函数(无参数)的装饰器\n```python\ndef auth(func):\n    def inner():\n        print \"before\"    #执行函数前执行动作\n        func()\n        print \"after\"    #执行函数后执行动作\n    return inner\n     \n@auth  #@auth ==> f1 = auth(f1) ==>f1() 相当于执行inner函数，func为f1函数\ndef f1():\n    print \"This is f1 function\"\n \nf1()\n \n#### 运行结果 ####\nbefore\nThis is f1 function\nafter\n```\n#### 函数含有(一个/多个)参数的装饰器\n```python\ndef auth_arg(func):\n    def inner(*args, **kwargs):  # 传递一个/多个参数\n        print \"before\"\n        ret1,ret2 = func(*args, **kwargs)  # 相当于f2(*args, **kwargs)函数\n        print \"after\"\n        return ret1,ret2\n    return inner\n \n@auth_arg\ndef f2(*args, **kwargs):\n    print  args,kwargs\n    return args,kwargs\n \nkey1 = 'ttxsgoto'\ndict1 = {}\ndict1['ttxs'] = 'goto'\nret1, ret2 = f2(key1, **dict1)\nprint ret1, ret2\n\n#### 运行结果 ####\nbefore\n('ttxsgoto',) {'ttxs': 'goto'}\nafter\n('ttxsgoto',) {'ttxs': 'goto'}\n```\n\n#### 有参数的装饰器\n```python\ndef auth_arg(list1=[]):\n    if not list1:\n        print 'None ....'\n        raise Exception('LIST is  Null ')\n    new_list = []\n    for li in list1:\n        li += 'a'\n        new_list.append(li)\n    print new_list\n    def inner(func):\n        print 'Before'\n        def in_inner(*args, **kwargs):\n            ret1, ret2 = func(*args, **kwargs)\n            return ret1, ret2\n        return in_inner\n    return inner\n \n@auth_arg(list1=['a', '1'])\ndef f3(*args, **kwargs):\n    print \"f3 ---\", args, kwargs\n    return args, kwargs\n \na = [1,2]\ndict1={}\ndict1['ttxs'] = 'goto'\n \nprint f3(a, **dict1)\n \n#### 运行结果 ####\n['aa', '1a']\nBefore\nf3 --- ([1, 2],) {'ttxs': 'goto'}\n```\n#### 多装饰器\n- 在foo函数上层包裹了一层w1，又包裹了一次w2，一个嵌套一个函数，执行\n- 可用于登录后再判断有没有权限，可以使用两个装饰器\n\n```python\ndef w1(func):\n    def inner():\n        print \"before01\"\n        func()\n        print \"after01\"\n    return inner\n \ndef w2(func):\n    def inner():\n        print \"before02\"\n        func()\n        print \"after02\"\n    return inner\n \n@w2\n@w1\ndef foo():\n    print \"foo\"\n \nfoo() #先执行w1，在执行w2，嵌套执行，foo = w2(w1(foo)))\n#### 运行结果 ####\nbefore02\nbefore01\nfoo\nafter01\nafter02\n```\n#### 函数的类装饰器(1)\n```python\nclass Foo(object):\n    '''\n    类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法\n    '''\n \n    def __init__(self, func):\n    \tprint \"__init__  function\"\n        self.func = func\n \n    def __call__(self, *args, **kwargs):\n        print \"Before...\"\n        self.func()\n        print \"After...\"\n \n@Foo\ndef bar():\n    print 'bar funtion()'\n \nbar()\n \n#### 运行结果 ####\n__init__  function\nBefore...\nbar funtion()\nAfter...\n```\n#### 函数的类装饰器(2)\n```python\nclass Decorate(object):\n \n    def __init__(self,arg_list=[]):\n        self.arg_list = arg_list\n \n    def __call__(self, func):\n        if not self.arg_list:\n                print 'None ....'\n                raise Exception('LIST is  Null ')\n        new_list = []\n        for li in self.arg_list:\n            li += 'a'\n            new_list.append(li)\n        print new_list\n        def inner(*args, **kwargs):\n            ret1, ret2 = func(*args, **kwargs)\n            return ret1, ret2\n        return inner\n \n@Decorate(arg_list=['a', 'b'])\ndef f3(*args, **kwargs):\n    print \"f3  function\", args, kwargs\n    return args, kwargs\n \na = [1,2]\ndict1={}\ndict1['ttxs'] = 'goto'\nret = f3(a, **dict1)\nprint ret\n \n#### 运行结果 ####\n['aa', 'ba']\nf3  function ([1, 2],) {'ttxs': 'goto'}\n(([1, 2],), {'ttxs': 'goto'})\n```\n### 装饰器的不足\n使用装饰器极大地复用了代码，缺点就是原函数的元信息丢失\n```python\nfrom functools import wraps\n \ndef auth(func):\n    @wraps(func)\t#保持原函数信息一致，如果没有该装饰器，返回为inner函数\n    def inner():\n        print \"before\"\n        func()\n        print \"after\"\n    return inner\n \n@auth\ndef f1():\n    print \"This is f1 function\"\n \nf1()\nprint f1, f1.__name__\n#### 运行结果 ####\nbefore\nThis is f1 function\nafter\n<function inner at 0x10e55b140> inner\t#这些显示为inner函数,本来调用的是f1函数\n\n```\n\n\n\n\n\n\n","slug":"decorator","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vp001kct8u9c3iitao","content":"<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><pre><code>- 能把装饰的函数替换成其他函数\n- 装饰器在加载/导入模块时立即执行,被装饰的函数在被调用的时候运行\n</code></pre><h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><ul>\n<li>内部函数,不修改全局变量可以访问全局变量</li>\n<li>内部函数,修改同名全局变量,则python会认为它是一个局部变量</li>\n<li>在内部函数修改同名全局变量之前调用变量名称, 则引发UnboundLocalError</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\">b = <span class=\"number\">6</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(a)</span>:</span></div><div class=\"line\">    print(a)</div><div class=\"line\">    <span class=\"comment\"># b = 4</span></div><div class=\"line\">    print(b)</div><div class=\"line\">    b = <span class=\"number\">4</span></div><div class=\"line\">    print(b)</div><div class=\"line\"> </div><div class=\"line\">f1(<span class=\"number\">3</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># UnboundLocalError: local variable 'b' referenced before assignment</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">对于上面的说明:</div><div class=\"line\">“Python 编译函数的定义体时，它判断 b 是局部变量，因为在函数中给它赋值了。生成的字节码证实了这种判断，Python 会尝试从本地环境获取 b。后面调用 f1(3) 时， f1 的定义体会获取并打印局部变量 a 的值，但是尝试获取局部变量 b 的值时，发现 b 没有绑定值。”</div><div class=\"line\">摘录来自: [巴西] Luciano Ramalho. “流畅的Python”。</div><div class=\"line\">\"\"\"</div><div class=\"line\"> </div><div class=\"line\">b = <span class=\"number\">6</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">global</span> b    <span class=\"comment\"># 函数中b为全局变量</span></div><div class=\"line\">    print(a)</div><div class=\"line\">    print(b)</div><div class=\"line\">    b = <span class=\"number\">4</span></div><div class=\"line\">    print(b)</div><div class=\"line\"> </div><div class=\"line\">f2(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包指延伸了作用域的函数，其中包含函数定义体中引用，但是不在定义体中定义的非全局变量，函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量</p>\n<p>最常用功能： 闭包使得局部变量在函数外被访问成为可能</p>\n<p>自由变量(freevariable): 指未在本地作用域中绑定的变量，也就是上面所说的局部变量</p>\n<p>通过函数名.code.co_freevars来获取自由变量对应的名称 通过函数名.closure[0].cell_contents 来获取自由变量的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(y)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> x + y</div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\">add1 = add(<span class=\"number\">5</span>)</div><div class=\"line\">print(add1(<span class=\"number\">10</span>))     <span class=\"comment\"># 15</span></div><div class=\"line\">print(add1.__code__.co_freevars)    <span class=\"comment\"># ('x',)</span></div><div class=\"line\">print(add1.__closure__[<span class=\"number\">0</span>].cell_contents)    <span class=\"comment\"># 5</span></div></pre></td></tr></table></figure></p>\n<pre><code>- 当函数离开创建环境后,依然持有其上下文状态\n- 要形成闭包，首先需要一个嵌套的函数，即函数中定义了另一个函数，子函数引用父函\n  数的变量,子函数称为闭包;\n- Python中函数也是对象，所以函数也有很多属性，和闭包相关的属性是 \n  __closure__,__closure__ 属性定义的是一个包含 cell 对象的元组，其中元组\n  中的每一个cell对象用来保存作用域中变量的值\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python</div><div class=\"line\">#coding: utf_8</div><div class=\"line\"> </div><div class=\"line\">def func(n):</div><div class=\"line\">    print 'id(n)----&gt; &#123;&#125;'.format(id(n))</div><div class=\"line\"> </div><div class=\"line\">    def new_power(x):</div><div class=\"line\">        return x**n</div><div class=\"line\">    print 'id(new_power)----&gt; &#123;&#125;'.format(id(new_power))</div><div class=\"line\">    return new_power</div><div class=\"line\"> </div><div class=\"line\">first = func(5) # 在调用func函数时产生一个闭包new_power,并且已拥有局部变量n的值,即使func生命周期结束后,值n依然存在,因为n被new_power引用,所以不会被回收</div><div class=\"line\"> </div><div class=\"line\">print id(first)</div><div class=\"line\">del func</div><div class=\"line\">print first(2)</div><div class=\"line\">print first.__closure__, first.__closure__[0].cell_contents # 函数也为对象,其中的闭包属性</div><div class=\"line\">##### 运行结果 #####</div><div class=\"line\">id(n)----&gt; 140676064892712</div><div class=\"line\">id(new_power)----&gt; 4357115728</div><div class=\"line\">4357115728</div><div class=\"line\">32</div></pre></td></tr></table></figure>\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>装饰器就是执行一个函数,当执行到@auth时，内部的动作为：</p>\n<pre><code>- 执行auth函数，并将@auth下面的函数作为auth函数的参数，即@auth == auth(f1)\n- 将执行完的auth函数返回值赋给@auth下面的函数的函数名，即 f1 = auth(f1),相当于执行inner函数\n</code></pre><h3 id=\"装饰器实例\"><a href=\"#装饰器实例\" class=\"headerlink\" title=\"装饰器实例\"></a>装饰器实例</h3><h4 id=\"函数-无参数-的装饰器\"><a href=\"#函数-无参数-的装饰器\" class=\"headerlink\" title=\"函数(无参数)的装饰器\"></a>函数(无参数)的装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span>    <span class=\"comment\">#执行函数前执行动作</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span>    <span class=\"comment\">#执行函数后执行动作</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\">     </div><div class=\"line\"><span class=\"meta\">@auth  #@auth ==&gt; f1 = auth(f1) ==&gt;f1() 相当于执行inner函数，func为f1函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"This is f1 function\"</span></div><div class=\"line\"> </div><div class=\"line\">f1()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before</div><div class=\"line\">This <span class=\"keyword\">is</span> f1 function</div><div class=\"line\">after</div></pre></td></tr></table></figure>\n<h4 id=\"函数含有-一个-多个-参数的装饰器\"><a href=\"#函数含有-一个-多个-参数的装饰器\" class=\"headerlink\" title=\"函数含有(一个/多个)参数的装饰器\"></a>函数含有(一个/多个)参数的装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_arg</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(*args, **kwargs)</span>:</span>  <span class=\"comment\"># 传递一个/多个参数</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span></div><div class=\"line\">        ret1,ret2 = func(*args, **kwargs)  <span class=\"comment\"># 相当于f2(*args, **kwargs)函数</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> ret1,ret2</div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@auth_arg</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span>  args,kwargs</div><div class=\"line\">    <span class=\"keyword\">return</span> args,kwargs</div><div class=\"line\"> </div><div class=\"line\">key1 = <span class=\"string\">'ttxsgoto'</span></div><div class=\"line\">dict1 = &#123;&#125;</div><div class=\"line\">dict1[<span class=\"string\">'ttxs'</span>] = <span class=\"string\">'goto'</span></div><div class=\"line\">ret1, ret2 = f2(key1, **dict1)</div><div class=\"line\"><span class=\"keyword\">print</span> ret1, ret2</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before</div><div class=\"line\">(<span class=\"string\">'ttxsgoto'</span>,) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div><div class=\"line\">after</div><div class=\"line\">(<span class=\"string\">'ttxsgoto'</span>,) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"有参数的装饰器\"><a href=\"#有参数的装饰器\" class=\"headerlink\" title=\"有参数的装饰器\"></a>有参数的装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_arg</span><span class=\"params\">(list1=[])</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> list1:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'None ....'</span></div><div class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'LIST is  Null '</span>)</div><div class=\"line\">    new_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> list1:</div><div class=\"line\">        li += <span class=\"string\">'a'</span></div><div class=\"line\">        new_list.append(li)</div><div class=\"line\">    <span class=\"keyword\">print</span> new_list</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Before'</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">in_inner</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">            ret1, ret2 = func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">return</span> ret1, ret2</div><div class=\"line\">        <span class=\"keyword\">return</span> in_inner</div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@auth_arg(list1=['a', '1'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"f3 ---\"</span>, args, kwargs</div><div class=\"line\">    <span class=\"keyword\">return</span> args, kwargs</div><div class=\"line\"> </div><div class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</div><div class=\"line\">dict1=&#123;&#125;</div><div class=\"line\">dict1[<span class=\"string\">'ttxs'</span>] = <span class=\"string\">'goto'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> f3(a, **dict1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">[<span class=\"string\">'aa'</span>, <span class=\"string\">'1a'</span>]</div><div class=\"line\">Before</div><div class=\"line\">f3 --- ([<span class=\"number\">1</span>, <span class=\"number\">2</span>],) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"多装饰器\"><a href=\"#多装饰器\" class=\"headerlink\" title=\"多装饰器\"></a>多装饰器</h4><ul>\n<li>在foo函数上层包裹了一层w1，又包裹了一次w2，一个嵌套一个函数，执行</li>\n<li>可用于登录后再判断有没有权限，可以使用两个装饰器</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w1</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before01\"</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after01\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w2</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before02\"</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after02\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@w2</span></div><div class=\"line\"><span class=\"meta\">@w1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"foo\"</span></div><div class=\"line\"> </div><div class=\"line\">foo() <span class=\"comment\">#先执行w1，在执行w2，嵌套执行，foo = w2(w1(foo)))</span></div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before02</div><div class=\"line\">before01</div><div class=\"line\">foo</div><div class=\"line\">after01</div><div class=\"line\">after02</div></pre></td></tr></table></figure>\n<h4 id=\"函数的类装饰器-1\"><a href=\"#函数的类装饰器-1\" class=\"headerlink\" title=\"函数的类装饰器(1)\"></a>函数的类装饰器(1)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法</div><div class=\"line\">    '''</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">print</span> <span class=\"string\">\"__init__  function\"</span></div><div class=\"line\">        self.func = func</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Before...\"</span></div><div class=\"line\">        self.func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"After...\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Foo</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'bar funtion()'</span></div><div class=\"line\"> </div><div class=\"line\">bar()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">__init__  function</div><div class=\"line\">Before...</div><div class=\"line\">bar funtion()</div><div class=\"line\">After...</div></pre></td></tr></table></figure>\n<h4 id=\"函数的类装饰器-2\"><a href=\"#函数的类装饰器-2\" class=\"headerlink\" title=\"函数的类装饰器(2)\"></a>函数的类装饰器(2)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorate</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,arg_list=[])</span>:</span></div><div class=\"line\">        self.arg_list = arg_list</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, func)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.arg_list:</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">'None ....'</span></div><div class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'LIST is  Null '</span>)</div><div class=\"line\">        new_list = []</div><div class=\"line\">        <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> self.arg_list:</div><div class=\"line\">            li += <span class=\"string\">'a'</span></div><div class=\"line\">            new_list.append(li)</div><div class=\"line\">        <span class=\"keyword\">print</span> new_list</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">            ret1, ret2 = func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">return</span> ret1, ret2</div><div class=\"line\">        <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Decorate(arg_list=['a', 'b'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"f3  function\"</span>, args, kwargs</div><div class=\"line\">    <span class=\"keyword\">return</span> args, kwargs</div><div class=\"line\"> </div><div class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</div><div class=\"line\">dict1=&#123;&#125;</div><div class=\"line\">dict1[<span class=\"string\">'ttxs'</span>] = <span class=\"string\">'goto'</span></div><div class=\"line\">ret = f3(a, **dict1)</div><div class=\"line\"><span class=\"keyword\">print</span> ret</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">[<span class=\"string\">'aa'</span>, <span class=\"string\">'ba'</span>]</div><div class=\"line\">f3  function ([<span class=\"number\">1</span>, <span class=\"number\">2</span>],) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div><div class=\"line\">(([<span class=\"number\">1</span>, <span class=\"number\">2</span>],), &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"装饰器的不足\"><a href=\"#装饰器的不足\" class=\"headerlink\" title=\"装饰器的不足\"></a>装饰器的不足</h3><p>使用装饰器极大地复用了代码，缺点就是原函数的元信息丢失<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\"><span class=\"meta\">    @wraps(func)\t#保持原函数信息一致，如果没有该装饰器，返回为inner函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@auth</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"This is f1 function\"</span></div><div class=\"line\"> </div><div class=\"line\">f1()</div><div class=\"line\"><span class=\"keyword\">print</span> f1, f1.__name__</div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before</div><div class=\"line\">This <span class=\"keyword\">is</span> f1 function</div><div class=\"line\">after</div><div class=\"line\">&lt;function inner at <span class=\"number\">0x10e55b140</span>&gt; inner\t<span class=\"comment\">#这些显示为inner函数,本来调用的是f1函数</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>给程序去重，在不改动源代码和原有调用方式下，给函数添加额外的功能模块（如验证功能）</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><pre><code>- 能把装饰的函数替换成其他函数\n- 装饰器在加载/导入模块时立即执行,被装饰的函数在被调用的时候运行\n</code></pre><h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><ul>\n<li>内部函数,不修改全局变量可以访问全局变量</li>\n<li>内部函数,修改同名全局变量,则python会认为它是一个局部变量</li>\n<li>在内部函数修改同名全局变量之前调用变量名称, 则引发UnboundLocalError</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\">b = <span class=\"number\">6</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(a)</span>:</span></div><div class=\"line\">    print(a)</div><div class=\"line\">    <span class=\"comment\"># b = 4</span></div><div class=\"line\">    print(b)</div><div class=\"line\">    b = <span class=\"number\">4</span></div><div class=\"line\">    print(b)</div><div class=\"line\"> </div><div class=\"line\">f1(<span class=\"number\">3</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># UnboundLocalError: local variable 'b' referenced before assignment</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">对于上面的说明:</div><div class=\"line\">“Python 编译函数的定义体时，它判断 b 是局部变量，因为在函数中给它赋值了。生成的字节码证实了这种判断，Python 会尝试从本地环境获取 b。后面调用 f1(3) 时， f1 的定义体会获取并打印局部变量 a 的值，但是尝试获取局部变量 b 的值时，发现 b 没有绑定值。”</div><div class=\"line\">摘录来自: [巴西] Luciano Ramalho. “流畅的Python”。</div><div class=\"line\">\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">b = <span class=\"number\">6</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">global</span> b    <span class=\"comment\"># 函数中b为全局变量</span></div><div class=\"line\">    print(a)</div><div class=\"line\">    print(b)</div><div class=\"line\">    b = <span class=\"number\">4</span></div><div class=\"line\">    print(b)</div><div class=\"line\"> </div><div class=\"line\">f2(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包指延伸了作用域的函数，其中包含函数定义体中引用，但是不在定义体中定义的非全局变量，函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量</p>\n<p>最常用功能： 闭包使得局部变量在函数外被访问成为可能</p>\n<p>自由变量(freevariable): 指未在本地作用域中绑定的变量，也就是上面所说的局部变量</p>\n<p>通过函数名.code.co_freevars来获取自由变量对应的名称 通过函数名.closure[0].cell_contents 来获取自由变量的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(y)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> x + y</div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\">add1 = add(<span class=\"number\">5</span>)</div><div class=\"line\">print(add1(<span class=\"number\">10</span>))     <span class=\"comment\"># 15</span></div><div class=\"line\">print(add1.__code__.co_freevars)    <span class=\"comment\"># ('x',)</span></div><div class=\"line\">print(add1.__closure__[<span class=\"number\">0</span>].cell_contents)    <span class=\"comment\"># 5</span></div></pre></td></tr></table></figure></p>\n<pre><code>- 当函数离开创建环境后,依然持有其上下文状态\n- 要形成闭包，首先需要一个嵌套的函数，即函数中定义了另一个函数，子函数引用父函\n  数的变量,子函数称为闭包;\n- Python中函数也是对象，所以函数也有很多属性，和闭包相关的属性是 \n  __closure__,__closure__ 属性定义的是一个包含 cell 对象的元组，其中元组\n  中的每一个cell对象用来保存作用域中变量的值\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python</div><div class=\"line\">#coding: utf_8</div><div class=\"line\"> </div><div class=\"line\">def func(n):</div><div class=\"line\">    print 'id(n)----&gt; &#123;&#125;'.format(id(n))</div><div class=\"line\"> </div><div class=\"line\">    def new_power(x):</div><div class=\"line\">        return x**n</div><div class=\"line\">    print 'id(new_power)----&gt; &#123;&#125;'.format(id(new_power))</div><div class=\"line\">    return new_power</div><div class=\"line\"> </div><div class=\"line\">first = func(5) # 在调用func函数时产生一个闭包new_power,并且已拥有局部变量n的值,即使func生命周期结束后,值n依然存在,因为n被new_power引用,所以不会被回收</div><div class=\"line\"> </div><div class=\"line\">print id(first)</div><div class=\"line\">del func</div><div class=\"line\">print first(2)</div><div class=\"line\">print first.__closure__, first.__closure__[0].cell_contents # 函数也为对象,其中的闭包属性</div><div class=\"line\">##### 运行结果 #####</div><div class=\"line\">id(n)----&gt; 140676064892712</div><div class=\"line\">id(new_power)----&gt; 4357115728</div><div class=\"line\">4357115728</div><div class=\"line\">32</div></pre></td></tr></table></figure>\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>装饰器就是执行一个函数,当执行到@auth时，内部的动作为：</p>\n<pre><code>- 执行auth函数，并将@auth下面的函数作为auth函数的参数，即@auth == auth(f1)\n- 将执行完的auth函数返回值赋给@auth下面的函数的函数名，即 f1 = auth(f1),相当于执行inner函数\n</code></pre><h3 id=\"装饰器实例\"><a href=\"#装饰器实例\" class=\"headerlink\" title=\"装饰器实例\"></a>装饰器实例</h3><h4 id=\"函数-无参数-的装饰器\"><a href=\"#函数-无参数-的装饰器\" class=\"headerlink\" title=\"函数(无参数)的装饰器\"></a>函数(无参数)的装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span>    <span class=\"comment\">#执行函数前执行动作</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span>    <span class=\"comment\">#执行函数后执行动作</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\">     </div><div class=\"line\"><span class=\"meta\">@auth  #@auth ==&gt; f1 = auth(f1) ==&gt;f1() 相当于执行inner函数，func为f1函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"This is f1 function\"</span></div><div class=\"line\"> </div><div class=\"line\">f1()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before</div><div class=\"line\">This <span class=\"keyword\">is</span> f1 function</div><div class=\"line\">after</div></pre></td></tr></table></figure>\n<h4 id=\"函数含有-一个-多个-参数的装饰器\"><a href=\"#函数含有-一个-多个-参数的装饰器\" class=\"headerlink\" title=\"函数含有(一个/多个)参数的装饰器\"></a>函数含有(一个/多个)参数的装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_arg</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(*args, **kwargs)</span>:</span>  <span class=\"comment\"># 传递一个/多个参数</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span></div><div class=\"line\">        ret1,ret2 = func(*args, **kwargs)  <span class=\"comment\"># 相当于f2(*args, **kwargs)函数</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> ret1,ret2</div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@auth_arg</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span>  args,kwargs</div><div class=\"line\">    <span class=\"keyword\">return</span> args,kwargs</div><div class=\"line\"> </div><div class=\"line\">key1 = <span class=\"string\">'ttxsgoto'</span></div><div class=\"line\">dict1 = &#123;&#125;</div><div class=\"line\">dict1[<span class=\"string\">'ttxs'</span>] = <span class=\"string\">'goto'</span></div><div class=\"line\">ret1, ret2 = f2(key1, **dict1)</div><div class=\"line\"><span class=\"keyword\">print</span> ret1, ret2</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before</div><div class=\"line\">(<span class=\"string\">'ttxsgoto'</span>,) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div><div class=\"line\">after</div><div class=\"line\">(<span class=\"string\">'ttxsgoto'</span>,) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"有参数的装饰器\"><a href=\"#有参数的装饰器\" class=\"headerlink\" title=\"有参数的装饰器\"></a>有参数的装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_arg</span><span class=\"params\">(list1=[])</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> list1:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'None ....'</span></div><div class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'LIST is  Null '</span>)</div><div class=\"line\">    new_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> list1:</div><div class=\"line\">        li += <span class=\"string\">'a'</span></div><div class=\"line\">        new_list.append(li)</div><div class=\"line\">    <span class=\"keyword\">print</span> new_list</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Before'</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">in_inner</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">            ret1, ret2 = func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">return</span> ret1, ret2</div><div class=\"line\">        <span class=\"keyword\">return</span> in_inner</div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@auth_arg(list1=['a', '1'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"f3 ---\"</span>, args, kwargs</div><div class=\"line\">    <span class=\"keyword\">return</span> args, kwargs</div><div class=\"line\"> </div><div class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</div><div class=\"line\">dict1=&#123;&#125;</div><div class=\"line\">dict1[<span class=\"string\">'ttxs'</span>] = <span class=\"string\">'goto'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> f3(a, **dict1)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">[<span class=\"string\">'aa'</span>, <span class=\"string\">'1a'</span>]</div><div class=\"line\">Before</div><div class=\"line\">f3 --- ([<span class=\"number\">1</span>, <span class=\"number\">2</span>],) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"多装饰器\"><a href=\"#多装饰器\" class=\"headerlink\" title=\"多装饰器\"></a>多装饰器</h4><ul>\n<li>在foo函数上层包裹了一层w1，又包裹了一次w2，一个嵌套一个函数，执行</li>\n<li>可用于登录后再判断有没有权限，可以使用两个装饰器</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w1</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before01\"</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after01\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w2</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before02\"</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after02\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@w2</span></div><div class=\"line\"><span class=\"meta\">@w1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"foo\"</span></div><div class=\"line\"> </div><div class=\"line\">foo() <span class=\"comment\">#先执行w1，在执行w2，嵌套执行，foo = w2(w1(foo)))</span></div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before02</div><div class=\"line\">before01</div><div class=\"line\">foo</div><div class=\"line\">after01</div><div class=\"line\">after02</div></pre></td></tr></table></figure>\n<h4 id=\"函数的类装饰器-1\"><a href=\"#函数的类装饰器-1\" class=\"headerlink\" title=\"函数的类装饰器(1)\"></a>函数的类装饰器(1)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法</div><div class=\"line\">    '''</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">print</span> <span class=\"string\">\"__init__  function\"</span></div><div class=\"line\">        self.func = func</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Before...\"</span></div><div class=\"line\">        self.func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"After...\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Foo</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'bar funtion()'</span></div><div class=\"line\"> </div><div class=\"line\">bar()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">__init__  function</div><div class=\"line\">Before...</div><div class=\"line\">bar funtion()</div><div class=\"line\">After...</div></pre></td></tr></table></figure>\n<h4 id=\"函数的类装饰器-2\"><a href=\"#函数的类装饰器-2\" class=\"headerlink\" title=\"函数的类装饰器(2)\"></a>函数的类装饰器(2)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorate</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,arg_list=[])</span>:</span></div><div class=\"line\">        self.arg_list = arg_list</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, func)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.arg_list:</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">'None ....'</span></div><div class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'LIST is  Null '</span>)</div><div class=\"line\">        new_list = []</div><div class=\"line\">        <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> self.arg_list:</div><div class=\"line\">            li += <span class=\"string\">'a'</span></div><div class=\"line\">            new_list.append(li)</div><div class=\"line\">        <span class=\"keyword\">print</span> new_list</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">            ret1, ret2 = func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">return</span> ret1, ret2</div><div class=\"line\">        <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Decorate(arg_list=['a', 'b'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"f3  function\"</span>, args, kwargs</div><div class=\"line\">    <span class=\"keyword\">return</span> args, kwargs</div><div class=\"line\"> </div><div class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</div><div class=\"line\">dict1=&#123;&#125;</div><div class=\"line\">dict1[<span class=\"string\">'ttxs'</span>] = <span class=\"string\">'goto'</span></div><div class=\"line\">ret = f3(a, **dict1)</div><div class=\"line\"><span class=\"keyword\">print</span> ret</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">[<span class=\"string\">'aa'</span>, <span class=\"string\">'ba'</span>]</div><div class=\"line\">f3  function ([<span class=\"number\">1</span>, <span class=\"number\">2</span>],) &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;</div><div class=\"line\">(([<span class=\"number\">1</span>, <span class=\"number\">2</span>],), &#123;<span class=\"string\">'ttxs'</span>: <span class=\"string\">'goto'</span>&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"装饰器的不足\"><a href=\"#装饰器的不足\" class=\"headerlink\" title=\"装饰器的不足\"></a>装饰器的不足</h3><p>使用装饰器极大地复用了代码，缺点就是原函数的元信息丢失<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\"><span class=\"meta\">    @wraps(func)\t#保持原函数信息一致，如果没有该装饰器，返回为inner函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span></div><div class=\"line\">        func()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inner</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@auth</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"This is f1 function\"</span></div><div class=\"line\"> </div><div class=\"line\">f1()</div><div class=\"line\"><span class=\"keyword\">print</span> f1, f1.__name__</div><div class=\"line\"><span class=\"comment\">#### 运行结果 ####</span></div><div class=\"line\">before</div><div class=\"line\">This <span class=\"keyword\">is</span> f1 function</div><div class=\"line\">after</div><div class=\"line\">&lt;function inner at <span class=\"number\">0x10e55b140</span>&gt; inner\t<span class=\"comment\">#这些显示为inner函数,本来调用的是f1函数</span></div></pre></td></tr></table></figure></p>\n"},{"title":"Django Channels","date":"2017-11-26T14:20:43.000Z","_content":"#### 背景\n项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel，可实现该功能\n\n#### 定义\nChannels基本上就是任务队列：消息被生产者推到通道，然后传递给监听通道的消费者\n\n#### Channels工作层：\n1. 接口服务器，Django和用户（浏览器）之间通信的桥梁，包括一个实现WSGI协议的适配器和一个独立的websocket服务器\n2. 通道后端， 在接口服务器和worker之间传递消息，由插拔式的python代码和存储组成，存储可以是内存、数据库或者redis，推荐使用redis，兼具其余两者的优点\n3. worker，监听所有channel，当有新消息到来时候唤醒功能函数\n\n#### 使用\n1. 安装Channels\n```python\npip install -U channels\n \n# settings.py\n 'channels',\n```\n2. 选择一个通道层(redis)\n```python\npip install -U asgi_redis\n \n# settings.py\n# Channel settings\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"asgi_redis.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [os.environ.get('REDIS_URL', 'redis://redis@127.0.0.1:6379')],\n        },\n        \"ROUTING\": \"proj.routing.channel_routing\",\n    },\n}\n```\n3. routing.py\n```python\nchannel_routing = {\n    # Wire up websocket channels to our consumers:\n    'websocket.connect': consumers.ws_connect,\n    'websocket.receive': consumers.ws_receive,\n    'websocket.disconnect': consumers.ws_disconnect,\n}\n \n# - 'websocket.connect': consumers.ws_connect  第一次通过WebSocket连接上时，一条消息被发送到 websocket.connect 通道\n# - 'websocket.receive': consumers.ws_receive 每条客户端通过已建立的socket发送的消息都被发送到 websocket.receive通道\n# - 'websocket.disconnect': consumers.ws_disconnect 当客户端断开连接时，一条消息被发送到websocket.disconnect通道\n```\n4. consumers.py\n```python\nfrom channels import Group\nfrom channels.sessions import channel_session\nimport json\n \n@channel_session\ndef ws_connect(message):\n    \"\"\"\n    创建message\n    \"\"\"\n    group = 'test'\n    message.reply_channel.send({\"accept\": True})\n    Group(group, channel_layer=message.channel_layer).add(message.reply_channel)\n    message.channel_session['group'] = group    # 通过session保存组信息\n \n \n@channel_session\ndef ws_receive(message):\n    \"\"\"\n    发送message\n    \"\"\"\n    group = message.channel_session['group']\n    message.reply_channel.send({\"accept\": True})\n    data = json.loads(message['text'])\n    Group(group, channel_layer=message.channel_layer).send({'text': json.dumps(data.as_dict())})\n \n \n@channel_session\ndef ws_disconnect(message):\n    \"\"\"\n    关闭message\n    \"\"\"\n    try:\n        group = message.channel_session.get('group')\n        message.reply_channel.send({\"accept\": True})\n        Group(group, channel_layer=message.channel_layer).discard(message.reply_channel)\n    except Exception as e:\n        pass\n\n```\n5. 运行\n```python\nimport os\nimport channels.asgi\n \nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"proj.settings\")\nchannel_layer = channels.asgi.get_channel_layer()\n \n# 测试环境中运行\npython manage.py runserver\n# 前台接口服务daphne\ndaphne chat.asgi:channel_layer -p 8888 -b 127.0.0.1 -v2 --access-log=/var/log/asgi.log\n# 后台消息消费者\npython manage.py runworker\n```\n6. 部署\n```python\n# asgi.sh\nexec daphne asgi:channel_layer \\\n    -b 127.0.0.1 \\\n    -p 8004 -v2 \\\n    --access-log=/var/logs/asgi.log\n# worker.sh\nexec python manage.py runworker\n# 通过supervisord来启动两个服务\n   \n# nginx配置支持ws， 这里指定特定url规则来处理ws其他的url不使用ws\nlocation ~ ^/channel/ {\n        client_max_body_size 10M;\n        proxy_pass         http://127.0.0.1:8004;\n        proxy_set_header   Host $host:80;\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n \n        # 支持ws配置如下\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n```\n    7.其他 \n    ```python\n    # In consumers.py\n    from channels import Channel, Group\n    from channels.sessions import channel_session\n    from channels.auth import channel_session_user, channel_session_user_from_http\n     \n    # Connected to websocket.connect\n    @channel_session_user_from_http\t# 在message中添加user对象，也可保存相关的信息到session中\n    def ws_add(message):\n        # Accept connection\n        message.reply_channel.send({\"accept\": True})\n        # Add them to the right group\n        Group(\"chat-%s\" % message.user.username[0]).add(message.reply_channel)\n     \n    # Connected to websocket.receive\n    @channel_session_user \n    def ws_message(message):\n        Group(\"chat-%s\" % message.user.username[0]).send({\n            \"text\": message['text'],\n        })\n     \n    # Connected to websocket.disconnect\n    @channel_session_user\n    def ws_disconnect(message):\n        Group(\"chat-%s\" % message.user.username[0]).discard(message.reply_channel)\n    ```\n#### 参考文档\n- https://channels.readthedocs.io/en/latest/getting-started.html\n- https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django\n- https://github.com/jacobian/channels-example\n- https://github.com/heshiyou/livelog\n- http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/\n\n\n\n\n","source":"_posts/django-Channels.md","raw":"---\ntitle: Django Channels\ndate: 2017-11-26 22:20:43\ntags:\n  - Channels\ncategories:\n  - Django\n---\n#### 背景\n项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel，可实现该功能\n\n#### 定义\nChannels基本上就是任务队列：消息被生产者推到通道，然后传递给监听通道的消费者\n\n#### Channels工作层：\n1. 接口服务器，Django和用户（浏览器）之间通信的桥梁，包括一个实现WSGI协议的适配器和一个独立的websocket服务器\n2. 通道后端， 在接口服务器和worker之间传递消息，由插拔式的python代码和存储组成，存储可以是内存、数据库或者redis，推荐使用redis，兼具其余两者的优点\n3. worker，监听所有channel，当有新消息到来时候唤醒功能函数\n\n#### 使用\n1. 安装Channels\n```python\npip install -U channels\n \n# settings.py\n 'channels',\n```\n2. 选择一个通道层(redis)\n```python\npip install -U asgi_redis\n \n# settings.py\n# Channel settings\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"asgi_redis.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [os.environ.get('REDIS_URL', 'redis://redis@127.0.0.1:6379')],\n        },\n        \"ROUTING\": \"proj.routing.channel_routing\",\n    },\n}\n```\n3. routing.py\n```python\nchannel_routing = {\n    # Wire up websocket channels to our consumers:\n    'websocket.connect': consumers.ws_connect,\n    'websocket.receive': consumers.ws_receive,\n    'websocket.disconnect': consumers.ws_disconnect,\n}\n \n# - 'websocket.connect': consumers.ws_connect  第一次通过WebSocket连接上时，一条消息被发送到 websocket.connect 通道\n# - 'websocket.receive': consumers.ws_receive 每条客户端通过已建立的socket发送的消息都被发送到 websocket.receive通道\n# - 'websocket.disconnect': consumers.ws_disconnect 当客户端断开连接时，一条消息被发送到websocket.disconnect通道\n```\n4. consumers.py\n```python\nfrom channels import Group\nfrom channels.sessions import channel_session\nimport json\n \n@channel_session\ndef ws_connect(message):\n    \"\"\"\n    创建message\n    \"\"\"\n    group = 'test'\n    message.reply_channel.send({\"accept\": True})\n    Group(group, channel_layer=message.channel_layer).add(message.reply_channel)\n    message.channel_session['group'] = group    # 通过session保存组信息\n \n \n@channel_session\ndef ws_receive(message):\n    \"\"\"\n    发送message\n    \"\"\"\n    group = message.channel_session['group']\n    message.reply_channel.send({\"accept\": True})\n    data = json.loads(message['text'])\n    Group(group, channel_layer=message.channel_layer).send({'text': json.dumps(data.as_dict())})\n \n \n@channel_session\ndef ws_disconnect(message):\n    \"\"\"\n    关闭message\n    \"\"\"\n    try:\n        group = message.channel_session.get('group')\n        message.reply_channel.send({\"accept\": True})\n        Group(group, channel_layer=message.channel_layer).discard(message.reply_channel)\n    except Exception as e:\n        pass\n\n```\n5. 运行\n```python\nimport os\nimport channels.asgi\n \nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"proj.settings\")\nchannel_layer = channels.asgi.get_channel_layer()\n \n# 测试环境中运行\npython manage.py runserver\n# 前台接口服务daphne\ndaphne chat.asgi:channel_layer -p 8888 -b 127.0.0.1 -v2 --access-log=/var/log/asgi.log\n# 后台消息消费者\npython manage.py runworker\n```\n6. 部署\n```python\n# asgi.sh\nexec daphne asgi:channel_layer \\\n    -b 127.0.0.1 \\\n    -p 8004 -v2 \\\n    --access-log=/var/logs/asgi.log\n# worker.sh\nexec python manage.py runworker\n# 通过supervisord来启动两个服务\n   \n# nginx配置支持ws， 这里指定特定url规则来处理ws其他的url不使用ws\nlocation ~ ^/channel/ {\n        client_max_body_size 10M;\n        proxy_pass         http://127.0.0.1:8004;\n        proxy_set_header   Host $host:80;\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n \n        # 支持ws配置如下\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n```\n    7.其他 \n    ```python\n    # In consumers.py\n    from channels import Channel, Group\n    from channels.sessions import channel_session\n    from channels.auth import channel_session_user, channel_session_user_from_http\n     \n    # Connected to websocket.connect\n    @channel_session_user_from_http\t# 在message中添加user对象，也可保存相关的信息到session中\n    def ws_add(message):\n        # Accept connection\n        message.reply_channel.send({\"accept\": True})\n        # Add them to the right group\n        Group(\"chat-%s\" % message.user.username[0]).add(message.reply_channel)\n     \n    # Connected to websocket.receive\n    @channel_session_user \n    def ws_message(message):\n        Group(\"chat-%s\" % message.user.username[0]).send({\n            \"text\": message['text'],\n        })\n     \n    # Connected to websocket.disconnect\n    @channel_session_user\n    def ws_disconnect(message):\n        Group(\"chat-%s\" % message.user.username[0]).discard(message.reply_channel)\n    ```\n#### 参考文档\n- https://channels.readthedocs.io/en/latest/getting-started.html\n- https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django\n- https://github.com/jacobian/channels-example\n- https://github.com/heshiyou/livelog\n- http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/\n\n\n\n\n","slug":"django-Channels","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vs001oct8un4h6zt13","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel，可实现该功能</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Channels基本上就是任务队列：消息被生产者推到通道，然后传递给监听通道的消费者</p>\n<h4 id=\"Channels工作层：\"><a href=\"#Channels工作层：\" class=\"headerlink\" title=\"Channels工作层：\"></a>Channels工作层：</h4><ol>\n<li>接口服务器，Django和用户（浏览器）之间通信的桥梁，包括一个实现WSGI协议的适配器和一个独立的websocket服务器</li>\n<li>通道后端， 在接口服务器和worker之间传递消息，由插拔式的python代码和存储组成，存储可以是内存、数据库或者redis，推荐使用redis，兼具其余两者的优点</li>\n<li>worker，监听所有channel，当有新消息到来时候唤醒功能函数</li>\n</ol>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ol>\n<li><p>安装Channels</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install -U channels</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># settings.py</span></div><div class=\"line\"> <span class=\"string\">'channels'</span>,</div></pre></td></tr></table></figure>\n</li>\n<li><p>选择一个通道层(redis)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install -U asgi_redis</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># settings.py</span></div><div class=\"line\"><span class=\"comment\"># Channel settings</span></div><div class=\"line\">CHANNEL_LAYERS = &#123;</div><div class=\"line\">    <span class=\"string\">\"default\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"BACKEND\"</span>: <span class=\"string\">\"asgi_redis.RedisChannelLayer\"</span>,</div><div class=\"line\">        <span class=\"string\">\"CONFIG\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"hosts\"</span>: [os.environ.get(<span class=\"string\">'REDIS_URL'</span>, <span class=\"string\">'redis://redis@127.0.0.1:6379'</span>)],</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"ROUTING\"</span>: <span class=\"string\">\"proj.routing.channel_routing\"</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>routing.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">channel_routing = &#123;</div><div class=\"line\">    <span class=\"comment\"># Wire up websocket channels to our consumers:</span></div><div class=\"line\">    <span class=\"string\">'websocket.connect'</span>: consumers.ws_connect,</div><div class=\"line\">    <span class=\"string\">'websocket.receive'</span>: consumers.ws_receive,</div><div class=\"line\">    <span class=\"string\">'websocket.disconnect'</span>: consumers.ws_disconnect,</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># - 'websocket.connect': consumers.ws_connect  第一次通过WebSocket连接上时，一条消息被发送到 websocket.connect 通道</span></div><div class=\"line\"><span class=\"comment\"># - 'websocket.receive': consumers.ws_receive 每条客户端通过已建立的socket发送的消息都被发送到 websocket.receive通道</span></div><div class=\"line\"><span class=\"comment\"># - 'websocket.disconnect': consumers.ws_disconnect 当客户端断开连接时，一条消息被发送到websocket.disconnect通道</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>consumers.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> channels <span class=\"keyword\">import</span> Group</div><div class=\"line\"><span class=\"keyword\">from</span> channels.sessions <span class=\"keyword\">import</span> channel_session</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@channel_session</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_connect</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    创建message</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    group = <span class=\"string\">'test'</span></div><div class=\"line\">    message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">    Group(group, channel_layer=message.channel_layer).add(message.reply_channel)</div><div class=\"line\">    message.channel_session[<span class=\"string\">'group'</span>] = group    <span class=\"comment\"># 通过session保存组信息</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@channel_session</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_receive</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    发送message</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    group = message.channel_session[<span class=\"string\">'group'</span>]</div><div class=\"line\">    message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">    data = json.loads(message[<span class=\"string\">'text'</span>])</div><div class=\"line\">    Group(group, channel_layer=message.channel_layer).send(&#123;<span class=\"string\">'text'</span>: json.dumps(data.as_dict())&#125;)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@channel_session</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_disconnect</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    关闭message</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        group = message.channel_session.get(<span class=\"string\">'group'</span>)</div><div class=\"line\">        message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">        Group(group, channel_layer=message.channel_layer).discard(message.reply_channel)</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> channels.asgi</div><div class=\"line\"> </div><div class=\"line\">os.environ.setdefault(<span class=\"string\">\"DJANGO_SETTINGS_MODULE\"</span>, <span class=\"string\">\"proj.settings\"</span>)</div><div class=\"line\">channel_layer = channels.asgi.get_channel_layer()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 测试环境中运行</span></div><div class=\"line\">python manage.py runserver</div><div class=\"line\"><span class=\"comment\"># 前台接口服务daphne</span></div><div class=\"line\">daphne chat.asgi:channel_layer -p <span class=\"number\">8888</span> -b <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> -v2 --access-log=/var/log/asgi.log</div><div class=\"line\"><span class=\"comment\"># 后台消息消费者</span></div><div class=\"line\">python manage.py runworker</div></pre></td></tr></table></figure>\n</li>\n<li><p>部署</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># asgi.sh</span></div><div class=\"line\"><span class=\"keyword\">exec</span> daphne asgi:channel_layer \\</div><div class=\"line\">    -b <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> \\</div><div class=\"line\">    -p <span class=\"number\">8004</span> -v2 \\</div><div class=\"line\">    --access-log=/var/logs/asgi.log</div><div class=\"line\"><span class=\"comment\"># worker.sh</span></div><div class=\"line\"><span class=\"keyword\">exec</span> python manage.py runworker</div><div class=\"line\"><span class=\"comment\"># 通过supervisord来启动两个服务</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\"># nginx配置支持ws， 这里指定特定url规则来处理ws其他的url不使用ws</span></div><div class=\"line\">location ~ ^/channel/ &#123;</div><div class=\"line\">        client_max_body_size <span class=\"number\">10</span>M;</div><div class=\"line\">        proxy_pass         http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8004</span>;</div><div class=\"line\">        proxy_set_header   Host $host:<span class=\"number\">80</span>;</div><div class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</div><div class=\"line\">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\"># 支持ws配置如下</span></div><div class=\"line\">        proxy_http_version <span class=\"number\">1.1</span>;</div><div class=\"line\">        proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">        proxy_set_header Connection <span class=\"string\">\"upgrade\"</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p> 7.其他 </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># In consumers.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> channels <span class=\"keyword\">import</span> Channel, Group</div><div class=\"line\"><span class=\"keyword\">from</span> channels.sessions <span class=\"keyword\">import</span> channel_session</div><div class=\"line\"><span class=\"keyword\">from</span> channels.auth <span class=\"keyword\">import</span> channel_session_user, channel_session_user_from_http</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Connected to websocket.connect</span></div><div class=\"line\"><span class=\"meta\">@channel_session_user_from_http\t# 在message中添加user对象，也可保存相关的信息到session中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_add</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># Accept connection</span></div><div class=\"line\">    message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">    <span class=\"comment\"># Add them to the right group</span></div><div class=\"line\">    Group(<span class=\"string\">\"chat-%s\"</span> % message.user.username[<span class=\"number\">0</span>]).add(message.reply_channel)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Connected to websocket.receive</span></div><div class=\"line\"><span class=\"meta\">@channel_session_user </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_message</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    Group(<span class=\"string\">\"chat-%s\"</span> % message.user.username[<span class=\"number\">0</span>]).send(&#123;</div><div class=\"line\">        <span class=\"string\">\"text\"</span>: message[<span class=\"string\">'text'</span>],</div><div class=\"line\">    &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Connected to websocket.disconnect</span></div><div class=\"line\"><span class=\"meta\">@channel_session_user</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_disconnect</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    Group(<span class=\"string\">\"chat-%s\"</span> % message.user.username[<span class=\"number\">0</span>]).discard(message.reply_channel)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://channels.readthedocs.io/en/latest/getting-started.html\" target=\"_blank\" rel=\"external\">https://channels.readthedocs.io/en/latest/getting-started.html</a></li>\n<li><a href=\"https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django\" target=\"_blank\" rel=\"external\">https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django</a></li>\n<li><a href=\"https://github.com/jacobian/channels-example\" target=\"_blank\" rel=\"external\">https://github.com/jacobian/channels-example</a></li>\n<li><a href=\"https://github.com/heshiyou/livelog\" target=\"_blank\" rel=\"external\">https://github.com/heshiyou/livelog</a></li>\n<li><a href=\"http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/\" target=\"_blank\" rel=\"external\">http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/</a></li>\n</ul>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>项目中常使用到实时通信，实时通知等应用，之前使用过第三方提供的接口调用，由于网络原因，不稳定超时，Django 1.8以后支持channel，可实现该功能</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Channels基本上就是任务队列：消息被生产者推到通道，然后传递给监听通道的消费者</p>\n<h4 id=\"Channels工作层：\"><a href=\"#Channels工作层：\" class=\"headerlink\" title=\"Channels工作层：\"></a>Channels工作层：</h4><ol>\n<li>接口服务器，Django和用户（浏览器）之间通信的桥梁，包括一个实现WSGI协议的适配器和一个独立的websocket服务器</li>\n<li>通道后端， 在接口服务器和worker之间传递消息，由插拔式的python代码和存储组成，存储可以是内存、数据库或者redis，推荐使用redis，兼具其余两者的优点</li>\n<li>worker，监听所有channel，当有新消息到来时候唤醒功能函数</li>\n</ol>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ol>\n<li><p>安装Channels</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install -U channels</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># settings.py</span></div><div class=\"line\"> <span class=\"string\">'channels'</span>,</div></pre></td></tr></table></figure>\n</li>\n<li><p>选择一个通道层(redis)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install -U asgi_redis</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># settings.py</span></div><div class=\"line\"><span class=\"comment\"># Channel settings</span></div><div class=\"line\">CHANNEL_LAYERS = &#123;</div><div class=\"line\">    <span class=\"string\">\"default\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"BACKEND\"</span>: <span class=\"string\">\"asgi_redis.RedisChannelLayer\"</span>,</div><div class=\"line\">        <span class=\"string\">\"CONFIG\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"hosts\"</span>: [os.environ.get(<span class=\"string\">'REDIS_URL'</span>, <span class=\"string\">'redis://redis@127.0.0.1:6379'</span>)],</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"ROUTING\"</span>: <span class=\"string\">\"proj.routing.channel_routing\"</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>routing.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">channel_routing = &#123;</div><div class=\"line\">    <span class=\"comment\"># Wire up websocket channels to our consumers:</span></div><div class=\"line\">    <span class=\"string\">'websocket.connect'</span>: consumers.ws_connect,</div><div class=\"line\">    <span class=\"string\">'websocket.receive'</span>: consumers.ws_receive,</div><div class=\"line\">    <span class=\"string\">'websocket.disconnect'</span>: consumers.ws_disconnect,</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># - 'websocket.connect': consumers.ws_connect  第一次通过WebSocket连接上时，一条消息被发送到 websocket.connect 通道</span></div><div class=\"line\"><span class=\"comment\"># - 'websocket.receive': consumers.ws_receive 每条客户端通过已建立的socket发送的消息都被发送到 websocket.receive通道</span></div><div class=\"line\"><span class=\"comment\"># - 'websocket.disconnect': consumers.ws_disconnect 当客户端断开连接时，一条消息被发送到websocket.disconnect通道</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>consumers.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> channels <span class=\"keyword\">import</span> Group</div><div class=\"line\"><span class=\"keyword\">from</span> channels.sessions <span class=\"keyword\">import</span> channel_session</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@channel_session</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_connect</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    创建message</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    group = <span class=\"string\">'test'</span></div><div class=\"line\">    message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">    Group(group, channel_layer=message.channel_layer).add(message.reply_channel)</div><div class=\"line\">    message.channel_session[<span class=\"string\">'group'</span>] = group    <span class=\"comment\"># 通过session保存组信息</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@channel_session</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_receive</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    发送message</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    group = message.channel_session[<span class=\"string\">'group'</span>]</div><div class=\"line\">    message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">    data = json.loads(message[<span class=\"string\">'text'</span>])</div><div class=\"line\">    Group(group, channel_layer=message.channel_layer).send(&#123;<span class=\"string\">'text'</span>: json.dumps(data.as_dict())&#125;)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@channel_session</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_disconnect</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    关闭message</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        group = message.channel_session.get(<span class=\"string\">'group'</span>)</div><div class=\"line\">        message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">        Group(group, channel_layer=message.channel_layer).discard(message.reply_channel)</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> channels.asgi</div><div class=\"line\"> </div><div class=\"line\">os.environ.setdefault(<span class=\"string\">\"DJANGO_SETTINGS_MODULE\"</span>, <span class=\"string\">\"proj.settings\"</span>)</div><div class=\"line\">channel_layer = channels.asgi.get_channel_layer()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 测试环境中运行</span></div><div class=\"line\">python manage.py runserver</div><div class=\"line\"><span class=\"comment\"># 前台接口服务daphne</span></div><div class=\"line\">daphne chat.asgi:channel_layer -p <span class=\"number\">8888</span> -b <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> -v2 --access-log=/var/log/asgi.log</div><div class=\"line\"><span class=\"comment\"># 后台消息消费者</span></div><div class=\"line\">python manage.py runworker</div></pre></td></tr></table></figure>\n</li>\n<li><p>部署</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># asgi.sh</span></div><div class=\"line\"><span class=\"keyword\">exec</span> daphne asgi:channel_layer \\</div><div class=\"line\">    -b <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> \\</div><div class=\"line\">    -p <span class=\"number\">8004</span> -v2 \\</div><div class=\"line\">    --access-log=/var/logs/asgi.log</div><div class=\"line\"><span class=\"comment\"># worker.sh</span></div><div class=\"line\"><span class=\"keyword\">exec</span> python manage.py runworker</div><div class=\"line\"><span class=\"comment\"># 通过supervisord来启动两个服务</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\"># nginx配置支持ws， 这里指定特定url规则来处理ws其他的url不使用ws</span></div><div class=\"line\">location ~ ^/channel/ &#123;</div><div class=\"line\">        client_max_body_size <span class=\"number\">10</span>M;</div><div class=\"line\">        proxy_pass         http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8004</span>;</div><div class=\"line\">        proxy_set_header   Host $host:<span class=\"number\">80</span>;</div><div class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</div><div class=\"line\">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\"># 支持ws配置如下</span></div><div class=\"line\">        proxy_http_version <span class=\"number\">1.1</span>;</div><div class=\"line\">        proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">        proxy_set_header Connection <span class=\"string\">\"upgrade\"</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p> 7.其他 </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># In consumers.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> channels <span class=\"keyword\">import</span> Channel, Group</div><div class=\"line\"><span class=\"keyword\">from</span> channels.sessions <span class=\"keyword\">import</span> channel_session</div><div class=\"line\"><span class=\"keyword\">from</span> channels.auth <span class=\"keyword\">import</span> channel_session_user, channel_session_user_from_http</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Connected to websocket.connect</span></div><div class=\"line\"><span class=\"meta\">@channel_session_user_from_http\t# 在message中添加user对象，也可保存相关的信息到session中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_add</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># Accept connection</span></div><div class=\"line\">    message.reply_channel.send(&#123;<span class=\"string\">\"accept\"</span>: <span class=\"keyword\">True</span>&#125;)</div><div class=\"line\">    <span class=\"comment\"># Add them to the right group</span></div><div class=\"line\">    Group(<span class=\"string\">\"chat-%s\"</span> % message.user.username[<span class=\"number\">0</span>]).add(message.reply_channel)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Connected to websocket.receive</span></div><div class=\"line\"><span class=\"meta\">@channel_session_user </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_message</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    Group(<span class=\"string\">\"chat-%s\"</span> % message.user.username[<span class=\"number\">0</span>]).send(&#123;</div><div class=\"line\">        <span class=\"string\">\"text\"</span>: message[<span class=\"string\">'text'</span>],</div><div class=\"line\">    &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Connected to websocket.disconnect</span></div><div class=\"line\"><span class=\"meta\">@channel_session_user</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ws_disconnect</span><span class=\"params\">(message)</span>:</span></div><div class=\"line\">    Group(<span class=\"string\">\"chat-%s\"</span> % message.user.username[<span class=\"number\">0</span>]).discard(message.reply_channel)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://channels.readthedocs.io/en/latest/getting-started.html\">https://channels.readthedocs.io/en/latest/getting-started.html</a></li>\n<li><a href=\"https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django\">https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django</a></li>\n<li><a href=\"https://github.com/jacobian/channels-example\">https://github.com/jacobian/channels-example</a></li>\n<li><a href=\"https://github.com/heshiyou/livelog\">https://github.com/heshiyou/livelog</a></li>\n<li><a href=\"http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/\">http://masnun.rocks/2016/11/02/deploying-django-channels-using-daphne/</a></li>\n</ul>\n"},{"title":"Django 自定义认证字段","date":"2018-02-05T14:21:34.000Z","_content":"#### 背景\nDjango默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这类问题。\n\n#### 说明\nDjango中在底层，维护着\"authentication backends\"列表，当调用django.contrib.auth.authenticate() 时，会尝试所有的使用通过settings通过AUTHENTICATION_BACKENDS设置的backend来进行认证，默认为`django.contrib.auth.backends.ModelBackend`，依次验证，如果匹配成功，则停止后续处理，如果后台引发PermissionDenied异常，认证失败且不会检查后面的认证。\n\n\n#### 实例\n通过用户名或者email进行认证\n\n```python\nfrom __future__ import unicode_literals\nfrom django.contrib.auth import get_user_model\n \nUserModel = get_user_model()\n \n \nclass CustomizedBackend(object):\n    def authenticate(self, request, **kwargs):\n        if 'username' in kwargs:\n            auth = {'username': kwargs.get('username', '')}\n        elif 'email' in kwargs:\n            auth = {'email': kwargs.get('email', '')}\n        else:\n            auth = {}\n        password = kwargs.get('password', '')\n        try:\n            user = UserModel._default_manager.get(**auth)\n        except UserModel.DoesNotExist:\n            return\n        else:\n            if user.check_password(password):\n                return user\n \n    def get_user(self, user_id):\n        try:\n            return UserModel._default_manager.get(pk=user_id)\n        except UserModel.DoesNotExist:\n            return None\n```\n\n#### settings.py\n```python\n# 默认登录使用的backend\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',  # 默认backend\n    'apps.auth.backends.CustomizedBackend',        # 各backend依次进行验证, 直到某一个验证通过\n)\n```\n\n\n","source":"_posts/django-define-auth.md","raw":"---\ntitle: Django 自定义认证字段\ndate: 2018-02-05 22:21:34\ntags:\n  - Auth\ncategories:\n  - Django\n---\n#### 背景\nDjango默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这类问题。\n\n#### 说明\nDjango中在底层，维护着\"authentication backends\"列表，当调用django.contrib.auth.authenticate() 时，会尝试所有的使用通过settings通过AUTHENTICATION_BACKENDS设置的backend来进行认证，默认为`django.contrib.auth.backends.ModelBackend`，依次验证，如果匹配成功，则停止后续处理，如果后台引发PermissionDenied异常，认证失败且不会检查后面的认证。\n\n\n#### 实例\n通过用户名或者email进行认证\n\n```python\nfrom __future__ import unicode_literals\nfrom django.contrib.auth import get_user_model\n \nUserModel = get_user_model()\n \n \nclass CustomizedBackend(object):\n    def authenticate(self, request, **kwargs):\n        if 'username' in kwargs:\n            auth = {'username': kwargs.get('username', '')}\n        elif 'email' in kwargs:\n            auth = {'email': kwargs.get('email', '')}\n        else:\n            auth = {}\n        password = kwargs.get('password', '')\n        try:\n            user = UserModel._default_manager.get(**auth)\n        except UserModel.DoesNotExist:\n            return\n        else:\n            if user.check_password(password):\n                return user\n \n    def get_user(self, user_id):\n        try:\n            return UserModel._default_manager.get(pk=user_id)\n        except UserModel.DoesNotExist:\n            return None\n```\n\n#### settings.py\n```python\n# 默认登录使用的backend\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',  # 默认backend\n    'apps.auth.backends.CustomizedBackend',        # 各backend依次进行验证, 直到某一个验证通过\n)\n```\n\n\n","slug":"django-define-auth","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vu001sct8umk4rb88x","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>Django默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这类问题。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Django中在底层，维护着”authentication backends”列表，当调用django.contrib.auth.authenticate() 时，会尝试所有的使用通过settings通过AUTHENTICATION_BACKENDS设置的backend来进行认证，默认为<code>django.contrib.auth.backends.ModelBackend</code>，依次验证，如果匹配成功，则停止后续处理，如果后台引发PermissionDenied异常，认证失败且不会检查后面的认证。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>通过用户名或者email进行认证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth <span class=\"keyword\">import</span> get_user_model</div><div class=\"line\"> </div><div class=\"line\">UserModel = get_user_model()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizedBackend</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">authenticate</span><span class=\"params\">(self, request, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'username'</span> <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">            auth = &#123;<span class=\"string\">'username'</span>: kwargs.get(<span class=\"string\">'username'</span>, <span class=\"string\">''</span>)&#125;</div><div class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"string\">'email'</span> <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">            auth = &#123;<span class=\"string\">'email'</span>: kwargs.get(<span class=\"string\">'email'</span>, <span class=\"string\">''</span>)&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            auth = &#123;&#125;</div><div class=\"line\">        password = kwargs.get(<span class=\"string\">'password'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            user = UserModel._default_manager.get(**auth)</div><div class=\"line\">        <span class=\"keyword\">except</span> UserModel.DoesNotExist:</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> user.check_password(password):</div><div class=\"line\">                <span class=\"keyword\">return</span> user</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_user</span><span class=\"params\">(self, user_id)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> UserModel._default_manager.get(pk=user_id)</div><div class=\"line\">        <span class=\"keyword\">except</span> UserModel.DoesNotExist:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div></pre></td></tr></table></figure>\n<h4 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 默认登录使用的backend</span></div><div class=\"line\">AUTHENTICATION_BACKENDS = (</div><div class=\"line\">    <span class=\"string\">'django.contrib.auth.backends.ModelBackend'</span>,  <span class=\"comment\"># 默认backend</span></div><div class=\"line\">    <span class=\"string\">'apps.auth.backends.CustomizedBackend'</span>,        <span class=\"comment\"># 各backend依次进行验证, 直到某一个验证通过</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>Django默认使用username字段来进行认证，而现在对于多数平台来说，更多的通过email或手机号来进行认证，自定义认证字段就是解决这类问题。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Django中在底层，维护着”authentication backends”列表，当调用django.contrib.auth.authenticate() 时，会尝试所有的使用通过settings通过AUTHENTICATION_BACKENDS设置的backend来进行认证，默认为<code>django.contrib.auth.backends.ModelBackend</code>，依次验证，如果匹配成功，则停止后续处理，如果后台引发PermissionDenied异常，认证失败且不会检查后面的认证。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>通过用户名或者email进行认证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth <span class=\"keyword\">import</span> get_user_model</div><div class=\"line\"> </div><div class=\"line\">UserModel = get_user_model()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizedBackend</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">authenticate</span><span class=\"params\">(self, request, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'username'</span> <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">            auth = &#123;<span class=\"string\">'username'</span>: kwargs.get(<span class=\"string\">'username'</span>, <span class=\"string\">''</span>)&#125;</div><div class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"string\">'email'</span> <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">            auth = &#123;<span class=\"string\">'email'</span>: kwargs.get(<span class=\"string\">'email'</span>, <span class=\"string\">''</span>)&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            auth = &#123;&#125;</div><div class=\"line\">        password = kwargs.get(<span class=\"string\">'password'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            user = UserModel._default_manager.get(**auth)</div><div class=\"line\">        <span class=\"keyword\">except</span> UserModel.DoesNotExist:</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> user.check_password(password):</div><div class=\"line\">                <span class=\"keyword\">return</span> user</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_user</span><span class=\"params\">(self, user_id)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> UserModel._default_manager.get(pk=user_id)</div><div class=\"line\">        <span class=\"keyword\">except</span> UserModel.DoesNotExist:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div></pre></td></tr></table></figure>\n<h4 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 默认登录使用的backend</span></div><div class=\"line\">AUTHENTICATION_BACKENDS = (</div><div class=\"line\">    <span class=\"string\">'django.contrib.auth.backends.ModelBackend'</span>,  <span class=\"comment\"># 默认backend</span></div><div class=\"line\">    <span class=\"string\">'apps.auth.backends.CustomizedBackend'</span>,        <span class=\"comment\"># 各backend依次进行验证, 直到某一个验证通过</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n"},{"title":"Django Forms表单","date":"2017-07-15T13:17:58.000Z","_content":"### form表单验证顺序步骤：\n1. to_python()将值转换为正确的pthon数据类型，如果不能转换，抛出ValidationError\n2. 字段的validate()方法处理字段特殊定义的验证\n3. 字段的run_validators() 方法运行字段的所有Validator，并将所有的错误信息聚合成一个单一的ValidationError\n4. Field子类的clean() 方法，负责以正确的顺序运行to_python、validate 和 run_validators 并传播它们的错误。如果任何时刻、任何方法引发ValidationError，验证将停止并引发这个错误；这个方法返回验证后的数据，这个数据在后面将插入到表单的 cleaned_data 字典中\n5. 表单子类中的clean_<fieldname>() 方法，这个方法完成于特定属性相关的验证，自定义字段验证，数据在clean_data字典中，该方法返回从cleaned_data 中获取的值\n6. 表单子类的clean() 方法，这个方法可以实现需要同时访问表单多个字段的验证\n\n对于表单中的每个字段（按它们在表单定义中出现的顺序），先运行Field.clean() ，然后运行clean_<fieldname>()。每个字段的这两个方法都执行完之后，最后运行Form.clean() 方法，无论前面的方法是否抛出过异常。\n\n### 实例：表单字段的默认验证\n```python\nfrom django import forms\nfrom django.core.validators import validate_email\n \nclass MultiEmailField(forms.Field):\n    def to_python(self, value):\n        \"Normalize data to a list of strings.\"\n \n        # Return an empty list if no input was given.\n        if not value:\n            return []\n        return value.split(',')\n \n    def validate(self, value):\n        \"Check if value consists only of valid emails.\"\n \n        # Use the parent's handling of required fields, etc.\n        super(MultiEmailField, self).validate(value)\n \n        for email in value:\n            validate_email(email)\n \n########### 创建form类 #########\nclass ContactForm(forms.Form):\n    subject = forms.CharField(max_length=100)\n    message = forms.CharField()\n    sender = forms.EmailField()\n    recipients = MultiEmailField()\n    cc_myself = forms.BooleanField(required=False)\n \n# 当调用表单的is_valid()方法时，MultiEmailField.clean()方法将作为验证过程的一部分运行，即将调用to_python()和validate()方法\n```\n\n### Validator\n验证器是一个可调用的对象，它接受一个值，并在不符合一些规则时抛出\n```python\ndef validate_begin(value):\n    if not value.startswith(u'ABC'):\n        raise ValidationError('名称不是以ABC开头', code='error_begin')\n \n### 调用\nother_field = forms.CharField(max_length=100, validators=[validate_begin])\n```\n### forms常用方法\n- f.is_bound 属性说明表单是否具有绑定的数据\n- f.is_valid() 验证提交的表单字段是否正确（is_valid() 返回True）\n- form.cleaned_data 字典存为验证后的表单数据\n- f.errors 获取错误信息的一个字典\n- f.errors.as_data() 返回字典，映射到原始的ValidationError实例\n- f.errors.as_json() 返回json序列化后的错误\n- f.has_changed() 检查表单的数据是否从初始数据发生改变\n- f.fields 从表单实例的fields属性中访问字段\n\n### save()方法\n根据表单绑定的数据创建并保存数据库对象\n- instance 关键字接收一个已经存在的实例对象，如果有，则save()将更新这个实例，没有save()将创建一个新的实例\n- commit save() 关键字参数，其值为True 或False。如果save() 时commit=False，那么它将返回一个还没有保存到数据库的对象,操作后调用save方法保存\n- commit=False 时因不能立即生成实例，多对多数据时需要对froms实例调用save_m2m()方法对多对多数据进行保存，如：channel.save() ,_channel = ChannelForm(req.data).save_m2m()\n\n### ModelForm中Meta属性\n```python\nclass ChannelCustomForm(ModelForm):\n \n    class Meta:\n        model = ChannelCustom\n        fields = ['name', 'logo', 'is_valid', 'note']   # 需要编辑的字段\n        fields = '__all__'  # 所有字段\n        exclude = ['title'] # 排除某些字段\n        labels= None        # 用于自定义标签的名字，默认情况下是数据库中表的列名\n        help_texts = None     # 帮助提示信息\n        widgets = None        # 自定义插件\n        error_messages = None # 自定义错误信息\n        field_classes = None  # 自定义字段类（也可以自定义字段)\n        Localized_fields = (‘birth_date’,) # 本地化，如：根据不同时区显示数据\n```\n### 实例(说明功能)\n- models.py\n```python\nclass ChannelCustom(BaseModel):\n \n    organ = models.ForeignKey('organs.Organ', null=True)\n    name = models.CharField(u'名称', max_length=40, null=True, blank=True, default='')\n    logo = models.CharField(u'渠道logo', max_length=80, null=True, blank=True, default='')\n    is_valid = models.BooleanField(u'有效', default=True)\n    note = models.CharField(u'备注', max_length=512, null=True, blank=True, default='')\n```\n- forms.py\n```python\nfrom django.forms import ModelForm, Textarea\nfrom django.forms import fields as MFfields\nfrom django import forms\nfrom django.core.exceptions import ValidationError\n# from django.utils.translation import ugettext as _\nfrom django.utils.translation import ugettext_lazy as _\n \ndef validate_begin(value):\n    if not value.startswith(u'ABC'):\n        raise ValidationError('名称不是以ABC开头', code='error_begin')\n \n \nclass ChannelCustomForm(ModelForm):\n    name = MFfields.CharField(max_length=100)   # 重新定义字段属性,可以为已有的字段,也可以是没有的字段\n    other_field = forms.CharField(max_length=100, validators=[validate_begin])\n \n \n    def __init__(self, *args, **kwargs):                        # 通过继承来解决对应字段的属性\n        super(ChannelCustomForm, self).__init__(*args, **kwargs)\n        self.fields['name'].validators.append(validate_begin)   # 添加验证方法\n        self.fields['name'].required = True                     # 添加对应字段的属性\n        self.fields['note'].required = True\n \n    class Meta:\n        model = ChannelCustom\n        fields = ['name', 'logo', 'is_valid', 'note', 'other_field']\n        # exclude = ['logo']\n        labels = {          # 用于自定义标签的名字，默认情况下是数据库中表的列名\n            \"name\": \"渠道名称\",\n            \"logo\": \"渠道logo\",\n            \"is_valid\": \"是否有效\",\n            \"note\": \"备注\"\n        }\n \n        help_texts = {      # 帮助提示信息\n            \"name\": \"请输入渠道名\",\n            \"note\": \"请输入备注\",\n        }\n \n        error_messages = {  # 自定义错误描述\n            # '__all__': {\n            #\n            # },\n            'organ': {\n                'max_length': (\"企业字段不能为空.\"),\n            },\n            'note': {\n                'required': \"note字段不能为空.\",  # 这里的key是特定的字符\n                'invalid': 'http格式错误',\n            },\n        }\n        widgets = {     # 自定义 widget，添加对应字段的属性\n            'name': Textarea(attrs={'cols': 80, 'rows': 20}),\n        }\n \n        field_classes = {       # 字段类型设置，可以强制修改成其他类型\n            'note': MFfields.URLField\n        }\n \n        Localized_fields = ('is_valid', )    #本地化，如：根据不同时区显示数据\n \n    def clean_name(self):\n        \"\"\"\n        定义字段检查方法\n        clean()和clean_<field>&()的最后必须返回验证完毕或修改后的值\n        :return:\n        \"\"\"\n        name = self.cleaned_data['name']\n        if not name:\n            raise forms.ValidationError('名称不能为空')\n        return name\n \n    def clean_logo(self):\n        logo = self.cleaned_data['logo']\n        if not logo:\n            raise forms.ValidationError('logo不能为空')\n        return logo\n \n    def clean(self):\n        \"\"\"\n        - 如果你需要覆盖clean() 方法并维持这个验证行为，你必须调用父类的clean()方法\n        - 在表单数据提交的时候,所有的数据都会经过clean()函数\n        - 用于验证字段间有关联的数据验证\n        \"\"\"\n        cleaned_data = super(ChannelCustomForm, self).clean()\n \n        print cleaned_data\n        logo = cleaned_data.get('logo', '')\n        name = cleaned_data.get('name', '')\n        if logo != name:\n            msg = u'两者不一致相等 %(name)s <--> %(logo)s'\n            error_instance = ValidationError(_(msg), code='invalid', params={'name': name, 'logo': logo})\n            self.add_error('logo',error=error_instance)     # 添加错误信息\n            self.non_field_errors()\n            # self.errors['logo'] = self.error_class([msg])\n            # raise forms.ValidationError(self.errors['logo'])\n            # raise forms.ValidationError('两者不一致相等')\n        return cleaned_data\n```\n- views.py\n```python\nfrom .forms import ChannelCustomForm\nfrom django.forms.models import modelformset_factory, modelform_factory\n    \ndef post(self, req):\n    \n    organ = req.user.get_profile().organ\n    data = req.data\n    # _channel = ChannelCustom.objects.get(pk=8)\n    # form = ChannelCustomForm(data)#, instance=_channel)\n    # modelform_factory() 来代替使用类定义来从模型直接创建表单,用于不在很多自定义的情况下\n    ChannelCustomFormfactory = modelform_factory(ChannelCustom,\n                                                  fields=('name', 'logo', 'is_valid', 'note')\n                                                )\n \n    # modelformset_factory() 模型表单集\n    ChannelCustomSet = modelformset_factory(ChannelCustom,\n                                            fields=('name', 'logo', 'is_valid', 'note')\n                                            )\n \n    form = ChannelCustomForm(data)#, instance=_channel)\n    # form = ChannelCustomFormfactory(data=data)\n    # form = ChannelCustomSet(data=data)\n    if form.is_valid():\n        print form.cleaned_data\n        print form.errors\n        channel = form.save()\n        channel.organ= organ\n        channel.save()\n \n        return resp.serialize_response(channel, results_name='channel')\n    error =form.errors.as_json()\n    error_msg = json.loads(error)\n    return resp.failed(error_msg)\n```\n### 参考链接\nhttp://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html\n\n\n\n\n","source":"_posts/django-forms.md","raw":"---\ntitle: Django Forms表单\ndate: 2017-07-15 21:17:58\ntags:\n  - Forms\ncategories:\n  - Django\n---\n### form表单验证顺序步骤：\n1. to_python()将值转换为正确的pthon数据类型，如果不能转换，抛出ValidationError\n2. 字段的validate()方法处理字段特殊定义的验证\n3. 字段的run_validators() 方法运行字段的所有Validator，并将所有的错误信息聚合成一个单一的ValidationError\n4. Field子类的clean() 方法，负责以正确的顺序运行to_python、validate 和 run_validators 并传播它们的错误。如果任何时刻、任何方法引发ValidationError，验证将停止并引发这个错误；这个方法返回验证后的数据，这个数据在后面将插入到表单的 cleaned_data 字典中\n5. 表单子类中的clean_<fieldname>() 方法，这个方法完成于特定属性相关的验证，自定义字段验证，数据在clean_data字典中，该方法返回从cleaned_data 中获取的值\n6. 表单子类的clean() 方法，这个方法可以实现需要同时访问表单多个字段的验证\n\n对于表单中的每个字段（按它们在表单定义中出现的顺序），先运行Field.clean() ，然后运行clean_<fieldname>()。每个字段的这两个方法都执行完之后，最后运行Form.clean() 方法，无论前面的方法是否抛出过异常。\n\n### 实例：表单字段的默认验证\n```python\nfrom django import forms\nfrom django.core.validators import validate_email\n \nclass MultiEmailField(forms.Field):\n    def to_python(self, value):\n        \"Normalize data to a list of strings.\"\n \n        # Return an empty list if no input was given.\n        if not value:\n            return []\n        return value.split(',')\n \n    def validate(self, value):\n        \"Check if value consists only of valid emails.\"\n \n        # Use the parent's handling of required fields, etc.\n        super(MultiEmailField, self).validate(value)\n \n        for email in value:\n            validate_email(email)\n \n########### 创建form类 #########\nclass ContactForm(forms.Form):\n    subject = forms.CharField(max_length=100)\n    message = forms.CharField()\n    sender = forms.EmailField()\n    recipients = MultiEmailField()\n    cc_myself = forms.BooleanField(required=False)\n \n# 当调用表单的is_valid()方法时，MultiEmailField.clean()方法将作为验证过程的一部分运行，即将调用to_python()和validate()方法\n```\n\n### Validator\n验证器是一个可调用的对象，它接受一个值，并在不符合一些规则时抛出\n```python\ndef validate_begin(value):\n    if not value.startswith(u'ABC'):\n        raise ValidationError('名称不是以ABC开头', code='error_begin')\n \n### 调用\nother_field = forms.CharField(max_length=100, validators=[validate_begin])\n```\n### forms常用方法\n- f.is_bound 属性说明表单是否具有绑定的数据\n- f.is_valid() 验证提交的表单字段是否正确（is_valid() 返回True）\n- form.cleaned_data 字典存为验证后的表单数据\n- f.errors 获取错误信息的一个字典\n- f.errors.as_data() 返回字典，映射到原始的ValidationError实例\n- f.errors.as_json() 返回json序列化后的错误\n- f.has_changed() 检查表单的数据是否从初始数据发生改变\n- f.fields 从表单实例的fields属性中访问字段\n\n### save()方法\n根据表单绑定的数据创建并保存数据库对象\n- instance 关键字接收一个已经存在的实例对象，如果有，则save()将更新这个实例，没有save()将创建一个新的实例\n- commit save() 关键字参数，其值为True 或False。如果save() 时commit=False，那么它将返回一个还没有保存到数据库的对象,操作后调用save方法保存\n- commit=False 时因不能立即生成实例，多对多数据时需要对froms实例调用save_m2m()方法对多对多数据进行保存，如：channel.save() ,_channel = ChannelForm(req.data).save_m2m()\n\n### ModelForm中Meta属性\n```python\nclass ChannelCustomForm(ModelForm):\n \n    class Meta:\n        model = ChannelCustom\n        fields = ['name', 'logo', 'is_valid', 'note']   # 需要编辑的字段\n        fields = '__all__'  # 所有字段\n        exclude = ['title'] # 排除某些字段\n        labels= None        # 用于自定义标签的名字，默认情况下是数据库中表的列名\n        help_texts = None     # 帮助提示信息\n        widgets = None        # 自定义插件\n        error_messages = None # 自定义错误信息\n        field_classes = None  # 自定义字段类（也可以自定义字段)\n        Localized_fields = (‘birth_date’,) # 本地化，如：根据不同时区显示数据\n```\n### 实例(说明功能)\n- models.py\n```python\nclass ChannelCustom(BaseModel):\n \n    organ = models.ForeignKey('organs.Organ', null=True)\n    name = models.CharField(u'名称', max_length=40, null=True, blank=True, default='')\n    logo = models.CharField(u'渠道logo', max_length=80, null=True, blank=True, default='')\n    is_valid = models.BooleanField(u'有效', default=True)\n    note = models.CharField(u'备注', max_length=512, null=True, blank=True, default='')\n```\n- forms.py\n```python\nfrom django.forms import ModelForm, Textarea\nfrom django.forms import fields as MFfields\nfrom django import forms\nfrom django.core.exceptions import ValidationError\n# from django.utils.translation import ugettext as _\nfrom django.utils.translation import ugettext_lazy as _\n \ndef validate_begin(value):\n    if not value.startswith(u'ABC'):\n        raise ValidationError('名称不是以ABC开头', code='error_begin')\n \n \nclass ChannelCustomForm(ModelForm):\n    name = MFfields.CharField(max_length=100)   # 重新定义字段属性,可以为已有的字段,也可以是没有的字段\n    other_field = forms.CharField(max_length=100, validators=[validate_begin])\n \n \n    def __init__(self, *args, **kwargs):                        # 通过继承来解决对应字段的属性\n        super(ChannelCustomForm, self).__init__(*args, **kwargs)\n        self.fields['name'].validators.append(validate_begin)   # 添加验证方法\n        self.fields['name'].required = True                     # 添加对应字段的属性\n        self.fields['note'].required = True\n \n    class Meta:\n        model = ChannelCustom\n        fields = ['name', 'logo', 'is_valid', 'note', 'other_field']\n        # exclude = ['logo']\n        labels = {          # 用于自定义标签的名字，默认情况下是数据库中表的列名\n            \"name\": \"渠道名称\",\n            \"logo\": \"渠道logo\",\n            \"is_valid\": \"是否有效\",\n            \"note\": \"备注\"\n        }\n \n        help_texts = {      # 帮助提示信息\n            \"name\": \"请输入渠道名\",\n            \"note\": \"请输入备注\",\n        }\n \n        error_messages = {  # 自定义错误描述\n            # '__all__': {\n            #\n            # },\n            'organ': {\n                'max_length': (\"企业字段不能为空.\"),\n            },\n            'note': {\n                'required': \"note字段不能为空.\",  # 这里的key是特定的字符\n                'invalid': 'http格式错误',\n            },\n        }\n        widgets = {     # 自定义 widget，添加对应字段的属性\n            'name': Textarea(attrs={'cols': 80, 'rows': 20}),\n        }\n \n        field_classes = {       # 字段类型设置，可以强制修改成其他类型\n            'note': MFfields.URLField\n        }\n \n        Localized_fields = ('is_valid', )    #本地化，如：根据不同时区显示数据\n \n    def clean_name(self):\n        \"\"\"\n        定义字段检查方法\n        clean()和clean_<field>&()的最后必须返回验证完毕或修改后的值\n        :return:\n        \"\"\"\n        name = self.cleaned_data['name']\n        if not name:\n            raise forms.ValidationError('名称不能为空')\n        return name\n \n    def clean_logo(self):\n        logo = self.cleaned_data['logo']\n        if not logo:\n            raise forms.ValidationError('logo不能为空')\n        return logo\n \n    def clean(self):\n        \"\"\"\n        - 如果你需要覆盖clean() 方法并维持这个验证行为，你必须调用父类的clean()方法\n        - 在表单数据提交的时候,所有的数据都会经过clean()函数\n        - 用于验证字段间有关联的数据验证\n        \"\"\"\n        cleaned_data = super(ChannelCustomForm, self).clean()\n \n        print cleaned_data\n        logo = cleaned_data.get('logo', '')\n        name = cleaned_data.get('name', '')\n        if logo != name:\n            msg = u'两者不一致相等 %(name)s <--> %(logo)s'\n            error_instance = ValidationError(_(msg), code='invalid', params={'name': name, 'logo': logo})\n            self.add_error('logo',error=error_instance)     # 添加错误信息\n            self.non_field_errors()\n            # self.errors['logo'] = self.error_class([msg])\n            # raise forms.ValidationError(self.errors['logo'])\n            # raise forms.ValidationError('两者不一致相等')\n        return cleaned_data\n```\n- views.py\n```python\nfrom .forms import ChannelCustomForm\nfrom django.forms.models import modelformset_factory, modelform_factory\n    \ndef post(self, req):\n    \n    organ = req.user.get_profile().organ\n    data = req.data\n    # _channel = ChannelCustom.objects.get(pk=8)\n    # form = ChannelCustomForm(data)#, instance=_channel)\n    # modelform_factory() 来代替使用类定义来从模型直接创建表单,用于不在很多自定义的情况下\n    ChannelCustomFormfactory = modelform_factory(ChannelCustom,\n                                                  fields=('name', 'logo', 'is_valid', 'note')\n                                                )\n \n    # modelformset_factory() 模型表单集\n    ChannelCustomSet = modelformset_factory(ChannelCustom,\n                                            fields=('name', 'logo', 'is_valid', 'note')\n                                            )\n \n    form = ChannelCustomForm(data)#, instance=_channel)\n    # form = ChannelCustomFormfactory(data=data)\n    # form = ChannelCustomSet(data=data)\n    if form.is_valid():\n        print form.cleaned_data\n        print form.errors\n        channel = form.save()\n        channel.organ= organ\n        channel.save()\n \n        return resp.serialize_response(channel, results_name='channel')\n    error =form.errors.as_json()\n    error_msg = json.loads(error)\n    return resp.failed(error_msg)\n```\n### 参考链接\nhttp://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html\n\n\n\n\n","slug":"django-forms","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vw001wct8uv38hxwyl","content":"<h3 id=\"form表单验证顺序步骤：\"><a href=\"#form表单验证顺序步骤：\" class=\"headerlink\" title=\"form表单验证顺序步骤：\"></a>form表单验证顺序步骤：</h3><ol>\n<li>to_python()将值转换为正确的pthon数据类型，如果不能转换，抛出ValidationError</li>\n<li>字段的validate()方法处理字段特殊定义的验证</li>\n<li>字段的run_validators() 方法运行字段的所有Validator，并将所有的错误信息聚合成一个单一的ValidationError</li>\n<li>Field子类的clean() 方法，负责以正确的顺序运行to_python、validate 和 run_validators 并传播它们的错误。如果任何时刻、任何方法引发ValidationError，验证将停止并引发这个错误；这个方法返回验证后的数据，这个数据在后面将插入到表单的 cleaned_data 字典中</li>\n<li>表单子类中的clean_<fieldname>() 方法，这个方法完成于特定属性相关的验证，自定义字段验证，数据在clean_data字典中，该方法返回从cleaned_data 中获取的值</fieldname></li>\n<li>表单子类的clean() 方法，这个方法可以实现需要同时访问表单多个字段的验证</li>\n</ol>\n<p>对于表单中的每个字段（按它们在表单定义中出现的顺序），先运行Field.clean() ，然后运行clean_<fieldname>()。每个字段的这两个方法都执行完之后，最后运行Form.clean() 方法，无论前面的方法是否抛出过异常。</fieldname></p>\n<h3 id=\"实例：表单字段的默认验证\"><a href=\"#实例：表单字段的默认验证\" class=\"headerlink\" title=\"实例：表单字段的默认验证\"></a>实例：表单字段的默认验证</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</div><div class=\"line\"><span class=\"keyword\">from</span> django.core.validators <span class=\"keyword\">import</span> validate_email</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiEmailField</span><span class=\"params\">(forms.Field)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_python</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"Normalize data to a list of strings.\"</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\"># Return an empty list if no input was given.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</div><div class=\"line\">            <span class=\"keyword\">return</span> []</div><div class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">','</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"Check if value consists only of valid emails.\"</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\"># Use the parent's handling of required fields, etc.</span></div><div class=\"line\">        super(MultiEmailField, self).validate(value)</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> value:</div><div class=\"line\">            validate_email(email)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########### 创建form类 #########</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactForm</span><span class=\"params\">(forms.Form)</span>:</span></div><div class=\"line\">    subject = forms.CharField(max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    message = forms.CharField()</div><div class=\"line\">    sender = forms.EmailField()</div><div class=\"line\">    recipients = MultiEmailField()</div><div class=\"line\">    cc_myself = forms.BooleanField(required=<span class=\"keyword\">False</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 当调用表单的is_valid()方法时，MultiEmailField.clean()方法将作为验证过程的一部分运行，即将调用to_python()和validate()方法</span></div></pre></td></tr></table></figure>\n<h3 id=\"Validator\"><a href=\"#Validator\" class=\"headerlink\" title=\"Validator\"></a>Validator</h3><p>验证器是一个可调用的对象，它接受一个值，并在不符合一些规则时抛出<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_begin</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value.startswith(<span class=\"string\">u'ABC'</span>):</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValidationError(<span class=\"string\">'名称不是以ABC开头'</span>, code=<span class=\"string\">'error_begin'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 调用</span></div><div class=\"line\">other_field = forms.CharField(max_length=<span class=\"number\">100</span>, validators=[validate_begin])</div></pre></td></tr></table></figure></p>\n<h3 id=\"forms常用方法\"><a href=\"#forms常用方法\" class=\"headerlink\" title=\"forms常用方法\"></a>forms常用方法</h3><ul>\n<li>f.is_bound 属性说明表单是否具有绑定的数据</li>\n<li>f.is_valid() 验证提交的表单字段是否正确（is_valid() 返回True）</li>\n<li>form.cleaned_data 字典存为验证后的表单数据</li>\n<li>f.errors 获取错误信息的一个字典</li>\n<li>f.errors.as_data() 返回字典，映射到原始的ValidationError实例</li>\n<li>f.errors.as_json() 返回json序列化后的错误</li>\n<li>f.has_changed() 检查表单的数据是否从初始数据发生改变</li>\n<li>f.fields 从表单实例的fields属性中访问字段</li>\n</ul>\n<h3 id=\"save-方法\"><a href=\"#save-方法\" class=\"headerlink\" title=\"save()方法\"></a>save()方法</h3><p>根据表单绑定的数据创建并保存数据库对象</p>\n<ul>\n<li>instance 关键字接收一个已经存在的实例对象，如果有，则save()将更新这个实例，没有save()将创建一个新的实例</li>\n<li>commit save() 关键字参数，其值为True 或False。如果save() 时commit=False，那么它将返回一个还没有保存到数据库的对象,操作后调用save方法保存</li>\n<li>commit=False 时因不能立即生成实例，多对多数据时需要对froms实例调用save_m2m()方法对多对多数据进行保存，如：channel.save() ,_channel = ChannelForm(req.data).save_m2m()</li>\n</ul>\n<h3 id=\"ModelForm中Meta属性\"><a href=\"#ModelForm中Meta属性\" class=\"headerlink\" title=\"ModelForm中Meta属性\"></a>ModelForm中Meta属性</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelCustomForm</span><span class=\"params\">(ModelForm)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = ChannelCustom</div><div class=\"line\">        fields = [<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>]   <span class=\"comment\"># 需要编辑的字段</span></div><div class=\"line\">        fields = <span class=\"string\">'__all__'</span>  <span class=\"comment\"># 所有字段</span></div><div class=\"line\">        exclude = [<span class=\"string\">'title'</span>] <span class=\"comment\"># 排除某些字段</span></div><div class=\"line\">        labels= <span class=\"keyword\">None</span>        <span class=\"comment\"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class=\"line\">        help_texts = <span class=\"keyword\">None</span>     <span class=\"comment\"># 帮助提示信息</span></div><div class=\"line\">        widgets = <span class=\"keyword\">None</span>        <span class=\"comment\"># 自定义插件</span></div><div class=\"line\">        error_messages = <span class=\"keyword\">None</span> <span class=\"comment\"># 自定义错误信息</span></div><div class=\"line\">        field_classes = <span class=\"keyword\">None</span>  <span class=\"comment\"># 自定义字段类（也可以自定义字段)</span></div><div class=\"line\">        Localized_fields = (‘birth_date’,) <span class=\"comment\"># 本地化，如：根据不同时区显示数据</span></div></pre></td></tr></table></figure>\n<h3 id=\"实例-说明功能\"><a href=\"#实例-说明功能\" class=\"headerlink\" title=\"实例(说明功能)\"></a>实例(说明功能)</h3><ul>\n<li><p>models.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelCustom</span><span class=\"params\">(BaseModel)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    organ = models.ForeignKey(<span class=\"string\">'organs.Organ'</span>, null=<span class=\"keyword\">True</span>)</div><div class=\"line\">    name = models.CharField(<span class=\"string\">u'名称'</span>, max_length=<span class=\"number\">40</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    logo = models.CharField(<span class=\"string\">u'渠道logo'</span>, max_length=<span class=\"number\">80</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    is_valid = models.BooleanField(<span class=\"string\">u'有效'</span>, default=<span class=\"keyword\">True</span>)</div><div class=\"line\">    note = models.CharField(<span class=\"string\">u'备注'</span>, max_length=<span class=\"number\">512</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>forms.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ModelForm, Textarea</div><div class=\"line\"><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> fields <span class=\"keyword\">as</span> MFfields</div><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</div><div class=\"line\"><span class=\"keyword\">from</span> django.core.exceptions <span class=\"keyword\">import</span> ValidationError</div><div class=\"line\"><span class=\"comment\"># from django.utils.translation import ugettext as _</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> ugettext_lazy <span class=\"keyword\">as</span> _</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_begin</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value.startswith(<span class=\"string\">u'ABC'</span>):</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValidationError(<span class=\"string\">'名称不是以ABC开头'</span>, code=<span class=\"string\">'error_begin'</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelCustomForm</span><span class=\"params\">(ModelForm)</span>:</span></div><div class=\"line\">    name = MFfields.CharField(max_length=<span class=\"number\">100</span>)   <span class=\"comment\"># 重新定义字段属性,可以为已有的字段,也可以是没有的字段</span></div><div class=\"line\">    other_field = forms.CharField(max_length=<span class=\"number\">100</span>, validators=[validate_begin])</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span>                        <span class=\"comment\"># 通过继承来解决对应字段的属性</span></div><div class=\"line\">        super(ChannelCustomForm, self).__init__(*args, **kwargs)</div><div class=\"line\">        self.fields[<span class=\"string\">'name'</span>].validators.append(validate_begin)   <span class=\"comment\"># 添加验证方法</span></div><div class=\"line\">        self.fields[<span class=\"string\">'name'</span>].required = <span class=\"keyword\">True</span>                     <span class=\"comment\"># 添加对应字段的属性</span></div><div class=\"line\">        self.fields[<span class=\"string\">'note'</span>].required = <span class=\"keyword\">True</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = ChannelCustom</div><div class=\"line\">        fields = [<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>, <span class=\"string\">'other_field'</span>]</div><div class=\"line\">        <span class=\"comment\"># exclude = ['logo']</span></div><div class=\"line\">        labels = &#123;          <span class=\"comment\"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"渠道名称\"</span>,</div><div class=\"line\">            <span class=\"string\">\"logo\"</span>: <span class=\"string\">\"渠道logo\"</span>,</div><div class=\"line\">            <span class=\"string\">\"is_valid\"</span>: <span class=\"string\">\"是否有效\"</span>,</div><div class=\"line\">            <span class=\"string\">\"note\"</span>: <span class=\"string\">\"备注\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        help_texts = &#123;      <span class=\"comment\"># 帮助提示信息</span></div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"请输入渠道名\"</span>,</div><div class=\"line\">            <span class=\"string\">\"note\"</span>: <span class=\"string\">\"请输入备注\"</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        error_messages = &#123;  <span class=\"comment\"># 自定义错误描述</span></div><div class=\"line\">            <span class=\"comment\"># '__all__': &#123;</span></div><div class=\"line\">            <span class=\"comment\">#</span></div><div class=\"line\">            <span class=\"comment\"># &#125;,</span></div><div class=\"line\">            <span class=\"string\">'organ'</span>: &#123;</div><div class=\"line\">                <span class=\"string\">'max_length'</span>: (<span class=\"string\">\"企业字段不能为空.\"</span>),</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">'note'</span>: &#123;</div><div class=\"line\">                <span class=\"string\">'required'</span>: <span class=\"string\">\"note字段不能为空.\"</span>,  <span class=\"comment\"># 这里的key是特定的字符</span></div><div class=\"line\">                <span class=\"string\">'invalid'</span>: <span class=\"string\">'http格式错误'</span>,</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;</div><div class=\"line\">        widgets = &#123;     <span class=\"comment\"># 自定义 widget，添加对应字段的属性</span></div><div class=\"line\">            <span class=\"string\">'name'</span>: Textarea(attrs=&#123;<span class=\"string\">'cols'</span>: <span class=\"number\">80</span>, <span class=\"string\">'rows'</span>: <span class=\"number\">20</span>&#125;),</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        field_classes = &#123;       <span class=\"comment\"># 字段类型设置，可以强制修改成其他类型</span></div><div class=\"line\">            <span class=\"string\">'note'</span>: MFfields.URLField</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        Localized_fields = (<span class=\"string\">'is_valid'</span>, )    <span class=\"comment\">#本地化，如：根据不同时区显示数据</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        定义字段检查方法</div><div class=\"line\">        clean()和clean_&lt;field&gt;&amp;()的最后必须返回验证完毕或修改后的值</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        name = self.cleaned_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name:</div><div class=\"line\">            <span class=\"keyword\">raise</span> forms.ValidationError(<span class=\"string\">'名称不能为空'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean_logo</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logo = self.cleaned_data[<span class=\"string\">'logo'</span>]</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> logo:</div><div class=\"line\">            <span class=\"keyword\">raise</span> forms.ValidationError(<span class=\"string\">'logo不能为空'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> logo</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        - 如果你需要覆盖clean() 方法并维持这个验证行为，你必须调用父类的clean()方法</div><div class=\"line\">        - 在表单数据提交的时候,所有的数据都会经过clean()函数</div><div class=\"line\">        - 用于验证字段间有关联的数据验证</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        cleaned_data = super(ChannelCustomForm, self).clean()</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">print</span> cleaned_data</div><div class=\"line\">        logo = cleaned_data.get(<span class=\"string\">'logo'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        name = cleaned_data.get(<span class=\"string\">'name'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> logo != name:</div><div class=\"line\">            msg = <span class=\"string\">u'两者不一致相等 %(name)s &lt;--&gt; %(logo)s'</span></div><div class=\"line\">            error_instance = ValidationError(_(msg), code=<span class=\"string\">'invalid'</span>, params=&#123;<span class=\"string\">'name'</span>: name, <span class=\"string\">'logo'</span>: logo&#125;)</div><div class=\"line\">            self.add_error(<span class=\"string\">'logo'</span>,error=error_instance)     <span class=\"comment\"># 添加错误信息</span></div><div class=\"line\">            self.non_field_errors()</div><div class=\"line\">            <span class=\"comment\"># self.errors['logo'] = self.error_class([msg])</span></div><div class=\"line\">            <span class=\"comment\"># raise forms.ValidationError(self.errors['logo'])</span></div><div class=\"line\">            <span class=\"comment\"># raise forms.ValidationError('两者不一致相等')</span></div><div class=\"line\">        <span class=\"keyword\">return</span> cleaned_data</div></pre></td></tr></table></figure>\n</li>\n<li><p>views.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> .forms <span class=\"keyword\">import</span> ChannelCustomForm</div><div class=\"line\"><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelformset_factory, modelform_factory</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, req)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    organ = req.user.get_profile().organ</div><div class=\"line\">    data = req.data</div><div class=\"line\">    <span class=\"comment\"># _channel = ChannelCustom.objects.get(pk=8)</span></div><div class=\"line\">    <span class=\"comment\"># form = ChannelCustomForm(data)#, instance=_channel)</span></div><div class=\"line\">    <span class=\"comment\"># modelform_factory() 来代替使用类定义来从模型直接创建表单,用于不在很多自定义的情况下</span></div><div class=\"line\">    ChannelCustomFormfactory = modelform_factory(ChannelCustom,</div><div class=\"line\">                                                  fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>)</div><div class=\"line\">                                                )</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># modelformset_factory() 模型表单集</span></div><div class=\"line\">    ChannelCustomSet = modelformset_factory(ChannelCustom,</div><div class=\"line\">                                            fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>)</div><div class=\"line\">                                            )</div><div class=\"line\"> </div><div class=\"line\">    form = ChannelCustomForm(data)<span class=\"comment\">#, instance=_channel)</span></div><div class=\"line\">    <span class=\"comment\"># form = ChannelCustomFormfactory(data=data)</span></div><div class=\"line\">    <span class=\"comment\"># form = ChannelCustomSet(data=data)</span></div><div class=\"line\">    <span class=\"keyword\">if</span> form.is_valid():</div><div class=\"line\">        <span class=\"keyword\">print</span> form.cleaned_data</div><div class=\"line\">        <span class=\"keyword\">print</span> form.errors</div><div class=\"line\">        channel = form.save()</div><div class=\"line\">        channel.organ= organ</div><div class=\"line\">        channel.save()</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> resp.serialize_response(channel, results_name=<span class=\"string\">'channel'</span>)</div><div class=\"line\">    error =form.errors.as_json()</div><div class=\"line\">    error_msg = json.loads(error)</div><div class=\"line\">    <span class=\"keyword\">return</span> resp.failed(error_msg)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html\" target=\"_blank\" rel=\"external\">http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html</a></p>\n","excerpt":"","more":"<h3 id=\"form表单验证顺序步骤：\"><a href=\"#form表单验证顺序步骤：\" class=\"headerlink\" title=\"form表单验证顺序步骤：\"></a>form表单验证顺序步骤：</h3><ol>\n<li>to_python()将值转换为正确的pthon数据类型，如果不能转换，抛出ValidationError</li>\n<li>字段的validate()方法处理字段特殊定义的验证</li>\n<li>字段的run_validators() 方法运行字段的所有Validator，并将所有的错误信息聚合成一个单一的ValidationError</li>\n<li>Field子类的clean() 方法，负责以正确的顺序运行to_python、validate 和 run_validators 并传播它们的错误。如果任何时刻、任何方法引发ValidationError，验证将停止并引发这个错误；这个方法返回验证后的数据，这个数据在后面将插入到表单的 cleaned_data 字典中</li>\n<li>表单子类中的clean_<fieldname>() 方法，这个方法完成于特定属性相关的验证，自定义字段验证，数据在clean_data字典中，该方法返回从cleaned_data 中获取的值</li>\n<li>表单子类的clean() 方法，这个方法可以实现需要同时访问表单多个字段的验证</li>\n</ol>\n<p>对于表单中的每个字段（按它们在表单定义中出现的顺序），先运行Field.clean() ，然后运行clean_<fieldname>()。每个字段的这两个方法都执行完之后，最后运行Form.clean() 方法，无论前面的方法是否抛出过异常。</p>\n<h3 id=\"实例：表单字段的默认验证\"><a href=\"#实例：表单字段的默认验证\" class=\"headerlink\" title=\"实例：表单字段的默认验证\"></a>实例：表单字段的默认验证</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</div><div class=\"line\"><span class=\"keyword\">from</span> django.core.validators <span class=\"keyword\">import</span> validate_email</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiEmailField</span><span class=\"params\">(forms.Field)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_python</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"Normalize data to a list of strings.\"</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\"># Return an empty list if no input was given.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</div><div class=\"line\">            <span class=\"keyword\">return</span> []</div><div class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">','</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"Check if value consists only of valid emails.\"</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\"># Use the parent's handling of required fields, etc.</span></div><div class=\"line\">        super(MultiEmailField, self).validate(value)</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> value:</div><div class=\"line\">            validate_email(email)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########### 创建form类 #########</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactForm</span><span class=\"params\">(forms.Form)</span>:</span></div><div class=\"line\">    subject = forms.CharField(max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    message = forms.CharField()</div><div class=\"line\">    sender = forms.EmailField()</div><div class=\"line\">    recipients = MultiEmailField()</div><div class=\"line\">    cc_myself = forms.BooleanField(required=<span class=\"keyword\">False</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 当调用表单的is_valid()方法时，MultiEmailField.clean()方法将作为验证过程的一部分运行，即将调用to_python()和validate()方法</span></div></pre></td></tr></table></figure>\n<h3 id=\"Validator\"><a href=\"#Validator\" class=\"headerlink\" title=\"Validator\"></a>Validator</h3><p>验证器是一个可调用的对象，它接受一个值，并在不符合一些规则时抛出<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_begin</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value.startswith(<span class=\"string\">u'ABC'</span>):</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValidationError(<span class=\"string\">'名称不是以ABC开头'</span>, code=<span class=\"string\">'error_begin'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 调用</span></div><div class=\"line\">other_field = forms.CharField(max_length=<span class=\"number\">100</span>, validators=[validate_begin])</div></pre></td></tr></table></figure></p>\n<h3 id=\"forms常用方法\"><a href=\"#forms常用方法\" class=\"headerlink\" title=\"forms常用方法\"></a>forms常用方法</h3><ul>\n<li>f.is_bound 属性说明表单是否具有绑定的数据</li>\n<li>f.is_valid() 验证提交的表单字段是否正确（is_valid() 返回True）</li>\n<li>form.cleaned_data 字典存为验证后的表单数据</li>\n<li>f.errors 获取错误信息的一个字典</li>\n<li>f.errors.as_data() 返回字典，映射到原始的ValidationError实例</li>\n<li>f.errors.as_json() 返回json序列化后的错误</li>\n<li>f.has_changed() 检查表单的数据是否从初始数据发生改变</li>\n<li>f.fields 从表单实例的fields属性中访问字段</li>\n</ul>\n<h3 id=\"save-方法\"><a href=\"#save-方法\" class=\"headerlink\" title=\"save()方法\"></a>save()方法</h3><p>根据表单绑定的数据创建并保存数据库对象</p>\n<ul>\n<li>instance 关键字接收一个已经存在的实例对象，如果有，则save()将更新这个实例，没有save()将创建一个新的实例</li>\n<li>commit save() 关键字参数，其值为True 或False。如果save() 时commit=False，那么它将返回一个还没有保存到数据库的对象,操作后调用save方法保存</li>\n<li>commit=False 时因不能立即生成实例，多对多数据时需要对froms实例调用save_m2m()方法对多对多数据进行保存，如：channel.save() ,_channel = ChannelForm(req.data).save_m2m()</li>\n</ul>\n<h3 id=\"ModelForm中Meta属性\"><a href=\"#ModelForm中Meta属性\" class=\"headerlink\" title=\"ModelForm中Meta属性\"></a>ModelForm中Meta属性</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelCustomForm</span><span class=\"params\">(ModelForm)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = ChannelCustom</div><div class=\"line\">        fields = [<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>]   <span class=\"comment\"># 需要编辑的字段</span></div><div class=\"line\">        fields = <span class=\"string\">'__all__'</span>  <span class=\"comment\"># 所有字段</span></div><div class=\"line\">        exclude = [<span class=\"string\">'title'</span>] <span class=\"comment\"># 排除某些字段</span></div><div class=\"line\">        labels= <span class=\"keyword\">None</span>        <span class=\"comment\"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class=\"line\">        help_texts = <span class=\"keyword\">None</span>     <span class=\"comment\"># 帮助提示信息</span></div><div class=\"line\">        widgets = <span class=\"keyword\">None</span>        <span class=\"comment\"># 自定义插件</span></div><div class=\"line\">        error_messages = <span class=\"keyword\">None</span> <span class=\"comment\"># 自定义错误信息</span></div><div class=\"line\">        field_classes = <span class=\"keyword\">None</span>  <span class=\"comment\"># 自定义字段类（也可以自定义字段)</span></div><div class=\"line\">        Localized_fields = (‘birth_date’,) <span class=\"comment\"># 本地化，如：根据不同时区显示数据</span></div></pre></td></tr></table></figure>\n<h3 id=\"实例-说明功能\"><a href=\"#实例-说明功能\" class=\"headerlink\" title=\"实例(说明功能)\"></a>实例(说明功能)</h3><ul>\n<li><p>models.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelCustom</span><span class=\"params\">(BaseModel)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    organ = models.ForeignKey(<span class=\"string\">'organs.Organ'</span>, null=<span class=\"keyword\">True</span>)</div><div class=\"line\">    name = models.CharField(<span class=\"string\">u'名称'</span>, max_length=<span class=\"number\">40</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    logo = models.CharField(<span class=\"string\">u'渠道logo'</span>, max_length=<span class=\"number\">80</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    is_valid = models.BooleanField(<span class=\"string\">u'有效'</span>, default=<span class=\"keyword\">True</span>)</div><div class=\"line\">    note = models.CharField(<span class=\"string\">u'备注'</span>, max_length=<span class=\"number\">512</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>forms.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ModelForm, Textarea</div><div class=\"line\"><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> fields <span class=\"keyword\">as</span> MFfields</div><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</div><div class=\"line\"><span class=\"keyword\">from</span> django.core.exceptions <span class=\"keyword\">import</span> ValidationError</div><div class=\"line\"><span class=\"comment\"># from django.utils.translation import ugettext as _</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> ugettext_lazy <span class=\"keyword\">as</span> _</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_begin</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value.startswith(<span class=\"string\">u'ABC'</span>):</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValidationError(<span class=\"string\">'名称不是以ABC开头'</span>, code=<span class=\"string\">'error_begin'</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelCustomForm</span><span class=\"params\">(ModelForm)</span>:</span></div><div class=\"line\">    name = MFfields.CharField(max_length=<span class=\"number\">100</span>)   <span class=\"comment\"># 重新定义字段属性,可以为已有的字段,也可以是没有的字段</span></div><div class=\"line\">    other_field = forms.CharField(max_length=<span class=\"number\">100</span>, validators=[validate_begin])</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span>                        <span class=\"comment\"># 通过继承来解决对应字段的属性</span></div><div class=\"line\">        super(ChannelCustomForm, self).__init__(*args, **kwargs)</div><div class=\"line\">        self.fields[<span class=\"string\">'name'</span>].validators.append(validate_begin)   <span class=\"comment\"># 添加验证方法</span></div><div class=\"line\">        self.fields[<span class=\"string\">'name'</span>].required = <span class=\"keyword\">True</span>                     <span class=\"comment\"># 添加对应字段的属性</span></div><div class=\"line\">        self.fields[<span class=\"string\">'note'</span>].required = <span class=\"keyword\">True</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = ChannelCustom</div><div class=\"line\">        fields = [<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>, <span class=\"string\">'other_field'</span>]</div><div class=\"line\">        <span class=\"comment\"># exclude = ['logo']</span></div><div class=\"line\">        labels = &#123;          <span class=\"comment\"># 用于自定义标签的名字，默认情况下是数据库中表的列名</span></div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"渠道名称\"</span>,</div><div class=\"line\">            <span class=\"string\">\"logo\"</span>: <span class=\"string\">\"渠道logo\"</span>,</div><div class=\"line\">            <span class=\"string\">\"is_valid\"</span>: <span class=\"string\">\"是否有效\"</span>,</div><div class=\"line\">            <span class=\"string\">\"note\"</span>: <span class=\"string\">\"备注\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        help_texts = &#123;      <span class=\"comment\"># 帮助提示信息</span></div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"请输入渠道名\"</span>,</div><div class=\"line\">            <span class=\"string\">\"note\"</span>: <span class=\"string\">\"请输入备注\"</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        error_messages = &#123;  <span class=\"comment\"># 自定义错误描述</span></div><div class=\"line\">            <span class=\"comment\"># '__all__': &#123;</span></div><div class=\"line\">            <span class=\"comment\">#</span></div><div class=\"line\">            <span class=\"comment\"># &#125;,</span></div><div class=\"line\">            <span class=\"string\">'organ'</span>: &#123;</div><div class=\"line\">                <span class=\"string\">'max_length'</span>: (<span class=\"string\">\"企业字段不能为空.\"</span>),</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">'note'</span>: &#123;</div><div class=\"line\">                <span class=\"string\">'required'</span>: <span class=\"string\">\"note字段不能为空.\"</span>,  <span class=\"comment\"># 这里的key是特定的字符</span></div><div class=\"line\">                <span class=\"string\">'invalid'</span>: <span class=\"string\">'http格式错误'</span>,</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;</div><div class=\"line\">        widgets = &#123;     <span class=\"comment\"># 自定义 widget，添加对应字段的属性</span></div><div class=\"line\">            <span class=\"string\">'name'</span>: Textarea(attrs=&#123;<span class=\"string\">'cols'</span>: <span class=\"number\">80</span>, <span class=\"string\">'rows'</span>: <span class=\"number\">20</span>&#125;),</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        field_classes = &#123;       <span class=\"comment\"># 字段类型设置，可以强制修改成其他类型</span></div><div class=\"line\">            <span class=\"string\">'note'</span>: MFfields.URLField</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        Localized_fields = (<span class=\"string\">'is_valid'</span>, )    <span class=\"comment\">#本地化，如：根据不同时区显示数据</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        定义字段检查方法</div><div class=\"line\">        clean()和clean_&lt;field&gt;&amp;()的最后必须返回验证完毕或修改后的值</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        name = self.cleaned_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name:</div><div class=\"line\">            <span class=\"keyword\">raise</span> forms.ValidationError(<span class=\"string\">'名称不能为空'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean_logo</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logo = self.cleaned_data[<span class=\"string\">'logo'</span>]</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> logo:</div><div class=\"line\">            <span class=\"keyword\">raise</span> forms.ValidationError(<span class=\"string\">'logo不能为空'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> logo</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        - 如果你需要覆盖clean() 方法并维持这个验证行为，你必须调用父类的clean()方法</div><div class=\"line\">        - 在表单数据提交的时候,所有的数据都会经过clean()函数</div><div class=\"line\">        - 用于验证字段间有关联的数据验证</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        cleaned_data = super(ChannelCustomForm, self).clean()</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">print</span> cleaned_data</div><div class=\"line\">        logo = cleaned_data.get(<span class=\"string\">'logo'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        name = cleaned_data.get(<span class=\"string\">'name'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> logo != name:</div><div class=\"line\">            msg = <span class=\"string\">u'两者不一致相等 %(name)s &lt;--&gt; %(logo)s'</span></div><div class=\"line\">            error_instance = ValidationError(_(msg), code=<span class=\"string\">'invalid'</span>, params=&#123;<span class=\"string\">'name'</span>: name, <span class=\"string\">'logo'</span>: logo&#125;)</div><div class=\"line\">            self.add_error(<span class=\"string\">'logo'</span>,error=error_instance)     <span class=\"comment\"># 添加错误信息</span></div><div class=\"line\">            self.non_field_errors()</div><div class=\"line\">            <span class=\"comment\"># self.errors['logo'] = self.error_class([msg])</span></div><div class=\"line\">            <span class=\"comment\"># raise forms.ValidationError(self.errors['logo'])</span></div><div class=\"line\">            <span class=\"comment\"># raise forms.ValidationError('两者不一致相等')</span></div><div class=\"line\">        <span class=\"keyword\">return</span> cleaned_data</div></pre></td></tr></table></figure>\n</li>\n<li><p>views.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> .forms <span class=\"keyword\">import</span> ChannelCustomForm</div><div class=\"line\"><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelformset_factory, modelform_factory</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, req)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    organ = req.user.get_profile().organ</div><div class=\"line\">    data = req.data</div><div class=\"line\">    <span class=\"comment\"># _channel = ChannelCustom.objects.get(pk=8)</span></div><div class=\"line\">    <span class=\"comment\"># form = ChannelCustomForm(data)#, instance=_channel)</span></div><div class=\"line\">    <span class=\"comment\"># modelform_factory() 来代替使用类定义来从模型直接创建表单,用于不在很多自定义的情况下</span></div><div class=\"line\">    ChannelCustomFormfactory = modelform_factory(ChannelCustom,</div><div class=\"line\">                                                  fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>)</div><div class=\"line\">                                                )</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># modelformset_factory() 模型表单集</span></div><div class=\"line\">    ChannelCustomSet = modelformset_factory(ChannelCustom,</div><div class=\"line\">                                            fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'logo'</span>, <span class=\"string\">'is_valid'</span>, <span class=\"string\">'note'</span>)</div><div class=\"line\">                                            )</div><div class=\"line\"> </div><div class=\"line\">    form = ChannelCustomForm(data)<span class=\"comment\">#, instance=_channel)</span></div><div class=\"line\">    <span class=\"comment\"># form = ChannelCustomFormfactory(data=data)</span></div><div class=\"line\">    <span class=\"comment\"># form = ChannelCustomSet(data=data)</span></div><div class=\"line\">    <span class=\"keyword\">if</span> form.is_valid():</div><div class=\"line\">        <span class=\"keyword\">print</span> form.cleaned_data</div><div class=\"line\">        <span class=\"keyword\">print</span> form.errors</div><div class=\"line\">        channel = form.save()</div><div class=\"line\">        channel.organ= organ</div><div class=\"line\">        channel.save()</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> resp.serialize_response(channel, results_name=<span class=\"string\">'channel'</span>)</div><div class=\"line\">    error =form.errors.as_json()</div><div class=\"line\">    error_msg = json.loads(error)</div><div class=\"line\">    <span class=\"keyword\">return</span> resp.failed(error_msg)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html\">http://python.usyiyi.cn/translate/django_182/topics/forms/modelforms.html</a></p>\n"},{"title":"Django mgirate 错误","date":"2018-09-17T11:37:18.000Z","_content":"#### 问题描述\n最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：\n```python\nFile \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 1057, in _read_query_result\n    result.read()\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 1340, in read\n    first_packet = self.connection._read_packet()\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 1014, in _read_packet\n    packet.check_error()\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 393, in check_error\n    err.raise_mysql_exception(self._data)\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/err.py\", line 107, in raise_mysql_exception\n    raise errorclass(errno, errval)\ndjango.db.utils.IntegrityError: (1215, 'Cannot add foreign key constraint')\n```\n#### 原因分析\n查看资料后，网上大体出现这样报错的原因有：\n- 外键对应的字段数据类型不一致\n- 两张表的存储引擎不一致\n- 设置外键时“删除时”设置为“SET NULL”\n\n发现这3点都不是引起我们报错的原因，首先我们的外键的字段都是UUID类型一样， 存储引擎也同样都是InnoDB,外键使用默认的django.db.models.deletion.CASCADE，这3点都不是造成错误的原因；\n\n后来通过反复比较， 发现发现新建的表和建立外键的关系表中对应的字符集(default character set)和默认集合(default collation)这两者的类型不一致，导致外键关系创建不上,修改成一致后，再migrate，问题解决\n所以 在这里应该再加一条，\n- 在导入新库时，对应的字符集和集合类型应该和原数据库一致\n\n#### 总结\n在开发环境中，常把线上的数据库导入开发环境中， 这样本地数据库的字符集和集合类型有可能和线上的就不一致，导致上述问题； \n上述问题的原因： 线上数据库在创建数据库时指定的字符集为(utf8mb4)集合类型为(utf8mb4_general_ci),而在本地创建数据库时指定的字符集类型为(utf8mb4)集合类型为(utf8mb4_bin); 尤其在多人协作时这样的问题更容易出现，所以这样的操作时，应先查看数据库对应的存储引擎、字符集和集合类型等信息，避免出现意想不到的错误。\n\n\n\n\n\n\n","source":"_posts/django-migrations-error.md","raw":"---\ntitle: Django mgirate 错误\ndate: 2018-09-17 19:37:18\ntags:\n  - migrate\ncategories:\n  - Django\n---\n#### 问题描述\n最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：\n```python\nFile \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 1057, in _read_query_result\n    result.read()\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 1340, in read\n    first_packet = self.connection._read_packet()\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 1014, in _read_packet\n    packet.check_error()\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\", line 393, in check_error\n    err.raise_mysql_exception(self._data)\n  File \"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/err.py\", line 107, in raise_mysql_exception\n    raise errorclass(errno, errval)\ndjango.db.utils.IntegrityError: (1215, 'Cannot add foreign key constraint')\n```\n#### 原因分析\n查看资料后，网上大体出现这样报错的原因有：\n- 外键对应的字段数据类型不一致\n- 两张表的存储引擎不一致\n- 设置外键时“删除时”设置为“SET NULL”\n\n发现这3点都不是引起我们报错的原因，首先我们的外键的字段都是UUID类型一样， 存储引擎也同样都是InnoDB,外键使用默认的django.db.models.deletion.CASCADE，这3点都不是造成错误的原因；\n\n后来通过反复比较， 发现发现新建的表和建立外键的关系表中对应的字符集(default character set)和默认集合(default collation)这两者的类型不一致，导致外键关系创建不上,修改成一致后，再migrate，问题解决\n所以 在这里应该再加一条，\n- 在导入新库时，对应的字符集和集合类型应该和原数据库一致\n\n#### 总结\n在开发环境中，常把线上的数据库导入开发环境中， 这样本地数据库的字符集和集合类型有可能和线上的就不一致，导致上述问题； \n上述问题的原因： 线上数据库在创建数据库时指定的字符集为(utf8mb4)集合类型为(utf8mb4_general_ci),而在本地创建数据库时指定的字符集类型为(utf8mb4)集合类型为(utf8mb4_bin); 尤其在多人协作时这样的问题更容易出现，所以这样的操作时，应先查看数据库对应的存储引擎、字符集和集合类型等信息，避免出现意想不到的错误。\n\n\n\n\n\n\n","slug":"django-migrations-error","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5vz001zct8u9rf1b1f7","content":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">1057</span>, <span class=\"keyword\">in</span> _read_query_result</div><div class=\"line\">    result.read()</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">1340</span>, <span class=\"keyword\">in</span> read</div><div class=\"line\">    first_packet = self.connection._read_packet()</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">1014</span>, <span class=\"keyword\">in</span> _read_packet</div><div class=\"line\">    packet.check_error()</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">393</span>, <span class=\"keyword\">in</span> check_error</div><div class=\"line\">    err.raise_mysql_exception(self._data)</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/err.py\"</span>, line <span class=\"number\">107</span>, <span class=\"keyword\">in</span> raise_mysql_exception</div><div class=\"line\">    <span class=\"keyword\">raise</span> errorclass(errno, errval)</div><div class=\"line\">django.db.utils.IntegrityError: (<span class=\"number\">1215</span>, <span class=\"string\">'Cannot add foreign key constraint'</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h4><p>查看资料后，网上大体出现这样报错的原因有：</p>\n<ul>\n<li>外键对应的字段数据类型不一致</li>\n<li>两张表的存储引擎不一致</li>\n<li>设置外键时“删除时”设置为“SET NULL”</li>\n</ul>\n<p>发现这3点都不是引起我们报错的原因，首先我们的外键的字段都是UUID类型一样， 存储引擎也同样都是InnoDB,外键使用默认的django.db.models.deletion.CASCADE，这3点都不是造成错误的原因；</p>\n<p>后来通过反复比较， 发现发现新建的表和建立外键的关系表中对应的字符集(default character set)和默认集合(default collation)这两者的类型不一致，导致外键关系创建不上,修改成一致后，再migrate，问题解决<br>所以 在这里应该再加一条，</p>\n<ul>\n<li>在导入新库时，对应的字符集和集合类型应该和原数据库一致</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>在开发环境中，常把线上的数据库导入开发环境中， 这样本地数据库的字符集和集合类型有可能和线上的就不一致，导致上述问题；<br>上述问题的原因： 线上数据库在创建数据库时指定的字符集为(utf8mb4)集合类型为(utf8mb4_general_ci),而在本地创建数据库时指定的字符集类型为(utf8mb4)集合类型为(utf8mb4_bin); 尤其在多人协作时这样的问题更容易出现，所以这样的操作时，应先查看数据库对应的存储引擎、字符集和集合类型等信息，避免出现意想不到的错误。</p>\n","excerpt":"","more":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">1057</span>, <span class=\"keyword\">in</span> _read_query_result</div><div class=\"line\">    result.read()</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">1340</span>, <span class=\"keyword\">in</span> read</div><div class=\"line\">    first_packet = self.connection._read_packet()</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">1014</span>, <span class=\"keyword\">in</span> _read_packet</div><div class=\"line\">    packet.check_error()</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py\"</span>, line <span class=\"number\">393</span>, <span class=\"keyword\">in</span> check_error</div><div class=\"line\">    err.raise_mysql_exception(self._data)</div><div class=\"line\">  File <span class=\"string\">\"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/err.py\"</span>, line <span class=\"number\">107</span>, <span class=\"keyword\">in</span> raise_mysql_exception</div><div class=\"line\">    <span class=\"keyword\">raise</span> errorclass(errno, errval)</div><div class=\"line\">django.db.utils.IntegrityError: (<span class=\"number\">1215</span>, <span class=\"string\">'Cannot add foreign key constraint'</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h4><p>查看资料后，网上大体出现这样报错的原因有：</p>\n<ul>\n<li>外键对应的字段数据类型不一致</li>\n<li>两张表的存储引擎不一致</li>\n<li>设置外键时“删除时”设置为“SET NULL”</li>\n</ul>\n<p>发现这3点都不是引起我们报错的原因，首先我们的外键的字段都是UUID类型一样， 存储引擎也同样都是InnoDB,外键使用默认的django.db.models.deletion.CASCADE，这3点都不是造成错误的原因；</p>\n<p>后来通过反复比较， 发现发现新建的表和建立外键的关系表中对应的字符集(default character set)和默认集合(default collation)这两者的类型不一致，导致外键关系创建不上,修改成一致后，再migrate，问题解决<br>所以 在这里应该再加一条，</p>\n<ul>\n<li>在导入新库时，对应的字符集和集合类型应该和原数据库一致</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>在开发环境中，常把线上的数据库导入开发环境中， 这样本地数据库的字符集和集合类型有可能和线上的就不一致，导致上述问题；<br>上述问题的原因： 线上数据库在创建数据库时指定的字符集为(utf8mb4)集合类型为(utf8mb4_general_ci),而在本地创建数据库时指定的字符集类型为(utf8mb4)集合类型为(utf8mb4_bin); 尤其在多人协作时这样的问题更容易出现，所以这样的操作时，应先查看数据库对应的存储引擎、字符集和集合类型等信息，避免出现意想不到的错误。</p>\n"},{"title":"Django Logging","date":"2017-11-13T14:41:28.000Z","_content":"\n#### logging组成\n- 记录器(Logger)\n    \n    logger决定消息需要处理，即将传递该消息给一个Handler\n- 处理程序(Handler)\n    \n    handler决定如何处理logger中的每条信息，表示详细的日志行为，如写入文件或者屏幕显示等\n    \n    handler中也有日志级别，如果消息的日志级别小于handler的级别，handler将忽略该消息\n\n- 过滤器(Filters)\n\n    用于对从logger传递给handler的日志记录进行额外的控制\n    \n    filters可以用于修改将要处理的日志记录的优先级\n    \n    filters可以安装在logger或者handler上，多个filter可以串联起来实现多层filter行为\n    \n- 格式化(Formatter)\n\n    日志记录需要转换成文本\n\n#### 日志级别\n- DEBUG: 用于调试底层系统信息\n- INFO: 普通的系统信息\n- WARNING: 警告信息\n- ERROR： 错误信息\n- CRITICAL: 严重错误信息\n\n#### 使用logging\n\n```python\nimport logging\n \n# 调用获取logger的实例\nlogger = logging.getLogger(__name__)\n \n# 使用\nlogger.error('Something wrong!')\nlogger.debug('debug')\nlogger.info('info')\nlogger.warning('warning')\nlogger.critical('critical')\nlogger.log('log')   # 打印消息时手动指定日志级别\nlogger.exception() # 创建一个error级别日志消息\n```\n\n#### 实例(settings.py)\n```python \nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,   # 默认配置中的所有logger 都将禁用\n    'formatters': {\n       'standard': {\n            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'},  #日志格式\n        },\n \n    # 'filters': {\n    #     'require_debug_false': {\n    #         '()': 'django.utils.log.RequireDebugFalse',\n    #     },\n    # },\n    'handlers': {\n        'default': {\n            'level':'DEBUG',\n            'class':'logging.handlers.RotatingFileHandler',\n            'filename': \"../logs/server.log\",   # 日志输出文件\n            'maxBytes': 1024*1024*5,                                    # 文件大小\n            'backupCount': 5,                                           # 备份份数\n            'formatter':'standard',                                     #使用哪种formatters日志格式\n        },\n        'error': {\n            'level':'ERROR',\n            'class':'logging.handlers.RotatingFileHandler',\n            'filename': \"../logs/server.log\",\n            'maxBytes':1024*1024*5,\n            'backupCount': 5,\n            'formatter':'standard',\n        },\n        'console':{\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n            'formatter': 'standard'\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['default', 'console'],\n            'level': 'DEBUG',\n            'propagate': True\n        },\n        'django.request': {\n            'handlers': ['console', 'default'],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n        'django.db.backends': {\n            'handlers': ['console',],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n        'ttxs': {\n            'handlers': ['console', 'default', 'error'],\n            'level': 'DEBUG',\n        },\n    }\n```\n\n\n","source":"_posts/django-logging.md","raw":"---\ntitle: Django Logging\ndate: 2017-11-13 22:41:28\ntags:\n  - Logging\ncategories:\n  - Django\n---\n\n#### logging组成\n- 记录器(Logger)\n    \n    logger决定消息需要处理，即将传递该消息给一个Handler\n- 处理程序(Handler)\n    \n    handler决定如何处理logger中的每条信息，表示详细的日志行为，如写入文件或者屏幕显示等\n    \n    handler中也有日志级别，如果消息的日志级别小于handler的级别，handler将忽略该消息\n\n- 过滤器(Filters)\n\n    用于对从logger传递给handler的日志记录进行额外的控制\n    \n    filters可以用于修改将要处理的日志记录的优先级\n    \n    filters可以安装在logger或者handler上，多个filter可以串联起来实现多层filter行为\n    \n- 格式化(Formatter)\n\n    日志记录需要转换成文本\n\n#### 日志级别\n- DEBUG: 用于调试底层系统信息\n- INFO: 普通的系统信息\n- WARNING: 警告信息\n- ERROR： 错误信息\n- CRITICAL: 严重错误信息\n\n#### 使用logging\n\n```python\nimport logging\n \n# 调用获取logger的实例\nlogger = logging.getLogger(__name__)\n \n# 使用\nlogger.error('Something wrong!')\nlogger.debug('debug')\nlogger.info('info')\nlogger.warning('warning')\nlogger.critical('critical')\nlogger.log('log')   # 打印消息时手动指定日志级别\nlogger.exception() # 创建一个error级别日志消息\n```\n\n#### 实例(settings.py)\n```python \nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,   # 默认配置中的所有logger 都将禁用\n    'formatters': {\n       'standard': {\n            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'},  #日志格式\n        },\n \n    # 'filters': {\n    #     'require_debug_false': {\n    #         '()': 'django.utils.log.RequireDebugFalse',\n    #     },\n    # },\n    'handlers': {\n        'default': {\n            'level':'DEBUG',\n            'class':'logging.handlers.RotatingFileHandler',\n            'filename': \"../logs/server.log\",   # 日志输出文件\n            'maxBytes': 1024*1024*5,                                    # 文件大小\n            'backupCount': 5,                                           # 备份份数\n            'formatter':'standard',                                     #使用哪种formatters日志格式\n        },\n        'error': {\n            'level':'ERROR',\n            'class':'logging.handlers.RotatingFileHandler',\n            'filename': \"../logs/server.log\",\n            'maxBytes':1024*1024*5,\n            'backupCount': 5,\n            'formatter':'standard',\n        },\n        'console':{\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n            'formatter': 'standard'\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['default', 'console'],\n            'level': 'DEBUG',\n            'propagate': True\n        },\n        'django.request': {\n            'handlers': ['console', 'default'],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n        'django.db.backends': {\n            'handlers': ['console',],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n        'ttxs': {\n            'handlers': ['console', 'default', 'error'],\n            'level': 'DEBUG',\n        },\n    }\n```\n\n\n","slug":"django-logging","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5w10023ct8uin7wgbzj","content":"<h4 id=\"logging组成\"><a href=\"#logging组成\" class=\"headerlink\" title=\"logging组成\"></a>logging组成</h4><ul>\n<li><p>记录器(Logger)</p>\n<p>  logger决定消息需要处理，即将传递该消息给一个Handler</p>\n</li>\n<li><p>处理程序(Handler)</p>\n<p>  handler决定如何处理logger中的每条信息，表示详细的日志行为，如写入文件或者屏幕显示等</p>\n<p>  handler中也有日志级别，如果消息的日志级别小于handler的级别，handler将忽略该消息</p>\n</li>\n<li><p>过滤器(Filters)</p>\n<p>  用于对从logger传递给handler的日志记录进行额外的控制</p>\n<p>  filters可以用于修改将要处理的日志记录的优先级</p>\n<p>  filters可以安装在logger或者handler上，多个filter可以串联起来实现多层filter行为</p>\n</li>\n<li><p>格式化(Formatter)</p>\n<p>  日志记录需要转换成文本</p>\n</li>\n</ul>\n<h4 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h4><ul>\n<li>DEBUG: 用于调试底层系统信息</li>\n<li>INFO: 普通的系统信息</li>\n<li>WARNING: 警告信息</li>\n<li>ERROR： 错误信息</li>\n<li>CRITICAL: 严重错误信息</li>\n</ul>\n<h4 id=\"使用logging\"><a href=\"#使用logging\" class=\"headerlink\" title=\"使用logging\"></a>使用logging</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 调用获取logger的实例</span></div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用</span></div><div class=\"line\">logger.error(<span class=\"string\">'Something wrong!'</span>)</div><div class=\"line\">logger.debug(<span class=\"string\">'debug'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'info'</span>)</div><div class=\"line\">logger.warning(<span class=\"string\">'warning'</span>)</div><div class=\"line\">logger.critical(<span class=\"string\">'critical'</span>)</div><div class=\"line\">logger.log(<span class=\"string\">'log'</span>)   <span class=\"comment\"># 打印消息时手动指定日志级别</span></div><div class=\"line\">logger.exception() <span class=\"comment\"># 创建一个error级别日志消息</span></div></pre></td></tr></table></figure>\n<h4 id=\"实例-settings-py\"><a href=\"#实例-settings-py\" class=\"headerlink\" title=\"实例(settings.py)\"></a>实例(settings.py)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">LOGGING = &#123;</div><div class=\"line\">    <span class=\"string\">'version'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'disable_existing_loggers'</span>: <span class=\"keyword\">False</span>,   <span class=\"comment\"># 默认配置中的所有logger 都将禁用</span></div><div class=\"line\">    <span class=\"string\">'formatters'</span>: &#123;</div><div class=\"line\">       <span class=\"string\">'standard'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'format'</span>: <span class=\"string\">'%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'</span>&#125;,  <span class=\"comment\">#日志格式</span></div><div class=\"line\">        &#125;,</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># 'filters': &#123;</span></div><div class=\"line\">    <span class=\"comment\">#     'require_debug_false': &#123;</span></div><div class=\"line\">    <span class=\"comment\">#         '()': 'django.utils.log.RequireDebugFalse',</span></div><div class=\"line\">    <span class=\"comment\">#     &#125;,</span></div><div class=\"line\">    <span class=\"comment\"># &#125;,</span></div><div class=\"line\">    <span class=\"string\">'handlers'</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'default'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'level'</span>:<span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'class'</span>:<span class=\"string\">'logging.handlers.RotatingFileHandler'</span>,</div><div class=\"line\">            <span class=\"string\">'filename'</span>: <span class=\"string\">\"../logs/server.log\"</span>,   <span class=\"comment\"># 日志输出文件</span></div><div class=\"line\">            <span class=\"string\">'maxBytes'</span>: <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">5</span>,                                    <span class=\"comment\"># 文件大小</span></div><div class=\"line\">            <span class=\"string\">'backupCount'</span>: <span class=\"number\">5</span>,                                           <span class=\"comment\"># 备份份数</span></div><div class=\"line\">            <span class=\"string\">'formatter'</span>:<span class=\"string\">'standard'</span>,                                     <span class=\"comment\">#使用哪种formatters日志格式</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'error'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'level'</span>:<span class=\"string\">'ERROR'</span>,</div><div class=\"line\">            <span class=\"string\">'class'</span>:<span class=\"string\">'logging.handlers.RotatingFileHandler'</span>,</div><div class=\"line\">            <span class=\"string\">'filename'</span>: <span class=\"string\">\"../logs/server.log\"</span>,</div><div class=\"line\">            <span class=\"string\">'maxBytes'</span>:<span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"string\">'backupCount'</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"string\">'formatter'</span>:<span class=\"string\">'standard'</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'console'</span>:&#123;</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'class'</span>: <span class=\"string\">'logging.StreamHandler'</span>,</div><div class=\"line\">            <span class=\"string\">'formatter'</span>: <span class=\"string\">'standard'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'loggers'</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'django'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'default'</span>, <span class=\"string\">'console'</span>],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'propagate'</span>: <span class=\"keyword\">True</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'django.request'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'console'</span>, <span class=\"string\">'default'</span>],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'propagate'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'django.db.backends'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'console'</span>,],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'propagate'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'ttxs'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'console'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'error'</span>],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"logging组成\"><a href=\"#logging组成\" class=\"headerlink\" title=\"logging组成\"></a>logging组成</h4><ul>\n<li><p>记录器(Logger)</p>\n<p>  logger决定消息需要处理，即将传递该消息给一个Handler</p>\n</li>\n<li><p>处理程序(Handler)</p>\n<p>  handler决定如何处理logger中的每条信息，表示详细的日志行为，如写入文件或者屏幕显示等</p>\n<p>  handler中也有日志级别，如果消息的日志级别小于handler的级别，handler将忽略该消息</p>\n</li>\n<li><p>过滤器(Filters)</p>\n<p>  用于对从logger传递给handler的日志记录进行额外的控制</p>\n<p>  filters可以用于修改将要处理的日志记录的优先级</p>\n<p>  filters可以安装在logger或者handler上，多个filter可以串联起来实现多层filter行为</p>\n</li>\n<li><p>格式化(Formatter)</p>\n<p>  日志记录需要转换成文本</p>\n</li>\n</ul>\n<h4 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h4><ul>\n<li>DEBUG: 用于调试底层系统信息</li>\n<li>INFO: 普通的系统信息</li>\n<li>WARNING: 警告信息</li>\n<li>ERROR： 错误信息</li>\n<li>CRITICAL: 严重错误信息</li>\n</ul>\n<h4 id=\"使用logging\"><a href=\"#使用logging\" class=\"headerlink\" title=\"使用logging\"></a>使用logging</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 调用获取logger的实例</span></div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用</span></div><div class=\"line\">logger.error(<span class=\"string\">'Something wrong!'</span>)</div><div class=\"line\">logger.debug(<span class=\"string\">'debug'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'info'</span>)</div><div class=\"line\">logger.warning(<span class=\"string\">'warning'</span>)</div><div class=\"line\">logger.critical(<span class=\"string\">'critical'</span>)</div><div class=\"line\">logger.log(<span class=\"string\">'log'</span>)   <span class=\"comment\"># 打印消息时手动指定日志级别</span></div><div class=\"line\">logger.exception() <span class=\"comment\"># 创建一个error级别日志消息</span></div></pre></td></tr></table></figure>\n<h4 id=\"实例-settings-py\"><a href=\"#实例-settings-py\" class=\"headerlink\" title=\"实例(settings.py)\"></a>实例(settings.py)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">LOGGING = &#123;</div><div class=\"line\">    <span class=\"string\">'version'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'disable_existing_loggers'</span>: <span class=\"keyword\">False</span>,   <span class=\"comment\"># 默认配置中的所有logger 都将禁用</span></div><div class=\"line\">    <span class=\"string\">'formatters'</span>: &#123;</div><div class=\"line\">       <span class=\"string\">'standard'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'format'</span>: <span class=\"string\">'%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'</span>&#125;,  <span class=\"comment\">#日志格式</span></div><div class=\"line\">        &#125;,</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># 'filters': &#123;</span></div><div class=\"line\">    <span class=\"comment\">#     'require_debug_false': &#123;</span></div><div class=\"line\">    <span class=\"comment\">#         '()': 'django.utils.log.RequireDebugFalse',</span></div><div class=\"line\">    <span class=\"comment\">#     &#125;,</span></div><div class=\"line\">    <span class=\"comment\"># &#125;,</span></div><div class=\"line\">    <span class=\"string\">'handlers'</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'default'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'level'</span>:<span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'class'</span>:<span class=\"string\">'logging.handlers.RotatingFileHandler'</span>,</div><div class=\"line\">            <span class=\"string\">'filename'</span>: <span class=\"string\">\"../logs/server.log\"</span>,   <span class=\"comment\"># 日志输出文件</span></div><div class=\"line\">            <span class=\"string\">'maxBytes'</span>: <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">5</span>,                                    <span class=\"comment\"># 文件大小</span></div><div class=\"line\">            <span class=\"string\">'backupCount'</span>: <span class=\"number\">5</span>,                                           <span class=\"comment\"># 备份份数</span></div><div class=\"line\">            <span class=\"string\">'formatter'</span>:<span class=\"string\">'standard'</span>,                                     <span class=\"comment\">#使用哪种formatters日志格式</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'error'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'level'</span>:<span class=\"string\">'ERROR'</span>,</div><div class=\"line\">            <span class=\"string\">'class'</span>:<span class=\"string\">'logging.handlers.RotatingFileHandler'</span>,</div><div class=\"line\">            <span class=\"string\">'filename'</span>: <span class=\"string\">\"../logs/server.log\"</span>,</div><div class=\"line\">            <span class=\"string\">'maxBytes'</span>:<span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"string\">'backupCount'</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"string\">'formatter'</span>:<span class=\"string\">'standard'</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'console'</span>:&#123;</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'class'</span>: <span class=\"string\">'logging.StreamHandler'</span>,</div><div class=\"line\">            <span class=\"string\">'formatter'</span>: <span class=\"string\">'standard'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'loggers'</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'django'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'default'</span>, <span class=\"string\">'console'</span>],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'propagate'</span>: <span class=\"keyword\">True</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'django.request'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'console'</span>, <span class=\"string\">'default'</span>],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'propagate'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'django.db.backends'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'console'</span>,],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">            <span class=\"string\">'propagate'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'ttxs'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'handlers'</span>: [<span class=\"string\">'console'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'error'</span>],</div><div class=\"line\">            <span class=\"string\">'level'</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n"},{"title":"Django 分页","date":"2017-03-08T13:57:42.000Z","_content":"在Django 项目中使用自带的分页模块，记录如下\n\n**相关说明**\n```python\nfrom django.core.paginator import Paginator\n \nobjects = ['abc','bcd','cde','def','efg','fgh']\np = Paginator(objects, 2)#表示传入数据集合，2 表示每页存放的数据个数\np.cout #6 表示数据总量\np.num_pages#3 表示总页数\np.per_page#2 表示每页的数量\np.object_list# ['abc','bcd','cde','def','efg','fgh']  所有数据列表\np.page_range  #[1, 2, 3]   表示页数\np1 = p.page(1)#获取第一页的对象\np1.object_list#['abc', 'bcd'] 该页上的数据\np1.has_next()#True,判断该页是否有下一页\np1.has_previous()#False,判断该页是否有上一页\np1.has_other_pages() #判断该页是否有上或者下页\np1.start_index()# 1 p1开始的索引值\np1.end_index()#2 p1结束的索引值\np1.next_page_number(）# #返回下一页的页码，如果下一页不存在，抛出InvalidPage异常\np1.previous_page_number()#返回前一页的页码，如果上一页不存在，抛出InvalidPag异常\np1.paginator#<django.core.paginator.Paginator object at 0x7f39989b2bd0> 相关paginator的对象\n```\n\n**Django中使用分页**\n```python\nfrom django.shortcuts import render_to_response\nfrom django.core.paginator import Paginator, EmptyPage, InvalidPage, PageNotAnInteger\nfrom models import *\n \ndef device_status(request):\n    All_page_info = Device_status.objects.all()\n    DataCount,page,All_page_info = All_in_one(request,All_page_info)\n\n    return my_render(\"serverinfo/device_status.html\",locals(),request)\n \ndef my_render(template,data,request):\n    return render_to_response(template, data, context_instance=RequestContext(request))\n \ndef getpage_id(request):\n    \"\"\"\n    传递前端page过来的值，如果没有设置为1\n    \"\"\"\n    page = request.GET.get(\"page\",\"\")\n    if page:\n        page = request.GET.get(\"page\",\"\")\n    else:\n        page = 1\n    return page\n \ndef getpages(Data,page):\n    \"\"\"\n    处理分页函数\n    \"\"\"\n    paginator = Paginator(list(Data),2)\n    try:\n        Data = paginator.page(page)\n    except PageNotAnInteger:\n        Data = paginator.page(1)\n    except EmptyPage:\n        Data = paginator.page(paginator.num_pages)\n    return Data,page\n \ndef All_in_one(request,All_page_info):\n    DataCount = len(All_page_info)\n    page = getpage_id(request)\n    All_page_info,page=getpages(All_page_info,page)\n    return DataCount,page,All_page_info\n```\n**templates中**\n\n```\n备注：paginator.html  //将以下模板导入需要添加分页功能的页面即可（{% include 'paginator.html' %}）\n=========================\n<span class=\"step-links\">\n   {% if All_page_info.has_previous %} <!-- 是否有前一页 -->\n       <a  href=\"?page={{ All_page_info.previous_page_number }}\">上一页</a> <!-- 前一页的页码 -->\n         </script>\n   {% endif %}\n   <span class=\"current\">\n       第 {{ All_page_info.number }}页  总 {{ All_page_info.paginator.num_pages }} 页  <!-- 总页数 -->\n   </span>\n   {% if All_page_info.has_next %}\n       <a  href=\"?page={{ All_page_info.next_page_number }}\">下一页</a> <!-- 后一页的页码 -->\n   {% endif %}\n</span>\n<span>\n     &nbsp;&nbsp;共{{DataCount}}条记录\n</span>\n```\n**效果展示**\n![](https://ttxsgoto.github.io/img/django/page.png)\n\n\n\n\n\n","source":"_posts/django-page.md","raw":"---\ntitle: Django 分页\ndate: 2017-03-08 21:57:42\ntags:\n  - 分页\ncategories:\n  - Django\n---\n在Django 项目中使用自带的分页模块，记录如下\n\n**相关说明**\n```python\nfrom django.core.paginator import Paginator\n \nobjects = ['abc','bcd','cde','def','efg','fgh']\np = Paginator(objects, 2)#表示传入数据集合，2 表示每页存放的数据个数\np.cout #6 表示数据总量\np.num_pages#3 表示总页数\np.per_page#2 表示每页的数量\np.object_list# ['abc','bcd','cde','def','efg','fgh']  所有数据列表\np.page_range  #[1, 2, 3]   表示页数\np1 = p.page(1)#获取第一页的对象\np1.object_list#['abc', 'bcd'] 该页上的数据\np1.has_next()#True,判断该页是否有下一页\np1.has_previous()#False,判断该页是否有上一页\np1.has_other_pages() #判断该页是否有上或者下页\np1.start_index()# 1 p1开始的索引值\np1.end_index()#2 p1结束的索引值\np1.next_page_number(）# #返回下一页的页码，如果下一页不存在，抛出InvalidPage异常\np1.previous_page_number()#返回前一页的页码，如果上一页不存在，抛出InvalidPag异常\np1.paginator#<django.core.paginator.Paginator object at 0x7f39989b2bd0> 相关paginator的对象\n```\n\n**Django中使用分页**\n```python\nfrom django.shortcuts import render_to_response\nfrom django.core.paginator import Paginator, EmptyPage, InvalidPage, PageNotAnInteger\nfrom models import *\n \ndef device_status(request):\n    All_page_info = Device_status.objects.all()\n    DataCount,page,All_page_info = All_in_one(request,All_page_info)\n\n    return my_render(\"serverinfo/device_status.html\",locals(),request)\n \ndef my_render(template,data,request):\n    return render_to_response(template, data, context_instance=RequestContext(request))\n \ndef getpage_id(request):\n    \"\"\"\n    传递前端page过来的值，如果没有设置为1\n    \"\"\"\n    page = request.GET.get(\"page\",\"\")\n    if page:\n        page = request.GET.get(\"page\",\"\")\n    else:\n        page = 1\n    return page\n \ndef getpages(Data,page):\n    \"\"\"\n    处理分页函数\n    \"\"\"\n    paginator = Paginator(list(Data),2)\n    try:\n        Data = paginator.page(page)\n    except PageNotAnInteger:\n        Data = paginator.page(1)\n    except EmptyPage:\n        Data = paginator.page(paginator.num_pages)\n    return Data,page\n \ndef All_in_one(request,All_page_info):\n    DataCount = len(All_page_info)\n    page = getpage_id(request)\n    All_page_info,page=getpages(All_page_info,page)\n    return DataCount,page,All_page_info\n```\n**templates中**\n\n```\n备注：paginator.html  //将以下模板导入需要添加分页功能的页面即可（{% include 'paginator.html' %}）\n=========================\n<span class=\"step-links\">\n   {% if All_page_info.has_previous %} <!-- 是否有前一页 -->\n       <a  href=\"?page={{ All_page_info.previous_page_number }}\">上一页</a> <!-- 前一页的页码 -->\n         </script>\n   {% endif %}\n   <span class=\"current\">\n       第 {{ All_page_info.number }}页  总 {{ All_page_info.paginator.num_pages }} 页  <!-- 总页数 -->\n   </span>\n   {% if All_page_info.has_next %}\n       <a  href=\"?page={{ All_page_info.next_page_number }}\">下一页</a> <!-- 后一页的页码 -->\n   {% endif %}\n</span>\n<span>\n     &nbsp;&nbsp;共{{DataCount}}条记录\n</span>\n```\n**效果展示**\n![](https://ttxsgoto.github.io/img/django/page.png)\n\n\n\n\n\n","slug":"django-page","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5w20026ct8ucjb5wsnv","content":"<p>在Django 项目中使用自带的分页模块，记录如下</p>\n<p><strong>相关说明</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.core.paginator <span class=\"keyword\">import</span> Paginator</div><div class=\"line\"> </div><div class=\"line\">objects = [<span class=\"string\">'abc'</span>,<span class=\"string\">'bcd'</span>,<span class=\"string\">'cde'</span>,<span class=\"string\">'def'</span>,<span class=\"string\">'efg'</span>,<span class=\"string\">'fgh'</span>]</div><div class=\"line\">p = Paginator(objects, <span class=\"number\">2</span>)<span class=\"comment\">#表示传入数据集合，2 表示每页存放的数据个数</span></div><div class=\"line\">p.cout <span class=\"comment\">#6 表示数据总量</span></div><div class=\"line\">p.num_pages<span class=\"comment\">#3 表示总页数</span></div><div class=\"line\">p.per_page<span class=\"comment\">#2 表示每页的数量</span></div><div class=\"line\">p.object_list<span class=\"comment\"># ['abc','bcd','cde','def','efg','fgh']  所有数据列表</span></div><div class=\"line\">p.page_range  <span class=\"comment\">#[1, 2, 3]   表示页数</span></div><div class=\"line\">p1 = p.page(<span class=\"number\">1</span>)<span class=\"comment\">#获取第一页的对象</span></div><div class=\"line\">p1.object_list<span class=\"comment\">#['abc', 'bcd'] 该页上的数据</span></div><div class=\"line\">p1.has_next()<span class=\"comment\">#True,判断该页是否有下一页</span></div><div class=\"line\">p1.has_previous()<span class=\"comment\">#False,判断该页是否有上一页</span></div><div class=\"line\">p1.has_other_pages() <span class=\"comment\">#判断该页是否有上或者下页</span></div><div class=\"line\">p1.start_index()<span class=\"comment\"># 1 p1开始的索引值</span></div><div class=\"line\">p1.end_index()<span class=\"comment\">#2 p1结束的索引值</span></div><div class=\"line\">p1.next_page_number(）<span class=\"comment\"># #返回下一页的页码，如果下一页不存在，抛出InvalidPage异常</span></div><div class=\"line\">p1.previous_page_number()<span class=\"comment\">#返回前一页的页码，如果上一页不存在，抛出InvalidPag异常</span></div><div class=\"line\">p1.paginator<span class=\"comment\">#&lt;django.core.paginator.Paginator object at 0x7f39989b2bd0&gt; 相关paginator的对象</span></div></pre></td></tr></table></figure></p>\n<p><strong>Django中使用分页</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</div><div class=\"line\"><span class=\"keyword\">from</span> django.core.paginator <span class=\"keyword\">import</span> Paginator, EmptyPage, InvalidPage, PageNotAnInteger</div><div class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> *</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">device_status</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    All_page_info = Device_status.objects.all()</div><div class=\"line\">    DataCount,page,All_page_info = All_in_one(request,All_page_info)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> my_render(<span class=\"string\">\"serverinfo/device_status.html\"</span>,locals(),request)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_render</span><span class=\"params\">(template,data,request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_to_response(template, data, context_instance=RequestContext(request))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getpage_id</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    传递前端page过来的值，如果没有设置为1</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    page = request.GET.get(<span class=\"string\">\"page\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> page:</div><div class=\"line\">        page = request.GET.get(<span class=\"string\">\"page\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        page = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> page</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getpages</span><span class=\"params\">(Data,page)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    处理分页函数</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    paginator = Paginator(list(Data),<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        Data = paginator.page(page)</div><div class=\"line\">    <span class=\"keyword\">except</span> PageNotAnInteger:</div><div class=\"line\">        Data = paginator.page(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> EmptyPage:</div><div class=\"line\">        Data = paginator.page(paginator.num_pages)</div><div class=\"line\">    <span class=\"keyword\">return</span> Data,page</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">All_in_one</span><span class=\"params\">(request,All_page_info)</span>:</span></div><div class=\"line\">    DataCount = len(All_page_info)</div><div class=\"line\">    page = getpage_id(request)</div><div class=\"line\">    All_page_info,page=getpages(All_page_info,page)</div><div class=\"line\">    <span class=\"keyword\">return</span> DataCount,page,All_page_info</div></pre></td></tr></table></figure></p>\n<p><strong>templates中</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">备注：paginator.html  //将以下模板导入需要添加分页功能的页面即可（&#123;% include &apos;paginator.html&apos; %&#125;）</div><div class=\"line\">=========================</div><div class=\"line\">&lt;span class=&quot;step-links&quot;&gt;</div><div class=\"line\">   &#123;% if All_page_info.has_previous %&#125; &lt;!-- 是否有前一页 --&gt;</div><div class=\"line\">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt; &lt;!-- 前一页的页码 --&gt;</div><div class=\"line\">         &lt;/script&gt;</div><div class=\"line\">   &#123;% endif %&#125;</div><div class=\"line\">   &lt;span class=&quot;current&quot;&gt;</div><div class=\"line\">       第 &#123;&#123; All_page_info.number &#125;&#125;页  总 &#123;&#123; All_page_info.paginator.num_pages &#125;&#125; 页  &lt;!-- 总页数 --&gt;</div><div class=\"line\">   &lt;/span&gt;</div><div class=\"line\">   &#123;% if All_page_info.has_next %&#125;</div><div class=\"line\">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt; &lt;!-- 后一页的页码 --&gt;</div><div class=\"line\">   &#123;% endif %&#125;</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">&lt;span&gt;</div><div class=\"line\">     &amp;nbsp;&amp;nbsp;共&#123;&#123;DataCount&#125;&#125;条记录</div><div class=\"line\">&lt;/span&gt;</div></pre></td></tr></table></figure>\n<p><strong>效果展示</strong><br><img src=\"https://ttxsgoto.github.io/img/django/page.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>在Django 项目中使用自带的分页模块，记录如下</p>\n<p><strong>相关说明</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.core.paginator <span class=\"keyword\">import</span> Paginator</div><div class=\"line\"> </div><div class=\"line\">objects = [<span class=\"string\">'abc'</span>,<span class=\"string\">'bcd'</span>,<span class=\"string\">'cde'</span>,<span class=\"string\">'def'</span>,<span class=\"string\">'efg'</span>,<span class=\"string\">'fgh'</span>]</div><div class=\"line\">p = Paginator(objects, <span class=\"number\">2</span>)<span class=\"comment\">#表示传入数据集合，2 表示每页存放的数据个数</span></div><div class=\"line\">p.cout <span class=\"comment\">#6 表示数据总量</span></div><div class=\"line\">p.num_pages<span class=\"comment\">#3 表示总页数</span></div><div class=\"line\">p.per_page<span class=\"comment\">#2 表示每页的数量</span></div><div class=\"line\">p.object_list<span class=\"comment\"># ['abc','bcd','cde','def','efg','fgh']  所有数据列表</span></div><div class=\"line\">p.page_range  <span class=\"comment\">#[1, 2, 3]   表示页数</span></div><div class=\"line\">p1 = p.page(<span class=\"number\">1</span>)<span class=\"comment\">#获取第一页的对象</span></div><div class=\"line\">p1.object_list<span class=\"comment\">#['abc', 'bcd'] 该页上的数据</span></div><div class=\"line\">p1.has_next()<span class=\"comment\">#True,判断该页是否有下一页</span></div><div class=\"line\">p1.has_previous()<span class=\"comment\">#False,判断该页是否有上一页</span></div><div class=\"line\">p1.has_other_pages() <span class=\"comment\">#判断该页是否有上或者下页</span></div><div class=\"line\">p1.start_index()<span class=\"comment\"># 1 p1开始的索引值</span></div><div class=\"line\">p1.end_index()<span class=\"comment\">#2 p1结束的索引值</span></div><div class=\"line\">p1.next_page_number(）<span class=\"comment\"># #返回下一页的页码，如果下一页不存在，抛出InvalidPage异常</span></div><div class=\"line\">p1.previous_page_number()<span class=\"comment\">#返回前一页的页码，如果上一页不存在，抛出InvalidPag异常</span></div><div class=\"line\">p1.paginator<span class=\"comment\">#&lt;django.core.paginator.Paginator object at 0x7f39989b2bd0&gt; 相关paginator的对象</span></div></pre></td></tr></table></figure></p>\n<p><strong>Django中使用分页</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</div><div class=\"line\"><span class=\"keyword\">from</span> django.core.paginator <span class=\"keyword\">import</span> Paginator, EmptyPage, InvalidPage, PageNotAnInteger</div><div class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> *</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">device_status</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    All_page_info = Device_status.objects.all()</div><div class=\"line\">    DataCount,page,All_page_info = All_in_one(request,All_page_info)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> my_render(<span class=\"string\">\"serverinfo/device_status.html\"</span>,locals(),request)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_render</span><span class=\"params\">(template,data,request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> render_to_response(template, data, context_instance=RequestContext(request))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getpage_id</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    传递前端page过来的值，如果没有设置为1</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    page = request.GET.get(<span class=\"string\">\"page\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> page:</div><div class=\"line\">        page = request.GET.get(<span class=\"string\">\"page\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        page = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> page</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getpages</span><span class=\"params\">(Data,page)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    处理分页函数</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    paginator = Paginator(list(Data),<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        Data = paginator.page(page)</div><div class=\"line\">    <span class=\"keyword\">except</span> PageNotAnInteger:</div><div class=\"line\">        Data = paginator.page(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> EmptyPage:</div><div class=\"line\">        Data = paginator.page(paginator.num_pages)</div><div class=\"line\">    <span class=\"keyword\">return</span> Data,page</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">All_in_one</span><span class=\"params\">(request,All_page_info)</span>:</span></div><div class=\"line\">    DataCount = len(All_page_info)</div><div class=\"line\">    page = getpage_id(request)</div><div class=\"line\">    All_page_info,page=getpages(All_page_info,page)</div><div class=\"line\">    <span class=\"keyword\">return</span> DataCount,page,All_page_info</div></pre></td></tr></table></figure></p>\n<p><strong>templates中</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">备注：paginator.html  //将以下模板导入需要添加分页功能的页面即可（&#123;% include &apos;paginator.html&apos; %&#125;）</div><div class=\"line\">=========================</div><div class=\"line\">&lt;span class=&quot;step-links&quot;&gt;</div><div class=\"line\">   &#123;% if All_page_info.has_previous %&#125; &lt;!-- 是否有前一页 --&gt;</div><div class=\"line\">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt; &lt;!-- 前一页的页码 --&gt;</div><div class=\"line\">         &lt;/script&gt;</div><div class=\"line\">   &#123;% endif %&#125;</div><div class=\"line\">   &lt;span class=&quot;current&quot;&gt;</div><div class=\"line\">       第 &#123;&#123; All_page_info.number &#125;&#125;页  总 &#123;&#123; All_page_info.paginator.num_pages &#125;&#125; 页  &lt;!-- 总页数 --&gt;</div><div class=\"line\">   &lt;/span&gt;</div><div class=\"line\">   &#123;% if All_page_info.has_next %&#125;</div><div class=\"line\">       &lt;a  href=&quot;?page=&#123;&#123; All_page_info.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt; &lt;!-- 后一页的页码 --&gt;</div><div class=\"line\">   &#123;% endif %&#125;</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">&lt;span&gt;</div><div class=\"line\">     &amp;nbsp;&amp;nbsp;共&#123;&#123;DataCount&#125;&#125;条记录</div><div class=\"line\">&lt;/span&gt;</div></pre></td></tr></table></figure>\n<p><strong>效果展示</strong><br><img src=\"https://ttxsgoto.github.io/img/django/page.png\" alt=\"\"></p>\n"},{"title":"Django ORM数据查询操作优化","date":"2018-04-13T14:47:47.000Z","_content":"最近几天研究了一下django ORM查询优化，响应时间慢问题，主要原因还是代码规范和方法使用不当，如果正确使用相应方法，大部分的性能问题都是可以解决，记录如下：\n\n#### Django QuerySet懒执行\n只有访问到对应的数据时，才会访问数据库，如果再次读取查询到的数据时，不会触发访问数据库操作，返回的是QuerySet、ValuesQuerySet、ValuesListQuerySet、Model实例\n会执行数据库操作的操作有：\n- Iteration，对Queryset进行迭代操作\n- slicing分片， 如queryset[:5]\n- 序列化Pickling\n- repr()/str()将对象转为字符串\n- len()/list()/bool()/print()操作\n\n```python\n######## 实例一 ########\nfrom django.db import connection\nusers = User.objects.all()\nusers = User.objects.all().select_related('group')\nfor user in users:\n    print(user.name) # 这里只查询一次数据库\n    print(user.group.name) # 这里的group为外键，查询次数依次增加, 可通过select_related()来解决多次查询数据库问题\n    l = connection.queries\n    print(len(l), l)\n \n \n######## 实例二 ########\n# 这时不会访问数据库\nusers = User.objects.filter(age=25)\n \n# 这里需要访问数据，执行数据库查询操作\nlist(users) or if users: pass\n \n# 再次读取数据，不会访问数据库\nuser = users[0]\n```\n#### 使用select_related 提升关联外键/一对一关联查询\nModel中一般会定义外键关联，查询如果编写不当，会多次访问数据库查询，影响效率；通过select_related方法来查询外键(ForeignKey)或一对一(OneToOneField)关系，其实就是sql语句中join操作；在后面使用外键关系查询时将不需要执行数据库查询\n\n使用prefetch_related提升关联多对多或多对一查询\nprefetch_related 执行一个单独的查找，它允许预先读取多对多和多对一的对象数据，这是 select_related 做不到的。另外 perfetch_related 也可以与通用外键和关系一起使用\n```python\n######## 实例一 ########\nDeviceInfo.objects.filter(operator_id='dc8b37483b27402d90a5a28d13ce330c')\n# 对应sql如下：\nSELECT `device_info`.`id`, `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`,  `device_info`.`operator_id` FROM `device_info` WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c\nDeviceInfo.objects.select_related('operator').filter(operator_id='dc8b37483b27402d90a5a28d13ce330c')\n# 对应sql如下：\nSELECT `device_info`.`id`,  `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`, `device_info`.`operator_id`, `user`.`password`, `user`.`last_login`, `user`.`is_superuser`, `user`.`id`, `user`.`created_at`, `user`.`is_deleted`, `user`.`mobile_number`, `user`.`is_active`, `user`.`is_staff`, `user`.`is_driver`, `user`.`depgroup_id` FROM `device_info` INNER JOIN `user` ON (`device_info`.`operator_id` = `user`.`id`) WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c\n \n######## 实例二 ########\nfrom django.db import models\n \nclass City(models.Model):\n    # ...\n    pass\n \nclass Person(models.Model):\n    # ...\n    hometown = models.ForeignKey(City)\n \nclass Book(models.Model):\n    # ...\n    author = models.ForeignKey(Person)\n \nb = Book.objects.select_related('author__hometown').get(id=4)\np = b.author         # Doesn't hit the database.\nc = p.hometown       # Doesn't hit the database.\n \nb = Book.objects.get(id=4) # No select_related() in this example.\np = b.author         # Hits the database.\nc = p.hometown       # Hits the database.\n```\n#### 不要查询不需要的值\n- 通过values和values_list来限制返回值\n- 通过only指定字段和defer排除字段\n- 如果只需要id，可以使用queryset.values_list('id', flat=True)\n\n#### 直接使用外键值\n如果只想获取外键id，可通过obj_id的方式获取，优先于obj.id;obj.id方式会为子表内容保存额外查询\n\n#### 用count()代替len(), exists()代替if queryset\nlen()方法相当于会把整个queryset遍历一次，把所有的数据都取出来对象化，消耗大量的资源\n#### 对缓存的queryset只进行一次遍历，使用iterator()\n```python\n# 如此操作可减少数据载入内存中，同时和values一起使用可大大减少内存的使用\nfor user in User.objects.all().iterator():\n    do_something(user)\n```\n#### 避免多次查询\n筛选表中不同条件的数据时，一般采用写多个查询进行筛选，数据多时严重影响性能\n```python\nusers = [\n'ttxsgoto01',\n'ttxsgoto02',\n'ttxsgoto03',\n]\nfrom models import User\n######## 实例一 ########\n# 这里会进行多次数据库查询操作\nfor user in users:\n    user1 = User.objects.filter(username=user, age=21)\n    user2 = User.objects.filter(username=user, age=22)\n    user3 = User.objects.filter(username=user, age=23)\n    user4 = User.objects.filter(username=user, sex='M')\n    print(user1.count(), user2.count(), user3.count(), user4.count())\n \n######## 实例二 ########\n# 减少数据库查询，一次把数据查询出来\nfor user in users:\n    _user = User.objects.filter(username=user).values_list('age', 'sex')\n    user1 = filter(lambda x:True if x[0]==21 else False, _user)\n    user2 = filter(lambda x:True if x[0]==22 else False, _user)\n    user3 = filter(lambda x:True if x[0]==23 else False, _user)\n    user4 = filter(lambda x:True if x[1]=='M' else False, _user)\n    print(user1.count(), user2.count(), user3.count(), user4.count())\n# 如此操作，一个条件只执行一次数据库查询，不同于实例一中会执行多次数据库查询\n```\n\n#### 创建表索引\n根据业务需求，创建对应的索引字段\n\n#### 对于复杂的数据库查询操作，使用原生SQL实现\n\n#### 性能分析\n##### 方法一: code\n```python\nfrom django.db import connection\ndbsql = connection.queries # 具体sql执行情况和耗时情况\n```\n##### 方法二: shell\n```python\n- pip install django-extensions\n- INSTALLED_APPS = (\n    ...\n    'django_extensions',\n    ...\n )\n- python manage.py shell_plus --print-sql # 查看执行sql和结果\n```\n\n#### 参考文档\n- https://docs.djangoproject.com/en/1.10/topics/db/optimization/\n\n\n\n\n","source":"_posts/django-orm-queryset.md","raw":"---\ntitle: Django ORM数据查询操作优化\ndate: 2018-04-13 22:47:47\ntags:\n  - ORM\n  - Queryset\ncategories:\n  - Django\n---\n最近几天研究了一下django ORM查询优化，响应时间慢问题，主要原因还是代码规范和方法使用不当，如果正确使用相应方法，大部分的性能问题都是可以解决，记录如下：\n\n#### Django QuerySet懒执行\n只有访问到对应的数据时，才会访问数据库，如果再次读取查询到的数据时，不会触发访问数据库操作，返回的是QuerySet、ValuesQuerySet、ValuesListQuerySet、Model实例\n会执行数据库操作的操作有：\n- Iteration，对Queryset进行迭代操作\n- slicing分片， 如queryset[:5]\n- 序列化Pickling\n- repr()/str()将对象转为字符串\n- len()/list()/bool()/print()操作\n\n```python\n######## 实例一 ########\nfrom django.db import connection\nusers = User.objects.all()\nusers = User.objects.all().select_related('group')\nfor user in users:\n    print(user.name) # 这里只查询一次数据库\n    print(user.group.name) # 这里的group为外键，查询次数依次增加, 可通过select_related()来解决多次查询数据库问题\n    l = connection.queries\n    print(len(l), l)\n \n \n######## 实例二 ########\n# 这时不会访问数据库\nusers = User.objects.filter(age=25)\n \n# 这里需要访问数据，执行数据库查询操作\nlist(users) or if users: pass\n \n# 再次读取数据，不会访问数据库\nuser = users[0]\n```\n#### 使用select_related 提升关联外键/一对一关联查询\nModel中一般会定义外键关联，查询如果编写不当，会多次访问数据库查询，影响效率；通过select_related方法来查询外键(ForeignKey)或一对一(OneToOneField)关系，其实就是sql语句中join操作；在后面使用外键关系查询时将不需要执行数据库查询\n\n使用prefetch_related提升关联多对多或多对一查询\nprefetch_related 执行一个单独的查找，它允许预先读取多对多和多对一的对象数据，这是 select_related 做不到的。另外 perfetch_related 也可以与通用外键和关系一起使用\n```python\n######## 实例一 ########\nDeviceInfo.objects.filter(operator_id='dc8b37483b27402d90a5a28d13ce330c')\n# 对应sql如下：\nSELECT `device_info`.`id`, `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`,  `device_info`.`operator_id` FROM `device_info` WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c\nDeviceInfo.objects.select_related('operator').filter(operator_id='dc8b37483b27402d90a5a28d13ce330c')\n# 对应sql如下：\nSELECT `device_info`.`id`,  `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`, `device_info`.`operator_id`, `user`.`password`, `user`.`last_login`, `user`.`is_superuser`, `user`.`id`, `user`.`created_at`, `user`.`is_deleted`, `user`.`mobile_number`, `user`.`is_active`, `user`.`is_staff`, `user`.`is_driver`, `user`.`depgroup_id` FROM `device_info` INNER JOIN `user` ON (`device_info`.`operator_id` = `user`.`id`) WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c\n \n######## 实例二 ########\nfrom django.db import models\n \nclass City(models.Model):\n    # ...\n    pass\n \nclass Person(models.Model):\n    # ...\n    hometown = models.ForeignKey(City)\n \nclass Book(models.Model):\n    # ...\n    author = models.ForeignKey(Person)\n \nb = Book.objects.select_related('author__hometown').get(id=4)\np = b.author         # Doesn't hit the database.\nc = p.hometown       # Doesn't hit the database.\n \nb = Book.objects.get(id=4) # No select_related() in this example.\np = b.author         # Hits the database.\nc = p.hometown       # Hits the database.\n```\n#### 不要查询不需要的值\n- 通过values和values_list来限制返回值\n- 通过only指定字段和defer排除字段\n- 如果只需要id，可以使用queryset.values_list('id', flat=True)\n\n#### 直接使用外键值\n如果只想获取外键id，可通过obj_id的方式获取，优先于obj.id;obj.id方式会为子表内容保存额外查询\n\n#### 用count()代替len(), exists()代替if queryset\nlen()方法相当于会把整个queryset遍历一次，把所有的数据都取出来对象化，消耗大量的资源\n#### 对缓存的queryset只进行一次遍历，使用iterator()\n```python\n# 如此操作可减少数据载入内存中，同时和values一起使用可大大减少内存的使用\nfor user in User.objects.all().iterator():\n    do_something(user)\n```\n#### 避免多次查询\n筛选表中不同条件的数据时，一般采用写多个查询进行筛选，数据多时严重影响性能\n```python\nusers = [\n'ttxsgoto01',\n'ttxsgoto02',\n'ttxsgoto03',\n]\nfrom models import User\n######## 实例一 ########\n# 这里会进行多次数据库查询操作\nfor user in users:\n    user1 = User.objects.filter(username=user, age=21)\n    user2 = User.objects.filter(username=user, age=22)\n    user3 = User.objects.filter(username=user, age=23)\n    user4 = User.objects.filter(username=user, sex='M')\n    print(user1.count(), user2.count(), user3.count(), user4.count())\n \n######## 实例二 ########\n# 减少数据库查询，一次把数据查询出来\nfor user in users:\n    _user = User.objects.filter(username=user).values_list('age', 'sex')\n    user1 = filter(lambda x:True if x[0]==21 else False, _user)\n    user2 = filter(lambda x:True if x[0]==22 else False, _user)\n    user3 = filter(lambda x:True if x[0]==23 else False, _user)\n    user4 = filter(lambda x:True if x[1]=='M' else False, _user)\n    print(user1.count(), user2.count(), user3.count(), user4.count())\n# 如此操作，一个条件只执行一次数据库查询，不同于实例一中会执行多次数据库查询\n```\n\n#### 创建表索引\n根据业务需求，创建对应的索引字段\n\n#### 对于复杂的数据库查询操作，使用原生SQL实现\n\n#### 性能分析\n##### 方法一: code\n```python\nfrom django.db import connection\ndbsql = connection.queries # 具体sql执行情况和耗时情况\n```\n##### 方法二: shell\n```python\n- pip install django-extensions\n- INSTALLED_APPS = (\n    ...\n    'django_extensions',\n    ...\n )\n- python manage.py shell_plus --print-sql # 查看执行sql和结果\n```\n\n#### 参考文档\n- https://docs.djangoproject.com/en/1.10/topics/db/optimization/\n\n\n\n\n","slug":"django-orm-queryset","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5w50029ct8uvly3ksbu","content":"<p>最近几天研究了一下django ORM查询优化，响应时间慢问题，主要原因还是代码规范和方法使用不当，如果正确使用相应方法，大部分的性能问题都是可以解决，记录如下：</p>\n<h4 id=\"Django-QuerySet懒执行\"><a href=\"#Django-QuerySet懒执行\" class=\"headerlink\" title=\"Django QuerySet懒执行\"></a>Django QuerySet懒执行</h4><p>只有访问到对应的数据时，才会访问数据库，如果再次读取查询到的数据时，不会触发访问数据库操作，返回的是QuerySet、ValuesQuerySet、ValuesListQuerySet、Model实例<br>会执行数据库操作的操作有：</p>\n<ul>\n<li>Iteration，对Queryset进行迭代操作</li>\n<li>slicing分片， 如queryset[:5]</li>\n<li>序列化Pickling</li>\n<li>repr()/str()将对象转为字符串</li>\n<li>len()/list()/bool()/print()操作</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">######## 实例一 ########</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> connection</div><div class=\"line\">users = User.objects.all()</div><div class=\"line\">users = User.objects.all().select_related(<span class=\"string\">'group'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</div><div class=\"line\">    print(user.name) <span class=\"comment\"># 这里只查询一次数据库</span></div><div class=\"line\">    print(user.group.name) <span class=\"comment\"># 这里的group为外键，查询次数依次增加, 可通过select_related()来解决多次查询数据库问题</span></div><div class=\"line\">    l = connection.queries</div><div class=\"line\">    print(len(l), l)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">######## 实例二 ########</span></div><div class=\"line\"><span class=\"comment\"># 这时不会访问数据库</span></div><div class=\"line\">users = User.objects.filter(age=<span class=\"number\">25</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 这里需要访问数据，执行数据库查询操作</span></div><div class=\"line\">list(users) <span class=\"keyword\">or</span> <span class=\"keyword\">if</span> users: <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 再次读取数据，不会访问数据库</span></div><div class=\"line\">user = users[<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<h4 id=\"使用select-related-提升关联外键-一对一关联查询\"><a href=\"#使用select-related-提升关联外键-一对一关联查询\" class=\"headerlink\" title=\"使用select_related 提升关联外键/一对一关联查询\"></a>使用select_related 提升关联外键/一对一关联查询</h4><p>Model中一般会定义外键关联，查询如果编写不当，会多次访问数据库查询，影响效率；通过select_related方法来查询外键(ForeignKey)或一对一(OneToOneField)关系，其实就是sql语句中join操作；在后面使用外键关系查询时将不需要执行数据库查询</p>\n<p>使用prefetch_related提升关联多对多或多对一查询<br>prefetch_related 执行一个单独的查找，它允许预先读取多对多和多对一的对象数据，这是 select_related 做不到的。另外 perfetch_related 也可以与通用外键和关系一起使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">######## 实例一 ########</span></div><div class=\"line\">DeviceInfo.objects.filter(operator_id=<span class=\"string\">'dc8b37483b27402d90a5a28d13ce330c'</span>)</div><div class=\"line\"><span class=\"comment\"># 对应sql如下：</span></div><div class=\"line\">SELECT `device_info`.`id`, `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`,  `device_info`.`operator_id` FROM `device_info` WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c</div><div class=\"line\">DeviceInfo.objects.select_related(<span class=\"string\">'operator'</span>).filter(operator_id=<span class=\"string\">'dc8b37483b27402d90a5a28d13ce330c'</span>)</div><div class=\"line\"><span class=\"comment\"># 对应sql如下：</span></div><div class=\"line\">SELECT `device_info`.`id`,  `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`, `device_info`.`operator_id`, `user`.`password`, `user`.`last_login`, `user`.`is_superuser`, `user`.`id`, `user`.`created_at`, `user`.`is_deleted`, `user`.`mobile_number`, `user`.`is_active`, `user`.`is_staff`, `user`.`is_driver`, `user`.`depgroup_id` FROM `device_info` INNER JOIN `user` ON (`device_info`.`operator_id` = `user`.`id`) WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">######## 实例二 ########</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">City</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    hometown = models.ForeignKey(City)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    author = models.ForeignKey(Person)</div><div class=\"line\"> </div><div class=\"line\">b = Book.objects.select_related(<span class=\"string\">'author__hometown'</span>).get(id=<span class=\"number\">4</span>)</div><div class=\"line\">p = b.author         <span class=\"comment\"># Doesn't hit the database.</span></div><div class=\"line\">c = p.hometown       <span class=\"comment\"># Doesn't hit the database.</span></div><div class=\"line\"> </div><div class=\"line\">b = Book.objects.get(id=<span class=\"number\">4</span>) <span class=\"comment\"># No select_related() in this example.</span></div><div class=\"line\">p = b.author         <span class=\"comment\"># Hits the database.</span></div><div class=\"line\">c = p.hometown       <span class=\"comment\"># Hits the database.</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"不要查询不需要的值\"><a href=\"#不要查询不需要的值\" class=\"headerlink\" title=\"不要查询不需要的值\"></a>不要查询不需要的值</h4><ul>\n<li>通过values和values_list来限制返回值</li>\n<li>通过only指定字段和defer排除字段</li>\n<li>如果只需要id，可以使用queryset.values_list(‘id’, flat=True)</li>\n</ul>\n<h4 id=\"直接使用外键值\"><a href=\"#直接使用外键值\" class=\"headerlink\" title=\"直接使用外键值\"></a>直接使用外键值</h4><p>如果只想获取外键id，可通过obj_id的方式获取，优先于obj.id;obj.id方式会为子表内容保存额外查询</p>\n<h4 id=\"用count-代替len-exists-代替if-queryset\"><a href=\"#用count-代替len-exists-代替if-queryset\" class=\"headerlink\" title=\"用count()代替len(), exists()代替if queryset\"></a>用count()代替len(), exists()代替if queryset</h4><p>len()方法相当于会把整个queryset遍历一次，把所有的数据都取出来对象化，消耗大量的资源</p>\n<h4 id=\"对缓存的queryset只进行一次遍历，使用iterator\"><a href=\"#对缓存的queryset只进行一次遍历，使用iterator\" class=\"headerlink\" title=\"对缓存的queryset只进行一次遍历，使用iterator()\"></a>对缓存的queryset只进行一次遍历，使用iterator()</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 如此操作可减少数据载入内存中，同时和values一起使用可大大减少内存的使用</span></div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> User.objects.all().iterator():</div><div class=\"line\">    do_something(user)</div></pre></td></tr></table></figure>\n<h4 id=\"避免多次查询\"><a href=\"#避免多次查询\" class=\"headerlink\" title=\"避免多次查询\"></a>避免多次查询</h4><p>筛选表中不同条件的数据时，一般采用写多个查询进行筛选，数据多时严重影响性能<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">users = [</div><div class=\"line\"><span class=\"string\">'ttxsgoto01'</span>,</div><div class=\"line\"><span class=\"string\">'ttxsgoto02'</span>,</div><div class=\"line\"><span class=\"string\">'ttxsgoto03'</span>,</div><div class=\"line\">]</div><div class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> User</div><div class=\"line\"><span class=\"comment\">######## 实例一 ########</span></div><div class=\"line\"><span class=\"comment\"># 这里会进行多次数据库查询操作</span></div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</div><div class=\"line\">    user1 = User.objects.filter(username=user, age=<span class=\"number\">21</span>)</div><div class=\"line\">    user2 = User.objects.filter(username=user, age=<span class=\"number\">22</span>)</div><div class=\"line\">    user3 = User.objects.filter(username=user, age=<span class=\"number\">23</span>)</div><div class=\"line\">    user4 = User.objects.filter(username=user, sex=<span class=\"string\">'M'</span>)</div><div class=\"line\">    print(user1.count(), user2.count(), user3.count(), user4.count())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">######## 实例二 ########</span></div><div class=\"line\"><span class=\"comment\"># 减少数据库查询，一次把数据查询出来</span></div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</div><div class=\"line\">    _user = User.objects.filter(username=user).values_list(<span class=\"string\">'age'</span>, <span class=\"string\">'sex'</span>)</div><div class=\"line\">    user1 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">0</span>]==<span class=\"number\">21</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    user2 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">0</span>]==<span class=\"number\">22</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    user3 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">0</span>]==<span class=\"number\">23</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    user4 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">1</span>]==<span class=\"string\">'M'</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    print(user1.count(), user2.count(), user3.count(), user4.count())</div><div class=\"line\"><span class=\"comment\"># 如此操作，一个条件只执行一次数据库查询，不同于实例一中会执行多次数据库查询</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"创建表索引\"><a href=\"#创建表索引\" class=\"headerlink\" title=\"创建表索引\"></a>创建表索引</h4><p>根据业务需求，创建对应的索引字段</p>\n<h4 id=\"对于复杂的数据库查询操作，使用原生SQL实现\"><a href=\"#对于复杂的数据库查询操作，使用原生SQL实现\" class=\"headerlink\" title=\"对于复杂的数据库查询操作，使用原生SQL实现\"></a>对于复杂的数据库查询操作，使用原生SQL实现</h4><h4 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h4><h5 id=\"方法一-code\"><a href=\"#方法一-code\" class=\"headerlink\" title=\"方法一: code\"></a>方法一: code</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> connection</div><div class=\"line\">dbsql = connection.queries <span class=\"comment\"># 具体sql执行情况和耗时情况</span></div></pre></td></tr></table></figure>\n<h5 id=\"方法二-shell\"><a href=\"#方法二-shell\" class=\"headerlink\" title=\"方法二: shell\"></a>方法二: shell</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- pip install django-extensions</div><div class=\"line\">- INSTALLED_APPS = (</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"string\">'django_extensions'</span>,</div><div class=\"line\">    ...</div><div class=\"line\"> )</div><div class=\"line\">- python manage.py shell_plus --<span class=\"keyword\">print</span>-sql <span class=\"comment\"># 查看执行sql和结果</span></div></pre></td></tr></table></figure>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://docs.djangoproject.com/en/1.10/topics/db/optimization/\" target=\"_blank\" rel=\"external\">https://docs.djangoproject.com/en/1.10/topics/db/optimization/</a></li>\n</ul>\n","excerpt":"","more":"<p>最近几天研究了一下django ORM查询优化，响应时间慢问题，主要原因还是代码规范和方法使用不当，如果正确使用相应方法，大部分的性能问题都是可以解决，记录如下：</p>\n<h4 id=\"Django-QuerySet懒执行\"><a href=\"#Django-QuerySet懒执行\" class=\"headerlink\" title=\"Django QuerySet懒执行\"></a>Django QuerySet懒执行</h4><p>只有访问到对应的数据时，才会访问数据库，如果再次读取查询到的数据时，不会触发访问数据库操作，返回的是QuerySet、ValuesQuerySet、ValuesListQuerySet、Model实例<br>会执行数据库操作的操作有：</p>\n<ul>\n<li>Iteration，对Queryset进行迭代操作</li>\n<li>slicing分片， 如queryset[:5]</li>\n<li>序列化Pickling</li>\n<li>repr()/str()将对象转为字符串</li>\n<li>len()/list()/bool()/print()操作</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">######## 实例一 ########</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> connection</div><div class=\"line\">users = User.objects.all()</div><div class=\"line\">users = User.objects.all().select_related(<span class=\"string\">'group'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</div><div class=\"line\">    print(user.name) <span class=\"comment\"># 这里只查询一次数据库</span></div><div class=\"line\">    print(user.group.name) <span class=\"comment\"># 这里的group为外键，查询次数依次增加, 可通过select_related()来解决多次查询数据库问题</span></div><div class=\"line\">    l = connection.queries</div><div class=\"line\">    print(len(l), l)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">######## 实例二 ########</span></div><div class=\"line\"><span class=\"comment\"># 这时不会访问数据库</span></div><div class=\"line\">users = User.objects.filter(age=<span class=\"number\">25</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 这里需要访问数据，执行数据库查询操作</span></div><div class=\"line\">list(users) <span class=\"keyword\">or</span> <span class=\"keyword\">if</span> users: <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 再次读取数据，不会访问数据库</span></div><div class=\"line\">user = users[<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<h4 id=\"使用select-related-提升关联外键-一对一关联查询\"><a href=\"#使用select-related-提升关联外键-一对一关联查询\" class=\"headerlink\" title=\"使用select_related 提升关联外键/一对一关联查询\"></a>使用select_related 提升关联外键/一对一关联查询</h4><p>Model中一般会定义外键关联，查询如果编写不当，会多次访问数据库查询，影响效率；通过select_related方法来查询外键(ForeignKey)或一对一(OneToOneField)关系，其实就是sql语句中join操作；在后面使用外键关系查询时将不需要执行数据库查询</p>\n<p>使用prefetch_related提升关联多对多或多对一查询<br>prefetch_related 执行一个单独的查找，它允许预先读取多对多和多对一的对象数据，这是 select_related 做不到的。另外 perfetch_related 也可以与通用外键和关系一起使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">######## 实例一 ########</span></div><div class=\"line\">DeviceInfo.objects.filter(operator_id=<span class=\"string\">'dc8b37483b27402d90a5a28d13ce330c'</span>)</div><div class=\"line\"><span class=\"comment\"># 对应sql如下：</span></div><div class=\"line\">SELECT `device_info`.`id`, `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`,  `device_info`.`operator_id` FROM `device_info` WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c</div><div class=\"line\">DeviceInfo.objects.select_related(<span class=\"string\">'operator'</span>).filter(operator_id=<span class=\"string\">'dc8b37483b27402d90a5a28d13ce330c'</span>)</div><div class=\"line\"><span class=\"comment\"># 对应sql如下：</span></div><div class=\"line\">SELECT `device_info`.`id`,  `device_info`.`number`, `device_info`.`type`, `device_info`.`plate_no_id`, `device_info`.`status`, `device_info`.`offline_date`, `device_info`.`operator_id`, `user`.`password`, `user`.`last_login`, `user`.`is_superuser`, `user`.`id`, `user`.`created_at`, `user`.`is_deleted`, `user`.`mobile_number`, `user`.`is_active`, `user`.`is_staff`, `user`.`is_driver`, `user`.`depgroup_id` FROM `device_info` INNER JOIN `user` ON (`device_info`.`operator_id` = `user`.`id`) WHERE `device_info`.`operator_id` = dc8b37483b27402d90a5a28d13ce330c</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">######## 实例二 ########</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">City</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    hometown = models.ForeignKey(City)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    author = models.ForeignKey(Person)</div><div class=\"line\"> </div><div class=\"line\">b = Book.objects.select_related(<span class=\"string\">'author__hometown'</span>).get(id=<span class=\"number\">4</span>)</div><div class=\"line\">p = b.author         <span class=\"comment\"># Doesn't hit the database.</span></div><div class=\"line\">c = p.hometown       <span class=\"comment\"># Doesn't hit the database.</span></div><div class=\"line\"> </div><div class=\"line\">b = Book.objects.get(id=<span class=\"number\">4</span>) <span class=\"comment\"># No select_related() in this example.</span></div><div class=\"line\">p = b.author         <span class=\"comment\"># Hits the database.</span></div><div class=\"line\">c = p.hometown       <span class=\"comment\"># Hits the database.</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"不要查询不需要的值\"><a href=\"#不要查询不需要的值\" class=\"headerlink\" title=\"不要查询不需要的值\"></a>不要查询不需要的值</h4><ul>\n<li>通过values和values_list来限制返回值</li>\n<li>通过only指定字段和defer排除字段</li>\n<li>如果只需要id，可以使用queryset.values_list(‘id’, flat=True)</li>\n</ul>\n<h4 id=\"直接使用外键值\"><a href=\"#直接使用外键值\" class=\"headerlink\" title=\"直接使用外键值\"></a>直接使用外键值</h4><p>如果只想获取外键id，可通过obj_id的方式获取，优先于obj.id;obj.id方式会为子表内容保存额外查询</p>\n<h4 id=\"用count-代替len-exists-代替if-queryset\"><a href=\"#用count-代替len-exists-代替if-queryset\" class=\"headerlink\" title=\"用count()代替len(), exists()代替if queryset\"></a>用count()代替len(), exists()代替if queryset</h4><p>len()方法相当于会把整个queryset遍历一次，把所有的数据都取出来对象化，消耗大量的资源</p>\n<h4 id=\"对缓存的queryset只进行一次遍历，使用iterator\"><a href=\"#对缓存的queryset只进行一次遍历，使用iterator\" class=\"headerlink\" title=\"对缓存的queryset只进行一次遍历，使用iterator()\"></a>对缓存的queryset只进行一次遍历，使用iterator()</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 如此操作可减少数据载入内存中，同时和values一起使用可大大减少内存的使用</span></div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> User.objects.all().iterator():</div><div class=\"line\">    do_something(user)</div></pre></td></tr></table></figure>\n<h4 id=\"避免多次查询\"><a href=\"#避免多次查询\" class=\"headerlink\" title=\"避免多次查询\"></a>避免多次查询</h4><p>筛选表中不同条件的数据时，一般采用写多个查询进行筛选，数据多时严重影响性能<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">users = [</div><div class=\"line\"><span class=\"string\">'ttxsgoto01'</span>,</div><div class=\"line\"><span class=\"string\">'ttxsgoto02'</span>,</div><div class=\"line\"><span class=\"string\">'ttxsgoto03'</span>,</div><div class=\"line\">]</div><div class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> User</div><div class=\"line\"><span class=\"comment\">######## 实例一 ########</span></div><div class=\"line\"><span class=\"comment\"># 这里会进行多次数据库查询操作</span></div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</div><div class=\"line\">    user1 = User.objects.filter(username=user, age=<span class=\"number\">21</span>)</div><div class=\"line\">    user2 = User.objects.filter(username=user, age=<span class=\"number\">22</span>)</div><div class=\"line\">    user3 = User.objects.filter(username=user, age=<span class=\"number\">23</span>)</div><div class=\"line\">    user4 = User.objects.filter(username=user, sex=<span class=\"string\">'M'</span>)</div><div class=\"line\">    print(user1.count(), user2.count(), user3.count(), user4.count())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">######## 实例二 ########</span></div><div class=\"line\"><span class=\"comment\"># 减少数据库查询，一次把数据查询出来</span></div><div class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</div><div class=\"line\">    _user = User.objects.filter(username=user).values_list(<span class=\"string\">'age'</span>, <span class=\"string\">'sex'</span>)</div><div class=\"line\">    user1 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">0</span>]==<span class=\"number\">21</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    user2 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">0</span>]==<span class=\"number\">22</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    user3 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">0</span>]==<span class=\"number\">23</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    user4 = filter(<span class=\"keyword\">lambda</span> x:<span class=\"keyword\">True</span> <span class=\"keyword\">if</span> x[<span class=\"number\">1</span>]==<span class=\"string\">'M'</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>, _user)</div><div class=\"line\">    print(user1.count(), user2.count(), user3.count(), user4.count())</div><div class=\"line\"><span class=\"comment\"># 如此操作，一个条件只执行一次数据库查询，不同于实例一中会执行多次数据库查询</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"创建表索引\"><a href=\"#创建表索引\" class=\"headerlink\" title=\"创建表索引\"></a>创建表索引</h4><p>根据业务需求，创建对应的索引字段</p>\n<h4 id=\"对于复杂的数据库查询操作，使用原生SQL实现\"><a href=\"#对于复杂的数据库查询操作，使用原生SQL实现\" class=\"headerlink\" title=\"对于复杂的数据库查询操作，使用原生SQL实现\"></a>对于复杂的数据库查询操作，使用原生SQL实现</h4><h4 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h4><h5 id=\"方法一-code\"><a href=\"#方法一-code\" class=\"headerlink\" title=\"方法一: code\"></a>方法一: code</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> connection</div><div class=\"line\">dbsql = connection.queries <span class=\"comment\"># 具体sql执行情况和耗时情况</span></div></pre></td></tr></table></figure>\n<h5 id=\"方法二-shell\"><a href=\"#方法二-shell\" class=\"headerlink\" title=\"方法二: shell\"></a>方法二: shell</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- pip install django-extensions</div><div class=\"line\">- INSTALLED_APPS = (</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"string\">'django_extensions'</span>,</div><div class=\"line\">    ...</div><div class=\"line\"> )</div><div class=\"line\">- python manage.py shell_plus --<span class=\"keyword\">print</span>-sql <span class=\"comment\"># 查看执行sql和结果</span></div></pre></td></tr></table></figure>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://docs.djangoproject.com/en/1.10/topics/db/optimization/\">https://docs.djangoproject.com/en/1.10/topics/db/optimization/</a></li>\n</ul>\n"},{"title":"Django Models","date":"2017-04-05T12:07:24.000Z","_content":"#### 字段\n```\n1、models.AutoField 自增列 = int(11)\n　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。\n2、models.CharField　　字符串字段\n　　必须 max_length 参数\n3、models.BooleanField　　布尔类型=tinyint(1)\n　　不能为空，Blank=True\n4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar\n　　继承CharField，所以必须 max_lenght 参数\n5、models.DateField　　日期类型 date\n　　对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。\n6、models.DateTimeField　　日期类型 datetime\n　　同DateField的参数\n7、models.Decimal　　十进制小数类型 = decimal\n　　必须指定整数位max_digits和小数位decimal_places\n8、models.EmailField　　字符串类型（正则表达式邮箱） =varchar\n　　对字符串进行正则表达式\n9、models.FloatField　　浮点类型 = double\n10、models.IntegerField　　整形\n11、models.BigIntegerField　　长整形\n　　integer_field_ranges = {\n　　　　'SmallIntegerField': (-32768, 32767),\n　　　　'IntegerField': (-2147483648, 2147483647),\n　　　　'BigIntegerField': (-9223372036854775808, 9223372036854775807),\n　　　　'PositiveSmallIntegerField': (0, 32767),\n　　　　'PositiveIntegerField': (0, 2147483647),\n　　}\n12、models.IPAddressField　　字符串类型（ip4正则表达式）\n13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）\n　　参数protocol可以是：both、ipv4、ipv6\n　　验证时，会根据设置报错\n14、models.NullBooleanField　　允许为空的布尔类型\n15、models.PositiveIntegerFiel　　正Integer\n16、models.PositiveSmallIntegerField　　正smallInteger\n17、models.SlugField　　减号、下划线、字母、数字\n18、models.SmallIntegerField　　数字\n　　数据库中的字段有：tinyint、smallint、int、bigint\n19、models.TextField　　字符串=longtext\n20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]\n21、models.URLField　　字符串，地址正则表达式\n22、models.BinaryField　　二进制<br>23、models.ImageField   图片<br>24、models.FilePathField 文件\n \n更多字段：\n1、null=True 数据库中字段是否可以为空,默认为False\n2、blank=True 表单验证允许该字段为空，如果为blank=False，表示该字段必填\n　　django的 Admin 中添加数据时是否可允许空值,True允许为空，False时，表示该字段为必填\n3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列\n4、auto_now 和 auto_now_add\n　　auto_now   自动创建---无论添加或修改，都是当前操作的时间\n　　auto_now_add  自动创建---永远是创建时的时间\n5、choices\nGENDER_CHOICE = (\n        (u'M', u'Male'),\n        (u'F', u'Female'),\n    )\n  如：gender = models.CharField(max_length=2,choices = GENDER_CHOICE)\n6、max_length\n7、default　　设置默认值\n8、verbose_name　　Admin中字段的显示名称，类似于设置别名\n9、name|db_column　　数据库中的字段名称\n10、unique=True　　不允许重复，整表唯一\n11、db_index = True　　数据库索引\n12、editable=True　　在Admin里是否可编辑\n13、error_messages=None　　错误提示\n14、auto_created=False　　自动创建\n15、help_text　　在Admin中提示帮助信息，即使字段不在表单中使用，它对生成文档也很用\n16、validators=[]\n17、upload-to\n18、db_table='xxx' 重新设置表名称\n19、related_name='xxxx'  是将外键中的 \"topping_set\" (取自 类 的名字), 设置为自定义的对象集描述符，一般用于当一个对象要被另一个对象关联不止一次时使用，这个参数才真正有用，如下：\n    models.ForeignKey(Category, related_name=\"primary_storys\")\n    models.ForeignKey(Category, related_name=\"secondary_storys\")\n20、related_query_name='xxxx'    用于目标模型的反向过滤\n \n元选项（非必须）\nclass Meta:\n        verbose_name = u'企业/组织'          #别名\n        verbose_name_plural = u'企业/组织'   #复数别名\n        db_table = 'organs_organ'          #数据库表名\n        ordering = ('codename', )          #排序\n字段说明链接：\nhttp://python.usyiyi.cn/translate/django_182/ref/models/fields.html#common-model-field-options\n```\n\n#### 数据库表关系\n- 一对多，models.ForeignKey(A)\n\t当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）\n- 一对一，models.OneToOneField(B)\n\t在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失）\n- 多对多，authors = models.ManyToManyField(C)\n\t在某表中创建一行数据是，有一个可以多选的下拉框\n\n#### 模型的属性\nobjects 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问；也可以自定义方法；\n```python\n# models.py\nclass User(models.Model):\n    username = models.CharField(u'用户名', max_length=255)\n    email = models.EmailField(u'Email')\n    is_active = models.BooleanField(u'是否激活', default=True)\n \n    objects = UserManager()\n \n# managers.py\nclass UserManager(Manager):\n \n    def __init__(self):\n        super(BaseManager, self).__init__()\n \n    def create_staff(self, **kwargs):\n        from .models import Staff\n        staff = Staff(**kwargs)\n        staff.save()\n        return staff\n# 调用\nUser.objects.create_staff(**kwargs)\n```\n\n#### 模型的方法\n可以在模型上定义自定义的方法来给你的对象添加自定义的“底层”功能。Manager 方法用于“表范围”的事务，模型的方法应该着眼于特定的模型实例。\n\n管理器方法可以通过self.model 来得到它所属的模型类\n```python\n# models.py\nclass User(models.Model):\n    username = models.CharField(u'用户名', max_length=255)\n    email = models.EmailField(u'Email')\n    is_active = models.BooleanField(u'是否激活', default=True)\n \n    def is_true(self):\n        return True if self.is_active else False\n \n# views.py\t仅仅为了说明，下面例子没有任何意义\nuser = User.objects.get(id=id)\nif user.is_true():\n    return 'right'\n    \n```\n\n#### get()/filter()区别\n- models.objects.get() 获取到的是一个对象，如果没有抛出DoesNotExist异常；\n- get()得到的对象，更新需要obj.name=name, obj.save()\n- models.objects.filter()数据过滤，得到是一个查询集-对象列表，如果没有返回[]\n- filter()得到的对象，更新时直接models.objects.filter().update()\n\n#### model.object.create()/model.save()区别\n```python\nAccount.objects.create(**kwargs) #调用save()方法，保存到数据库，返回实例object\nAccount(**kwargs)    \t\t #为类对象，没有调用save()方法，没有保存到数据库，直到调用save()方法将数据保存\n```\n#### 模型继承\n##### 抽象基类\n只想使用父类来持有一些信息，不想在每个子模型中都定义一次，这个类永远不会单独使用\n编写完基类之后，在 Meta类中设置 abstract=True ，该类就不能创建任何数据表，如果抽象化基础类和它的子类有相同的项，那么将会出现error（并且Django将返回一个exception），例子如下：\n```python\nclass BaseModel(models.Model):\n    created_time = models.DateTimeField(u'创建时间', auto_now_add=True)\n \n    class Meta:\n        abstract = True\n        ordering = ['-created_time']\n \nclass Department(BaseModel):\n    name = models.CharField(u'部门名称', max_length=100, default='')\n    contact = models.CharField(u'联系电话', max_length=20, null=True, blank=True, default='')\n    desc = models.TextField(u'描述', null=True, blank=True, default='')\n \n    class Meta:\n        verbose_name = u'部门'\n        verbose_name_plural = u'部门'\n        db_table = 'department'\n \n    def __unicode__(self):\n        return u'%s' % self.name\n```\n在 ForeignKey或 ManyToManyField字段上使用 related_name属性，你必须总是为该字段指定一个唯一的反向名称\n\n##### 多表继承\n继承一个已经存在的模型且想让每个模型具有它自己的数据库表\n```python\nfrom django.db import models\n \nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n \nclass Restaurant(Place):\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n```\n##### 代理继承\n只是想改变模块Python 级别的行为，而不用修改模型的字段,更改默认的manager，或者添加一个新的方法；为原始模型创建一个代理，你可以创建，删除，更新代理 model 的实例，而且所有的数据都可以像使用原始 model 一样被保存\n不同之处在于：你可以在代理 model 中改变默认的排序设置和默认的 manager ，更不会对原始 model 产生影响\n```python\nfrom django.db import models\n \nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n \nclass MyPerson(Person):\n    class Meta:\n        proxy = True\n \n    def do_something(self):\n        # ...\n        pass\n \nclass OrderedPerson(Person):\n    class Meta:\n        ordering = [\"last_name\"]\n        proxy = True\n \n```\n#### 多对多表结构中添加字段\n\n```python\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(Person, through='Membership')\n\n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Membership(models.Model):\n    person = models.ForeignKey(Person)\n    group = models.ForeignKey(Group)\n    date_joined = models.DateField()\n    invite_reason = models.CharField(max_length=64)\n```\n```python\n>>> ringo = Person.objects.create(name=\"Ringo Starr\")\n>>> paul = Person.objects.create(name=\"Paul McCartney\")\n>>> beatles = Group.objects.create(name=\"The Beatles\")\n>>> m1 = Membership(person=ringo, group=beatles,\n...     date_joined=date(1962, 8, 16),\n...     invite_reason=\"Needed a new drummer.\")\n>>> m1.save()\n>>> beatles.members.all()\n[<Person: Ringo Starr>]\n>>> ringo.group_set.all()\n[<Group: The Beatles>]\n>>> m2 = Membership.objects.create(person=paul, group=beatles,\n...     date_joined=date(1960, 8, 1),\n...     invite_reason=\"Wanted to form a band.\")\n>>> beatles.members.all()\n[<Person: Ringo Starr>, <Person: Paul McCartney>]\n```\n#### 关联对象查询\n```python\nfrom django.db import models\n \nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    tagline = models.TextField()\n \n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Author(models.Model):\n    name = models.CharField(max_length=50)\n    email = models.EmailField()\n \n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog)\n    headline = models.CharField(max_length=255)\n    body_text = models.TextField()\n    pub_date = models.DateField()\n    mod_date = models.DateField()\n    authors = models.ManyToManyField(Author)\n    n_comments = models.IntegerField()\n    n_pingbacks = models.IntegerField()\n    rating = models.IntegerField()\n \n    def __str__(self):              # __unicode__ on Python 2\n        return self.headline\n```\n##### 一对多关系\n\n正向查询\n```python\n>>> e = Entry.objects.get(id=2)\n>>> e.blog # Returns the related Blog object.\n```\n反向查询\n```python\n# 管理器的名字为entry_set,其中entry为源模型的小写名称，当然这个名称也可以自定义，通过在ForeignKey 定义时设置related_name 参数来覆盖foo_set 的名称。例如，如果Entry 模型改成blog = ForeignKey(Blog, related_name='entries')，相对于的管理器也应该为entries\n>>> b = Blog.objects.get(id=1)\n>>> b.entry_set.all() # Returns all Entry objects related to Blog.\n\n# b.entry_set is a Manager that returns QuerySets.\n>>> b.entry_set.filter(headline__contains='Lennon')\n>>> b.entry_set.count()\n```\n##### 多对多关系\n\n多对多关系的两端都会自动获得访问另一端的API。这些API 的工作方式与一对多关系一样\n```python\ne = Entry.objects.get(id=3)\ne.authors.all() # Returns all Author objects for this Entry.\ne.authors.count()\ne.authors.filter(name__contains='John')\n \na = Author.objects.get(id=5)\na.entry_set.all() # Returns all Entry objects for this Author.\n```\n##### 一对一关系\n\n正向查询\n```python\nclass EntryDetail(models.Model):\n    entry = models.OneToOneField(Entry)\n    details = models.TextField()\n \ned = EntryDetail.objects.get(id=2)\ned.entry # Returns the related Entry object.\n```\n反向查询\n```python\n#一对一关系中的关联模型同样具有一个管理器对象，但是该管理器表示一个单一的对象而不是对象的集合；如果没有对象赋值给这个关联关系，Django 将引发一个DoesNotExist 异常；\ne = Entry.objects.get(id=2)\ne.entrydetail # returns the related EntryDetail object\n```\n#### select_for_update()\n```\n用于事务，返回一个for update 锁\nReturns a new QuerySet instance that will select objects with a FOR UPDATE lock.\n因QuerySet的延迟查询特性, copy一份用于update, 以便于不影响初始查询的candidates集\n```\n#### 批量创建\n使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数\n```python\nobjList = [a, b, c,] #none are saved\nobjList = model(record=record, receiver=receiver) # 上述两种格式都是批量创建对象的数据格式\nmodel.objects.bulk_create(objList)\n```\n\n#### 执行原始sql\n在模型查询API不够用的情况下，你可以使用原始的SQL语句\n```python\nPerson.objects.raw('SELECT id, first_name, last_name, birth_date FROM myapp_person')\n```\n\n\n\n\n\n\n","source":"_posts/django-models-basic.md","raw":"---\ntitle: Django Models\ndate: 2017-04-05 20:07:24\ntags:\n  - Models\ncategories:\n  - Django\n---\n#### 字段\n```\n1、models.AutoField 自增列 = int(11)\n　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。\n2、models.CharField　　字符串字段\n　　必须 max_length 参数\n3、models.BooleanField　　布尔类型=tinyint(1)\n　　不能为空，Blank=True\n4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar\n　　继承CharField，所以必须 max_lenght 参数\n5、models.DateField　　日期类型 date\n　　对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。\n6、models.DateTimeField　　日期类型 datetime\n　　同DateField的参数\n7、models.Decimal　　十进制小数类型 = decimal\n　　必须指定整数位max_digits和小数位decimal_places\n8、models.EmailField　　字符串类型（正则表达式邮箱） =varchar\n　　对字符串进行正则表达式\n9、models.FloatField　　浮点类型 = double\n10、models.IntegerField　　整形\n11、models.BigIntegerField　　长整形\n　　integer_field_ranges = {\n　　　　'SmallIntegerField': (-32768, 32767),\n　　　　'IntegerField': (-2147483648, 2147483647),\n　　　　'BigIntegerField': (-9223372036854775808, 9223372036854775807),\n　　　　'PositiveSmallIntegerField': (0, 32767),\n　　　　'PositiveIntegerField': (0, 2147483647),\n　　}\n12、models.IPAddressField　　字符串类型（ip4正则表达式）\n13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）\n　　参数protocol可以是：both、ipv4、ipv6\n　　验证时，会根据设置报错\n14、models.NullBooleanField　　允许为空的布尔类型\n15、models.PositiveIntegerFiel　　正Integer\n16、models.PositiveSmallIntegerField　　正smallInteger\n17、models.SlugField　　减号、下划线、字母、数字\n18、models.SmallIntegerField　　数字\n　　数据库中的字段有：tinyint、smallint、int、bigint\n19、models.TextField　　字符串=longtext\n20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]\n21、models.URLField　　字符串，地址正则表达式\n22、models.BinaryField　　二进制<br>23、models.ImageField   图片<br>24、models.FilePathField 文件\n \n更多字段：\n1、null=True 数据库中字段是否可以为空,默认为False\n2、blank=True 表单验证允许该字段为空，如果为blank=False，表示该字段必填\n　　django的 Admin 中添加数据时是否可允许空值,True允许为空，False时，表示该字段为必填\n3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列\n4、auto_now 和 auto_now_add\n　　auto_now   自动创建---无论添加或修改，都是当前操作的时间\n　　auto_now_add  自动创建---永远是创建时的时间\n5、choices\nGENDER_CHOICE = (\n        (u'M', u'Male'),\n        (u'F', u'Female'),\n    )\n  如：gender = models.CharField(max_length=2,choices = GENDER_CHOICE)\n6、max_length\n7、default　　设置默认值\n8、verbose_name　　Admin中字段的显示名称，类似于设置别名\n9、name|db_column　　数据库中的字段名称\n10、unique=True　　不允许重复，整表唯一\n11、db_index = True　　数据库索引\n12、editable=True　　在Admin里是否可编辑\n13、error_messages=None　　错误提示\n14、auto_created=False　　自动创建\n15、help_text　　在Admin中提示帮助信息，即使字段不在表单中使用，它对生成文档也很用\n16、validators=[]\n17、upload-to\n18、db_table='xxx' 重新设置表名称\n19、related_name='xxxx'  是将外键中的 \"topping_set\" (取自 类 的名字), 设置为自定义的对象集描述符，一般用于当一个对象要被另一个对象关联不止一次时使用，这个参数才真正有用，如下：\n    models.ForeignKey(Category, related_name=\"primary_storys\")\n    models.ForeignKey(Category, related_name=\"secondary_storys\")\n20、related_query_name='xxxx'    用于目标模型的反向过滤\n \n元选项（非必须）\nclass Meta:\n        verbose_name = u'企业/组织'          #别名\n        verbose_name_plural = u'企业/组织'   #复数别名\n        db_table = 'organs_organ'          #数据库表名\n        ordering = ('codename', )          #排序\n字段说明链接：\nhttp://python.usyiyi.cn/translate/django_182/ref/models/fields.html#common-model-field-options\n```\n\n#### 数据库表关系\n- 一对多，models.ForeignKey(A)\n\t当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）\n- 一对一，models.OneToOneField(B)\n\t在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失）\n- 多对多，authors = models.ManyToManyField(C)\n\t在某表中创建一行数据是，有一个可以多选的下拉框\n\n#### 模型的属性\nobjects 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问；也可以自定义方法；\n```python\n# models.py\nclass User(models.Model):\n    username = models.CharField(u'用户名', max_length=255)\n    email = models.EmailField(u'Email')\n    is_active = models.BooleanField(u'是否激活', default=True)\n \n    objects = UserManager()\n \n# managers.py\nclass UserManager(Manager):\n \n    def __init__(self):\n        super(BaseManager, self).__init__()\n \n    def create_staff(self, **kwargs):\n        from .models import Staff\n        staff = Staff(**kwargs)\n        staff.save()\n        return staff\n# 调用\nUser.objects.create_staff(**kwargs)\n```\n\n#### 模型的方法\n可以在模型上定义自定义的方法来给你的对象添加自定义的“底层”功能。Manager 方法用于“表范围”的事务，模型的方法应该着眼于特定的模型实例。\n\n管理器方法可以通过self.model 来得到它所属的模型类\n```python\n# models.py\nclass User(models.Model):\n    username = models.CharField(u'用户名', max_length=255)\n    email = models.EmailField(u'Email')\n    is_active = models.BooleanField(u'是否激活', default=True)\n \n    def is_true(self):\n        return True if self.is_active else False\n \n# views.py\t仅仅为了说明，下面例子没有任何意义\nuser = User.objects.get(id=id)\nif user.is_true():\n    return 'right'\n    \n```\n\n#### get()/filter()区别\n- models.objects.get() 获取到的是一个对象，如果没有抛出DoesNotExist异常；\n- get()得到的对象，更新需要obj.name=name, obj.save()\n- models.objects.filter()数据过滤，得到是一个查询集-对象列表，如果没有返回[]\n- filter()得到的对象，更新时直接models.objects.filter().update()\n\n#### model.object.create()/model.save()区别\n```python\nAccount.objects.create(**kwargs) #调用save()方法，保存到数据库，返回实例object\nAccount(**kwargs)    \t\t #为类对象，没有调用save()方法，没有保存到数据库，直到调用save()方法将数据保存\n```\n#### 模型继承\n##### 抽象基类\n只想使用父类来持有一些信息，不想在每个子模型中都定义一次，这个类永远不会单独使用\n编写完基类之后，在 Meta类中设置 abstract=True ，该类就不能创建任何数据表，如果抽象化基础类和它的子类有相同的项，那么将会出现error（并且Django将返回一个exception），例子如下：\n```python\nclass BaseModel(models.Model):\n    created_time = models.DateTimeField(u'创建时间', auto_now_add=True)\n \n    class Meta:\n        abstract = True\n        ordering = ['-created_time']\n \nclass Department(BaseModel):\n    name = models.CharField(u'部门名称', max_length=100, default='')\n    contact = models.CharField(u'联系电话', max_length=20, null=True, blank=True, default='')\n    desc = models.TextField(u'描述', null=True, blank=True, default='')\n \n    class Meta:\n        verbose_name = u'部门'\n        verbose_name_plural = u'部门'\n        db_table = 'department'\n \n    def __unicode__(self):\n        return u'%s' % self.name\n```\n在 ForeignKey或 ManyToManyField字段上使用 related_name属性，你必须总是为该字段指定一个唯一的反向名称\n\n##### 多表继承\n继承一个已经存在的模型且想让每个模型具有它自己的数据库表\n```python\nfrom django.db import models\n \nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n \nclass Restaurant(Place):\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n```\n##### 代理继承\n只是想改变模块Python 级别的行为，而不用修改模型的字段,更改默认的manager，或者添加一个新的方法；为原始模型创建一个代理，你可以创建，删除，更新代理 model 的实例，而且所有的数据都可以像使用原始 model 一样被保存\n不同之处在于：你可以在代理 model 中改变默认的排序设置和默认的 manager ，更不会对原始 model 产生影响\n```python\nfrom django.db import models\n \nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n \nclass MyPerson(Person):\n    class Meta:\n        proxy = True\n \n    def do_something(self):\n        # ...\n        pass\n \nclass OrderedPerson(Person):\n    class Meta:\n        ordering = [\"last_name\"]\n        proxy = True\n \n```\n#### 多对多表结构中添加字段\n\n```python\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(Person, through='Membership')\n\n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Membership(models.Model):\n    person = models.ForeignKey(Person)\n    group = models.ForeignKey(Group)\n    date_joined = models.DateField()\n    invite_reason = models.CharField(max_length=64)\n```\n```python\n>>> ringo = Person.objects.create(name=\"Ringo Starr\")\n>>> paul = Person.objects.create(name=\"Paul McCartney\")\n>>> beatles = Group.objects.create(name=\"The Beatles\")\n>>> m1 = Membership(person=ringo, group=beatles,\n...     date_joined=date(1962, 8, 16),\n...     invite_reason=\"Needed a new drummer.\")\n>>> m1.save()\n>>> beatles.members.all()\n[<Person: Ringo Starr>]\n>>> ringo.group_set.all()\n[<Group: The Beatles>]\n>>> m2 = Membership.objects.create(person=paul, group=beatles,\n...     date_joined=date(1960, 8, 1),\n...     invite_reason=\"Wanted to form a band.\")\n>>> beatles.members.all()\n[<Person: Ringo Starr>, <Person: Paul McCartney>]\n```\n#### 关联对象查询\n```python\nfrom django.db import models\n \nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    tagline = models.TextField()\n \n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Author(models.Model):\n    name = models.CharField(max_length=50)\n    email = models.EmailField()\n \n    def __str__(self):              # __unicode__ on Python 2\n        return self.name\n \nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog)\n    headline = models.CharField(max_length=255)\n    body_text = models.TextField()\n    pub_date = models.DateField()\n    mod_date = models.DateField()\n    authors = models.ManyToManyField(Author)\n    n_comments = models.IntegerField()\n    n_pingbacks = models.IntegerField()\n    rating = models.IntegerField()\n \n    def __str__(self):              # __unicode__ on Python 2\n        return self.headline\n```\n##### 一对多关系\n\n正向查询\n```python\n>>> e = Entry.objects.get(id=2)\n>>> e.blog # Returns the related Blog object.\n```\n反向查询\n```python\n# 管理器的名字为entry_set,其中entry为源模型的小写名称，当然这个名称也可以自定义，通过在ForeignKey 定义时设置related_name 参数来覆盖foo_set 的名称。例如，如果Entry 模型改成blog = ForeignKey(Blog, related_name='entries')，相对于的管理器也应该为entries\n>>> b = Blog.objects.get(id=1)\n>>> b.entry_set.all() # Returns all Entry objects related to Blog.\n\n# b.entry_set is a Manager that returns QuerySets.\n>>> b.entry_set.filter(headline__contains='Lennon')\n>>> b.entry_set.count()\n```\n##### 多对多关系\n\n多对多关系的两端都会自动获得访问另一端的API。这些API 的工作方式与一对多关系一样\n```python\ne = Entry.objects.get(id=3)\ne.authors.all() # Returns all Author objects for this Entry.\ne.authors.count()\ne.authors.filter(name__contains='John')\n \na = Author.objects.get(id=5)\na.entry_set.all() # Returns all Entry objects for this Author.\n```\n##### 一对一关系\n\n正向查询\n```python\nclass EntryDetail(models.Model):\n    entry = models.OneToOneField(Entry)\n    details = models.TextField()\n \ned = EntryDetail.objects.get(id=2)\ned.entry # Returns the related Entry object.\n```\n反向查询\n```python\n#一对一关系中的关联模型同样具有一个管理器对象，但是该管理器表示一个单一的对象而不是对象的集合；如果没有对象赋值给这个关联关系，Django 将引发一个DoesNotExist 异常；\ne = Entry.objects.get(id=2)\ne.entrydetail # returns the related EntryDetail object\n```\n#### select_for_update()\n```\n用于事务，返回一个for update 锁\nReturns a new QuerySet instance that will select objects with a FOR UPDATE lock.\n因QuerySet的延迟查询特性, copy一份用于update, 以便于不影响初始查询的candidates集\n```\n#### 批量创建\n使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数\n```python\nobjList = [a, b, c,] #none are saved\nobjList = model(record=record, receiver=receiver) # 上述两种格式都是批量创建对象的数据格式\nmodel.objects.bulk_create(objList)\n```\n\n#### 执行原始sql\n在模型查询API不够用的情况下，你可以使用原始的SQL语句\n```python\nPerson.objects.raw('SELECT id, first_name, last_name, birth_date FROM myapp_person')\n```\n\n\n\n\n\n\n","slug":"django-models-basic","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5w7002dct8u1y493hzg","content":"<h4 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、models.AutoField 自增列 = int(11)</div><div class=\"line\">　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。</div><div class=\"line\">2、models.CharField　　字符串字段</div><div class=\"line\">　　必须 max_length 参数</div><div class=\"line\">3、models.BooleanField　　布尔类型=tinyint(1)</div><div class=\"line\">　　不能为空，Blank=True</div><div class=\"line\">4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar</div><div class=\"line\">　　继承CharField，所以必须 max_lenght 参数</div><div class=\"line\">5、models.DateField　　日期类型 date</div><div class=\"line\">　　对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。</div><div class=\"line\">6、models.DateTimeField　　日期类型 datetime</div><div class=\"line\">　　同DateField的参数</div><div class=\"line\">7、models.Decimal　　十进制小数类型 = decimal</div><div class=\"line\">　　必须指定整数位max_digits和小数位decimal_places</div><div class=\"line\">8、models.EmailField　　字符串类型（正则表达式邮箱） =varchar</div><div class=\"line\">　　对字符串进行正则表达式</div><div class=\"line\">9、models.FloatField　　浮点类型 = double</div><div class=\"line\">10、models.IntegerField　　整形</div><div class=\"line\">11、models.BigIntegerField　　长整形</div><div class=\"line\">　　integer_field_ranges = &#123;</div><div class=\"line\">　　　　&apos;SmallIntegerField&apos;: (-32768, 32767),</div><div class=\"line\">　　　　&apos;IntegerField&apos;: (-2147483648, 2147483647),</div><div class=\"line\">　　　　&apos;BigIntegerField&apos;: (-9223372036854775808, 9223372036854775807),</div><div class=\"line\">　　　　&apos;PositiveSmallIntegerField&apos;: (0, 32767),</div><div class=\"line\">　　　　&apos;PositiveIntegerField&apos;: (0, 2147483647),</div><div class=\"line\">　　&#125;</div><div class=\"line\">12、models.IPAddressField　　字符串类型（ip4正则表达式）</div><div class=\"line\">13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）</div><div class=\"line\">　　参数protocol可以是：both、ipv4、ipv6</div><div class=\"line\">　　验证时，会根据设置报错</div><div class=\"line\">14、models.NullBooleanField　　允许为空的布尔类型</div><div class=\"line\">15、models.PositiveIntegerFiel　　正Integer</div><div class=\"line\">16、models.PositiveSmallIntegerField　　正smallInteger</div><div class=\"line\">17、models.SlugField　　减号、下划线、字母、数字</div><div class=\"line\">18、models.SmallIntegerField　　数字</div><div class=\"line\">　　数据库中的字段有：tinyint、smallint、int、bigint</div><div class=\"line\">19、models.TextField　　字符串=longtext</div><div class=\"line\">20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]</div><div class=\"line\">21、models.URLField　　字符串，地址正则表达式</div><div class=\"line\">22、models.BinaryField　　二进制&lt;br&gt;23、models.ImageField   图片&lt;br&gt;24、models.FilePathField 文件</div><div class=\"line\"> </div><div class=\"line\">更多字段：</div><div class=\"line\">1、null=True 数据库中字段是否可以为空,默认为False</div><div class=\"line\">2、blank=True 表单验证允许该字段为空，如果为blank=False，表示该字段必填</div><div class=\"line\">　　django的 Admin 中添加数据时是否可允许空值,True允许为空，False时，表示该字段为必填</div><div class=\"line\">3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列</div><div class=\"line\">4、auto_now 和 auto_now_add</div><div class=\"line\">　　auto_now   自动创建---无论添加或修改，都是当前操作的时间</div><div class=\"line\">　　auto_now_add  自动创建---永远是创建时的时间</div><div class=\"line\">5、choices</div><div class=\"line\">GENDER_CHOICE = (</div><div class=\"line\">        (u&apos;M&apos;, u&apos;Male&apos;),</div><div class=\"line\">        (u&apos;F&apos;, u&apos;Female&apos;),</div><div class=\"line\">    )</div><div class=\"line\">  如：gender = models.CharField(max_length=2,choices = GENDER_CHOICE)</div><div class=\"line\">6、max_length</div><div class=\"line\">7、default　　设置默认值</div><div class=\"line\">8、verbose_name　　Admin中字段的显示名称，类似于设置别名</div><div class=\"line\">9、name|db_column　　数据库中的字段名称</div><div class=\"line\">10、unique=True　　不允许重复，整表唯一</div><div class=\"line\">11、db_index = True　　数据库索引</div><div class=\"line\">12、editable=True　　在Admin里是否可编辑</div><div class=\"line\">13、error_messages=None　　错误提示</div><div class=\"line\">14、auto_created=False　　自动创建</div><div class=\"line\">15、help_text　　在Admin中提示帮助信息，即使字段不在表单中使用，它对生成文档也很用</div><div class=\"line\">16、validators=[]</div><div class=\"line\">17、upload-to</div><div class=\"line\">18、db_table=&apos;xxx&apos; 重新设置表名称</div><div class=\"line\">19、related_name=&apos;xxxx&apos;  是将外键中的 &quot;topping_set&quot; (取自 类 的名字), 设置为自定义的对象集描述符，一般用于当一个对象要被另一个对象关联不止一次时使用，这个参数才真正有用，如下：</div><div class=\"line\">    models.ForeignKey(Category, related_name=&quot;primary_storys&quot;)</div><div class=\"line\">    models.ForeignKey(Category, related_name=&quot;secondary_storys&quot;)</div><div class=\"line\">20、related_query_name=&apos;xxxx&apos;    用于目标模型的反向过滤</div><div class=\"line\"> </div><div class=\"line\">元选项（非必须）</div><div class=\"line\">class Meta:</div><div class=\"line\">        verbose_name = u&apos;企业/组织&apos;          #别名</div><div class=\"line\">        verbose_name_plural = u&apos;企业/组织&apos;   #复数别名</div><div class=\"line\">        db_table = &apos;organs_organ&apos;          #数据库表名</div><div class=\"line\">        ordering = (&apos;codename&apos;, )          #排序</div><div class=\"line\">字段说明链接：</div><div class=\"line\">http://python.usyiyi.cn/translate/django_182/ref/models/fields.html#common-model-field-options</div></pre></td></tr></table></figure>\n<h4 id=\"数据库表关系\"><a href=\"#数据库表关系\" class=\"headerlink\" title=\"数据库表关系\"></a>数据库表关系</h4><ul>\n<li>一对多，models.ForeignKey(A)<br>  当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）</li>\n<li>一对一，models.OneToOneField(B)<br>  在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失）</li>\n<li>多对多，authors = models.ManyToManyField(C)<br>  在某表中创建一行数据是，有一个可以多选的下拉框</li>\n</ul>\n<h4 id=\"模型的属性\"><a href=\"#模型的属性\" class=\"headerlink\" title=\"模型的属性\"></a>模型的属性</h4><p>objects 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问；也可以自定义方法；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># models.py</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    username = models.CharField(<span class=\"string\">u'用户名'</span>, max_length=<span class=\"number\">255</span>)</div><div class=\"line\">    email = models.EmailField(<span class=\"string\">u'Email'</span>)</div><div class=\"line\">    is_active = models.BooleanField(<span class=\"string\">u'是否激活'</span>, default=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    objects = UserManager()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># managers.py</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManager</span><span class=\"params\">(Manager)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        super(BaseManager, self).__init__()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_staff</span><span class=\"params\">(self, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Staff</div><div class=\"line\">        staff = Staff(**kwargs)</div><div class=\"line\">        staff.save()</div><div class=\"line\">        <span class=\"keyword\">return</span> staff</div><div class=\"line\"><span class=\"comment\"># 调用</span></div><div class=\"line\">User.objects.create_staff(**kwargs)</div></pre></td></tr></table></figure></p>\n<h4 id=\"模型的方法\"><a href=\"#模型的方法\" class=\"headerlink\" title=\"模型的方法\"></a>模型的方法</h4><p>可以在模型上定义自定义的方法来给你的对象添加自定义的“底层”功能。Manager 方法用于“表范围”的事务，模型的方法应该着眼于特定的模型实例。</p>\n<p>管理器方法可以通过self.model 来得到它所属的模型类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># models.py</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    username = models.CharField(<span class=\"string\">u'用户名'</span>, max_length=<span class=\"number\">255</span>)</div><div class=\"line\">    email = models.EmailField(<span class=\"string\">u'Email'</span>)</div><div class=\"line\">    is_active = models.BooleanField(<span class=\"string\">u'是否激活'</span>, default=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_true</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> self.is_active <span class=\"keyword\">else</span> <span class=\"keyword\">False</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># views.py\t仅仅为了说明，下面例子没有任何意义</span></div><div class=\"line\">user = User.objects.get(id=id)</div><div class=\"line\"><span class=\"keyword\">if</span> user.is_true():</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'right'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"get-filter-区别\"><a href=\"#get-filter-区别\" class=\"headerlink\" title=\"get()/filter()区别\"></a>get()/filter()区别</h4><ul>\n<li>models.objects.get() 获取到的是一个对象，如果没有抛出DoesNotExist异常；</li>\n<li>get()得到的对象，更新需要obj.name=name, obj.save()</li>\n<li>models.objects.filter()数据过滤，得到是一个查询集-对象列表，如果没有返回[]</li>\n<li>filter()得到的对象，更新时直接models.objects.filter().update()</li>\n</ul>\n<h4 id=\"model-object-create-model-save-区别\"><a href=\"#model-object-create-model-save-区别\" class=\"headerlink\" title=\"model.object.create()/model.save()区别\"></a>model.object.create()/model.save()区别</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Account.objects.create(**kwargs) <span class=\"comment\">#调用save()方法，保存到数据库，返回实例object</span></div><div class=\"line\">Account(**kwargs)    \t\t <span class=\"comment\">#为类对象，没有调用save()方法，没有保存到数据库，直到调用save()方法将数据保存</span></div></pre></td></tr></table></figure>\n<h4 id=\"模型继承\"><a href=\"#模型继承\" class=\"headerlink\" title=\"模型继承\"></a>模型继承</h4><h5 id=\"抽象基类\"><a href=\"#抽象基类\" class=\"headerlink\" title=\"抽象基类\"></a>抽象基类</h5><p>只想使用父类来持有一些信息，不想在每个子模型中都定义一次，这个类永远不会单独使用<br>编写完基类之后，在 Meta类中设置 abstract=True ，该类就不能创建任何数据表，如果抽象化基础类和它的子类有相同的项，那么将会出现error（并且Django将返回一个exception），例子如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseModel</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    created_time = models.DateTimeField(<span class=\"string\">u'创建时间'</span>, auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        abstract = <span class=\"keyword\">True</span></div><div class=\"line\">        ordering = [<span class=\"string\">'-created_time'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span><span class=\"params\">(BaseModel)</span>:</span></div><div class=\"line\">    name = models.CharField(<span class=\"string\">u'部门名称'</span>, max_length=<span class=\"number\">100</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    contact = models.CharField(<span class=\"string\">u'联系电话'</span>, max_length=<span class=\"number\">20</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    desc = models.TextField(<span class=\"string\">u'描述'</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'部门'</span></div><div class=\"line\">        verbose_name_plural = <span class=\"string\">u'部门'</span></div><div class=\"line\">        db_table = <span class=\"string\">'department'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__unicode__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">u'%s'</span> % self.name</div></pre></td></tr></table></figure></p>\n<p>在 ForeignKey或 ManyToManyField字段上使用 related_name属性，你必须总是为该字段指定一个唯一的反向名称</p>\n<h5 id=\"多表继承\"><a href=\"#多表继承\" class=\"headerlink\" title=\"多表继承\"></a>多表继承</h5><p>继承一个已经存在的模型且想让每个模型具有它自己的数据库表<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Place</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">50</span>)</div><div class=\"line\">    address = models.CharField(max_length=<span class=\"number\">80</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Restaurant</span><span class=\"params\">(Place)</span>:</span></div><div class=\"line\">    serves_hot_dogs = models.BooleanField(default=<span class=\"keyword\">False</span>)</div><div class=\"line\">    serves_pizza = models.BooleanField(default=<span class=\"keyword\">False</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"代理继承\"><a href=\"#代理继承\" class=\"headerlink\" title=\"代理继承\"></a>代理继承</h5><p>只是想改变模块Python 级别的行为，而不用修改模型的字段,更改默认的manager，或者添加一个新的方法；为原始模型创建一个代理，你可以创建，删除，更新代理 model 的实例，而且所有的数据都可以像使用原始 model 一样被保存<br>不同之处在于：你可以在代理 model 中改变默认的排序设置和默认的 manager ，更不会对原始 model 产生影响<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    first_name = models.CharField(max_length=<span class=\"number\">30</span>)</div><div class=\"line\">    last_name = models.CharField(max_length=<span class=\"number\">30</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPerson</span><span class=\"params\">(Person)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        proxy = <span class=\"keyword\">True</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># ...</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderedPerson</span><span class=\"params\">(Person)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        ordering = [<span class=\"string\">\"last_name\"</span>]</div><div class=\"line\">        proxy = <span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"多对多表结构中添加字段\"><a href=\"#多对多表结构中添加字段\" class=\"headerlink\" title=\"多对多表结构中添加字段\"></a>多对多表结构中添加字段</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">128</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">128</span>)</div><div class=\"line\">    members = models.ManyToManyField(Person, through=<span class=\"string\">'Membership'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Membership</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    person = models.ForeignKey(Person)</div><div class=\"line\">    group = models.ForeignKey(Group)</div><div class=\"line\">    date_joined = models.DateField()</div><div class=\"line\">    invite_reason = models.CharField(max_length=<span class=\"number\">64</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ringo = Person.objects.create(name=<span class=\"string\">\"Ringo Starr\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>paul = Person.objects.create(name=<span class=\"string\">\"Paul McCartney\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>beatles = Group.objects.create(name=<span class=\"string\">\"The Beatles\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m1 = Membership(person=ringo, group=beatles,</div><div class=\"line\"><span class=\"meta\">... </span>    date_joined=date(<span class=\"number\">1962</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>),</div><div class=\"line\"><span class=\"meta\">... </span>    invite_reason=<span class=\"string\">\"Needed a new drummer.\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m1.save()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>beatles.members.all()</div><div class=\"line\">[&lt;Person: Ringo Starr&gt;]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ringo.group_set.all()</div><div class=\"line\">[&lt;Group: The Beatles&gt;]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m2 = Membership.objects.create(person=paul, group=beatles,</div><div class=\"line\"><span class=\"meta\">... </span>    date_joined=date(<span class=\"number\">1960</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"meta\">... </span>    invite_reason=<span class=\"string\">\"Wanted to form a band.\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>beatles.members.all()</div><div class=\"line\">[&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"关联对象查询\"><a href=\"#关联对象查询\" class=\"headerlink\" title=\"关联对象查询\"></a>关联对象查询</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blog</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    tagline = models.TextField()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">50</span>)</div><div class=\"line\">    email = models.EmailField()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    blog = models.ForeignKey(Blog)</div><div class=\"line\">    headline = models.CharField(max_length=<span class=\"number\">255</span>)</div><div class=\"line\">    body_text = models.TextField()</div><div class=\"line\">    pub_date = models.DateField()</div><div class=\"line\">    mod_date = models.DateField()</div><div class=\"line\">    authors = models.ManyToManyField(Author)</div><div class=\"line\">    n_comments = models.IntegerField()</div><div class=\"line\">    n_pingbacks = models.IntegerField()</div><div class=\"line\">    rating = models.IntegerField()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.headline</div></pre></td></tr></table></figure>\n<h5 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h5><p>正向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e.blog <span class=\"comment\"># Returns the related Blog object.</span></div></pre></td></tr></table></figure></p>\n<p>反向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 管理器的名字为entry_set,其中entry为源模型的小写名称，当然这个名称也可以自定义，通过在ForeignKey 定义时设置related_name 参数来覆盖foo_set 的名称。例如，如果Entry 模型改成blog = ForeignKey(Blog, related_name='entries')，相对于的管理器也应该为entries</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = Blog.objects.get(id=<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.entry_set.all() <span class=\"comment\"># Returns all Entry objects related to Blog.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># b.entry_set is a Manager that returns QuerySets.</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.entry_set.filter(headline__contains=<span class=\"string\">'Lennon'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.entry_set.count()</div></pre></td></tr></table></figure></p>\n<h5 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h5><p>多对多关系的两端都会自动获得访问另一端的API。这些API 的工作方式与一对多关系一样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">e = Entry.objects.get(id=<span class=\"number\">3</span>)</div><div class=\"line\">e.authors.all() <span class=\"comment\"># Returns all Author objects for this Entry.</span></div><div class=\"line\">e.authors.count()</div><div class=\"line\">e.authors.filter(name__contains=<span class=\"string\">'John'</span>)</div><div class=\"line\"> </div><div class=\"line\">a = Author.objects.get(id=<span class=\"number\">5</span>)</div><div class=\"line\">a.entry_set.all() <span class=\"comment\"># Returns all Entry objects for this Author.</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h5><p>正向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EntryDetail</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    entry = models.OneToOneField(Entry)</div><div class=\"line\">    details = models.TextField()</div><div class=\"line\"> </div><div class=\"line\">ed = EntryDetail.objects.get(id=<span class=\"number\">2</span>)</div><div class=\"line\">ed.entry <span class=\"comment\"># Returns the related Entry object.</span></div></pre></td></tr></table></figure></p>\n<p>反向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#一对一关系中的关联模型同样具有一个管理器对象，但是该管理器表示一个单一的对象而不是对象的集合；如果没有对象赋值给这个关联关系，Django 将引发一个DoesNotExist 异常；</span></div><div class=\"line\">e = Entry.objects.get(id=<span class=\"number\">2</span>)</div><div class=\"line\">e.entrydetail <span class=\"comment\"># returns the related EntryDetail object</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"select-for-update\"><a href=\"#select-for-update\" class=\"headerlink\" title=\"select_for_update()\"></a>select_for_update()</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">用于事务，返回一个for update 锁</div><div class=\"line\">Returns a new QuerySet instance that will select objects with a FOR UPDATE lock.</div><div class=\"line\">因QuerySet的延迟查询特性, copy一份用于update, 以便于不影响初始查询的candidates集</div></pre></td></tr></table></figure>\n<h4 id=\"批量创建\"><a href=\"#批量创建\" class=\"headerlink\" title=\"批量创建\"></a>批量创建</h4><p>使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">objList = [a, b, c,] <span class=\"comment\">#none are saved</span></div><div class=\"line\">objList = model(record=record, receiver=receiver) <span class=\"comment\"># 上述两种格式都是批量创建对象的数据格式</span></div><div class=\"line\">model.objects.bulk_create(objList)</div></pre></td></tr></table></figure></p>\n<h4 id=\"执行原始sql\"><a href=\"#执行原始sql\" class=\"headerlink\" title=\"执行原始sql\"></a>执行原始sql</h4><p>在模型查询API不够用的情况下，你可以使用原始的SQL语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.objects.raw(<span class=\"string\">'SELECT id, first_name, last_name, birth_date FROM myapp_person'</span>)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、models.AutoField 自增列 = int(11)</div><div class=\"line\">　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。</div><div class=\"line\">2、models.CharField　　字符串字段</div><div class=\"line\">　　必须 max_length 参数</div><div class=\"line\">3、models.BooleanField　　布尔类型=tinyint(1)</div><div class=\"line\">　　不能为空，Blank=True</div><div class=\"line\">4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar</div><div class=\"line\">　　继承CharField，所以必须 max_lenght 参数</div><div class=\"line\">5、models.DateField　　日期类型 date</div><div class=\"line\">　　对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。</div><div class=\"line\">6、models.DateTimeField　　日期类型 datetime</div><div class=\"line\">　　同DateField的参数</div><div class=\"line\">7、models.Decimal　　十进制小数类型 = decimal</div><div class=\"line\">　　必须指定整数位max_digits和小数位decimal_places</div><div class=\"line\">8、models.EmailField　　字符串类型（正则表达式邮箱） =varchar</div><div class=\"line\">　　对字符串进行正则表达式</div><div class=\"line\">9、models.FloatField　　浮点类型 = double</div><div class=\"line\">10、models.IntegerField　　整形</div><div class=\"line\">11、models.BigIntegerField　　长整形</div><div class=\"line\">　　integer_field_ranges = &#123;</div><div class=\"line\">　　　　&apos;SmallIntegerField&apos;: (-32768, 32767),</div><div class=\"line\">　　　　&apos;IntegerField&apos;: (-2147483648, 2147483647),</div><div class=\"line\">　　　　&apos;BigIntegerField&apos;: (-9223372036854775808, 9223372036854775807),</div><div class=\"line\">　　　　&apos;PositiveSmallIntegerField&apos;: (0, 32767),</div><div class=\"line\">　　　　&apos;PositiveIntegerField&apos;: (0, 2147483647),</div><div class=\"line\">　　&#125;</div><div class=\"line\">12、models.IPAddressField　　字符串类型（ip4正则表达式）</div><div class=\"line\">13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）</div><div class=\"line\">　　参数protocol可以是：both、ipv4、ipv6</div><div class=\"line\">　　验证时，会根据设置报错</div><div class=\"line\">14、models.NullBooleanField　　允许为空的布尔类型</div><div class=\"line\">15、models.PositiveIntegerFiel　　正Integer</div><div class=\"line\">16、models.PositiveSmallIntegerField　　正smallInteger</div><div class=\"line\">17、models.SlugField　　减号、下划线、字母、数字</div><div class=\"line\">18、models.SmallIntegerField　　数字</div><div class=\"line\">　　数据库中的字段有：tinyint、smallint、int、bigint</div><div class=\"line\">19、models.TextField　　字符串=longtext</div><div class=\"line\">20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]</div><div class=\"line\">21、models.URLField　　字符串，地址正则表达式</div><div class=\"line\">22、models.BinaryField　　二进制&lt;br&gt;23、models.ImageField   图片&lt;br&gt;24、models.FilePathField 文件</div><div class=\"line\"> </div><div class=\"line\">更多字段：</div><div class=\"line\">1、null=True 数据库中字段是否可以为空,默认为False</div><div class=\"line\">2、blank=True 表单验证允许该字段为空，如果为blank=False，表示该字段必填</div><div class=\"line\">　　django的 Admin 中添加数据时是否可允许空值,True允许为空，False时，表示该字段为必填</div><div class=\"line\">3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列</div><div class=\"line\">4、auto_now 和 auto_now_add</div><div class=\"line\">　　auto_now   自动创建---无论添加或修改，都是当前操作的时间</div><div class=\"line\">　　auto_now_add  自动创建---永远是创建时的时间</div><div class=\"line\">5、choices</div><div class=\"line\">GENDER_CHOICE = (</div><div class=\"line\">        (u&apos;M&apos;, u&apos;Male&apos;),</div><div class=\"line\">        (u&apos;F&apos;, u&apos;Female&apos;),</div><div class=\"line\">    )</div><div class=\"line\">  如：gender = models.CharField(max_length=2,choices = GENDER_CHOICE)</div><div class=\"line\">6、max_length</div><div class=\"line\">7、default　　设置默认值</div><div class=\"line\">8、verbose_name　　Admin中字段的显示名称，类似于设置别名</div><div class=\"line\">9、name|db_column　　数据库中的字段名称</div><div class=\"line\">10、unique=True　　不允许重复，整表唯一</div><div class=\"line\">11、db_index = True　　数据库索引</div><div class=\"line\">12、editable=True　　在Admin里是否可编辑</div><div class=\"line\">13、error_messages=None　　错误提示</div><div class=\"line\">14、auto_created=False　　自动创建</div><div class=\"line\">15、help_text　　在Admin中提示帮助信息，即使字段不在表单中使用，它对生成文档也很用</div><div class=\"line\">16、validators=[]</div><div class=\"line\">17、upload-to</div><div class=\"line\">18、db_table=&apos;xxx&apos; 重新设置表名称</div><div class=\"line\">19、related_name=&apos;xxxx&apos;  是将外键中的 &quot;topping_set&quot; (取自 类 的名字), 设置为自定义的对象集描述符，一般用于当一个对象要被另一个对象关联不止一次时使用，这个参数才真正有用，如下：</div><div class=\"line\">    models.ForeignKey(Category, related_name=&quot;primary_storys&quot;)</div><div class=\"line\">    models.ForeignKey(Category, related_name=&quot;secondary_storys&quot;)</div><div class=\"line\">20、related_query_name=&apos;xxxx&apos;    用于目标模型的反向过滤</div><div class=\"line\"> </div><div class=\"line\">元选项（非必须）</div><div class=\"line\">class Meta:</div><div class=\"line\">        verbose_name = u&apos;企业/组织&apos;          #别名</div><div class=\"line\">        verbose_name_plural = u&apos;企业/组织&apos;   #复数别名</div><div class=\"line\">        db_table = &apos;organs_organ&apos;          #数据库表名</div><div class=\"line\">        ordering = (&apos;codename&apos;, )          #排序</div><div class=\"line\">字段说明链接：</div><div class=\"line\">http://python.usyiyi.cn/translate/django_182/ref/models/fields.html#common-model-field-options</div></pre></td></tr></table></figure>\n<h4 id=\"数据库表关系\"><a href=\"#数据库表关系\" class=\"headerlink\" title=\"数据库表关系\"></a>数据库表关系</h4><ul>\n<li>一对多，models.ForeignKey(A)<br>  当一张表中创建一行数据时，有一个单选的下拉框（可以被重复选择）</li>\n<li>一对一，models.OneToOneField(B)<br>  在某表中创建一行数据时，有一个单选的下拉框（下拉框中的内容被用过一次就消失）</li>\n<li>多对多，authors = models.ManyToManyField(C)<br>  在某表中创建一行数据是，有一个可以多选的下拉框</li>\n</ul>\n<h4 id=\"模型的属性\"><a href=\"#模型的属性\" class=\"headerlink\" title=\"模型的属性\"></a>模型的属性</h4><p>objects 模型最重要的属性是Manager。它是Django 模型进行数据库查询操作的接口，并用于从数据库获取实例。如果没有自定义Manager，则默认的名称为objects。Managers 只能通过模型类访问，而不能通过模型实例访问；也可以自定义方法；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># models.py</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    username = models.CharField(<span class=\"string\">u'用户名'</span>, max_length=<span class=\"number\">255</span>)</div><div class=\"line\">    email = models.EmailField(<span class=\"string\">u'Email'</span>)</div><div class=\"line\">    is_active = models.BooleanField(<span class=\"string\">u'是否激活'</span>, default=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    objects = UserManager()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># managers.py</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManager</span><span class=\"params\">(Manager)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        super(BaseManager, self).__init__()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_staff</span><span class=\"params\">(self, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Staff</div><div class=\"line\">        staff = Staff(**kwargs)</div><div class=\"line\">        staff.save()</div><div class=\"line\">        <span class=\"keyword\">return</span> staff</div><div class=\"line\"><span class=\"comment\"># 调用</span></div><div class=\"line\">User.objects.create_staff(**kwargs)</div></pre></td></tr></table></figure></p>\n<h4 id=\"模型的方法\"><a href=\"#模型的方法\" class=\"headerlink\" title=\"模型的方法\"></a>模型的方法</h4><p>可以在模型上定义自定义的方法来给你的对象添加自定义的“底层”功能。Manager 方法用于“表范围”的事务，模型的方法应该着眼于特定的模型实例。</p>\n<p>管理器方法可以通过self.model 来得到它所属的模型类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># models.py</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    username = models.CharField(<span class=\"string\">u'用户名'</span>, max_length=<span class=\"number\">255</span>)</div><div class=\"line\">    email = models.EmailField(<span class=\"string\">u'Email'</span>)</div><div class=\"line\">    is_active = models.BooleanField(<span class=\"string\">u'是否激活'</span>, default=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_true</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> self.is_active <span class=\"keyword\">else</span> <span class=\"keyword\">False</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># views.py\t仅仅为了说明，下面例子没有任何意义</span></div><div class=\"line\">user = User.objects.get(id=id)</div><div class=\"line\"><span class=\"keyword\">if</span> user.is_true():</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'right'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"get-filter-区别\"><a href=\"#get-filter-区别\" class=\"headerlink\" title=\"get()/filter()区别\"></a>get()/filter()区别</h4><ul>\n<li>models.objects.get() 获取到的是一个对象，如果没有抛出DoesNotExist异常；</li>\n<li>get()得到的对象，更新需要obj.name=name, obj.save()</li>\n<li>models.objects.filter()数据过滤，得到是一个查询集-对象列表，如果没有返回[]</li>\n<li>filter()得到的对象，更新时直接models.objects.filter().update()</li>\n</ul>\n<h4 id=\"model-object-create-model-save-区别\"><a href=\"#model-object-create-model-save-区别\" class=\"headerlink\" title=\"model.object.create()/model.save()区别\"></a>model.object.create()/model.save()区别</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Account.objects.create(**kwargs) <span class=\"comment\">#调用save()方法，保存到数据库，返回实例object</span></div><div class=\"line\">Account(**kwargs)    \t\t <span class=\"comment\">#为类对象，没有调用save()方法，没有保存到数据库，直到调用save()方法将数据保存</span></div></pre></td></tr></table></figure>\n<h4 id=\"模型继承\"><a href=\"#模型继承\" class=\"headerlink\" title=\"模型继承\"></a>模型继承</h4><h5 id=\"抽象基类\"><a href=\"#抽象基类\" class=\"headerlink\" title=\"抽象基类\"></a>抽象基类</h5><p>只想使用父类来持有一些信息，不想在每个子模型中都定义一次，这个类永远不会单独使用<br>编写完基类之后，在 Meta类中设置 abstract=True ，该类就不能创建任何数据表，如果抽象化基础类和它的子类有相同的项，那么将会出现error（并且Django将返回一个exception），例子如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseModel</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    created_time = models.DateTimeField(<span class=\"string\">u'创建时间'</span>, auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        abstract = <span class=\"keyword\">True</span></div><div class=\"line\">        ordering = [<span class=\"string\">'-created_time'</span>]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span><span class=\"params\">(BaseModel)</span>:</span></div><div class=\"line\">    name = models.CharField(<span class=\"string\">u'部门名称'</span>, max_length=<span class=\"number\">100</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    contact = models.CharField(<span class=\"string\">u'联系电话'</span>, max_length=<span class=\"number\">20</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    desc = models.TextField(<span class=\"string\">u'描述'</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'部门'</span></div><div class=\"line\">        verbose_name_plural = <span class=\"string\">u'部门'</span></div><div class=\"line\">        db_table = <span class=\"string\">'department'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__unicode__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">u'%s'</span> % self.name</div></pre></td></tr></table></figure></p>\n<p>在 ForeignKey或 ManyToManyField字段上使用 related_name属性，你必须总是为该字段指定一个唯一的反向名称</p>\n<h5 id=\"多表继承\"><a href=\"#多表继承\" class=\"headerlink\" title=\"多表继承\"></a>多表继承</h5><p>继承一个已经存在的模型且想让每个模型具有它自己的数据库表<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Place</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">50</span>)</div><div class=\"line\">    address = models.CharField(max_length=<span class=\"number\">80</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Restaurant</span><span class=\"params\">(Place)</span>:</span></div><div class=\"line\">    serves_hot_dogs = models.BooleanField(default=<span class=\"keyword\">False</span>)</div><div class=\"line\">    serves_pizza = models.BooleanField(default=<span class=\"keyword\">False</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"代理继承\"><a href=\"#代理继承\" class=\"headerlink\" title=\"代理继承\"></a>代理继承</h5><p>只是想改变模块Python 级别的行为，而不用修改模型的字段,更改默认的manager，或者添加一个新的方法；为原始模型创建一个代理，你可以创建，删除，更新代理 model 的实例，而且所有的数据都可以像使用原始 model 一样被保存<br>不同之处在于：你可以在代理 model 中改变默认的排序设置和默认的 manager ，更不会对原始 model 产生影响<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    first_name = models.CharField(max_length=<span class=\"number\">30</span>)</div><div class=\"line\">    last_name = models.CharField(max_length=<span class=\"number\">30</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPerson</span><span class=\"params\">(Person)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        proxy = <span class=\"keyword\">True</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># ...</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderedPerson</span><span class=\"params\">(Person)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        ordering = [<span class=\"string\">\"last_name\"</span>]</div><div class=\"line\">        proxy = <span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"多对多表结构中添加字段\"><a href=\"#多对多表结构中添加字段\" class=\"headerlink\" title=\"多对多表结构中添加字段\"></a>多对多表结构中添加字段</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">128</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">128</span>)</div><div class=\"line\">    members = models.ManyToManyField(Person, through=<span class=\"string\">'Membership'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Membership</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    person = models.ForeignKey(Person)</div><div class=\"line\">    group = models.ForeignKey(Group)</div><div class=\"line\">    date_joined = models.DateField()</div><div class=\"line\">    invite_reason = models.CharField(max_length=<span class=\"number\">64</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ringo = Person.objects.create(name=<span class=\"string\">\"Ringo Starr\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>paul = Person.objects.create(name=<span class=\"string\">\"Paul McCartney\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>beatles = Group.objects.create(name=<span class=\"string\">\"The Beatles\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m1 = Membership(person=ringo, group=beatles,</div><div class=\"line\"><span class=\"meta\">... </span>    date_joined=date(<span class=\"number\">1962</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>),</div><div class=\"line\"><span class=\"meta\">... </span>    invite_reason=<span class=\"string\">\"Needed a new drummer.\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m1.save()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>beatles.members.all()</div><div class=\"line\">[&lt;Person: Ringo Starr&gt;]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ringo.group_set.all()</div><div class=\"line\">[&lt;Group: The Beatles&gt;]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m2 = Membership.objects.create(person=paul, group=beatles,</div><div class=\"line\"><span class=\"meta\">... </span>    date_joined=date(<span class=\"number\">1960</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"meta\">... </span>    invite_reason=<span class=\"string\">\"Wanted to form a band.\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>beatles.members.all()</div><div class=\"line\">[&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"关联对象查询\"><a href=\"#关联对象查询\" class=\"headerlink\" title=\"关联对象查询\"></a>关联对象查询</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blog</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    tagline = models.TextField()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">50</span>)</div><div class=\"line\">    email = models.EmailField()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    blog = models.ForeignKey(Blog)</div><div class=\"line\">    headline = models.CharField(max_length=<span class=\"number\">255</span>)</div><div class=\"line\">    body_text = models.TextField()</div><div class=\"line\">    pub_date = models.DateField()</div><div class=\"line\">    mod_date = models.DateField()</div><div class=\"line\">    authors = models.ManyToManyField(Author)</div><div class=\"line\">    n_comments = models.IntegerField()</div><div class=\"line\">    n_pingbacks = models.IntegerField()</div><div class=\"line\">    rating = models.IntegerField()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>              <span class=\"comment\"># __unicode__ on Python 2</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.headline</div></pre></td></tr></table></figure>\n<h5 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h5><p>正向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e.blog <span class=\"comment\"># Returns the related Blog object.</span></div></pre></td></tr></table></figure></p>\n<p>反向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 管理器的名字为entry_set,其中entry为源模型的小写名称，当然这个名称也可以自定义，通过在ForeignKey 定义时设置related_name 参数来覆盖foo_set 的名称。例如，如果Entry 模型改成blog = ForeignKey(Blog, related_name='entries')，相对于的管理器也应该为entries</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = Blog.objects.get(id=<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.entry_set.all() <span class=\"comment\"># Returns all Entry objects related to Blog.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># b.entry_set is a Manager that returns QuerySets.</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.entry_set.filter(headline__contains=<span class=\"string\">'Lennon'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.entry_set.count()</div></pre></td></tr></table></figure></p>\n<h5 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h5><p>多对多关系的两端都会自动获得访问另一端的API。这些API 的工作方式与一对多关系一样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">e = Entry.objects.get(id=<span class=\"number\">3</span>)</div><div class=\"line\">e.authors.all() <span class=\"comment\"># Returns all Author objects for this Entry.</span></div><div class=\"line\">e.authors.count()</div><div class=\"line\">e.authors.filter(name__contains=<span class=\"string\">'John'</span>)</div><div class=\"line\"> </div><div class=\"line\">a = Author.objects.get(id=<span class=\"number\">5</span>)</div><div class=\"line\">a.entry_set.all() <span class=\"comment\"># Returns all Entry objects for this Author.</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h5><p>正向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EntryDetail</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    entry = models.OneToOneField(Entry)</div><div class=\"line\">    details = models.TextField()</div><div class=\"line\"> </div><div class=\"line\">ed = EntryDetail.objects.get(id=<span class=\"number\">2</span>)</div><div class=\"line\">ed.entry <span class=\"comment\"># Returns the related Entry object.</span></div></pre></td></tr></table></figure></p>\n<p>反向查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#一对一关系中的关联模型同样具有一个管理器对象，但是该管理器表示一个单一的对象而不是对象的集合；如果没有对象赋值给这个关联关系，Django 将引发一个DoesNotExist 异常；</span></div><div class=\"line\">e = Entry.objects.get(id=<span class=\"number\">2</span>)</div><div class=\"line\">e.entrydetail <span class=\"comment\"># returns the related EntryDetail object</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"select-for-update\"><a href=\"#select-for-update\" class=\"headerlink\" title=\"select_for_update()\"></a>select_for_update()</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">用于事务，返回一个for update 锁</div><div class=\"line\">Returns a new QuerySet instance that will select objects with a FOR UPDATE lock.</div><div class=\"line\">因QuerySet的延迟查询特性, copy一份用于update, 以便于不影响初始查询的candidates集</div></pre></td></tr></table></figure>\n<h4 id=\"批量创建\"><a href=\"#批量创建\" class=\"headerlink\" title=\"批量创建\"></a>批量创建</h4><p>使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">objList = [a, b, c,] <span class=\"comment\">#none are saved</span></div><div class=\"line\">objList = model(record=record, receiver=receiver) <span class=\"comment\"># 上述两种格式都是批量创建对象的数据格式</span></div><div class=\"line\">model.objects.bulk_create(objList)</div></pre></td></tr></table></figure></p>\n<h4 id=\"执行原始sql\"><a href=\"#执行原始sql\" class=\"headerlink\" title=\"执行原始sql\"></a>执行原始sql</h4><p>在模型查询API不够用的情况下，你可以使用原始的SQL语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.objects.raw(<span class=\"string\">'SELECT id, first_name, last_name, birth_date FROM myapp_person'</span>)</div></pre></td></tr></table></figure></p>\n"},{"title":"Django Signals信号","date":"2017-09-27T14:41:10.000Z","_content":"### 说明\n\nDjango 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组receiver某些操作已经发生;这在多处代码和同一事件有关联的情况下很有用\n\n### 预定义信号\n- 在模型 save()方法调用之前或之后发送\n    ```\n    django.db.models.signals.pre_save \n    django.db.models.signals.post_save\n    ```\n- 在模型delete()方法或查询集的delete() 方法调用之前或之后发送\n    ```\n    django.db.models.signals.pre_delete\n    django.db.models.signals.post_delete\n    ```\n- 模型上的 ManyToManyField 修改时发送\n    ```\n    django.db.models.signals.m2m_changed\n    ```\n- Django建立或关闭HTTP 请求时发送\n    ```\n    django.core.signals.request_started\n    django.core.signals.request_finished\n    ```\n\n### 定义和发送信号\n#### 定义信号\n所有信号都是 django.dispatch.Signal 的实例。providing_args是一个列表，由信号将提供给监听者的参数名称组成。理论上是这样，但是实际上并没有任何检查来保证向监听者提供了这些参数。\n ```python\n from django.dispatch import Signal\n s_email_sended = Signal(providing_args=[\n    'email_tpl', 'email_subject', 'email_content', 'email_cate', 'sender', 'position',\n    'candidate', 'candidate_email', 'interviewer', 'interview_email'\n])\n \n# s_email_sended实例信号，向接受者提供了列表中的参数，最终接受者得到的参数还是需要看send()发送过来的参数\n ```\n \n #### 发送信号\n Django中有两种方法用于发送信号:\n \n- Signal.send(sender, **kwargs)\n- Signal.send_robust(sender, **kwargs)\n\nsend()  不会捕获任何由receiver 产生的异常。它会简单地让错误往上传递。所以在错误产生的情况，不是所有receiver 都会获得通知.\n\nsend_robust()捕获所有继承自Python Exception类的异常，并且确保所有receiver 都能得到信号的通知。如果发生错误，错误实例会在产生错误的receiver 的二元组中返回.\n\n调用 Signal.send()或者Signal.send_robust()来发送信号。你必须提供sender 参数（大多数情况下它是一个类），并且可以提供尽可能多的关键字参数。\n ```python\n s_email_sended.send(\n            sender=staff,\n            candidate=review.resume_forward.candidate,\n            candidate_email=review.resume_forward.candidate.email,\n            email_subject=subject,\n            email_content=message,\n            email_cate=FlowEmailSendedLog.EMAIL_CATE_INTERVIEWER\n        )\n ```\n \n#### Receiver 函数\n我们需要定义接收器函数，回调函数。接受器可以是Python函数或者方法\n```python\ndef my_callback(sender, **kwargs):\n    print(\"Request finished!\")\n# 注意函数接受一个sender参数，以及通配符关键字参数(**kwargs)；所有信号处理器都必须接受这些参数\n```\n#### 绑定receivers到signal\n\n1.使用receiver() 装饰器来自动连接\n```python\nfrom django.core.signals import request_finished\nfrom django.dispatch import receiver\n \n@receiver(request_finished)\ndef my_callback(sender, **kwargs):\n    print(\"Request finished!\")\n# 现在，我们的my_callback函数会在每次请求结束时调用\n```\n2.手动方式\n```python\nfrom django.core.signals import request_finished\nrequest_finished.connect(my_callback)\n```\n \n #### 断开信号\n  Signal.disconnect([receiver=None, sender=None, weak=True, dispatch_uid=None])\n  \n  调用Signal.disconnect()来断开信号的接收器。 Signal.connect()中描述了所有参数。如果接收器成功断开，返回 True ，否则返回False。\n\nreceiver 参数表示要断开的已注册receiver。如果使用dispatch_uid 标识receiver，它可以为None\n \n \n### 自定义signal\n```python\n# 定义信号，定义的信号应该在信号发送过来的字段\ns_email_sended = Signal(providing_args=[\n    'email_tpl', 'email_subject', 'email_content', 'email_cate', 'sender', 'position',\n    'candidate', 'candidate_email', 'interviewer', 'interview_email'\n])\n \nfrom django.dispatch import Signal\nfrom django.dispatch import receiver\n \n# 发送信号\ns_email_sended.send(\n            sender=staff,\n            candidate=candidate,\n            candidate_email=candidate.email,\n            email_subject=subject,\n            email_content=message,\n            email_cate=EmailSendedLog.EMAIL_CATE_TYPE\n        )\n \n# 接收信号\n@receiver(s_email_sended)\ndef create_email_send_log(**kwargs):\n    for field in ('sender', 'email_subject', 'email_content', 'email_cate'):\n        if not kwargs.get(field):\n            logs.error(\"{} can't be null: email_sender/email_subject/email_content/email_cate\".format(field))\n            return\n \n    kwargs.pop('signal')\n    EmailSendedLog.objects.create(**kwargs)\n```\n\n\n\n","source":"_posts/django-signals.md","raw":"---\ntitle: Django Signals信号\ndate: 2017-09-27 22:41:10\ntags:\n  - Signals\ncategories:\n  - Django\n---\n### 说明\n\nDjango 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组receiver某些操作已经发生;这在多处代码和同一事件有关联的情况下很有用\n\n### 预定义信号\n- 在模型 save()方法调用之前或之后发送\n    ```\n    django.db.models.signals.pre_save \n    django.db.models.signals.post_save\n    ```\n- 在模型delete()方法或查询集的delete() 方法调用之前或之后发送\n    ```\n    django.db.models.signals.pre_delete\n    django.db.models.signals.post_delete\n    ```\n- 模型上的 ManyToManyField 修改时发送\n    ```\n    django.db.models.signals.m2m_changed\n    ```\n- Django建立或关闭HTTP 请求时发送\n    ```\n    django.core.signals.request_started\n    django.core.signals.request_finished\n    ```\n\n### 定义和发送信号\n#### 定义信号\n所有信号都是 django.dispatch.Signal 的实例。providing_args是一个列表，由信号将提供给监听者的参数名称组成。理论上是这样，但是实际上并没有任何检查来保证向监听者提供了这些参数。\n ```python\n from django.dispatch import Signal\n s_email_sended = Signal(providing_args=[\n    'email_tpl', 'email_subject', 'email_content', 'email_cate', 'sender', 'position',\n    'candidate', 'candidate_email', 'interviewer', 'interview_email'\n])\n \n# s_email_sended实例信号，向接受者提供了列表中的参数，最终接受者得到的参数还是需要看send()发送过来的参数\n ```\n \n #### 发送信号\n Django中有两种方法用于发送信号:\n \n- Signal.send(sender, **kwargs)\n- Signal.send_robust(sender, **kwargs)\n\nsend()  不会捕获任何由receiver 产生的异常。它会简单地让错误往上传递。所以在错误产生的情况，不是所有receiver 都会获得通知.\n\nsend_robust()捕获所有继承自Python Exception类的异常，并且确保所有receiver 都能得到信号的通知。如果发生错误，错误实例会在产生错误的receiver 的二元组中返回.\n\n调用 Signal.send()或者Signal.send_robust()来发送信号。你必须提供sender 参数（大多数情况下它是一个类），并且可以提供尽可能多的关键字参数。\n ```python\n s_email_sended.send(\n            sender=staff,\n            candidate=review.resume_forward.candidate,\n            candidate_email=review.resume_forward.candidate.email,\n            email_subject=subject,\n            email_content=message,\n            email_cate=FlowEmailSendedLog.EMAIL_CATE_INTERVIEWER\n        )\n ```\n \n#### Receiver 函数\n我们需要定义接收器函数，回调函数。接受器可以是Python函数或者方法\n```python\ndef my_callback(sender, **kwargs):\n    print(\"Request finished!\")\n# 注意函数接受一个sender参数，以及通配符关键字参数(**kwargs)；所有信号处理器都必须接受这些参数\n```\n#### 绑定receivers到signal\n\n1.使用receiver() 装饰器来自动连接\n```python\nfrom django.core.signals import request_finished\nfrom django.dispatch import receiver\n \n@receiver(request_finished)\ndef my_callback(sender, **kwargs):\n    print(\"Request finished!\")\n# 现在，我们的my_callback函数会在每次请求结束时调用\n```\n2.手动方式\n```python\nfrom django.core.signals import request_finished\nrequest_finished.connect(my_callback)\n```\n \n #### 断开信号\n  Signal.disconnect([receiver=None, sender=None, weak=True, dispatch_uid=None])\n  \n  调用Signal.disconnect()来断开信号的接收器。 Signal.connect()中描述了所有参数。如果接收器成功断开，返回 True ，否则返回False。\n\nreceiver 参数表示要断开的已注册receiver。如果使用dispatch_uid 标识receiver，它可以为None\n \n \n### 自定义signal\n```python\n# 定义信号，定义的信号应该在信号发送过来的字段\ns_email_sended = Signal(providing_args=[\n    'email_tpl', 'email_subject', 'email_content', 'email_cate', 'sender', 'position',\n    'candidate', 'candidate_email', 'interviewer', 'interview_email'\n])\n \nfrom django.dispatch import Signal\nfrom django.dispatch import receiver\n \n# 发送信号\ns_email_sended.send(\n            sender=staff,\n            candidate=candidate,\n            candidate_email=candidate.email,\n            email_subject=subject,\n            email_content=message,\n            email_cate=EmailSendedLog.EMAIL_CATE_TYPE\n        )\n \n# 接收信号\n@receiver(s_email_sended)\ndef create_email_send_log(**kwargs):\n    for field in ('sender', 'email_subject', 'email_content', 'email_cate'):\n        if not kwargs.get(field):\n            logs.error(\"{} can't be null: email_sender/email_subject/email_content/email_cate\".format(field))\n            return\n \n    kwargs.pop('signal')\n    EmailSendedLog.objects.create(**kwargs)\n```\n\n\n\n","slug":"django-signals","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5w8002gct8uosnr1mpc","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>Django 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组receiver某些操作已经发生;这在多处代码和同一事件有关联的情况下很有用</p>\n<h3 id=\"预定义信号\"><a href=\"#预定义信号\" class=\"headerlink\" title=\"预定义信号\"></a>预定义信号</h3><ul>\n<li><p>在模型 save()方法调用之前或之后发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.models.signals.pre_save </div><div class=\"line\">django.db.models.signals.post_save</div></pre></td></tr></table></figure>\n</li>\n<li><p>在模型delete()方法或查询集的delete() 方法调用之前或之后发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.models.signals.pre_delete</div><div class=\"line\">django.db.models.signals.post_delete</div></pre></td></tr></table></figure>\n</li>\n<li><p>模型上的 ManyToManyField 修改时发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.models.signals.m2m_changed</div></pre></td></tr></table></figure>\n</li>\n<li><p>Django建立或关闭HTTP 请求时发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.core.signals.request_started</div><div class=\"line\">django.core.signals.request_finished</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定义和发送信号\"><a href=\"#定义和发送信号\" class=\"headerlink\" title=\"定义和发送信号\"></a>定义和发送信号</h3><h4 id=\"定义信号\"><a href=\"#定义信号\" class=\"headerlink\" title=\"定义信号\"></a>定义信号</h4><p>所有信号都是 django.dispatch.Signal 的实例。providing_args是一个列表，由信号将提供给监听者的参数名称组成。理论上是这样，但是实际上并没有任何检查来保证向监听者提供了这些参数。<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> Signal</div><div class=\"line\"> s_email_sended = Signal(providing_args=[</div><div class=\"line\">    <span class=\"string\">'email_tpl'</span>, <span class=\"string\">'email_subject'</span>, <span class=\"string\">'email_content'</span>, <span class=\"string\">'email_cate'</span>, <span class=\"string\">'sender'</span>, <span class=\"string\">'position'</span>,</div><div class=\"line\">    <span class=\"string\">'candidate'</span>, <span class=\"string\">'candidate_email'</span>, <span class=\"string\">'interviewer'</span>, <span class=\"string\">'interview_email'</span></div><div class=\"line\">])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># s_email_sended实例信号，向接受者提供了列表中的参数，最终接受者得到的参数还是需要看send()发送过来的参数</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"发送信号\"><a href=\"#发送信号\" class=\"headerlink\" title=\"发送信号\"></a>发送信号</h4><p> Django中有两种方法用于发送信号:</p>\n<ul>\n<li>Signal.send(sender, **kwargs)</li>\n<li>Signal.send_robust(sender, **kwargs)</li>\n</ul>\n<p>send()  不会捕获任何由receiver 产生的异常。它会简单地让错误往上传递。所以在错误产生的情况，不是所有receiver 都会获得通知.</p>\n<p>send_robust()捕获所有继承自Python Exception类的异常，并且确保所有receiver 都能得到信号的通知。如果发生错误，错误实例会在产生错误的receiver 的二元组中返回.</p>\n<p>调用 Signal.send()或者Signal.send_robust()来发送信号。你必须提供sender 参数（大多数情况下它是一个类），并且可以提供尽可能多的关键字参数。<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">s_email_sended.send(</div><div class=\"line\">           sender=staff,</div><div class=\"line\">           candidate=review.resume_forward.candidate,</div><div class=\"line\">           candidate_email=review.resume_forward.candidate.email,</div><div class=\"line\">           email_subject=subject,</div><div class=\"line\">           email_content=message,</div><div class=\"line\">           email_cate=FlowEmailSendedLog.EMAIL_CATE_INTERVIEWER</div><div class=\"line\">       )</div></pre></td></tr></table></figure></p>\n<h4 id=\"Receiver-函数\"><a href=\"#Receiver-函数\" class=\"headerlink\" title=\"Receiver 函数\"></a>Receiver 函数</h4><p>我们需要定义接收器函数，回调函数。接受器可以是Python函数或者方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_callback</span><span class=\"params\">(sender, **kwargs)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Request finished!\"</span>)</div><div class=\"line\"><span class=\"comment\"># 注意函数接受一个sender参数，以及通配符关键字参数(**kwargs)；所有信号处理器都必须接受这些参数</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"绑定receivers到signal\"><a href=\"#绑定receivers到signal\" class=\"headerlink\" title=\"绑定receivers到signal\"></a>绑定receivers到signal</h4><p>1.使用receiver() 装饰器来自动连接<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.core.signals <span class=\"keyword\">import</span> request_finished</div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> receiver</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@receiver(request_finished)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_callback</span><span class=\"params\">(sender, **kwargs)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Request finished!\"</span>)</div><div class=\"line\"><span class=\"comment\"># 现在，我们的my_callback函数会在每次请求结束时调用</span></div></pre></td></tr></table></figure></p>\n<p>2.手动方式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.core.signals <span class=\"keyword\">import</span> request_finished</div><div class=\"line\">request_finished.connect(my_callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"断开信号\"><a href=\"#断开信号\" class=\"headerlink\" title=\"断开信号\"></a>断开信号</h4><p>  Signal.disconnect([receiver=None, sender=None, weak=True, dispatch_uid=None])</p>\n<p>  调用Signal.disconnect()来断开信号的接收器。 Signal.connect()中描述了所有参数。如果接收器成功断开，返回 True ，否则返回False。</p>\n<p>receiver 参数表示要断开的已注册receiver。如果使用dispatch_uid 标识receiver，它可以为None</p>\n<h3 id=\"自定义signal\"><a href=\"#自定义signal\" class=\"headerlink\" title=\"自定义signal\"></a>自定义signal</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义信号，定义的信号应该在信号发送过来的字段</span></div><div class=\"line\">s_email_sended = Signal(providing_args=[</div><div class=\"line\">    <span class=\"string\">'email_tpl'</span>, <span class=\"string\">'email_subject'</span>, <span class=\"string\">'email_content'</span>, <span class=\"string\">'email_cate'</span>, <span class=\"string\">'sender'</span>, <span class=\"string\">'position'</span>,</div><div class=\"line\">    <span class=\"string\">'candidate'</span>, <span class=\"string\">'candidate_email'</span>, <span class=\"string\">'interviewer'</span>, <span class=\"string\">'interview_email'</span></div><div class=\"line\">])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> Signal</div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> receiver</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 发送信号</span></div><div class=\"line\">s_email_sended.send(</div><div class=\"line\">            sender=staff,</div><div class=\"line\">            candidate=candidate,</div><div class=\"line\">            candidate_email=candidate.email,</div><div class=\"line\">            email_subject=subject,</div><div class=\"line\">            email_content=message,</div><div class=\"line\">            email_cate=EmailSendedLog.EMAIL_CATE_TYPE</div><div class=\"line\">        )</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 接收信号</span></div><div class=\"line\"><span class=\"meta\">@receiver(s_email_sended)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_email_send_log</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> (<span class=\"string\">'sender'</span>, <span class=\"string\">'email_subject'</span>, <span class=\"string\">'email_content'</span>, <span class=\"string\">'email_cate'</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> kwargs.get(field):</div><div class=\"line\">            logs.error(<span class=\"string\">\"&#123;&#125; can't be null: email_sender/email_subject/email_content/email_cate\"</span>.format(field))</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"> </div><div class=\"line\">    kwargs.pop(<span class=\"string\">'signal'</span>)</div><div class=\"line\">    EmailSendedLog.objects.create(**kwargs)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>Django 提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。简单来说，信号允许特定的sender通知一组receiver某些操作已经发生;这在多处代码和同一事件有关联的情况下很有用</p>\n<h3 id=\"预定义信号\"><a href=\"#预定义信号\" class=\"headerlink\" title=\"预定义信号\"></a>预定义信号</h3><ul>\n<li><p>在模型 save()方法调用之前或之后发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.models.signals.pre_save </div><div class=\"line\">django.db.models.signals.post_save</div></pre></td></tr></table></figure>\n</li>\n<li><p>在模型delete()方法或查询集的delete() 方法调用之前或之后发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.models.signals.pre_delete</div><div class=\"line\">django.db.models.signals.post_delete</div></pre></td></tr></table></figure>\n</li>\n<li><p>模型上的 ManyToManyField 修改时发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.models.signals.m2m_changed</div></pre></td></tr></table></figure>\n</li>\n<li><p>Django建立或关闭HTTP 请求时发送</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.core.signals.request_started</div><div class=\"line\">django.core.signals.request_finished</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定义和发送信号\"><a href=\"#定义和发送信号\" class=\"headerlink\" title=\"定义和发送信号\"></a>定义和发送信号</h3><h4 id=\"定义信号\"><a href=\"#定义信号\" class=\"headerlink\" title=\"定义信号\"></a>定义信号</h4><p>所有信号都是 django.dispatch.Signal 的实例。providing_args是一个列表，由信号将提供给监听者的参数名称组成。理论上是这样，但是实际上并没有任何检查来保证向监听者提供了这些参数。<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> Signal</div><div class=\"line\"> s_email_sended = Signal(providing_args=[</div><div class=\"line\">    <span class=\"string\">'email_tpl'</span>, <span class=\"string\">'email_subject'</span>, <span class=\"string\">'email_content'</span>, <span class=\"string\">'email_cate'</span>, <span class=\"string\">'sender'</span>, <span class=\"string\">'position'</span>,</div><div class=\"line\">    <span class=\"string\">'candidate'</span>, <span class=\"string\">'candidate_email'</span>, <span class=\"string\">'interviewer'</span>, <span class=\"string\">'interview_email'</span></div><div class=\"line\">])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># s_email_sended实例信号，向接受者提供了列表中的参数，最终接受者得到的参数还是需要看send()发送过来的参数</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"发送信号\"><a href=\"#发送信号\" class=\"headerlink\" title=\"发送信号\"></a>发送信号</h4><p> Django中有两种方法用于发送信号:</p>\n<ul>\n<li>Signal.send(sender, **kwargs)</li>\n<li>Signal.send_robust(sender, **kwargs)</li>\n</ul>\n<p>send()  不会捕获任何由receiver 产生的异常。它会简单地让错误往上传递。所以在错误产生的情况，不是所有receiver 都会获得通知.</p>\n<p>send_robust()捕获所有继承自Python Exception类的异常，并且确保所有receiver 都能得到信号的通知。如果发生错误，错误实例会在产生错误的receiver 的二元组中返回.</p>\n<p>调用 Signal.send()或者Signal.send_robust()来发送信号。你必须提供sender 参数（大多数情况下它是一个类），并且可以提供尽可能多的关键字参数。<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">s_email_sended.send(</div><div class=\"line\">           sender=staff,</div><div class=\"line\">           candidate=review.resume_forward.candidate,</div><div class=\"line\">           candidate_email=review.resume_forward.candidate.email,</div><div class=\"line\">           email_subject=subject,</div><div class=\"line\">           email_content=message,</div><div class=\"line\">           email_cate=FlowEmailSendedLog.EMAIL_CATE_INTERVIEWER</div><div class=\"line\">       )</div></pre></td></tr></table></figure></p>\n<h4 id=\"Receiver-函数\"><a href=\"#Receiver-函数\" class=\"headerlink\" title=\"Receiver 函数\"></a>Receiver 函数</h4><p>我们需要定义接收器函数，回调函数。接受器可以是Python函数或者方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_callback</span><span class=\"params\">(sender, **kwargs)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Request finished!\"</span>)</div><div class=\"line\"><span class=\"comment\"># 注意函数接受一个sender参数，以及通配符关键字参数(**kwargs)；所有信号处理器都必须接受这些参数</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"绑定receivers到signal\"><a href=\"#绑定receivers到signal\" class=\"headerlink\" title=\"绑定receivers到signal\"></a>绑定receivers到signal</h4><p>1.使用receiver() 装饰器来自动连接<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.core.signals <span class=\"keyword\">import</span> request_finished</div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> receiver</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@receiver(request_finished)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_callback</span><span class=\"params\">(sender, **kwargs)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Request finished!\"</span>)</div><div class=\"line\"><span class=\"comment\"># 现在，我们的my_callback函数会在每次请求结束时调用</span></div></pre></td></tr></table></figure></p>\n<p>2.手动方式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.core.signals <span class=\"keyword\">import</span> request_finished</div><div class=\"line\">request_finished.connect(my_callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"断开信号\"><a href=\"#断开信号\" class=\"headerlink\" title=\"断开信号\"></a>断开信号</h4><p>  Signal.disconnect([receiver=None, sender=None, weak=True, dispatch_uid=None])</p>\n<p>  调用Signal.disconnect()来断开信号的接收器。 Signal.connect()中描述了所有参数。如果接收器成功断开，返回 True ，否则返回False。</p>\n<p>receiver 参数表示要断开的已注册receiver。如果使用dispatch_uid 标识receiver，它可以为None</p>\n<h3 id=\"自定义signal\"><a href=\"#自定义signal\" class=\"headerlink\" title=\"自定义signal\"></a>自定义signal</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义信号，定义的信号应该在信号发送过来的字段</span></div><div class=\"line\">s_email_sended = Signal(providing_args=[</div><div class=\"line\">    <span class=\"string\">'email_tpl'</span>, <span class=\"string\">'email_subject'</span>, <span class=\"string\">'email_content'</span>, <span class=\"string\">'email_cate'</span>, <span class=\"string\">'sender'</span>, <span class=\"string\">'position'</span>,</div><div class=\"line\">    <span class=\"string\">'candidate'</span>, <span class=\"string\">'candidate_email'</span>, <span class=\"string\">'interviewer'</span>, <span class=\"string\">'interview_email'</span></div><div class=\"line\">])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> Signal</div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> receiver</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 发送信号</span></div><div class=\"line\">s_email_sended.send(</div><div class=\"line\">            sender=staff,</div><div class=\"line\">            candidate=candidate,</div><div class=\"line\">            candidate_email=candidate.email,</div><div class=\"line\">            email_subject=subject,</div><div class=\"line\">            email_content=message,</div><div class=\"line\">            email_cate=EmailSendedLog.EMAIL_CATE_TYPE</div><div class=\"line\">        )</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 接收信号</span></div><div class=\"line\"><span class=\"meta\">@receiver(s_email_sended)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_email_send_log</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> (<span class=\"string\">'sender'</span>, <span class=\"string\">'email_subject'</span>, <span class=\"string\">'email_content'</span>, <span class=\"string\">'email_cate'</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> kwargs.get(field):</div><div class=\"line\">            logs.error(<span class=\"string\">\"&#123;&#125; can't be null: email_sender/email_subject/email_content/email_cate\"</span>.format(field))</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"> </div><div class=\"line\">    kwargs.pop(<span class=\"string\">'signal'</span>)</div><div class=\"line\">    EmailSendedLog.objects.create(**kwargs)</div></pre></td></tr></table></figure>\n"},{"title":"Docker 常用命令","date":"2017-02-09T13:08:57.000Z","_content":"**主要记录Docker工作中，常使用命令.**\n\n### 常用命令\n```\ndocker build -t name ./path(dockerfile)  #通过dockerfile来创建镜像\n    --rm=true  表示构建成功后，移除所有中间容器\n    --no-cache=false 表示在构建过程中不使用缓存\n\ndocker run  -it -p 2222:22 --name 容器名称 镜像名称  #启动docker镜像\n    -it 交互式模式启动，前台可以看到\n    -d 后台模式启动\n    -p 2222:22指定端口映射\n    --name 容器名称\n    -v  host_dir:container_dir   宿主机和容器数据映射，数据同步\n    -e 传递环境变量  -e WORDPRESS_DB_HOST=x.x.x.x\n    --entrypoint=/bin/bash   将cmd命令的环境覆盖掉\n如：docker run -itd -p 80:80 --name nginx_php -v /root/html:/data/www/html nginx1.8\ndocker ps  # 将处于run状态下的容器显示出来\ndocker ps -a   #将所有docker状态的容器显示出来\ndocker info     #查看docker信息\ndocker images # 查看镜像\ndocker pull   xxx  #下载镜像\ndocker push  xxx  #将镜像推送到registry\ndocker search xxxx #查询镜像\ndocker diff     #列出容器内发生变化的文件和目录（A-Add，D-Delete，C-Change）\ndocker commit  xxxx    abc/yyy  #把有修改的container提交到新的images中\ndocker tag  原镜像名称     新名称    #给镜像重命名\ndocker top container    #查看正在运行的容器中的进程的运行情况\ndocker port container   #用于查看容器与主机之间的端口映射关系信息\ndocker exec -it  container_id(base(名称)) /bin/bash    #进入docker容器里面\ndocker stop b1430f1a3daa    #停止容器运行\nCtrl +p +q                         #进入容器后，从终端退出容器\ndocker rm  -f 容器名称   #删除容器，-f强制删除\ndocker rmi  image  #移除一个或多个镜像\ndocker inspect  #查看镜像或容器的底层详细信息\ndocker inspect -f {{.NetworkSettings.IPAddress}}  xxxxx   -f #查看特定信息\ndocker ps -qa  # 列出所有的容器(含沉睡镜像)的容器ID号\ndocker rm `docker ps -qa` 将沉睡的容器删除\n```\n### 存储相关命令\n```\ndocker save -o ubuntu_14.04.tar ubuntu:14.04   #存出镜像\ndocker load < ubuntu_14.04.tar   #载入镜像，导入相关的元数据（包括标签等）\ndocker export ID(7691a814370e) >ubuntu.tar   #导出容器，导出容器快照到本地\ndocker import             #导入容器快照，可以导入远程文件、本地文件和目录，使用http的url从远程位置导入，本地或目录的导入需要使用-参数\n如：docker import http://xxx.yyy.com/ext.tar.gz  xxx/yyy  || docker import - ubuntu:14.04\n```\n### 日志相关命令\n```\ndocker events     #打印容器实时的系统事件\ndocker history  images    #打印指定image的每层image命令行的历史记录\ndocker logs container  #批量打印出容器中进程的运行日志\n```\n\n","source":"_posts/docker-command.md","raw":"---\ntitle: Docker 常用命令\ndate: 2017-02-09 21:08:57\ntags:\n  - Docker\ncategories:\n  - Docker\n---\n**主要记录Docker工作中，常使用命令.**\n\n### 常用命令\n```\ndocker build -t name ./path(dockerfile)  #通过dockerfile来创建镜像\n    --rm=true  表示构建成功后，移除所有中间容器\n    --no-cache=false 表示在构建过程中不使用缓存\n\ndocker run  -it -p 2222:22 --name 容器名称 镜像名称  #启动docker镜像\n    -it 交互式模式启动，前台可以看到\n    -d 后台模式启动\n    -p 2222:22指定端口映射\n    --name 容器名称\n    -v  host_dir:container_dir   宿主机和容器数据映射，数据同步\n    -e 传递环境变量  -e WORDPRESS_DB_HOST=x.x.x.x\n    --entrypoint=/bin/bash   将cmd命令的环境覆盖掉\n如：docker run -itd -p 80:80 --name nginx_php -v /root/html:/data/www/html nginx1.8\ndocker ps  # 将处于run状态下的容器显示出来\ndocker ps -a   #将所有docker状态的容器显示出来\ndocker info     #查看docker信息\ndocker images # 查看镜像\ndocker pull   xxx  #下载镜像\ndocker push  xxx  #将镜像推送到registry\ndocker search xxxx #查询镜像\ndocker diff     #列出容器内发生变化的文件和目录（A-Add，D-Delete，C-Change）\ndocker commit  xxxx    abc/yyy  #把有修改的container提交到新的images中\ndocker tag  原镜像名称     新名称    #给镜像重命名\ndocker top container    #查看正在运行的容器中的进程的运行情况\ndocker port container   #用于查看容器与主机之间的端口映射关系信息\ndocker exec -it  container_id(base(名称)) /bin/bash    #进入docker容器里面\ndocker stop b1430f1a3daa    #停止容器运行\nCtrl +p +q                         #进入容器后，从终端退出容器\ndocker rm  -f 容器名称   #删除容器，-f强制删除\ndocker rmi  image  #移除一个或多个镜像\ndocker inspect  #查看镜像或容器的底层详细信息\ndocker inspect -f {{.NetworkSettings.IPAddress}}  xxxxx   -f #查看特定信息\ndocker ps -qa  # 列出所有的容器(含沉睡镜像)的容器ID号\ndocker rm `docker ps -qa` 将沉睡的容器删除\n```\n### 存储相关命令\n```\ndocker save -o ubuntu_14.04.tar ubuntu:14.04   #存出镜像\ndocker load < ubuntu_14.04.tar   #载入镜像，导入相关的元数据（包括标签等）\ndocker export ID(7691a814370e) >ubuntu.tar   #导出容器，导出容器快照到本地\ndocker import             #导入容器快照，可以导入远程文件、本地文件和目录，使用http的url从远程位置导入，本地或目录的导入需要使用-参数\n如：docker import http://xxx.yyy.com/ext.tar.gz  xxx/yyy  || docker import - ubuntu:14.04\n```\n### 日志相关命令\n```\ndocker events     #打印容器实时的系统事件\ndocker history  images    #打印指定image的每层image命令行的历史记录\ndocker logs container  #批量打印出容器中进程的运行日志\n```\n\n","slug":"docker-command","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wd002ict8uedd69nbd","content":"<p><strong>主要记录Docker工作中，常使用命令.</strong></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t name ./path(dockerfile)  #通过dockerfile来创建镜像</div><div class=\"line\">    --rm=true  表示构建成功后，移除所有中间容器</div><div class=\"line\">    --no-cache=false 表示在构建过程中不使用缓存</div><div class=\"line\"></div><div class=\"line\">docker run  -it -p 2222:22 --name 容器名称 镜像名称  #启动docker镜像</div><div class=\"line\">    -it 交互式模式启动，前台可以看到</div><div class=\"line\">    -d 后台模式启动</div><div class=\"line\">    -p 2222:22指定端口映射</div><div class=\"line\">    --name 容器名称</div><div class=\"line\">    -v  host_dir:container_dir   宿主机和容器数据映射，数据同步</div><div class=\"line\">    -e 传递环境变量  -e WORDPRESS_DB_HOST=x.x.x.x</div><div class=\"line\">    --entrypoint=/bin/bash   将cmd命令的环境覆盖掉</div><div class=\"line\">如：docker run -itd -p 80:80 --name nginx_php -v /root/html:/data/www/html nginx1.8</div><div class=\"line\">docker ps  # 将处于run状态下的容器显示出来</div><div class=\"line\">docker ps -a   #将所有docker状态的容器显示出来</div><div class=\"line\">docker info     #查看docker信息</div><div class=\"line\">docker images # 查看镜像</div><div class=\"line\">docker pull   xxx  #下载镜像</div><div class=\"line\">docker push  xxx  #将镜像推送到registry</div><div class=\"line\">docker search xxxx #查询镜像</div><div class=\"line\">docker diff     #列出容器内发生变化的文件和目录（A-Add，D-Delete，C-Change）</div><div class=\"line\">docker commit  xxxx    abc/yyy  #把有修改的container提交到新的images中</div><div class=\"line\">docker tag  原镜像名称     新名称    #给镜像重命名</div><div class=\"line\">docker top container    #查看正在运行的容器中的进程的运行情况</div><div class=\"line\">docker port container   #用于查看容器与主机之间的端口映射关系信息</div><div class=\"line\">docker exec -it  container_id(base(名称)) /bin/bash    #进入docker容器里面</div><div class=\"line\">docker stop b1430f1a3daa    #停止容器运行</div><div class=\"line\">Ctrl +p +q                         #进入容器后，从终端退出容器</div><div class=\"line\">docker rm  -f 容器名称   #删除容器，-f强制删除</div><div class=\"line\">docker rmi  image  #移除一个或多个镜像</div><div class=\"line\">docker inspect  #查看镜像或容器的底层详细信息</div><div class=\"line\">docker inspect -f &#123;&#123;.NetworkSettings.IPAddress&#125;&#125;  xxxxx   -f #查看特定信息</div><div class=\"line\">docker ps -qa  # 列出所有的容器(含沉睡镜像)的容器ID号</div><div class=\"line\">docker rm `docker ps -qa` 将沉睡的容器删除</div></pre></td></tr></table></figure>\n<h3 id=\"存储相关命令\"><a href=\"#存储相关命令\" class=\"headerlink\" title=\"存储相关命令\"></a>存储相关命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker save -o ubuntu_14.04.tar ubuntu:14.04   #存出镜像</div><div class=\"line\">docker load &lt; ubuntu_14.04.tar   #载入镜像，导入相关的元数据（包括标签等）</div><div class=\"line\">docker export ID(7691a814370e) &gt;ubuntu.tar   #导出容器，导出容器快照到本地</div><div class=\"line\">docker import             #导入容器快照，可以导入远程文件、本地文件和目录，使用http的url从远程位置导入，本地或目录的导入需要使用-参数</div><div class=\"line\">如：docker import http://xxx.yyy.com/ext.tar.gz  xxx/yyy  || docker import - ubuntu:14.04</div></pre></td></tr></table></figure>\n<h3 id=\"日志相关命令\"><a href=\"#日志相关命令\" class=\"headerlink\" title=\"日志相关命令\"></a>日志相关命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker events     #打印容器实时的系统事件</div><div class=\"line\">docker history  images    #打印指定image的每层image命令行的历史记录</div><div class=\"line\">docker logs container  #批量打印出容器中进程的运行日志</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>主要记录Docker工作中，常使用命令.</strong></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t name ./path(dockerfile)  #通过dockerfile来创建镜像</div><div class=\"line\">    --rm=true  表示构建成功后，移除所有中间容器</div><div class=\"line\">    --no-cache=false 表示在构建过程中不使用缓存</div><div class=\"line\"></div><div class=\"line\">docker run  -it -p 2222:22 --name 容器名称 镜像名称  #启动docker镜像</div><div class=\"line\">    -it 交互式模式启动，前台可以看到</div><div class=\"line\">    -d 后台模式启动</div><div class=\"line\">    -p 2222:22指定端口映射</div><div class=\"line\">    --name 容器名称</div><div class=\"line\">    -v  host_dir:container_dir   宿主机和容器数据映射，数据同步</div><div class=\"line\">    -e 传递环境变量  -e WORDPRESS_DB_HOST=x.x.x.x</div><div class=\"line\">    --entrypoint=/bin/bash   将cmd命令的环境覆盖掉</div><div class=\"line\">如：docker run -itd -p 80:80 --name nginx_php -v /root/html:/data/www/html nginx1.8</div><div class=\"line\">docker ps  # 将处于run状态下的容器显示出来</div><div class=\"line\">docker ps -a   #将所有docker状态的容器显示出来</div><div class=\"line\">docker info     #查看docker信息</div><div class=\"line\">docker images # 查看镜像</div><div class=\"line\">docker pull   xxx  #下载镜像</div><div class=\"line\">docker push  xxx  #将镜像推送到registry</div><div class=\"line\">docker search xxxx #查询镜像</div><div class=\"line\">docker diff     #列出容器内发生变化的文件和目录（A-Add，D-Delete，C-Change）</div><div class=\"line\">docker commit  xxxx    abc/yyy  #把有修改的container提交到新的images中</div><div class=\"line\">docker tag  原镜像名称     新名称    #给镜像重命名</div><div class=\"line\">docker top container    #查看正在运行的容器中的进程的运行情况</div><div class=\"line\">docker port container   #用于查看容器与主机之间的端口映射关系信息</div><div class=\"line\">docker exec -it  container_id(base(名称)) /bin/bash    #进入docker容器里面</div><div class=\"line\">docker stop b1430f1a3daa    #停止容器运行</div><div class=\"line\">Ctrl +p +q                         #进入容器后，从终端退出容器</div><div class=\"line\">docker rm  -f 容器名称   #删除容器，-f强制删除</div><div class=\"line\">docker rmi  image  #移除一个或多个镜像</div><div class=\"line\">docker inspect  #查看镜像或容器的底层详细信息</div><div class=\"line\">docker inspect -f &#123;&#123;.NetworkSettings.IPAddress&#125;&#125;  xxxxx   -f #查看特定信息</div><div class=\"line\">docker ps -qa  # 列出所有的容器(含沉睡镜像)的容器ID号</div><div class=\"line\">docker rm `docker ps -qa` 将沉睡的容器删除</div></pre></td></tr></table></figure>\n<h3 id=\"存储相关命令\"><a href=\"#存储相关命令\" class=\"headerlink\" title=\"存储相关命令\"></a>存储相关命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker save -o ubuntu_14.04.tar ubuntu:14.04   #存出镜像</div><div class=\"line\">docker load &lt; ubuntu_14.04.tar   #载入镜像，导入相关的元数据（包括标签等）</div><div class=\"line\">docker export ID(7691a814370e) &gt;ubuntu.tar   #导出容器，导出容器快照到本地</div><div class=\"line\">docker import             #导入容器快照，可以导入远程文件、本地文件和目录，使用http的url从远程位置导入，本地或目录的导入需要使用-参数</div><div class=\"line\">如：docker import http://xxx.yyy.com/ext.tar.gz  xxx/yyy  || docker import - ubuntu:14.04</div></pre></td></tr></table></figure>\n<h3 id=\"日志相关命令\"><a href=\"#日志相关命令\" class=\"headerlink\" title=\"日志相关命令\"></a>日志相关命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker events     #打印容器实时的系统事件</div><div class=\"line\">docker history  images    #打印指定image的每层image命令行的历史记录</div><div class=\"line\">docker logs container  #批量打印出容器中进程的运行日志</div></pre></td></tr></table></figure>\n"},{"title":"Docker Compose","date":"2017-02-11T01:38:57.000Z","_content":"#### 功能\nDocker Compose 是Docker容器进行编排的工具，定义和运行多容器的应用，可以一条命令启动多个容器.\n#### 安装\n```bash\ncurl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\ndocker-compose -version\n```\n#### 常用命令\n需要在docker-compose.yml存在的当前目录中\n```bash\ndocker-compose up -d    #启动\ndocker-compose ps   #查看容器列表\n--verbose：输出详细信息\n-f 制定一个非docker-compose.yml命名的yaml文件\n-p 设置一个项目名称（默认是directory名）\n \nbuild：构建服务\nkill -s SIGINT：给服务发送特定的信号。\nlogs：输出日志\nport：输出绑定的端口\nps：输出运行的容器\npull：pull服务的image\nrm：删除停止的容器\nrun: 运行某个服务，例如docker-compose run web python manage.py shell\nstart：运行某个服务中存在的容器\nstop:停止某个服务中存在的容器\nrestart:重启相关容器\nup：create + run + attach容器到服务\nscale：设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3\n```\n#### yml语法\n[compose-file](https://docs.docker.com/compose/compose-file/)\n```bash\nimage ：镜像id\nbuild:直接从pwd的Dockerfile来build，而非通过image选项来pull\ncontainer_name：容器名称\nrestart: always 重启\nlinks：连接到那些容器,该yaml文件中的容器，会将相关信息存放在/etc/hosts\nexternal_links：连接到该compose.yaml文件之外的容器中，同links\ndepends_on：依赖关系说明\ncommand：执行command命令\nports：导出端口，如：ports:-\"3000\"-\"8000:8000\"-\"127.0.0.1:8001:8001\"\nexpose：导出端口，但不映射到宿主机的端口上。它仅对links的容器开放\nvolumes：加载路径作为卷，可以指定只读模式\nvolumes_from：加载其他容器或者服务的所有卷\nenv_file：从一个文件中导入环境变量，文件的格式为RACK_ENV=development\nenvironment:设置环境变量的值\nextends:扩展另一个服务，可以覆盖其中的一些选项\nnet：容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个\ndns：可以设置一个或多个自定义的DNS地址\ndns_search：dns搜索的域名\nlogging：日志配置\n```\n#### 实例\n```bash\n# https://github.com/vmware/harbor\nversion: '2'    #指定compose版本\nservices:\n  log:    #服务名称\n    image: vmware/harbor-log    #指定镜像名称\n    container_name: harbor-log  #启动后的容器名称\n    restart: always    #down掉自动重启\n    volumes:    #宿主机和容器关联的目录\n      - /var/log/harbor/:/var/log/docker/\n    ports:    #映射出来的端口\n      - 1514:514\n  registry:\n    image: library/registry:2.5.0\n    container_name: registry\n    restart: always\n    volumes:\n      - /data/registry:/storage\n      - ./common/config/registry/:/etc/registry/\n    environment:    #设置环境变量\n      - GODEBUG=netdns=cgo\n    command:    #容器内执行命令\n      [\"serve\", \"/etc/registry/config.yml\"]\n    depends_on:    #依赖关系\n      - log\n    logging:    #日志设置\n      driver: \"syslog\"    #指定日志设备的容器\n      options:  \n        syslog-address: \"tcp://127.0.0.1:1514\" #日志连接地址\n        tag: \"registry\"    #日志标签\n```\n\n\n\n\n\n\n\n","source":"_posts/docker-compose.md","raw":"---\ntitle: Docker Compose\ndate: 2017-02-11 09:38:57\ntags:\n  - docker-compose\ncategories:\n  - Docker\n---\n#### 功能\nDocker Compose 是Docker容器进行编排的工具，定义和运行多容器的应用，可以一条命令启动多个容器.\n#### 安装\n```bash\ncurl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\ndocker-compose -version\n```\n#### 常用命令\n需要在docker-compose.yml存在的当前目录中\n```bash\ndocker-compose up -d    #启动\ndocker-compose ps   #查看容器列表\n--verbose：输出详细信息\n-f 制定一个非docker-compose.yml命名的yaml文件\n-p 设置一个项目名称（默认是directory名）\n \nbuild：构建服务\nkill -s SIGINT：给服务发送特定的信号。\nlogs：输出日志\nport：输出绑定的端口\nps：输出运行的容器\npull：pull服务的image\nrm：删除停止的容器\nrun: 运行某个服务，例如docker-compose run web python manage.py shell\nstart：运行某个服务中存在的容器\nstop:停止某个服务中存在的容器\nrestart:重启相关容器\nup：create + run + attach容器到服务\nscale：设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3\n```\n#### yml语法\n[compose-file](https://docs.docker.com/compose/compose-file/)\n```bash\nimage ：镜像id\nbuild:直接从pwd的Dockerfile来build，而非通过image选项来pull\ncontainer_name：容器名称\nrestart: always 重启\nlinks：连接到那些容器,该yaml文件中的容器，会将相关信息存放在/etc/hosts\nexternal_links：连接到该compose.yaml文件之外的容器中，同links\ndepends_on：依赖关系说明\ncommand：执行command命令\nports：导出端口，如：ports:-\"3000\"-\"8000:8000\"-\"127.0.0.1:8001:8001\"\nexpose：导出端口，但不映射到宿主机的端口上。它仅对links的容器开放\nvolumes：加载路径作为卷，可以指定只读模式\nvolumes_from：加载其他容器或者服务的所有卷\nenv_file：从一个文件中导入环境变量，文件的格式为RACK_ENV=development\nenvironment:设置环境变量的值\nextends:扩展另一个服务，可以覆盖其中的一些选项\nnet：容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个\ndns：可以设置一个或多个自定义的DNS地址\ndns_search：dns搜索的域名\nlogging：日志配置\n```\n#### 实例\n```bash\n# https://github.com/vmware/harbor\nversion: '2'    #指定compose版本\nservices:\n  log:    #服务名称\n    image: vmware/harbor-log    #指定镜像名称\n    container_name: harbor-log  #启动后的容器名称\n    restart: always    #down掉自动重启\n    volumes:    #宿主机和容器关联的目录\n      - /var/log/harbor/:/var/log/docker/\n    ports:    #映射出来的端口\n      - 1514:514\n  registry:\n    image: library/registry:2.5.0\n    container_name: registry\n    restart: always\n    volumes:\n      - /data/registry:/storage\n      - ./common/config/registry/:/etc/registry/\n    environment:    #设置环境变量\n      - GODEBUG=netdns=cgo\n    command:    #容器内执行命令\n      [\"serve\", \"/etc/registry/config.yml\"]\n    depends_on:    #依赖关系\n      - log\n    logging:    #日志设置\n      driver: \"syslog\"    #指定日志设备的容器\n      options:  \n        syslog-address: \"tcp://127.0.0.1:1514\" #日志连接地址\n        tag: \"registry\"    #日志标签\n```\n\n\n\n\n\n\n\n","slug":"docker-compose","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wf002mct8ujste0swe","content":"<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><p>Docker Compose 是Docker容器进行编排的工具，定义和运行多容器的应用，可以一条命令启动多个容器.</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose-`uname <span class=\"_\">-s</span>`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</div><div class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</div><div class=\"line\">docker-compose -version</div></pre></td></tr></table></figure>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>需要在docker-compose.yml存在的当前目录中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-compose up <span class=\"_\">-d</span>    <span class=\"comment\">#启动</span></div><div class=\"line\">docker-compose ps   <span class=\"comment\">#查看容器列表</span></div><div class=\"line\">--verbose：输出详细信息</div><div class=\"line\"><span class=\"_\">-f</span> 制定一个非docker-compose.yml命名的yaml文件</div><div class=\"line\">-p 设置一个项目名称（默认是directory名）</div><div class=\"line\"> </div><div class=\"line\">build：构建服务</div><div class=\"line\"><span class=\"built_in\">kill</span> <span class=\"_\">-s</span> SIGINT：给服务发送特定的信号。</div><div class=\"line\">logs：输出日志</div><div class=\"line\">port：输出绑定的端口</div><div class=\"line\">ps：输出运行的容器</div><div class=\"line\">pull：pull服务的image</div><div class=\"line\">rm：删除停止的容器</div><div class=\"line\">run: 运行某个服务，例如docker-compose run web python manage.py shell</div><div class=\"line\">start：运行某个服务中存在的容器</div><div class=\"line\">stop:停止某个服务中存在的容器</div><div class=\"line\">restart:重启相关容器</div><div class=\"line\">up：create + run + attach容器到服务</div><div class=\"line\">scale：设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3</div></pre></td></tr></table></figure></p>\n<h4 id=\"yml语法\"><a href=\"#yml语法\" class=\"headerlink\" title=\"yml语法\"></a>yml语法</h4><p><a href=\"https://docs.docker.com/compose/compose-file/\" target=\"_blank\" rel=\"external\">compose-file</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">image ：镜像id</div><div class=\"line\">build:直接从<span class=\"built_in\">pwd</span>的Dockerfile来build，而非通过image选项来pull</div><div class=\"line\">container_name：容器名称</div><div class=\"line\">restart: always 重启</div><div class=\"line\">links：连接到那些容器,该yaml文件中的容器，会将相关信息存放在/etc/hosts</div><div class=\"line\">external_links：连接到该compose.yaml文件之外的容器中，同links</div><div class=\"line\">depends_on：依赖关系说明</div><div class=\"line\"><span class=\"built_in\">command</span>：执行<span class=\"built_in\">command</span>命令</div><div class=\"line\">ports：导出端口，如：ports:-<span class=\"string\">\"3000\"</span>-<span class=\"string\">\"8000:8000\"</span>-<span class=\"string\">\"127.0.0.1:8001:8001\"</span></div><div class=\"line\">expose：导出端口，但不映射到宿主机的端口上。它仅对links的容器开放</div><div class=\"line\">volumes：加载路径作为卷，可以指定只读模式</div><div class=\"line\">volumes_from：加载其他容器或者服务的所有卷</div><div class=\"line\">env_file：从一个文件中导入环境变量，文件的格式为RACK_ENV=development</div><div class=\"line\">environment:设置环境变量的值</div><div class=\"line\">extends:扩展另一个服务，可以覆盖其中的一些选项</div><div class=\"line\">net：容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个</div><div class=\"line\">dns：可以设置一个或多个自定义的DNS地址</div><div class=\"line\">dns_search：dns搜索的域名</div><div class=\"line\">logging：日志配置</div></pre></td></tr></table></figure></p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># https://github.com/vmware/harbor</span></div><div class=\"line\">version: <span class=\"string\">'2'</span>    <span class=\"comment\">#指定compose版本</span></div><div class=\"line\">services:</div><div class=\"line\">  <span class=\"built_in\">log</span>:    <span class=\"comment\">#服务名称</span></div><div class=\"line\">    image: vmware/harbor-log    <span class=\"comment\">#指定镜像名称</span></div><div class=\"line\">    container_name: harbor-log  <span class=\"comment\">#启动后的容器名称</span></div><div class=\"line\">    restart: always    <span class=\"comment\">#down掉自动重启</span></div><div class=\"line\">    volumes:    <span class=\"comment\">#宿主机和容器关联的目录</span></div><div class=\"line\">      - /var/<span class=\"built_in\">log</span>/harbor/:/var/<span class=\"built_in\">log</span>/docker/</div><div class=\"line\">    ports:    <span class=\"comment\">#映射出来的端口</span></div><div class=\"line\">      - 1514:514</div><div class=\"line\">  registry:</div><div class=\"line\">    image: library/registry:2.5.0</div><div class=\"line\">    container_name: registry</div><div class=\"line\">    restart: always</div><div class=\"line\">    volumes:</div><div class=\"line\">      - /data/registry:/storage</div><div class=\"line\">      - ./common/config/registry/:/etc/registry/</div><div class=\"line\">    environment:    <span class=\"comment\">#设置环境变量</span></div><div class=\"line\">      - GODEBUG=netdns=cgo</div><div class=\"line\">    <span class=\"built_in\">command</span>:    <span class=\"comment\">#容器内执行命令</span></div><div class=\"line\">      [<span class=\"string\">\"serve\"</span>, <span class=\"string\">\"/etc/registry/config.yml\"</span>]</div><div class=\"line\">    depends_on:    <span class=\"comment\">#依赖关系</span></div><div class=\"line\">      - <span class=\"built_in\">log</span></div><div class=\"line\">    logging:    <span class=\"comment\">#日志设置</span></div><div class=\"line\">      driver: <span class=\"string\">\"syslog\"</span>    <span class=\"comment\">#指定日志设备的容器</span></div><div class=\"line\">      options:  </div><div class=\"line\">        syslog-address: <span class=\"string\">\"tcp://127.0.0.1:1514\"</span> <span class=\"comment\">#日志连接地址</span></div><div class=\"line\">        tag: <span class=\"string\">\"registry\"</span>    <span class=\"comment\">#日志标签</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><p>Docker Compose 是Docker容器进行编排的工具，定义和运行多容器的应用，可以一条命令启动多个容器.</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose-`uname <span class=\"_\">-s</span>`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</div><div class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</div><div class=\"line\">docker-compose -version</div></pre></td></tr></table></figure>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p>需要在docker-compose.yml存在的当前目录中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-compose up <span class=\"_\">-d</span>    <span class=\"comment\">#启动</span></div><div class=\"line\">docker-compose ps   <span class=\"comment\">#查看容器列表</span></div><div class=\"line\">--verbose：输出详细信息</div><div class=\"line\"><span class=\"_\">-f</span> 制定一个非docker-compose.yml命名的yaml文件</div><div class=\"line\">-p 设置一个项目名称（默认是directory名）</div><div class=\"line\"> </div><div class=\"line\">build：构建服务</div><div class=\"line\"><span class=\"built_in\">kill</span> <span class=\"_\">-s</span> SIGINT：给服务发送特定的信号。</div><div class=\"line\">logs：输出日志</div><div class=\"line\">port：输出绑定的端口</div><div class=\"line\">ps：输出运行的容器</div><div class=\"line\">pull：pull服务的image</div><div class=\"line\">rm：删除停止的容器</div><div class=\"line\">run: 运行某个服务，例如docker-compose run web python manage.py shell</div><div class=\"line\">start：运行某个服务中存在的容器</div><div class=\"line\">stop:停止某个服务中存在的容器</div><div class=\"line\">restart:重启相关容器</div><div class=\"line\">up：create + run + attach容器到服务</div><div class=\"line\">scale：设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3</div></pre></td></tr></table></figure></p>\n<h4 id=\"yml语法\"><a href=\"#yml语法\" class=\"headerlink\" title=\"yml语法\"></a>yml语法</h4><p><a href=\"https://docs.docker.com/compose/compose-file/\">compose-file</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">image ：镜像id</div><div class=\"line\">build:直接从<span class=\"built_in\">pwd</span>的Dockerfile来build，而非通过image选项来pull</div><div class=\"line\">container_name：容器名称</div><div class=\"line\">restart: always 重启</div><div class=\"line\">links：连接到那些容器,该yaml文件中的容器，会将相关信息存放在/etc/hosts</div><div class=\"line\">external_links：连接到该compose.yaml文件之外的容器中，同links</div><div class=\"line\">depends_on：依赖关系说明</div><div class=\"line\"><span class=\"built_in\">command</span>：执行<span class=\"built_in\">command</span>命令</div><div class=\"line\">ports：导出端口，如：ports:-<span class=\"string\">\"3000\"</span>-<span class=\"string\">\"8000:8000\"</span>-<span class=\"string\">\"127.0.0.1:8001:8001\"</span></div><div class=\"line\">expose：导出端口，但不映射到宿主机的端口上。它仅对links的容器开放</div><div class=\"line\">volumes：加载路径作为卷，可以指定只读模式</div><div class=\"line\">volumes_from：加载其他容器或者服务的所有卷</div><div class=\"line\">env_file：从一个文件中导入环境变量，文件的格式为RACK_ENV=development</div><div class=\"line\">environment:设置环境变量的值</div><div class=\"line\">extends:扩展另一个服务，可以覆盖其中的一些选项</div><div class=\"line\">net：容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个</div><div class=\"line\">dns：可以设置一个或多个自定义的DNS地址</div><div class=\"line\">dns_search：dns搜索的域名</div><div class=\"line\">logging：日志配置</div></pre></td></tr></table></figure></p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># https://github.com/vmware/harbor</span></div><div class=\"line\">version: <span class=\"string\">'2'</span>    <span class=\"comment\">#指定compose版本</span></div><div class=\"line\">services:</div><div class=\"line\">  <span class=\"built_in\">log</span>:    <span class=\"comment\">#服务名称</span></div><div class=\"line\">    image: vmware/harbor-log    <span class=\"comment\">#指定镜像名称</span></div><div class=\"line\">    container_name: harbor-log  <span class=\"comment\">#启动后的容器名称</span></div><div class=\"line\">    restart: always    <span class=\"comment\">#down掉自动重启</span></div><div class=\"line\">    volumes:    <span class=\"comment\">#宿主机和容器关联的目录</span></div><div class=\"line\">      - /var/<span class=\"built_in\">log</span>/harbor/:/var/<span class=\"built_in\">log</span>/docker/</div><div class=\"line\">    ports:    <span class=\"comment\">#映射出来的端口</span></div><div class=\"line\">      - 1514:514</div><div class=\"line\">  registry:</div><div class=\"line\">    image: library/registry:2.5.0</div><div class=\"line\">    container_name: registry</div><div class=\"line\">    restart: always</div><div class=\"line\">    volumes:</div><div class=\"line\">      - /data/registry:/storage</div><div class=\"line\">      - ./common/config/registry/:/etc/registry/</div><div class=\"line\">    environment:    <span class=\"comment\">#设置环境变量</span></div><div class=\"line\">      - GODEBUG=netdns=cgo</div><div class=\"line\">    <span class=\"built_in\">command</span>:    <span class=\"comment\">#容器内执行命令</span></div><div class=\"line\">      [<span class=\"string\">\"serve\"</span>, <span class=\"string\">\"/etc/registry/config.yml\"</span>]</div><div class=\"line\">    depends_on:    <span class=\"comment\">#依赖关系</span></div><div class=\"line\">      - <span class=\"built_in\">log</span></div><div class=\"line\">    logging:    <span class=\"comment\">#日志设置</span></div><div class=\"line\">      driver: <span class=\"string\">\"syslog\"</span>    <span class=\"comment\">#指定日志设备的容器</span></div><div class=\"line\">      options:  </div><div class=\"line\">        syslog-address: <span class=\"string\">\"tcp://127.0.0.1:1514\"</span> <span class=\"comment\">#日志连接地址</span></div><div class=\"line\">        tag: <span class=\"string\">\"registry\"</span>    <span class=\"comment\">#日志标签</span></div></pre></td></tr></table></figure>\n"},{"title":"Django 测试","date":"2017-03-28T12:55:48.000Z","_content":"\n#### 说明\nPython单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：\n\n![](https://ttxsgoto.github.io/img/django/django_test01.png)\n\n**SimpleTestCase**:扩展了unittest.TestCase的一些基本功能\n- 保存和恢复python警告机制状态\n- 使用client Client\n- 自定义测试时间URL maps\n- 使用modified settings运行测试的能力\n\n**TransactionTestCase**:事务测试类，继承SimpleTestCase\n\n**TestCase**:用来测试网站正常转换unittest.TestCase到Django TestCase\n- 自动加载fixtures\n- 将测试包含在两个嵌套的atomic块中：一个用于整个类，一个用于每个测试\n- 创建一个TestClient实例\n- Django特定的断言用于测试重定向和形式错误\n\n**LiveServerTestCase**:基本上与TransactionTestCase相同，具有一个额外的功能：它在设置的后台启动一个活动的Django服务器，并在卸载时将其关闭\n\n#### 特殊方法\n- setUp():每个测试函数运行前执行\n- tearDown():每个测试函数运行完成后执行\n- setUpClass(cls):必须使用@classmethod装饰器，所有test函数运行前执行一次\n- tearDownClass(cls):必须使用@classmethod装饰器，所有test函数运行完成后执行一次\n\n\n**默认测试客户端**\ndjango.test.*TestCase实例中的每个测试用例都可以访问Django测试客户端的实例。此客户端可以作为self.client访问。每个测试都重新创建此客户端，因此您不必担心从一个测试到另一个测试的状态（例如Cookie）\n实例如下：\n```python\nimport unittest\nfrom django.test import Client\n \nclass SimpleTest(unittest.TestCase):\n    def test_details(self):\n        client = Client()\n        response = client.get('/customer/details/')\n        self.assertEqual(response.status_code, 200)\n \n    def test_index(self):\n        client = Client()\n        response = client.get('/customer/index/')\n        self.assertEqual(response.status_code, 200)\n \n################等同于如下################\nfrom django.test import TestCase\n \nclass SimpleTest(TestCase):\n    def test_details(self):\n        response = self.client.get('/customer/details/')\n        self.assertEqual(response.status_code, 200)\n \n    def test_index(self):\n        response = self.client.get('/customer/index/')\n        self.assertEqual(response.status_code, 200)\n```\n\n#### 测试客户端\n```\n>>> from django.test import Client\n>>> c = Client()\n>>> response = c.post('/login/', {'username': 'john', 'password': 'smith'})\n>>> response.status_code\n200\n>>> response = c.get('/customer/details/')\n>>> response.content    # 返回数据主体\n```\n\n#### 测试响应属性\n```\n- client:用于生成导致响应的请求的测试客户端\n- content:响应的主体\n- context:用于呈现产生响应内容的模板的模板Context实例\n- request:响应的请求数据\n- wsgi_request:由生成响应的测试处理程序生成的WSGIRequest实例\n- status_code:响应http状态码\n- templates:用于渲染最终内容的Template实例列表，按渲染顺序排列\n- resolver_match:响应的实例ResolverMatch\n```\n\n#### 常用断言（runtests/case.py）\n- self.assertEqual(first, second)\n- self.assertNotEqual(first, second)\n- self.assertFalse(expr)\n- self.assertTrue(expr)\n- self.assertEqual(first, second)\n- self.assertNotEqual(first, second)\n- self.assertSequenceEqual(seq1, seq2)\n- self.assertListEqual(list1, list2):\n- self.assertTupleEqual(tuple1, tuple2):\n- self.assertDictEqual(dic1, dic2):\n- self.assertSetEqual(set1, set2):\n- self.assertIn(mem, container):\n- self.assertIs(expr1, expr2)\n- self.assertIsNotNone(obj):\n- self.assertIsNone(obj)\n- self.assertIsInstance(obj, cls)\n\n#### 跳过测试\nunittest库提供@skipIf和@skipUnless装饰器，如果提前知道这些测试在某些条件下会失败，可以跳过测试\n\n\n#### 运行\n```\npython manage.py test runtests.test_user\npython manage.py test xxx.test\t\t#执行xxx项目下的testx里的测试\npython manage.py test animals.tests.AnimalTestCase\t#单独执行某个test case\n```\n\n#### 测试数据库\n测试需要数据库，django会为测试单独生成数据库。不管你的测试是否通过,当你所有的测试都执行过后,这个测试数据库就会被销毁\n\n默认情况下,测试数据库的名字是test_DATABASE_NAME,DATABASE_NAME是你在settings.py里配置的数据库名.如果 你需要给测试数据库一个其他的名字,在settings.py中指定TEST_DATABASE_NAME的值。使用sqlite3时，数据库是在内存中创建的\n\n#### 参考链接\nhttps://docs.djangoproject.com/en/1.10/topics/testing/tools/\nhttp://python.usyiyi.cn/django/topics/testing/tools.html\nhttp://www.cnblogs.com/linxiyue/p/3886035.html\nhttp://www.weiguda.com/blog/31/\n\n\n\n","source":"_posts/django-test.md","raw":"---\ntitle: Django 测试\ndate: 2017-03-28 20:55:48\ntags:\n  - TestCase\n  - unittest\ncategories:\n  - Django\n---\n\n#### 说明\nPython单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：\n\n![](https://ttxsgoto.github.io/img/django/django_test01.png)\n\n**SimpleTestCase**:扩展了unittest.TestCase的一些基本功能\n- 保存和恢复python警告机制状态\n- 使用client Client\n- 自定义测试时间URL maps\n- 使用modified settings运行测试的能力\n\n**TransactionTestCase**:事务测试类，继承SimpleTestCase\n\n**TestCase**:用来测试网站正常转换unittest.TestCase到Django TestCase\n- 自动加载fixtures\n- 将测试包含在两个嵌套的atomic块中：一个用于整个类，一个用于每个测试\n- 创建一个TestClient实例\n- Django特定的断言用于测试重定向和形式错误\n\n**LiveServerTestCase**:基本上与TransactionTestCase相同，具有一个额外的功能：它在设置的后台启动一个活动的Django服务器，并在卸载时将其关闭\n\n#### 特殊方法\n- setUp():每个测试函数运行前执行\n- tearDown():每个测试函数运行完成后执行\n- setUpClass(cls):必须使用@classmethod装饰器，所有test函数运行前执行一次\n- tearDownClass(cls):必须使用@classmethod装饰器，所有test函数运行完成后执行一次\n\n\n**默认测试客户端**\ndjango.test.*TestCase实例中的每个测试用例都可以访问Django测试客户端的实例。此客户端可以作为self.client访问。每个测试都重新创建此客户端，因此您不必担心从一个测试到另一个测试的状态（例如Cookie）\n实例如下：\n```python\nimport unittest\nfrom django.test import Client\n \nclass SimpleTest(unittest.TestCase):\n    def test_details(self):\n        client = Client()\n        response = client.get('/customer/details/')\n        self.assertEqual(response.status_code, 200)\n \n    def test_index(self):\n        client = Client()\n        response = client.get('/customer/index/')\n        self.assertEqual(response.status_code, 200)\n \n################等同于如下################\nfrom django.test import TestCase\n \nclass SimpleTest(TestCase):\n    def test_details(self):\n        response = self.client.get('/customer/details/')\n        self.assertEqual(response.status_code, 200)\n \n    def test_index(self):\n        response = self.client.get('/customer/index/')\n        self.assertEqual(response.status_code, 200)\n```\n\n#### 测试客户端\n```\n>>> from django.test import Client\n>>> c = Client()\n>>> response = c.post('/login/', {'username': 'john', 'password': 'smith'})\n>>> response.status_code\n200\n>>> response = c.get('/customer/details/')\n>>> response.content    # 返回数据主体\n```\n\n#### 测试响应属性\n```\n- client:用于生成导致响应的请求的测试客户端\n- content:响应的主体\n- context:用于呈现产生响应内容的模板的模板Context实例\n- request:响应的请求数据\n- wsgi_request:由生成响应的测试处理程序生成的WSGIRequest实例\n- status_code:响应http状态码\n- templates:用于渲染最终内容的Template实例列表，按渲染顺序排列\n- resolver_match:响应的实例ResolverMatch\n```\n\n#### 常用断言（runtests/case.py）\n- self.assertEqual(first, second)\n- self.assertNotEqual(first, second)\n- self.assertFalse(expr)\n- self.assertTrue(expr)\n- self.assertEqual(first, second)\n- self.assertNotEqual(first, second)\n- self.assertSequenceEqual(seq1, seq2)\n- self.assertListEqual(list1, list2):\n- self.assertTupleEqual(tuple1, tuple2):\n- self.assertDictEqual(dic1, dic2):\n- self.assertSetEqual(set1, set2):\n- self.assertIn(mem, container):\n- self.assertIs(expr1, expr2)\n- self.assertIsNotNone(obj):\n- self.assertIsNone(obj)\n- self.assertIsInstance(obj, cls)\n\n#### 跳过测试\nunittest库提供@skipIf和@skipUnless装饰器，如果提前知道这些测试在某些条件下会失败，可以跳过测试\n\n\n#### 运行\n```\npython manage.py test runtests.test_user\npython manage.py test xxx.test\t\t#执行xxx项目下的testx里的测试\npython manage.py test animals.tests.AnimalTestCase\t#单独执行某个test case\n```\n\n#### 测试数据库\n测试需要数据库，django会为测试单独生成数据库。不管你的测试是否通过,当你所有的测试都执行过后,这个测试数据库就会被销毁\n\n默认情况下,测试数据库的名字是test_DATABASE_NAME,DATABASE_NAME是你在settings.py里配置的数据库名.如果 你需要给测试数据库一个其他的名字,在settings.py中指定TEST_DATABASE_NAME的值。使用sqlite3时，数据库是在内存中创建的\n\n#### 参考链接\nhttps://docs.djangoproject.com/en/1.10/topics/testing/tools/\nhttp://python.usyiyi.cn/django/topics/testing/tools.html\nhttp://www.cnblogs.com/linxiyue/p/3886035.html\nhttp://www.weiguda.com/blog/31/\n\n\n\n","slug":"django-test","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wi002oct8uo38ezfwf","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Python单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：</p>\n<p><img src=\"https://ttxsgoto.github.io/img/django/django_test01.png\" alt=\"\"></p>\n<p><strong>SimpleTestCase</strong>:扩展了unittest.TestCase的一些基本功能</p>\n<ul>\n<li>保存和恢复python警告机制状态</li>\n<li>使用client Client</li>\n<li>自定义测试时间URL maps</li>\n<li>使用modified settings运行测试的能力</li>\n</ul>\n<p><strong>TransactionTestCase</strong>:事务测试类，继承SimpleTestCase</p>\n<p><strong>TestCase</strong>:用来测试网站正常转换unittest.TestCase到Django TestCase</p>\n<ul>\n<li>自动加载fixtures</li>\n<li>将测试包含在两个嵌套的atomic块中：一个用于整个类，一个用于每个测试</li>\n<li>创建一个TestClient实例</li>\n<li>Django特定的断言用于测试重定向和形式错误</li>\n</ul>\n<p><strong>LiveServerTestCase</strong>:基本上与TransactionTestCase相同，具有一个额外的功能：它在设置的后台启动一个活动的Django服务器，并在卸载时将其关闭</p>\n<h4 id=\"特殊方法\"><a href=\"#特殊方法\" class=\"headerlink\" title=\"特殊方法\"></a>特殊方法</h4><ul>\n<li>setUp():每个测试函数运行前执行</li>\n<li>tearDown():每个测试函数运行完成后执行</li>\n<li>setUpClass(cls):必须使用@classmethod装饰器，所有test函数运行前执行一次</li>\n<li>tearDownClass(cls):必须使用@classmethod装饰器，所有test函数运行完成后执行一次</li>\n</ul>\n<p><strong>默认测试客户端</strong><br>django.test.*TestCase实例中的每个测试用例都可以访问Django测试客户端的实例。此客户端可以作为self.client访问。每个测试都重新创建此客户端，因此您不必担心从一个测试到另一个测试的状态（例如Cookie）<br>实例如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"><span class=\"keyword\">from</span> django.test <span class=\"keyword\">import</span> Client</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleTest</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_details</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        client = Client()</div><div class=\"line\">        response = client.get(<span class=\"string\">'/customer/details/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_index</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        client = Client()</div><div class=\"line\">        response = client.get(<span class=\"string\">'/customer/index/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">################等同于如下################</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.test <span class=\"keyword\">import</span> TestCase</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleTest</span><span class=\"params\">(TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_details</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        response = self.client.get(<span class=\"string\">'/customer/details/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_index</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        response = self.client.get(<span class=\"string\">'/customer/index/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试客户端\"><a href=\"#测试客户端\" class=\"headerlink\" title=\"测试客户端\"></a>测试客户端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; from django.test import Client</div><div class=\"line\">&gt;&gt;&gt; c = Client()</div><div class=\"line\">&gt;&gt;&gt; response = c.post(&apos;/login/&apos;, &#123;&apos;username&apos;: &apos;john&apos;, &apos;password&apos;: &apos;smith&apos;&#125;)</div><div class=\"line\">&gt;&gt;&gt; response.status_code</div><div class=\"line\">200</div><div class=\"line\">&gt;&gt;&gt; response = c.get(&apos;/customer/details/&apos;)</div><div class=\"line\">&gt;&gt;&gt; response.content    # 返回数据主体</div></pre></td></tr></table></figure>\n<h4 id=\"测试响应属性\"><a href=\"#测试响应属性\" class=\"headerlink\" title=\"测试响应属性\"></a>测试响应属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- client:用于生成导致响应的请求的测试客户端</div><div class=\"line\">- content:响应的主体</div><div class=\"line\">- context:用于呈现产生响应内容的模板的模板Context实例</div><div class=\"line\">- request:响应的请求数据</div><div class=\"line\">- wsgi_request:由生成响应的测试处理程序生成的WSGIRequest实例</div><div class=\"line\">- status_code:响应http状态码</div><div class=\"line\">- templates:用于渲染最终内容的Template实例列表，按渲染顺序排列</div><div class=\"line\">- resolver_match:响应的实例ResolverMatch</div></pre></td></tr></table></figure>\n<h4 id=\"常用断言（runtests-case-py）\"><a href=\"#常用断言（runtests-case-py）\" class=\"headerlink\" title=\"常用断言（runtests/case.py）\"></a>常用断言（runtests/case.py）</h4><ul>\n<li>self.assertEqual(first, second)</li>\n<li>self.assertNotEqual(first, second)</li>\n<li>self.assertFalse(expr)</li>\n<li>self.assertTrue(expr)</li>\n<li>self.assertEqual(first, second)</li>\n<li>self.assertNotEqual(first, second)</li>\n<li>self.assertSequenceEqual(seq1, seq2)</li>\n<li>self.assertListEqual(list1, list2):</li>\n<li>self.assertTupleEqual(tuple1, tuple2):</li>\n<li>self.assertDictEqual(dic1, dic2):</li>\n<li>self.assertSetEqual(set1, set2):</li>\n<li>self.assertIn(mem, container):</li>\n<li>self.assertIs(expr1, expr2)</li>\n<li>self.assertIsNotNone(obj):</li>\n<li>self.assertIsNone(obj)</li>\n<li>self.assertIsInstance(obj, cls)</li>\n</ul>\n<h4 id=\"跳过测试\"><a href=\"#跳过测试\" class=\"headerlink\" title=\"跳过测试\"></a>跳过测试</h4><p>unittest库提供@skipIf和@skipUnless装饰器，如果提前知道这些测试在某些条件下会失败，可以跳过测试</p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py test runtests.test_user</div><div class=\"line\">python manage.py test xxx.test\t\t#执行xxx项目下的testx里的测试</div><div class=\"line\">python manage.py test animals.tests.AnimalTestCase\t#单独执行某个test case</div></pre></td></tr></table></figure>\n<h4 id=\"测试数据库\"><a href=\"#测试数据库\" class=\"headerlink\" title=\"测试数据库\"></a>测试数据库</h4><p>测试需要数据库，django会为测试单独生成数据库。不管你的测试是否通过,当你所有的测试都执行过后,这个测试数据库就会被销毁</p>\n<p>默认情况下,测试数据库的名字是test_DATABASE_NAME,DATABASE_NAME是你在settings.py里配置的数据库名.如果 你需要给测试数据库一个其他的名字,在settings.py中指定TEST_DATABASE_NAME的值。使用sqlite3时，数据库是在内存中创建的</p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://docs.djangoproject.com/en/1.10/topics/testing/tools/\" target=\"_blank\" rel=\"external\">https://docs.djangoproject.com/en/1.10/topics/testing/tools/</a><br><a href=\"http://python.usyiyi.cn/django/topics/testing/tools.html\" target=\"_blank\" rel=\"external\">http://python.usyiyi.cn/django/topics/testing/tools.html</a><br><a href=\"http://www.cnblogs.com/linxiyue/p/3886035.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/linxiyue/p/3886035.html</a><br><a href=\"http://www.weiguda.com/blog/31/\" target=\"_blank\" rel=\"external\">http://www.weiguda.com/blog/31/</a></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Python单元测试类扩展了unittest测试用例,Django提供了这个基类的一些扩展，如下图：</p>\n<p><img src=\"https://ttxsgoto.github.io/img/django/django_test01.png\" alt=\"\"></p>\n<p><strong>SimpleTestCase</strong>:扩展了unittest.TestCase的一些基本功能</p>\n<ul>\n<li>保存和恢复python警告机制状态</li>\n<li>使用client Client</li>\n<li>自定义测试时间URL maps</li>\n<li>使用modified settings运行测试的能力</li>\n</ul>\n<p><strong>TransactionTestCase</strong>:事务测试类，继承SimpleTestCase</p>\n<p><strong>TestCase</strong>:用来测试网站正常转换unittest.TestCase到Django TestCase</p>\n<ul>\n<li>自动加载fixtures</li>\n<li>将测试包含在两个嵌套的atomic块中：一个用于整个类，一个用于每个测试</li>\n<li>创建一个TestClient实例</li>\n<li>Django特定的断言用于测试重定向和形式错误</li>\n</ul>\n<p><strong>LiveServerTestCase</strong>:基本上与TransactionTestCase相同，具有一个额外的功能：它在设置的后台启动一个活动的Django服务器，并在卸载时将其关闭</p>\n<h4 id=\"特殊方法\"><a href=\"#特殊方法\" class=\"headerlink\" title=\"特殊方法\"></a>特殊方法</h4><ul>\n<li>setUp():每个测试函数运行前执行</li>\n<li>tearDown():每个测试函数运行完成后执行</li>\n<li>setUpClass(cls):必须使用@classmethod装饰器，所有test函数运行前执行一次</li>\n<li>tearDownClass(cls):必须使用@classmethod装饰器，所有test函数运行完成后执行一次</li>\n</ul>\n<p><strong>默认测试客户端</strong><br>django.test.*TestCase实例中的每个测试用例都可以访问Django测试客户端的实例。此客户端可以作为self.client访问。每个测试都重新创建此客户端，因此您不必担心从一个测试到另一个测试的状态（例如Cookie）<br>实例如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"><span class=\"keyword\">from</span> django.test <span class=\"keyword\">import</span> Client</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleTest</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_details</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        client = Client()</div><div class=\"line\">        response = client.get(<span class=\"string\">'/customer/details/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_index</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        client = Client()</div><div class=\"line\">        response = client.get(<span class=\"string\">'/customer/index/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">################等同于如下################</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.test <span class=\"keyword\">import</span> TestCase</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleTest</span><span class=\"params\">(TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_details</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        response = self.client.get(<span class=\"string\">'/customer/details/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_index</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        response = self.client.get(<span class=\"string\">'/customer/index/'</span>)</div><div class=\"line\">        self.assertEqual(response.status_code, <span class=\"number\">200</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试客户端\"><a href=\"#测试客户端\" class=\"headerlink\" title=\"测试客户端\"></a>测试客户端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; from django.test import Client</div><div class=\"line\">&gt;&gt;&gt; c = Client()</div><div class=\"line\">&gt;&gt;&gt; response = c.post(&apos;/login/&apos;, &#123;&apos;username&apos;: &apos;john&apos;, &apos;password&apos;: &apos;smith&apos;&#125;)</div><div class=\"line\">&gt;&gt;&gt; response.status_code</div><div class=\"line\">200</div><div class=\"line\">&gt;&gt;&gt; response = c.get(&apos;/customer/details/&apos;)</div><div class=\"line\">&gt;&gt;&gt; response.content    # 返回数据主体</div></pre></td></tr></table></figure>\n<h4 id=\"测试响应属性\"><a href=\"#测试响应属性\" class=\"headerlink\" title=\"测试响应属性\"></a>测试响应属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- client:用于生成导致响应的请求的测试客户端</div><div class=\"line\">- content:响应的主体</div><div class=\"line\">- context:用于呈现产生响应内容的模板的模板Context实例</div><div class=\"line\">- request:响应的请求数据</div><div class=\"line\">- wsgi_request:由生成响应的测试处理程序生成的WSGIRequest实例</div><div class=\"line\">- status_code:响应http状态码</div><div class=\"line\">- templates:用于渲染最终内容的Template实例列表，按渲染顺序排列</div><div class=\"line\">- resolver_match:响应的实例ResolverMatch</div></pre></td></tr></table></figure>\n<h4 id=\"常用断言（runtests-case-py）\"><a href=\"#常用断言（runtests-case-py）\" class=\"headerlink\" title=\"常用断言（runtests/case.py）\"></a>常用断言（runtests/case.py）</h4><ul>\n<li>self.assertEqual(first, second)</li>\n<li>self.assertNotEqual(first, second)</li>\n<li>self.assertFalse(expr)</li>\n<li>self.assertTrue(expr)</li>\n<li>self.assertEqual(first, second)</li>\n<li>self.assertNotEqual(first, second)</li>\n<li>self.assertSequenceEqual(seq1, seq2)</li>\n<li>self.assertListEqual(list1, list2):</li>\n<li>self.assertTupleEqual(tuple1, tuple2):</li>\n<li>self.assertDictEqual(dic1, dic2):</li>\n<li>self.assertSetEqual(set1, set2):</li>\n<li>self.assertIn(mem, container):</li>\n<li>self.assertIs(expr1, expr2)</li>\n<li>self.assertIsNotNone(obj):</li>\n<li>self.assertIsNone(obj)</li>\n<li>self.assertIsInstance(obj, cls)</li>\n</ul>\n<h4 id=\"跳过测试\"><a href=\"#跳过测试\" class=\"headerlink\" title=\"跳过测试\"></a>跳过测试</h4><p>unittest库提供@skipIf和@skipUnless装饰器，如果提前知道这些测试在某些条件下会失败，可以跳过测试</p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py test runtests.test_user</div><div class=\"line\">python manage.py test xxx.test\t\t#执行xxx项目下的testx里的测试</div><div class=\"line\">python manage.py test animals.tests.AnimalTestCase\t#单独执行某个test case</div></pre></td></tr></table></figure>\n<h4 id=\"测试数据库\"><a href=\"#测试数据库\" class=\"headerlink\" title=\"测试数据库\"></a>测试数据库</h4><p>测试需要数据库，django会为测试单独生成数据库。不管你的测试是否通过,当你所有的测试都执行过后,这个测试数据库就会被销毁</p>\n<p>默认情况下,测试数据库的名字是test_DATABASE_NAME,DATABASE_NAME是你在settings.py里配置的数据库名.如果 你需要给测试数据库一个其他的名字,在settings.py中指定TEST_DATABASE_NAME的值。使用sqlite3时，数据库是在内存中创建的</p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://docs.djangoproject.com/en/1.10/topics/testing/tools/\">https://docs.djangoproject.com/en/1.10/topics/testing/tools/</a><br><a href=\"http://python.usyiyi.cn/django/topics/testing/tools.html\">http://python.usyiyi.cn/django/topics/testing/tools.html</a><br><a href=\"http://www.cnblogs.com/linxiyue/p/3886035.html\">http://www.cnblogs.com/linxiyue/p/3886035.html</a><br><a href=\"http://www.weiguda.com/blog/31/\">http://www.weiguda.com/blog/31/</a></p>\n"},{"title":"Django 基于URL权限管理模块","date":"2018-01-17T14:38:28.000Z","_content":"\n#### 背景\nDjango自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制权限，如对象级别的权限\n\n现在引用了基于url的权限系统，可以控制用户访问一个接口的不同方法 ，可以很方便的控制权限；如：用户对于某个接口可以做到只拥有查看的权限而没有修改的权限，因为对于相同的url请求的方法不同\n\n#### 功能说明\n1.类似于django自身权限模块，拥有用户和用户组两类权限\n2.通过swagger 获取项目URL 列表用于分配权限\n3.通过中间件来拦截判断用户对请求的url是否有对应的权限\n\n#### 主要代码说明\n##### models.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.contrib.auth.models import Permission, User\nfrom .managers import UserprofileManager\n \n \nclass Userprofile(models.Model):\n    \"\"\"用户相关信息\"\"\"\n \n    user = models.OneToOneField(settings.AUTH_USER_MODEL, primary_key=True)\n    sex = models.IntegerField(choices=(\n        (0, '女性'),\n        (1, '男性'),\n        (2, '未填写')\n    ), default=2, help_text='sex')\n    groups = models.ManyToManyField(\n        'Group',\n        verbose_name='user groups',\n        blank=True,\n        through='UserGroup',\n        through_fields=('user', 'group')\n    )\n    user_permissions = models.ManyToManyField(\n        'URLSource',\n        verbose_name='user permissions',\n        blank=True,\n        through='UserURL',\n        through_fields=('user', 'url')\n    )\n    desc = models.CharField(u'描述', null=True, blank=True, max_length=100, default='')\n    create_time = models.DateTimeField(auto_now_add=True)\n \n    objects = UserprofileManager()\n \n    class Meta:\n        db_table = 'user_profile'\n        verbose_name = u'用户信息'\n        verbose_name_plural = verbose_name\n        ordering = ['-create_time']\n \n    def __str__(self):\n        return '{}'.format(self.user.username)\n \n    @receiver(post_save, sender=User)\n    def create_user_profile(sender, instance=None, created=False, **kwargs):\n        if created:\n            Userprofile.objects.get_or_create(user=instance, defaults={'desc': instance.username})\n \n    def add_permissions(self, permissions):\n        \"\"\"用户添加权限\"\"\"\n        history_permission = self.userurl_set.all()  # 现在已有的权限\n        if history_permission:\n            # 如果有就不添加,没有再添加,多余的删除\n            for _permiss in history_permission:\n                if _permiss.url in permissions:\n                    permissions.remove(_permiss.url)\n                else:\n                    _permiss.delete()\n            permisson_list = [UserURL(user=self, url=permisson) for permisson in permissions]\n        else:\n            permisson_list = [UserURL(user=self, url=permisson) for permisson in permissions]\n        self.userurl_set.bulk_create(permisson_list)\n        return self\n \n    def add_groups(self, group):\n        \"\"\"\n        用户添加到组(目前只支持添加到单个组)\n        :param group: 权限组实例\n        :return:\n        \"\"\"\n        user_group = self.usergroup_set.all()\n        if user_group:\n            user_group.delete()\n        self.usergroup_set.create(group=group)\n        return self\n \n    def get_group_permissions(self):\n        \"\"\"获取用户所在组的权限\"\"\"\n        return self.usergroup_set.all()\n \n    def get_url_permissions(self):\n        \"\"\"获取用户单独关联的权限\"\"\"\n        return self.userurl_set.all()\n \n    def get_all_permissions(self):\n        \"\"\"该用户的所有权限,包括所在组权限和自己单独关联权限\"\"\"\n        permissions = set()\n        # group 权限\n        group_permission = self.get_group_permissions()\n        for permission in group_permission:\n            URL = GroupURL.objects.filter(group=permission.group)\n            for _permission in URL:\n                permissions.add(_permission.url)\n        # user 权限\n        url_permission = self.get_url_permissions()\n        for url in url_permission:\n            permissions.add(url.url)\n        return permissions\n \n \nclass URLSource(models.Model):\n    \"\"\"URL资源信息\"\"\"\n \n    url = models.CharField(u'url', max_length=128)\n    action = models.CharField(u'请求方法', max_length=16)\n    description = models.CharField(u'描述信息', max_length=256, blank=True, null=True, default='')\n    parameters = models.CharField(u'参数, 逗号分隔', max_length=128, default='', blank=True, null=True)\n \n    class Meta:\n        verbose_name = u'URL信息'\n        verbose_name_plural = verbose_name\n        db_table = 'url_source'\n        unique_together = (('url', 'action'),)\n        ordering = ['id']\n \n    def __str__(self):\n        return '{}-{}-{}'.format(self.id, self.description, self.action)\n \n \nclass Group(models.Model):\n    \"\"\"用户组信息\"\"\"\n \n    name = models.CharField(max_length=64, verbose_name='组名', unique=True, help_text='组名')\n    code = models.CharField(max_length=64, verbose_name='用户组中文名', default='', help_text='组code')\n    permissions = models.ManyToManyField(\n        URLSource,\n        verbose_name='permissions',\n        blank=True,\n        through='GroupURL',\n        through_fields=('group', 'url')\n    )\n \n    class Meta:\n        db_table = 'group'\n        verbose_name = u'用户权限组'\n        verbose_name_plural = verbose_name\n \n    def __str__(self):\n        return self.name\n \n    def add_permissions(self, permissions):\n        \"\"\"\n        给组添加权限\n        :param permissons: 权限列表,filter查询列表\n        :return:\n        \"\"\"\n        history_permission = self.groupurl_set.all()  # 现在已有的权限\n        if history_permission:\n            # 如果有就不添加,没有再添加,多余的删除\n            for _permiss in history_permission:\n                if _permiss.url in permissions:\n                    permissions.remove(_permiss.url)\n                else:\n                    _permiss.delete()\n            permisson_list = [GroupURL(group=self, url=permisson) for permisson in permissions]\n        else:\n            permisson_list = [GroupURL(group=self, url=permisson) for permisson in permissions]\n        self.groupurl_set.bulk_create(permisson_list)\n        return self\n \n    def get_group_permissions(self):\n        \"\"\"获取该组对应的权限列表\"\"\"\n        return self.groupurl_set.all()\n \n \nclass UserGroup(models.Model):\n    \"\"\"用户和组关联\"\"\"\n \n    user = models.ForeignKey(Userprofile, verbose_name=u'用户')\n    group = models.ForeignKey(Group, verbose_name=u'组')\n    desc = models.CharField(u'其他信息', max_length=100, blank=True, null=True, default='')\n \n    class Meta:\n        db_table = 'user_groups'\n        verbose_name = u'用户和组关系'\n        verbose_name_plural = verbose_name\n        unique_together = (('user', 'group'),)\n \n    def __str__(self):\n        return '{}-{}'.format(self.user, self.group)\n \n \nclass UserURL(models.Model):\n    \"\"\"用户和URL关联\"\"\"\n \n    user = models.ForeignKey(Userprofile, verbose_name=u'用户')\n    url = models.ForeignKey(URLSource, verbose_name=u'URL')\n    desc = models.CharField(u'其他信息', max_length=100, blank=True, null=True, default='')\n \n    class Meta:\n        db_table = 'user_urls'\n        verbose_name = u'用户权限关系'\n        verbose_name_plural = verbose_name\n        unique_together = (('user', 'url'),)\n \n    def __str__(self):\n        return '{}-{}'.format(self.user, self.url)\n \n \nclass GroupURL(models.Model):\n    \"\"\"组和URL关系\"\"\"\n \n    group = models.ForeignKey(Group, verbose_name=u'组')\n    url = models.ForeignKey(URLSource, verbose_name=u'URL')\n    desc = models.CharField(u'其他信息', max_length=100, blank=True, null=True, default='')\n \n    class Meta:\n        db_table = 'group_urls'\n        verbose_name = u'用户权限组关系'\n        verbose_name_plural = verbose_name\n        unique_together = (('group', 'url'),)\n \n    def __str__(self):\n        return '{}-{}'.format(self.group, self.url)\n```\n##### middleware.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nfrom __future__ import unicode_literals\nimport logging\nimport json\nfrom collections import Counter\nfrom django.http import HttpResponseForbidden\nfrom django.utils.deprecation import MiddlewareMixin\nfrom .models import Userprofile\nfrom django.contrib.auth import get_user_model\nfrom .settings import url_permisson_settings\n \nlogs = logging.getLogger('django')\n \nUser = get_user_model()\n \n \nclass URLPermissionMiddleWare(MiddlewareMixin):\n    def process_request(self, request):\n        response = {\n            \"status_code\": 403,\n            \"message\": u\"无权限操作,请联系管理员.\"\n        }\n        path = request.path.split('/')\n        if path[1] in url_permisson_settings.ALL_ALLOW_URL:\n            return None\n        if not isinstance(request.user, User):\n            return None\n        if request.user.is_superuser:\n            return None\n        try:\n            profile = Userprofile.objects.get(user=request.user)\n        except Userprofile.DoesNotExist:\n            return HttpResponseForbidden(json.dumps(response), content_type='application/json')\n        method = request.method.lower()\n        path = request.path.strip()\n        if method == 'get':\n            parameter = []\n            for _parameter in request.GET.items():\n                parameter.append(_parameter[0])\n        else:\n            try:\n                parameter_dict = json.loads(request.body)\n            except Exception:\n                parameter_dict = {}\n            parameter = parameter_dict.keys()\n        all_permission = profile.get_all_permissions()\n        result = None\n        for _url in all_permission:\n            url = _url.url\n            action = _url.action\n            parameters = _url.parameters.split(',')\n            if method == action and path == url and (len(Counter(parameter) - Counter(parameters)) == 0):\n                result = True\n        if not result:\n            return HttpResponseForbidden(json.dumps(response), content_type='application/json')\n        return None\n \n```\n#### 接口说明\n![](https://ttxsgoto.github.io/img/django/permission.png)\n\n\n#### Git地址\nhttps://github.com/ttxsgoto/url_permission\n\n\n\n","source":"_posts/django-url-permisson.md","raw":"---\ntitle: Django 基于URL权限管理模块\ndate: 2018-01-17 22:38:28\ntags:\n  - permisson\ncategories:\n  - Django\n---\n\n#### 背景\nDjango自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制权限，如对象级别的权限\n\n现在引用了基于url的权限系统，可以控制用户访问一个接口的不同方法 ，可以很方便的控制权限；如：用户对于某个接口可以做到只拥有查看的权限而没有修改的权限，因为对于相同的url请求的方法不同\n\n#### 功能说明\n1.类似于django自身权限模块，拥有用户和用户组两类权限\n2.通过swagger 获取项目URL 列表用于分配权限\n3.通过中间件来拦截判断用户对请求的url是否有对应的权限\n\n#### 主要代码说明\n##### models.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.contrib.auth.models import Permission, User\nfrom .managers import UserprofileManager\n \n \nclass Userprofile(models.Model):\n    \"\"\"用户相关信息\"\"\"\n \n    user = models.OneToOneField(settings.AUTH_USER_MODEL, primary_key=True)\n    sex = models.IntegerField(choices=(\n        (0, '女性'),\n        (1, '男性'),\n        (2, '未填写')\n    ), default=2, help_text='sex')\n    groups = models.ManyToManyField(\n        'Group',\n        verbose_name='user groups',\n        blank=True,\n        through='UserGroup',\n        through_fields=('user', 'group')\n    )\n    user_permissions = models.ManyToManyField(\n        'URLSource',\n        verbose_name='user permissions',\n        blank=True,\n        through='UserURL',\n        through_fields=('user', 'url')\n    )\n    desc = models.CharField(u'描述', null=True, blank=True, max_length=100, default='')\n    create_time = models.DateTimeField(auto_now_add=True)\n \n    objects = UserprofileManager()\n \n    class Meta:\n        db_table = 'user_profile'\n        verbose_name = u'用户信息'\n        verbose_name_plural = verbose_name\n        ordering = ['-create_time']\n \n    def __str__(self):\n        return '{}'.format(self.user.username)\n \n    @receiver(post_save, sender=User)\n    def create_user_profile(sender, instance=None, created=False, **kwargs):\n        if created:\n            Userprofile.objects.get_or_create(user=instance, defaults={'desc': instance.username})\n \n    def add_permissions(self, permissions):\n        \"\"\"用户添加权限\"\"\"\n        history_permission = self.userurl_set.all()  # 现在已有的权限\n        if history_permission:\n            # 如果有就不添加,没有再添加,多余的删除\n            for _permiss in history_permission:\n                if _permiss.url in permissions:\n                    permissions.remove(_permiss.url)\n                else:\n                    _permiss.delete()\n            permisson_list = [UserURL(user=self, url=permisson) for permisson in permissions]\n        else:\n            permisson_list = [UserURL(user=self, url=permisson) for permisson in permissions]\n        self.userurl_set.bulk_create(permisson_list)\n        return self\n \n    def add_groups(self, group):\n        \"\"\"\n        用户添加到组(目前只支持添加到单个组)\n        :param group: 权限组实例\n        :return:\n        \"\"\"\n        user_group = self.usergroup_set.all()\n        if user_group:\n            user_group.delete()\n        self.usergroup_set.create(group=group)\n        return self\n \n    def get_group_permissions(self):\n        \"\"\"获取用户所在组的权限\"\"\"\n        return self.usergroup_set.all()\n \n    def get_url_permissions(self):\n        \"\"\"获取用户单独关联的权限\"\"\"\n        return self.userurl_set.all()\n \n    def get_all_permissions(self):\n        \"\"\"该用户的所有权限,包括所在组权限和自己单独关联权限\"\"\"\n        permissions = set()\n        # group 权限\n        group_permission = self.get_group_permissions()\n        for permission in group_permission:\n            URL = GroupURL.objects.filter(group=permission.group)\n            for _permission in URL:\n                permissions.add(_permission.url)\n        # user 权限\n        url_permission = self.get_url_permissions()\n        for url in url_permission:\n            permissions.add(url.url)\n        return permissions\n \n \nclass URLSource(models.Model):\n    \"\"\"URL资源信息\"\"\"\n \n    url = models.CharField(u'url', max_length=128)\n    action = models.CharField(u'请求方法', max_length=16)\n    description = models.CharField(u'描述信息', max_length=256, blank=True, null=True, default='')\n    parameters = models.CharField(u'参数, 逗号分隔', max_length=128, default='', blank=True, null=True)\n \n    class Meta:\n        verbose_name = u'URL信息'\n        verbose_name_plural = verbose_name\n        db_table = 'url_source'\n        unique_together = (('url', 'action'),)\n        ordering = ['id']\n \n    def __str__(self):\n        return '{}-{}-{}'.format(self.id, self.description, self.action)\n \n \nclass Group(models.Model):\n    \"\"\"用户组信息\"\"\"\n \n    name = models.CharField(max_length=64, verbose_name='组名', unique=True, help_text='组名')\n    code = models.CharField(max_length=64, verbose_name='用户组中文名', default='', help_text='组code')\n    permissions = models.ManyToManyField(\n        URLSource,\n        verbose_name='permissions',\n        blank=True,\n        through='GroupURL',\n        through_fields=('group', 'url')\n    )\n \n    class Meta:\n        db_table = 'group'\n        verbose_name = u'用户权限组'\n        verbose_name_plural = verbose_name\n \n    def __str__(self):\n        return self.name\n \n    def add_permissions(self, permissions):\n        \"\"\"\n        给组添加权限\n        :param permissons: 权限列表,filter查询列表\n        :return:\n        \"\"\"\n        history_permission = self.groupurl_set.all()  # 现在已有的权限\n        if history_permission:\n            # 如果有就不添加,没有再添加,多余的删除\n            for _permiss in history_permission:\n                if _permiss.url in permissions:\n                    permissions.remove(_permiss.url)\n                else:\n                    _permiss.delete()\n            permisson_list = [GroupURL(group=self, url=permisson) for permisson in permissions]\n        else:\n            permisson_list = [GroupURL(group=self, url=permisson) for permisson in permissions]\n        self.groupurl_set.bulk_create(permisson_list)\n        return self\n \n    def get_group_permissions(self):\n        \"\"\"获取该组对应的权限列表\"\"\"\n        return self.groupurl_set.all()\n \n \nclass UserGroup(models.Model):\n    \"\"\"用户和组关联\"\"\"\n \n    user = models.ForeignKey(Userprofile, verbose_name=u'用户')\n    group = models.ForeignKey(Group, verbose_name=u'组')\n    desc = models.CharField(u'其他信息', max_length=100, blank=True, null=True, default='')\n \n    class Meta:\n        db_table = 'user_groups'\n        verbose_name = u'用户和组关系'\n        verbose_name_plural = verbose_name\n        unique_together = (('user', 'group'),)\n \n    def __str__(self):\n        return '{}-{}'.format(self.user, self.group)\n \n \nclass UserURL(models.Model):\n    \"\"\"用户和URL关联\"\"\"\n \n    user = models.ForeignKey(Userprofile, verbose_name=u'用户')\n    url = models.ForeignKey(URLSource, verbose_name=u'URL')\n    desc = models.CharField(u'其他信息', max_length=100, blank=True, null=True, default='')\n \n    class Meta:\n        db_table = 'user_urls'\n        verbose_name = u'用户权限关系'\n        verbose_name_plural = verbose_name\n        unique_together = (('user', 'url'),)\n \n    def __str__(self):\n        return '{}-{}'.format(self.user, self.url)\n \n \nclass GroupURL(models.Model):\n    \"\"\"组和URL关系\"\"\"\n \n    group = models.ForeignKey(Group, verbose_name=u'组')\n    url = models.ForeignKey(URLSource, verbose_name=u'URL')\n    desc = models.CharField(u'其他信息', max_length=100, blank=True, null=True, default='')\n \n    class Meta:\n        db_table = 'group_urls'\n        verbose_name = u'用户权限组关系'\n        verbose_name_plural = verbose_name\n        unique_together = (('group', 'url'),)\n \n    def __str__(self):\n        return '{}-{}'.format(self.group, self.url)\n```\n##### middleware.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nfrom __future__ import unicode_literals\nimport logging\nimport json\nfrom collections import Counter\nfrom django.http import HttpResponseForbidden\nfrom django.utils.deprecation import MiddlewareMixin\nfrom .models import Userprofile\nfrom django.contrib.auth import get_user_model\nfrom .settings import url_permisson_settings\n \nlogs = logging.getLogger('django')\n \nUser = get_user_model()\n \n \nclass URLPermissionMiddleWare(MiddlewareMixin):\n    def process_request(self, request):\n        response = {\n            \"status_code\": 403,\n            \"message\": u\"无权限操作,请联系管理员.\"\n        }\n        path = request.path.split('/')\n        if path[1] in url_permisson_settings.ALL_ALLOW_URL:\n            return None\n        if not isinstance(request.user, User):\n            return None\n        if request.user.is_superuser:\n            return None\n        try:\n            profile = Userprofile.objects.get(user=request.user)\n        except Userprofile.DoesNotExist:\n            return HttpResponseForbidden(json.dumps(response), content_type='application/json')\n        method = request.method.lower()\n        path = request.path.strip()\n        if method == 'get':\n            parameter = []\n            for _parameter in request.GET.items():\n                parameter.append(_parameter[0])\n        else:\n            try:\n                parameter_dict = json.loads(request.body)\n            except Exception:\n                parameter_dict = {}\n            parameter = parameter_dict.keys()\n        all_permission = profile.get_all_permissions()\n        result = None\n        for _url in all_permission:\n            url = _url.url\n            action = _url.action\n            parameters = _url.parameters.split(',')\n            if method == action and path == url and (len(Counter(parameter) - Counter(parameters)) == 0):\n                result = True\n        if not result:\n            return HttpResponseForbidden(json.dumps(response), content_type='application/json')\n        return None\n \n```\n#### 接口说明\n![](https://ttxsgoto.github.io/img/django/permission.png)\n\n\n#### Git地址\nhttps://github.com/ttxsgoto/url_permission\n\n\n\n","slug":"django-url-permisson","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wk002rct8u9vz49cpo","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>Django自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制权限，如对象级别的权限</p>\n<p>现在引用了基于url的权限系统，可以控制用户访问一个接口的不同方法 ，可以很方便的控制权限；如：用户对于某个接口可以做到只拥有查看的权限而没有修改的权限，因为对于相同的url请求的方法不同</p>\n<h4 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a>功能说明</h4><p>1.类似于django自身权限模块，拥有用户和用户组两类权限<br>2.通过swagger 获取项目URL 列表用于分配权限<br>3.通过中间件来拦截判断用户对请求的url是否有对应的权限</p>\n<h4 id=\"主要代码说明\"><a href=\"#主要代码说明\" class=\"headerlink\" title=\"主要代码说明\"></a>主要代码说明</h4><h5 id=\"models-py\"><a href=\"#models-py\" class=\"headerlink\" title=\"models.py\"></a>models.py</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</div><div class=\"line\"><span class=\"keyword\">from</span> django.db.models.signals <span class=\"keyword\">import</span> post_save</div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> receiver</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> Permission, User</div><div class=\"line\"><span class=\"keyword\">from</span> .managers <span class=\"keyword\">import</span> UserprofileManager</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Userprofile</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户相关信息\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    user = models.OneToOneField(settings.AUTH_USER_MODEL, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    sex = models.IntegerField(choices=(</div><div class=\"line\">        (<span class=\"number\">0</span>, <span class=\"string\">'女性'</span>),</div><div class=\"line\">        (<span class=\"number\">1</span>, <span class=\"string\">'男性'</span>),</div><div class=\"line\">        (<span class=\"number\">2</span>, <span class=\"string\">'未填写'</span>)</div><div class=\"line\">    ), default=<span class=\"number\">2</span>, help_text=<span class=\"string\">'sex'</span>)</div><div class=\"line\">    groups = models.ManyToManyField(</div><div class=\"line\">        <span class=\"string\">'Group'</span>,</div><div class=\"line\">        verbose_name=<span class=\"string\">'user groups'</span>,</div><div class=\"line\">        blank=<span class=\"keyword\">True</span>,</div><div class=\"line\">        through=<span class=\"string\">'UserGroup'</span>,</div><div class=\"line\">        through_fields=(<span class=\"string\">'user'</span>, <span class=\"string\">'group'</span>)</div><div class=\"line\">    )</div><div class=\"line\">    user_permissions = models.ManyToManyField(</div><div class=\"line\">        <span class=\"string\">'URLSource'</span>,</div><div class=\"line\">        verbose_name=<span class=\"string\">'user permissions'</span>,</div><div class=\"line\">        blank=<span class=\"keyword\">True</span>,</div><div class=\"line\">        through=<span class=\"string\">'UserURL'</span>,</div><div class=\"line\">        through_fields=(<span class=\"string\">'user'</span>, <span class=\"string\">'url'</span>)</div><div class=\"line\">    )</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'描述'</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, max_length=<span class=\"number\">100</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    create_time = models.DateTimeField(auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    objects = UserprofileManager()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'user_profile'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户信息'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        ordering = [<span class=\"string\">'-create_time'</span>]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;'</span>.format(self.user.username)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @receiver(post_save, sender=User)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_user_profile</span><span class=\"params\">(sender, instance=None, created=False, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> created:</div><div class=\"line\">            Userprofile.objects.get_or_create(user=instance, defaults=&#123;<span class=\"string\">'desc'</span>: instance.username&#125;)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_permissions</span><span class=\"params\">(self, permissions)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"用户添加权限\"\"\"</span></div><div class=\"line\">        history_permission = self.userurl_set.all()  <span class=\"comment\"># 现在已有的权限</span></div><div class=\"line\">        <span class=\"keyword\">if</span> history_permission:</div><div class=\"line\">            <span class=\"comment\"># 如果有就不添加,没有再添加,多余的删除</span></div><div class=\"line\">            <span class=\"keyword\">for</span> _permiss <span class=\"keyword\">in</span> history_permission:</div><div class=\"line\">                <span class=\"keyword\">if</span> _permiss.url <span class=\"keyword\">in</span> permissions:</div><div class=\"line\">                    permissions.remove(_permiss.url)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    _permiss.delete()</div><div class=\"line\">            permisson_list = [UserURL(user=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            permisson_list = [UserURL(user=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        self.userurl_set.bulk_create(permisson_list)</div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_groups</span><span class=\"params\">(self, group)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        用户添加到组(目前只支持添加到单个组)</div><div class=\"line\">        :param group: 权限组实例</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        user_group = self.usergroup_set.all()</div><div class=\"line\">        <span class=\"keyword\">if</span> user_group:</div><div class=\"line\">            user_group.delete()</div><div class=\"line\">        self.usergroup_set.create(group=group)</div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_group_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"获取用户所在组的权限\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.usergroup_set.all()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_url_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"获取用户单独关联的权限\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.userurl_set.all()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"该用户的所有权限,包括所在组权限和自己单独关联权限\"\"\"</span></div><div class=\"line\">        permissions = set()</div><div class=\"line\">        <span class=\"comment\"># group 权限</span></div><div class=\"line\">        group_permission = self.get_group_permissions()</div><div class=\"line\">        <span class=\"keyword\">for</span> permission <span class=\"keyword\">in</span> group_permission:</div><div class=\"line\">            URL = GroupURL.objects.filter(group=permission.group)</div><div class=\"line\">            <span class=\"keyword\">for</span> _permission <span class=\"keyword\">in</span> URL:</div><div class=\"line\">                permissions.add(_permission.url)</div><div class=\"line\">        <span class=\"comment\"># user 权限</span></div><div class=\"line\">        url_permission = self.get_url_permissions()</div><div class=\"line\">        <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_permission:</div><div class=\"line\">            permissions.add(url.url)</div><div class=\"line\">        <span class=\"keyword\">return</span> permissions</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">URLSource</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"URL资源信息\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    url = models.CharField(<span class=\"string\">u'url'</span>, max_length=<span class=\"number\">128</span>)</div><div class=\"line\">    action = models.CharField(<span class=\"string\">u'请求方法'</span>, max_length=<span class=\"number\">16</span>)</div><div class=\"line\">    description = models.CharField(<span class=\"string\">u'描述信息'</span>, max_length=<span class=\"number\">256</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    parameters = models.CharField(<span class=\"string\">u'参数, 逗号分隔'</span>, max_length=<span class=\"number\">128</span>, default=<span class=\"string\">''</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'URL信息'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        db_table = <span class=\"string\">'url_source'</span></div><div class=\"line\">        unique_together = ((<span class=\"string\">'url'</span>, <span class=\"string\">'action'</span>),)</div><div class=\"line\">        ordering = [<span class=\"string\">'id'</span>]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;-&#123;&#125;'</span>.format(self.id, self.description, self.action)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户组信息\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">64</span>, verbose_name=<span class=\"string\">'组名'</span>, unique=<span class=\"keyword\">True</span>, help_text=<span class=\"string\">'组名'</span>)</div><div class=\"line\">    code = models.CharField(max_length=<span class=\"number\">64</span>, verbose_name=<span class=\"string\">'用户组中文名'</span>, default=<span class=\"string\">''</span>, help_text=<span class=\"string\">'组code'</span>)</div><div class=\"line\">    permissions = models.ManyToManyField(</div><div class=\"line\">        URLSource,</div><div class=\"line\">        verbose_name=<span class=\"string\">'permissions'</span>,</div><div class=\"line\">        blank=<span class=\"keyword\">True</span>,</div><div class=\"line\">        through=<span class=\"string\">'GroupURL'</span>,</div><div class=\"line\">        through_fields=(<span class=\"string\">'group'</span>, <span class=\"string\">'url'</span>)</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'group'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户权限组'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_permissions</span><span class=\"params\">(self, permissions)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        给组添加权限</div><div class=\"line\">        :param permissons: 权限列表,filter查询列表</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        history_permission = self.groupurl_set.all()  <span class=\"comment\"># 现在已有的权限</span></div><div class=\"line\">        <span class=\"keyword\">if</span> history_permission:</div><div class=\"line\">            <span class=\"comment\"># 如果有就不添加,没有再添加,多余的删除</span></div><div class=\"line\">            <span class=\"keyword\">for</span> _permiss <span class=\"keyword\">in</span> history_permission:</div><div class=\"line\">                <span class=\"keyword\">if</span> _permiss.url <span class=\"keyword\">in</span> permissions:</div><div class=\"line\">                    permissions.remove(_permiss.url)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    _permiss.delete()</div><div class=\"line\">            permisson_list = [GroupURL(group=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            permisson_list = [GroupURL(group=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        self.groupurl_set.bulk_create(permisson_list)</div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_group_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"获取该组对应的权限列表\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.groupurl_set.all()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserGroup</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户和组关联\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    user = models.ForeignKey(Userprofile, verbose_name=<span class=\"string\">u'用户'</span>)</div><div class=\"line\">    group = models.ForeignKey(Group, verbose_name=<span class=\"string\">u'组'</span>)</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'其他信息'</span>, max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'user_groups'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户和组关系'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        unique_together = ((<span class=\"string\">'user'</span>, <span class=\"string\">'group'</span>),)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.group)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserURL</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户和URL关联\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    user = models.ForeignKey(Userprofile, verbose_name=<span class=\"string\">u'用户'</span>)</div><div class=\"line\">    url = models.ForeignKey(URLSource, verbose_name=<span class=\"string\">u'URL'</span>)</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'其他信息'</span>, max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'user_urls'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户权限关系'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        unique_together = ((<span class=\"string\">'user'</span>, <span class=\"string\">'url'</span>),)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.url)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupURL</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"组和URL关系\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    group = models.ForeignKey(Group, verbose_name=<span class=\"string\">u'组'</span>)</div><div class=\"line\">    url = models.ForeignKey(URLSource, verbose_name=<span class=\"string\">u'URL'</span>)</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'其他信息'</span>, max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'group_urls'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户权限组关系'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        unique_together = ((<span class=\"string\">'group'</span>, <span class=\"string\">'url'</span>),)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;'</span>.format(self.group, self.url)</div></pre></td></tr></table></figure>\n<h5 id=\"middleware-py\"><a href=\"#middleware-py\" class=\"headerlink\" title=\"middleware.py\"></a>middleware.py</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseForbidden</div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</div><div class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Userprofile</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth <span class=\"keyword\">import</span> get_user_model</div><div class=\"line\"><span class=\"keyword\">from</span> .settings <span class=\"keyword\">import</span> url_permisson_settings</div><div class=\"line\"> </div><div class=\"line\">logs = logging.getLogger(<span class=\"string\">'django'</span>)</div><div class=\"line\"> </div><div class=\"line\">User = get_user_model()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">URLPermissionMiddleWare</span><span class=\"params\">(MiddlewareMixin)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        response = &#123;</div><div class=\"line\">            <span class=\"string\">\"status_code\"</span>: <span class=\"number\">403</span>,</div><div class=\"line\">            <span class=\"string\">\"message\"</span>: <span class=\"string\">u\"无权限操作,请联系管理员.\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        path = request.path.split(<span class=\"string\">'/'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> path[<span class=\"number\">1</span>] <span class=\"keyword\">in</span> url_permisson_settings.ALL_ALLOW_URL:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(request.user, User):</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">if</span> request.user.is_superuser:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            profile = Userprofile.objects.get(user=request.user)</div><div class=\"line\">        <span class=\"keyword\">except</span> Userprofile.DoesNotExist:</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class=\"string\">'application/json'</span>)</div><div class=\"line\">        method = request.method.lower()</div><div class=\"line\">        path = request.path.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> method == <span class=\"string\">'get'</span>:</div><div class=\"line\">            parameter = []</div><div class=\"line\">            <span class=\"keyword\">for</span> _parameter <span class=\"keyword\">in</span> request.GET.items():</div><div class=\"line\">                parameter.append(_parameter[<span class=\"number\">0</span>])</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                parameter_dict = json.loads(request.body)</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">                parameter_dict = &#123;&#125;</div><div class=\"line\">            parameter = parameter_dict.keys()</div><div class=\"line\">        all_permission = profile.get_all_permissions()</div><div class=\"line\">        result = <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">for</span> _url <span class=\"keyword\">in</span> all_permission:</div><div class=\"line\">            url = _url.url</div><div class=\"line\">            action = _url.action</div><div class=\"line\">            parameters = _url.parameters.split(<span class=\"string\">','</span>)</div><div class=\"line\">            <span class=\"keyword\">if</span> method == action <span class=\"keyword\">and</span> path == url <span class=\"keyword\">and</span> (len(Counter(parameter) - Counter(parameters)) == <span class=\"number\">0</span>):</div><div class=\"line\">                result = <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result:</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class=\"string\">'application/json'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div></pre></td></tr></table></figure>\n<h4 id=\"接口说明\"><a href=\"#接口说明\" class=\"headerlink\" title=\"接口说明\"></a>接口说明</h4><p><img src=\"https://ttxsgoto.github.io/img/django/permission.png\" alt=\"\"></p>\n<h4 id=\"Git地址\"><a href=\"#Git地址\" class=\"headerlink\" title=\"Git地址\"></a>Git地址</h4><p><a href=\"https://github.com/ttxsgoto/url_permission\" target=\"_blank\" rel=\"external\">https://github.com/ttxsgoto/url_permission</a></p>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>Django自带的权限系统为model层面的，也就是说给某个用户或者组对应的model权限，拥有了操作该model的权限，不能更精细化的控制权限，如对象级别的权限</p>\n<p>现在引用了基于url的权限系统，可以控制用户访问一个接口的不同方法 ，可以很方便的控制权限；如：用户对于某个接口可以做到只拥有查看的权限而没有修改的权限，因为对于相同的url请求的方法不同</p>\n<h4 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a>功能说明</h4><p>1.类似于django自身权限模块，拥有用户和用户组两类权限<br>2.通过swagger 获取项目URL 列表用于分配权限<br>3.通过中间件来拦截判断用户对请求的url是否有对应的权限</p>\n<h4 id=\"主要代码说明\"><a href=\"#主要代码说明\" class=\"headerlink\" title=\"主要代码说明\"></a>主要代码说明</h4><h5 id=\"models-py\"><a href=\"#models-py\" class=\"headerlink\" title=\"models.py\"></a>models.py</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</div><div class=\"line\"><span class=\"keyword\">from</span> django.db.models.signals <span class=\"keyword\">import</span> post_save</div><div class=\"line\"><span class=\"keyword\">from</span> django.dispatch <span class=\"keyword\">import</span> receiver</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> Permission, User</div><div class=\"line\"><span class=\"keyword\">from</span> .managers <span class=\"keyword\">import</span> UserprofileManager</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Userprofile</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户相关信息\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    user = models.OneToOneField(settings.AUTH_USER_MODEL, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    sex = models.IntegerField(choices=(</div><div class=\"line\">        (<span class=\"number\">0</span>, <span class=\"string\">'女性'</span>),</div><div class=\"line\">        (<span class=\"number\">1</span>, <span class=\"string\">'男性'</span>),</div><div class=\"line\">        (<span class=\"number\">2</span>, <span class=\"string\">'未填写'</span>)</div><div class=\"line\">    ), default=<span class=\"number\">2</span>, help_text=<span class=\"string\">'sex'</span>)</div><div class=\"line\">    groups = models.ManyToManyField(</div><div class=\"line\">        <span class=\"string\">'Group'</span>,</div><div class=\"line\">        verbose_name=<span class=\"string\">'user groups'</span>,</div><div class=\"line\">        blank=<span class=\"keyword\">True</span>,</div><div class=\"line\">        through=<span class=\"string\">'UserGroup'</span>,</div><div class=\"line\">        through_fields=(<span class=\"string\">'user'</span>, <span class=\"string\">'group'</span>)</div><div class=\"line\">    )</div><div class=\"line\">    user_permissions = models.ManyToManyField(</div><div class=\"line\">        <span class=\"string\">'URLSource'</span>,</div><div class=\"line\">        verbose_name=<span class=\"string\">'user permissions'</span>,</div><div class=\"line\">        blank=<span class=\"keyword\">True</span>,</div><div class=\"line\">        through=<span class=\"string\">'UserURL'</span>,</div><div class=\"line\">        through_fields=(<span class=\"string\">'user'</span>, <span class=\"string\">'url'</span>)</div><div class=\"line\">    )</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'描述'</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>, max_length=<span class=\"number\">100</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    create_time = models.DateTimeField(auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    objects = UserprofileManager()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'user_profile'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户信息'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        ordering = [<span class=\"string\">'-create_time'</span>]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;'</span>.format(self.user.username)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @receiver(post_save, sender=User)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_user_profile</span><span class=\"params\">(sender, instance=None, created=False, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> created:</div><div class=\"line\">            Userprofile.objects.get_or_create(user=instance, defaults=&#123;<span class=\"string\">'desc'</span>: instance.username&#125;)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_permissions</span><span class=\"params\">(self, permissions)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"用户添加权限\"\"\"</span></div><div class=\"line\">        history_permission = self.userurl_set.all()  <span class=\"comment\"># 现在已有的权限</span></div><div class=\"line\">        <span class=\"keyword\">if</span> history_permission:</div><div class=\"line\">            <span class=\"comment\"># 如果有就不添加,没有再添加,多余的删除</span></div><div class=\"line\">            <span class=\"keyword\">for</span> _permiss <span class=\"keyword\">in</span> history_permission:</div><div class=\"line\">                <span class=\"keyword\">if</span> _permiss.url <span class=\"keyword\">in</span> permissions:</div><div class=\"line\">                    permissions.remove(_permiss.url)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    _permiss.delete()</div><div class=\"line\">            permisson_list = [UserURL(user=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            permisson_list = [UserURL(user=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        self.userurl_set.bulk_create(permisson_list)</div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_groups</span><span class=\"params\">(self, group)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        用户添加到组(目前只支持添加到单个组)</div><div class=\"line\">        :param group: 权限组实例</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        user_group = self.usergroup_set.all()</div><div class=\"line\">        <span class=\"keyword\">if</span> user_group:</div><div class=\"line\">            user_group.delete()</div><div class=\"line\">        self.usergroup_set.create(group=group)</div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_group_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"获取用户所在组的权限\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.usergroup_set.all()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_url_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"获取用户单独关联的权限\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.userurl_set.all()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"该用户的所有权限,包括所在组权限和自己单独关联权限\"\"\"</span></div><div class=\"line\">        permissions = set()</div><div class=\"line\">        <span class=\"comment\"># group 权限</span></div><div class=\"line\">        group_permission = self.get_group_permissions()</div><div class=\"line\">        <span class=\"keyword\">for</span> permission <span class=\"keyword\">in</span> group_permission:</div><div class=\"line\">            URL = GroupURL.objects.filter(group=permission.group)</div><div class=\"line\">            <span class=\"keyword\">for</span> _permission <span class=\"keyword\">in</span> URL:</div><div class=\"line\">                permissions.add(_permission.url)</div><div class=\"line\">        <span class=\"comment\"># user 权限</span></div><div class=\"line\">        url_permission = self.get_url_permissions()</div><div class=\"line\">        <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_permission:</div><div class=\"line\">            permissions.add(url.url)</div><div class=\"line\">        <span class=\"keyword\">return</span> permissions</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">URLSource</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"URL资源信息\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    url = models.CharField(<span class=\"string\">u'url'</span>, max_length=<span class=\"number\">128</span>)</div><div class=\"line\">    action = models.CharField(<span class=\"string\">u'请求方法'</span>, max_length=<span class=\"number\">16</span>)</div><div class=\"line\">    description = models.CharField(<span class=\"string\">u'描述信息'</span>, max_length=<span class=\"number\">256</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    parameters = models.CharField(<span class=\"string\">u'参数, 逗号分隔'</span>, max_length=<span class=\"number\">128</span>, default=<span class=\"string\">''</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'URL信息'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        db_table = <span class=\"string\">'url_source'</span></div><div class=\"line\">        unique_together = ((<span class=\"string\">'url'</span>, <span class=\"string\">'action'</span>),)</div><div class=\"line\">        ordering = [<span class=\"string\">'id'</span>]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;-&#123;&#125;'</span>.format(self.id, self.description, self.action)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户组信息\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    name = models.CharField(max_length=<span class=\"number\">64</span>, verbose_name=<span class=\"string\">'组名'</span>, unique=<span class=\"keyword\">True</span>, help_text=<span class=\"string\">'组名'</span>)</div><div class=\"line\">    code = models.CharField(max_length=<span class=\"number\">64</span>, verbose_name=<span class=\"string\">'用户组中文名'</span>, default=<span class=\"string\">''</span>, help_text=<span class=\"string\">'组code'</span>)</div><div class=\"line\">    permissions = models.ManyToManyField(</div><div class=\"line\">        URLSource,</div><div class=\"line\">        verbose_name=<span class=\"string\">'permissions'</span>,</div><div class=\"line\">        blank=<span class=\"keyword\">True</span>,</div><div class=\"line\">        through=<span class=\"string\">'GroupURL'</span>,</div><div class=\"line\">        through_fields=(<span class=\"string\">'group'</span>, <span class=\"string\">'url'</span>)</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'group'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户权限组'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_permissions</span><span class=\"params\">(self, permissions)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        给组添加权限</div><div class=\"line\">        :param permissons: 权限列表,filter查询列表</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        history_permission = self.groupurl_set.all()  <span class=\"comment\"># 现在已有的权限</span></div><div class=\"line\">        <span class=\"keyword\">if</span> history_permission:</div><div class=\"line\">            <span class=\"comment\"># 如果有就不添加,没有再添加,多余的删除</span></div><div class=\"line\">            <span class=\"keyword\">for</span> _permiss <span class=\"keyword\">in</span> history_permission:</div><div class=\"line\">                <span class=\"keyword\">if</span> _permiss.url <span class=\"keyword\">in</span> permissions:</div><div class=\"line\">                    permissions.remove(_permiss.url)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    _permiss.delete()</div><div class=\"line\">            permisson_list = [GroupURL(group=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            permisson_list = [GroupURL(group=self, url=permisson) <span class=\"keyword\">for</span> permisson <span class=\"keyword\">in</span> permissions]</div><div class=\"line\">        self.groupurl_set.bulk_create(permisson_list)</div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_group_permissions</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"获取该组对应的权限列表\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.groupurl_set.all()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserGroup</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户和组关联\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    user = models.ForeignKey(Userprofile, verbose_name=<span class=\"string\">u'用户'</span>)</div><div class=\"line\">    group = models.ForeignKey(Group, verbose_name=<span class=\"string\">u'组'</span>)</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'其他信息'</span>, max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'user_groups'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户和组关系'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        unique_together = ((<span class=\"string\">'user'</span>, <span class=\"string\">'group'</span>),)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.group)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserURL</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"用户和URL关联\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    user = models.ForeignKey(Userprofile, verbose_name=<span class=\"string\">u'用户'</span>)</div><div class=\"line\">    url = models.ForeignKey(URLSource, verbose_name=<span class=\"string\">u'URL'</span>)</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'其他信息'</span>, max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'user_urls'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户权限关系'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        unique_together = ((<span class=\"string\">'user'</span>, <span class=\"string\">'url'</span>),)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;'</span>.format(self.user, self.url)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupURL</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"组和URL关系\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    group = models.ForeignKey(Group, verbose_name=<span class=\"string\">u'组'</span>)</div><div class=\"line\">    url = models.ForeignKey(URLSource, verbose_name=<span class=\"string\">u'URL'</span>)</div><div class=\"line\">    desc = models.CharField(<span class=\"string\">u'其他信息'</span>, max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, null=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'group_urls'</span></div><div class=\"line\">        verbose_name = <span class=\"string\">u'用户权限组关系'</span></div><div class=\"line\">        verbose_name_plural = verbose_name</div><div class=\"line\">        unique_together = ((<span class=\"string\">'group'</span>, <span class=\"string\">'url'</span>),)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;-&#123;&#125;'</span>.format(self.group, self.url)</div></pre></td></tr></table></figure>\n<h5 id=\"middleware-py\"><a href=\"#middleware-py\" class=\"headerlink\" title=\"middleware.py\"></a>middleware.py</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseForbidden</div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</div><div class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Userprofile</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth <span class=\"keyword\">import</span> get_user_model</div><div class=\"line\"><span class=\"keyword\">from</span> .settings <span class=\"keyword\">import</span> url_permisson_settings</div><div class=\"line\"> </div><div class=\"line\">logs = logging.getLogger(<span class=\"string\">'django'</span>)</div><div class=\"line\"> </div><div class=\"line\">User = get_user_model()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">URLPermissionMiddleWare</span><span class=\"params\">(MiddlewareMixin)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        response = &#123;</div><div class=\"line\">            <span class=\"string\">\"status_code\"</span>: <span class=\"number\">403</span>,</div><div class=\"line\">            <span class=\"string\">\"message\"</span>: <span class=\"string\">u\"无权限操作,请联系管理员.\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        path = request.path.split(<span class=\"string\">'/'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> path[<span class=\"number\">1</span>] <span class=\"keyword\">in</span> url_permisson_settings.ALL_ALLOW_URL:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(request.user, User):</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">if</span> request.user.is_superuser:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            profile = Userprofile.objects.get(user=request.user)</div><div class=\"line\">        <span class=\"keyword\">except</span> Userprofile.DoesNotExist:</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class=\"string\">'application/json'</span>)</div><div class=\"line\">        method = request.method.lower()</div><div class=\"line\">        path = request.path.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> method == <span class=\"string\">'get'</span>:</div><div class=\"line\">            parameter = []</div><div class=\"line\">            <span class=\"keyword\">for</span> _parameter <span class=\"keyword\">in</span> request.GET.items():</div><div class=\"line\">                parameter.append(_parameter[<span class=\"number\">0</span>])</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                parameter_dict = json.loads(request.body)</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">                parameter_dict = &#123;&#125;</div><div class=\"line\">            parameter = parameter_dict.keys()</div><div class=\"line\">        all_permission = profile.get_all_permissions()</div><div class=\"line\">        result = <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">for</span> _url <span class=\"keyword\">in</span> all_permission:</div><div class=\"line\">            url = _url.url</div><div class=\"line\">            action = _url.action</div><div class=\"line\">            parameters = _url.parameters.split(<span class=\"string\">','</span>)</div><div class=\"line\">            <span class=\"keyword\">if</span> method == action <span class=\"keyword\">and</span> path == url <span class=\"keyword\">and</span> (len(Counter(parameter) - Counter(parameters)) == <span class=\"number\">0</span>):</div><div class=\"line\">                result = <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result:</div><div class=\"line\">            <span class=\"keyword\">return</span> HttpResponseForbidden(json.dumps(response), content_type=<span class=\"string\">'application/json'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div></pre></td></tr></table></figure>\n<h4 id=\"接口说明\"><a href=\"#接口说明\" class=\"headerlink\" title=\"接口说明\"></a>接口说明</h4><p><img src=\"https://ttxsgoto.github.io/img/django/permission.png\" alt=\"\"></p>\n<h4 id=\"Git地址\"><a href=\"#Git地址\" class=\"headerlink\" title=\"Git地址\"></a>Git地址</h4><p><a href=\"https://github.com/ttxsgoto/url_permission\">https://github.com/ttxsgoto/url_permission</a></p>\n"},{"title":"Elasticsearch Elasticsearch_dsl 基本查询","date":"2017-12-24T07:25:33.000Z","_content":"#### 说明\n 通过elasticsearch_dsl提供的API操作es进行基本查询操作\n \n#### 创建mapping\n```python\nfrom elasticsearch_dsl import DocType, Date, Keyword, Text, Integer\nfrom elasticsearch_dsl.connections import connections\n \nconnections.create_connection(hosts=[\"localhost\"])\n# connections.create_connection(hosts=[\"http://admin:admin@127.0.0.1:8080\"])    # 使用认证连接\n \n \nclass ZhihuQ(DocType):\n    id = Integer()\n    zhihu_id = Integer()                    # 知乎idlong\n    topics = Keyword()                      # 主题text\n    url = Keyword()                         # urlkeyword\n    title = Text(analyzer=\"ik_max_word\")    # 标题text\n    content = Text(analyzer=\"ik_max_word\")  # 内容text\n    answer_num = Integer()                  # 回答数量int\n    comments_num = Integer()                # 评论数量int\n    watch_user_num = Integer()              # 关注者数量int\n    click_num = Integer()                   # 浏览数量int\n    crawl_time = Date(format='date_optional_time||yyyy-MM-dd HH:mm:ss') # 创建时间\n \n    class Meta:\n        index = \"zhihuquestion\"\n        doc_type = \"question\"\n \n \nif __name__ == \"__main__\":\n    ZhihuQ.init()   # 初始化mapping\n```\n\n#### 基本查询\n\n##### 查询所有，指定返回数量,设置分页\n\n```python\nGET zhihuquestion/_search\n{\n  \"query\": {\n    \"match_all\": {}\n  },\n   \"from\": 0,\n   \"size\": 5\n}\n# python：\nsearch = ZhihuQ.search()\nresult = search.query().extra(size=1000)[0:5]\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### match查询\n使用分词处理后查询\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"match\": {\n            \"title\": \"python\"\n        }\n    }\n}\n# python\nresult = search.query(\"match\", title='Python')\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### 多字段查询\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"query\": \"python\",\n            \"fields\": [\n                \"title\",\n                \"content\"\n            ]\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='python', fields=['title', 'content'])\nq = search.query(multi_match)\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### term查询\n值不做解析处理，直接查询,完全匹配\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"term\": {\n            \"topics\": \"python\"\n        }\n    }\n}\n# python\nresult = search.query('term', title='Python')\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### terms查询(多词条)\n任何一个满足都可以返回数据\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"terms\": {\n            \"topics\": [\n                \"python\",\n                \"Python\"\n            ]\n        }\n    }\n}\n# python\nresult = search.query('terms', topics=['Python', 'python'])\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### 词条(Term)查询-排序(Sorted)\n指定返回字段\n```python\nGET zhihuquestion/_search\n{\n    \"sort\": [\n        {\n            \"crawl_time\": {\n                \"order\": \"asc\"\n            }\n        }\n    ],\n    \"query\": {\n        \"terms\": {\n            \"title\": [\n                \"Python\",\n                \"python\"\n            ]\n        }\n    },\n    \"_source\": [\n        \"crawl_time\"\n    ]\n}\n# python\nresult = search.query('terms', title=['Python', 'python']).source(['crawl_time']).sort({'crawl_time':{\"order\" : \"asc\",}})\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### range 范围查询\n用于日期、数字和字符串类型的字段\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"match\": {\n                        \"title\": \"Python\"\n                    }\n                },\n                {\n                    \"range\": {\n                        \"crawl_time\": {\n                            \"gte\": \"2017-12-21 19:19:44\",\n                            \"lte\": \"now\"\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n# python\nresult = search.query(\"match\", title='Python').query(\"range\", crawl_time={'gte':'2017-12-21 19:19:44','lte': 'now'})\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n\n##### bool查询\n\n- must 等同于 AND\n- must_not 等同于 NOT\n- should 等同于 OR\n\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"match\": {\n                        \"title\": \"python\"\n                    }\n                },\n                {\n                    \"match\": {\n                        \"title\": \"c\"\n                    }\n                }\n            ]\n        }\n    }\n}\n# python\nq = Q(\"match\", title='python') & Q(\"match\", title='c')\nq = Q(\"match\", title='python') | Q(\"match\", title='c')\nq = ~Q(\"match\", title='python') & ~Q(\"match\", title='c')\nresult = search.query(q)\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### highlighting高亮\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"match\": {\n                        \"title\": \"python\"\n                    }\n                },\n                {\n                    \"match\": {\n                        \"title\": \"c\"\n                    }\n                }\n            ]\n        }\n    },\n    \"highlight\": {\n        \"fields\": {\n            \"title\": {\n                \"fragment_size\": 50\n            }\n        }\n    }\n}\n# python\nq = Q(\"match\", title='python') & Q(\"match\", title='c')\ns = search.query(q)\nresult = s.highlight('title', fragment_size=50)\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n\n##### 模糊(fuzzy)查询\n在 Match检索 和多匹配检索中可以启用模糊匹配来捕捉拼写错误;模糊度是基于原始单词的编辑距离来指定,当术语长度大于 5 个字符时，AUTO 的模糊值等同于指定值 “2”。但是，80％ 拼写错误的编辑距离为 1，所以，将模糊值设置为 1 可能会提高您的整体搜索性能\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"fields\": [\n                \"title\",\n                \"content\"\n            ],\n            \"fuzziness\": \"AUTO\",\n            \"query\": \"Python\"\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='Python', fields=['title', 'content'], fuzziness='AUTO')\nq = search.query(multi_match)\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### 通配符(wildcard)查询 \n\n通配符查询允许指定匹配的模式，而不是整个词组（term）检索\n\n？ 匹配任何字符, * 匹配零个或多个字符\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"wildcard\": {\n            \"title\": \"pyth*\"\n        }\n    }\n}\n# python\nresult = search.query('wildcard', title='python*')\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### match_phrase查询(短语查询)\n匹配短语查询要求查询字符串中的所有词都存在于文档中，按照查询字符串中指定的顺序并且彼此靠近;默认情况下，这些词必须完全相邻，但可以指定偏离值（slop value)，该值指示在仍然考虑文档匹配的情况下词与词之间的偏离值。\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"fields\": [\n                \"title\"\n            ],\n            \"type\": \"phrase\",\n            \"slop\": 6,\n            \"query\": \"python下载\"\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='python下载', fields=['title'],\n                                 type='phrase',\n                                 slop=4\n                                 )\nq = search.query(multi_match)\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### 短语前缀(Match Phrase Prefix)查询\n匹配词组前缀查询在查询时提供搜索即时类型或“相对简单”的自动完成版本，而无需以任何方式准备数据\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"fields\": [\n                \"title\"\n            ],\n            \"type\": \"phrase_prefix\",\n            \"slop\": 2,\n            \"query\": \"python精通\"\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='python精通', fields=['title'],\n                                 type='phrase_prefix',\n                                 slop=2\n                                 )\nq = search.query(multi_match).source(['title'])\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n\n##### aggregation聚合\n聚合类型: Bucketing, Metric, Matrix, Pipeline\n```python\n# metric 计算相关, max, min, avg等\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"match_all\": {}\n    },\n    \"aggs\": {\n        \"max_click_num\": {\n            \"max\": {\n                \"field\": \"click_num\"\n            }\n        }\n    }\n}\n# python\n_agg = A('max', field='click_num')\nresult = search.aggs.metric('max_click_num', _agg)\ndata = result.execute()\nprint data.aggregations.max_click_num   # 得到点击量最大的值\n \n# bucket\n_agg = A('terms', field='comment')\nf = search.aggs.bucket('bucket_comment', _agg)\nquery_word = json.dumps(f.to_dict())\nprint query_word\nresponse = search.execute()\nprint response.aggregations.bucket_comment.buckets\nprint response.to_dict()\n```\n\n\n\n\n","source":"_posts/elasticsearch-elasticsearch-dsl.md","raw":"---\ntitle: Elasticsearch Elasticsearch_dsl 基本查询\ndate: 2017-12-24 15:25:33\ntags:\n  - Elasticsearch_dsl\ncategories:\n  - Elasticsearch\n---\n#### 说明\n 通过elasticsearch_dsl提供的API操作es进行基本查询操作\n \n#### 创建mapping\n```python\nfrom elasticsearch_dsl import DocType, Date, Keyword, Text, Integer\nfrom elasticsearch_dsl.connections import connections\n \nconnections.create_connection(hosts=[\"localhost\"])\n# connections.create_connection(hosts=[\"http://admin:admin@127.0.0.1:8080\"])    # 使用认证连接\n \n \nclass ZhihuQ(DocType):\n    id = Integer()\n    zhihu_id = Integer()                    # 知乎idlong\n    topics = Keyword()                      # 主题text\n    url = Keyword()                         # urlkeyword\n    title = Text(analyzer=\"ik_max_word\")    # 标题text\n    content = Text(analyzer=\"ik_max_word\")  # 内容text\n    answer_num = Integer()                  # 回答数量int\n    comments_num = Integer()                # 评论数量int\n    watch_user_num = Integer()              # 关注者数量int\n    click_num = Integer()                   # 浏览数量int\n    crawl_time = Date(format='date_optional_time||yyyy-MM-dd HH:mm:ss') # 创建时间\n \n    class Meta:\n        index = \"zhihuquestion\"\n        doc_type = \"question\"\n \n \nif __name__ == \"__main__\":\n    ZhihuQ.init()   # 初始化mapping\n```\n\n#### 基本查询\n\n##### 查询所有，指定返回数量,设置分页\n\n```python\nGET zhihuquestion/_search\n{\n  \"query\": {\n    \"match_all\": {}\n  },\n   \"from\": 0,\n   \"size\": 5\n}\n# python：\nsearch = ZhihuQ.search()\nresult = search.query().extra(size=1000)[0:5]\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### match查询\n使用分词处理后查询\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"match\": {\n            \"title\": \"python\"\n        }\n    }\n}\n# python\nresult = search.query(\"match\", title='Python')\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### 多字段查询\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"query\": \"python\",\n            \"fields\": [\n                \"title\",\n                \"content\"\n            ]\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='python', fields=['title', 'content'])\nq = search.query(multi_match)\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### term查询\n值不做解析处理，直接查询,完全匹配\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"term\": {\n            \"topics\": \"python\"\n        }\n    }\n}\n# python\nresult = search.query('term', title='Python')\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### terms查询(多词条)\n任何一个满足都可以返回数据\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"terms\": {\n            \"topics\": [\n                \"python\",\n                \"Python\"\n            ]\n        }\n    }\n}\n# python\nresult = search.query('terms', topics=['Python', 'python'])\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### 词条(Term)查询-排序(Sorted)\n指定返回字段\n```python\nGET zhihuquestion/_search\n{\n    \"sort\": [\n        {\n            \"crawl_time\": {\n                \"order\": \"asc\"\n            }\n        }\n    ],\n    \"query\": {\n        \"terms\": {\n            \"title\": [\n                \"Python\",\n                \"python\"\n            ]\n        }\n    },\n    \"_source\": [\n        \"crawl_time\"\n    ]\n}\n# python\nresult = search.query('terms', title=['Python', 'python']).source(['crawl_time']).sort({'crawl_time':{\"order\" : \"asc\",}})\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n\n```\n##### range 范围查询\n用于日期、数字和字符串类型的字段\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"match\": {\n                        \"title\": \"Python\"\n                    }\n                },\n                {\n                    \"range\": {\n                        \"crawl_time\": {\n                            \"gte\": \"2017-12-21 19:19:44\",\n                            \"lte\": \"now\"\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n# python\nresult = search.query(\"match\", title='Python').query(\"range\", crawl_time={'gte':'2017-12-21 19:19:44','lte': 'now'})\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n\n##### bool查询\n\n- must 等同于 AND\n- must_not 等同于 NOT\n- should 等同于 OR\n\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"match\": {\n                        \"title\": \"python\"\n                    }\n                },\n                {\n                    \"match\": {\n                        \"title\": \"c\"\n                    }\n                }\n            ]\n        }\n    }\n}\n# python\nq = Q(\"match\", title='python') & Q(\"match\", title='c')\nq = Q(\"match\", title='python') | Q(\"match\", title='c')\nq = ~Q(\"match\", title='python') & ~Q(\"match\", title='c')\nresult = search.query(q)\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### highlighting高亮\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"match\": {\n                        \"title\": \"python\"\n                    }\n                },\n                {\n                    \"match\": {\n                        \"title\": \"c\"\n                    }\n                }\n            ]\n        }\n    },\n    \"highlight\": {\n        \"fields\": {\n            \"title\": {\n                \"fragment_size\": 50\n            }\n        }\n    }\n}\n# python\nq = Q(\"match\", title='python') & Q(\"match\", title='c')\ns = search.query(q)\nresult = s.highlight('title', fragment_size=50)\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n\n##### 模糊(fuzzy)查询\n在 Match检索 和多匹配检索中可以启用模糊匹配来捕捉拼写错误;模糊度是基于原始单词的编辑距离来指定,当术语长度大于 5 个字符时，AUTO 的模糊值等同于指定值 “2”。但是，80％ 拼写错误的编辑距离为 1，所以，将模糊值设置为 1 可能会提高您的整体搜索性能\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"fields\": [\n                \"title\",\n                \"content\"\n            ],\n            \"fuzziness\": \"AUTO\",\n            \"query\": \"Python\"\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='Python', fields=['title', 'content'], fuzziness='AUTO')\nq = search.query(multi_match)\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### 通配符(wildcard)查询 \n\n通配符查询允许指定匹配的模式，而不是整个词组（term）检索\n\n？ 匹配任何字符, * 匹配零个或多个字符\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"wildcard\": {\n            \"title\": \"pyth*\"\n        }\n    }\n}\n# python\nresult = search.query('wildcard', title='python*')\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### match_phrase查询(短语查询)\n匹配短语查询要求查询字符串中的所有词都存在于文档中，按照查询字符串中指定的顺序并且彼此靠近;默认情况下，这些词必须完全相邻，但可以指定偏离值（slop value)，该值指示在仍然考虑文档匹配的情况下词与词之间的偏离值。\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"fields\": [\n                \"title\"\n            ],\n            \"type\": \"phrase\",\n            \"slop\": 6,\n            \"query\": \"python下载\"\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='python下载', fields=['title'],\n                                 type='phrase',\n                                 slop=4\n                                 )\nq = search.query(multi_match)\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n##### 短语前缀(Match Phrase Prefix)查询\n匹配词组前缀查询在查询时提供搜索即时类型或“相对简单”的自动完成版本，而无需以任何方式准备数据\n```python\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"multi_match\": {\n            \"fields\": [\n                \"title\"\n            ],\n            \"type\": \"phrase_prefix\",\n            \"slop\": 2,\n            \"query\": \"python精通\"\n        }\n    }\n}\n# python\nmulti_match = MultiMatch(query='python精通', fields=['title'],\n                                 type='phrase_prefix',\n                                 slop=2\n                                 )\nq = search.query(multi_match).source(['title'])\nresult = q.query()\ndata = result.execute()\ndata = data.to_dict()['hits']['hits']\n```\n\n##### aggregation聚合\n聚合类型: Bucketing, Metric, Matrix, Pipeline\n```python\n# metric 计算相关, max, min, avg等\nGET zhihuquestion/_search\n{\n    \"query\": {\n        \"match_all\": {}\n    },\n    \"aggs\": {\n        \"max_click_num\": {\n            \"max\": {\n                \"field\": \"click_num\"\n            }\n        }\n    }\n}\n# python\n_agg = A('max', field='click_num')\nresult = search.aggs.metric('max_click_num', _agg)\ndata = result.execute()\nprint data.aggregations.max_click_num   # 得到点击量最大的值\n \n# bucket\n_agg = A('terms', field='comment')\nf = search.aggs.bucket('bucket_comment', _agg)\nquery_word = json.dumps(f.to_dict())\nprint query_word\nresponse = search.execute()\nprint response.aggregations.bucket_comment.buckets\nprint response.to_dict()\n```\n\n\n\n\n","slug":"elasticsearch-elasticsearch-dsl","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wm002tct8uzea0ut4u","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p> 通过elasticsearch_dsl提供的API操作es进行基本查询操作</p>\n<h4 id=\"创建mapping\"><a href=\"#创建mapping\" class=\"headerlink\" title=\"创建mapping\"></a>创建mapping</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> elasticsearch_dsl <span class=\"keyword\">import</span> DocType, Date, Keyword, Text, Integer</div><div class=\"line\"><span class=\"keyword\">from</span> elasticsearch_dsl.connections <span class=\"keyword\">import</span> connections</div><div class=\"line\"> </div><div class=\"line\">connections.create_connection(hosts=[<span class=\"string\">\"localhost\"</span>])</div><div class=\"line\"><span class=\"comment\"># connections.create_connection(hosts=[\"http://admin:admin@127.0.0.1:8080\"])    # 使用认证连接</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZhihuQ</span><span class=\"params\">(DocType)</span>:</span></div><div class=\"line\">    id = Integer()</div><div class=\"line\">    zhihu_id = Integer()                    <span class=\"comment\"># 知乎idlong</span></div><div class=\"line\">    topics = Keyword()                      <span class=\"comment\"># 主题text</span></div><div class=\"line\">    url = Keyword()                         <span class=\"comment\"># urlkeyword</span></div><div class=\"line\">    title = Text(analyzer=<span class=\"string\">\"ik_max_word\"</span>)    <span class=\"comment\"># 标题text</span></div><div class=\"line\">    content = Text(analyzer=<span class=\"string\">\"ik_max_word\"</span>)  <span class=\"comment\"># 内容text</span></div><div class=\"line\">    answer_num = Integer()                  <span class=\"comment\"># 回答数量int</span></div><div class=\"line\">    comments_num = Integer()                <span class=\"comment\"># 评论数量int</span></div><div class=\"line\">    watch_user_num = Integer()              <span class=\"comment\"># 关注者数量int</span></div><div class=\"line\">    click_num = Integer()                   <span class=\"comment\"># 浏览数量int</span></div><div class=\"line\">    crawl_time = Date(format=<span class=\"string\">'date_optional_time||yyyy-MM-dd HH:mm:ss'</span>) <span class=\"comment\"># 创建时间</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        index = <span class=\"string\">\"zhihuquestion\"</span></div><div class=\"line\">        doc_type = <span class=\"string\">\"question\"</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    ZhihuQ.init()   <span class=\"comment\"># 初始化mapping</span></div></pre></td></tr></table></figure>\n<h4 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h4><h5 id=\"查询所有，指定返回数量-设置分页\"><a href=\"#查询所有，指定返回数量-设置分页\" class=\"headerlink\" title=\"查询所有，指定返回数量,设置分页\"></a>查询所有，指定返回数量,设置分页</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"match_all\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">   <span class=\"string\">\"from\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">   <span class=\"string\">\"size\"</span>: <span class=\"number\">5</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python：</span></div><div class=\"line\">search = ZhihuQ.search()</div><div class=\"line\">result = search.query().extra(size=<span class=\"number\">1000</span>)[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"match查询\"><a href=\"#match查询\" class=\"headerlink\" title=\"match查询\"></a>match查询</h5><p>使用分词处理后查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'Python'</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"多字段查询\"><a href=\"#多字段查询\" class=\"headerlink\" title=\"多字段查询\"></a>多字段查询</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span>,</div><div class=\"line\">                <span class=\"string\">\"content\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'python'</span>, fields=[<span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>])</div><div class=\"line\">q = search.query(multi_match)</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"term查询\"><a href=\"#term查询\" class=\"headerlink\" title=\"term查询\"></a>term查询</h5><p>值不做解析处理，直接查询,完全匹配<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"term\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"topics\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'term'</span>, title=<span class=\"string\">'Python'</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"terms查询-多词条\"><a href=\"#terms查询-多词条\" class=\"headerlink\" title=\"terms查询(多词条)\"></a>terms查询(多词条)</h5><p>任何一个满足都可以返回数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"terms\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"topics\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"python\"</span>,</div><div class=\"line\">                <span class=\"string\">\"Python\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'terms'</span>, topics=[<span class=\"string\">'Python'</span>, <span class=\"string\">'python'</span>])</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"词条-Term-查询-排序-Sorted\"><a href=\"#词条-Term-查询-排序-Sorted\" class=\"headerlink\" title=\"词条(Term)查询-排序(Sorted)\"></a>词条(Term)查询-排序(Sorted)</h5><p>指定返回字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"sort\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"crawl_time\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"order\"</span>: <span class=\"string\">\"asc\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"terms\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"Python\"</span>,</div><div class=\"line\">                <span class=\"string\">\"python\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"_source\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"crawl_time\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'terms'</span>, title=[<span class=\"string\">'Python'</span>, <span class=\"string\">'python'</span>]).source([<span class=\"string\">'crawl_time'</span>]).sort(&#123;<span class=\"string\">'crawl_time'</span>:&#123;<span class=\"string\">\"order\"</span> : <span class=\"string\">\"asc\"</span>,&#125;&#125;)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"range-范围查询\"><a href=\"#range-范围查询\" class=\"headerlink\" title=\"range 范围查询\"></a>range 范围查询</h5><p>用于日期、数字和字符串类型的字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"bool\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"must\"</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Python\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"range\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"crawl_time\"</span>: &#123;</div><div class=\"line\">                            <span class=\"string\">\"gte\"</span>: <span class=\"string\">\"2017-12-21 19:19:44\"</span>,</div><div class=\"line\">                            <span class=\"string\">\"lte\"</span>: <span class=\"string\">\"now\"</span></div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'Python'</span>).query(<span class=\"string\">\"range\"</span>, crawl_time=&#123;<span class=\"string\">'gte'</span>:<span class=\"string\">'2017-12-21 19:19:44'</span>,<span class=\"string\">'lte'</span>: <span class=\"string\">'now'</span>&#125;)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"bool查询\"><a href=\"#bool查询\" class=\"headerlink\" title=\"bool查询\"></a>bool查询</h5><ul>\n<li>must 等同于 AND</li>\n<li>must_not 等同于 NOT</li>\n<li>should 等同于 OR</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"bool\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"must\"</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"c\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">q = Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) &amp; Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">q = Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) | Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">q = ~Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) &amp; ~Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">result = search.query(q)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"highlighting高亮\"><a href=\"#highlighting高亮\" class=\"headerlink\" title=\"highlighting高亮\"></a>highlighting高亮</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"bool\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"must\"</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"c\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"highlight\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"fields\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"fragment_size\"</span>: <span class=\"number\">50</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">q = Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) &amp; Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">s = search.query(q)</div><div class=\"line\">result = s.highlight(<span class=\"string\">'title'</span>, fragment_size=<span class=\"number\">50</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"模糊-fuzzy-查询\"><a href=\"#模糊-fuzzy-查询\" class=\"headerlink\" title=\"模糊(fuzzy)查询\"></a>模糊(fuzzy)查询</h5><p>在 Match检索 和多匹配检索中可以启用模糊匹配来捕捉拼写错误;模糊度是基于原始单词的编辑距离来指定,当术语长度大于 5 个字符时，AUTO 的模糊值等同于指定值 “2”。但是，80％ 拼写错误的编辑距离为 1，所以，将模糊值设置为 1 可能会提高您的整体搜索性能<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span>,</div><div class=\"line\">                <span class=\"string\">\"content\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"fuzziness\"</span>: <span class=\"string\">\"AUTO\"</span>,</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"Python\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'Python'</span>, fields=[<span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>], fuzziness=<span class=\"string\">'AUTO'</span>)</div><div class=\"line\">q = search.query(multi_match)</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"通配符-wildcard-查询\"><a href=\"#通配符-wildcard-查询\" class=\"headerlink\" title=\"通配符(wildcard)查询\"></a>通配符(wildcard)查询</h5><p>通配符查询允许指定匹配的模式，而不是整个词组（term）检索</p>\n<p>？ 匹配任何字符, * 匹配零个或多个字符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"wildcard\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"pyth*\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'wildcard'</span>, title=<span class=\"string\">'python*'</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"match-phrase查询-短语查询\"><a href=\"#match-phrase查询-短语查询\" class=\"headerlink\" title=\"match_phrase查询(短语查询)\"></a>match_phrase查询(短语查询)</h5><p>匹配短语查询要求查询字符串中的所有词都存在于文档中，按照查询字符串中指定的顺序并且彼此靠近;默认情况下，这些词必须完全相邻，但可以指定偏离值（slop value)，该值指示在仍然考虑文档匹配的情况下词与词之间的偏离值。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"phrase\"</span>,</div><div class=\"line\">            <span class=\"string\">\"slop\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"python下载\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'python下载'</span>, fields=[<span class=\"string\">'title'</span>],</div><div class=\"line\">                                 type=<span class=\"string\">'phrase'</span>,</div><div class=\"line\">                                 slop=<span class=\"number\">4</span></div><div class=\"line\">                                 )</div><div class=\"line\">q = search.query(multi_match)</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"短语前缀-Match-Phrase-Prefix-查询\"><a href=\"#短语前缀-Match-Phrase-Prefix-查询\" class=\"headerlink\" title=\"短语前缀(Match Phrase Prefix)查询\"></a>短语前缀(Match Phrase Prefix)查询</h5><p>匹配词组前缀查询在查询时提供搜索即时类型或“相对简单”的自动完成版本，而无需以任何方式准备数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"phrase_prefix\"</span>,</div><div class=\"line\">            <span class=\"string\">\"slop\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"python精通\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'python精通'</span>, fields=[<span class=\"string\">'title'</span>],</div><div class=\"line\">                                 type=<span class=\"string\">'phrase_prefix'</span>,</div><div class=\"line\">                                 slop=<span class=\"number\">2</span></div><div class=\"line\">                                 )</div><div class=\"line\">q = search.query(multi_match).source([<span class=\"string\">'title'</span>])</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"aggregation聚合\"><a href=\"#aggregation聚合\" class=\"headerlink\" title=\"aggregation聚合\"></a>aggregation聚合</h5><p>聚合类型: Bucketing, Metric, Matrix, Pipeline<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># metric 计算相关, max, min, avg等</span></div><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"match_all\"</span>: &#123;&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"aggs\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"max_click_num\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"max\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"field\"</span>: <span class=\"string\">\"click_num\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">_agg = A(<span class=\"string\">'max'</span>, field=<span class=\"string\">'click_num'</span>)</div><div class=\"line\">result = search.aggs.metric(<span class=\"string\">'max_click_num'</span>, _agg)</div><div class=\"line\">data = result.execute()</div><div class=\"line\"><span class=\"keyword\">print</span> data.aggregations.max_click_num   <span class=\"comment\"># 得到点击量最大的值</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># bucket</span></div><div class=\"line\">_agg = A(<span class=\"string\">'terms'</span>, field=<span class=\"string\">'comment'</span>)</div><div class=\"line\">f = search.aggs.bucket(<span class=\"string\">'bucket_comment'</span>, _agg)</div><div class=\"line\">query_word = json.dumps(f.to_dict())</div><div class=\"line\"><span class=\"keyword\">print</span> query_word</div><div class=\"line\">response = search.execute()</div><div class=\"line\"><span class=\"keyword\">print</span> response.aggregations.bucket_comment.buckets</div><div class=\"line\"><span class=\"keyword\">print</span> response.to_dict()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p> 通过elasticsearch_dsl提供的API操作es进行基本查询操作</p>\n<h4 id=\"创建mapping\"><a href=\"#创建mapping\" class=\"headerlink\" title=\"创建mapping\"></a>创建mapping</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> elasticsearch_dsl <span class=\"keyword\">import</span> DocType, Date, Keyword, Text, Integer</div><div class=\"line\"><span class=\"keyword\">from</span> elasticsearch_dsl.connections <span class=\"keyword\">import</span> connections</div><div class=\"line\"> </div><div class=\"line\">connections.create_connection(hosts=[<span class=\"string\">\"localhost\"</span>])</div><div class=\"line\"><span class=\"comment\"># connections.create_connection(hosts=[\"http://admin:admin@127.0.0.1:8080\"])    # 使用认证连接</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZhihuQ</span><span class=\"params\">(DocType)</span>:</span></div><div class=\"line\">    id = Integer()</div><div class=\"line\">    zhihu_id = Integer()                    <span class=\"comment\"># 知乎idlong</span></div><div class=\"line\">    topics = Keyword()                      <span class=\"comment\"># 主题text</span></div><div class=\"line\">    url = Keyword()                         <span class=\"comment\"># urlkeyword</span></div><div class=\"line\">    title = Text(analyzer=<span class=\"string\">\"ik_max_word\"</span>)    <span class=\"comment\"># 标题text</span></div><div class=\"line\">    content = Text(analyzer=<span class=\"string\">\"ik_max_word\"</span>)  <span class=\"comment\"># 内容text</span></div><div class=\"line\">    answer_num = Integer()                  <span class=\"comment\"># 回答数量int</span></div><div class=\"line\">    comments_num = Integer()                <span class=\"comment\"># 评论数量int</span></div><div class=\"line\">    watch_user_num = Integer()              <span class=\"comment\"># 关注者数量int</span></div><div class=\"line\">    click_num = Integer()                   <span class=\"comment\"># 浏览数量int</span></div><div class=\"line\">    crawl_time = Date(format=<span class=\"string\">'date_optional_time||yyyy-MM-dd HH:mm:ss'</span>) <span class=\"comment\"># 创建时间</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        index = <span class=\"string\">\"zhihuquestion\"</span></div><div class=\"line\">        doc_type = <span class=\"string\">\"question\"</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    ZhihuQ.init()   <span class=\"comment\"># 初始化mapping</span></div></pre></td></tr></table></figure>\n<h4 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h4><h5 id=\"查询所有，指定返回数量-设置分页\"><a href=\"#查询所有，指定返回数量-设置分页\" class=\"headerlink\" title=\"查询所有，指定返回数量,设置分页\"></a>查询所有，指定返回数量,设置分页</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"match_all\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">   <span class=\"string\">\"from\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">   <span class=\"string\">\"size\"</span>: <span class=\"number\">5</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python：</span></div><div class=\"line\">search = ZhihuQ.search()</div><div class=\"line\">result = search.query().extra(size=<span class=\"number\">1000</span>)[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"match查询\"><a href=\"#match查询\" class=\"headerlink\" title=\"match查询\"></a>match查询</h5><p>使用分词处理后查询<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'Python'</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"多字段查询\"><a href=\"#多字段查询\" class=\"headerlink\" title=\"多字段查询\"></a>多字段查询</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span>,</div><div class=\"line\">                <span class=\"string\">\"content\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'python'</span>, fields=[<span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>])</div><div class=\"line\">q = search.query(multi_match)</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"term查询\"><a href=\"#term查询\" class=\"headerlink\" title=\"term查询\"></a>term查询</h5><p>值不做解析处理，直接查询,完全匹配<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"term\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"topics\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'term'</span>, title=<span class=\"string\">'Python'</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"terms查询-多词条\"><a href=\"#terms查询-多词条\" class=\"headerlink\" title=\"terms查询(多词条)\"></a>terms查询(多词条)</h5><p>任何一个满足都可以返回数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"terms\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"topics\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"python\"</span>,</div><div class=\"line\">                <span class=\"string\">\"Python\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'terms'</span>, topics=[<span class=\"string\">'Python'</span>, <span class=\"string\">'python'</span>])</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"词条-Term-查询-排序-Sorted\"><a href=\"#词条-Term-查询-排序-Sorted\" class=\"headerlink\" title=\"词条(Term)查询-排序(Sorted)\"></a>词条(Term)查询-排序(Sorted)</h5><p>指定返回字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"sort\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"crawl_time\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"order\"</span>: <span class=\"string\">\"asc\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"terms\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"Python\"</span>,</div><div class=\"line\">                <span class=\"string\">\"python\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"_source\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"crawl_time\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'terms'</span>, title=[<span class=\"string\">'Python'</span>, <span class=\"string\">'python'</span>]).source([<span class=\"string\">'crawl_time'</span>]).sort(&#123;<span class=\"string\">'crawl_time'</span>:&#123;<span class=\"string\">\"order\"</span> : <span class=\"string\">\"asc\"</span>,&#125;&#125;)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"range-范围查询\"><a href=\"#range-范围查询\" class=\"headerlink\" title=\"range 范围查询\"></a>range 范围查询</h5><p>用于日期、数字和字符串类型的字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"bool\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"must\"</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Python\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"range\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"crawl_time\"</span>: &#123;</div><div class=\"line\">                            <span class=\"string\">\"gte\"</span>: <span class=\"string\">\"2017-12-21 19:19:44\"</span>,</div><div class=\"line\">                            <span class=\"string\">\"lte\"</span>: <span class=\"string\">\"now\"</span></div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'Python'</span>).query(<span class=\"string\">\"range\"</span>, crawl_time=&#123;<span class=\"string\">'gte'</span>:<span class=\"string\">'2017-12-21 19:19:44'</span>,<span class=\"string\">'lte'</span>: <span class=\"string\">'now'</span>&#125;)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"bool查询\"><a href=\"#bool查询\" class=\"headerlink\" title=\"bool查询\"></a>bool查询</h5><ul>\n<li>must 等同于 AND</li>\n<li>must_not 等同于 NOT</li>\n<li>should 等同于 OR</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"bool\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"must\"</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"c\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">q = Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) &amp; Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">q = Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) | Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">q = ~Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) &amp; ~Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">result = search.query(q)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"highlighting高亮\"><a href=\"#highlighting高亮\" class=\"headerlink\" title=\"highlighting高亮\"></a>highlighting高亮</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"bool\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"must\"</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"python\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"string\">\"match\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"c\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"highlight\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"fields\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"fragment_size\"</span>: <span class=\"number\">50</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">q = Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'python'</span>) &amp; Q(<span class=\"string\">\"match\"</span>, title=<span class=\"string\">'c'</span>)</div><div class=\"line\">s = search.query(q)</div><div class=\"line\">result = s.highlight(<span class=\"string\">'title'</span>, fragment_size=<span class=\"number\">50</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"模糊-fuzzy-查询\"><a href=\"#模糊-fuzzy-查询\" class=\"headerlink\" title=\"模糊(fuzzy)查询\"></a>模糊(fuzzy)查询</h5><p>在 Match检索 和多匹配检索中可以启用模糊匹配来捕捉拼写错误;模糊度是基于原始单词的编辑距离来指定,当术语长度大于 5 个字符时，AUTO 的模糊值等同于指定值 “2”。但是，80％ 拼写错误的编辑距离为 1，所以，将模糊值设置为 1 可能会提高您的整体搜索性能<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span>,</div><div class=\"line\">                <span class=\"string\">\"content\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"fuzziness\"</span>: <span class=\"string\">\"AUTO\"</span>,</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"Python\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'Python'</span>, fields=[<span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>], fuzziness=<span class=\"string\">'AUTO'</span>)</div><div class=\"line\">q = search.query(multi_match)</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"通配符-wildcard-查询\"><a href=\"#通配符-wildcard-查询\" class=\"headerlink\" title=\"通配符(wildcard)查询\"></a>通配符(wildcard)查询</h5><p>通配符查询允许指定匹配的模式，而不是整个词组（term）检索</p>\n<p>？ 匹配任何字符, * 匹配零个或多个字符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"wildcard\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"title\"</span>: <span class=\"string\">\"pyth*\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">result = search.query(<span class=\"string\">'wildcard'</span>, title=<span class=\"string\">'python*'</span>)</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"match-phrase查询-短语查询\"><a href=\"#match-phrase查询-短语查询\" class=\"headerlink\" title=\"match_phrase查询(短语查询)\"></a>match_phrase查询(短语查询)</h5><p>匹配短语查询要求查询字符串中的所有词都存在于文档中，按照查询字符串中指定的顺序并且彼此靠近;默认情况下，这些词必须完全相邻，但可以指定偏离值（slop value)，该值指示在仍然考虑文档匹配的情况下词与词之间的偏离值。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"phrase\"</span>,</div><div class=\"line\">            <span class=\"string\">\"slop\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"python下载\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'python下载'</span>, fields=[<span class=\"string\">'title'</span>],</div><div class=\"line\">                                 type=<span class=\"string\">'phrase'</span>,</div><div class=\"line\">                                 slop=<span class=\"number\">4</span></div><div class=\"line\">                                 )</div><div class=\"line\">q = search.query(multi_match)</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"短语前缀-Match-Phrase-Prefix-查询\"><a href=\"#短语前缀-Match-Phrase-Prefix-查询\" class=\"headerlink\" title=\"短语前缀(Match Phrase Prefix)查询\"></a>短语前缀(Match Phrase Prefix)查询</h5><p>匹配词组前缀查询在查询时提供搜索即时类型或“相对简单”的自动完成版本，而无需以任何方式准备数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"multi_match\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"fields\"</span>: [</div><div class=\"line\">                <span class=\"string\">\"title\"</span></div><div class=\"line\">            ],</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"phrase_prefix\"</span>,</div><div class=\"line\">            <span class=\"string\">\"slop\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">            <span class=\"string\">\"query\"</span>: <span class=\"string\">\"python精通\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">multi_match = MultiMatch(query=<span class=\"string\">'python精通'</span>, fields=[<span class=\"string\">'title'</span>],</div><div class=\"line\">                                 type=<span class=\"string\">'phrase_prefix'</span>,</div><div class=\"line\">                                 slop=<span class=\"number\">2</span></div><div class=\"line\">                                 )</div><div class=\"line\">q = search.query(multi_match).source([<span class=\"string\">'title'</span>])</div><div class=\"line\">result = q.query()</div><div class=\"line\">data = result.execute()</div><div class=\"line\">data = data.to_dict()[<span class=\"string\">'hits'</span>][<span class=\"string\">'hits'</span>]</div></pre></td></tr></table></figure></p>\n<h5 id=\"aggregation聚合\"><a href=\"#aggregation聚合\" class=\"headerlink\" title=\"aggregation聚合\"></a>aggregation聚合</h5><p>聚合类型: Bucketing, Metric, Matrix, Pipeline<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># metric 计算相关, max, min, avg等</span></div><div class=\"line\">GET zhihuquestion/_search</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"query\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"match_all\"</span>: &#123;&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"aggs\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"max_click_num\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"max\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"field\"</span>: <span class=\"string\">\"click_num\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># python</span></div><div class=\"line\">_agg = A(<span class=\"string\">'max'</span>, field=<span class=\"string\">'click_num'</span>)</div><div class=\"line\">result = search.aggs.metric(<span class=\"string\">'max_click_num'</span>, _agg)</div><div class=\"line\">data = result.execute()</div><div class=\"line\"><span class=\"keyword\">print</span> data.aggregations.max_click_num   <span class=\"comment\"># 得到点击量最大的值</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># bucket</span></div><div class=\"line\">_agg = A(<span class=\"string\">'terms'</span>, field=<span class=\"string\">'comment'</span>)</div><div class=\"line\">f = search.aggs.bucket(<span class=\"string\">'bucket_comment'</span>, _agg)</div><div class=\"line\">query_word = json.dumps(f.to_dict())</div><div class=\"line\"><span class=\"keyword\">print</span> query_word</div><div class=\"line\">response = search.execute()</div><div class=\"line\"><span class=\"keyword\">print</span> response.aggregations.bucket_comment.buckets</div><div class=\"line\"><span class=\"keyword\">print</span> response.to_dict()</div></pre></td></tr></table></figure></p>\n"},{"title":"Docker 网络模式","date":"2017-02-08T14:05:33.000Z","_content":"### Docker网络实现原理\n\nDocker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。 Linux 通过在内核中进 行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多；Docker 容器网络利用此技术，它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通 （这样的一对接口叫做 veth pair ）\n\nDocker 创建一个容器的时候，会执行如下操作：\n- 创建一对虚拟接口，分别放到本地主机和新容器中； \n- 本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethf9； \n- 容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的名字空间可见； \n- 从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethf9。 \n\n完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络\n\n网络模式需要开启linux系统转发功能，查看linux系统中是否开启转发功能：\n```\n#sysctl net.ipv4.ip_forward\nnet.ipv4.ip_forward = 1\n# 设置：sysctl -w  net.ipv4.ip_forward=1\n```\n### 几种网络模式\n#### nat\n--net=bridge (默认的网桥)，Docker通过宿主机的网桥(docker0)来连通内部和宿主机的网络，实现了容器与宿主机和外界之间的网络通信\n![nat](https://ttxsgoto.github.io/img/docker_network/1.png)\n\nBridge桥接模式的实现步骤主要如下：\n\n（1）Docker Daemon利用veth pair技术，在宿主机上创建两个虚拟网络接口设备，假设为veth0和veth1。而veth pair技术的特性可以保证无论哪一个veth接收到网络报文，都会将报文传输给另一方。\n\n（2）Docker Daemon将veth0附加到Docker Daemon创建的docker0网桥上。保证宿主机的网络报文可以发往veth0。\n\n（3）Docker Daemon将veth1添加到Docker Container所属的namespace下，并被改名为eth0。如此一来，保证宿主机的网络报文若发往veth0，则立即会被eth0接收，实现宿主机到Docker Container网络的联通性；同时，也保证Docker Container单独使用eth0，实现容器网络环境的隔离性。\n\n同时Docker采用NAT（Network Address Translation，网络地址转换）的方式(可自行查询实现原理)，让宿主机以外的世界可以主动将网络报文发送至容器内部。\n\n通过Bridger网桥模式实现：\n\n（1）容器拥有独立、隔离的网络栈\n\n（2）容器和宿主机以外的世界通过NAT建立通信\n\n#### host\n--net=host (告诉docker不要将容器网络放在隔离的名字容器中，即不要容器化容器内的网络，该模式下的Docker Container和host宿主机共享同一个网络namespace，即container和宿主机一样，使用宿主机的eth0)\n![host](https://ttxsgoto.github.io/img/docker_network/2.png)\n\nDocker Container的host网络模式在实现过程中，由于不需要额外的网桥以及虚拟网卡，故不会涉及docker0以及veth pair。父进程在创建子进程时，如果不使用CLONE_NEWNET这个参数标志，那么创建出的子进程会与父 进程共享同一个网络namespace。Docker就是采用了这个简单的原理，在创建进程启动容器的过程中，没有传入CLONE_NEWNET参数标 志，实现Docker Container与宿主机共享同一个网络环境，即实现host网络模式。\n\nDocker Container的网络模式中，host模式是bridge桥接模式很好的补充。采用host模式的Docker Container，可以直接使用宿主机的IP地址与外界进行通信，若宿主机的eth0是一个公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换。当然，有这样的方便，肯定会损失部分其他的特性，最明显的是Docker Container网络环境隔离性的弱化，即容器不再拥有隔离、独立的网络栈。另外，使用host模式的Docker Container虽然可以让容器内部的服务和传统情况无差别、无改造的使用，但是由于网络隔离性的弱化，该容器会与宿主机共享竞争网络栈的使用；另外，容器内部将不再拥有所有的端口资源，原因是部分端口资源已经被宿主机本身的服务占用，还有部分端口已经用以bridge网络模式容器的端口映射。\n\n#### Other container  \n--net=container:NAME_or_ID  (让docker将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP地址和端口等网络资源，两者进程可以直接通过lo 环回接口通信)\n![other](https://ttxsgoto.github.io/img/docker_network/3.png)\n\n上图右侧的Docker Container即采用了other container网络模式，它能使用的网络环境即为左侧Docker Container brdige桥接模式下的网络\n\nDocker Container的other container网络模式在实现过程中，不涉及网桥，同样也不需要创建虚拟网卡veth pair。\n\n完成other container网络模式的创建只需要两个步骤：\n\n(1) 查找other container（即需要被共享网络环境的容器）的网络namespace；\n\n(2) 将新创建的Docker Container（也是需要共享其他网络的容器）的namespace，使用other container的namespace\n在这种模式下的Docker Container可以通过localhost来访问namespace下的其他容器，传输效率较高。虽然多个容器共享网络环境，但是多个容器形成的整体依然与宿主机以及其他容器形成网络隔离。另外，这种模式还节约了一定数量的网络资源。但是需要注意的是，它并没有改善容器与宿主机以外世界通信的情况。\n\n#### none     \n--net=none   (让Docker将新容器放到隔离的网络栈中，但不进行网络配置，之后用户可以自己进行配置，容器内部只能使用loopback网络设备，不会再有其他的网络资源)\n\n### 网络相关的命令\n```\n-b BRIDGE or --bridge=BRIDGE --指定容器挂载的网桥\n--bip=CIDR --定制 docker0 的掩码\n-H SOCKET... or --host=SOCKET... --Docker 服务端接收命令的通道\n--icc=true|false --是否支持容器之间进行通信\n--ip-forward=true|false --容器之间的通信\n--iptables=true|false --禁止 Docker 添加 iptables 规则\n--mtu=BYTES --容器网络中的 MTU\n```\n上述网络模式理论主要来自链接：\n\nhttp://www.infoq.com/cn/articles/docker-source-code-analysis-part7","source":"_posts/docker_network.md","raw":"---\ntitle: Docker 网络模式\ndate: 2017-02-08 22:05:33\ntags:\n  - Network\ncategories:\n  - Docker\n---\n### Docker网络实现原理\n\nDocker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。 Linux 通过在内核中进 行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多；Docker 容器网络利用此技术，它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通 （这样的一对接口叫做 veth pair ）\n\nDocker 创建一个容器的时候，会执行如下操作：\n- 创建一对虚拟接口，分别放到本地主机和新容器中； \n- 本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethf9； \n- 容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的名字空间可见； \n- 从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethf9。 \n\n完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络\n\n网络模式需要开启linux系统转发功能，查看linux系统中是否开启转发功能：\n```\n#sysctl net.ipv4.ip_forward\nnet.ipv4.ip_forward = 1\n# 设置：sysctl -w  net.ipv4.ip_forward=1\n```\n### 几种网络模式\n#### nat\n--net=bridge (默认的网桥)，Docker通过宿主机的网桥(docker0)来连通内部和宿主机的网络，实现了容器与宿主机和外界之间的网络通信\n![nat](https://ttxsgoto.github.io/img/docker_network/1.png)\n\nBridge桥接模式的实现步骤主要如下：\n\n（1）Docker Daemon利用veth pair技术，在宿主机上创建两个虚拟网络接口设备，假设为veth0和veth1。而veth pair技术的特性可以保证无论哪一个veth接收到网络报文，都会将报文传输给另一方。\n\n（2）Docker Daemon将veth0附加到Docker Daemon创建的docker0网桥上。保证宿主机的网络报文可以发往veth0。\n\n（3）Docker Daemon将veth1添加到Docker Container所属的namespace下，并被改名为eth0。如此一来，保证宿主机的网络报文若发往veth0，则立即会被eth0接收，实现宿主机到Docker Container网络的联通性；同时，也保证Docker Container单独使用eth0，实现容器网络环境的隔离性。\n\n同时Docker采用NAT（Network Address Translation，网络地址转换）的方式(可自行查询实现原理)，让宿主机以外的世界可以主动将网络报文发送至容器内部。\n\n通过Bridger网桥模式实现：\n\n（1）容器拥有独立、隔离的网络栈\n\n（2）容器和宿主机以外的世界通过NAT建立通信\n\n#### host\n--net=host (告诉docker不要将容器网络放在隔离的名字容器中，即不要容器化容器内的网络，该模式下的Docker Container和host宿主机共享同一个网络namespace，即container和宿主机一样，使用宿主机的eth0)\n![host](https://ttxsgoto.github.io/img/docker_network/2.png)\n\nDocker Container的host网络模式在实现过程中，由于不需要额外的网桥以及虚拟网卡，故不会涉及docker0以及veth pair。父进程在创建子进程时，如果不使用CLONE_NEWNET这个参数标志，那么创建出的子进程会与父 进程共享同一个网络namespace。Docker就是采用了这个简单的原理，在创建进程启动容器的过程中，没有传入CLONE_NEWNET参数标 志，实现Docker Container与宿主机共享同一个网络环境，即实现host网络模式。\n\nDocker Container的网络模式中，host模式是bridge桥接模式很好的补充。采用host模式的Docker Container，可以直接使用宿主机的IP地址与外界进行通信，若宿主机的eth0是一个公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换。当然，有这样的方便，肯定会损失部分其他的特性，最明显的是Docker Container网络环境隔离性的弱化，即容器不再拥有隔离、独立的网络栈。另外，使用host模式的Docker Container虽然可以让容器内部的服务和传统情况无差别、无改造的使用，但是由于网络隔离性的弱化，该容器会与宿主机共享竞争网络栈的使用；另外，容器内部将不再拥有所有的端口资源，原因是部分端口资源已经被宿主机本身的服务占用，还有部分端口已经用以bridge网络模式容器的端口映射。\n\n#### Other container  \n--net=container:NAME_or_ID  (让docker将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP地址和端口等网络资源，两者进程可以直接通过lo 环回接口通信)\n![other](https://ttxsgoto.github.io/img/docker_network/3.png)\n\n上图右侧的Docker Container即采用了other container网络模式，它能使用的网络环境即为左侧Docker Container brdige桥接模式下的网络\n\nDocker Container的other container网络模式在实现过程中，不涉及网桥，同样也不需要创建虚拟网卡veth pair。\n\n完成other container网络模式的创建只需要两个步骤：\n\n(1) 查找other container（即需要被共享网络环境的容器）的网络namespace；\n\n(2) 将新创建的Docker Container（也是需要共享其他网络的容器）的namespace，使用other container的namespace\n在这种模式下的Docker Container可以通过localhost来访问namespace下的其他容器，传输效率较高。虽然多个容器共享网络环境，但是多个容器形成的整体依然与宿主机以及其他容器形成网络隔离。另外，这种模式还节约了一定数量的网络资源。但是需要注意的是，它并没有改善容器与宿主机以外世界通信的情况。\n\n#### none     \n--net=none   (让Docker将新容器放到隔离的网络栈中，但不进行网络配置，之后用户可以自己进行配置，容器内部只能使用loopback网络设备，不会再有其他的网络资源)\n\n### 网络相关的命令\n```\n-b BRIDGE or --bridge=BRIDGE --指定容器挂载的网桥\n--bip=CIDR --定制 docker0 的掩码\n-H SOCKET... or --host=SOCKET... --Docker 服务端接收命令的通道\n--icc=true|false --是否支持容器之间进行通信\n--ip-forward=true|false --容器之间的通信\n--iptables=true|false --禁止 Docker 添加 iptables 规则\n--mtu=BYTES --容器网络中的 MTU\n```\n上述网络模式理论主要来自链接：\n\nhttp://www.infoq.com/cn/articles/docker-source-code-analysis-part7","slug":"docker_network","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wo002wct8uhrumgqr3","content":"<h3 id=\"Docker网络实现原理\"><a href=\"#Docker网络实现原理\" class=\"headerlink\" title=\"Docker网络实现原理\"></a>Docker网络实现原理</h3><p>Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。 Linux 通过在内核中进 行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多；Docker 容器网络利用此技术，它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通 （这样的一对接口叫做 veth pair ）</p>\n<p>Docker 创建一个容器的时候，会执行如下操作：</p>\n<ul>\n<li>创建一对虚拟接口，分别放到本地主机和新容器中； </li>\n<li>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethf9； </li>\n<li>容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的名字空间可见； </li>\n<li>从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethf9。 </li>\n</ul>\n<p>完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络</p>\n<p>网络模式需要开启linux系统转发功能，查看linux系统中是否开启转发功能：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sysctl net.ipv4.ip_forward</div><div class=\"line\">net.ipv4.ip_forward = 1</div><div class=\"line\"># 设置：sysctl -w  net.ipv4.ip_forward=1</div></pre></td></tr></table></figure></p>\n<h3 id=\"几种网络模式\"><a href=\"#几种网络模式\" class=\"headerlink\" title=\"几种网络模式\"></a>几种网络模式</h3><h4 id=\"nat\"><a href=\"#nat\" class=\"headerlink\" title=\"nat\"></a>nat</h4><p>–net=bridge (默认的网桥)，Docker通过宿主机的网桥(docker0)来连通内部和宿主机的网络，实现了容器与宿主机和外界之间的网络通信<br><img src=\"https://ttxsgoto.github.io/img/docker_network/1.png\" alt=\"nat\"></p>\n<p>Bridge桥接模式的实现步骤主要如下：</p>\n<p>（1）Docker Daemon利用veth pair技术，在宿主机上创建两个虚拟网络接口设备，假设为veth0和veth1。而veth pair技术的特性可以保证无论哪一个veth接收到网络报文，都会将报文传输给另一方。</p>\n<p>（2）Docker Daemon将veth0附加到Docker Daemon创建的docker0网桥上。保证宿主机的网络报文可以发往veth0。</p>\n<p>（3）Docker Daemon将veth1添加到Docker Container所属的namespace下，并被改名为eth0。如此一来，保证宿主机的网络报文若发往veth0，则立即会被eth0接收，实现宿主机到Docker Container网络的联通性；同时，也保证Docker Container单独使用eth0，实现容器网络环境的隔离性。</p>\n<p>同时Docker采用NAT（Network Address Translation，网络地址转换）的方式(可自行查询实现原理)，让宿主机以外的世界可以主动将网络报文发送至容器内部。</p>\n<p>通过Bridger网桥模式实现：</p>\n<p>（1）容器拥有独立、隔离的网络栈</p>\n<p>（2）容器和宿主机以外的世界通过NAT建立通信</p>\n<h4 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h4><p>–net=host (告诉docker不要将容器网络放在隔离的名字容器中，即不要容器化容器内的网络，该模式下的Docker Container和host宿主机共享同一个网络namespace，即container和宿主机一样，使用宿主机的eth0)<br><img src=\"https://ttxsgoto.github.io/img/docker_network/2.png\" alt=\"host\"></p>\n<p>Docker Container的host网络模式在实现过程中，由于不需要额外的网桥以及虚拟网卡，故不会涉及docker0以及veth pair。父进程在创建子进程时，如果不使用CLONE_NEWNET这个参数标志，那么创建出的子进程会与父 进程共享同一个网络namespace。Docker就是采用了这个简单的原理，在创建进程启动容器的过程中，没有传入CLONE_NEWNET参数标 志，实现Docker Container与宿主机共享同一个网络环境，即实现host网络模式。</p>\n<p>Docker Container的网络模式中，host模式是bridge桥接模式很好的补充。采用host模式的Docker Container，可以直接使用宿主机的IP地址与外界进行通信，若宿主机的eth0是一个公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换。当然，有这样的方便，肯定会损失部分其他的特性，最明显的是Docker Container网络环境隔离性的弱化，即容器不再拥有隔离、独立的网络栈。另外，使用host模式的Docker Container虽然可以让容器内部的服务和传统情况无差别、无改造的使用，但是由于网络隔离性的弱化，该容器会与宿主机共享竞争网络栈的使用；另外，容器内部将不再拥有所有的端口资源，原因是部分端口资源已经被宿主机本身的服务占用，还有部分端口已经用以bridge网络模式容器的端口映射。</p>\n<h4 id=\"Other-container\"><a href=\"#Other-container\" class=\"headerlink\" title=\"Other container\"></a>Other container</h4><p>–net=container:NAME_or_ID  (让docker将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP地址和端口等网络资源，两者进程可以直接通过lo 环回接口通信)<br><img src=\"https://ttxsgoto.github.io/img/docker_network/3.png\" alt=\"other\"></p>\n<p>上图右侧的Docker Container即采用了other container网络模式，它能使用的网络环境即为左侧Docker Container brdige桥接模式下的网络</p>\n<p>Docker Container的other container网络模式在实现过程中，不涉及网桥，同样也不需要创建虚拟网卡veth pair。</p>\n<p>完成other container网络模式的创建只需要两个步骤：</p>\n<p>(1) 查找other container（即需要被共享网络环境的容器）的网络namespace；</p>\n<p>(2) 将新创建的Docker Container（也是需要共享其他网络的容器）的namespace，使用other container的namespace<br>在这种模式下的Docker Container可以通过localhost来访问namespace下的其他容器，传输效率较高。虽然多个容器共享网络环境，但是多个容器形成的整体依然与宿主机以及其他容器形成网络隔离。另外，这种模式还节约了一定数量的网络资源。但是需要注意的是，它并没有改善容器与宿主机以外世界通信的情况。</p>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>–net=none   (让Docker将新容器放到隔离的网络栈中，但不进行网络配置，之后用户可以自己进行配置，容器内部只能使用loopback网络设备，不会再有其他的网络资源)</p>\n<h3 id=\"网络相关的命令\"><a href=\"#网络相关的命令\" class=\"headerlink\" title=\"网络相关的命令\"></a>网络相关的命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-b BRIDGE or --bridge=BRIDGE --指定容器挂载的网桥</div><div class=\"line\">--bip=CIDR --定制 docker0 的掩码</div><div class=\"line\">-H SOCKET... or --host=SOCKET... --Docker 服务端接收命令的通道</div><div class=\"line\">--icc=true|false --是否支持容器之间进行通信</div><div class=\"line\">--ip-forward=true|false --容器之间的通信</div><div class=\"line\">--iptables=true|false --禁止 Docker 添加 iptables 规则</div><div class=\"line\">--mtu=BYTES --容器网络中的 MTU</div></pre></td></tr></table></figure>\n<p>上述网络模式理论主要来自链接：</p>\n<p><a href=\"http://www.infoq.com/cn/articles/docker-source-code-analysis-part7\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/docker-source-code-analysis-part7</a></p>\n","excerpt":"","more":"<h3 id=\"Docker网络实现原理\"><a href=\"#Docker网络实现原理\" class=\"headerlink\" title=\"Docker网络实现原理\"></a>Docker网络实现原理</h3><p>Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。 Linux 通过在内核中进 行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多；Docker 容器网络利用此技术，它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通 （这样的一对接口叫做 veth pair ）</p>\n<p>Docker 创建一个容器的时候，会执行如下操作：</p>\n<ul>\n<li>创建一对虚拟接口，分别放到本地主机和新容器中； </li>\n<li>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethf9； </li>\n<li>容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的名字空间可见； </li>\n<li>从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethf9。 </li>\n</ul>\n<p>完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络</p>\n<p>网络模式需要开启linux系统转发功能，查看linux系统中是否开启转发功能：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sysctl net.ipv4.ip_forward</div><div class=\"line\">net.ipv4.ip_forward = 1</div><div class=\"line\"># 设置：sysctl -w  net.ipv4.ip_forward=1</div></pre></td></tr></table></figure></p>\n<h3 id=\"几种网络模式\"><a href=\"#几种网络模式\" class=\"headerlink\" title=\"几种网络模式\"></a>几种网络模式</h3><h4 id=\"nat\"><a href=\"#nat\" class=\"headerlink\" title=\"nat\"></a>nat</h4><p>–net=bridge (默认的网桥)，Docker通过宿主机的网桥(docker0)来连通内部和宿主机的网络，实现了容器与宿主机和外界之间的网络通信<br><img src=\"https://ttxsgoto.github.io/img/docker_network/1.png\" alt=\"nat\"></p>\n<p>Bridge桥接模式的实现步骤主要如下：</p>\n<p>（1）Docker Daemon利用veth pair技术，在宿主机上创建两个虚拟网络接口设备，假设为veth0和veth1。而veth pair技术的特性可以保证无论哪一个veth接收到网络报文，都会将报文传输给另一方。</p>\n<p>（2）Docker Daemon将veth0附加到Docker Daemon创建的docker0网桥上。保证宿主机的网络报文可以发往veth0。</p>\n<p>（3）Docker Daemon将veth1添加到Docker Container所属的namespace下，并被改名为eth0。如此一来，保证宿主机的网络报文若发往veth0，则立即会被eth0接收，实现宿主机到Docker Container网络的联通性；同时，也保证Docker Container单独使用eth0，实现容器网络环境的隔离性。</p>\n<p>同时Docker采用NAT（Network Address Translation，网络地址转换）的方式(可自行查询实现原理)，让宿主机以外的世界可以主动将网络报文发送至容器内部。</p>\n<p>通过Bridger网桥模式实现：</p>\n<p>（1）容器拥有独立、隔离的网络栈</p>\n<p>（2）容器和宿主机以外的世界通过NAT建立通信</p>\n<h4 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h4><p>–net=host (告诉docker不要将容器网络放在隔离的名字容器中，即不要容器化容器内的网络，该模式下的Docker Container和host宿主机共享同一个网络namespace，即container和宿主机一样，使用宿主机的eth0)<br><img src=\"https://ttxsgoto.github.io/img/docker_network/2.png\" alt=\"host\"></p>\n<p>Docker Container的host网络模式在实现过程中，由于不需要额外的网桥以及虚拟网卡，故不会涉及docker0以及veth pair。父进程在创建子进程时，如果不使用CLONE_NEWNET这个参数标志，那么创建出的子进程会与父 进程共享同一个网络namespace。Docker就是采用了这个简单的原理，在创建进程启动容器的过程中，没有传入CLONE_NEWNET参数标 志，实现Docker Container与宿主机共享同一个网络环境，即实现host网络模式。</p>\n<p>Docker Container的网络模式中，host模式是bridge桥接模式很好的补充。采用host模式的Docker Container，可以直接使用宿主机的IP地址与外界进行通信，若宿主机的eth0是一个公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换。当然，有这样的方便，肯定会损失部分其他的特性，最明显的是Docker Container网络环境隔离性的弱化，即容器不再拥有隔离、独立的网络栈。另外，使用host模式的Docker Container虽然可以让容器内部的服务和传统情况无差别、无改造的使用，但是由于网络隔离性的弱化，该容器会与宿主机共享竞争网络栈的使用；另外，容器内部将不再拥有所有的端口资源，原因是部分端口资源已经被宿主机本身的服务占用，还有部分端口已经用以bridge网络模式容器的端口映射。</p>\n<h4 id=\"Other-container\"><a href=\"#Other-container\" class=\"headerlink\" title=\"Other container\"></a>Other container</h4><p>–net=container:NAME_or_ID  (让docker将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享IP地址和端口等网络资源，两者进程可以直接通过lo 环回接口通信)<br><img src=\"https://ttxsgoto.github.io/img/docker_network/3.png\" alt=\"other\"></p>\n<p>上图右侧的Docker Container即采用了other container网络模式，它能使用的网络环境即为左侧Docker Container brdige桥接模式下的网络</p>\n<p>Docker Container的other container网络模式在实现过程中，不涉及网桥，同样也不需要创建虚拟网卡veth pair。</p>\n<p>完成other container网络模式的创建只需要两个步骤：</p>\n<p>(1) 查找other container（即需要被共享网络环境的容器）的网络namespace；</p>\n<p>(2) 将新创建的Docker Container（也是需要共享其他网络的容器）的namespace，使用other container的namespace<br>在这种模式下的Docker Container可以通过localhost来访问namespace下的其他容器，传输效率较高。虽然多个容器共享网络环境，但是多个容器形成的整体依然与宿主机以及其他容器形成网络隔离。另外，这种模式还节约了一定数量的网络资源。但是需要注意的是，它并没有改善容器与宿主机以外世界通信的情况。</p>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>–net=none   (让Docker将新容器放到隔离的网络栈中，但不进行网络配置，之后用户可以自己进行配置，容器内部只能使用loopback网络设备，不会再有其他的网络资源)</p>\n<h3 id=\"网络相关的命令\"><a href=\"#网络相关的命令\" class=\"headerlink\" title=\"网络相关的命令\"></a>网络相关的命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-b BRIDGE or --bridge=BRIDGE --指定容器挂载的网桥</div><div class=\"line\">--bip=CIDR --定制 docker0 的掩码</div><div class=\"line\">-H SOCKET... or --host=SOCKET... --Docker 服务端接收命令的通道</div><div class=\"line\">--icc=true|false --是否支持容器之间进行通信</div><div class=\"line\">--ip-forward=true|false --容器之间的通信</div><div class=\"line\">--iptables=true|false --禁止 Docker 添加 iptables 规则</div><div class=\"line\">--mtu=BYTES --容器网络中的 MTU</div></pre></td></tr></table></figure>\n<p>上述网络模式理论主要来自链接：</p>\n<p><a href=\"http://www.infoq.com/cn/articles/docker-source-code-analysis-part7\">http://www.infoq.com/cn/articles/docker-source-code-analysis-part7</a></p>\n"},{"title":"Elasticsearch ELK应用","date":"2017-12-26T14:46:51.000Z","_content":"\n#### ELK说明\n- Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等\n- Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索）\n- kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志\n\n#### 功能\n1.方便日志查询，统计排查问题\n2.报表展示，不用登录每台服务器查看日志\n\n#### 组件\nLogstash: logstash server端用来搜集日志；\n\nElasticsearch: 存储各类日志；\n\nKibana: web化接口用作查寻和可视化日志；\n\n搭建部署(略)\n\n#### 应用\n收集syslog,nginx access/error日志，mongo日志，程序日志，说明如下：\n\nnignx 访问日志：因nginx访问日志可自定义，这里自定义为json格式，方便ES存储和索引\n格式定义如下：\n```python\nlog_format main_json '{ \"timestamp\": \"$time_local\", '\n'\"remote_addr\": \"$remote_addr\", '\n'\"remote_user\": \"$remote_user\", '\n'\"body_bytes_sent\": \"$body_bytes_sent\", '\n'\"request_time\": \"$request_time\", '\n'\"status\": \"$status\", '\n'\"domain\": \"$host\", '\n'\"request\": \"$request\", '\n'\"request_method\": \"$request_method\", '\n'\"http_referrer\": \"$http_referer\", '\n'\"body_bytes_sent\":\"$body_bytes_sent\", '\n'\"http_x_forwarded_for\": \"$http_x_forwarded_for\", '\n'\"http_user_agent\": \"$http_user_agent\" }';\n```\n其他日志收集见配置文件，说明如下：\n```python\ninput {\n    file {\n        path => [ \"/var/log/syslog\" ]    #定义日志路径\n        type => \"syslog\"                \n        start_position => \"beginning\"\n        ignore_older =>0\n    }\n    file {\n        path => \"/var/log/nginx/*access.log\"\n        codec => json\n        start_position => \"beginning\"\n        type => \"nginx-acc\"\n    }\n    file {\n        path => \"/var/log/nginx/*error.log\"\n        start_position => \"beginning\"\n        type => \"nginx-error\"\n        ignore_older =>0\n    }\n    file {\n        path => [ \"/data/mongo/mongo.log\" ]\n        type => \"mongo\"\n        start_position => \"beginning\"\n        #ignore_older =>0\n        }\n}\n \nfilter {\n    if [type] == \"syslog\" {\n        grok {    #grok 功能将字符串转换为相应的字段，方便检索\n            match => { \"message\" => \"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\\[%{POSINT:syslog_pid}\\])?: %{GREEDYDATA:syslog_message}\" }\n            add_field => [ \"received_at\", \"%{@timestamp}\" ]\n            add_field => [ \"received_from\", \"%{host}\" ]\n            }    \n            date {\n                    match => [ \"syslog_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\n            }\n        }\n         \n    if [type] == \"mongo\" {\n                grok {\n#mongo_v3                        match => [\"message\",\"%{TIMESTAMP_ISO8601:timestamp}\\s+%{MONGO3_SEVERITY:severity}\\s+%{MONGO3_COMPONENT:component}\\s+(?:\\[%{DATA:context}\\])?\\s+%{GREEDYDATA:body}\"]\n            match => [\"message\",\"%{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:body}\"]     #mongo_v2\n               }\n                if[body]=~\"ms$\" {\n                                        grok {\n                                                match => [\"body\",\"query\\s+%{WORD:db_name}\\.%{WORD:collection_name}.*}.*\\}(\\s+%{NUMBER:spend_time:int}ms$)?\"]\n                                        }\n                                }\n                date {\n                        match => [ \"timestamp\", \"UNIX\", \"YYYY-MM-dd HH:mm:ss\", \"ISO8601\" ]\n                        remove_field => [\"timestamp\"]\n                }\n        }\n    if [type] == \"nginx-error\" {\n                grok {\n                        match => { \"message\" => \"(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \\[%{LOGLEVEL:severity}\\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \\\"%{URI:upstream}\\\")?(?:, host: %{QS:host})?(?: referrer: \\\"%{URI:referrer}|-\\\")?\" }\n                        overwrite => [ \"message\" ]\n                }\n                date {\n                        match => [ \"nginx_error_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\n                        remove_field => [ \"timestamp\" ]\n                }\n        }\n}\noutput {\n    if [type] == \"nginx-acc\" {\n        elasticsearch {    #存储\n            hosts => [\"127.0.0.1:9200\"]\n            index => \"nginx_access-%{+YYYY.MM.dd}\"\n        }        \n    }\n    if [type] == \"nginx-error\" {\n        elasticsearch {\n            hosts => [\"127.0.0.1:9200\"]\n            index => \"nginx_error-%{+YYYY.MM.dd}\"\n        }        \n    }\n    if [type] == \"syslog\" {\n        elasticsearch {\n            hosts => [\"127.0.0.1:9200\"]\n            index => \"syslog-%{+YYYY.MM.dd}\"\n        }\n    }\n    if [type] == \"mongo\" {\n                elasticsearch {\n            hosts => [\"127.0.0.1:9200\"]\n                        index => \"mongo-%{+YYYY.MM.dd}\"\n                }\n        }\n}\n```\n采集到数据展示如下：\n![elk](https://ttxsgoto.github.io/img/elk/elk.png)\n","source":"_posts/elasticsearch-elk.md","raw":"---\ntitle: Elasticsearch ELK应用\ndate: 2017-12-26 22:46:51\ntags:\n  - ELK\ncategories:\n  - Elasticsearch\n---\n\n#### ELK说明\n- Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等\n- Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索）\n- kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志\n\n#### 功能\n1.方便日志查询，统计排查问题\n2.报表展示，不用登录每台服务器查看日志\n\n#### 组件\nLogstash: logstash server端用来搜集日志；\n\nElasticsearch: 存储各类日志；\n\nKibana: web化接口用作查寻和可视化日志；\n\n搭建部署(略)\n\n#### 应用\n收集syslog,nginx access/error日志，mongo日志，程序日志，说明如下：\n\nnignx 访问日志：因nginx访问日志可自定义，这里自定义为json格式，方便ES存储和索引\n格式定义如下：\n```python\nlog_format main_json '{ \"timestamp\": \"$time_local\", '\n'\"remote_addr\": \"$remote_addr\", '\n'\"remote_user\": \"$remote_user\", '\n'\"body_bytes_sent\": \"$body_bytes_sent\", '\n'\"request_time\": \"$request_time\", '\n'\"status\": \"$status\", '\n'\"domain\": \"$host\", '\n'\"request\": \"$request\", '\n'\"request_method\": \"$request_method\", '\n'\"http_referrer\": \"$http_referer\", '\n'\"body_bytes_sent\":\"$body_bytes_sent\", '\n'\"http_x_forwarded_for\": \"$http_x_forwarded_for\", '\n'\"http_user_agent\": \"$http_user_agent\" }';\n```\n其他日志收集见配置文件，说明如下：\n```python\ninput {\n    file {\n        path => [ \"/var/log/syslog\" ]    #定义日志路径\n        type => \"syslog\"                \n        start_position => \"beginning\"\n        ignore_older =>0\n    }\n    file {\n        path => \"/var/log/nginx/*access.log\"\n        codec => json\n        start_position => \"beginning\"\n        type => \"nginx-acc\"\n    }\n    file {\n        path => \"/var/log/nginx/*error.log\"\n        start_position => \"beginning\"\n        type => \"nginx-error\"\n        ignore_older =>0\n    }\n    file {\n        path => [ \"/data/mongo/mongo.log\" ]\n        type => \"mongo\"\n        start_position => \"beginning\"\n        #ignore_older =>0\n        }\n}\n \nfilter {\n    if [type] == \"syslog\" {\n        grok {    #grok 功能将字符串转换为相应的字段，方便检索\n            match => { \"message\" => \"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\\[%{POSINT:syslog_pid}\\])?: %{GREEDYDATA:syslog_message}\" }\n            add_field => [ \"received_at\", \"%{@timestamp}\" ]\n            add_field => [ \"received_from\", \"%{host}\" ]\n            }    \n            date {\n                    match => [ \"syslog_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\n            }\n        }\n         \n    if [type] == \"mongo\" {\n                grok {\n#mongo_v3                        match => [\"message\",\"%{TIMESTAMP_ISO8601:timestamp}\\s+%{MONGO3_SEVERITY:severity}\\s+%{MONGO3_COMPONENT:component}\\s+(?:\\[%{DATA:context}\\])?\\s+%{GREEDYDATA:body}\"]\n            match => [\"message\",\"%{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:body}\"]     #mongo_v2\n               }\n                if[body]=~\"ms$\" {\n                                        grok {\n                                                match => [\"body\",\"query\\s+%{WORD:db_name}\\.%{WORD:collection_name}.*}.*\\}(\\s+%{NUMBER:spend_time:int}ms$)?\"]\n                                        }\n                                }\n                date {\n                        match => [ \"timestamp\", \"UNIX\", \"YYYY-MM-dd HH:mm:ss\", \"ISO8601\" ]\n                        remove_field => [\"timestamp\"]\n                }\n        }\n    if [type] == \"nginx-error\" {\n                grok {\n                        match => { \"message\" => \"(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \\[%{LOGLEVEL:severity}\\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \\\"%{URI:upstream}\\\")?(?:, host: %{QS:host})?(?: referrer: \\\"%{URI:referrer}|-\\\")?\" }\n                        overwrite => [ \"message\" ]\n                }\n                date {\n                        match => [ \"nginx_error_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\n                        remove_field => [ \"timestamp\" ]\n                }\n        }\n}\noutput {\n    if [type] == \"nginx-acc\" {\n        elasticsearch {    #存储\n            hosts => [\"127.0.0.1:9200\"]\n            index => \"nginx_access-%{+YYYY.MM.dd}\"\n        }        \n    }\n    if [type] == \"nginx-error\" {\n        elasticsearch {\n            hosts => [\"127.0.0.1:9200\"]\n            index => \"nginx_error-%{+YYYY.MM.dd}\"\n        }        \n    }\n    if [type] == \"syslog\" {\n        elasticsearch {\n            hosts => [\"127.0.0.1:9200\"]\n            index => \"syslog-%{+YYYY.MM.dd}\"\n        }\n    }\n    if [type] == \"mongo\" {\n                elasticsearch {\n            hosts => [\"127.0.0.1:9200\"]\n                        index => \"mongo-%{+YYYY.MM.dd}\"\n                }\n        }\n}\n```\n采集到数据展示如下：\n![elk](https://ttxsgoto.github.io/img/elk/elk.png)\n","slug":"elasticsearch-elk","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wp002zct8unjsqi1er","content":"<h4 id=\"ELK说明\"><a href=\"#ELK说明\" class=\"headerlink\" title=\"ELK说明\"></a>ELK说明</h4><ul>\n<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等</li>\n<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索）</li>\n<li>kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志</li>\n</ul>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><p>1.方便日志查询，统计排查问题<br>2.报表展示，不用登录每台服务器查看日志</p>\n<h4 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h4><p>Logstash: logstash server端用来搜集日志；</p>\n<p>Elasticsearch: 存储各类日志；</p>\n<p>Kibana: web化接口用作查寻和可视化日志；</p>\n<p>搭建部署(略)</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><p>收集syslog,nginx access/error日志，mongo日志，程序日志，说明如下：</p>\n<p>nignx 访问日志：因nginx访问日志可自定义，这里自定义为json格式，方便ES存储和索引<br>格式定义如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">log_format main_json <span class=\"string\">'&#123; \"timestamp\": \"$time_local\", '</span></div><div class=\"line\"><span class=\"string\">'\"remote_addr\": \"$remote_addr\", '</span></div><div class=\"line\"><span class=\"string\">'\"remote_user\": \"$remote_user\", '</span></div><div class=\"line\"><span class=\"string\">'\"body_bytes_sent\": \"$body_bytes_sent\", '</span></div><div class=\"line\"><span class=\"string\">'\"request_time\": \"$request_time\", '</span></div><div class=\"line\"><span class=\"string\">'\"status\": \"$status\", '</span></div><div class=\"line\"><span class=\"string\">'\"domain\": \"$host\", '</span></div><div class=\"line\"><span class=\"string\">'\"request\": \"$request\", '</span></div><div class=\"line\"><span class=\"string\">'\"request_method\": \"$request_method\", '</span></div><div class=\"line\"><span class=\"string\">'\"http_referrer\": \"$http_referer\", '</span></div><div class=\"line\"><span class=\"string\">'\"body_bytes_sent\":\"$body_bytes_sent\", '</span></div><div class=\"line\"><span class=\"string\">'\"http_x_forwarded_for\": \"$http_x_forwarded_for\", '</span></div><div class=\"line\"><span class=\"string\">'\"http_user_agent\": \"$http_user_agent\" &#125;'</span>;</div></pre></td></tr></table></figure></p>\n<p>其他日志收集见配置文件，说明如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">input &#123;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; [ \"/var/log/syslog\" ]    #定义日志路径</div><div class=\"line\">        type =&gt; \"syslog\"                </div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        ignore_older =&gt;0</div><div class=\"line\">    &#125;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; \"/var/log/nginx/*access.log\"</div><div class=\"line\">        codec =&gt; json</div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        type =&gt; \"nginx-acc\"</div><div class=\"line\">    &#125;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; \"/var/log/nginx/*error.log\"</div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        type =&gt; \"nginx-error\"</div><div class=\"line\">        ignore_older =&gt;0</div><div class=\"line\">    &#125;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; [ \"/data/mongo/mongo.log\" ]</div><div class=\"line\">        type =&gt; \"mongo\"</div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        #ignore_older =&gt;0</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">filter &#123;</div><div class=\"line\">    if [type] == \"syslog\" &#123;</div><div class=\"line\">        grok &#123;    #grok 功能将字符串转换为相应的字段，方便检索</div><div class=\"line\">            match =&gt; &#123; \"message\" =&gt; \"%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\\[%&#123;POSINT:syslog_pid&#125;\\])?: %&#123;GREEDYDATA:syslog_message&#125;\" &#125;</div><div class=\"line\">            add_field =&gt; [ \"received_at\", \"%&#123;@timestamp&#125;\" ]</div><div class=\"line\">            add_field =&gt; [ \"received_from\", \"%&#123;host&#125;\" ]</div><div class=\"line\">            &#125;    </div><div class=\"line\">            date &#123;</div><div class=\"line\">                    match =&gt; [ \"syslog_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">    if [type] == \"mongo\" &#123;</div><div class=\"line\">                grok &#123;</div><div class=\"line\">#mongo_v3                        match =&gt; [\"message\",\"%&#123;TIMESTAMP_ISO8601:timestamp&#125;\\s+%&#123;MONGO3_SEVERITY:severity&#125;\\s+%&#123;MONGO3_COMPONENT:component&#125;\\s+(?:\\[%&#123;DATA:context&#125;\\])?\\s+%&#123;GREEDYDATA:body&#125;\"]</div><div class=\"line\">            match =&gt; [\"message\",\"%&#123;SYSLOGTIMESTAMP:timestamp&#125; \\[%&#123;WORD:component&#125;\\] %&#123;GREEDYDATA:body&#125;\"]     #mongo_v2</div><div class=\"line\">               &#125;</div><div class=\"line\">                if[body]=~\"ms$\" &#123;</div><div class=\"line\">                                        grok &#123;</div><div class=\"line\">                                                match =&gt; [\"body\",\"query\\s+%&#123;WORD:db_name&#125;\\.%&#123;WORD:collection_name&#125;.*&#125;.*\\&#125;(\\s+%&#123;NUMBER:spend_time:int&#125;ms$)?\"]</div><div class=\"line\">                                        &#125;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                date &#123;</div><div class=\"line\">                        match =&gt; [ \"timestamp\", \"UNIX\", \"YYYY-MM-dd HH:mm:ss\", \"ISO8601\" ]</div><div class=\"line\">                        remove_field =&gt; [\"timestamp\"]</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    if [type] == \"nginx-error\" &#123;</div><div class=\"line\">                grok &#123;</div><div class=\"line\">                        match =&gt; &#123; \"message\" =&gt; \"(?&lt;timestamp&gt;%&#123;YEAR&#125;[./-]%&#123;MONTHNUM&#125;[./-]%&#123;MONTHDAY&#125;[- ]%&#123;TIME&#125;) \\[%&#123;LOGLEVEL:severity&#125;\\] %&#123;POSINT:pid&#125;#%&#123;NUMBER&#125;: %&#123;GREEDYDATA:errormessage&#125;(?:, client: (?&lt;client&gt;%&#123;IP&#125;|%&#123;HOSTNAME&#125;))(?:, server: %&#123;IPORHOST:server&#125;)(?:, request: %&#123;QS:request&#125;)?(?:, upstream: \\\"%&#123;URI:upstream&#125;\\\")?(?:, host: %&#123;QS:host&#125;)?(?: referrer: \\\"%&#123;URI:referrer&#125;|-\\\")?\" &#125;</div><div class=\"line\">                        overwrite =&gt; [ \"message\" ]</div><div class=\"line\">                &#125;</div><div class=\"line\">                date &#123;</div><div class=\"line\">                        match =&gt; [ \"nginx_error_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]</div><div class=\"line\">                        remove_field =&gt; [ \"timestamp\" ]</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">output &#123;</div><div class=\"line\">    if [type] == \"nginx-acc\" &#123;</div><div class=\"line\">        elasticsearch &#123;    #存储</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">            index =&gt; \"nginx_access-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    if [type] == \"nginx-error\" &#123;</div><div class=\"line\">        elasticsearch &#123;</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">            index =&gt; \"nginx_error-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    if [type] == \"syslog\" &#123;</div><div class=\"line\">        elasticsearch &#123;</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">            index =&gt; \"syslog-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if [type] == \"mongo\" &#123;</div><div class=\"line\">                elasticsearch &#123;</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">                        index =&gt; \"mongo-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>采集到数据展示如下：<br><img src=\"https://ttxsgoto.github.io/img/elk/elk.png\" alt=\"elk\"></p>\n","excerpt":"","more":"<h4 id=\"ELK说明\"><a href=\"#ELK说明\" class=\"headerlink\" title=\"ELK说明\"></a>ELK说明</h4><ul>\n<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等</li>\n<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索）</li>\n<li>kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志</li>\n</ul>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><p>1.方便日志查询，统计排查问题<br>2.报表展示，不用登录每台服务器查看日志</p>\n<h4 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h4><p>Logstash: logstash server端用来搜集日志；</p>\n<p>Elasticsearch: 存储各类日志；</p>\n<p>Kibana: web化接口用作查寻和可视化日志；</p>\n<p>搭建部署(略)</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><p>收集syslog,nginx access/error日志，mongo日志，程序日志，说明如下：</p>\n<p>nignx 访问日志：因nginx访问日志可自定义，这里自定义为json格式，方便ES存储和索引<br>格式定义如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">log_format main_json <span class=\"string\">'&#123; \"timestamp\": \"$time_local\", '</span></div><div class=\"line\"><span class=\"string\">'\"remote_addr\": \"$remote_addr\", '</span></div><div class=\"line\"><span class=\"string\">'\"remote_user\": \"$remote_user\", '</span></div><div class=\"line\"><span class=\"string\">'\"body_bytes_sent\": \"$body_bytes_sent\", '</span></div><div class=\"line\"><span class=\"string\">'\"request_time\": \"$request_time\", '</span></div><div class=\"line\"><span class=\"string\">'\"status\": \"$status\", '</span></div><div class=\"line\"><span class=\"string\">'\"domain\": \"$host\", '</span></div><div class=\"line\"><span class=\"string\">'\"request\": \"$request\", '</span></div><div class=\"line\"><span class=\"string\">'\"request_method\": \"$request_method\", '</span></div><div class=\"line\"><span class=\"string\">'\"http_referrer\": \"$http_referer\", '</span></div><div class=\"line\"><span class=\"string\">'\"body_bytes_sent\":\"$body_bytes_sent\", '</span></div><div class=\"line\"><span class=\"string\">'\"http_x_forwarded_for\": \"$http_x_forwarded_for\", '</span></div><div class=\"line\"><span class=\"string\">'\"http_user_agent\": \"$http_user_agent\" &#125;'</span>;</div></pre></td></tr></table></figure></p>\n<p>其他日志收集见配置文件，说明如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">input &#123;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; [ \"/var/log/syslog\" ]    #定义日志路径</div><div class=\"line\">        type =&gt; \"syslog\"                </div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        ignore_older =&gt;0</div><div class=\"line\">    &#125;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; \"/var/log/nginx/*access.log\"</div><div class=\"line\">        codec =&gt; json</div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        type =&gt; \"nginx-acc\"</div><div class=\"line\">    &#125;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; \"/var/log/nginx/*error.log\"</div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        type =&gt; \"nginx-error\"</div><div class=\"line\">        ignore_older =&gt;0</div><div class=\"line\">    &#125;</div><div class=\"line\">    file &#123;</div><div class=\"line\">        path =&gt; [ \"/data/mongo/mongo.log\" ]</div><div class=\"line\">        type =&gt; \"mongo\"</div><div class=\"line\">        start_position =&gt; \"beginning\"</div><div class=\"line\">        #ignore_older =&gt;0</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">filter &#123;</div><div class=\"line\">    if [type] == \"syslog\" &#123;</div><div class=\"line\">        grok &#123;    #grok 功能将字符串转换为相应的字段，方便检索</div><div class=\"line\">            match =&gt; &#123; \"message\" =&gt; \"%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\\[%&#123;POSINT:syslog_pid&#125;\\])?: %&#123;GREEDYDATA:syslog_message&#125;\" &#125;</div><div class=\"line\">            add_field =&gt; [ \"received_at\", \"%&#123;@timestamp&#125;\" ]</div><div class=\"line\">            add_field =&gt; [ \"received_from\", \"%&#123;host&#125;\" ]</div><div class=\"line\">            &#125;    </div><div class=\"line\">            date &#123;</div><div class=\"line\">                    match =&gt; [ \"syslog_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">    if [type] == \"mongo\" &#123;</div><div class=\"line\">                grok &#123;</div><div class=\"line\">#mongo_v3                        match =&gt; [\"message\",\"%&#123;TIMESTAMP_ISO8601:timestamp&#125;\\s+%&#123;MONGO3_SEVERITY:severity&#125;\\s+%&#123;MONGO3_COMPONENT:component&#125;\\s+(?:\\[%&#123;DATA:context&#125;\\])?\\s+%&#123;GREEDYDATA:body&#125;\"]</div><div class=\"line\">            match =&gt; [\"message\",\"%&#123;SYSLOGTIMESTAMP:timestamp&#125; \\[%&#123;WORD:component&#125;\\] %&#123;GREEDYDATA:body&#125;\"]     #mongo_v2</div><div class=\"line\">               &#125;</div><div class=\"line\">                if[body]=~\"ms$\" &#123;</div><div class=\"line\">                                        grok &#123;</div><div class=\"line\">                                                match =&gt; [\"body\",\"query\\s+%&#123;WORD:db_name&#125;\\.%&#123;WORD:collection_name&#125;.*&#125;.*\\&#125;(\\s+%&#123;NUMBER:spend_time:int&#125;ms$)?\"]</div><div class=\"line\">                                        &#125;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                date &#123;</div><div class=\"line\">                        match =&gt; [ \"timestamp\", \"UNIX\", \"YYYY-MM-dd HH:mm:ss\", \"ISO8601\" ]</div><div class=\"line\">                        remove_field =&gt; [\"timestamp\"]</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    if [type] == \"nginx-error\" &#123;</div><div class=\"line\">                grok &#123;</div><div class=\"line\">                        match =&gt; &#123; \"message\" =&gt; \"(?&lt;timestamp&gt;%&#123;YEAR&#125;[./-]%&#123;MONTHNUM&#125;[./-]%&#123;MONTHDAY&#125;[- ]%&#123;TIME&#125;) \\[%&#123;LOGLEVEL:severity&#125;\\] %&#123;POSINT:pid&#125;#%&#123;NUMBER&#125;: %&#123;GREEDYDATA:errormessage&#125;(?:, client: (?&lt;client&gt;%&#123;IP&#125;|%&#123;HOSTNAME&#125;))(?:, server: %&#123;IPORHOST:server&#125;)(?:, request: %&#123;QS:request&#125;)?(?:, upstream: \\\"%&#123;URI:upstream&#125;\\\")?(?:, host: %&#123;QS:host&#125;)?(?: referrer: \\\"%&#123;URI:referrer&#125;|-\\\")?\" &#125;</div><div class=\"line\">                        overwrite =&gt; [ \"message\" ]</div><div class=\"line\">                &#125;</div><div class=\"line\">                date &#123;</div><div class=\"line\">                        match =&gt; [ \"nginx_error_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]</div><div class=\"line\">                        remove_field =&gt; [ \"timestamp\" ]</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">output &#123;</div><div class=\"line\">    if [type] == \"nginx-acc\" &#123;</div><div class=\"line\">        elasticsearch &#123;    #存储</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">            index =&gt; \"nginx_access-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    if [type] == \"nginx-error\" &#123;</div><div class=\"line\">        elasticsearch &#123;</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">            index =&gt; \"nginx_error-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    if [type] == \"syslog\" &#123;</div><div class=\"line\">        elasticsearch &#123;</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">            index =&gt; \"syslog-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if [type] == \"mongo\" &#123;</div><div class=\"line\">                elasticsearch &#123;</div><div class=\"line\">            hosts =&gt; [\"127.0.0.1:9200\"]</div><div class=\"line\">                        index =&gt; \"mongo-%&#123;+YYYY.MM.dd&#125;\"</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>采集到数据展示如下：<br><img src=\"https://ttxsgoto.github.io/img/elk/elk.png\" alt=\"elk\"></p>\n"},{"title":"Elasticsearch Mongo-connector同步mongo数据到ES","date":"2017-12-27T13:16:47.000Z","_content":"#### 说明\n1. 通过mongo-connector将mongo数据实时同步到es中\n2. mongo运行在replica-set模式，同时需要elastic2_doc_manager将数据写入ES\n3. 开启replica-set模式后，写入mongo的数据都可以同步到es，即使当前mongo-connector没有启动，启动后也会将数据写入es中\n\n#### 安装\n```python\npip install mongo-connector\npip install 'elastic2-doc-manager[elastic5]'    # ES6.1版本也可使用\n```\n\n#### mongod 以replica-set模式运行\n- 服务端:mongod version为3.6.0\n```python\n./bin/mongod --replSet \"rs0\" --dbpath /data/tools/mongodb-3.6.0/data --port 27018 --bind_ip 0.0.0.0\n```\n- 客户端设置\n```python\n# 连接mongo\n./bin/mongo --host 127.0.0.1 --port 27018\n# 配置复制集\nrs.initiate()   # 初始化副本集\nrs.conf()       # 验证副本集的配置\nrs.status()     # 验证副本集的状态\n```\n\n#### mongo-connector启动\n\nmongo-connector -m 127.0.0.1:27018 -t 127.0.0.1:9200 -d elastic2_doc_manager\n\n#### 数据测试\n- 新增数据\n```python\nuse ttxsgoto\ndb.test.insert({name:\"ttxsgoto01\", sex:\"m\", project:\"python\"})\ndb.test.insert({name:\"ttxsgoto02\", sex:\"m\", project:\"java\"})\n \n# mongo查看数据\ndb.test.find()\n \n# ES查看数据\n{\n  \"hits\": {\n    \"total\": 2,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a42188f1db5d952cbcea0ef\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"java\",\n          \"name\": \"ttxsgoto02\",\n          \"sex\": \"m\"\n        }\n      },\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a4218501db5d952cbcea0ee\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"python\",\n          \"name\": \"ttxsgoto01\",\n          \"sex\": \"m\"\n        }\n      }\n    ]\n  }\n}\n```\n- 修改数据\n```python\ndb.test.update({'name':'ttxsgoto01'}, {$set:{'name':'ttxs'}})\n \n# mongo查看数据\ndb.test.find()\n \n# ES查看数据\n{\n  \"hits\": {\n    \"total\": 2,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a42188f1db5d952cbcea0ef\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"java\",\n          \"name\": \"ttxsgoto02\",\n          \"sex\": \"m\"\n        }\n      },\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a4218501db5d952cbcea0ee\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"python\",\n          \"name\": \"ttxs\",\n          \"sex\": \"m\"\n        }\n      }\n    ]\n  }\n}\n```\n- 删除数据\n```python\ndb.test.remove({'name':'ttxsgoto02'})\n \n# ES查看数据\n{\n  \"hits\": {\n    \"total\": 1,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a4218501db5d952cbcea0ee\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"python\",\n          \"name\": \"ttxs\",\n          \"sex\": \"m\"\n        }\n      }\n    ]\n  }\n}\n```\n- 删除db\n```python\ndb.dropDatabase() # 删除数据库后，ES中对应的索引也被删除\n```\n#### 参考文档\nhttps://docs.mongodb.com/manual/tutorial/deploy-replica-set/\nhttps://github.com/mongodb-labs/elastic2-doc-manager\nhttp://blog.csdn.net/laoyang360/article/details/51842822\n","source":"_posts/elasticsearch-mongo-to-es.md","raw":"---\ntitle: Elasticsearch Mongo-connector同步mongo数据到ES\ndate: 2017-12-27 21:16:47\ntags:\n  - Mongo-connector\ncategories:\n  - Elasticsearch\n---\n#### 说明\n1. 通过mongo-connector将mongo数据实时同步到es中\n2. mongo运行在replica-set模式，同时需要elastic2_doc_manager将数据写入ES\n3. 开启replica-set模式后，写入mongo的数据都可以同步到es，即使当前mongo-connector没有启动，启动后也会将数据写入es中\n\n#### 安装\n```python\npip install mongo-connector\npip install 'elastic2-doc-manager[elastic5]'    # ES6.1版本也可使用\n```\n\n#### mongod 以replica-set模式运行\n- 服务端:mongod version为3.6.0\n```python\n./bin/mongod --replSet \"rs0\" --dbpath /data/tools/mongodb-3.6.0/data --port 27018 --bind_ip 0.0.0.0\n```\n- 客户端设置\n```python\n# 连接mongo\n./bin/mongo --host 127.0.0.1 --port 27018\n# 配置复制集\nrs.initiate()   # 初始化副本集\nrs.conf()       # 验证副本集的配置\nrs.status()     # 验证副本集的状态\n```\n\n#### mongo-connector启动\n\nmongo-connector -m 127.0.0.1:27018 -t 127.0.0.1:9200 -d elastic2_doc_manager\n\n#### 数据测试\n- 新增数据\n```python\nuse ttxsgoto\ndb.test.insert({name:\"ttxsgoto01\", sex:\"m\", project:\"python\"})\ndb.test.insert({name:\"ttxsgoto02\", sex:\"m\", project:\"java\"})\n \n# mongo查看数据\ndb.test.find()\n \n# ES查看数据\n{\n  \"hits\": {\n    \"total\": 2,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a42188f1db5d952cbcea0ef\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"java\",\n          \"name\": \"ttxsgoto02\",\n          \"sex\": \"m\"\n        }\n      },\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a4218501db5d952cbcea0ee\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"python\",\n          \"name\": \"ttxsgoto01\",\n          \"sex\": \"m\"\n        }\n      }\n    ]\n  }\n}\n```\n- 修改数据\n```python\ndb.test.update({'name':'ttxsgoto01'}, {$set:{'name':'ttxs'}})\n \n# mongo查看数据\ndb.test.find()\n \n# ES查看数据\n{\n  \"hits\": {\n    \"total\": 2,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a42188f1db5d952cbcea0ef\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"java\",\n          \"name\": \"ttxsgoto02\",\n          \"sex\": \"m\"\n        }\n      },\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a4218501db5d952cbcea0ee\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"python\",\n          \"name\": \"ttxs\",\n          \"sex\": \"m\"\n        }\n      }\n    ]\n  }\n}\n```\n- 删除数据\n```python\ndb.test.remove({'name':'ttxsgoto02'})\n \n# ES查看数据\n{\n  \"hits\": {\n    \"total\": 1,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"ttxsgoto\",\n        \"_type\": \"test\",\n        \"_id\": \"5a4218501db5d952cbcea0ee\",\n        \"_score\": 1,\n        \"_source\": {\n          \"project\": \"python\",\n          \"name\": \"ttxs\",\n          \"sex\": \"m\"\n        }\n      }\n    ]\n  }\n}\n```\n- 删除db\n```python\ndb.dropDatabase() # 删除数据库后，ES中对应的索引也被删除\n```\n#### 参考文档\nhttps://docs.mongodb.com/manual/tutorial/deploy-replica-set/\nhttps://github.com/mongodb-labs/elastic2-doc-manager\nhttp://blog.csdn.net/laoyang360/article/details/51842822\n","slug":"elasticsearch-mongo-to-es","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wr0032ct8utor161kf","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>通过mongo-connector将mongo数据实时同步到es中</li>\n<li>mongo运行在replica-set模式，同时需要elastic2_doc_manager将数据写入ES</li>\n<li>开启replica-set模式后，写入mongo的数据都可以同步到es，即使当前mongo-connector没有启动，启动后也会将数据写入es中</li>\n</ol>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install mongo-connector</div><div class=\"line\">pip install <span class=\"string\">'elastic2-doc-manager[elastic5]'</span>    <span class=\"comment\"># ES6.1版本也可使用</span></div></pre></td></tr></table></figure>\n<h4 id=\"mongod-以replica-set模式运行\"><a href=\"#mongod-以replica-set模式运行\" class=\"headerlink\" title=\"mongod 以replica-set模式运行\"></a>mongod 以replica-set模式运行</h4><ul>\n<li><p>服务端:mongod version为3.6.0</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/mongod --replSet <span class=\"string\">\"rs0\"</span> --dbpath /data/tools/mongodb<span class=\"number\">-3.6</span><span class=\"number\">.0</span>/data --port <span class=\"number\">27018</span> --bind_ip <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>客户端设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 连接mongo</span></div><div class=\"line\">./bin/mongo --host <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> --port <span class=\"number\">27018</span></div><div class=\"line\"><span class=\"comment\"># 配置复制集</span></div><div class=\"line\">rs.initiate()   <span class=\"comment\"># 初始化副本集</span></div><div class=\"line\">rs.conf()       <span class=\"comment\"># 验证副本集的配置</span></div><div class=\"line\">rs.status()     <span class=\"comment\"># 验证副本集的状态</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"mongo-connector启动\"><a href=\"#mongo-connector启动\" class=\"headerlink\" title=\"mongo-connector启动\"></a>mongo-connector启动</h4><p>mongo-connector -m 127.0.0.1:27018 -t 127.0.0.1:9200 -d elastic2_doc_manager</p>\n<h4 id=\"数据测试\"><a href=\"#数据测试\" class=\"headerlink\" title=\"数据测试\"></a>数据测试</h4><ul>\n<li><p>新增数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">use ttxsgoto</div><div class=\"line\">db.test.insert(&#123;name:<span class=\"string\">\"ttxsgoto01\"</span>, sex:<span class=\"string\">\"m\"</span>, project:<span class=\"string\">\"python\"</span>&#125;)</div><div class=\"line\">db.test.insert(&#123;name:<span class=\"string\">\"ttxsgoto02\"</span>, sex:<span class=\"string\">\"m\"</span>, project:<span class=\"string\">\"java\"</span>&#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># mongo查看数据</span></div><div class=\"line\">db.test.find()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ES查看数据</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"hits\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"string\">\"max_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"hits\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a42188f1db5d952cbcea0ef\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"java\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a4218501db5d952cbcea0ee\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxsgoto01\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'ttxsgoto01'</span>&#125;, &#123;$set:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'ttxs'</span>&#125;&#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># mongo查看数据</span></div><div class=\"line\">db.test.find()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ES查看数据</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"hits\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"string\">\"max_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"hits\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a42188f1db5d952cbcea0ef\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"java\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a4218501db5d952cbcea0ee\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxs\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.remove(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'ttxsgoto02'</span>&#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ES查看数据</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"hits\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"total\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"max_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"hits\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a4218501db5d952cbcea0ee\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxs\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除db</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropDatabase() <span class=\"comment\"># 删除数据库后，ES中对应的索引也被删除</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://docs.mongodb.com/manual/tutorial/deploy-replica-set/\" target=\"_blank\" rel=\"external\">https://docs.mongodb.com/manual/tutorial/deploy-replica-set/</a><br><a href=\"https://github.com/mongodb-labs/elastic2-doc-manager\" target=\"_blank\" rel=\"external\">https://github.com/mongodb-labs/elastic2-doc-manager</a><br><a href=\"http://blog.csdn.net/laoyang360/article/details/51842822\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/laoyang360/article/details/51842822</a></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>通过mongo-connector将mongo数据实时同步到es中</li>\n<li>mongo运行在replica-set模式，同时需要elastic2_doc_manager将数据写入ES</li>\n<li>开启replica-set模式后，写入mongo的数据都可以同步到es，即使当前mongo-connector没有启动，启动后也会将数据写入es中</li>\n</ol>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install mongo-connector</div><div class=\"line\">pip install <span class=\"string\">'elastic2-doc-manager[elastic5]'</span>    <span class=\"comment\"># ES6.1版本也可使用</span></div></pre></td></tr></table></figure>\n<h4 id=\"mongod-以replica-set模式运行\"><a href=\"#mongod-以replica-set模式运行\" class=\"headerlink\" title=\"mongod 以replica-set模式运行\"></a>mongod 以replica-set模式运行</h4><ul>\n<li><p>服务端:mongod version为3.6.0</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/mongod --replSet <span class=\"string\">\"rs0\"</span> --dbpath /data/tools/mongodb<span class=\"number\">-3.6</span><span class=\"number\">.0</span>/data --port <span class=\"number\">27018</span> --bind_ip <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>客户端设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 连接mongo</span></div><div class=\"line\">./bin/mongo --host <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> --port <span class=\"number\">27018</span></div><div class=\"line\"><span class=\"comment\"># 配置复制集</span></div><div class=\"line\">rs.initiate()   <span class=\"comment\"># 初始化副本集</span></div><div class=\"line\">rs.conf()       <span class=\"comment\"># 验证副本集的配置</span></div><div class=\"line\">rs.status()     <span class=\"comment\"># 验证副本集的状态</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"mongo-connector启动\"><a href=\"#mongo-connector启动\" class=\"headerlink\" title=\"mongo-connector启动\"></a>mongo-connector启动</h4><p>mongo-connector -m 127.0.0.1:27018 -t 127.0.0.1:9200 -d elastic2_doc_manager</p>\n<h4 id=\"数据测试\"><a href=\"#数据测试\" class=\"headerlink\" title=\"数据测试\"></a>数据测试</h4><ul>\n<li><p>新增数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">use ttxsgoto</div><div class=\"line\">db.test.insert(&#123;name:<span class=\"string\">\"ttxsgoto01\"</span>, sex:<span class=\"string\">\"m\"</span>, project:<span class=\"string\">\"python\"</span>&#125;)</div><div class=\"line\">db.test.insert(&#123;name:<span class=\"string\">\"ttxsgoto02\"</span>, sex:<span class=\"string\">\"m\"</span>, project:<span class=\"string\">\"java\"</span>&#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># mongo查看数据</span></div><div class=\"line\">db.test.find()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ES查看数据</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"hits\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"string\">\"max_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"hits\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a42188f1db5d952cbcea0ef\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"java\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a4218501db5d952cbcea0ee\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxsgoto01\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.update(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'ttxsgoto01'</span>&#125;, &#123;$set:&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'ttxs'</span>&#125;&#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># mongo查看数据</span></div><div class=\"line\">db.test.find()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ES查看数据</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"hits\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"string\">\"max_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"hits\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a42188f1db5d952cbcea0ef\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"java\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a4218501db5d952cbcea0ee\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxs\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.remove(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'ttxsgoto02'</span>&#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ES查看数据</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"hits\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"total\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"max_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">\"hits\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"5a4218501db5d952cbcea0ee\"</span>,</div><div class=\"line\">        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"_source\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"project\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ttxs\"</span>,</div><div class=\"line\">          <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"m\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除db</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropDatabase() <span class=\"comment\"># 删除数据库后，ES中对应的索引也被删除</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://docs.mongodb.com/manual/tutorial/deploy-replica-set/\">https://docs.mongodb.com/manual/tutorial/deploy-replica-set/</a><br><a href=\"https://github.com/mongodb-labs/elastic2-doc-manager\">https://github.com/mongodb-labs/elastic2-doc-manager</a><br><a href=\"http://blog.csdn.net/laoyang360/article/details/51842822\">http://blog.csdn.net/laoyang360/article/details/51842822</a></p>\n"},{"title":"运维 Hexo常用命令","date":"2017-02-01T14:38:32.000Z","_content":"#### 安装命令\n```\nnpm install -g hexo # 安装hexo\nhexo init   #初始化hexo目录\nnpm install hexo-deployer-git --save 安装git所需的插件\n\n```\n#### 常用命令\n```\nhexo clean\nhexo generate # 或者 hexo g 生成静态网页 \nhexo server # 或者 hexo s 启动本地服务\nhexo  deploy    #将本地文件推送到github上\nhexo new \"title\"    # 新建文章\nhexo new page \"pagename\"    # 新建页面\n\n```\n\n","source":"_posts/hexo.md","raw":"---\ntitle: 运维 Hexo常用命令\ndate: 2017-02-01 22:38:32\ntags:\n  - Hexo\ncategories:\n  - 运维\n---\n#### 安装命令\n```\nnpm install -g hexo # 安装hexo\nhexo init   #初始化hexo目录\nnpm install hexo-deployer-git --save 安装git所需的插件\n\n```\n#### 常用命令\n```\nhexo clean\nhexo generate # 或者 hexo g 生成静态网页 \nhexo server # 或者 hexo s 启动本地服务\nhexo  deploy    #将本地文件推送到github上\nhexo new \"title\"    # 新建文章\nhexo new page \"pagename\"    # 新建页面\n\n```\n\n","slug":"hexo","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5ws0036ct8uofae1lsx","content":"<h4 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo # 安装hexo</div><div class=\"line\">hexo init   #初始化hexo目录</div><div class=\"line\">npm install hexo-deployer-git --save 安装git所需的插件</div></pre></td></tr></table></figure>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo generate # 或者 hexo g 生成静态网页 </div><div class=\"line\">hexo server # 或者 hexo s 启动本地服务</div><div class=\"line\">hexo  deploy    #将本地文件推送到github上</div><div class=\"line\">hexo new &quot;title&quot;    # 新建文章</div><div class=\"line\">hexo new page &quot;pagename&quot;    # 新建页面</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo # 安装hexo</div><div class=\"line\">hexo init   #初始化hexo目录</div><div class=\"line\">npm install hexo-deployer-git --save 安装git所需的插件</div></pre></td></tr></table></figure>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo generate # 或者 hexo g 生成静态网页 </div><div class=\"line\">hexo server # 或者 hexo s 启动本地服务</div><div class=\"line\">hexo  deploy    #将本地文件推送到github上</div><div class=\"line\">hexo new &quot;title&quot;    # 新建文章</div><div class=\"line\">hexo new page &quot;pagename&quot;    # 新建页面</div></pre></td></tr></table></figure>\n"},{"title":"Python Fabric模块","date":"2017-03-19T12:47:15.000Z","_content":"#### 说明\n基于paramiko的封装，远程执行命令，方便简单，实用性强。\n\n#### 参数\n```\n-l  显示可用的task\n-f  指定入口文件，默认为fabfile.py\n-H  指定目标主机，主机之间用，号分隔\n-P  已并行执行，默认为串行\n-R  指定role角色\n-t  连接超时时间(s)\n-T  执行命令超时时间(s)\n```\n\n#### API\n```\nfrom fabric.api import env\n########## 属性 ##########\nenv.hosts    -主机ip\nenv.port    -主机端口，默认为22\nenv.passworkd   -ssh密码\nenv.roledefs    -角色分组，env.roledefs={'web1':['192.168.0.192']}，调用@roles('web1')\nenv.passwords   -字典，为每台机器设置密码，key是ip，value是密码，如{'root@192.168.0.200:22':'root'}，调用：@hosts('root@192.168.0.200:22')\nenv.exclude_hosts   -指定排除主机列表，在fab执行时，忽略列表中的机器；env.exclude_hosts= ['10.1.1.2']\n \n########## API ##########\nlocal('pwd')    -执行本地命令\nlcd('/tmp')     -切换本地目录\ncd('/tmp')      -切换远程目录\nrun('uname -s') -执行远程命令\nsudo('service sshd restart')   -执行远程sudo，\nput('/local/test','/remote/test')   -上传\nget('/remote/test/','/local/test')  -下载\nprompt  -获得用户输入信息,如:prompt('please Input password:');\nconfirm -获得提示信息确认,如:confirm(\"Continue[Y/N]？\");\n@task(alias='')   -函数修饰符,标识的函数为fab可调用的,非标记对fab不可见,alias设置别名\n@parallel(pool_size=5)   -并行执行任务影响的最小单位是任务，所以功能启用或禁用以任务为单位,pool_size指定并发个数\n@serial     -顺序执行，非并发执行\n@runs_once  -只有第一台执行此函数\nwith cd('/root'):   pass    -with让后面的执行继承当前所在状态\n \n__all__ = ['run1','hello']  -定义全局的可用tasks列表\n\nfrom fabric.colors import * #用于打印显示颜色   -print(yellow(\"This text is yellow!\",bold=True))    bold：用于设置粗体\n```\n#### 实例\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nfrom __future__ import with_statement\nfrom __future__ import unicode_literals\n \nimport time\nfrom fabric.api import local, cd, run, settings,env,task\nfrom fabric.context_managers import prefix\nfrom fabric.contrib.console import confirm\nfrom fabric.decorators import roles, parallel, serial, runs_once\nfrom fabric.colors import *\nfrom fabric.operations import prompt\n \nenv.hosts=['192.168.0.192','192.168.0.200']\nenv.password='root'\nenv.user='root'\n#env.roledefs={'web1':['192.168.0.192'],'web2':['192.168.0.200']}\n \n__all__ = ['local_deploy','run1','hello','test_confirm','test_prompt']     #定义全局可用的tasks列表\n \n@task\ndef hello(name):\n    '''\n    传递参数: fab hello:name=ttxsgoto\n    '''\n    print \"hello,{}\".format(name)\n \n@task\ndef local_deploy():\n    '''\n    执行本地命令\n    :return:\n    '''\n    with settings(warn_only=True):\n        return local('ls /Users/study/studypy/train/fabric_demo/fabfile.py')\n    # local('cat fabfile.py')\n \n@task   #标识为fab可调用\n@roles('web2')  #调用roles\ndef with_deploy():\n    '''\n    执行with函数\n    :return:\n    lcd 本地执行,cd 远程执行\n    '''\n    dir = '/etc/network/'\n    with cd(dir):\n        run('ls .')\n \n@task\ndef dir():\n    \"\"\"\n    remote list\n    :return:\n    \"\"\"\n    dir = '/etc/'\n    with cd(dir):\n        run('ls -l rc.local')\n \n@task(default=True)\n@parallel(pool_size=3)\ndef run1():\n    \"\"\"\n    启动\n    :return:\n    \"\"\"\n    print time.ctime()\n    hello('ttxsgoto')\n    local_deploy()\n    dir()\n    time.sleep(2)\n    print time.ctime()\n    print(yellow(\"This text is green!\",bold=True)) #用于打印显示颜色, bold：用于设置粗体\n \n@task()\ndef runserver():\n    with prefix('workon ownserver'):\n        run('cd /date/ownserver && python manage.py runserver 0.0.0.0:8000')\n \n@task()\ndef test_confirm():\n    '''\n    测试交互确认\n    :return:\n    '''\n    INFO = confirm('Are you sure?[yes/no]?')\n    if INFO:\n        print 'yes'\n    else:\n        print 'no'\n \n@task()\ndef test_prompt():\n    '''\n    测试输入信息\n    :return:\n    '''\n    Text = prompt('Input word:')\n    print '-----',Text\n```","source":"_posts/fabric.md","raw":"---\ntitle: Python Fabric模块\ndate: 2017-03-19 20:47:15\ntags:\n  - Fabric\ncategories:\n  - python\n---\n#### 说明\n基于paramiko的封装，远程执行命令，方便简单，实用性强。\n\n#### 参数\n```\n-l  显示可用的task\n-f  指定入口文件，默认为fabfile.py\n-H  指定目标主机，主机之间用，号分隔\n-P  已并行执行，默认为串行\n-R  指定role角色\n-t  连接超时时间(s)\n-T  执行命令超时时间(s)\n```\n\n#### API\n```\nfrom fabric.api import env\n########## 属性 ##########\nenv.hosts    -主机ip\nenv.port    -主机端口，默认为22\nenv.passworkd   -ssh密码\nenv.roledefs    -角色分组，env.roledefs={'web1':['192.168.0.192']}，调用@roles('web1')\nenv.passwords   -字典，为每台机器设置密码，key是ip，value是密码，如{'root@192.168.0.200:22':'root'}，调用：@hosts('root@192.168.0.200:22')\nenv.exclude_hosts   -指定排除主机列表，在fab执行时，忽略列表中的机器；env.exclude_hosts= ['10.1.1.2']\n \n########## API ##########\nlocal('pwd')    -执行本地命令\nlcd('/tmp')     -切换本地目录\ncd('/tmp')      -切换远程目录\nrun('uname -s') -执行远程命令\nsudo('service sshd restart')   -执行远程sudo，\nput('/local/test','/remote/test')   -上传\nget('/remote/test/','/local/test')  -下载\nprompt  -获得用户输入信息,如:prompt('please Input password:');\nconfirm -获得提示信息确认,如:confirm(\"Continue[Y/N]？\");\n@task(alias='')   -函数修饰符,标识的函数为fab可调用的,非标记对fab不可见,alias设置别名\n@parallel(pool_size=5)   -并行执行任务影响的最小单位是任务，所以功能启用或禁用以任务为单位,pool_size指定并发个数\n@serial     -顺序执行，非并发执行\n@runs_once  -只有第一台执行此函数\nwith cd('/root'):   pass    -with让后面的执行继承当前所在状态\n \n__all__ = ['run1','hello']  -定义全局的可用tasks列表\n\nfrom fabric.colors import * #用于打印显示颜色   -print(yellow(\"This text is yellow!\",bold=True))    bold：用于设置粗体\n```\n#### 实例\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nfrom __future__ import with_statement\nfrom __future__ import unicode_literals\n \nimport time\nfrom fabric.api import local, cd, run, settings,env,task\nfrom fabric.context_managers import prefix\nfrom fabric.contrib.console import confirm\nfrom fabric.decorators import roles, parallel, serial, runs_once\nfrom fabric.colors import *\nfrom fabric.operations import prompt\n \nenv.hosts=['192.168.0.192','192.168.0.200']\nenv.password='root'\nenv.user='root'\n#env.roledefs={'web1':['192.168.0.192'],'web2':['192.168.0.200']}\n \n__all__ = ['local_deploy','run1','hello','test_confirm','test_prompt']     #定义全局可用的tasks列表\n \n@task\ndef hello(name):\n    '''\n    传递参数: fab hello:name=ttxsgoto\n    '''\n    print \"hello,{}\".format(name)\n \n@task\ndef local_deploy():\n    '''\n    执行本地命令\n    :return:\n    '''\n    with settings(warn_only=True):\n        return local('ls /Users/study/studypy/train/fabric_demo/fabfile.py')\n    # local('cat fabfile.py')\n \n@task   #标识为fab可调用\n@roles('web2')  #调用roles\ndef with_deploy():\n    '''\n    执行with函数\n    :return:\n    lcd 本地执行,cd 远程执行\n    '''\n    dir = '/etc/network/'\n    with cd(dir):\n        run('ls .')\n \n@task\ndef dir():\n    \"\"\"\n    remote list\n    :return:\n    \"\"\"\n    dir = '/etc/'\n    with cd(dir):\n        run('ls -l rc.local')\n \n@task(default=True)\n@parallel(pool_size=3)\ndef run1():\n    \"\"\"\n    启动\n    :return:\n    \"\"\"\n    print time.ctime()\n    hello('ttxsgoto')\n    local_deploy()\n    dir()\n    time.sleep(2)\n    print time.ctime()\n    print(yellow(\"This text is green!\",bold=True)) #用于打印显示颜色, bold：用于设置粗体\n \n@task()\ndef runserver():\n    with prefix('workon ownserver'):\n        run('cd /date/ownserver && python manage.py runserver 0.0.0.0:8000')\n \n@task()\ndef test_confirm():\n    '''\n    测试交互确认\n    :return:\n    '''\n    INFO = confirm('Are you sure?[yes/no]?')\n    if INFO:\n        print 'yes'\n    else:\n        print 'no'\n \n@task()\ndef test_prompt():\n    '''\n    测试输入信息\n    :return:\n    '''\n    Text = prompt('Input word:')\n    print '-----',Text\n```","slug":"fabric","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wu0038ct8uw9lk2z0a","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>基于paramiko的封装，远程执行命令，方便简单，实用性强。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-l  显示可用的task</div><div class=\"line\">-f  指定入口文件，默认为fabfile.py</div><div class=\"line\">-H  指定目标主机，主机之间用，号分隔</div><div class=\"line\">-P  已并行执行，默认为串行</div><div class=\"line\">-R  指定role角色</div><div class=\"line\">-t  连接超时时间(s)</div><div class=\"line\">-T  执行命令超时时间(s)</div></pre></td></tr></table></figure>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">from fabric.api import env</div><div class=\"line\">########## 属性 ##########</div><div class=\"line\">env.hosts    -主机ip</div><div class=\"line\">env.port    -主机端口，默认为22</div><div class=\"line\">env.passworkd   -ssh密码</div><div class=\"line\">env.roledefs    -角色分组，env.roledefs=&#123;&apos;web1&apos;:[&apos;192.168.0.192&apos;]&#125;，调用@roles(&apos;web1&apos;)</div><div class=\"line\">env.passwords   -字典，为每台机器设置密码，key是ip，value是密码，如&#123;&apos;root@192.168.0.200:22&apos;:&apos;root&apos;&#125;，调用：@hosts(&apos;root@192.168.0.200:22&apos;)</div><div class=\"line\">env.exclude_hosts   -指定排除主机列表，在fab执行时，忽略列表中的机器；env.exclude_hosts= [&apos;10.1.1.2&apos;]</div><div class=\"line\"> </div><div class=\"line\">########## API ##########</div><div class=\"line\">local(&apos;pwd&apos;)    -执行本地命令</div><div class=\"line\">lcd(&apos;/tmp&apos;)     -切换本地目录</div><div class=\"line\">cd(&apos;/tmp&apos;)      -切换远程目录</div><div class=\"line\">run(&apos;uname -s&apos;) -执行远程命令</div><div class=\"line\">sudo(&apos;service sshd restart&apos;)   -执行远程sudo，</div><div class=\"line\">put(&apos;/local/test&apos;,&apos;/remote/test&apos;)   -上传</div><div class=\"line\">get(&apos;/remote/test/&apos;,&apos;/local/test&apos;)  -下载</div><div class=\"line\">prompt  -获得用户输入信息,如:prompt(&apos;please Input password:&apos;);</div><div class=\"line\">confirm -获得提示信息确认,如:confirm(&quot;Continue[Y/N]？&quot;);</div><div class=\"line\">@task(alias=&apos;&apos;)   -函数修饰符,标识的函数为fab可调用的,非标记对fab不可见,alias设置别名</div><div class=\"line\">@parallel(pool_size=5)   -并行执行任务影响的最小单位是任务，所以功能启用或禁用以任务为单位,pool_size指定并发个数</div><div class=\"line\">@serial     -顺序执行，非并发执行</div><div class=\"line\">@runs_once  -只有第一台执行此函数</div><div class=\"line\">with cd(&apos;/root&apos;):   pass    -with让后面的执行继承当前所在状态</div><div class=\"line\"> </div><div class=\"line\">__all__ = [&apos;run1&apos;,&apos;hello&apos;]  -定义全局的可用tasks列表</div><div class=\"line\"></div><div class=\"line\">from fabric.colors import * #用于打印显示颜色   -print(yellow(&quot;This text is yellow!&quot;,bold=True))    bold：用于设置粗体</div></pre></td></tr></table></figure>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> with_statement</div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.api <span class=\"keyword\">import</span> local, cd, run, settings,env,task</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.context_managers <span class=\"keyword\">import</span> prefix</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.contrib.console <span class=\"keyword\">import</span> confirm</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.decorators <span class=\"keyword\">import</span> roles, parallel, serial, runs_once</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.colors <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.operations <span class=\"keyword\">import</span> prompt</div><div class=\"line\"> </div><div class=\"line\">env.hosts=[<span class=\"string\">'192.168.0.192'</span>,<span class=\"string\">'192.168.0.200'</span>]</div><div class=\"line\">env.password=<span class=\"string\">'root'</span></div><div class=\"line\">env.user=<span class=\"string\">'root'</span></div><div class=\"line\"><span class=\"comment\">#env.roledefs=&#123;'web1':['192.168.0.192'],'web2':['192.168.0.200']&#125;</span></div><div class=\"line\"> </div><div class=\"line\">__all__ = [<span class=\"string\">'local_deploy'</span>,<span class=\"string\">'run1'</span>,<span class=\"string\">'hello'</span>,<span class=\"string\">'test_confirm'</span>,<span class=\"string\">'test_prompt'</span>]     <span class=\"comment\">#定义全局可用的tasks列表</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    传递参数: fab hello:name=ttxsgoto</div><div class=\"line\">    '''</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"hello,&#123;&#125;\"</span>.format(name)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">local_deploy</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    执行本地命令</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</div><div class=\"line\">    <span class=\"keyword\">with</span> settings(warn_only=<span class=\"keyword\">True</span>):</div><div class=\"line\">        <span class=\"keyword\">return</span> local(<span class=\"string\">'ls /Users/study/studypy/train/fabric_demo/fabfile.py'</span>)</div><div class=\"line\">    <span class=\"comment\"># local('cat fabfile.py')</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task   #标识为fab可调用</span></div><div class=\"line\"><span class=\"meta\">@roles('web2')  #调用roles</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_deploy</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    执行with函数</div><div class=\"line\">    :return:</div><div class=\"line\">    lcd 本地执行,cd 远程执行</div><div class=\"line\">    '''</div><div class=\"line\">    dir = <span class=\"string\">'/etc/network/'</span></div><div class=\"line\">    <span class=\"keyword\">with</span> cd(dir):</div><div class=\"line\">        run(<span class=\"string\">'ls .'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dir</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    remote list</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    dir = <span class=\"string\">'/etc/'</span></div><div class=\"line\">    <span class=\"keyword\">with</span> cd(dir):</div><div class=\"line\">        run(<span class=\"string\">'ls -l rc.local'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task(default=True)</span></div><div class=\"line\"><span class=\"meta\">@parallel(pool_size=3)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    启动</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">print</span> time.ctime()</div><div class=\"line\">    hello(<span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\">    local_deploy()</div><div class=\"line\">    dir()</div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> time.ctime()</div><div class=\"line\">    print(yellow(<span class=\"string\">\"This text is green!\"</span>,bold=<span class=\"keyword\">True</span>)) <span class=\"comment\">#用于打印显示颜色, bold：用于设置粗体</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runserver</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">with</span> prefix(<span class=\"string\">'workon ownserver'</span>):</div><div class=\"line\">        run(<span class=\"string\">'cd /date/ownserver &amp;&amp; python manage.py runserver 0.0.0.0:8000'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_confirm</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    测试交互确认</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</div><div class=\"line\">    INFO = confirm(<span class=\"string\">'Are you sure?[yes/no]?'</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> INFO:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'yes'</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'no'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_prompt</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    测试输入信息</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</div><div class=\"line\">    Text = prompt(<span class=\"string\">'Input word:'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'-----'</span>,Text</div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>基于paramiko的封装，远程执行命令，方便简单，实用性强。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-l  显示可用的task</div><div class=\"line\">-f  指定入口文件，默认为fabfile.py</div><div class=\"line\">-H  指定目标主机，主机之间用，号分隔</div><div class=\"line\">-P  已并行执行，默认为串行</div><div class=\"line\">-R  指定role角色</div><div class=\"line\">-t  连接超时时间(s)</div><div class=\"line\">-T  执行命令超时时间(s)</div></pre></td></tr></table></figure>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">from fabric.api import env</div><div class=\"line\">########## 属性 ##########</div><div class=\"line\">env.hosts    -主机ip</div><div class=\"line\">env.port    -主机端口，默认为22</div><div class=\"line\">env.passworkd   -ssh密码</div><div class=\"line\">env.roledefs    -角色分组，env.roledefs=&#123;&apos;web1&apos;:[&apos;192.168.0.192&apos;]&#125;，调用@roles(&apos;web1&apos;)</div><div class=\"line\">env.passwords   -字典，为每台机器设置密码，key是ip，value是密码，如&#123;&apos;root@192.168.0.200:22&apos;:&apos;root&apos;&#125;，调用：@hosts(&apos;root@192.168.0.200:22&apos;)</div><div class=\"line\">env.exclude_hosts   -指定排除主机列表，在fab执行时，忽略列表中的机器；env.exclude_hosts= [&apos;10.1.1.2&apos;]</div><div class=\"line\"> </div><div class=\"line\">########## API ##########</div><div class=\"line\">local(&apos;pwd&apos;)    -执行本地命令</div><div class=\"line\">lcd(&apos;/tmp&apos;)     -切换本地目录</div><div class=\"line\">cd(&apos;/tmp&apos;)      -切换远程目录</div><div class=\"line\">run(&apos;uname -s&apos;) -执行远程命令</div><div class=\"line\">sudo(&apos;service sshd restart&apos;)   -执行远程sudo，</div><div class=\"line\">put(&apos;/local/test&apos;,&apos;/remote/test&apos;)   -上传</div><div class=\"line\">get(&apos;/remote/test/&apos;,&apos;/local/test&apos;)  -下载</div><div class=\"line\">prompt  -获得用户输入信息,如:prompt(&apos;please Input password:&apos;);</div><div class=\"line\">confirm -获得提示信息确认,如:confirm(&quot;Continue[Y/N]？&quot;);</div><div class=\"line\">@task(alias=&apos;&apos;)   -函数修饰符,标识的函数为fab可调用的,非标记对fab不可见,alias设置别名</div><div class=\"line\">@parallel(pool_size=5)   -并行执行任务影响的最小单位是任务，所以功能启用或禁用以任务为单位,pool_size指定并发个数</div><div class=\"line\">@serial     -顺序执行，非并发执行</div><div class=\"line\">@runs_once  -只有第一台执行此函数</div><div class=\"line\">with cd(&apos;/root&apos;):   pass    -with让后面的执行继承当前所在状态</div><div class=\"line\"> </div><div class=\"line\">__all__ = [&apos;run1&apos;,&apos;hello&apos;]  -定义全局的可用tasks列表</div><div class=\"line\"></div><div class=\"line\">from fabric.colors import * #用于打印显示颜色   -print(yellow(&quot;This text is yellow!&quot;,bold=True))    bold：用于设置粗体</div></pre></td></tr></table></figure>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> with_statement</div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.api <span class=\"keyword\">import</span> local, cd, run, settings,env,task</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.context_managers <span class=\"keyword\">import</span> prefix</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.contrib.console <span class=\"keyword\">import</span> confirm</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.decorators <span class=\"keyword\">import</span> roles, parallel, serial, runs_once</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.colors <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> fabric.operations <span class=\"keyword\">import</span> prompt</div><div class=\"line\"> </div><div class=\"line\">env.hosts=[<span class=\"string\">'192.168.0.192'</span>,<span class=\"string\">'192.168.0.200'</span>]</div><div class=\"line\">env.password=<span class=\"string\">'root'</span></div><div class=\"line\">env.user=<span class=\"string\">'root'</span></div><div class=\"line\"><span class=\"comment\">#env.roledefs=&#123;'web1':['192.168.0.192'],'web2':['192.168.0.200']&#125;</span></div><div class=\"line\"> </div><div class=\"line\">__all__ = [<span class=\"string\">'local_deploy'</span>,<span class=\"string\">'run1'</span>,<span class=\"string\">'hello'</span>,<span class=\"string\">'test_confirm'</span>,<span class=\"string\">'test_prompt'</span>]     <span class=\"comment\">#定义全局可用的tasks列表</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    传递参数: fab hello:name=ttxsgoto</div><div class=\"line\">    '''</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"hello,&#123;&#125;\"</span>.format(name)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">local_deploy</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    执行本地命令</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</span></div><div class=\"line\">    <span class=\"keyword\">with</span> settings(warn_only=<span class=\"keyword\">True</span>):</div><div class=\"line\">        <span class=\"keyword\">return</span> local(<span class=\"string\">'ls /Users/study/studypy/train/fabric_demo/fabfile.py'</span>)</div><div class=\"line\">    <span class=\"comment\"># local('cat fabfile.py')</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task   #标识为fab可调用</span></div><div class=\"line\"><span class=\"meta\">@roles('web2')  #调用roles</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_deploy</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    执行with函数</div><div class=\"line\">    :return:</div><div class=\"line\">    lcd 本地执行,cd 远程执行</div><div class=\"line\">    '''</span></div><div class=\"line\">    dir = <span class=\"string\">'/etc/network/'</span></div><div class=\"line\">    <span class=\"keyword\">with</span> cd(dir):</div><div class=\"line\">        run(<span class=\"string\">'ls .'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dir</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    remote list</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    dir = <span class=\"string\">'/etc/'</span></div><div class=\"line\">    <span class=\"keyword\">with</span> cd(dir):</div><div class=\"line\">        run(<span class=\"string\">'ls -l rc.local'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task(default=True)</span></div><div class=\"line\"><span class=\"meta\">@parallel(pool_size=3)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    启动</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">print</span> time.ctime()</div><div class=\"line\">    hello(<span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\">    local_deploy()</div><div class=\"line\">    dir()</div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> time.ctime()</div><div class=\"line\">    print(yellow(<span class=\"string\">\"This text is green!\"</span>,bold=<span class=\"keyword\">True</span>)) <span class=\"comment\">#用于打印显示颜色, bold：用于设置粗体</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runserver</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">with</span> prefix(<span class=\"string\">'workon ownserver'</span>):</div><div class=\"line\">        run(<span class=\"string\">'cd /date/ownserver &amp;&amp; python manage.py runserver 0.0.0.0:8000'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_confirm</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    测试交互确认</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</span></div><div class=\"line\">    INFO = confirm(<span class=\"string\">'Are you sure?[yes/no]?'</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> INFO:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'yes'</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'no'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_prompt</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    测试输入信息</div><div class=\"line\">    :return:</div><div class=\"line\">    '''</span></div><div class=\"line\">    Text = prompt(<span class=\"string\">'Input word:'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'-----'</span>,Text</div></pre></td></tr></table></figure>"},{"title":"Elasticsearch Logstash-input-jdbc同步mysql数据到ES","date":"2017-12-27T13:08:17.000Z","_content":"#### 说明\n将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成\n\n#### 安装\n```\n./logstash-plugin install  logstash-input-jdbc\n```\n\n#### 配置文件\njdbc.conf\n```python\ninput {\n    stdin {\n    }\n    jdbc {\n      jdbc_connection_string => \"jdbc:mysql://127.0.0.1:3307/test\"\n      jdbc_user => \"root\"\n      jdbc_password => \"root\"\n      # jdbc driver\n      jdbc_driver_library => \"/data/es/mysql-connector-java-5.1.39.jar\"\n      jdbc_driver_class => \"com.mysql.jdbc.Driver\"\n      jdbc_paging_enabled => \"true\"\n      jdbc_page_size => \"50000\"\n      # 执行的sql的路径\n      statement_filepath => \"sql.sql\"\n      # 需要导入的sql语句查出来的数据\n      #statement => \"SELECT * FROM zhihuquestion\"\n      # 定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新\n      schedule => \"* * * * *\"\n      #schedule => \"*/2 * * * *\"    # 每2分钟更新一次\n      type => \"test_index\"\n    }\n}\n \nfilter {\n    json {\n        source => \"message\"\n        remove_field => [\"message\"]\n    }\n}\n \noutput {\n    elasticsearch {\n        hosts => [\"http://127.0.0.1:9200\"]\n        index => \"test_index\"\n        document_type => \"test\"\n        #自增ID编号\n        document_id => \"%{id}\"\n    }\n    # 以json格式输出\n    stdout {\n        codec => json_lines\n    }\n}\n```\n#### 启动\n```\n../bin/logstash -f jdbc.conf\n```\n#### 参考文档\nhttps://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html\nhttps://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash\nhttp://blog.csdn.net/laoyang360/article/details/51747266\n","source":"_posts/elasticsearch-mysql-to-es.md","raw":"---\ntitle: Elasticsearch Logstash-input-jdbc同步mysql数据到ES\ndate: 2017-12-27 21:08:17\ntags:\n  - Logstash-input-jdbc\ncategories:\n  - Elasticsearch\n---\n#### 说明\n将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成\n\n#### 安装\n```\n./logstash-plugin install  logstash-input-jdbc\n```\n\n#### 配置文件\njdbc.conf\n```python\ninput {\n    stdin {\n    }\n    jdbc {\n      jdbc_connection_string => \"jdbc:mysql://127.0.0.1:3307/test\"\n      jdbc_user => \"root\"\n      jdbc_password => \"root\"\n      # jdbc driver\n      jdbc_driver_library => \"/data/es/mysql-connector-java-5.1.39.jar\"\n      jdbc_driver_class => \"com.mysql.jdbc.Driver\"\n      jdbc_paging_enabled => \"true\"\n      jdbc_page_size => \"50000\"\n      # 执行的sql的路径\n      statement_filepath => \"sql.sql\"\n      # 需要导入的sql语句查出来的数据\n      #statement => \"SELECT * FROM zhihuquestion\"\n      # 定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新\n      schedule => \"* * * * *\"\n      #schedule => \"*/2 * * * *\"    # 每2分钟更新一次\n      type => \"test_index\"\n    }\n}\n \nfilter {\n    json {\n        source => \"message\"\n        remove_field => [\"message\"]\n    }\n}\n \noutput {\n    elasticsearch {\n        hosts => [\"http://127.0.0.1:9200\"]\n        index => \"test_index\"\n        document_type => \"test\"\n        #自增ID编号\n        document_id => \"%{id}\"\n    }\n    # 以json格式输出\n    stdout {\n        codec => json_lines\n    }\n}\n```\n#### 启动\n```\n../bin/logstash -f jdbc.conf\n```\n#### 参考文档\nhttps://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html\nhttps://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash\nhttp://blog.csdn.net/laoyang360/article/details/51747266\n","slug":"elasticsearch-mysql-to-es","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wv003dct8usv19jepa","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./logstash-plugin install  logstash-input-jdbc</div></pre></td></tr></table></figure>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>jdbc.conf<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">input &#123;</div><div class=\"line\">    stdin &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    jdbc &#123;</div><div class=\"line\">      jdbc_connection_string =&gt; \"jdbc:mysql://127.0.0.1:3307/test\"</div><div class=\"line\">      jdbc_user =&gt; \"root\"</div><div class=\"line\">      jdbc_password =&gt; \"root\"</div><div class=\"line\">      # jdbc driver</div><div class=\"line\">      jdbc_driver_library =&gt; \"/data/es/mysql-connector-java-5.1.39.jar\"</div><div class=\"line\">      jdbc_driver_class =&gt; \"com.mysql.jdbc.Driver\"</div><div class=\"line\">      jdbc_paging_enabled =&gt; \"true\"</div><div class=\"line\">      jdbc_page_size =&gt; \"50000\"</div><div class=\"line\">      # 执行的sql的路径</div><div class=\"line\">      statement_filepath =&gt; \"sql.sql\"</div><div class=\"line\">      # 需要导入的sql语句查出来的数据</div><div class=\"line\">      #statement =&gt; \"SELECT * FROM zhihuquestion\"</div><div class=\"line\">      # 定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新</div><div class=\"line\">      schedule =&gt; \"* * * * *\"</div><div class=\"line\">      #schedule =&gt; \"*/2 * * * *\"    # 每2分钟更新一次</div><div class=\"line\">      type =&gt; \"test_index\"</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">filter &#123;</div><div class=\"line\">    json &#123;</div><div class=\"line\">        source =&gt; \"message\"</div><div class=\"line\">        remove_field =&gt; [\"message\"]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">output &#123;</div><div class=\"line\">    elasticsearch &#123;</div><div class=\"line\">        hosts =&gt; [\"http://127.0.0.1:9200\"]</div><div class=\"line\">        index =&gt; \"test_index\"</div><div class=\"line\">        document_type =&gt; \"test\"</div><div class=\"line\">        #自增ID编号</div><div class=\"line\">        document_id =&gt; \"%&#123;id&#125;\"</div><div class=\"line\">    &#125;</div><div class=\"line\">    # 以json格式输出</div><div class=\"line\">    stdout &#123;</div><div class=\"line\">        codec =&gt; json_lines</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">../bin/logstash -f jdbc.conf</div></pre></td></tr></table></figure>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html\" target=\"_blank\" rel=\"external\">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html</a><br><a href=\"https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash\" target=\"_blank\" rel=\"external\">https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash</a><br><a href=\"http://blog.csdn.net/laoyang360/article/details/51747266\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/laoyang360/article/details/51747266</a></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>将Mysql中的数据同步到ES集群中，方便搜索功能，通过logstash自带的插件logstash-input-jdbc来轻松完成</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./logstash-plugin install  logstash-input-jdbc</div></pre></td></tr></table></figure>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>jdbc.conf<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">input &#123;</div><div class=\"line\">    stdin &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    jdbc &#123;</div><div class=\"line\">      jdbc_connection_string =&gt; \"jdbc:mysql://127.0.0.1:3307/test\"</div><div class=\"line\">      jdbc_user =&gt; \"root\"</div><div class=\"line\">      jdbc_password =&gt; \"root\"</div><div class=\"line\">      # jdbc driver</div><div class=\"line\">      jdbc_driver_library =&gt; \"/data/es/mysql-connector-java-5.1.39.jar\"</div><div class=\"line\">      jdbc_driver_class =&gt; \"com.mysql.jdbc.Driver\"</div><div class=\"line\">      jdbc_paging_enabled =&gt; \"true\"</div><div class=\"line\">      jdbc_page_size =&gt; \"50000\"</div><div class=\"line\">      # 执行的sql的路径</div><div class=\"line\">      statement_filepath =&gt; \"sql.sql\"</div><div class=\"line\">      # 需要导入的sql语句查出来的数据</div><div class=\"line\">      #statement =&gt; \"SELECT * FROM zhihuquestion\"</div><div class=\"line\">      # 定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新</div><div class=\"line\">      schedule =&gt; \"* * * * *\"</div><div class=\"line\">      #schedule =&gt; \"*/2 * * * *\"    # 每2分钟更新一次</div><div class=\"line\">      type =&gt; \"test_index\"</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">filter &#123;</div><div class=\"line\">    json &#123;</div><div class=\"line\">        source =&gt; \"message\"</div><div class=\"line\">        remove_field =&gt; [\"message\"]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">output &#123;</div><div class=\"line\">    elasticsearch &#123;</div><div class=\"line\">        hosts =&gt; [\"http://127.0.0.1:9200\"]</div><div class=\"line\">        index =&gt; \"test_index\"</div><div class=\"line\">        document_type =&gt; \"test\"</div><div class=\"line\">        #自增ID编号</div><div class=\"line\">        document_id =&gt; \"%&#123;id&#125;\"</div><div class=\"line\">    &#125;</div><div class=\"line\">    # 以json格式输出</div><div class=\"line\">    stdout &#123;</div><div class=\"line\">        codec =&gt; json_lines</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">../bin/logstash -f jdbc.conf</div></pre></td></tr></table></figure>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html\">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html</a><br><a href=\"https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash\">https://qbox.io/blog/migrating-mysql-data-into-elasticsearch-using-logstash</a><br><a href=\"http://blog.csdn.net/laoyang360/article/details/51747266\">http://blog.csdn.net/laoyang360/article/details/51747266</a></p>\n"},{"title":"Python Importlib模块","date":"2017-04-16T07:44:11.000Z","_content":"通过字符串导入模块，动态导入模块，3种方式,记录如下：\n\n方式一：\n```python\nos1 = __import__('os')\nos1.path.join <==> from os.path import join\n```\n方式二：\n```python\nimport imp\nos2 = imp.load_module('os',*imp.find_module('os'))\nos2.path.join <==> from os.path import join\n```\n方式三：\n```python\nmodule = importlib.import_module('os')\nos_path =  getattr(module,'path')\nos_path.join <==> from os.path import join\n```\n\n","source":"_posts/importlib.md","raw":"---\ntitle: Python Importlib模块\ndate: 2017-04-16 15:44:11\ntags:\n  - Importlib\ncategories:\n  - python\n---\n通过字符串导入模块，动态导入模块，3种方式,记录如下：\n\n方式一：\n```python\nos1 = __import__('os')\nos1.path.join <==> from os.path import join\n```\n方式二：\n```python\nimport imp\nos2 = imp.load_module('os',*imp.find_module('os'))\nos2.path.join <==> from os.path import join\n```\n方式三：\n```python\nmodule = importlib.import_module('os')\nos_path =  getattr(module,'path')\nos_path.join <==> from os.path import join\n```\n\n","slug":"importlib","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wx003gct8udgz1hu4u","content":"<p>通过字符串导入模块，动态导入模块，3种方式,记录如下：</p>\n<p>方式一：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">os1 = __import__('os')</div><div class=\"line\">os1.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>\n<p>方式二：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import imp</div><div class=\"line\">os2 = imp.load_module('os',*imp.find_module('os'))</div><div class=\"line\">os2.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>\n<p>方式三：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module = importlib.import_module('os')</div><div class=\"line\">os_path =  getattr(module,'path')</div><div class=\"line\">os_path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>通过字符串导入模块，动态导入模块，3种方式,记录如下：</p>\n<p>方式一：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">os1 = __import__('os')</div><div class=\"line\">os1.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>\n<p>方式二：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import imp</div><div class=\"line\">os2 = imp.load_module('os',*imp.find_module('os'))</div><div class=\"line\">os2.path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>\n<p>方式三：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module = importlib.import_module('os')</div><div class=\"line\">os_path =  getattr(module,'path')</div><div class=\"line\">os_path.join &lt;==&gt; from os.path import join</div></pre></td></tr></table></figure></p>\n"},{"title":"运维 Mongo日常笔记","date":"2017-02-16T13:57:18.000Z","_content":"\n### 认证授权相关\n帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中\n\n**认证登录说明**\n超级用户：拥有最大权限，存储在admin数据库中，\n数据库用户：存储在单个数据库中，最能访问对应的数据库\n用户信息保存在db.system.users中\n\n**开启认证方法**\n- 启动添加： --auth\n- 配置文件：security.authorization: enabled\n\n**用户和权限的特性**\n1. 数据库是由超级用户来创建的，一个数据库可以包含多个用户，一个用户只能在一个数据库下，不同数据库中的用户可以同名\n2. 如果在 admin 数据库中不存在用户，即使 mongod 启动时添加了 –auth 参数，此时不进行任何认证还是可以做任何操作\n3. 在 admin 数据库创建的用户具有超级权限，可以对 MongoDB 系统内的任何数据库的数据对象进行操作\n4. 特定数据库比如 test1 下的用户 test_user1，不能够访问其他数据库 test2，但是可以访问本数据库下其他用户创建的数据\n5. 不同数据库中同名的用户不能够登录其他数据库。比如数据库 test1 和 test2 都有用户 test_user，以 test_user 登录 test1 后,不能够登录到 test2 进行数据库操作\n\n#### 授权命令\n```\nuse xxx;\t\t\t\t\t\t#进入某库，创建某库\ndb.createUser({user: \"ttxsgoto\",pwd:\"ttxsgoto\",roles:[{role:\"userAdminAnyDatabase\",db:\"admin\"}]})\ndb.createUser({user: \"ttxsgoto\",pwd:\"ttxsgoto\",roles:[{role:\"read\",db:\"test\"}]})\t        #读\ndb.createUser({user: \"ttxsgoto01\",pwd:\"ttxsgoto01\",roles:[{role:\"readWrite\",db:\"test\"}]})\t#读写\ndb.createUser({user: \"ttxsgoto02\",pwd:\"ttxsgoto02\",roles:[{role:\"root\",db:\"test\"}]})\t        #超级root权限\ndb.system.users.remove({user:\"ttxsgoto\"})\t#删除用户\ndb.changeUserPassword('ttxsgoto','test'); \t#修改密码的方法\n```\n**具体权限说明**\n```\nBuilt-In Roles（内置角色）：\n    1. 数据库用户角色：read、readWrite;\n    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；\n    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n    4. 备份恢复角色：backup、restore；\n    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n    6. 超级用户角色：root\n    7. 内部角色：__system\n\n具体角色：\nRead：允许用户读取指定数据库\nreadWrite：允许用户读写指定数据库\ndbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile\nuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户\nclusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。\nreadAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限\nreadWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限\nuserAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\ndbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。\nroot：只在admin数据库中可用。超级账号，超级权限\n```\n\n```\n# 在admin库中\ndb.createUser({user: \"ttxsgoto02\",pwd:\"ttxsgoto02\",roles:[{role:\"readWrite\",db:\"test01\"},{role:\"readWrite\",db:\"test02\"}]})\t#在admin库下创建test01，test02库的账号\n\n在这种情况下，不能直接在对应的库中登录验证，而应该在对应的这个库中进行认证后，在切换到其他库中\nuse admin\ndb.auth('ttxsgoto02','ttxsgoto02')\nuse test02；\n```\n#### 登录验证\n```\n方法一：\nmongo\nuse admin\ndb.auth(\"admin\",\"abc\")\n方法二：\nmongo -u admin -p admin --authenticationDatabase admin\n```\n### 日常使用\n#### 常用命令\n```\nmongo 127.0.0.1/admin -uadmin -p'admin'\t\t#连接mongo数据库\nuse admin;\t\t\t#进入数据库\nshow users;\t\t\t#查看当前库下的用户\nshow collections/tables;        #查看当前库中的collections\ndb.getCollectionNames();\t\t#得到当前db的所有集合\ndb.auth('ttxsgoto','ttxsgoto')\t#登录验证\ndb.getName()\t\t\t#查看当前使用的数据库\ndb.stats()\t\t\t#查看当前db状态\ndb.getMongo();\t\t\t#查看当前db连接机器的地址\ndb.abc.find();\t                #查看集合中的所有数据\ndb \t\t                #查看当前所在的数据库\ndb.system.users.find().pretty()\t#在admin库中查看所有账号\ndb.getMongo();\t\t\t#查看当前db连接机器的地址\ndb.repairDatabase()\t\t#修复当前数据库\ndb.getCollectionNames()\t\t#得到当前db的所有集合\ndb.printCollectionStats()\t#显示当前db所有聚集索引的状态\n```\n#### 增删改查\n```\n# 插入集合\ncontent={name:\"xxxx\",sex:\"m\"}\ndb.collections.insert(content)\ndb.createCollection(\"collName\", {size: 20, capped: 5, max: 100})\t#创建一个集合\ndb.getCollection(\"account\")\t\t#得到集合名称\n# 查询：\ndb.inventory.find();\ndb.foo.find()\t\t#对当前数据库中的foo集合进行数据查找，所有数据\ndb.foo.find({a:1})\t#对当前数据库中的foo集合中条件包含a=1的项进行查询\n# 删除：\ndb.dropDatabase()\t#删除当前使用的数据库\n```\n#### 备份相关\n```\nmongoimport(导入)/mongoexport(导出)：(将collection导出为json格式或csv格式)\nmongoexport -d test -c t1 -o t1.dat\t#导出json格式\n-c\t#指明导出的集合\n-d\t#使用库\nmongoexport -d test -c t1 -csv -f num -o t1.dat\t#导出csv格式\n-csv\t#指明导出csv格式\n-f\t#指明需要导出哪些列\nmongoimport -d test -c t1 -file t1.dat\t\t\t\t#还原\nmongoimport -d test -c t1 -type csv --headerline -file t1.dat\t#还原csv格式的数据\n--headerline\t#指明不导入第一行，因为第一行为列名\nmongodump/mongorestore:（整库备份还原,库级别操作,先执行查询动作然后把所有查询结果写入到硬盘中，但在内存中的数据未写入磁盘中）\nmongodump -h x.x.x.x  --port  27017 -uroot -p xxx  -d test -o /bak/mongodump\t#导出\nmongodump -h x.x.x.x  --port  27017 -uroot -p xxx\t-o /bak/allmongobak\t#导出所有\n-h ip\n--port port\n-u user\n-p password\n-d database\n-c collection\n-o outfile\nmongorestore -h IP  --port -u user -p password \t-d test  --drop\t/bak/mongodump/*\t#恢复\n--drop\t#恢复前先删除所有记录\n--noIndexRestore\t#不还原索引\n例子说明\n# 备份\nmongoexport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o collection.json\n\nmongodump -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o 1202.dat\n# 还原\nmongorestore -u root -p root --authenticationDatabase admin -d database_20161202 --noIndexRestore --drop 1202.dat/collection\nmongoimport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database_20161202 -c collection  --file  collection.json\n```\n**库表级备份还原的区别:**\nmongorestore和mongodump提供的是对mongo数据库的整个数据库的恢复和备份，而mongoimport和mongoexport则是提供更细粒度的collection级别的数据导入和导出。两者的粒度不同，mongoimport和mongoexport粒度更细，相对来说，更加灵活。其次，mongoimport和mongoexport只是将集合中的数据导出和导入，但是没有对数据库中的其它成分进行备份（比如索引），而mongorestore和mongodump则是对数据库中的所有成分（包括索引等其它）进行恢复和备份。然而，这也导致了mongorestore和mongodump导出的文件比较大耗时较长，而mongoimport和mongoexport导出的文件比较小，速度比较快，而且格式较为灵活。\n\n\n\n\n","source":"_posts/mongo.md","raw":"---\ntitle: 运维 Mongo日常笔记\ndate: 2017-02-16 21:57:18\ntags:\n  - Mongo\ncategories:\n  - 运维\n---\n\n### 认证授权相关\n帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中\n\n**认证登录说明**\n超级用户：拥有最大权限，存储在admin数据库中，\n数据库用户：存储在单个数据库中，最能访问对应的数据库\n用户信息保存在db.system.users中\n\n**开启认证方法**\n- 启动添加： --auth\n- 配置文件：security.authorization: enabled\n\n**用户和权限的特性**\n1. 数据库是由超级用户来创建的，一个数据库可以包含多个用户，一个用户只能在一个数据库下，不同数据库中的用户可以同名\n2. 如果在 admin 数据库中不存在用户，即使 mongod 启动时添加了 –auth 参数，此时不进行任何认证还是可以做任何操作\n3. 在 admin 数据库创建的用户具有超级权限，可以对 MongoDB 系统内的任何数据库的数据对象进行操作\n4. 特定数据库比如 test1 下的用户 test_user1，不能够访问其他数据库 test2，但是可以访问本数据库下其他用户创建的数据\n5. 不同数据库中同名的用户不能够登录其他数据库。比如数据库 test1 和 test2 都有用户 test_user，以 test_user 登录 test1 后,不能够登录到 test2 进行数据库操作\n\n#### 授权命令\n```\nuse xxx;\t\t\t\t\t\t#进入某库，创建某库\ndb.createUser({user: \"ttxsgoto\",pwd:\"ttxsgoto\",roles:[{role:\"userAdminAnyDatabase\",db:\"admin\"}]})\ndb.createUser({user: \"ttxsgoto\",pwd:\"ttxsgoto\",roles:[{role:\"read\",db:\"test\"}]})\t        #读\ndb.createUser({user: \"ttxsgoto01\",pwd:\"ttxsgoto01\",roles:[{role:\"readWrite\",db:\"test\"}]})\t#读写\ndb.createUser({user: \"ttxsgoto02\",pwd:\"ttxsgoto02\",roles:[{role:\"root\",db:\"test\"}]})\t        #超级root权限\ndb.system.users.remove({user:\"ttxsgoto\"})\t#删除用户\ndb.changeUserPassword('ttxsgoto','test'); \t#修改密码的方法\n```\n**具体权限说明**\n```\nBuilt-In Roles（内置角色）：\n    1. 数据库用户角色：read、readWrite;\n    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；\n    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n    4. 备份恢复角色：backup、restore；\n    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n    6. 超级用户角色：root\n    7. 内部角色：__system\n\n具体角色：\nRead：允许用户读取指定数据库\nreadWrite：允许用户读写指定数据库\ndbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile\nuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户\nclusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。\nreadAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限\nreadWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限\nuserAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\ndbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。\nroot：只在admin数据库中可用。超级账号，超级权限\n```\n\n```\n# 在admin库中\ndb.createUser({user: \"ttxsgoto02\",pwd:\"ttxsgoto02\",roles:[{role:\"readWrite\",db:\"test01\"},{role:\"readWrite\",db:\"test02\"}]})\t#在admin库下创建test01，test02库的账号\n\n在这种情况下，不能直接在对应的库中登录验证，而应该在对应的这个库中进行认证后，在切换到其他库中\nuse admin\ndb.auth('ttxsgoto02','ttxsgoto02')\nuse test02；\n```\n#### 登录验证\n```\n方法一：\nmongo\nuse admin\ndb.auth(\"admin\",\"abc\")\n方法二：\nmongo -u admin -p admin --authenticationDatabase admin\n```\n### 日常使用\n#### 常用命令\n```\nmongo 127.0.0.1/admin -uadmin -p'admin'\t\t#连接mongo数据库\nuse admin;\t\t\t#进入数据库\nshow users;\t\t\t#查看当前库下的用户\nshow collections/tables;        #查看当前库中的collections\ndb.getCollectionNames();\t\t#得到当前db的所有集合\ndb.auth('ttxsgoto','ttxsgoto')\t#登录验证\ndb.getName()\t\t\t#查看当前使用的数据库\ndb.stats()\t\t\t#查看当前db状态\ndb.getMongo();\t\t\t#查看当前db连接机器的地址\ndb.abc.find();\t                #查看集合中的所有数据\ndb \t\t                #查看当前所在的数据库\ndb.system.users.find().pretty()\t#在admin库中查看所有账号\ndb.getMongo();\t\t\t#查看当前db连接机器的地址\ndb.repairDatabase()\t\t#修复当前数据库\ndb.getCollectionNames()\t\t#得到当前db的所有集合\ndb.printCollectionStats()\t#显示当前db所有聚集索引的状态\n```\n#### 增删改查\n```\n# 插入集合\ncontent={name:\"xxxx\",sex:\"m\"}\ndb.collections.insert(content)\ndb.createCollection(\"collName\", {size: 20, capped: 5, max: 100})\t#创建一个集合\ndb.getCollection(\"account\")\t\t#得到集合名称\n# 查询：\ndb.inventory.find();\ndb.foo.find()\t\t#对当前数据库中的foo集合进行数据查找，所有数据\ndb.foo.find({a:1})\t#对当前数据库中的foo集合中条件包含a=1的项进行查询\n# 删除：\ndb.dropDatabase()\t#删除当前使用的数据库\n```\n#### 备份相关\n```\nmongoimport(导入)/mongoexport(导出)：(将collection导出为json格式或csv格式)\nmongoexport -d test -c t1 -o t1.dat\t#导出json格式\n-c\t#指明导出的集合\n-d\t#使用库\nmongoexport -d test -c t1 -csv -f num -o t1.dat\t#导出csv格式\n-csv\t#指明导出csv格式\n-f\t#指明需要导出哪些列\nmongoimport -d test -c t1 -file t1.dat\t\t\t\t#还原\nmongoimport -d test -c t1 -type csv --headerline -file t1.dat\t#还原csv格式的数据\n--headerline\t#指明不导入第一行，因为第一行为列名\nmongodump/mongorestore:（整库备份还原,库级别操作,先执行查询动作然后把所有查询结果写入到硬盘中，但在内存中的数据未写入磁盘中）\nmongodump -h x.x.x.x  --port  27017 -uroot -p xxx  -d test -o /bak/mongodump\t#导出\nmongodump -h x.x.x.x  --port  27017 -uroot -p xxx\t-o /bak/allmongobak\t#导出所有\n-h ip\n--port port\n-u user\n-p password\n-d database\n-c collection\n-o outfile\nmongorestore -h IP  --port -u user -p password \t-d test  --drop\t/bak/mongodump/*\t#恢复\n--drop\t#恢复前先删除所有记录\n--noIndexRestore\t#不还原索引\n例子说明\n# 备份\nmongoexport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o collection.json\n\nmongodump -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o 1202.dat\n# 还原\nmongorestore -u root -p root --authenticationDatabase admin -d database_20161202 --noIndexRestore --drop 1202.dat/collection\nmongoimport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database_20161202 -c collection  --file  collection.json\n```\n**库表级备份还原的区别:**\nmongorestore和mongodump提供的是对mongo数据库的整个数据库的恢复和备份，而mongoimport和mongoexport则是提供更细粒度的collection级别的数据导入和导出。两者的粒度不同，mongoimport和mongoexport粒度更细，相对来说，更加灵活。其次，mongoimport和mongoexport只是将集合中的数据导出和导入，但是没有对数据库中的其它成分进行备份（比如索引），而mongorestore和mongodump则是对数据库中的所有成分（包括索引等其它）进行恢复和备份。然而，这也导致了mongorestore和mongodump导出的文件比较大耗时较长，而mongoimport和mongoexport导出的文件比较小，速度比较快，而且格式较为灵活。\n\n\n\n\n","slug":"mongo","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5wz003kct8updxmhu6v","content":"<h3 id=\"认证授权相关\"><a href=\"#认证授权相关\" class=\"headerlink\" title=\"认证授权相关\"></a>认证授权相关</h3><p>帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中</p>\n<p><strong>认证登录说明</strong><br>超级用户：拥有最大权限，存储在admin数据库中，<br>数据库用户：存储在单个数据库中，最能访问对应的数据库<br>用户信息保存在db.system.users中</p>\n<p><strong>开启认证方法</strong></p>\n<ul>\n<li>启动添加： –auth</li>\n<li>配置文件：security.authorization: enabled</li>\n</ul>\n<p><strong>用户和权限的特性</strong></p>\n<ol>\n<li>数据库是由超级用户来创建的，一个数据库可以包含多个用户，一个用户只能在一个数据库下，不同数据库中的用户可以同名</li>\n<li>如果在 admin 数据库中不存在用户，即使 mongod 启动时添加了 –auth 参数，此时不进行任何认证还是可以做任何操作</li>\n<li>在 admin 数据库创建的用户具有超级权限，可以对 MongoDB 系统内的任何数据库的数据对象进行操作</li>\n<li>特定数据库比如 test1 下的用户 test_user1，不能够访问其他数据库 test2，但是可以访问本数据库下其他用户创建的数据</li>\n<li>不同数据库中同名的用户不能够登录其他数据库。比如数据库 test1 和 test2 都有用户 test_user，以 test_user 登录 test1 后,不能够登录到 test2 进行数据库操作</li>\n</ol>\n<h4 id=\"授权命令\"><a href=\"#授权命令\" class=\"headerlink\" title=\"授权命令\"></a>授权命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">use xxx;\t\t\t\t\t\t#进入某库，创建某库</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;read&quot;,db:&quot;test&quot;&#125;]&#125;)\t        #读</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto01&quot;,pwd:&quot;ttxsgoto01&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test&quot;&#125;]&#125;)\t#读写</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;root&quot;,db:&quot;test&quot;&#125;]&#125;)\t        #超级root权限</div><div class=\"line\">db.system.users.remove(&#123;user:&quot;ttxsgoto&quot;&#125;)\t#删除用户</div><div class=\"line\">db.changeUserPassword(&apos;ttxsgoto&apos;,&apos;test&apos;); \t#修改密码的方法</div></pre></td></tr></table></figure>\n<p><strong>具体权限说明</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Built-In Roles（内置角色）：</div><div class=\"line\">    1. 数据库用户角色：read、readWrite;</div><div class=\"line\">    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；</div><div class=\"line\">    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</div><div class=\"line\">    4. 备份恢复角色：backup、restore；</div><div class=\"line\">    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</div><div class=\"line\">    6. 超级用户角色：root</div><div class=\"line\">    7. 内部角色：__system</div><div class=\"line\"></div><div class=\"line\">具体角色：</div><div class=\"line\">Read：允许用户读取指定数据库</div><div class=\"line\">readWrite：允许用户读写指定数据库</div><div class=\"line\">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</div><div class=\"line\">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</div><div class=\"line\">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</div><div class=\"line\">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</div><div class=\"line\">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</div><div class=\"line\">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</div><div class=\"line\">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</div><div class=\"line\">root：只在admin数据库中可用。超级账号，超级权限</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 在admin库中</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test01&quot;&#125;,&#123;role:&quot;readWrite&quot;,db:&quot;test02&quot;&#125;]&#125;)\t#在admin库下创建test01，test02库的账号</div><div class=\"line\"></div><div class=\"line\">在这种情况下，不能直接在对应的库中登录验证，而应该在对应的这个库中进行认证后，在切换到其他库中</div><div class=\"line\">use admin</div><div class=\"line\">db.auth(&apos;ttxsgoto02&apos;,&apos;ttxsgoto02&apos;)</div><div class=\"line\">use test02；</div></pre></td></tr></table></figure>\n<h4 id=\"登录验证\"><a href=\"#登录验证\" class=\"headerlink\" title=\"登录验证\"></a>登录验证</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法一：</div><div class=\"line\">mongo</div><div class=\"line\">use admin</div><div class=\"line\">db.auth(&quot;admin&quot;,&quot;abc&quot;)</div><div class=\"line\">方法二：</div><div class=\"line\">mongo -u admin -p admin --authenticationDatabase admin</div></pre></td></tr></table></figure>\n<h3 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h3><h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo 127.0.0.1/admin -uadmin -p&apos;admin&apos;\t\t#连接mongo数据库</div><div class=\"line\">use admin;\t\t\t#进入数据库</div><div class=\"line\">show users;\t\t\t#查看当前库下的用户</div><div class=\"line\">show collections/tables;        #查看当前库中的collections</div><div class=\"line\">db.getCollectionNames();\t\t#得到当前db的所有集合</div><div class=\"line\">db.auth(&apos;ttxsgoto&apos;,&apos;ttxsgoto&apos;)\t#登录验证</div><div class=\"line\">db.getName()\t\t\t#查看当前使用的数据库</div><div class=\"line\">db.stats()\t\t\t#查看当前db状态</div><div class=\"line\">db.getMongo();\t\t\t#查看当前db连接机器的地址</div><div class=\"line\">db.abc.find();\t                #查看集合中的所有数据</div><div class=\"line\">db \t\t                #查看当前所在的数据库</div><div class=\"line\">db.system.users.find().pretty()\t#在admin库中查看所有账号</div><div class=\"line\">db.getMongo();\t\t\t#查看当前db连接机器的地址</div><div class=\"line\">db.repairDatabase()\t\t#修复当前数据库</div><div class=\"line\">db.getCollectionNames()\t\t#得到当前db的所有集合</div><div class=\"line\">db.printCollectionStats()\t#显示当前db所有聚集索引的状态</div></pre></td></tr></table></figure>\n<h4 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 插入集合</div><div class=\"line\">content=&#123;name:&quot;xxxx&quot;,sex:&quot;m&quot;&#125;</div><div class=\"line\">db.collections.insert(content)</div><div class=\"line\">db.createCollection(&quot;collName&quot;, &#123;size: 20, capped: 5, max: 100&#125;)\t#创建一个集合</div><div class=\"line\">db.getCollection(&quot;account&quot;)\t\t#得到集合名称</div><div class=\"line\"># 查询：</div><div class=\"line\">db.inventory.find();</div><div class=\"line\">db.foo.find()\t\t#对当前数据库中的foo集合进行数据查找，所有数据</div><div class=\"line\">db.foo.find(&#123;a:1&#125;)\t#对当前数据库中的foo集合中条件包含a=1的项进行查询</div><div class=\"line\"># 删除：</div><div class=\"line\">db.dropDatabase()\t#删除当前使用的数据库</div></pre></td></tr></table></figure>\n<h4 id=\"备份相关\"><a href=\"#备份相关\" class=\"headerlink\" title=\"备份相关\"></a>备份相关</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoimport(导入)/mongoexport(导出)：(将collection导出为json格式或csv格式)</div><div class=\"line\">mongoexport -d test -c t1 -o t1.dat\t#导出json格式</div><div class=\"line\">-c\t#指明导出的集合</div><div class=\"line\">-d\t#使用库</div><div class=\"line\">mongoexport -d test -c t1 -csv -f num -o t1.dat\t#导出csv格式</div><div class=\"line\">-csv\t#指明导出csv格式</div><div class=\"line\">-f\t#指明需要导出哪些列</div><div class=\"line\">mongoimport -d test -c t1 -file t1.dat\t\t\t\t#还原</div><div class=\"line\">mongoimport -d test -c t1 -type csv --headerline -file t1.dat\t#还原csv格式的数据</div><div class=\"line\">--headerline\t#指明不导入第一行，因为第一行为列名</div><div class=\"line\">mongodump/mongorestore:（整库备份还原,库级别操作,先执行查询动作然后把所有查询结果写入到硬盘中，但在内存中的数据未写入磁盘中）</div><div class=\"line\">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx  -d test -o /bak/mongodump\t#导出</div><div class=\"line\">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx\t-o /bak/allmongobak\t#导出所有</div><div class=\"line\">-h ip</div><div class=\"line\">--port port</div><div class=\"line\">-u user</div><div class=\"line\">-p password</div><div class=\"line\">-d database</div><div class=\"line\">-c collection</div><div class=\"line\">-o outfile</div><div class=\"line\">mongorestore -h IP  --port -u user -p password \t-d test  --drop\t/bak/mongodump/*\t#恢复</div><div class=\"line\">--drop\t#恢复前先删除所有记录</div><div class=\"line\">--noIndexRestore\t#不还原索引</div><div class=\"line\">例子说明</div><div class=\"line\"># 备份</div><div class=\"line\">mongoexport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o collection.json</div><div class=\"line\"></div><div class=\"line\">mongodump -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o 1202.dat</div><div class=\"line\"># 还原</div><div class=\"line\">mongorestore -u root -p root --authenticationDatabase admin -d database_20161202 --noIndexRestore --drop 1202.dat/collection</div><div class=\"line\">mongoimport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database_20161202 -c collection  --file  collection.json</div></pre></td></tr></table></figure>\n<p><strong>库表级备份还原的区别:</strong><br>mongorestore和mongodump提供的是对mongo数据库的整个数据库的恢复和备份，而mongoimport和mongoexport则是提供更细粒度的collection级别的数据导入和导出。两者的粒度不同，mongoimport和mongoexport粒度更细，相对来说，更加灵活。其次，mongoimport和mongoexport只是将集合中的数据导出和导入，但是没有对数据库中的其它成分进行备份（比如索引），而mongorestore和mongodump则是对数据库中的所有成分（包括索引等其它）进行恢复和备份。然而，这也导致了mongorestore和mongodump导出的文件比较大耗时较长，而mongoimport和mongoexport导出的文件比较小，速度比较快，而且格式较为灵活。</p>\n","excerpt":"","more":"<h3 id=\"认证授权相关\"><a href=\"#认证授权相关\" class=\"headerlink\" title=\"认证授权相关\"></a>认证授权相关</h3><p>帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)，然后在切换到对应的库中</p>\n<p><strong>认证登录说明</strong><br>超级用户：拥有最大权限，存储在admin数据库中，<br>数据库用户：存储在单个数据库中，最能访问对应的数据库<br>用户信息保存在db.system.users中</p>\n<p><strong>开启认证方法</strong></p>\n<ul>\n<li>启动添加： –auth</li>\n<li>配置文件：security.authorization: enabled</li>\n</ul>\n<p><strong>用户和权限的特性</strong></p>\n<ol>\n<li>数据库是由超级用户来创建的，一个数据库可以包含多个用户，一个用户只能在一个数据库下，不同数据库中的用户可以同名</li>\n<li>如果在 admin 数据库中不存在用户，即使 mongod 启动时添加了 –auth 参数，此时不进行任何认证还是可以做任何操作</li>\n<li>在 admin 数据库创建的用户具有超级权限，可以对 MongoDB 系统内的任何数据库的数据对象进行操作</li>\n<li>特定数据库比如 test1 下的用户 test_user1，不能够访问其他数据库 test2，但是可以访问本数据库下其他用户创建的数据</li>\n<li>不同数据库中同名的用户不能够登录其他数据库。比如数据库 test1 和 test2 都有用户 test_user，以 test_user 登录 test1 后,不能够登录到 test2 进行数据库操作</li>\n</ol>\n<h4 id=\"授权命令\"><a href=\"#授权命令\" class=\"headerlink\" title=\"授权命令\"></a>授权命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">use xxx;\t\t\t\t\t\t#进入某库，创建某库</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto&quot;,pwd:&quot;ttxsgoto&quot;,roles:[&#123;role:&quot;read&quot;,db:&quot;test&quot;&#125;]&#125;)\t        #读</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto01&quot;,pwd:&quot;ttxsgoto01&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test&quot;&#125;]&#125;)\t#读写</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;root&quot;,db:&quot;test&quot;&#125;]&#125;)\t        #超级root权限</div><div class=\"line\">db.system.users.remove(&#123;user:&quot;ttxsgoto&quot;&#125;)\t#删除用户</div><div class=\"line\">db.changeUserPassword(&apos;ttxsgoto&apos;,&apos;test&apos;); \t#修改密码的方法</div></pre></td></tr></table></figure>\n<p><strong>具体权限说明</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Built-In Roles（内置角色）：</div><div class=\"line\">    1. 数据库用户角色：read、readWrite;</div><div class=\"line\">    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；</div><div class=\"line\">    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</div><div class=\"line\">    4. 备份恢复角色：backup、restore；</div><div class=\"line\">    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</div><div class=\"line\">    6. 超级用户角色：root</div><div class=\"line\">    7. 内部角色：__system</div><div class=\"line\"></div><div class=\"line\">具体角色：</div><div class=\"line\">Read：允许用户读取指定数据库</div><div class=\"line\">readWrite：允许用户读写指定数据库</div><div class=\"line\">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</div><div class=\"line\">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</div><div class=\"line\">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</div><div class=\"line\">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</div><div class=\"line\">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</div><div class=\"line\">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</div><div class=\"line\">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</div><div class=\"line\">root：只在admin数据库中可用。超级账号，超级权限</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 在admin库中</div><div class=\"line\">db.createUser(&#123;user: &quot;ttxsgoto02&quot;,pwd:&quot;ttxsgoto02&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;test01&quot;&#125;,&#123;role:&quot;readWrite&quot;,db:&quot;test02&quot;&#125;]&#125;)\t#在admin库下创建test01，test02库的账号</div><div class=\"line\"></div><div class=\"line\">在这种情况下，不能直接在对应的库中登录验证，而应该在对应的这个库中进行认证后，在切换到其他库中</div><div class=\"line\">use admin</div><div class=\"line\">db.auth(&apos;ttxsgoto02&apos;,&apos;ttxsgoto02&apos;)</div><div class=\"line\">use test02；</div></pre></td></tr></table></figure>\n<h4 id=\"登录验证\"><a href=\"#登录验证\" class=\"headerlink\" title=\"登录验证\"></a>登录验证</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法一：</div><div class=\"line\">mongo</div><div class=\"line\">use admin</div><div class=\"line\">db.auth(&quot;admin&quot;,&quot;abc&quot;)</div><div class=\"line\">方法二：</div><div class=\"line\">mongo -u admin -p admin --authenticationDatabase admin</div></pre></td></tr></table></figure>\n<h3 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h3><h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo 127.0.0.1/admin -uadmin -p&apos;admin&apos;\t\t#连接mongo数据库</div><div class=\"line\">use admin;\t\t\t#进入数据库</div><div class=\"line\">show users;\t\t\t#查看当前库下的用户</div><div class=\"line\">show collections/tables;        #查看当前库中的collections</div><div class=\"line\">db.getCollectionNames();\t\t#得到当前db的所有集合</div><div class=\"line\">db.auth(&apos;ttxsgoto&apos;,&apos;ttxsgoto&apos;)\t#登录验证</div><div class=\"line\">db.getName()\t\t\t#查看当前使用的数据库</div><div class=\"line\">db.stats()\t\t\t#查看当前db状态</div><div class=\"line\">db.getMongo();\t\t\t#查看当前db连接机器的地址</div><div class=\"line\">db.abc.find();\t                #查看集合中的所有数据</div><div class=\"line\">db \t\t                #查看当前所在的数据库</div><div class=\"line\">db.system.users.find().pretty()\t#在admin库中查看所有账号</div><div class=\"line\">db.getMongo();\t\t\t#查看当前db连接机器的地址</div><div class=\"line\">db.repairDatabase()\t\t#修复当前数据库</div><div class=\"line\">db.getCollectionNames()\t\t#得到当前db的所有集合</div><div class=\"line\">db.printCollectionStats()\t#显示当前db所有聚集索引的状态</div></pre></td></tr></table></figure>\n<h4 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 插入集合</div><div class=\"line\">content=&#123;name:&quot;xxxx&quot;,sex:&quot;m&quot;&#125;</div><div class=\"line\">db.collections.insert(content)</div><div class=\"line\">db.createCollection(&quot;collName&quot;, &#123;size: 20, capped: 5, max: 100&#125;)\t#创建一个集合</div><div class=\"line\">db.getCollection(&quot;account&quot;)\t\t#得到集合名称</div><div class=\"line\"># 查询：</div><div class=\"line\">db.inventory.find();</div><div class=\"line\">db.foo.find()\t\t#对当前数据库中的foo集合进行数据查找，所有数据</div><div class=\"line\">db.foo.find(&#123;a:1&#125;)\t#对当前数据库中的foo集合中条件包含a=1的项进行查询</div><div class=\"line\"># 删除：</div><div class=\"line\">db.dropDatabase()\t#删除当前使用的数据库</div></pre></td></tr></table></figure>\n<h4 id=\"备份相关\"><a href=\"#备份相关\" class=\"headerlink\" title=\"备份相关\"></a>备份相关</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoimport(导入)/mongoexport(导出)：(将collection导出为json格式或csv格式)</div><div class=\"line\">mongoexport -d test -c t1 -o t1.dat\t#导出json格式</div><div class=\"line\">-c\t#指明导出的集合</div><div class=\"line\">-d\t#使用库</div><div class=\"line\">mongoexport -d test -c t1 -csv -f num -o t1.dat\t#导出csv格式</div><div class=\"line\">-csv\t#指明导出csv格式</div><div class=\"line\">-f\t#指明需要导出哪些列</div><div class=\"line\">mongoimport -d test -c t1 -file t1.dat\t\t\t\t#还原</div><div class=\"line\">mongoimport -d test -c t1 -type csv --headerline -file t1.dat\t#还原csv格式的数据</div><div class=\"line\">--headerline\t#指明不导入第一行，因为第一行为列名</div><div class=\"line\">mongodump/mongorestore:（整库备份还原,库级别操作,先执行查询动作然后把所有查询结果写入到硬盘中，但在内存中的数据未写入磁盘中）</div><div class=\"line\">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx  -d test -o /bak/mongodump\t#导出</div><div class=\"line\">mongodump -h x.x.x.x  --port  27017 -uroot -p xxx\t-o /bak/allmongobak\t#导出所有</div><div class=\"line\">-h ip</div><div class=\"line\">--port port</div><div class=\"line\">-u user</div><div class=\"line\">-p password</div><div class=\"line\">-d database</div><div class=\"line\">-c collection</div><div class=\"line\">-o outfile</div><div class=\"line\">mongorestore -h IP  --port -u user -p password \t-d test  --drop\t/bak/mongodump/*\t#恢复</div><div class=\"line\">--drop\t#恢复前先删除所有记录</div><div class=\"line\">--noIndexRestore\t#不还原索引</div><div class=\"line\">例子说明</div><div class=\"line\"># 备份</div><div class=\"line\">mongoexport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o collection.json</div><div class=\"line\"></div><div class=\"line\">mongodump -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database -c collection -o 1202.dat</div><div class=\"line\"># 还原</div><div class=\"line\">mongorestore -u root -p root --authenticationDatabase admin -d database_20161202 --noIndexRestore --drop 1202.dat/collection</div><div class=\"line\">mongoimport -u root -p root --host=127.0.0.1:27017 --authenticationDatabase admin -d database_20161202 -c collection  --file  collection.json</div></pre></td></tr></table></figure>\n<p><strong>库表级备份还原的区别:</strong><br>mongorestore和mongodump提供的是对mongo数据库的整个数据库的恢复和备份，而mongoimport和mongoexport则是提供更细粒度的collection级别的数据导入和导出。两者的粒度不同，mongoimport和mongoexport粒度更细，相对来说，更加灵活。其次，mongoimport和mongoexport只是将集合中的数据导出和导入，但是没有对数据库中的其它成分进行备份（比如索引），而mongorestore和mongodump则是对数据库中的所有成分（包括索引等其它）进行恢复和备份。然而，这也导致了mongorestore和mongodump导出的文件比较大耗时较长，而mongoimport和mongoexport导出的文件比较小，速度比较快，而且格式较为灵活。</p>\n"},{"title":"Mysql必知必会笔记","date":"2018-09-16T11:02:58.000Z","_content":"\n最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：\n\n其中使用的数据库结构和数据为http://forta.com/books/0672327120/ 中的SQL脚本\n#### 计算次序\n```\nSELECT * FROM products WHERE vend_id=1002 or vend_id =1003;\nSELECT * FROM products WHERE (vend_id=1002 or vend_id=1003) AND prod_price >=10;\nSELECT * FROM products WHERE vend_id not in (1002, 1003) ORDER BY prod_name;\nSELECT * FROM products ;\nSELECT * FROM products WHERE prod_name like '_ ton anv%';\t# _ 只匹配单个字符而不是多个字符\n```\n#### 正则表达式\n```\nSELECT * FROM products ;\nSELECT * FROM products WHERE prod_name REGEXP '.000' ORDER BY prod_name;\t# 匹配任意一个字符\nSELECT * FROM products WHERE prod_name regexp '1000|2000';\nSELECT * FROM products WHERE prod_name regexp '[123] ton';\n```\n#### 创建计算字段\n拼接： 将值联结到一起构成单个值， 使用Concat()函数来来拼接两个列, 函数中为多个字符串\n```\nSELECT CONCAT(vend_name, ' (', vend_country, ') ') AS vend_title FROM vendors order by vend_name;\n```\n执行算术计算\n```\nSELECT prod_id, quantity, item_price, quantity*item_price as total_price FROM orderitems WHERE order_num=20005;\n```\n\n#### 使用数据处理函数\n```\n日期和时间处理函数\nADDDATE(expr,days)\t添加一个日期(天，周等)\nADDTIME(expr1,expr2)\t添加一个时间(时，分等)\nCURDATE()\t返回当前日期\nCURTIME()\t返回当前时间\nDATE(expr)\t返回日期时间的日期部分\nDATEDIFF(expr1,expr2)\t计算两个日期之差\nDATE_ADD(date,INTERVAL expr unit)\t高度灵活的日期运算函数\nDATE_FORMAT(date,format)\t返回一个格式化的日期或时间串\nDAY(date)\t返回一个日期的天数部分\nDAYOFWEEK(date)\t对于一个日期，返回对应的星期几\nHOUR(time)\t返回一个时间的小时部分\nMINUTE(time)\t返回一个时间的分钟部分\nMONTH(date)\t返回一个日期的月份部分\nNOW()\t\t返回当前日期和时间\nSECOND(time)\t返回一个时间的秒部分\nTIME(expr)\t返回一个日期时间的时间部分\nYEAR()\t\t返回一个日期的年份部分\n \n数值处理函数\nABS(X)\t返回一个数的绝对值\nCOS(X)\t返回一个角度的余弦\nEXP(X)\t返回一个数的指数值\nMOD(N,M)\t返回除操作的余数\nPI()\t返回圆周率\nRAND()\t返回一个随机数\nSIN(X)\t返回一个角度的正弦\nSQRT(X)\t返回一个数的平方根\nTAN(X)\t返回一个角度的正切\n \nSELECT * FROM orders;\nSELECT * from orders WHERE DATE(order_date) = '2005-09-01';\nSELECT * FROM orders WHERE DATE(order_date) BETWEEN '2005-09-01' and '2005-10-01';\nSELECT * from orders where YEAR(order_date)=2005 and MONTH(order_date) = 10;\n```\n\n#### 汇总数据\n\n- 聚合函数\n    运行在行组上，计算和返回单个值的函数\n\n```\nAVG([DISTINCT] expr)\t返回某列的平均值\nCOUNT(expr)\t返回某列的行数\nMAX(expr)\t返回某列的最大值\nMIN(expr)\t返回某列的最小值\nSUM(expr)\t返回某列值之和\n \n \nSELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id=1003;\nSELECT COUNT(*) FROM customers;\nSELECT COUNT(cust_email) FROM customers;\nSELECT SUM(item_price* quantity) FROM orderitems WHERE order_num=20005;\n-- 集合不同值 DISTINCT\nSELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id=1003;\nSELECT COUNT(*) AS num_items, MIN(prod_price), MAX(prod_price), AVG(prod_price) FROM products;\n```\n#### 分组数据\n- 分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算\n- WHERE 过滤行， HAVING 过滤分组\n- WHERE 在数据分组前进行过滤，having在数据分组后进行过滤\n- GROUP BY子句可以包含任何数目的列\n- 如果在group by子句中嵌套了分组， 数据将在最后规定的分组上进行汇总\n- GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(单不能是聚集函数)\n- SELECT 语句中的每个列都必须在group by 子句中给出\n- 如果分组列中具有null值，则null将作为一个分组返回，如果列中有多行null值，它们将分为一组\n- GROUP BY 子句必须出现在where子句之后，order by子句之前\n- 使用 with rollup关键字， 可以得到每个分组汇总的值\n\n```\nSELECT * FROM orders;\nSELECT vend_id, COUNT(*) as num FROM products GROUP BY vend_id WITH ROLLUP;\nSELECT cust_id,COUNT(*) as order_count FROM orders GROUP BY cust_id HAVING order_count >= 2;\nSELECT * FROM products;\nSELECT vend_id,COUNT(*) FROM products WHERE prod_price >=10 GROUP BY vend_id HAVING COUNT(*) >=2;\n```\n\nSELECT子句及其顺序\n\n子句 | 说明|是否必须使用|\n---|---|---|\nSELECT | 要返回的列或表达式| 是\nFROM | 从中检索数据的表| 仅在从表选择数据时使用\nWHERE| 行级过滤| 否\nGROUP BY| 分组说明| 仅在按组计算聚集时使用\nHAVING| 组级过滤| 否\nORDER BY| 输出排序顺序| 否\nLIMIT| 要检索的行数| 否\n\n```\nSELECT order_num, SUM(quantity*item_price) AS total  FROM orderitems GROUP BY order_num HAVING total >=50 ORDER BY total;\n```\n\n#### 使用子查询\n子查询：嵌套在其他查询中的查询\n子查询进行过滤\n```\nSELECT * FROM orderitems WHERE prod_id='TNT2';\nSELECT * FROM orders WHERE order_num in (20005, 20007);\nSELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id='TNT2');\nSELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id='TNT2'));\n```\n计算字段使用子查询\n\n```\nSELECT COUNT(*) AS orders FROM orders WHERE cust_id=10001;\n\nSELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_name;\n```\n#### 联结表查询\n- 内部联结： 基于两个表之间的相等测试\n\n```\nSELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;\nSELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id AND orderitems.prod_id = products.prod_id AND order_num=20005;\nSELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num AND prod_id = 'TNT2';\n```\n#### 组合查询\n利用union操作符将多条select组合成一个结果集\n使用场景：\n    \n    - 在单个查询中从不同的表返回类似结构的数据\n    - 对单个表执行多个查询，按单个查询返回数据\n 规则：\n \n - SELECT 语句之间使用UNION关键字连接\n - UNION每个查询必须包含相同的列、表达式或者聚集函数\n - 列数据类型必须兼容，类型不必完全相同，但必须是DBMS可以隐含地转换类型\n - UNION 从查询结果中自动去除了重复的行，如果需要返回所有匹配行，可以使用UNION ALL来展示\n - UNION 只能使用一条ORDER BY 子句，必须出现在最后一条SELECT语句之后,作用于所有SELECT语句返回的结果\n \n```\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price<=5;\nSELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price <=5 UNION ALL SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002);\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price<=5 OR vend_id IN (1001, 1002);\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price<=5 UNION SELECT  vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002) ORDER BY vend_id,prod_price; \n```\n\n#### 全文本搜索\n- MyISAM引擎支持全文本搜索，InnoDB不支持\n- MATCH()指定被搜索的列\n- Against()指定要使用的搜索表达式\n\n```\nSELECT * FROM productnotes WHERE MATCH(note_text) Against('rabbit');\nSELECT * FROM productnotes WHERE note_text like \"%rabbit%\";\nSELECT * FROM productnotes WHERE MATCH(note_text) Against('anvils');\n```\n\n#### 视图\n视图是虚拟的表， 视图只包含使用时动态检索数据的查询\n\n视图功能\n    \n    - 重用sql语句\n    - 简化复杂的sql操作\n    - 使用表的组成部分而不是整个表\n    - 保护数据\n    - 更改数据格式和表示 \n基本语句\n    \n    - 创建使用 CREATE VIEW\n    - 查看创建视图的语句 SHOW CREATE VIEW viewname\n    - 删除视图， DROP VIEW viewname\n```\nSELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND \norderitems.order_num = orders.order_num AND prod_id=\"TNT2\";\n-- 创建视图\nCREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id=orders.cust_id AND\norderitems.order_num = orders.order_num;\nSELECT cust_name, cust_contact FROM productcustomers;\nSELECT cust_name, cust_contact FROM productcustomers WHERE prod_id='TNT2';\n-- 重新格式化检索出的数据\nCREATE VIEW vendorlocations AS SELECT CONCAT(RTRIM(vend_name), '(', RTRIM(vend_country), ')') AS vend_title FROM vendors ORDER BY vend_name;\nSELECT * FROM vendorlocations;\n-- 视图过滤不想要的数据\nCREATE VIEW customeremiallist AS SELECT * FROM customers WHERE cust_email IS NOT NULL;\nSELECT * FROM customeremiallist;\n-- 使用视图与计算字段\nCREATE VIEW orderitemsexpanded AS SELECT order_num, prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems;\nSELECT * FROM orderitemsexpanded WHERE order_num=20005;\n-- 查看视图\nSHOW CREATE VIEW orderitemsexpanded;\n```\n","source":"_posts/mysql-queryset.md","raw":"---\ntitle: Mysql必知必会笔记\ndate: 2018-09-16 19:02:58\ntags:\n  - Mysql\ncategories:\n  - Mysql\n---\n\n最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：\n\n其中使用的数据库结构和数据为http://forta.com/books/0672327120/ 中的SQL脚本\n#### 计算次序\n```\nSELECT * FROM products WHERE vend_id=1002 or vend_id =1003;\nSELECT * FROM products WHERE (vend_id=1002 or vend_id=1003) AND prod_price >=10;\nSELECT * FROM products WHERE vend_id not in (1002, 1003) ORDER BY prod_name;\nSELECT * FROM products ;\nSELECT * FROM products WHERE prod_name like '_ ton anv%';\t# _ 只匹配单个字符而不是多个字符\n```\n#### 正则表达式\n```\nSELECT * FROM products ;\nSELECT * FROM products WHERE prod_name REGEXP '.000' ORDER BY prod_name;\t# 匹配任意一个字符\nSELECT * FROM products WHERE prod_name regexp '1000|2000';\nSELECT * FROM products WHERE prod_name regexp '[123] ton';\n```\n#### 创建计算字段\n拼接： 将值联结到一起构成单个值， 使用Concat()函数来来拼接两个列, 函数中为多个字符串\n```\nSELECT CONCAT(vend_name, ' (', vend_country, ') ') AS vend_title FROM vendors order by vend_name;\n```\n执行算术计算\n```\nSELECT prod_id, quantity, item_price, quantity*item_price as total_price FROM orderitems WHERE order_num=20005;\n```\n\n#### 使用数据处理函数\n```\n日期和时间处理函数\nADDDATE(expr,days)\t添加一个日期(天，周等)\nADDTIME(expr1,expr2)\t添加一个时间(时，分等)\nCURDATE()\t返回当前日期\nCURTIME()\t返回当前时间\nDATE(expr)\t返回日期时间的日期部分\nDATEDIFF(expr1,expr2)\t计算两个日期之差\nDATE_ADD(date,INTERVAL expr unit)\t高度灵活的日期运算函数\nDATE_FORMAT(date,format)\t返回一个格式化的日期或时间串\nDAY(date)\t返回一个日期的天数部分\nDAYOFWEEK(date)\t对于一个日期，返回对应的星期几\nHOUR(time)\t返回一个时间的小时部分\nMINUTE(time)\t返回一个时间的分钟部分\nMONTH(date)\t返回一个日期的月份部分\nNOW()\t\t返回当前日期和时间\nSECOND(time)\t返回一个时间的秒部分\nTIME(expr)\t返回一个日期时间的时间部分\nYEAR()\t\t返回一个日期的年份部分\n \n数值处理函数\nABS(X)\t返回一个数的绝对值\nCOS(X)\t返回一个角度的余弦\nEXP(X)\t返回一个数的指数值\nMOD(N,M)\t返回除操作的余数\nPI()\t返回圆周率\nRAND()\t返回一个随机数\nSIN(X)\t返回一个角度的正弦\nSQRT(X)\t返回一个数的平方根\nTAN(X)\t返回一个角度的正切\n \nSELECT * FROM orders;\nSELECT * from orders WHERE DATE(order_date) = '2005-09-01';\nSELECT * FROM orders WHERE DATE(order_date) BETWEEN '2005-09-01' and '2005-10-01';\nSELECT * from orders where YEAR(order_date)=2005 and MONTH(order_date) = 10;\n```\n\n#### 汇总数据\n\n- 聚合函数\n    运行在行组上，计算和返回单个值的函数\n\n```\nAVG([DISTINCT] expr)\t返回某列的平均值\nCOUNT(expr)\t返回某列的行数\nMAX(expr)\t返回某列的最大值\nMIN(expr)\t返回某列的最小值\nSUM(expr)\t返回某列值之和\n \n \nSELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id=1003;\nSELECT COUNT(*) FROM customers;\nSELECT COUNT(cust_email) FROM customers;\nSELECT SUM(item_price* quantity) FROM orderitems WHERE order_num=20005;\n-- 集合不同值 DISTINCT\nSELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id=1003;\nSELECT COUNT(*) AS num_items, MIN(prod_price), MAX(prod_price), AVG(prod_price) FROM products;\n```\n#### 分组数据\n- 分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算\n- WHERE 过滤行， HAVING 过滤分组\n- WHERE 在数据分组前进行过滤，having在数据分组后进行过滤\n- GROUP BY子句可以包含任何数目的列\n- 如果在group by子句中嵌套了分组， 数据将在最后规定的分组上进行汇总\n- GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(单不能是聚集函数)\n- SELECT 语句中的每个列都必须在group by 子句中给出\n- 如果分组列中具有null值，则null将作为一个分组返回，如果列中有多行null值，它们将分为一组\n- GROUP BY 子句必须出现在where子句之后，order by子句之前\n- 使用 with rollup关键字， 可以得到每个分组汇总的值\n\n```\nSELECT * FROM orders;\nSELECT vend_id, COUNT(*) as num FROM products GROUP BY vend_id WITH ROLLUP;\nSELECT cust_id,COUNT(*) as order_count FROM orders GROUP BY cust_id HAVING order_count >= 2;\nSELECT * FROM products;\nSELECT vend_id,COUNT(*) FROM products WHERE prod_price >=10 GROUP BY vend_id HAVING COUNT(*) >=2;\n```\n\nSELECT子句及其顺序\n\n子句 | 说明|是否必须使用|\n---|---|---|\nSELECT | 要返回的列或表达式| 是\nFROM | 从中检索数据的表| 仅在从表选择数据时使用\nWHERE| 行级过滤| 否\nGROUP BY| 分组说明| 仅在按组计算聚集时使用\nHAVING| 组级过滤| 否\nORDER BY| 输出排序顺序| 否\nLIMIT| 要检索的行数| 否\n\n```\nSELECT order_num, SUM(quantity*item_price) AS total  FROM orderitems GROUP BY order_num HAVING total >=50 ORDER BY total;\n```\n\n#### 使用子查询\n子查询：嵌套在其他查询中的查询\n子查询进行过滤\n```\nSELECT * FROM orderitems WHERE prod_id='TNT2';\nSELECT * FROM orders WHERE order_num in (20005, 20007);\nSELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id='TNT2');\nSELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id='TNT2'));\n```\n计算字段使用子查询\n\n```\nSELECT COUNT(*) AS orders FROM orders WHERE cust_id=10001;\n\nSELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_name;\n```\n#### 联结表查询\n- 内部联结： 基于两个表之间的相等测试\n\n```\nSELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;\nSELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id AND orderitems.prod_id = products.prod_id AND order_num=20005;\nSELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num AND prod_id = 'TNT2';\n```\n#### 组合查询\n利用union操作符将多条select组合成一个结果集\n使用场景：\n    \n    - 在单个查询中从不同的表返回类似结构的数据\n    - 对单个表执行多个查询，按单个查询返回数据\n 规则：\n \n - SELECT 语句之间使用UNION关键字连接\n - UNION每个查询必须包含相同的列、表达式或者聚集函数\n - 列数据类型必须兼容，类型不必完全相同，但必须是DBMS可以隐含地转换类型\n - UNION 从查询结果中自动去除了重复的行，如果需要返回所有匹配行，可以使用UNION ALL来展示\n - UNION 只能使用一条ORDER BY 子句，必须出现在最后一条SELECT语句之后,作用于所有SELECT语句返回的结果\n \n```\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price<=5;\nSELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price <=5 UNION ALL SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002);\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price<=5 OR vend_id IN (1001, 1002);\nSELECT vend_id, prod_id, prod_price FROM products WHERE prod_price<=5 UNION SELECT  vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002) ORDER BY vend_id,prod_price; \n```\n\n#### 全文本搜索\n- MyISAM引擎支持全文本搜索，InnoDB不支持\n- MATCH()指定被搜索的列\n- Against()指定要使用的搜索表达式\n\n```\nSELECT * FROM productnotes WHERE MATCH(note_text) Against('rabbit');\nSELECT * FROM productnotes WHERE note_text like \"%rabbit%\";\nSELECT * FROM productnotes WHERE MATCH(note_text) Against('anvils');\n```\n\n#### 视图\n视图是虚拟的表， 视图只包含使用时动态检索数据的查询\n\n视图功能\n    \n    - 重用sql语句\n    - 简化复杂的sql操作\n    - 使用表的组成部分而不是整个表\n    - 保护数据\n    - 更改数据格式和表示 \n基本语句\n    \n    - 创建使用 CREATE VIEW\n    - 查看创建视图的语句 SHOW CREATE VIEW viewname\n    - 删除视图， DROP VIEW viewname\n```\nSELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND \norderitems.order_num = orders.order_num AND prod_id=\"TNT2\";\n-- 创建视图\nCREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id=orders.cust_id AND\norderitems.order_num = orders.order_num;\nSELECT cust_name, cust_contact FROM productcustomers;\nSELECT cust_name, cust_contact FROM productcustomers WHERE prod_id='TNT2';\n-- 重新格式化检索出的数据\nCREATE VIEW vendorlocations AS SELECT CONCAT(RTRIM(vend_name), '(', RTRIM(vend_country), ')') AS vend_title FROM vendors ORDER BY vend_name;\nSELECT * FROM vendorlocations;\n-- 视图过滤不想要的数据\nCREATE VIEW customeremiallist AS SELECT * FROM customers WHERE cust_email IS NOT NULL;\nSELECT * FROM customeremiallist;\n-- 使用视图与计算字段\nCREATE VIEW orderitemsexpanded AS SELECT order_num, prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems;\nSELECT * FROM orderitemsexpanded WHERE order_num=20005;\n-- 查看视图\nSHOW CREATE VIEW orderitemsexpanded;\n```\n","slug":"mysql-queryset","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5x2003nct8uph6rbjlq","content":"<p>最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：</p>\n<p>其中使用的数据库结构和数据为<a href=\"http://forta.com/books/0672327120/\" target=\"_blank\" rel=\"external\">http://forta.com/books/0672327120/</a> 中的SQL脚本</p>\n<h4 id=\"计算次序\"><a href=\"#计算次序\" class=\"headerlink\" title=\"计算次序\"></a>计算次序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM products WHERE vend_id=1002 or vend_id =1003;</div><div class=\"line\">SELECT * FROM products WHERE (vend_id=1002 or vend_id=1003) AND prod_price &gt;=10;</div><div class=\"line\">SELECT * FROM products WHERE vend_id not in (1002, 1003) ORDER BY prod_name;</div><div class=\"line\">SELECT * FROM products ;</div><div class=\"line\">SELECT * FROM products WHERE prod_name like &apos;_ ton anv%&apos;;\t# _ 只匹配单个字符而不是多个字符</div></pre></td></tr></table></figure>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM products ;</div><div class=\"line\">SELECT * FROM products WHERE prod_name REGEXP &apos;.000&apos; ORDER BY prod_name;\t# 匹配任意一个字符</div><div class=\"line\">SELECT * FROM products WHERE prod_name regexp &apos;1000|2000&apos;;</div><div class=\"line\">SELECT * FROM products WHERE prod_name regexp &apos;[123] ton&apos;;</div></pre></td></tr></table></figure>\n<h4 id=\"创建计算字段\"><a href=\"#创建计算字段\" class=\"headerlink\" title=\"创建计算字段\"></a>创建计算字段</h4><p>拼接： 将值联结到一起构成单个值， 使用Concat()函数来来拼接两个列, 函数中为多个字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT CONCAT(vend_name, &apos; (&apos;, vend_country, &apos;) &apos;) AS vend_title FROM vendors order by vend_name;</div></pre></td></tr></table></figure></p>\n<p>执行算术计算<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT prod_id, quantity, item_price, quantity*item_price as total_price FROM orderitems WHERE order_num=20005;</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用数据处理函数\"><a href=\"#使用数据处理函数\" class=\"headerlink\" title=\"使用数据处理函数\"></a>使用数据处理函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">日期和时间处理函数</div><div class=\"line\">ADDDATE(expr,days)\t添加一个日期(天，周等)</div><div class=\"line\">ADDTIME(expr1,expr2)\t添加一个时间(时，分等)</div><div class=\"line\">CURDATE()\t返回当前日期</div><div class=\"line\">CURTIME()\t返回当前时间</div><div class=\"line\">DATE(expr)\t返回日期时间的日期部分</div><div class=\"line\">DATEDIFF(expr1,expr2)\t计算两个日期之差</div><div class=\"line\">DATE_ADD(date,INTERVAL expr unit)\t高度灵活的日期运算函数</div><div class=\"line\">DATE_FORMAT(date,format)\t返回一个格式化的日期或时间串</div><div class=\"line\">DAY(date)\t返回一个日期的天数部分</div><div class=\"line\">DAYOFWEEK(date)\t对于一个日期，返回对应的星期几</div><div class=\"line\">HOUR(time)\t返回一个时间的小时部分</div><div class=\"line\">MINUTE(time)\t返回一个时间的分钟部分</div><div class=\"line\">MONTH(date)\t返回一个日期的月份部分</div><div class=\"line\">NOW()\t\t返回当前日期和时间</div><div class=\"line\">SECOND(time)\t返回一个时间的秒部分</div><div class=\"line\">TIME(expr)\t返回一个日期时间的时间部分</div><div class=\"line\">YEAR()\t\t返回一个日期的年份部分</div><div class=\"line\"> </div><div class=\"line\">数值处理函数</div><div class=\"line\">ABS(X)\t返回一个数的绝对值</div><div class=\"line\">COS(X)\t返回一个角度的余弦</div><div class=\"line\">EXP(X)\t返回一个数的指数值</div><div class=\"line\">MOD(N,M)\t返回除操作的余数</div><div class=\"line\">PI()\t返回圆周率</div><div class=\"line\">RAND()\t返回一个随机数</div><div class=\"line\">SIN(X)\t返回一个角度的正弦</div><div class=\"line\">SQRT(X)\t返回一个数的平方根</div><div class=\"line\">TAN(X)\t返回一个角度的正切</div><div class=\"line\"> </div><div class=\"line\">SELECT * FROM orders;</div><div class=\"line\">SELECT * from orders WHERE DATE(order_date) = &apos;2005-09-01&apos;;</div><div class=\"line\">SELECT * FROM orders WHERE DATE(order_date) BETWEEN &apos;2005-09-01&apos; and &apos;2005-10-01&apos;;</div><div class=\"line\">SELECT * from orders where YEAR(order_date)=2005 and MONTH(order_date) = 10;</div></pre></td></tr></table></figure>\n<h4 id=\"汇总数据\"><a href=\"#汇总数据\" class=\"headerlink\" title=\"汇总数据\"></a>汇总数据</h4><ul>\n<li>聚合函数<br>  运行在行组上，计算和返回单个值的函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">AVG([DISTINCT] expr)\t返回某列的平均值</div><div class=\"line\">COUNT(expr)\t返回某列的行数</div><div class=\"line\">MAX(expr)\t返回某列的最大值</div><div class=\"line\">MIN(expr)\t返回某列的最小值</div><div class=\"line\">SUM(expr)\t返回某列值之和</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">SELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class=\"line\">SELECT COUNT(*) FROM customers;</div><div class=\"line\">SELECT COUNT(cust_email) FROM customers;</div><div class=\"line\">SELECT SUM(item_price* quantity) FROM orderitems WHERE order_num=20005;</div><div class=\"line\">-- 集合不同值 DISTINCT</div><div class=\"line\">SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class=\"line\">SELECT COUNT(*) AS num_items, MIN(prod_price), MAX(prod_price), AVG(prod_price) FROM products;</div></pre></td></tr></table></figure>\n<h4 id=\"分组数据\"><a href=\"#分组数据\" class=\"headerlink\" title=\"分组数据\"></a>分组数据</h4><ul>\n<li>分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算</li>\n<li>WHERE 过滤行， HAVING 过滤分组</li>\n<li>WHERE 在数据分组前进行过滤，having在数据分组后进行过滤</li>\n<li>GROUP BY子句可以包含任何数目的列</li>\n<li>如果在group by子句中嵌套了分组， 数据将在最后规定的分组上进行汇总</li>\n<li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(单不能是聚集函数)</li>\n<li>SELECT 语句中的每个列都必须在group by 子句中给出</li>\n<li>如果分组列中具有null值，则null将作为一个分组返回，如果列中有多行null值，它们将分为一组</li>\n<li>GROUP BY 子句必须出现在where子句之后，order by子句之前</li>\n<li>使用 with rollup关键字， 可以得到每个分组汇总的值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM orders;</div><div class=\"line\">SELECT vend_id, COUNT(*) as num FROM products GROUP BY vend_id WITH ROLLUP;</div><div class=\"line\">SELECT cust_id,COUNT(*) as order_count FROM orders GROUP BY cust_id HAVING order_count &gt;= 2;</div><div class=\"line\">SELECT * FROM products;</div><div class=\"line\">SELECT vend_id,COUNT(*) FROM products WHERE prod_price &gt;=10 GROUP BY vend_id HAVING COUNT(*) &gt;=2;</div></pre></td></tr></table></figure>\n<p>SELECT子句及其顺序</p>\n<table>\n<thead>\n<tr>\n<th>子句</th>\n<th>说明</th>\n<th>是否必须使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SELECT</td>\n<td>要返回的列或表达式</td>\n<td>是</td>\n</tr>\n<tr>\n<td>FROM</td>\n<td>从中检索数据的表</td>\n<td>仅在从表选择数据时使用</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>行级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>GROUP BY</td>\n<td>分组说明</td>\n<td>仅在按组计算聚集时使用</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>组级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>输出排序顺序</td>\n<td>否</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>要检索的行数</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT order_num, SUM(quantity*item_price) AS total  FROM orderitems GROUP BY order_num HAVING total &gt;=50 ORDER BY total;</div></pre></td></tr></table></figure>\n<h4 id=\"使用子查询\"><a href=\"#使用子查询\" class=\"headerlink\" title=\"使用子查询\"></a>使用子查询</h4><p>子查询：嵌套在其他查询中的查询<br>子查询进行过滤<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM orderitems WHERE prod_id=&apos;TNT2&apos;;</div><div class=\"line\">SELECT * FROM orders WHERE order_num in (20005, 20007);</div><div class=\"line\">SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;);</div><div class=\"line\">SELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;));</div></pre></td></tr></table></figure></p>\n<p>计算字段使用子查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(*) AS orders FROM orders WHERE cust_id=10001;</div><div class=\"line\"></div><div class=\"line\">SELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_name;</div></pre></td></tr></table></figure>\n<h4 id=\"联结表查询\"><a href=\"#联结表查询\" class=\"headerlink\" title=\"联结表查询\"></a>联结表查询</h4><ul>\n<li>内部联结： 基于两个表之间的相等测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;</div><div class=\"line\">SELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id AND orderitems.prod_id = products.prod_id AND order_num=20005;</div><div class=\"line\">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num AND prod_id = &apos;TNT2&apos;;</div></pre></td></tr></table></figure>\n<h4 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h4><p>利用union操作符将多条select组合成一个结果集<br>使用场景：</p>\n<pre><code>- 在单个查询中从不同的表返回类似结构的数据\n- 对单个表执行多个查询，按单个查询返回数据\n</code></pre><p> 规则：</p>\n<ul>\n<li>SELECT 语句之间使用UNION关键字连接</li>\n<li>UNION每个查询必须包含相同的列、表达式或者聚集函数</li>\n<li>列数据类型必须兼容，类型不必完全相同，但必须是DBMS可以隐含地转换类型</li>\n<li>UNION 从查询结果中自动去除了重复的行，如果需要返回所有匹配行，可以使用UNION ALL来展示</li>\n<li>UNION 只能使用一条ORDER BY 子句，必须出现在最后一条SELECT语句之后,作用于所有SELECT语句返回的结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5;</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;=5 UNION ALL SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002);</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 OR vend_id IN (1001, 1002);</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 UNION SELECT  vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002) ORDER BY vend_id,prod_price;</div></pre></td></tr></table></figure>\n<h4 id=\"全文本搜索\"><a href=\"#全文本搜索\" class=\"headerlink\" title=\"全文本搜索\"></a>全文本搜索</h4><ul>\n<li>MyISAM引擎支持全文本搜索，InnoDB不支持</li>\n<li>MATCH()指定被搜索的列</li>\n<li>Against()指定要使用的搜索表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;rabbit&apos;);</div><div class=\"line\">SELECT * FROM productnotes WHERE note_text like &quot;%rabbit%&quot;;</div><div class=\"line\">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;anvils&apos;);</div></pre></td></tr></table></figure>\n<h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><p>视图是虚拟的表， 视图只包含使用时动态检索数据的查询</p>\n<p>视图功能</p>\n<pre><code>- 重用sql语句\n- 简化复杂的sql操作\n- 使用表的组成部分而不是整个表\n- 保护数据\n- 更改数据格式和表示 \n</code></pre><p>基本语句</p>\n<pre><code>- 创建使用 CREATE VIEW\n- 查看创建视图的语句 SHOW CREATE VIEW viewname\n- 删除视图， DROP VIEW viewname\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND </div><div class=\"line\">orderitems.order_num = orders.order_num AND prod_id=&quot;TNT2&quot;;</div><div class=\"line\">-- 创建视图</div><div class=\"line\">CREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id=orders.cust_id AND</div><div class=\"line\">orderitems.order_num = orders.order_num;</div><div class=\"line\">SELECT cust_name, cust_contact FROM productcustomers;</div><div class=\"line\">SELECT cust_name, cust_contact FROM productcustomers WHERE prod_id=&apos;TNT2&apos;;</div><div class=\"line\">-- 重新格式化检索出的数据</div><div class=\"line\">CREATE VIEW vendorlocations AS SELECT CONCAT(RTRIM(vend_name), &apos;(&apos;, RTRIM(vend_country), &apos;)&apos;) AS vend_title FROM vendors ORDER BY vend_name;</div><div class=\"line\">SELECT * FROM vendorlocations;</div><div class=\"line\">-- 视图过滤不想要的数据</div><div class=\"line\">CREATE VIEW customeremiallist AS SELECT * FROM customers WHERE cust_email IS NOT NULL;</div><div class=\"line\">SELECT * FROM customeremiallist;</div><div class=\"line\">-- 使用视图与计算字段</div><div class=\"line\">CREATE VIEW orderitemsexpanded AS SELECT order_num, prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems;</div><div class=\"line\">SELECT * FROM orderitemsexpanded WHERE order_num=20005;</div><div class=\"line\">-- 查看视图</div><div class=\"line\">SHOW CREATE VIEW orderitemsexpanded;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：</p>\n<p>其中使用的数据库结构和数据为<a href=\"http://forta.com/books/0672327120/\">http://forta.com/books/0672327120/</a> 中的SQL脚本</p>\n<h4 id=\"计算次序\"><a href=\"#计算次序\" class=\"headerlink\" title=\"计算次序\"></a>计算次序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM products WHERE vend_id=1002 or vend_id =1003;</div><div class=\"line\">SELECT * FROM products WHERE (vend_id=1002 or vend_id=1003) AND prod_price &gt;=10;</div><div class=\"line\">SELECT * FROM products WHERE vend_id not in (1002, 1003) ORDER BY prod_name;</div><div class=\"line\">SELECT * FROM products ;</div><div class=\"line\">SELECT * FROM products WHERE prod_name like &apos;_ ton anv%&apos;;\t# _ 只匹配单个字符而不是多个字符</div></pre></td></tr></table></figure>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM products ;</div><div class=\"line\">SELECT * FROM products WHERE prod_name REGEXP &apos;.000&apos; ORDER BY prod_name;\t# 匹配任意一个字符</div><div class=\"line\">SELECT * FROM products WHERE prod_name regexp &apos;1000|2000&apos;;</div><div class=\"line\">SELECT * FROM products WHERE prod_name regexp &apos;[123] ton&apos;;</div></pre></td></tr></table></figure>\n<h4 id=\"创建计算字段\"><a href=\"#创建计算字段\" class=\"headerlink\" title=\"创建计算字段\"></a>创建计算字段</h4><p>拼接： 将值联结到一起构成单个值， 使用Concat()函数来来拼接两个列, 函数中为多个字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT CONCAT(vend_name, &apos; (&apos;, vend_country, &apos;) &apos;) AS vend_title FROM vendors order by vend_name;</div></pre></td></tr></table></figure></p>\n<p>执行算术计算<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT prod_id, quantity, item_price, quantity*item_price as total_price FROM orderitems WHERE order_num=20005;</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用数据处理函数\"><a href=\"#使用数据处理函数\" class=\"headerlink\" title=\"使用数据处理函数\"></a>使用数据处理函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">日期和时间处理函数</div><div class=\"line\">ADDDATE(expr,days)\t添加一个日期(天，周等)</div><div class=\"line\">ADDTIME(expr1,expr2)\t添加一个时间(时，分等)</div><div class=\"line\">CURDATE()\t返回当前日期</div><div class=\"line\">CURTIME()\t返回当前时间</div><div class=\"line\">DATE(expr)\t返回日期时间的日期部分</div><div class=\"line\">DATEDIFF(expr1,expr2)\t计算两个日期之差</div><div class=\"line\">DATE_ADD(date,INTERVAL expr unit)\t高度灵活的日期运算函数</div><div class=\"line\">DATE_FORMAT(date,format)\t返回一个格式化的日期或时间串</div><div class=\"line\">DAY(date)\t返回一个日期的天数部分</div><div class=\"line\">DAYOFWEEK(date)\t对于一个日期，返回对应的星期几</div><div class=\"line\">HOUR(time)\t返回一个时间的小时部分</div><div class=\"line\">MINUTE(time)\t返回一个时间的分钟部分</div><div class=\"line\">MONTH(date)\t返回一个日期的月份部分</div><div class=\"line\">NOW()\t\t返回当前日期和时间</div><div class=\"line\">SECOND(time)\t返回一个时间的秒部分</div><div class=\"line\">TIME(expr)\t返回一个日期时间的时间部分</div><div class=\"line\">YEAR()\t\t返回一个日期的年份部分</div><div class=\"line\"> </div><div class=\"line\">数值处理函数</div><div class=\"line\">ABS(X)\t返回一个数的绝对值</div><div class=\"line\">COS(X)\t返回一个角度的余弦</div><div class=\"line\">EXP(X)\t返回一个数的指数值</div><div class=\"line\">MOD(N,M)\t返回除操作的余数</div><div class=\"line\">PI()\t返回圆周率</div><div class=\"line\">RAND()\t返回一个随机数</div><div class=\"line\">SIN(X)\t返回一个角度的正弦</div><div class=\"line\">SQRT(X)\t返回一个数的平方根</div><div class=\"line\">TAN(X)\t返回一个角度的正切</div><div class=\"line\"> </div><div class=\"line\">SELECT * FROM orders;</div><div class=\"line\">SELECT * from orders WHERE DATE(order_date) = &apos;2005-09-01&apos;;</div><div class=\"line\">SELECT * FROM orders WHERE DATE(order_date) BETWEEN &apos;2005-09-01&apos; and &apos;2005-10-01&apos;;</div><div class=\"line\">SELECT * from orders where YEAR(order_date)=2005 and MONTH(order_date) = 10;</div></pre></td></tr></table></figure>\n<h4 id=\"汇总数据\"><a href=\"#汇总数据\" class=\"headerlink\" title=\"汇总数据\"></a>汇总数据</h4><ul>\n<li>聚合函数<br>  运行在行组上，计算和返回单个值的函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">AVG([DISTINCT] expr)\t返回某列的平均值</div><div class=\"line\">COUNT(expr)\t返回某列的行数</div><div class=\"line\">MAX(expr)\t返回某列的最大值</div><div class=\"line\">MIN(expr)\t返回某列的最小值</div><div class=\"line\">SUM(expr)\t返回某列值之和</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">SELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class=\"line\">SELECT COUNT(*) FROM customers;</div><div class=\"line\">SELECT COUNT(cust_email) FROM customers;</div><div class=\"line\">SELECT SUM(item_price* quantity) FROM orderitems WHERE order_num=20005;</div><div class=\"line\">-- 集合不同值 DISTINCT</div><div class=\"line\">SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class=\"line\">SELECT COUNT(*) AS num_items, MIN(prod_price), MAX(prod_price), AVG(prod_price) FROM products;</div></pre></td></tr></table></figure>\n<h4 id=\"分组数据\"><a href=\"#分组数据\" class=\"headerlink\" title=\"分组数据\"></a>分组数据</h4><ul>\n<li>分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算</li>\n<li>WHERE 过滤行， HAVING 过滤分组</li>\n<li>WHERE 在数据分组前进行过滤，having在数据分组后进行过滤</li>\n<li>GROUP BY子句可以包含任何数目的列</li>\n<li>如果在group by子句中嵌套了分组， 数据将在最后规定的分组上进行汇总</li>\n<li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(单不能是聚集函数)</li>\n<li>SELECT 语句中的每个列都必须在group by 子句中给出</li>\n<li>如果分组列中具有null值，则null将作为一个分组返回，如果列中有多行null值，它们将分为一组</li>\n<li>GROUP BY 子句必须出现在where子句之后，order by子句之前</li>\n<li>使用 with rollup关键字， 可以得到每个分组汇总的值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM orders;</div><div class=\"line\">SELECT vend_id, COUNT(*) as num FROM products GROUP BY vend_id WITH ROLLUP;</div><div class=\"line\">SELECT cust_id,COUNT(*) as order_count FROM orders GROUP BY cust_id HAVING order_count &gt;= 2;</div><div class=\"line\">SELECT * FROM products;</div><div class=\"line\">SELECT vend_id,COUNT(*) FROM products WHERE prod_price &gt;=10 GROUP BY vend_id HAVING COUNT(*) &gt;=2;</div></pre></td></tr></table></figure>\n<p>SELECT子句及其顺序</p>\n<table>\n<thead>\n<tr>\n<th>子句</th>\n<th>说明</th>\n<th>是否必须使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SELECT</td>\n<td>要返回的列或表达式</td>\n<td>是</td>\n</tr>\n<tr>\n<td>FROM</td>\n<td>从中检索数据的表</td>\n<td>仅在从表选择数据时使用</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>行级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>GROUP BY</td>\n<td>分组说明</td>\n<td>仅在按组计算聚集时使用</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>组级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>输出排序顺序</td>\n<td>否</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>要检索的行数</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT order_num, SUM(quantity*item_price) AS total  FROM orderitems GROUP BY order_num HAVING total &gt;=50 ORDER BY total;</div></pre></td></tr></table></figure>\n<h4 id=\"使用子查询\"><a href=\"#使用子查询\" class=\"headerlink\" title=\"使用子查询\"></a>使用子查询</h4><p>子查询：嵌套在其他查询中的查询<br>子查询进行过滤<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM orderitems WHERE prod_id=&apos;TNT2&apos;;</div><div class=\"line\">SELECT * FROM orders WHERE order_num in (20005, 20007);</div><div class=\"line\">SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;);</div><div class=\"line\">SELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;));</div></pre></td></tr></table></figure></p>\n<p>计算字段使用子查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(*) AS orders FROM orders WHERE cust_id=10001;</div><div class=\"line\"></div><div class=\"line\">SELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_name;</div></pre></td></tr></table></figure>\n<h4 id=\"联结表查询\"><a href=\"#联结表查询\" class=\"headerlink\" title=\"联结表查询\"></a>联结表查询</h4><ul>\n<li>内部联结： 基于两个表之间的相等测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;</div><div class=\"line\">SELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id AND orderitems.prod_id = products.prod_id AND order_num=20005;</div><div class=\"line\">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num AND prod_id = &apos;TNT2&apos;;</div></pre></td></tr></table></figure>\n<h4 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h4><p>利用union操作符将多条select组合成一个结果集<br>使用场景：</p>\n<pre><code>- 在单个查询中从不同的表返回类似结构的数据\n- 对单个表执行多个查询，按单个查询返回数据\n</code></pre><p> 规则：</p>\n<ul>\n<li>SELECT 语句之间使用UNION关键字连接</li>\n<li>UNION每个查询必须包含相同的列、表达式或者聚集函数</li>\n<li>列数据类型必须兼容，类型不必完全相同，但必须是DBMS可以隐含地转换类型</li>\n<li>UNION 从查询结果中自动去除了重复的行，如果需要返回所有匹配行，可以使用UNION ALL来展示</li>\n<li>UNION 只能使用一条ORDER BY 子句，必须出现在最后一条SELECT语句之后,作用于所有SELECT语句返回的结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5;</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;=5 UNION ALL SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002);</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 OR vend_id IN (1001, 1002);</div><div class=\"line\">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 UNION SELECT  vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002) ORDER BY vend_id,prod_price;</div></pre></td></tr></table></figure>\n<h4 id=\"全文本搜索\"><a href=\"#全文本搜索\" class=\"headerlink\" title=\"全文本搜索\"></a>全文本搜索</h4><ul>\n<li>MyISAM引擎支持全文本搜索，InnoDB不支持</li>\n<li>MATCH()指定被搜索的列</li>\n<li>Against()指定要使用的搜索表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;rabbit&apos;);</div><div class=\"line\">SELECT * FROM productnotes WHERE note_text like &quot;%rabbit%&quot;;</div><div class=\"line\">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;anvils&apos;);</div></pre></td></tr></table></figure>\n<h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><p>视图是虚拟的表， 视图只包含使用时动态检索数据的查询</p>\n<p>视图功能</p>\n<pre><code>- 重用sql语句\n- 简化复杂的sql操作\n- 使用表的组成部分而不是整个表\n- 保护数据\n- 更改数据格式和表示 \n</code></pre><p>基本语句</p>\n<pre><code>- 创建使用 CREATE VIEW\n- 查看创建视图的语句 SHOW CREATE VIEW viewname\n- 删除视图， DROP VIEW viewname\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND </div><div class=\"line\">orderitems.order_num = orders.order_num AND prod_id=&quot;TNT2&quot;;</div><div class=\"line\">-- 创建视图</div><div class=\"line\">CREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id=orders.cust_id AND</div><div class=\"line\">orderitems.order_num = orders.order_num;</div><div class=\"line\">SELECT cust_name, cust_contact FROM productcustomers;</div><div class=\"line\">SELECT cust_name, cust_contact FROM productcustomers WHERE prod_id=&apos;TNT2&apos;;</div><div class=\"line\">-- 重新格式化检索出的数据</div><div class=\"line\">CREATE VIEW vendorlocations AS SELECT CONCAT(RTRIM(vend_name), &apos;(&apos;, RTRIM(vend_country), &apos;)&apos;) AS vend_title FROM vendors ORDER BY vend_name;</div><div class=\"line\">SELECT * FROM vendorlocations;</div><div class=\"line\">-- 视图过滤不想要的数据</div><div class=\"line\">CREATE VIEW customeremiallist AS SELECT * FROM customers WHERE cust_email IS NOT NULL;</div><div class=\"line\">SELECT * FROM customeremiallist;</div><div class=\"line\">-- 使用视图与计算字段</div><div class=\"line\">CREATE VIEW orderitemsexpanded AS SELECT order_num, prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems;</div><div class=\"line\">SELECT * FROM orderitemsexpanded WHERE order_num=20005;</div><div class=\"line\">-- 查看视图</div><div class=\"line\">SHOW CREATE VIEW orderitemsexpanded;</div></pre></td></tr></table></figure>\n"},{"title":"Python Logging模块","date":"2017-03-06T13:42:55.000Z","_content":"logging为python模块提供状态、错误、信息输出的标准接口。\n日志级别大小关系为：CRITICAL > ERROR > WARNING > INFO > DEBUG > NOTSET\n\n\nlogging.basicConfig函数各参数说明：\nfilename: 指定日志文件名\nfilemode: 和file函数意义相同，指定日志文件的打开模式，'w'或'a'\nformat: 指定输出的格式和内容：\n\n    %(levelno)s: 打印日志级别的数值\n    %(levelname)s: 打印日志级别名称\n    %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]\n    %(filename)s: 打印当前执行程序名\n    %(funcName)s: 打印日志的当前函数\n    %(lineno)d: 打印日志的当前行号\n    %(asctime)s: 打印日志的时间\n    %(thread)d: 打印线程ID\n    %(threadName)s: 打印线程名称\n    %(process)d: 打印进程ID\n    %(message)s: 打印日志信息\n\ndatefmt: 指定时间格式，同time.strftime()\nlevel: 设置日志级别，默认为logging.WARNING\n\nstream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略\n\n\n记录日志信息\n```python\n#!/usr/bin/env python\n#coding: utf-8\nimport logging\n\nlogname = 'log.log'\nlogging.basicConfig(\n    level = logging.INFO,    #定义记录大于或等于日志级别\n    format='[%(levelname)s] [%(asctime)s] --- %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S',\n    filename=logname,\n    filemode='a',)\nlogging.warning(\"log\")\n```\n将日志输出到文件，同时打印匹配的级别到屏幕上\n```python\n#!/usr/bin/env python\n#coding: utf-8\nimport logging\nlogname = 'log.log'\nlogging.basicConfig(\n    level = logging.INFO,    #定义记录大于或等于日志级别\n    format='[%(levelname)s] [%(asctime)s] --- %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S',\n    filename=logname,\n    filemode='a',)\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)    #定义需要显示大于或等于日志级别\nformatter = logging.Formatter('[%(levelname)s] [%(asctime)s]-- %(message)s')\nconsole.setFormatter(formatter)\nlogging.getLogger('').addHandler(console)\nlogging.warning('log info')\n```","source":"_posts/logging.md","raw":"---\ntitle: Python Logging模块\ndate: 2017-03-06 21:42:55\ntags:\n  - Logging\ncategories:\n  - python\n---\nlogging为python模块提供状态、错误、信息输出的标准接口。\n日志级别大小关系为：CRITICAL > ERROR > WARNING > INFO > DEBUG > NOTSET\n\n\nlogging.basicConfig函数各参数说明：\nfilename: 指定日志文件名\nfilemode: 和file函数意义相同，指定日志文件的打开模式，'w'或'a'\nformat: 指定输出的格式和内容：\n\n    %(levelno)s: 打印日志级别的数值\n    %(levelname)s: 打印日志级别名称\n    %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]\n    %(filename)s: 打印当前执行程序名\n    %(funcName)s: 打印日志的当前函数\n    %(lineno)d: 打印日志的当前行号\n    %(asctime)s: 打印日志的时间\n    %(thread)d: 打印线程ID\n    %(threadName)s: 打印线程名称\n    %(process)d: 打印进程ID\n    %(message)s: 打印日志信息\n\ndatefmt: 指定时间格式，同time.strftime()\nlevel: 设置日志级别，默认为logging.WARNING\n\nstream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略\n\n\n记录日志信息\n```python\n#!/usr/bin/env python\n#coding: utf-8\nimport logging\n\nlogname = 'log.log'\nlogging.basicConfig(\n    level = logging.INFO,    #定义记录大于或等于日志级别\n    format='[%(levelname)s] [%(asctime)s] --- %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S',\n    filename=logname,\n    filemode='a',)\nlogging.warning(\"log\")\n```\n将日志输出到文件，同时打印匹配的级别到屏幕上\n```python\n#!/usr/bin/env python\n#coding: utf-8\nimport logging\nlogname = 'log.log'\nlogging.basicConfig(\n    level = logging.INFO,    #定义记录大于或等于日志级别\n    format='[%(levelname)s] [%(asctime)s] --- %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S',\n    filename=logname,\n    filemode='a',)\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)    #定义需要显示大于或等于日志级别\nformatter = logging.Formatter('[%(levelname)s] [%(asctime)s]-- %(message)s')\nconsole.setFormatter(formatter)\nlogging.getLogger('').addHandler(console)\nlogging.warning('log info')\n```","slug":"logging","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5x7003rct8uhgfa2l4p","content":"<p>logging为python模块提供状态、错误、信息输出的标准接口。<br>日志级别大小关系为：CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p>\n<p>logging.basicConfig函数各参数说明：<br>filename: 指定日志文件名<br>filemode: 和file函数意义相同，指定日志文件的打开模式，’w’或’a’<br>format: 指定输出的格式和内容：</p>\n<pre><code>%(levelno)s: 打印日志级别的数值\n%(levelname)s: 打印日志级别名称\n%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]\n%(filename)s: 打印当前执行程序名\n%(funcName)s: 打印日志的当前函数\n%(lineno)d: 打印日志的当前行号\n%(asctime)s: 打印日志的时间\n%(thread)d: 打印线程ID\n%(threadName)s: 打印线程名称\n%(process)d: 打印进程ID\n%(message)s: 打印日志信息\n</code></pre><p>datefmt: 指定时间格式，同time.strftime()<br>level: 设置日志级别，默认为logging.WARNING</p>\n<p>stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</p>\n<p>记录日志信息<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\">logname = <span class=\"string\">'log.log'</span></div><div class=\"line\">logging.basicConfig(</div><div class=\"line\">    level = logging.INFO,    <span class=\"comment\">#定义记录大于或等于日志级别</span></div><div class=\"line\">    format=<span class=\"string\">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class=\"line\">    datefmt=<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,</div><div class=\"line\">    filename=logname,</div><div class=\"line\">    filemode=<span class=\"string\">'a'</span>,)</div><div class=\"line\">logging.warning(<span class=\"string\">\"log\"</span>)</div></pre></td></tr></table></figure></p>\n<p>将日志输出到文件，同时打印匹配的级别到屏幕上<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logname = <span class=\"string\">'log.log'</span></div><div class=\"line\">logging.basicConfig(</div><div class=\"line\">    level = logging.INFO,    <span class=\"comment\">#定义记录大于或等于日志级别</span></div><div class=\"line\">    format=<span class=\"string\">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class=\"line\">    datefmt=<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,</div><div class=\"line\">    filename=logname,</div><div class=\"line\">    filemode=<span class=\"string\">'a'</span>,)</div><div class=\"line\">console = logging.StreamHandler()</div><div class=\"line\">console.setLevel(logging.INFO)    <span class=\"comment\">#定义需要显示大于或等于日志级别</span></div><div class=\"line\">formatter = logging.Formatter(<span class=\"string\">'[%(levelname)s] [%(asctime)s]-- %(message)s'</span>)</div><div class=\"line\">console.setFormatter(formatter)</div><div class=\"line\">logging.getLogger(<span class=\"string\">''</span>).addHandler(console)</div><div class=\"line\">logging.warning(<span class=\"string\">'log info'</span>)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>logging为python模块提供状态、错误、信息输出的标准接口。<br>日志级别大小关系为：CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p>\n<p>logging.basicConfig函数各参数说明：<br>filename: 指定日志文件名<br>filemode: 和file函数意义相同，指定日志文件的打开模式，’w’或’a’<br>format: 指定输出的格式和内容：</p>\n<pre><code>%(levelno)s: 打印日志级别的数值\n%(levelname)s: 打印日志级别名称\n%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]\n%(filename)s: 打印当前执行程序名\n%(funcName)s: 打印日志的当前函数\n%(lineno)d: 打印日志的当前行号\n%(asctime)s: 打印日志的时间\n%(thread)d: 打印线程ID\n%(threadName)s: 打印线程名称\n%(process)d: 打印进程ID\n%(message)s: 打印日志信息\n</code></pre><p>datefmt: 指定时间格式，同time.strftime()<br>level: 设置日志级别，默认为logging.WARNING</p>\n<p>stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</p>\n<p>记录日志信息<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\">logname = <span class=\"string\">'log.log'</span></div><div class=\"line\">logging.basicConfig(</div><div class=\"line\">    level = logging.INFO,    <span class=\"comment\">#定义记录大于或等于日志级别</span></div><div class=\"line\">    format=<span class=\"string\">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class=\"line\">    datefmt=<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,</div><div class=\"line\">    filename=logname,</div><div class=\"line\">    filemode=<span class=\"string\">'a'</span>,)</div><div class=\"line\">logging.warning(<span class=\"string\">\"log\"</span>)</div></pre></td></tr></table></figure></p>\n<p>将日志输出到文件，同时打印匹配的级别到屏幕上<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logname = <span class=\"string\">'log.log'</span></div><div class=\"line\">logging.basicConfig(</div><div class=\"line\">    level = logging.INFO,    <span class=\"comment\">#定义记录大于或等于日志级别</span></div><div class=\"line\">    format=<span class=\"string\">'[%(levelname)s] [%(asctime)s] --- %(message)s'</span>,</div><div class=\"line\">    datefmt=<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,</div><div class=\"line\">    filename=logname,</div><div class=\"line\">    filemode=<span class=\"string\">'a'</span>,)</div><div class=\"line\">console = logging.StreamHandler()</div><div class=\"line\">console.setLevel(logging.INFO)    <span class=\"comment\">#定义需要显示大于或等于日志级别</span></div><div class=\"line\">formatter = logging.Formatter(<span class=\"string\">'[%(levelname)s] [%(asctime)s]-- %(message)s'</span>)</div><div class=\"line\">console.setFormatter(formatter)</div><div class=\"line\">logging.getLogger(<span class=\"string\">''</span>).addHandler(console)</div><div class=\"line\">logging.warning(<span class=\"string\">'log info'</span>)</div></pre></td></tr></table></figure></p>\n"},{"title":"Python Mysqldb模块","date":"2017-03-25T13:43:12.000Z","_content":"#### 说明\npython中执行数据库操作，首先安装MySQL-python模块\n```\nyum install -y MySQL-python 或者\npip install MySQL-python\n```\n\n#### 常用操作\n创建数据库连接：\n```python\nconn = MySQLdb.connect(\n    host='127.0.0.1',\n    user='test',\n    passwd='test',\n    db='test01',\n    port=3306,\n    charset=utf8)\ncur = conn.cursor()        #通过获取到的数据库连接conn下的cursor()方法来创建游标，以元祖形式输出\nconn.cursor(MySQLdb.cursors.DictCursor)   #字典形式输出\nconn.selecct_db(dbname)  #选择数据库\ncur.execute(sql, args)    #用来执行一条sql语句\ncur.executemany(sql, args)    #用来执行多条sql语句\ncur.fetchall()  #获取查询结果\ncur.scroll(位置，模式) #调整指针\ncur.rollback()  #发生错误时回滚\ncur.close()  \t#关闭游标\nconn.commit()   #方法在提交事务，在向数据库插入一个数据时必须用此方法，否则数据不会被真正插入\nconn.close()  #关闭数据库连接\n```\n#### 实例\n```python\n#!/usr/bin/env python\n#coding:utf8\n \nimport MySQLdb\n \nclass Mysql(object):\n \n    def __init__(self, host, port, user, passwd, db):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.passwd = passwd\n        self.db = db\n \n        self.conn = MySQLdb.Connect(\n            host = self.host,\n            user = self.user,\n            passwd = self.passwd,\n            db = self.db,\n            port = self.port,\n            charset = 'utf8'\n        )\n        self.cur = self.conn.cursor()\n \n    def select(self):\n    \tsql = \"select * from test;\"    #执行的sql语句\n        try:\n            self.cur.execute(sql)\n            result = self.cur.fetchall()\n            for line in list(result):\n                print line[0],line[1]\n        except Exception,e:\n            print \"\\033[31m %s \\033[0m\" %e\n \n    def insert(self):\n        sql = \"\"\"INSERT into group(id,is_admin,name,created_time)\\\n                VALUES（1,FALSE,'ttxsgoto','天天向上goto'),\\\n                (2,FALSE,'ttxsgoto02','天天向上goto02');\"\"\"\n        try:\n            self.cur.execute(sql) #执行一条sql语句\n            self.conn.commit()\t# 提交到数据库执行\n        except Exception, e:\n            print \"\\033[31m %s \\033[0m\" % e\n \n    def manyinsert(self):\n    \tsql = \"SELECT user_id,org_id,id from positions;\"\n        try:\n            self.cur.execute(sql)\n            result = self.cur.fetchall()\n            sql2 = \"\"\" UPDATE records SET user_id=%s,org_id=%s WHERE position_id=%s ;\"\"\"\n            self.cur.executemany(sql2, result)\t#执行多条sql语句\n            self.conn.commit()\n        except Exception, e:\n            print \"\\033[31m %s \\033[0m\" % e\n        self.cur.close()\n        self.conn.close()\n \nif __name__ == '__main__':\n    db = Mysql(host='127.0.0.1', port=3306, user='root', passwd='root', db='test')\n    db.select()\n    db.insert()\n    db.manyinsert()\n \n```","source":"_posts/mysqldb.md","raw":"---\ntitle: Python Mysqldb模块\ndate: 2017-03-25 21:43:12\ntags:\n  - Mysqldb\ncategories:\n  - python\n---\n#### 说明\npython中执行数据库操作，首先安装MySQL-python模块\n```\nyum install -y MySQL-python 或者\npip install MySQL-python\n```\n\n#### 常用操作\n创建数据库连接：\n```python\nconn = MySQLdb.connect(\n    host='127.0.0.1',\n    user='test',\n    passwd='test',\n    db='test01',\n    port=3306,\n    charset=utf8)\ncur = conn.cursor()        #通过获取到的数据库连接conn下的cursor()方法来创建游标，以元祖形式输出\nconn.cursor(MySQLdb.cursors.DictCursor)   #字典形式输出\nconn.selecct_db(dbname)  #选择数据库\ncur.execute(sql, args)    #用来执行一条sql语句\ncur.executemany(sql, args)    #用来执行多条sql语句\ncur.fetchall()  #获取查询结果\ncur.scroll(位置，模式) #调整指针\ncur.rollback()  #发生错误时回滚\ncur.close()  \t#关闭游标\nconn.commit()   #方法在提交事务，在向数据库插入一个数据时必须用此方法，否则数据不会被真正插入\nconn.close()  #关闭数据库连接\n```\n#### 实例\n```python\n#!/usr/bin/env python\n#coding:utf8\n \nimport MySQLdb\n \nclass Mysql(object):\n \n    def __init__(self, host, port, user, passwd, db):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.passwd = passwd\n        self.db = db\n \n        self.conn = MySQLdb.Connect(\n            host = self.host,\n            user = self.user,\n            passwd = self.passwd,\n            db = self.db,\n            port = self.port,\n            charset = 'utf8'\n        )\n        self.cur = self.conn.cursor()\n \n    def select(self):\n    \tsql = \"select * from test;\"    #执行的sql语句\n        try:\n            self.cur.execute(sql)\n            result = self.cur.fetchall()\n            for line in list(result):\n                print line[0],line[1]\n        except Exception,e:\n            print \"\\033[31m %s \\033[0m\" %e\n \n    def insert(self):\n        sql = \"\"\"INSERT into group(id,is_admin,name,created_time)\\\n                VALUES（1,FALSE,'ttxsgoto','天天向上goto'),\\\n                (2,FALSE,'ttxsgoto02','天天向上goto02');\"\"\"\n        try:\n            self.cur.execute(sql) #执行一条sql语句\n            self.conn.commit()\t# 提交到数据库执行\n        except Exception, e:\n            print \"\\033[31m %s \\033[0m\" % e\n \n    def manyinsert(self):\n    \tsql = \"SELECT user_id,org_id,id from positions;\"\n        try:\n            self.cur.execute(sql)\n            result = self.cur.fetchall()\n            sql2 = \"\"\" UPDATE records SET user_id=%s,org_id=%s WHERE position_id=%s ;\"\"\"\n            self.cur.executemany(sql2, result)\t#执行多条sql语句\n            self.conn.commit()\n        except Exception, e:\n            print \"\\033[31m %s \\033[0m\" % e\n        self.cur.close()\n        self.conn.close()\n \nif __name__ == '__main__':\n    db = Mysql(host='127.0.0.1', port=3306, user='root', passwd='root', db='test')\n    db.select()\n    db.insert()\n    db.manyinsert()\n \n```","slug":"mysqldb","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xa003uct8uucqn0sl4","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>python中执行数据库操作，首先安装MySQL-python模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y MySQL-python 或者</div><div class=\"line\">pip install MySQL-python</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><p>创建数据库连接：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">conn = MySQLdb.connect(</div><div class=\"line\">    host=<span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">    user=<span class=\"string\">'test'</span>,</div><div class=\"line\">    passwd=<span class=\"string\">'test'</span>,</div><div class=\"line\">    db=<span class=\"string\">'test01'</span>,</div><div class=\"line\">    port=<span class=\"number\">3306</span>,</div><div class=\"line\">    charset=utf8)</div><div class=\"line\">cur = conn.cursor()        <span class=\"comment\">#通过获取到的数据库连接conn下的cursor()方法来创建游标，以元祖形式输出</span></div><div class=\"line\">conn.cursor(MySQLdb.cursors.DictCursor)   <span class=\"comment\">#字典形式输出</span></div><div class=\"line\">conn.selecct_db(dbname)  <span class=\"comment\">#选择数据库</span></div><div class=\"line\">cur.execute(sql, args)    <span class=\"comment\">#用来执行一条sql语句</span></div><div class=\"line\">cur.executemany(sql, args)    <span class=\"comment\">#用来执行多条sql语句</span></div><div class=\"line\">cur.fetchall()  <span class=\"comment\">#获取查询结果</span></div><div class=\"line\">cur.scroll(位置，模式) <span class=\"comment\">#调整指针</span></div><div class=\"line\">cur.rollback()  <span class=\"comment\">#发生错误时回滚</span></div><div class=\"line\">cur.close()  \t<span class=\"comment\">#关闭游标</span></div><div class=\"line\">conn.commit()   <span class=\"comment\">#方法在提交事务，在向数据库插入一个数据时必须用此方法，否则数据不会被真正插入</span></div><div class=\"line\">conn.close()  <span class=\"comment\">#关闭数据库连接</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, host, port, user, passwd, db)</span>:</span></div><div class=\"line\">        self.host = host</div><div class=\"line\">        self.port = port</div><div class=\"line\">        self.user = user</div><div class=\"line\">        self.passwd = passwd</div><div class=\"line\">        self.db = db</div><div class=\"line\"> </div><div class=\"line\">        self.conn = MySQLdb.Connect(</div><div class=\"line\">            host = self.host,</div><div class=\"line\">            user = self.user,</div><div class=\"line\">            passwd = self.passwd,</div><div class=\"line\">            db = self.db,</div><div class=\"line\">            port = self.port,</div><div class=\"line\">            charset = <span class=\"string\">'utf8'</span></div><div class=\"line\">        )</div><div class=\"line\">        self.cur = self.conn.cursor()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \tsql = <span class=\"string\">\"select * from test;\"</span>    <span class=\"comment\">#执行的sql语句</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.cur.execute(sql)</div><div class=\"line\">            result = self.cur.fetchall()</div><div class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> list(result):</div><div class=\"line\">                <span class=\"keyword\">print</span> line[<span class=\"number\">0</span>],line[<span class=\"number\">1</span>]</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception,e:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"\\033[31m %s \\033[0m\"</span> %e</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        sql = <span class=\"string\">\"\"\"INSERT into group(id,is_admin,name,created_time)\\</span></div><div class=\"line\">                VALUES（1,FALSE,'ttxsgoto','天天向上goto'),\\</div><div class=\"line\">                (2,FALSE,'ttxsgoto02','天天向上goto02');\"\"\"</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.cur.execute(sql) <span class=\"comment\">#执行一条sql语句</span></div><div class=\"line\">            self.conn.commit()\t<span class=\"comment\"># 提交到数据库执行</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception, e:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"\\033[31m %s \\033[0m\"</span> % e</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">manyinsert</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \tsql = <span class=\"string\">\"SELECT user_id,org_id,id from positions;\"</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.cur.execute(sql)</div><div class=\"line\">            result = self.cur.fetchall()</div><div class=\"line\">            sql2 = <span class=\"string\">\"\"\" UPDATE records SET user_id=%s,org_id=%s WHERE position_id=%s ;\"\"\"</span></div><div class=\"line\">            self.cur.executemany(sql2, result)\t<span class=\"comment\">#执行多条sql语句</span></div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception, e:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"\\033[31m %s \\033[0m\"</span> % e</div><div class=\"line\">        self.cur.close()</div><div class=\"line\">        self.conn.close()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    db = Mysql(host=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">'root'</span>, passwd=<span class=\"string\">'root'</span>, db=<span class=\"string\">'test'</span>)</div><div class=\"line\">    db.select()</div><div class=\"line\">    db.insert()</div><div class=\"line\">    db.manyinsert()</div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>python中执行数据库操作，首先安装MySQL-python模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y MySQL-python 或者</div><div class=\"line\">pip install MySQL-python</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><p>创建数据库连接：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">conn = MySQLdb.connect(</div><div class=\"line\">    host=<span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">    user=<span class=\"string\">'test'</span>,</div><div class=\"line\">    passwd=<span class=\"string\">'test'</span>,</div><div class=\"line\">    db=<span class=\"string\">'test01'</span>,</div><div class=\"line\">    port=<span class=\"number\">3306</span>,</div><div class=\"line\">    charset=utf8)</div><div class=\"line\">cur = conn.cursor()        <span class=\"comment\">#通过获取到的数据库连接conn下的cursor()方法来创建游标，以元祖形式输出</span></div><div class=\"line\">conn.cursor(MySQLdb.cursors.DictCursor)   <span class=\"comment\">#字典形式输出</span></div><div class=\"line\">conn.selecct_db(dbname)  <span class=\"comment\">#选择数据库</span></div><div class=\"line\">cur.execute(sql, args)    <span class=\"comment\">#用来执行一条sql语句</span></div><div class=\"line\">cur.executemany(sql, args)    <span class=\"comment\">#用来执行多条sql语句</span></div><div class=\"line\">cur.fetchall()  <span class=\"comment\">#获取查询结果</span></div><div class=\"line\">cur.scroll(位置，模式) <span class=\"comment\">#调整指针</span></div><div class=\"line\">cur.rollback()  <span class=\"comment\">#发生错误时回滚</span></div><div class=\"line\">cur.close()  \t<span class=\"comment\">#关闭游标</span></div><div class=\"line\">conn.commit()   <span class=\"comment\">#方法在提交事务，在向数据库插入一个数据时必须用此方法，否则数据不会被真正插入</span></div><div class=\"line\">conn.close()  <span class=\"comment\">#关闭数据库连接</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, host, port, user, passwd, db)</span>:</span></div><div class=\"line\">        self.host = host</div><div class=\"line\">        self.port = port</div><div class=\"line\">        self.user = user</div><div class=\"line\">        self.passwd = passwd</div><div class=\"line\">        self.db = db</div><div class=\"line\"> </div><div class=\"line\">        self.conn = MySQLdb.Connect(</div><div class=\"line\">            host = self.host,</div><div class=\"line\">            user = self.user,</div><div class=\"line\">            passwd = self.passwd,</div><div class=\"line\">            db = self.db,</div><div class=\"line\">            port = self.port,</div><div class=\"line\">            charset = <span class=\"string\">'utf8'</span></div><div class=\"line\">        )</div><div class=\"line\">        self.cur = self.conn.cursor()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \tsql = <span class=\"string\">\"select * from test;\"</span>    <span class=\"comment\">#执行的sql语句</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.cur.execute(sql)</div><div class=\"line\">            result = self.cur.fetchall()</div><div class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> list(result):</div><div class=\"line\">                <span class=\"keyword\">print</span> line[<span class=\"number\">0</span>],line[<span class=\"number\">1</span>]</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception,e:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"\\033[31m %s \\033[0m\"</span> %e</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        sql = <span class=\"string\">\"\"\"INSERT into group(id,is_admin,name,created_time)\\</div><div class=\"line\">                VALUES（1,FALSE,'ttxsgoto','天天向上goto'),\\</div><div class=\"line\">                (2,FALSE,'ttxsgoto02','天天向上goto02');\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.cur.execute(sql) <span class=\"comment\">#执行一条sql语句</span></div><div class=\"line\">            self.conn.commit()\t<span class=\"comment\"># 提交到数据库执行</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception, e:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"\\033[31m %s \\033[0m\"</span> % e</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">manyinsert</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \tsql = <span class=\"string\">\"SELECT user_id,org_id,id from positions;\"</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.cur.execute(sql)</div><div class=\"line\">            result = self.cur.fetchall()</div><div class=\"line\">            sql2 = <span class=\"string\">\"\"\" UPDATE records SET user_id=%s,org_id=%s WHERE position_id=%s ;\"\"\"</span></div><div class=\"line\">            self.cur.executemany(sql2, result)\t<span class=\"comment\">#执行多条sql语句</span></div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception, e:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"\\033[31m %s \\033[0m\"</span> % e</div><div class=\"line\">        self.cur.close()</div><div class=\"line\">        self.conn.close()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    db = Mysql(host=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">'root'</span>, passwd=<span class=\"string\">'root'</span>, db=<span class=\"string\">'test'</span>)</div><div class=\"line\">    db.select()</div><div class=\"line\">    db.insert()</div><div class=\"line\">    db.manyinsert()</div></pre></td></tr></table></figure>"},{"title":"asyncio 基本用法","date":"2018-08-10T03:58:11.000Z","_content":"### async/await\n#### 协程\n同时开启多个任务，但一次只执行一个，当执行的任务遇到阻塞，就切换到下一个任务继续执行，\n以期节省阻塞所占用的时间\n\n要实现异步处理，需要有挂起的操作，当一个任务需要等待 IO 结果的时候，可以挂起当前任务，转而去执行其他任务\n\n1. event_loop： 事件循环，把一些函数注册到这个事件循环中，当条件满足时，就执行对应的方法\n2. coroutine： 协程，可以看做一个协程对象类型，把协程对象注册到事件循环中，满足条件时被调用； async关键字来定义一个方法，这个方法在调用时不会立刻执行，而是返回一个协程对象\n3. task： 任务，它是对协程对象的进一步封装，包含了任务的各个状态\n4. future： 代表即将执行或者还没有执行的任务的结果，可以等同与task\n5. async： 用于定义协程， 协程函数不能直接调用，直接调用协程函数得到的是协程对象(<coroutine object execute at 0x10359c938>)\n6. await：用来将阻塞方法进行挂起\n\n#### await 后的对象必须为如下的格式\n- 原生的coroutine对象\n- 一个由types.coroutine()修饰的生成器，这个生成器可以返回 coroutine 对象\n- 一个包含 __await 方法的对象返回的一个迭代器。\n\n\n#### asyncio模块实例\n##### 基础用法\n```python\nimport asyncio\n \nasync def execute(x):\n    print('No. ', x)\n \ncoroutine = execute(2)\n \nprint('Coroutine-->', coroutine)    # 协程对象\nprint('After calling execute')\n \n# 创建事件循环\nloop = asyncio.get_event_loop()\n \n# 方法一:将coroutine封装成task对象\n# task = loop.create_task(coroutine)\n# 方法二:通过 asyncio 的 ensure_future() 方法, 将coroutine封装成task对象,这样可以不借助于loop来定义,\n#即使没有声明loop也可以提前定义好task对象\ntask = asyncio.ensure_future(coroutine)\ntask.add_done_callback(callback)    # task添加回调函数(通过task.result()获取返回值)\n \nprint('Task:', task)  # 查看任务task的状态\n# Task: <Task pending coro=<execute() ...\n# 将协程对象注册到事件循环中\nloop.run_until_complete(task)\n \nprint('Task:', task)\n# Task: <Task finished coro=<execute() done ...\nprint('Task result: ', task.result()) # task在fiinished状态时,直接读取task的result方法，得到返回值\n# loop.run_until_complete(coroutine)\nprint('After calling loop')\n\n```\n##### 多任务执行\n定义一个task列表，然后使用asyncio的wait()方法即可执行\n```python\nimport asyncio\nimport requests\n \nnow = time.time()\n \nasync def num(number):\n    await asyncio.sleep(number)\n    return number\n \ntasks = [asyncio.ensure_future(num(i)) for i in range(5)]\nprint('Tasks-', tasks)\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))    # asyncio.wait()用于执行tasks\nprint('Tasks-', tasks)\nfor task in tasks:\n    print('Task Result: ', task.result())\n \nprint('time-->', time.time() - now)\n```\n##### 协程嵌套\n即一个协程中await了另外一个协程\n```python\nimport asyncio\nimport time\n \nnow = time.time()\n \nasync def num(number):\n    await asyncio.sleep(number)\n    return number\n \nasync def main():\n    tasks = [asyncio.ensure_future(num(i)) for i in range(4)]\n\n    # _tasks = await asyncio.gather(*tasks) #  asyncio.gather创建协程对象,await的返回值就是协程运行的结果\n    _tasks, pending = await asyncio.wait(tasks) # asyncio.wait挂起协程,Returns two sets of Future: (done, pending).\n    print('-----', _tasks )\n\n    for task in _tasks: # 在函数里面返回结果\n        print(('wait result task->', task.result()))\n        print('gather result task->', task)\n    return _tasks\n \nloop = asyncio.get_event_loop()\nresults = loop.run_until_complete(main())\n \nfor result in results:\n    print(('wait result task->', result.result()))\n    # print('gather result task->', result)\n \nprint('TIME:', time.time() - now)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/python-asyncio-basic.md","raw":"---\ntitle: asyncio 基本用法\ndate: 2018-08-10 11:58:11\ntags:\n  - asyncio\ncategories:\n  - python\n---\n### async/await\n#### 协程\n同时开启多个任务，但一次只执行一个，当执行的任务遇到阻塞，就切换到下一个任务继续执行，\n以期节省阻塞所占用的时间\n\n要实现异步处理，需要有挂起的操作，当一个任务需要等待 IO 结果的时候，可以挂起当前任务，转而去执行其他任务\n\n1. event_loop： 事件循环，把一些函数注册到这个事件循环中，当条件满足时，就执行对应的方法\n2. coroutine： 协程，可以看做一个协程对象类型，把协程对象注册到事件循环中，满足条件时被调用； async关键字来定义一个方法，这个方法在调用时不会立刻执行，而是返回一个协程对象\n3. task： 任务，它是对协程对象的进一步封装，包含了任务的各个状态\n4. future： 代表即将执行或者还没有执行的任务的结果，可以等同与task\n5. async： 用于定义协程， 协程函数不能直接调用，直接调用协程函数得到的是协程对象(<coroutine object execute at 0x10359c938>)\n6. await：用来将阻塞方法进行挂起\n\n#### await 后的对象必须为如下的格式\n- 原生的coroutine对象\n- 一个由types.coroutine()修饰的生成器，这个生成器可以返回 coroutine 对象\n- 一个包含 __await 方法的对象返回的一个迭代器。\n\n\n#### asyncio模块实例\n##### 基础用法\n```python\nimport asyncio\n \nasync def execute(x):\n    print('No. ', x)\n \ncoroutine = execute(2)\n \nprint('Coroutine-->', coroutine)    # 协程对象\nprint('After calling execute')\n \n# 创建事件循环\nloop = asyncio.get_event_loop()\n \n# 方法一:将coroutine封装成task对象\n# task = loop.create_task(coroutine)\n# 方法二:通过 asyncio 的 ensure_future() 方法, 将coroutine封装成task对象,这样可以不借助于loop来定义,\n#即使没有声明loop也可以提前定义好task对象\ntask = asyncio.ensure_future(coroutine)\ntask.add_done_callback(callback)    # task添加回调函数(通过task.result()获取返回值)\n \nprint('Task:', task)  # 查看任务task的状态\n# Task: <Task pending coro=<execute() ...\n# 将协程对象注册到事件循环中\nloop.run_until_complete(task)\n \nprint('Task:', task)\n# Task: <Task finished coro=<execute() done ...\nprint('Task result: ', task.result()) # task在fiinished状态时,直接读取task的result方法，得到返回值\n# loop.run_until_complete(coroutine)\nprint('After calling loop')\n\n```\n##### 多任务执行\n定义一个task列表，然后使用asyncio的wait()方法即可执行\n```python\nimport asyncio\nimport requests\n \nnow = time.time()\n \nasync def num(number):\n    await asyncio.sleep(number)\n    return number\n \ntasks = [asyncio.ensure_future(num(i)) for i in range(5)]\nprint('Tasks-', tasks)\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))    # asyncio.wait()用于执行tasks\nprint('Tasks-', tasks)\nfor task in tasks:\n    print('Task Result: ', task.result())\n \nprint('time-->', time.time() - now)\n```\n##### 协程嵌套\n即一个协程中await了另外一个协程\n```python\nimport asyncio\nimport time\n \nnow = time.time()\n \nasync def num(number):\n    await asyncio.sleep(number)\n    return number\n \nasync def main():\n    tasks = [asyncio.ensure_future(num(i)) for i in range(4)]\n\n    # _tasks = await asyncio.gather(*tasks) #  asyncio.gather创建协程对象,await的返回值就是协程运行的结果\n    _tasks, pending = await asyncio.wait(tasks) # asyncio.wait挂起协程,Returns two sets of Future: (done, pending).\n    print('-----', _tasks )\n\n    for task in _tasks: # 在函数里面返回结果\n        print(('wait result task->', task.result()))\n        print('gather result task->', task)\n    return _tasks\n \nloop = asyncio.get_event_loop()\nresults = loop.run_until_complete(main())\n \nfor result in results:\n    print(('wait result task->', result.result()))\n    # print('gather result task->', result)\n \nprint('TIME:', time.time() - now)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"python-asyncio-basic","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xd003yct8uck042t7u","content":"<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><h4 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h4><p>同时开启多个任务，但一次只执行一个，当执行的任务遇到阻塞，就切换到下一个任务继续执行，<br>以期节省阻塞所占用的时间</p>\n<p>要实现异步处理，需要有挂起的操作，当一个任务需要等待 IO 结果的时候，可以挂起当前任务，转而去执行其他任务</p>\n<ol>\n<li>event_loop： 事件循环，把一些函数注册到这个事件循环中，当条件满足时，就执行对应的方法</li>\n<li>coroutine： 协程，可以看做一个协程对象类型，把协程对象注册到事件循环中，满足条件时被调用； async关键字来定义一个方法，这个方法在调用时不会立刻执行，而是返回一个协程对象</li>\n<li>task： 任务，它是对协程对象的进一步封装，包含了任务的各个状态</li>\n<li>future： 代表即将执行或者还没有执行的任务的结果，可以等同与task</li>\n<li>async： 用于定义协程， 协程函数不能直接调用，直接调用协程函数得到的是协程对象(<coroutine object=\"\" execute=\"\" at=\"\" 0x10359c938=\"\">)</coroutine></li>\n<li>await：用来将阻塞方法进行挂起</li>\n</ol>\n<h4 id=\"await-后的对象必须为如下的格式\"><a href=\"#await-后的对象必须为如下的格式\" class=\"headerlink\" title=\"await 后的对象必须为如下的格式\"></a>await 后的对象必须为如下的格式</h4><ul>\n<li>原生的coroutine对象</li>\n<li>一个由types.coroutine()修饰的生成器，这个生成器可以返回 coroutine 对象</li>\n<li>一个包含 __await 方法的对象返回的一个迭代器。</li>\n</ul>\n<h4 id=\"asyncio模块实例\"><a href=\"#asyncio模块实例\" class=\"headerlink\" title=\"asyncio模块实例\"></a>asyncio模块实例</h4><h5 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'No. '</span>, x)</div><div class=\"line\"> </div><div class=\"line\">coroutine = execute(<span class=\"number\">2</span>)</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'Coroutine--&gt;'</span>, coroutine)    <span class=\"comment\"># 协程对象</span></div><div class=\"line\">print(<span class=\"string\">'After calling execute'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建事件循环</span></div><div class=\"line\">loop = asyncio.get_event_loop()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 方法一:将coroutine封装成task对象</span></div><div class=\"line\"><span class=\"comment\"># task = loop.create_task(coroutine)</span></div><div class=\"line\"><span class=\"comment\"># 方法二:通过 asyncio 的 ensure_future() 方法, 将coroutine封装成task对象,这样可以不借助于loop来定义,</span></div><div class=\"line\"><span class=\"comment\">#即使没有声明loop也可以提前定义好task对象</span></div><div class=\"line\">task = asyncio.ensure_future(coroutine)</div><div class=\"line\">task.add_done_callback(callback)    <span class=\"comment\"># task添加回调函数(通过task.result()获取返回值)</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'Task:'</span>, task)  <span class=\"comment\"># 查看任务task的状态</span></div><div class=\"line\"><span class=\"comment\"># Task: &lt;Task pending coro=&lt;execute() ...</span></div><div class=\"line\"><span class=\"comment\"># 将协程对象注册到事件循环中</span></div><div class=\"line\">loop.run_until_complete(task)</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'Task:'</span>, task)</div><div class=\"line\"><span class=\"comment\"># Task: &lt;Task finished coro=&lt;execute() done ...</span></div><div class=\"line\">print(<span class=\"string\">'Task result: '</span>, task.result()) <span class=\"comment\"># task在fiinished状态时,直接读取task的result方法，得到返回值</span></div><div class=\"line\"><span class=\"comment\"># loop.run_until_complete(coroutine)</span></div><div class=\"line\">print(<span class=\"string\">'After calling loop'</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"多任务执行\"><a href=\"#多任务执行\" class=\"headerlink\" title=\"多任务执行\"></a>多任务执行</h5><p>定义一个task列表，然后使用asyncio的wait()方法即可执行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"> </div><div class=\"line\">now = time.time()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">num</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(number)</div><div class=\"line\">    <span class=\"keyword\">return</span> number</div><div class=\"line\"> </div><div class=\"line\">tasks = [asyncio.ensure_future(num(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</div><div class=\"line\">print(<span class=\"string\">'Tasks-'</span>, tasks)</div><div class=\"line\">loop = asyncio.get_event_loop()</div><div class=\"line\">loop.run_until_complete(asyncio.wait(tasks))    <span class=\"comment\"># asyncio.wait()用于执行tasks</span></div><div class=\"line\">print(<span class=\"string\">'Tasks-'</span>, tasks)</div><div class=\"line\"><span class=\"keyword\">for</span> task <span class=\"keyword\">in</span> tasks:</div><div class=\"line\">    print(<span class=\"string\">'Task Result: '</span>, task.result())</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'time--&gt;'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>\n<h5 id=\"协程嵌套\"><a href=\"#协程嵌套\" class=\"headerlink\" title=\"协程嵌套\"></a>协程嵌套</h5><p>即一个协程中await了另外一个协程<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">now = time.time()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">num</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(number)</div><div class=\"line\">    <span class=\"keyword\">return</span> number</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = [asyncio.ensure_future(num(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>)]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># _tasks = await asyncio.gather(*tasks) #  asyncio.gather创建协程对象,await的返回值就是协程运行的结果</span></div><div class=\"line\">    _tasks, pending = <span class=\"keyword\">await</span> asyncio.wait(tasks) <span class=\"comment\"># asyncio.wait挂起协程,Returns two sets of Future: (done, pending).</span></div><div class=\"line\">    print(<span class=\"string\">'-----'</span>, _tasks )</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> task <span class=\"keyword\">in</span> _tasks: <span class=\"comment\"># 在函数里面返回结果</span></div><div class=\"line\">        print((<span class=\"string\">'wait result task-&gt;'</span>, task.result()))</div><div class=\"line\">        print(<span class=\"string\">'gather result task-&gt;'</span>, task)</div><div class=\"line\">    <span class=\"keyword\">return</span> _tasks</div><div class=\"line\"> </div><div class=\"line\">loop = asyncio.get_event_loop()</div><div class=\"line\">results = loop.run_until_complete(main())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</div><div class=\"line\">    print((<span class=\"string\">'wait result task-&gt;'</span>, result.result()))</div><div class=\"line\">    <span class=\"comment\"># print('gather result task-&gt;', result)</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'TIME:'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><h4 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h4><p>同时开启多个任务，但一次只执行一个，当执行的任务遇到阻塞，就切换到下一个任务继续执行，<br>以期节省阻塞所占用的时间</p>\n<p>要实现异步处理，需要有挂起的操作，当一个任务需要等待 IO 结果的时候，可以挂起当前任务，转而去执行其他任务</p>\n<ol>\n<li>event_loop： 事件循环，把一些函数注册到这个事件循环中，当条件满足时，就执行对应的方法</li>\n<li>coroutine： 协程，可以看做一个协程对象类型，把协程对象注册到事件循环中，满足条件时被调用； async关键字来定义一个方法，这个方法在调用时不会立刻执行，而是返回一个协程对象</li>\n<li>task： 任务，它是对协程对象的进一步封装，包含了任务的各个状态</li>\n<li>future： 代表即将执行或者还没有执行的任务的结果，可以等同与task</li>\n<li>async： 用于定义协程， 协程函数不能直接调用，直接调用协程函数得到的是协程对象(<coroutine object execute at 0x10359c938>)</li>\n<li>await：用来将阻塞方法进行挂起</li>\n</ol>\n<h4 id=\"await-后的对象必须为如下的格式\"><a href=\"#await-后的对象必须为如下的格式\" class=\"headerlink\" title=\"await 后的对象必须为如下的格式\"></a>await 后的对象必须为如下的格式</h4><ul>\n<li>原生的coroutine对象</li>\n<li>一个由types.coroutine()修饰的生成器，这个生成器可以返回 coroutine 对象</li>\n<li>一个包含 __await 方法的对象返回的一个迭代器。</li>\n</ul>\n<h4 id=\"asyncio模块实例\"><a href=\"#asyncio模块实例\" class=\"headerlink\" title=\"asyncio模块实例\"></a>asyncio模块实例</h4><h5 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'No. '</span>, x)</div><div class=\"line\"> </div><div class=\"line\">coroutine = execute(<span class=\"number\">2</span>)</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'Coroutine--&gt;'</span>, coroutine)    <span class=\"comment\"># 协程对象</span></div><div class=\"line\">print(<span class=\"string\">'After calling execute'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建事件循环</span></div><div class=\"line\">loop = asyncio.get_event_loop()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 方法一:将coroutine封装成task对象</span></div><div class=\"line\"><span class=\"comment\"># task = loop.create_task(coroutine)</span></div><div class=\"line\"><span class=\"comment\"># 方法二:通过 asyncio 的 ensure_future() 方法, 将coroutine封装成task对象,这样可以不借助于loop来定义,</span></div><div class=\"line\"><span class=\"comment\">#即使没有声明loop也可以提前定义好task对象</span></div><div class=\"line\">task = asyncio.ensure_future(coroutine)</div><div class=\"line\">task.add_done_callback(callback)    <span class=\"comment\"># task添加回调函数(通过task.result()获取返回值)</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'Task:'</span>, task)  <span class=\"comment\"># 查看任务task的状态</span></div><div class=\"line\"><span class=\"comment\"># Task: &lt;Task pending coro=&lt;execute() ...</span></div><div class=\"line\"><span class=\"comment\"># 将协程对象注册到事件循环中</span></div><div class=\"line\">loop.run_until_complete(task)</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'Task:'</span>, task)</div><div class=\"line\"><span class=\"comment\"># Task: &lt;Task finished coro=&lt;execute() done ...</span></div><div class=\"line\">print(<span class=\"string\">'Task result: '</span>, task.result()) <span class=\"comment\"># task在fiinished状态时,直接读取task的result方法，得到返回值</span></div><div class=\"line\"><span class=\"comment\"># loop.run_until_complete(coroutine)</span></div><div class=\"line\">print(<span class=\"string\">'After calling loop'</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"多任务执行\"><a href=\"#多任务执行\" class=\"headerlink\" title=\"多任务执行\"></a>多任务执行</h5><p>定义一个task列表，然后使用asyncio的wait()方法即可执行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"> </div><div class=\"line\">now = time.time()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">num</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(number)</div><div class=\"line\">    <span class=\"keyword\">return</span> number</div><div class=\"line\"> </div><div class=\"line\">tasks = [asyncio.ensure_future(num(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</div><div class=\"line\">print(<span class=\"string\">'Tasks-'</span>, tasks)</div><div class=\"line\">loop = asyncio.get_event_loop()</div><div class=\"line\">loop.run_until_complete(asyncio.wait(tasks))    <span class=\"comment\"># asyncio.wait()用于执行tasks</span></div><div class=\"line\">print(<span class=\"string\">'Tasks-'</span>, tasks)</div><div class=\"line\"><span class=\"keyword\">for</span> task <span class=\"keyword\">in</span> tasks:</div><div class=\"line\">    print(<span class=\"string\">'Task Result: '</span>, task.result())</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'time--&gt;'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>\n<h5 id=\"协程嵌套\"><a href=\"#协程嵌套\" class=\"headerlink\" title=\"协程嵌套\"></a>协程嵌套</h5><p>即一个协程中await了另外一个协程<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> asyncio</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">now = time.time()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">num</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(number)</div><div class=\"line\">    <span class=\"keyword\">return</span> number</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tasks = [asyncio.ensure_future(num(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>)]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># _tasks = await asyncio.gather(*tasks) #  asyncio.gather创建协程对象,await的返回值就是协程运行的结果</span></div><div class=\"line\">    _tasks, pending = <span class=\"keyword\">await</span> asyncio.wait(tasks) <span class=\"comment\"># asyncio.wait挂起协程,Returns two sets of Future: (done, pending).</span></div><div class=\"line\">    print(<span class=\"string\">'-----'</span>, _tasks )</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> task <span class=\"keyword\">in</span> _tasks: <span class=\"comment\"># 在函数里面返回结果</span></div><div class=\"line\">        print((<span class=\"string\">'wait result task-&gt;'</span>, task.result()))</div><div class=\"line\">        print(<span class=\"string\">'gather result task-&gt;'</span>, task)</div><div class=\"line\">    <span class=\"keyword\">return</span> _tasks</div><div class=\"line\"> </div><div class=\"line\">loop = asyncio.get_event_loop()</div><div class=\"line\">results = loop.run_until_complete(main())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</div><div class=\"line\">    print((<span class=\"string\">'wait result task-&gt;'</span>, result.result()))</div><div class=\"line\">    <span class=\"comment\"># print('gather result task-&gt;', result)</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">'TIME:'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>\n"},{"title":"Python Descriptor描述符02","date":"2018-02-01T14:30:30.000Z","_content":"#### 说明\n- 使用描述符时，实例对象的属性访问会触发描述符的\\_\\_get\\_\\_方法\n- 使用描述符时，实例对象的属性赋值会触发描述符的\\_\\_set\\_\\_方法\n- 通过obj.\\_\\_dict\\_\\_[xxx]=yyy 赋值会跳过描述符\n- 没有\\_\\_get\\_\\_方法的覆盖描述符，给对象的属性赋值会触发\\_\\_set\\_\\_方法，读取属性时会直接从实例中返回新赋予的值，而不会返回描述符对象， 也就是说读取操作实例属性会遮盖描述符，直接从\\_\\_dict\\_\\_中获取\n- 非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性,即获取属性的值将直接通过\\_\\_dict\\_\\_中获取\n- 类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上\n- 类中定义的函数属于绑定方法，因为用户定义的函数都有get方法，所以依附到类上，相当于描述符，为非覆盖性描述符\n\n#### 概念描述\n- 描述符类： 实现描述符协议的类\n- 托管类： 把描述符实例声明为类属性的类\n- 描述符实例： 描述符类的各个实例，声明为托管类的类属性\n- 托管实例：托管类的实例\n- 储存属性： 托管实例中存储自身托管属性的属性\n- 托管属性： 托管类中由描述符实例处理的公开属性，值存储在储存属性中， 也就是说，描述符实例和储存属性为托管属性建立了基础\n\n#### 描述符实例\n\n```python\nclass Quantity:\n    \"\"\" 描述符类 \"\"\"\n    __counter = 0\n \n    def __init__(self):\n        cls = self.__class__\n        prefix = cls.__name__\n        index = cls.__counter\n        self.storage_name = '_{}#{}'.format(prefix, index)\n        cls.__counter += 1\n \n    def __get__(self, instance, owner):\n        \"\"\"\n        获取对应的属性时, 调用该方法\n        :param instance: 描述符实例\n        :param owner: 托管类的引用(type),通过描述符从托管类中获取属性时用得到\n        :return:\n        \"\"\"\n        if instance is None:\n            return self\n        return getattr(instance, self.storage_name)\n \n    def __set__(self, instance, value):\n        \"\"\"\n        :param instance: 描述符实例\n        :param value: 托管实例设置的值\n        :return:\n        \"\"\"\n        if value > 0:\n            setattr(instance, self.storage_name, value)\n        else:\n            raise ValueError('value must be > 0.')\n \n \nclass LineItem:\n    \"\"\" 托管类 \"\"\"\n    weight = Quantity() # 描述符实例\n    price = Quantity()   # 描述符实例\n    # weight, price 为储存属性\n \n    def __init__(self,desc, weight, price):\n        self.desc = desc\n        self.weight = weight\n        self.price = price\n        # self.weight, self.price 为托管属性\n \n    def subtotal(self):\n        return self.weight * self.price\n \n# 描述符实例为引用类的类属性\n \nline = LineItem('test01', 12, 12.3) # 托管实例\n \nprint(line.weight)  # 实例对象的属性访问会触发描述符的__get__方法\n \nprint(line.subtotal())\n \nprint(LineItem.weight)\n```\n\n#### 描述符实例重构\n```python\nimport abc\n \n \nclass AutoStorage:\n    __counter = 0\n \n    def __init__(self):\n        cls = self.__class__\n        prefix = cls.__name__\n        index = cls.__counter\n        self.storage_name = '_{}#{}'.format(prefix, index)\n        cls.__counter += 1\n \n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return getattr(instance, self.storage_name)\n \n    def __set__(self, instance, value):\n        setattr(instance, self.storage_name, value)\n \n \nclass Validated(abc.ABC, AutoStorage):\n    \"\"\" 验证相关模块 \"\"\"\n \n    def __set__(self, instance, value):\n        \"\"\" 把验证操作委托给validate方法\"\"\"\n        value = self.validate(instance, value)\n        super(Validated, self).__set__(instance, value)\n \n    @abc.abstractmethod\n    def validate(self, instance, value):\n        \"\"\" 抽象方法 \"\"\"\n        pass\n \n \nclass Quantity(Validated):\n    def validate(self, instance, value):\n        if value <= 0:\n            raise ValueError('value must be > 0')\n        return value\n \n \nclass NonBlank(Validated):\n    def validate(self, instance, value):\n        value = value.strip()\n        if len(value) == 0:\n            raise ValueError('value cannot be empty or blank')\n        return value\n \n \nclass LineItem:\n    \"\"\" 托管类 \"\"\"\n    weight = Quantity()  # 描述符实例\n    price = Quantity()  # 描述符实例\n    desc = NonBlank()  # 描述符实例\n \n    # weight, price 为储存属性\n \n    def __init__(self, desc, weight, price):\n        self.desc = desc\n        self.weight = weight\n        self.price = price\n        # self.weight, self.price 为托管属性\n \n    def subtotal(self):\n        return self.weight * self.price\n \n \nline = LineItem('abc', 12, 12.3)\nprint(line.subtotal())\n```\n#### 覆盖型和非覆盖型描述符对比\n- 覆盖型描述符 实现了\\_\\_set\\_\\_方法的描述符,实现了set方法会覆盖对实例属性的赋值操作\n\n- 非覆盖型描述符 没有实现\\_\\_set\\_\\_方法的描述符是非覆盖型描述符，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性\n\n-  类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上\n\n```python\ndef cls_name(obj_or_cls):\n    cls = type(obj_or_cls)\n    if cls is type:\n        cls = obj_or_cls\n    return cls.__name__.split('.')[-1]\n \n \ndef display(obj):\n    cls = type(obj)\n    if cls is type:\n        return '<class {}>'.format(obj.__name__)\n    elif cls in [type(None), int]:\n        return repr(obj)\n    else:\n        return '<{} object>'.format(cls_name(obj))\n \n \ndef print_args(name, *args):\n    pseudo_args = ','.join(display(x) for x in args)\n    print('->{}.__{}__({})'.format(cls_name(args[0]), name, pseudo_args))\n \n \nclass Overriding:\n    \"\"\" 数据描述符 \"\"\"\n \n    def __get__(self, instance, owner):\n        print_args('get', self, instance, owner)\n \n    def __set__(self, instance, value):\n        print_args('set', self, instance, value)\n \n \nclass OverridingNoGet:\n    \"\"\" 没有 __get__方法的覆盖型描述符 \"\"\"\n \n    def __set__(self, instance, value):\n        print_args('set', self, instance, value)\n \n \nclass NonOverriding:\n    \"\"\" 非数据描述符\"\"\"\n \n    def __get__(self, instance, owner):\n        print_args('get', self, instance, owner)\n \n \nclass Managed:\n    over = Overriding()\n    over_no_get = OverridingNoGet()\n    non_over = NonOverriding()\n \n    def span(self):\n        print('-> Managed.spam({})'.format(display(self)))\n \n \n################覆盖型描述符##################\n\"\"\"获取和设置值 都是通过描述符的get和set方法完成\"\"\"\nobj = Managed()\nobj.over\n# Overriding.__get__(<Overriding object>,<Managed object>,<class Managed>)\nManaged.over\n# Overriding.__get__(<Overriding object>,None,<class Managed>)\n \nobj.over = 7\n# Overriding.__set__(<Overriding object>,<Managed object>,7)\nobj.over\n# Overriding.__get__(<Overriding object>,<Managed object>,<class Managed>)\n \nobj.__dict__['over'] = 8  # 跳过描述符,通过obj.__dict__赋值\nprint(vars(obj))\n# {'over': 8}\nprint(obj.over)\n# None\nobj.over  # obj.over描述符仍会覆盖取值(obj.over)这个操作\n# Overriding.__get__(<Overriding object>,<Managed object>,<class Managed>)\n \n \n##########没有__get__()方法的覆盖型描述符##########\n\"\"\"没有__get__方法的覆盖描述符,给对象的属性赋值会触发__set__方法,读取属性时会直接从实例中返回新赋予的值,而不会返回描述符对象,读取操作实例属性会遮盖描述符\"\"\"\nprint(obj.over_no_get)\n# <__main__.O\n# verridingNoGet object at 0x102973358>\nprint(Managed.over_no_get)\n# <__main__.OverridingNoGet object at 0x102973358>\nobj.over_no_get = 7\n# OverridingNoGet.__set__(<OverridingNoGet object>,<Managed object>,7)\nprint(obj.over_no_get)\n# <__main__.OverridingNoGet object at 0x101873358>\nobj.__dict__['over_no_get'] = 9\nprint(obj.over_no_get)\t# 通过类属性取值,没有通过描述符,因为没有__get__方法\n# 9\nobj.over_no_get = 7\n# OverridingNoGet.__set__(<OverridingNoGet object>,<Managed object>,7)\nprint(obj.over_no_get)  # 只要有同名的实例属性,描述符会被遮盖,默认的实例属性获取方法遮盖描述符\n# 9\n \n \n########## 非覆盖型描述符 ##########\n\"\"\"\n非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性\n\"\"\"\n \nobj1 = Managed()\nobj1.non_over\n# NonOverriding.__get__(<NonOverriding object>,<Managed object>,<class Managed>)\nobj1.non_over = 7\nprint(obj1.non_over)\t# 实例属性赋值会遮盖描述符__get__方法\n# 7\nManaged.non_over\n# NonOverriding.__get__(<NonOverriding object>,None,<class Managed>)\ndel obj1.non_over\nobj1.non_over\t# 删除实例属性后,又从描述符__get__方法中获取\n# NonOverriding.__get__(<NonOverriding object>,<Managed object>,<class Managed>)\n \n################################\n# 在类中覆盖描述符\n################################\nobj2 = Managed()\n \n# 覆盖类中的描述符属性\nManaged.over = 1\nManaged.over_no_get = 2\nManaged.non_over = 3\n \nprint(obj2.over, obj2.over_no_get, obj2.non_over)\n# 1 2 3\n```\n#### 描述符用法\n1. 使用特性以保持简单\n2. 只读描述符必须有\\_\\_set\\_\\_方法，如果需要实现只读属性，__get__和__set__方法必须都实现，否则实例的同名属性会遮盖描述符，只读属性的\\_\\_set\\_\\_方法只需抛出AttributeError异常，并提供合适的错误信息\n3. 用于验证的描述符可以只有\\_\\_set\\_\\_方法\n4. 仅有__get__方法的描述符可以实现高效缓存，同名实例属性会遮盖描述符\n5. 非特殊的方法可以被实例属性遮盖， 函数和方法都只实现了__get__方法，不会处理同名实例属性的赋值操作\n\n以上内容学习记录参照《流畅的python》 第20章 属性描述符\n","source":"_posts/python-descriptor02.md","raw":"---\ntitle: Python Descriptor描述符02\ndate: 2018-02-01 22:30:30\ntags:\n  - Descriptor\ncategories:\n  - python\n---\n#### 说明\n- 使用描述符时，实例对象的属性访问会触发描述符的\\_\\_get\\_\\_方法\n- 使用描述符时，实例对象的属性赋值会触发描述符的\\_\\_set\\_\\_方法\n- 通过obj.\\_\\_dict\\_\\_[xxx]=yyy 赋值会跳过描述符\n- 没有\\_\\_get\\_\\_方法的覆盖描述符，给对象的属性赋值会触发\\_\\_set\\_\\_方法，读取属性时会直接从实例中返回新赋予的值，而不会返回描述符对象， 也就是说读取操作实例属性会遮盖描述符，直接从\\_\\_dict\\_\\_中获取\n- 非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性,即获取属性的值将直接通过\\_\\_dict\\_\\_中获取\n- 类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上\n- 类中定义的函数属于绑定方法，因为用户定义的函数都有get方法，所以依附到类上，相当于描述符，为非覆盖性描述符\n\n#### 概念描述\n- 描述符类： 实现描述符协议的类\n- 托管类： 把描述符实例声明为类属性的类\n- 描述符实例： 描述符类的各个实例，声明为托管类的类属性\n- 托管实例：托管类的实例\n- 储存属性： 托管实例中存储自身托管属性的属性\n- 托管属性： 托管类中由描述符实例处理的公开属性，值存储在储存属性中， 也就是说，描述符实例和储存属性为托管属性建立了基础\n\n#### 描述符实例\n\n```python\nclass Quantity:\n    \"\"\" 描述符类 \"\"\"\n    __counter = 0\n \n    def __init__(self):\n        cls = self.__class__\n        prefix = cls.__name__\n        index = cls.__counter\n        self.storage_name = '_{}#{}'.format(prefix, index)\n        cls.__counter += 1\n \n    def __get__(self, instance, owner):\n        \"\"\"\n        获取对应的属性时, 调用该方法\n        :param instance: 描述符实例\n        :param owner: 托管类的引用(type),通过描述符从托管类中获取属性时用得到\n        :return:\n        \"\"\"\n        if instance is None:\n            return self\n        return getattr(instance, self.storage_name)\n \n    def __set__(self, instance, value):\n        \"\"\"\n        :param instance: 描述符实例\n        :param value: 托管实例设置的值\n        :return:\n        \"\"\"\n        if value > 0:\n            setattr(instance, self.storage_name, value)\n        else:\n            raise ValueError('value must be > 0.')\n \n \nclass LineItem:\n    \"\"\" 托管类 \"\"\"\n    weight = Quantity() # 描述符实例\n    price = Quantity()   # 描述符实例\n    # weight, price 为储存属性\n \n    def __init__(self,desc, weight, price):\n        self.desc = desc\n        self.weight = weight\n        self.price = price\n        # self.weight, self.price 为托管属性\n \n    def subtotal(self):\n        return self.weight * self.price\n \n# 描述符实例为引用类的类属性\n \nline = LineItem('test01', 12, 12.3) # 托管实例\n \nprint(line.weight)  # 实例对象的属性访问会触发描述符的__get__方法\n \nprint(line.subtotal())\n \nprint(LineItem.weight)\n```\n\n#### 描述符实例重构\n```python\nimport abc\n \n \nclass AutoStorage:\n    __counter = 0\n \n    def __init__(self):\n        cls = self.__class__\n        prefix = cls.__name__\n        index = cls.__counter\n        self.storage_name = '_{}#{}'.format(prefix, index)\n        cls.__counter += 1\n \n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return getattr(instance, self.storage_name)\n \n    def __set__(self, instance, value):\n        setattr(instance, self.storage_name, value)\n \n \nclass Validated(abc.ABC, AutoStorage):\n    \"\"\" 验证相关模块 \"\"\"\n \n    def __set__(self, instance, value):\n        \"\"\" 把验证操作委托给validate方法\"\"\"\n        value = self.validate(instance, value)\n        super(Validated, self).__set__(instance, value)\n \n    @abc.abstractmethod\n    def validate(self, instance, value):\n        \"\"\" 抽象方法 \"\"\"\n        pass\n \n \nclass Quantity(Validated):\n    def validate(self, instance, value):\n        if value <= 0:\n            raise ValueError('value must be > 0')\n        return value\n \n \nclass NonBlank(Validated):\n    def validate(self, instance, value):\n        value = value.strip()\n        if len(value) == 0:\n            raise ValueError('value cannot be empty or blank')\n        return value\n \n \nclass LineItem:\n    \"\"\" 托管类 \"\"\"\n    weight = Quantity()  # 描述符实例\n    price = Quantity()  # 描述符实例\n    desc = NonBlank()  # 描述符实例\n \n    # weight, price 为储存属性\n \n    def __init__(self, desc, weight, price):\n        self.desc = desc\n        self.weight = weight\n        self.price = price\n        # self.weight, self.price 为托管属性\n \n    def subtotal(self):\n        return self.weight * self.price\n \n \nline = LineItem('abc', 12, 12.3)\nprint(line.subtotal())\n```\n#### 覆盖型和非覆盖型描述符对比\n- 覆盖型描述符 实现了\\_\\_set\\_\\_方法的描述符,实现了set方法会覆盖对实例属性的赋值操作\n\n- 非覆盖型描述符 没有实现\\_\\_set\\_\\_方法的描述符是非覆盖型描述符，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性\n\n-  类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上\n\n```python\ndef cls_name(obj_or_cls):\n    cls = type(obj_or_cls)\n    if cls is type:\n        cls = obj_or_cls\n    return cls.__name__.split('.')[-1]\n \n \ndef display(obj):\n    cls = type(obj)\n    if cls is type:\n        return '<class {}>'.format(obj.__name__)\n    elif cls in [type(None), int]:\n        return repr(obj)\n    else:\n        return '<{} object>'.format(cls_name(obj))\n \n \ndef print_args(name, *args):\n    pseudo_args = ','.join(display(x) for x in args)\n    print('->{}.__{}__({})'.format(cls_name(args[0]), name, pseudo_args))\n \n \nclass Overriding:\n    \"\"\" 数据描述符 \"\"\"\n \n    def __get__(self, instance, owner):\n        print_args('get', self, instance, owner)\n \n    def __set__(self, instance, value):\n        print_args('set', self, instance, value)\n \n \nclass OverridingNoGet:\n    \"\"\" 没有 __get__方法的覆盖型描述符 \"\"\"\n \n    def __set__(self, instance, value):\n        print_args('set', self, instance, value)\n \n \nclass NonOverriding:\n    \"\"\" 非数据描述符\"\"\"\n \n    def __get__(self, instance, owner):\n        print_args('get', self, instance, owner)\n \n \nclass Managed:\n    over = Overriding()\n    over_no_get = OverridingNoGet()\n    non_over = NonOverriding()\n \n    def span(self):\n        print('-> Managed.spam({})'.format(display(self)))\n \n \n################覆盖型描述符##################\n\"\"\"获取和设置值 都是通过描述符的get和set方法完成\"\"\"\nobj = Managed()\nobj.over\n# Overriding.__get__(<Overriding object>,<Managed object>,<class Managed>)\nManaged.over\n# Overriding.__get__(<Overriding object>,None,<class Managed>)\n \nobj.over = 7\n# Overriding.__set__(<Overriding object>,<Managed object>,7)\nobj.over\n# Overriding.__get__(<Overriding object>,<Managed object>,<class Managed>)\n \nobj.__dict__['over'] = 8  # 跳过描述符,通过obj.__dict__赋值\nprint(vars(obj))\n# {'over': 8}\nprint(obj.over)\n# None\nobj.over  # obj.over描述符仍会覆盖取值(obj.over)这个操作\n# Overriding.__get__(<Overriding object>,<Managed object>,<class Managed>)\n \n \n##########没有__get__()方法的覆盖型描述符##########\n\"\"\"没有__get__方法的覆盖描述符,给对象的属性赋值会触发__set__方法,读取属性时会直接从实例中返回新赋予的值,而不会返回描述符对象,读取操作实例属性会遮盖描述符\"\"\"\nprint(obj.over_no_get)\n# <__main__.O\n# verridingNoGet object at 0x102973358>\nprint(Managed.over_no_get)\n# <__main__.OverridingNoGet object at 0x102973358>\nobj.over_no_get = 7\n# OverridingNoGet.__set__(<OverridingNoGet object>,<Managed object>,7)\nprint(obj.over_no_get)\n# <__main__.OverridingNoGet object at 0x101873358>\nobj.__dict__['over_no_get'] = 9\nprint(obj.over_no_get)\t# 通过类属性取值,没有通过描述符,因为没有__get__方法\n# 9\nobj.over_no_get = 7\n# OverridingNoGet.__set__(<OverridingNoGet object>,<Managed object>,7)\nprint(obj.over_no_get)  # 只要有同名的实例属性,描述符会被遮盖,默认的实例属性获取方法遮盖描述符\n# 9\n \n \n########## 非覆盖型描述符 ##########\n\"\"\"\n非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性\n\"\"\"\n \nobj1 = Managed()\nobj1.non_over\n# NonOverriding.__get__(<NonOverriding object>,<Managed object>,<class Managed>)\nobj1.non_over = 7\nprint(obj1.non_over)\t# 实例属性赋值会遮盖描述符__get__方法\n# 7\nManaged.non_over\n# NonOverriding.__get__(<NonOverriding object>,None,<class Managed>)\ndel obj1.non_over\nobj1.non_over\t# 删除实例属性后,又从描述符__get__方法中获取\n# NonOverriding.__get__(<NonOverriding object>,<Managed object>,<class Managed>)\n \n################################\n# 在类中覆盖描述符\n################################\nobj2 = Managed()\n \n# 覆盖类中的描述符属性\nManaged.over = 1\nManaged.over_no_get = 2\nManaged.non_over = 3\n \nprint(obj2.over, obj2.over_no_get, obj2.non_over)\n# 1 2 3\n```\n#### 描述符用法\n1. 使用特性以保持简单\n2. 只读描述符必须有\\_\\_set\\_\\_方法，如果需要实现只读属性，__get__和__set__方法必须都实现，否则实例的同名属性会遮盖描述符，只读属性的\\_\\_set\\_\\_方法只需抛出AttributeError异常，并提供合适的错误信息\n3. 用于验证的描述符可以只有\\_\\_set\\_\\_方法\n4. 仅有__get__方法的描述符可以实现高效缓存，同名实例属性会遮盖描述符\n5. 非特殊的方法可以被实例属性遮盖， 函数和方法都只实现了__get__方法，不会处理同名实例属性的赋值操作\n\n以上内容学习记录参照《流畅的python》 第20章 属性描述符\n","slug":"python-descriptor02","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xf0041ct8uqxruez48","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li>使用描述符时，实例对象的属性访问会触发描述符的__get__方法</li>\n<li>使用描述符时，实例对象的属性赋值会触发描述符的__set__方法</li>\n<li>通过obj.__dict__[xxx]=yyy 赋值会跳过描述符</li>\n<li>没有__get__方法的覆盖描述符，给对象的属性赋值会触发__set__方法，读取属性时会直接从实例中返回新赋予的值，而不会返回描述符对象， 也就是说读取操作实例属性会遮盖描述符，直接从__dict__中获取</li>\n<li>非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性,即获取属性的值将直接通过__dict__中获取</li>\n<li>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</li>\n<li>类中定义的函数属于绑定方法，因为用户定义的函数都有get方法，所以依附到类上，相当于描述符，为非覆盖性描述符</li>\n</ul>\n<h4 id=\"概念描述\"><a href=\"#概念描述\" class=\"headerlink\" title=\"概念描述\"></a>概念描述</h4><ul>\n<li>描述符类： 实现描述符协议的类</li>\n<li>托管类： 把描述符实例声明为类属性的类</li>\n<li>描述符实例： 描述符类的各个实例，声明为托管类的类属性</li>\n<li>托管实例：托管类的实例</li>\n<li>储存属性： 托管实例中存储自身托管属性的属性</li>\n<li>托管属性： 托管类中由描述符实例处理的公开属性，值存储在储存属性中， 也就是说，描述符实例和储存属性为托管属性建立了基础</li>\n</ul>\n<h4 id=\"描述符实例\"><a href=\"#描述符实例\" class=\"headerlink\" title=\"描述符实例\"></a>描述符实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quantity</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 描述符类 \"\"\"</span></div><div class=\"line\">    __counter = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        cls = self.__class__</div><div class=\"line\">        prefix = cls.__name__</div><div class=\"line\">        index = cls.__counter</div><div class=\"line\">        self.storage_name = <span class=\"string\">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class=\"line\">        cls.__counter += <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        获取对应的属性时, 调用该方法</div><div class=\"line\">        :param instance: 描述符实例</div><div class=\"line\">        :param owner: 托管类的引用(type),通过描述符从托管类中获取属性时用得到</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"keyword\">return</span> getattr(instance, self.storage_name)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        :param instance: 描述符实例</div><div class=\"line\">        :param value: 托管实例设置的值</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        <span class=\"keyword\">if</span> value &gt; <span class=\"number\">0</span>:</div><div class=\"line\">            setattr(instance, self.storage_name, value)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value must be &gt; 0.'</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 托管类 \"\"\"</span></div><div class=\"line\">    weight = Quantity() <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    price = Quantity()   <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    <span class=\"comment\"># weight, price 为储存属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,desc, weight, price)</span>:</span></div><div class=\"line\">        self.desc = desc</div><div class=\"line\">        self.weight = weight</div><div class=\"line\">        self.price = price</div><div class=\"line\">        <span class=\"comment\"># self.weight, self.price 为托管属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subtotal</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.weight * self.price</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 描述符实例为引用类的类属性</span></div><div class=\"line\"> </div><div class=\"line\">line = LineItem(<span class=\"string\">'test01'</span>, <span class=\"number\">12</span>, <span class=\"number\">12.3</span>) <span class=\"comment\"># 托管实例</span></div><div class=\"line\"> </div><div class=\"line\">print(line.weight)  <span class=\"comment\"># 实例对象的属性访问会触发描述符的__get__方法</span></div><div class=\"line\"> </div><div class=\"line\">print(line.subtotal())</div><div class=\"line\"> </div><div class=\"line\">print(LineItem.weight)</div></pre></td></tr></table></figure>\n<h4 id=\"描述符实例重构\"><a href=\"#描述符实例重构\" class=\"headerlink\" title=\"描述符实例重构\"></a>描述符实例重构</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> abc</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoStorage</span>:</span></div><div class=\"line\">    __counter = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        cls = self.__class__</div><div class=\"line\">        prefix = cls.__name__</div><div class=\"line\">        index = cls.__counter</div><div class=\"line\">        self.storage_name = <span class=\"string\">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class=\"line\">        cls.__counter += <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"keyword\">return</span> getattr(instance, self.storage_name)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        setattr(instance, self.storage_name, value)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Validated</span><span class=\"params\">(abc.ABC, AutoStorage)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 验证相关模块 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 把验证操作委托给validate方法\"\"\"</span></div><div class=\"line\">        value = self.validate(instance, value)</div><div class=\"line\">        super(Validated, self).__set__(instance, value)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @abc.abstractmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 抽象方法 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quantity</span><span class=\"params\">(Validated)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value must be &gt; 0'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonBlank</span><span class=\"params\">(Validated)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        value = value.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> len(value) == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value cannot be empty or blank'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 托管类 \"\"\"</span></div><div class=\"line\">    weight = Quantity()  <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    price = Quantity()  <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    desc = NonBlank()  <span class=\"comment\"># 描述符实例</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># weight, price 为储存属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, desc, weight, price)</span>:</span></div><div class=\"line\">        self.desc = desc</div><div class=\"line\">        self.weight = weight</div><div class=\"line\">        self.price = price</div><div class=\"line\">        <span class=\"comment\"># self.weight, self.price 为托管属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subtotal</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.weight * self.price</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">line = LineItem(<span class=\"string\">'abc'</span>, <span class=\"number\">12</span>, <span class=\"number\">12.3</span>)</div><div class=\"line\">print(line.subtotal())</div></pre></td></tr></table></figure>\n<h4 id=\"覆盖型和非覆盖型描述符对比\"><a href=\"#覆盖型和非覆盖型描述符对比\" class=\"headerlink\" title=\"覆盖型和非覆盖型描述符对比\"></a>覆盖型和非覆盖型描述符对比</h4><ul>\n<li><p>覆盖型描述符 实现了__set__方法的描述符,实现了set方法会覆盖对实例属性的赋值操作</p>\n</li>\n<li><p>非覆盖型描述符 没有实现__set__方法的描述符是非覆盖型描述符，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</p>\n</li>\n<li><p>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cls_name</span><span class=\"params\">(obj_or_cls)</span>:</span></div><div class=\"line\">    cls = type(obj_or_cls)</div><div class=\"line\">    <span class=\"keyword\">if</span> cls <span class=\"keyword\">is</span> type:</div><div class=\"line\">        cls = obj_or_cls</div><div class=\"line\">    <span class=\"keyword\">return</span> cls.__name__.split(<span class=\"string\">'.'</span>)[<span class=\"number\">-1</span>]</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(obj)</span>:</span></div><div class=\"line\">    cls = type(obj)</div><div class=\"line\">    <span class=\"keyword\">if</span> cls <span class=\"keyword\">is</span> type:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;class &#123;&#125;&gt;'</span>.format(obj.__name__)</div><div class=\"line\">    <span class=\"keyword\">elif</span> cls <span class=\"keyword\">in</span> [type(<span class=\"keyword\">None</span>), int]:</div><div class=\"line\">        <span class=\"keyword\">return</span> repr(obj)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;&#123;&#125; object&gt;'</span>.format(cls_name(obj))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_args</span><span class=\"params\">(name, *args)</span>:</span></div><div class=\"line\">    pseudo_args = <span class=\"string\">','</span>.join(display(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> args)</div><div class=\"line\">    print(<span class=\"string\">'-&gt;&#123;&#125;.__&#123;&#125;__(&#123;&#125;)'</span>.format(cls_name(args[<span class=\"number\">0</span>]), name, pseudo_args))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Overriding</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 数据描述符 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'get'</span>, self, instance, owner)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'set'</span>, self, instance, value)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverridingNoGet</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 没有 __get__方法的覆盖型描述符 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'set'</span>, self, instance, value)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonOverriding</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 非数据描述符\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'get'</span>, self, instance, owner)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Managed</span>:</span></div><div class=\"line\">    over = Overriding()</div><div class=\"line\">    over_no_get = OverridingNoGet()</div><div class=\"line\">    non_over = NonOverriding()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">span</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'-&gt; Managed.spam(&#123;&#125;)'</span>.format(display(self)))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">################覆盖型描述符##################</span></div><div class=\"line\"><span class=\"string\">\"\"\"获取和设置值 都是通过描述符的get和set方法完成\"\"\"</span></div><div class=\"line\">obj = Managed()</div><div class=\"line\">obj.over</div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\">Managed.over</div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\">obj.over = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\"># Overriding.__set__(&lt;Overriding object&gt;,&lt;Managed object&gt;,7)</span></div><div class=\"line\">obj.over</div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\">obj.__dict__[<span class=\"string\">'over'</span>] = <span class=\"number\">8</span>  <span class=\"comment\"># 跳过描述符,通过obj.__dict__赋值</span></div><div class=\"line\">print(vars(obj))</div><div class=\"line\"><span class=\"comment\"># &#123;'over': 8&#125;</span></div><div class=\"line\">print(obj.over)</div><div class=\"line\"><span class=\"comment\"># None</span></div><div class=\"line\">obj.over  <span class=\"comment\"># obj.over描述符仍会覆盖取值(obj.over)这个操作</span></div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">##########没有__get__()方法的覆盖型描述符##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"没有__get__方法的覆盖描述符,给对象的属性赋值会触发__set__方法,读取属性时会直接从实例中返回新赋予的值,而不会返回描述符对象,读取操作实例属性会遮盖描述符\"\"\"</span></div><div class=\"line\">print(obj.over_no_get)</div><div class=\"line\"><span class=\"comment\"># &lt;__main__.O</span></div><div class=\"line\"><span class=\"comment\"># verridingNoGet object at 0x102973358&gt;</span></div><div class=\"line\">print(Managed.over_no_get)</div><div class=\"line\"><span class=\"comment\"># &lt;__main__.OverridingNoGet object at 0x102973358&gt;</span></div><div class=\"line\">obj.over_no_get = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class=\"line\">print(obj.over_no_get)</div><div class=\"line\"><span class=\"comment\"># &lt;__main__.OverridingNoGet object at 0x101873358&gt;</span></div><div class=\"line\">obj.__dict__[<span class=\"string\">'over_no_get'</span>] = <span class=\"number\">9</span></div><div class=\"line\">print(obj.over_no_get)\t<span class=\"comment\"># 通过类属性取值,没有通过描述符,因为没有__get__方法</span></div><div class=\"line\"><span class=\"comment\"># 9</span></div><div class=\"line\">obj.over_no_get = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class=\"line\">print(obj.over_no_get)  <span class=\"comment\"># 只要有同名的实例属性,描述符会被遮盖,默认的实例属性获取方法遮盖描述符</span></div><div class=\"line\"><span class=\"comment\"># 9</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########## 非覆盖型描述符 ##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</div><div class=\"line\">\"\"\"</div><div class=\"line\"> </div><div class=\"line\">obj1 = Managed()</div><div class=\"line\">obj1.non_over</div><div class=\"line\"><span class=\"comment\"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\">obj1.non_over = <span class=\"number\">7</span></div><div class=\"line\">print(obj1.non_over)\t<span class=\"comment\"># 实例属性赋值会遮盖描述符__get__方法</span></div><div class=\"line\"><span class=\"comment\"># 7</span></div><div class=\"line\">Managed.non_over</div><div class=\"line\"><span class=\"comment\"># NonOverriding.__get__(&lt;NonOverriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class=\"line\"><span class=\"keyword\">del</span> obj1.non_over</div><div class=\"line\">obj1.non_over\t<span class=\"comment\"># 删除实例属性后,又从描述符__get__方法中获取</span></div><div class=\"line\"><span class=\"comment\"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">################################</span></div><div class=\"line\"><span class=\"comment\"># 在类中覆盖描述符</span></div><div class=\"line\"><span class=\"comment\">################################</span></div><div class=\"line\">obj2 = Managed()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 覆盖类中的描述符属性</span></div><div class=\"line\">Managed.over = <span class=\"number\">1</span></div><div class=\"line\">Managed.over_no_get = <span class=\"number\">2</span></div><div class=\"line\">Managed.non_over = <span class=\"number\">3</span></div><div class=\"line\"> </div><div class=\"line\">print(obj2.over, obj2.over_no_get, obj2.non_over)</div><div class=\"line\"><span class=\"comment\"># 1 2 3</span></div></pre></td></tr></table></figure>\n<h4 id=\"描述符用法\"><a href=\"#描述符用法\" class=\"headerlink\" title=\"描述符用法\"></a>描述符用法</h4><ol>\n<li>使用特性以保持简单</li>\n<li>只读描述符必须有__set__方法，如果需要实现只读属性，<strong>get</strong>和<strong>set</strong>方法必须都实现，否则实例的同名属性会遮盖描述符，只读属性的__set__方法只需抛出AttributeError异常，并提供合适的错误信息</li>\n<li>用于验证的描述符可以只有__set__方法</li>\n<li>仅有<strong>get</strong>方法的描述符可以实现高效缓存，同名实例属性会遮盖描述符</li>\n<li>非特殊的方法可以被实例属性遮盖， 函数和方法都只实现了<strong>get</strong>方法，不会处理同名实例属性的赋值操作</li>\n</ol>\n<p>以上内容学习记录参照《流畅的python》 第20章 属性描述符</p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li>使用描述符时，实例对象的属性访问会触发描述符的__get__方法</li>\n<li>使用描述符时，实例对象的属性赋值会触发描述符的__set__方法</li>\n<li>通过obj.__dict__[xxx]=yyy 赋值会跳过描述符</li>\n<li>没有__get__方法的覆盖描述符，给对象的属性赋值会触发__set__方法，读取属性时会直接从实例中返回新赋予的值，而不会返回描述符对象， 也就是说读取操作实例属性会遮盖描述符，直接从__dict__中获取</li>\n<li>非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性,即获取属性的值将直接通过__dict__中获取</li>\n<li>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</li>\n<li>类中定义的函数属于绑定方法，因为用户定义的函数都有get方法，所以依附到类上，相当于描述符，为非覆盖性描述符</li>\n</ul>\n<h4 id=\"概念描述\"><a href=\"#概念描述\" class=\"headerlink\" title=\"概念描述\"></a>概念描述</h4><ul>\n<li>描述符类： 实现描述符协议的类</li>\n<li>托管类： 把描述符实例声明为类属性的类</li>\n<li>描述符实例： 描述符类的各个实例，声明为托管类的类属性</li>\n<li>托管实例：托管类的实例</li>\n<li>储存属性： 托管实例中存储自身托管属性的属性</li>\n<li>托管属性： 托管类中由描述符实例处理的公开属性，值存储在储存属性中， 也就是说，描述符实例和储存属性为托管属性建立了基础</li>\n</ul>\n<h4 id=\"描述符实例\"><a href=\"#描述符实例\" class=\"headerlink\" title=\"描述符实例\"></a>描述符实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quantity</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 描述符类 \"\"\"</span></div><div class=\"line\">    __counter = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        cls = self.__class__</div><div class=\"line\">        prefix = cls.__name__</div><div class=\"line\">        index = cls.__counter</div><div class=\"line\">        self.storage_name = <span class=\"string\">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class=\"line\">        cls.__counter += <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        获取对应的属性时, 调用该方法</div><div class=\"line\">        :param instance: 描述符实例</div><div class=\"line\">        :param owner: 托管类的引用(type),通过描述符从托管类中获取属性时用得到</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"keyword\">return</span> getattr(instance, self.storage_name)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        :param instance: 描述符实例</div><div class=\"line\">        :param value: 托管实例设置的值</div><div class=\"line\">        :return:</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value &gt; <span class=\"number\">0</span>:</div><div class=\"line\">            setattr(instance, self.storage_name, value)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value must be &gt; 0.'</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 托管类 \"\"\"</span></div><div class=\"line\">    weight = Quantity() <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    price = Quantity()   <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    <span class=\"comment\"># weight, price 为储存属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,desc, weight, price)</span>:</span></div><div class=\"line\">        self.desc = desc</div><div class=\"line\">        self.weight = weight</div><div class=\"line\">        self.price = price</div><div class=\"line\">        <span class=\"comment\"># self.weight, self.price 为托管属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subtotal</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.weight * self.price</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 描述符实例为引用类的类属性</span></div><div class=\"line\"> </div><div class=\"line\">line = LineItem(<span class=\"string\">'test01'</span>, <span class=\"number\">12</span>, <span class=\"number\">12.3</span>) <span class=\"comment\"># 托管实例</span></div><div class=\"line\"> </div><div class=\"line\">print(line.weight)  <span class=\"comment\"># 实例对象的属性访问会触发描述符的__get__方法</span></div><div class=\"line\"> </div><div class=\"line\">print(line.subtotal())</div><div class=\"line\"> </div><div class=\"line\">print(LineItem.weight)</div></pre></td></tr></table></figure>\n<h4 id=\"描述符实例重构\"><a href=\"#描述符实例重构\" class=\"headerlink\" title=\"描述符实例重构\"></a>描述符实例重构</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> abc</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoStorage</span>:</span></div><div class=\"line\">    __counter = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        cls = self.__class__</div><div class=\"line\">        prefix = cls.__name__</div><div class=\"line\">        index = cls.__counter</div><div class=\"line\">        self.storage_name = <span class=\"string\">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</div><div class=\"line\">        cls.__counter += <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        <span class=\"keyword\">return</span> getattr(instance, self.storage_name)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        setattr(instance, self.storage_name, value)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Validated</span><span class=\"params\">(abc.ABC, AutoStorage)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 验证相关模块 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 把验证操作委托给validate方法\"\"\"</span></div><div class=\"line\">        value = self.validate(instance, value)</div><div class=\"line\">        super(Validated, self).__set__(instance, value)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @abc.abstractmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 抽象方法 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quantity</span><span class=\"params\">(Validated)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value must be &gt; 0'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonBlank</span><span class=\"params\">(Validated)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        value = value.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> len(value) == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value cannot be empty or blank'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 托管类 \"\"\"</span></div><div class=\"line\">    weight = Quantity()  <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    price = Quantity()  <span class=\"comment\"># 描述符实例</span></div><div class=\"line\">    desc = NonBlank()  <span class=\"comment\"># 描述符实例</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># weight, price 为储存属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, desc, weight, price)</span>:</span></div><div class=\"line\">        self.desc = desc</div><div class=\"line\">        self.weight = weight</div><div class=\"line\">        self.price = price</div><div class=\"line\">        <span class=\"comment\"># self.weight, self.price 为托管属性</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subtotal</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.weight * self.price</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">line = LineItem(<span class=\"string\">'abc'</span>, <span class=\"number\">12</span>, <span class=\"number\">12.3</span>)</div><div class=\"line\">print(line.subtotal())</div></pre></td></tr></table></figure>\n<h4 id=\"覆盖型和非覆盖型描述符对比\"><a href=\"#覆盖型和非覆盖型描述符对比\" class=\"headerlink\" title=\"覆盖型和非覆盖型描述符对比\"></a>覆盖型和非覆盖型描述符对比</h4><ul>\n<li><p>覆盖型描述符 实现了__set__方法的描述符,实现了set方法会覆盖对实例属性的赋值操作</p>\n</li>\n<li><p>非覆盖型描述符 没有实现__set__方法的描述符是非覆盖型描述符，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</p>\n</li>\n<li><p>类属性赋值能覆盖描述符属性，如果想控制设置类属性的操作，需要把描述符依附在类的类上，即依附在元类上</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cls_name</span><span class=\"params\">(obj_or_cls)</span>:</span></div><div class=\"line\">    cls = type(obj_or_cls)</div><div class=\"line\">    <span class=\"keyword\">if</span> cls <span class=\"keyword\">is</span> type:</div><div class=\"line\">        cls = obj_or_cls</div><div class=\"line\">    <span class=\"keyword\">return</span> cls.__name__.split(<span class=\"string\">'.'</span>)[<span class=\"number\">-1</span>]</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(obj)</span>:</span></div><div class=\"line\">    cls = type(obj)</div><div class=\"line\">    <span class=\"keyword\">if</span> cls <span class=\"keyword\">is</span> type:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;class &#123;&#125;&gt;'</span>.format(obj.__name__)</div><div class=\"line\">    <span class=\"keyword\">elif</span> cls <span class=\"keyword\">in</span> [type(<span class=\"keyword\">None</span>), int]:</div><div class=\"line\">        <span class=\"keyword\">return</span> repr(obj)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;&#123;&#125; object&gt;'</span>.format(cls_name(obj))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_args</span><span class=\"params\">(name, *args)</span>:</span></div><div class=\"line\">    pseudo_args = <span class=\"string\">','</span>.join(display(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> args)</div><div class=\"line\">    print(<span class=\"string\">'-&gt;&#123;&#125;.__&#123;&#125;__(&#123;&#125;)'</span>.format(cls_name(args[<span class=\"number\">0</span>]), name, pseudo_args))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Overriding</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 数据描述符 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'get'</span>, self, instance, owner)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'set'</span>, self, instance, value)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverridingNoGet</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 没有 __get__方法的覆盖型描述符 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, instance, value)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'set'</span>, self, instance, value)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonOverriding</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 非数据描述符\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, instance, owner)</span>:</span></div><div class=\"line\">        print_args(<span class=\"string\">'get'</span>, self, instance, owner)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Managed</span>:</span></div><div class=\"line\">    over = Overriding()</div><div class=\"line\">    over_no_get = OverridingNoGet()</div><div class=\"line\">    non_over = NonOverriding()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">span</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'-&gt; Managed.spam(&#123;&#125;)'</span>.format(display(self)))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">################覆盖型描述符##################</span></div><div class=\"line\"><span class=\"string\">\"\"\"获取和设置值 都是通过描述符的get和set方法完成\"\"\"</span></div><div class=\"line\">obj = Managed()</div><div class=\"line\">obj.over</div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\">Managed.over</div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\">obj.over = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\"># Overriding.__set__(&lt;Overriding object&gt;,&lt;Managed object&gt;,7)</span></div><div class=\"line\">obj.over</div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\">obj.__dict__[<span class=\"string\">'over'</span>] = <span class=\"number\">8</span>  <span class=\"comment\"># 跳过描述符,通过obj.__dict__赋值</span></div><div class=\"line\">print(vars(obj))</div><div class=\"line\"><span class=\"comment\"># &#123;'over': 8&#125;</span></div><div class=\"line\">print(obj.over)</div><div class=\"line\"><span class=\"comment\"># None</span></div><div class=\"line\">obj.over  <span class=\"comment\"># obj.over描述符仍会覆盖取值(obj.over)这个操作</span></div><div class=\"line\"><span class=\"comment\"># Overriding.__get__(&lt;Overriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">##########没有__get__()方法的覆盖型描述符##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"没有__get__方法的覆盖描述符,给对象的属性赋值会触发__set__方法,读取属性时会直接从实例中返回新赋予的值,而不会返回描述符对象,读取操作实例属性会遮盖描述符\"\"\"</span></div><div class=\"line\">print(obj.over_no_get)</div><div class=\"line\"><span class=\"comment\"># &lt;__main__.O</span></div><div class=\"line\"><span class=\"comment\"># verridingNoGet object at 0x102973358&gt;</span></div><div class=\"line\">print(Managed.over_no_get)</div><div class=\"line\"><span class=\"comment\"># &lt;__main__.OverridingNoGet object at 0x102973358&gt;</span></div><div class=\"line\">obj.over_no_get = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class=\"line\">print(obj.over_no_get)</div><div class=\"line\"><span class=\"comment\"># &lt;__main__.OverridingNoGet object at 0x101873358&gt;</span></div><div class=\"line\">obj.__dict__[<span class=\"string\">'over_no_get'</span>] = <span class=\"number\">9</span></div><div class=\"line\">print(obj.over_no_get)\t<span class=\"comment\"># 通过类属性取值,没有通过描述符,因为没有__get__方法</span></div><div class=\"line\"><span class=\"comment\"># 9</span></div><div class=\"line\">obj.over_no_get = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"comment\"># OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;,&lt;Managed object&gt;,7)</span></div><div class=\"line\">print(obj.over_no_get)  <span class=\"comment\"># 只要有同名的实例属性,描述符会被遮盖,默认的实例属性获取方法遮盖描述符</span></div><div class=\"line\"><span class=\"comment\"># 9</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">########## 非覆盖型描述符 ##########</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">非数据描述符中，如果设置了同名的实例属性，描述符会被遮盖，致使描述符无法处理那个实例的那个属性</div><div class=\"line\">\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">obj1 = Managed()</div><div class=\"line\">obj1.non_over</div><div class=\"line\"><span class=\"comment\"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\">obj1.non_over = <span class=\"number\">7</span></div><div class=\"line\">print(obj1.non_over)\t<span class=\"comment\"># 实例属性赋值会遮盖描述符__get__方法</span></div><div class=\"line\"><span class=\"comment\"># 7</span></div><div class=\"line\">Managed.non_over</div><div class=\"line\"><span class=\"comment\"># NonOverriding.__get__(&lt;NonOverriding object&gt;,None,&lt;class Managed&gt;)</span></div><div class=\"line\"><span class=\"keyword\">del</span> obj1.non_over</div><div class=\"line\">obj1.non_over\t<span class=\"comment\"># 删除实例属性后,又从描述符__get__方法中获取</span></div><div class=\"line\"><span class=\"comment\"># NonOverriding.__get__(&lt;NonOverriding object&gt;,&lt;Managed object&gt;,&lt;class Managed&gt;)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">################################</span></div><div class=\"line\"><span class=\"comment\"># 在类中覆盖描述符</span></div><div class=\"line\"><span class=\"comment\">################################</span></div><div class=\"line\">obj2 = Managed()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 覆盖类中的描述符属性</span></div><div class=\"line\">Managed.over = <span class=\"number\">1</span></div><div class=\"line\">Managed.over_no_get = <span class=\"number\">2</span></div><div class=\"line\">Managed.non_over = <span class=\"number\">3</span></div><div class=\"line\"> </div><div class=\"line\">print(obj2.over, obj2.over_no_get, obj2.non_over)</div><div class=\"line\"><span class=\"comment\"># 1 2 3</span></div></pre></td></tr></table></figure>\n<h4 id=\"描述符用法\"><a href=\"#描述符用法\" class=\"headerlink\" title=\"描述符用法\"></a>描述符用法</h4><ol>\n<li>使用特性以保持简单</li>\n<li>只读描述符必须有__set__方法，如果需要实现只读属性，<strong>get</strong>和<strong>set</strong>方法必须都实现，否则实例的同名属性会遮盖描述符，只读属性的__set__方法只需抛出AttributeError异常，并提供合适的错误信息</li>\n<li>用于验证的描述符可以只有__set__方法</li>\n<li>仅有<strong>get</strong>方法的描述符可以实现高效缓存，同名实例属性会遮盖描述符</li>\n<li>非特殊的方法可以被实例属性遮盖， 函数和方法都只实现了<strong>get</strong>方法，不会处理同名实例属性的赋值操作</li>\n</ol>\n<p>以上内容学习记录参照《流畅的python》 第20章 属性描述符</p>\n"},{"title":"Python Contextlib模块","date":"2017-04-11T14:32:21.000Z","_content":"#### 说明\ncontextlib是为了加强with语句，提供上下文机制的模块，它是通过Generator实现的。通过定义类以及写__enter__和__exit__来进行上下文管理;\ncontextlib中有nested和closing，前者用于创建嵌套的上下文，后则用于帮你执行定义好的close函数.\n```python\n#!/usr/bin/env python\n#coding:utf-8\n  \nclass WithinContext(object):\n    def __init__(self,context):\n        print \"WithinContext.__init__(%s) \" %context\n \n    def do_something(self):\n        print \"WithinContext.do_something()\"\n \n    def __del__(self):\n        print \"WithinContext.__del__\"\n \n \nclass Context(object):\n    def __init__(self):\n        print \"Context.__init__()\"\n \n    def __enter__(self):\n        \"\"\"\n        在主体代码执行前执行\n        \"\"\"\n        print \"Context.__enter__()\"\n        return WithinContext(self)\n \n    def __exit__(self,exc_type,exc_val,exc_tb):\n        \"\"\"\n        在主体代码执行后执行\n        \"\"\"\n        print \"Context.__exit__()\"\n \n \nwith Context() as c :\n    \"\"\"\n    as后面的变量是在__enter__函数中返回的\n    \"\"\"\n    c.do_something()\n#执行结果：\nContext.__init__()\nContext.__enter__()\nWithinContext.__init__(<__main__.Context object at 0x7f95045167d0>) \nWithinContext.do_something()\nContext.__exit__()\nWithinContext.__del__\n```\ncontextlib中的contextmanager作为装饰器来提供一种针对函数级别的上下文管理机制.\n```python\n#!/usr/bin/env python\n#coding:utf-8\n \nimport contextlib\n \n@contextlib.contextmanager\ndef make_context():\n    print \"entering\"\n    try:\n        yield {}\n    finally:\n        print \"exiting\"\n         \nwith make_context() as value:\n    print \"inside with statement:\", value\n     \n#执行结果：\n\"\"\"\nentering\ninside with statement: {}\nexiting\n\"\"\"\n \n@contextlib.contextmanager\ndef make_context(name):\n    print \"entering\",name\n    yield name\n    print \"exiting\",name\n     \nwith contextlib.nested(make_context('A')) as (c):\n    print \"inside with statement: \",c\n     \n#执行结果：\n\"\"\"\nentering A\ninside with statement:  ['A']\nexiting A\n\"\"\"\n\nwith contextlib.nested(make_context('A'),make_context(\"B\"),make_context(\"C\")) as (A,B,C):\n    \"\"\"\n    nested用于创建嵌套的上下文\n    \"\"\"\n    print \"inside with statement: \",A,B,C\n     \n#执行结果：\n\"\"\"\nentering A\nentering B\nentering C\ninside with statement:  A B C\nexiting C\nexiting B\nexiting A\n\"\"\"\n \nclass Door(object):\n    def __init__(self):\n        print \"__init__()\"\n    def close(self):\n        print \"close()\"\n        return\n          \nwith contextlib.closing(Door()) as door:\n    \"\"\"\n    closing执行定义好的close函数\n    \"\"\"\n    print \"inside with statement.\"\n     \n#执行结果：\n\"\"\"\n__init__()\ninside with statement.\nclose()\n\"\"\"\n```\n\n\n\n","source":"_posts/python-contextlib.md","raw":"---\ntitle: Python Contextlib模块\ndate: 2017-04-11 22:32:21\ntags:\n  - Contextlib\ncategories:\n  - python\n---\n#### 说明\ncontextlib是为了加强with语句，提供上下文机制的模块，它是通过Generator实现的。通过定义类以及写__enter__和__exit__来进行上下文管理;\ncontextlib中有nested和closing，前者用于创建嵌套的上下文，后则用于帮你执行定义好的close函数.\n```python\n#!/usr/bin/env python\n#coding:utf-8\n  \nclass WithinContext(object):\n    def __init__(self,context):\n        print \"WithinContext.__init__(%s) \" %context\n \n    def do_something(self):\n        print \"WithinContext.do_something()\"\n \n    def __del__(self):\n        print \"WithinContext.__del__\"\n \n \nclass Context(object):\n    def __init__(self):\n        print \"Context.__init__()\"\n \n    def __enter__(self):\n        \"\"\"\n        在主体代码执行前执行\n        \"\"\"\n        print \"Context.__enter__()\"\n        return WithinContext(self)\n \n    def __exit__(self,exc_type,exc_val,exc_tb):\n        \"\"\"\n        在主体代码执行后执行\n        \"\"\"\n        print \"Context.__exit__()\"\n \n \nwith Context() as c :\n    \"\"\"\n    as后面的变量是在__enter__函数中返回的\n    \"\"\"\n    c.do_something()\n#执行结果：\nContext.__init__()\nContext.__enter__()\nWithinContext.__init__(<__main__.Context object at 0x7f95045167d0>) \nWithinContext.do_something()\nContext.__exit__()\nWithinContext.__del__\n```\ncontextlib中的contextmanager作为装饰器来提供一种针对函数级别的上下文管理机制.\n```python\n#!/usr/bin/env python\n#coding:utf-8\n \nimport contextlib\n \n@contextlib.contextmanager\ndef make_context():\n    print \"entering\"\n    try:\n        yield {}\n    finally:\n        print \"exiting\"\n         \nwith make_context() as value:\n    print \"inside with statement:\", value\n     \n#执行结果：\n\"\"\"\nentering\ninside with statement: {}\nexiting\n\"\"\"\n \n@contextlib.contextmanager\ndef make_context(name):\n    print \"entering\",name\n    yield name\n    print \"exiting\",name\n     \nwith contextlib.nested(make_context('A')) as (c):\n    print \"inside with statement: \",c\n     \n#执行结果：\n\"\"\"\nentering A\ninside with statement:  ['A']\nexiting A\n\"\"\"\n\nwith contextlib.nested(make_context('A'),make_context(\"B\"),make_context(\"C\")) as (A,B,C):\n    \"\"\"\n    nested用于创建嵌套的上下文\n    \"\"\"\n    print \"inside with statement: \",A,B,C\n     \n#执行结果：\n\"\"\"\nentering A\nentering B\nentering C\ninside with statement:  A B C\nexiting C\nexiting B\nexiting A\n\"\"\"\n \nclass Door(object):\n    def __init__(self):\n        print \"__init__()\"\n    def close(self):\n        print \"close()\"\n        return\n          \nwith contextlib.closing(Door()) as door:\n    \"\"\"\n    closing执行定义好的close函数\n    \"\"\"\n    print \"inside with statement.\"\n     \n#执行结果：\n\"\"\"\n__init__()\ninside with statement.\nclose()\n\"\"\"\n```\n\n\n\n","slug":"python-contextlib","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xh0044ct8ui9tiembb","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>contextlib是为了加强with语句，提供上下文机制的模块，它是通过Generator实现的。通过定义类以及写<strong>enter</strong>和<strong>exit</strong>来进行上下文管理;<br>contextlib中有nested和closing，前者用于创建嵌套的上下文，后则用于帮你执行定义好的close函数.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithinContext</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,context)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"WithinContext.__init__(%s) \"</span> %context</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"WithinContext.do_something()\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"WithinContext.__del__\"</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Context.__init__()\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__enter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        在主体代码执行前执行</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Context.__enter__()\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> WithinContext(self)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__exit__</span><span class=\"params\">(self,exc_type,exc_val,exc_tb)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        在主体代码执行后执行</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Context.__exit__()\"</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">with</span> Context() <span class=\"keyword\">as</span> c :</div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    as后面的变量是在__enter__函数中返回的</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    c.do_something()</div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\">Context.__init__()</div><div class=\"line\">Context.__enter__()</div><div class=\"line\">WithinContext.__init__(&lt;__main__.Context object at <span class=\"number\">0x7f95045167d0</span>&gt;) </div><div class=\"line\">WithinContext.do_something()</div><div class=\"line\">Context.__exit__()</div><div class=\"line\">WithinContext.__del__</div></pre></td></tr></table></figure></p>\n<p>contextlib中的contextmanager作为装饰器来提供一种针对函数级别的上下文管理机制.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> contextlib</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_context</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"entering\"</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">yield</span> &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"exiting\"</span></div><div class=\"line\">         </div><div class=\"line\"><span class=\"keyword\">with</span> make_context() <span class=\"keyword\">as</span> value:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement:\"</span>, value</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">entering</div><div class=\"line\">inside with statement: &#123;&#125;</div><div class=\"line\">exiting</div><div class=\"line\">\"\"\"</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_context</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"entering\"</span>,name</div><div class=\"line\">    <span class=\"keyword\">yield</span> name</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"exiting\"</span>,name</div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">with</span> contextlib.nested(make_context(<span class=\"string\">'A'</span>)) <span class=\"keyword\">as</span> (c):</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement: \"</span>,c</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">entering A</div><div class=\"line\">inside with statement:  ['A']</div><div class=\"line\">exiting A</div><div class=\"line\">\"\"\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> contextlib.nested(make_context(<span class=\"string\">'A'</span>),make_context(<span class=\"string\">\"B\"</span>),make_context(<span class=\"string\">\"C\"</span>)) <span class=\"keyword\">as</span> (A,B,C):</div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    nested用于创建嵌套的上下文</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement: \"</span>,A,B,C</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">entering A</div><div class=\"line\">entering B</div><div class=\"line\">entering C</div><div class=\"line\">inside with statement:  A B C</div><div class=\"line\">exiting C</div><div class=\"line\">exiting B</div><div class=\"line\">exiting A</div><div class=\"line\">\"\"\"</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Door</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__init__()\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"close()\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">          </div><div class=\"line\"><span class=\"keyword\">with</span> contextlib.closing(Door()) <span class=\"keyword\">as</span> door:</div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    closing执行定义好的close函数</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement.\"</span></div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">__init__()</div><div class=\"line\">inside with statement.</div><div class=\"line\">close()</div><div class=\"line\">\"\"\"</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>contextlib是为了加强with语句，提供上下文机制的模块，它是通过Generator实现的。通过定义类以及写<strong>enter</strong>和<strong>exit</strong>来进行上下文管理;<br>contextlib中有nested和closing，前者用于创建嵌套的上下文，后则用于帮你执行定义好的close函数.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithinContext</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,context)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"WithinContext.__init__(%s) \"</span> %context</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"WithinContext.do_something()\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"WithinContext.__del__\"</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Context.__init__()\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__enter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        在主体代码执行前执行</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Context.__enter__()\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> WithinContext(self)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__exit__</span><span class=\"params\">(self,exc_type,exc_val,exc_tb)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        在主体代码执行后执行</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Context.__exit__()\"</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">with</span> Context() <span class=\"keyword\">as</span> c :</div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    as后面的变量是在__enter__函数中返回的</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    c.do_something()</div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\">Context.__init__()</div><div class=\"line\">Context.__enter__()</div><div class=\"line\">WithinContext.__init__(&lt;__main__.Context object at <span class=\"number\">0x7f95045167d0</span>&gt;) </div><div class=\"line\">WithinContext.do_something()</div><div class=\"line\">Context.__exit__()</div><div class=\"line\">WithinContext.__del__</div></pre></td></tr></table></figure></p>\n<p>contextlib中的contextmanager作为装饰器来提供一种针对函数级别的上下文管理机制.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> contextlib</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_context</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"entering\"</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">yield</span> &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"exiting\"</span></div><div class=\"line\">         </div><div class=\"line\"><span class=\"keyword\">with</span> make_context() <span class=\"keyword\">as</span> value:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement:\"</span>, value</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">entering</div><div class=\"line\">inside with statement: &#123;&#125;</div><div class=\"line\">exiting</div><div class=\"line\">\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_context</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"entering\"</span>,name</div><div class=\"line\">    <span class=\"keyword\">yield</span> name</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"exiting\"</span>,name</div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">with</span> contextlib.nested(make_context(<span class=\"string\">'A'</span>)) <span class=\"keyword\">as</span> (c):</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement: \"</span>,c</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">entering A</div><div class=\"line\">inside with statement:  ['A']</div><div class=\"line\">exiting A</div><div class=\"line\">\"\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> contextlib.nested(make_context(<span class=\"string\">'A'</span>),make_context(<span class=\"string\">\"B\"</span>),make_context(<span class=\"string\">\"C\"</span>)) <span class=\"keyword\">as</span> (A,B,C):</div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    nested用于创建嵌套的上下文</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement: \"</span>,A,B,C</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">entering A</div><div class=\"line\">entering B</div><div class=\"line\">entering C</div><div class=\"line\">inside with statement:  A B C</div><div class=\"line\">exiting C</div><div class=\"line\">exiting B</div><div class=\"line\">exiting A</div><div class=\"line\">\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Door</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__init__()\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"close()\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">          </div><div class=\"line\"><span class=\"keyword\">with</span> contextlib.closing(Door()) <span class=\"keyword\">as</span> door:</div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    closing执行定义好的close函数</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"inside with statement.\"</span></div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">#执行结果：</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">__init__()</div><div class=\"line\">inside with statement.</div><div class=\"line\">close()</div><div class=\"line\">\"\"\"</span></div></pre></td></tr></table></figure></p>\n"},{"title":"Django+Celery 计划任务","date":"2018-10-24T14:38:48.000Z","_content":"\n#### 背景\n需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态\n\n#### 方案\n想到使用计划任务来自动流转流程，因为项目本身是Django，这里使用djcelery来完成\n\n#### 实例\n\n项目依赖\n```python\npip install django-celery\npip install flower\n```\n\nsettings.py配置\n```python\nINSTALLED_APPS = (\n   ...\n   'djcelery',\n)\n \nimport djcelery\n \ndjcelery.setup_loader()\nBROKER_URL = 'redis://127.0.0.1:6379/1'\nCELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'\n# CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'    # 结果存储，存储到数据库\nCELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/1'\nCELERY_ACCEPT_CONTENT = ['application/json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Shanghai'\n \nCELERY_TASK_RESULT_EXPIRES = 3600  # celery任务执行结果的超时时间，\nCELERYD_FORCE_EXECV = True  # 有些情况下可以防止死锁\nCELERYD_PREFETCH_MULTIPLIER = 1\nCELERYD_MAX_TASKS_PER_CHILD = 100   # 每个worker最多执行万100个任务就会被销毁，可防止内存泄露\n# CELERYD_CONCURRENCY = 10  # celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以\n```\n\n接下来在settings.py的同级目录中新建 celery.py文件\n\n```python\nfrom __future__ import absolute_import, unicode_literals\nimport os\n \nfrom celery import Celery\nfrom django.conf import settings\n \nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Server.settings')\n \napp = Celery('Server') #, backend='redis', broker='redis://127.0.0.1:6379/1')\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n```\n修改__init__.py添加\n```python\nfrom __future__ import absolute_import, unicode_literals\n  \nfrom .celery import app as celery_app\n```\n在对应的app中添加tasks.py文件(这里必须为tasks.py文件，不然在admin中添加任务时找不到task)\n```python\nfrom __future__ import absolute_import, unicode_literals\nfrom celery import shared_task, task\n  \n@shared_task\ndef auto_audit():\n    print('func auto audit')\n \n@task()\ndef add(x, y):\n    print('x + y = ', x + y)\n    return x + y\n```\n在views.py中调用\n```python\nfrom .tasks import add\n  \nadd.delay(3, 5) #发送消息，触发后台任务\n```\ncelery启动，当然实际环境中应该使用supervisor启动\n```python\npython manage.py celery worker -l info  # 启动 worker\npython manage.py celery beat -l info    # 启动 beat\npython manage.py celery worker -B -l info  # 启动 worker 和 beat\npython manage.py celery flower --address=127.0.0.1 --port=5555 --basic_auth=admin:admin    # 启动celery flower监控\n \n```\n\n#### Admin后台添加计划任务\n在DJCELERY中Periodic tasks添加计划任务即可\n\n#### Flower监控celery\n主要用于监控任务执行是否成功，和broker和worker对应的状态\n\n\n\n","source":"_posts/python-django-celery.md","raw":"---\ntitle: Django+Celery 计划任务\ndate: 2018-10-24 22:38:48\ntags:\n  - Djcelery\ncategories:\n  - Django\n---\n\n#### 背景\n需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态\n\n#### 方案\n想到使用计划任务来自动流转流程，因为项目本身是Django，这里使用djcelery来完成\n\n#### 实例\n\n项目依赖\n```python\npip install django-celery\npip install flower\n```\n\nsettings.py配置\n```python\nINSTALLED_APPS = (\n   ...\n   'djcelery',\n)\n \nimport djcelery\n \ndjcelery.setup_loader()\nBROKER_URL = 'redis://127.0.0.1:6379/1'\nCELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'\n# CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'    # 结果存储，存储到数据库\nCELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/1'\nCELERY_ACCEPT_CONTENT = ['application/json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Shanghai'\n \nCELERY_TASK_RESULT_EXPIRES = 3600  # celery任务执行结果的超时时间，\nCELERYD_FORCE_EXECV = True  # 有些情况下可以防止死锁\nCELERYD_PREFETCH_MULTIPLIER = 1\nCELERYD_MAX_TASKS_PER_CHILD = 100   # 每个worker最多执行万100个任务就会被销毁，可防止内存泄露\n# CELERYD_CONCURRENCY = 10  # celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以\n```\n\n接下来在settings.py的同级目录中新建 celery.py文件\n\n```python\nfrom __future__ import absolute_import, unicode_literals\nimport os\n \nfrom celery import Celery\nfrom django.conf import settings\n \nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Server.settings')\n \napp = Celery('Server') #, backend='redis', broker='redis://127.0.0.1:6379/1')\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n```\n修改__init__.py添加\n```python\nfrom __future__ import absolute_import, unicode_literals\n  \nfrom .celery import app as celery_app\n```\n在对应的app中添加tasks.py文件(这里必须为tasks.py文件，不然在admin中添加任务时找不到task)\n```python\nfrom __future__ import absolute_import, unicode_literals\nfrom celery import shared_task, task\n  \n@shared_task\ndef auto_audit():\n    print('func auto audit')\n \n@task()\ndef add(x, y):\n    print('x + y = ', x + y)\n    return x + y\n```\n在views.py中调用\n```python\nfrom .tasks import add\n  \nadd.delay(3, 5) #发送消息，触发后台任务\n```\ncelery启动，当然实际环境中应该使用supervisor启动\n```python\npython manage.py celery worker -l info  # 启动 worker\npython manage.py celery beat -l info    # 启动 beat\npython manage.py celery worker -B -l info  # 启动 worker 和 beat\npython manage.py celery flower --address=127.0.0.1 --port=5555 --basic_auth=admin:admin    # 启动celery flower监控\n \n```\n\n#### Admin后台添加计划任务\n在DJCELERY中Periodic tasks添加计划任务即可\n\n#### Flower监控celery\n主要用于监控任务执行是否成功，和broker和worker对应的状态\n\n\n\n","slug":"python-django-celery","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xj0047ct8ufg9iwwg3","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态</p>\n<h4 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h4><p>想到使用计划任务来自动流转流程，因为项目本身是Django，这里使用djcelery来完成</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>项目依赖<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install django-celery</div><div class=\"line\">pip install flower</div></pre></td></tr></table></figure></p>\n<p>settings.py配置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">   ...</div><div class=\"line\">   <span class=\"string\">'djcelery'</span>,</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> djcelery</div><div class=\"line\"> </div><div class=\"line\">djcelery.setup_loader()</div><div class=\"line\">BROKER_URL = <span class=\"string\">'redis://127.0.0.1:6379/1'</span></div><div class=\"line\">CELERYBEAT_SCHEDULER = <span class=\"string\">'djcelery.schedulers.DatabaseScheduler'</span></div><div class=\"line\"><span class=\"comment\"># CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'    # 结果存储，存储到数据库</span></div><div class=\"line\">CELERY_RESULT_BACKEND = <span class=\"string\">'redis://127.0.0.1:6379/1'</span></div><div class=\"line\">CELERY_ACCEPT_CONTENT = [<span class=\"string\">'application/json'</span>]</div><div class=\"line\">CELERY_TASK_SERIALIZER = <span class=\"string\">'json'</span></div><div class=\"line\">CELERY_RESULT_SERIALIZER = <span class=\"string\">'json'</span></div><div class=\"line\">CELERY_TIMEZONE = <span class=\"string\">'Asia/Shanghai'</span></div><div class=\"line\"> </div><div class=\"line\">CELERY_TASK_RESULT_EXPIRES = <span class=\"number\">3600</span>  <span class=\"comment\"># celery任务执行结果的超时时间，</span></div><div class=\"line\">CELERYD_FORCE_EXECV = <span class=\"keyword\">True</span>  <span class=\"comment\"># 有些情况下可以防止死锁</span></div><div class=\"line\">CELERYD_PREFETCH_MULTIPLIER = <span class=\"number\">1</span></div><div class=\"line\">CELERYD_MAX_TASKS_PER_CHILD = <span class=\"number\">100</span>   <span class=\"comment\"># 每个worker最多执行万100个任务就会被销毁，可防止内存泄露</span></div><div class=\"line\"><span class=\"comment\"># CELERYD_CONCURRENCY = 10  # celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以</span></div></pre></td></tr></table></figure></p>\n<p>接下来在settings.py的同级目录中新建 celery.py文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import, unicode_literals</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</div><div class=\"line\"> </div><div class=\"line\">os.environ.setdefault(<span class=\"string\">'DJANGO_SETTINGS_MODULE'</span>, <span class=\"string\">'Server.settings'</span>)</div><div class=\"line\"> </div><div class=\"line\">app = Celery(<span class=\"string\">'Server'</span>) <span class=\"comment\">#, backend='redis', broker='redis://127.0.0.1:6379/1')</span></div><div class=\"line\">app.config_from_object(<span class=\"string\">'django.conf:settings'</span>)</div><div class=\"line\">app.autodiscover_tasks(<span class=\"keyword\">lambda</span>: settings.INSTALLED_APPS)</div></pre></td></tr></table></figure>\n<p>修改<strong>init</strong>.py添加<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import, unicode_literals</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">from</span> .celery <span class=\"keyword\">import</span> app <span class=\"keyword\">as</span> celery_app</div></pre></td></tr></table></figure></p>\n<p>在对应的app中添加tasks.py文件(这里必须为tasks.py文件，不然在admin中添加任务时找不到task)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import, unicode_literals</div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> shared_task, task</div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">@shared_task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auto_audit</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'func auto audit'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'x + y = '</span>, x + y)</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div></pre></td></tr></table></figure></p>\n<p>在views.py中调用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> .tasks <span class=\"keyword\">import</span> add</div><div class=\"line\">  </div><div class=\"line\">add.delay(<span class=\"number\">3</span>, <span class=\"number\">5</span>) <span class=\"comment\">#发送消息，触发后台任务</span></div></pre></td></tr></table></figure></p>\n<p>celery启动，当然实际环境中应该使用supervisor启动<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py celery worker -l info  <span class=\"comment\"># 启动 worker</span></div><div class=\"line\">python manage.py celery beat -l info    <span class=\"comment\"># 启动 beat</span></div><div class=\"line\">python manage.py celery worker -B -l info  <span class=\"comment\"># 启动 worker 和 beat</span></div><div class=\"line\">python manage.py celery flower --address=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> --port=<span class=\"number\">5555</span> --basic_auth=admin:admin    <span class=\"comment\"># 启动celery flower监控</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Admin后台添加计划任务\"><a href=\"#Admin后台添加计划任务\" class=\"headerlink\" title=\"Admin后台添加计划任务\"></a>Admin后台添加计划任务</h4><p>在DJCELERY中Periodic tasks添加计划任务即可</p>\n<h4 id=\"Flower监控celery\"><a href=\"#Flower监控celery\" class=\"headerlink\" title=\"Flower监控celery\"></a>Flower监控celery</h4><p>主要用于监控任务执行是否成功，和broker和worker对应的状态</p>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态</p>\n<h4 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h4><p>想到使用计划任务来自动流转流程，因为项目本身是Django，这里使用djcelery来完成</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>项目依赖<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install django-celery</div><div class=\"line\">pip install flower</div></pre></td></tr></table></figure></p>\n<p>settings.py配置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">   ...</div><div class=\"line\">   <span class=\"string\">'djcelery'</span>,</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> djcelery</div><div class=\"line\"> </div><div class=\"line\">djcelery.setup_loader()</div><div class=\"line\">BROKER_URL = <span class=\"string\">'redis://127.0.0.1:6379/1'</span></div><div class=\"line\">CELERYBEAT_SCHEDULER = <span class=\"string\">'djcelery.schedulers.DatabaseScheduler'</span></div><div class=\"line\"><span class=\"comment\"># CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'    # 结果存储，存储到数据库</span></div><div class=\"line\">CELERY_RESULT_BACKEND = <span class=\"string\">'redis://127.0.0.1:6379/1'</span></div><div class=\"line\">CELERY_ACCEPT_CONTENT = [<span class=\"string\">'application/json'</span>]</div><div class=\"line\">CELERY_TASK_SERIALIZER = <span class=\"string\">'json'</span></div><div class=\"line\">CELERY_RESULT_SERIALIZER = <span class=\"string\">'json'</span></div><div class=\"line\">CELERY_TIMEZONE = <span class=\"string\">'Asia/Shanghai'</span></div><div class=\"line\"> </div><div class=\"line\">CELERY_TASK_RESULT_EXPIRES = <span class=\"number\">3600</span>  <span class=\"comment\"># celery任务执行结果的超时时间，</span></div><div class=\"line\">CELERYD_FORCE_EXECV = <span class=\"keyword\">True</span>  <span class=\"comment\"># 有些情况下可以防止死锁</span></div><div class=\"line\">CELERYD_PREFETCH_MULTIPLIER = <span class=\"number\">1</span></div><div class=\"line\">CELERYD_MAX_TASKS_PER_CHILD = <span class=\"number\">100</span>   <span class=\"comment\"># 每个worker最多执行万100个任务就会被销毁，可防止内存泄露</span></div><div class=\"line\"><span class=\"comment\"># CELERYD_CONCURRENCY = 10  # celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以</span></div></pre></td></tr></table></figure></p>\n<p>接下来在settings.py的同级目录中新建 celery.py文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import, unicode_literals</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</div><div class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</div><div class=\"line\"> </div><div class=\"line\">os.environ.setdefault(<span class=\"string\">'DJANGO_SETTINGS_MODULE'</span>, <span class=\"string\">'Server.settings'</span>)</div><div class=\"line\"> </div><div class=\"line\">app = Celery(<span class=\"string\">'Server'</span>) <span class=\"comment\">#, backend='redis', broker='redis://127.0.0.1:6379/1')</span></div><div class=\"line\">app.config_from_object(<span class=\"string\">'django.conf:settings'</span>)</div><div class=\"line\">app.autodiscover_tasks(<span class=\"keyword\">lambda</span>: settings.INSTALLED_APPS)</div></pre></td></tr></table></figure>\n<p>修改<strong>init</strong>.py添加<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import, unicode_literals</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">from</span> .celery <span class=\"keyword\">import</span> app <span class=\"keyword\">as</span> celery_app</div></pre></td></tr></table></figure></p>\n<p>在对应的app中添加tasks.py文件(这里必须为tasks.py文件，不然在admin中添加任务时找不到task)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import, unicode_literals</div><div class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> shared_task, task</div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">@shared_task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auto_audit</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'func auto audit'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@task()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'x + y = '</span>, x + y)</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y</div></pre></td></tr></table></figure></p>\n<p>在views.py中调用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> .tasks <span class=\"keyword\">import</span> add</div><div class=\"line\">  </div><div class=\"line\">add.delay(<span class=\"number\">3</span>, <span class=\"number\">5</span>) <span class=\"comment\">#发送消息，触发后台任务</span></div></pre></td></tr></table></figure></p>\n<p>celery启动，当然实际环境中应该使用supervisor启动<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py celery worker -l info  <span class=\"comment\"># 启动 worker</span></div><div class=\"line\">python manage.py celery beat -l info    <span class=\"comment\"># 启动 beat</span></div><div class=\"line\">python manage.py celery worker -B -l info  <span class=\"comment\"># 启动 worker 和 beat</span></div><div class=\"line\">python manage.py celery flower --address=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> --port=<span class=\"number\">5555</span> --basic_auth=admin:admin    <span class=\"comment\"># 启动celery flower监控</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Admin后台添加计划任务\"><a href=\"#Admin后台添加计划任务\" class=\"headerlink\" title=\"Admin后台添加计划任务\"></a>Admin后台添加计划任务</h4><p>在DJCELERY中Periodic tasks添加计划任务即可</p>\n<h4 id=\"Flower监控celery\"><a href=\"#Flower监控celery\" class=\"headerlink\" title=\"Flower监控celery\"></a>Flower监控celery</h4><p>主要用于监控任务执行是否成功，和broker和worker对应的状态</p>\n"},{"title":"Python 动态属性和特性","date":"2018-01-30T14:42:28.000Z","_content":"\n###  \\_\\_getattr\\_\\_ 方法\n\n\\_\\_getattr\\_\\_(self, name) 作用仅当没有指定名称name的属性时才调用\\_\\_getattr\\_\\_方法\n```python\nfrom collections import abc\nimport keyword\n \nclass FrozenJSON:\n    def __init__(self, mapping):\n        self.__data = {}\n        for key, value in mapping.items():\n            if keyword.iskeyword(key):\n                key += '_'\n            self.__data[key] = value\n \n    def __getattr__(self, name):\n        if hasattr(self.__data, name):\n            return getattr(self.__data, name)\n        else:\n            return FrozenJSON.build(self.__data[name])\n \n    @classmethod\n    def build(cls, obj):  # 备选构造器\n        if isinstance(obj, abc.Mapping):  # 映射\n            return cls(obj)\n        elif isinstance(obj, abc.MutableSequence):  # 列表\n            return [cls.build(item) for item in obj]\n        else:\n            return obj\n \nif __name__ == '__main__':\n    grad = FrozenJSON({'name': 'ttxs', 'class': 123})\n    print(grod.name)\n    print(grad.class_)\n```\n\n### @property 解析\n- property 本身是一个类\n- property(fget=None, fset=None, fdel=None, doc=None)\n所有的参数都是可选，如果没有把函数传给某个参数，那么得到的特性对象就不允许执行相应的操作\n\n```python\nclass LineItem:\n \n    def __init__(self, description, weight, price):\n        self.description = description\n        self.weight = weight\n        self.price = price\n \n    def subtotal(self):\n        return self.weight * self.price\n \n    def get_weight(self):\n        return self.__weight\n \n    def set_weight(self, value):\n        if value > 0:\n            self.__weight = value\n        else:\n            raise ValueError('value must be > 0')\n \n    weight = property(get_weight, set_weight, )\n \nxxx = LineItem('ttxs', 10, 12.5)\nprint(xxx.subtotal())\nxxx.weight=-20\nprint(xxx.subtotal())\n```\n\n### 处理属性的重要属性和函数\n- \\_\\_class\\_\\_ : 对象所属类的引用(obj.\\_\\_class\\_\\_  和type(obj)相同)\n\n- \\_\\_getattr\\_\\_：只在对象的类中寻找，而不在实例中寻找\n- \\_\\_dict\\_\\_： 存储对象或类的可写属性,有dict属性的对象，任何时候都能设置新属性\n- \\_\\_slots\\_\\_： 类可以定义这个属性，限制实例能有哪些属性\n- dir([object])：列出对象的大部分属性\n- getattr(obj, name[, defult])：从obj对象中获取name字符串对应的属性\n- hasattr(obj, name)：如果obj对象中存在指定的属性，或者能以某种方式通过obj对象获取指定的属性，返回true\n- setattr(obj, name, value)：把obj对象指定属性的值设置为value，前提是obj对象能接受这个值；这个函数可能会创建一个新的属性或者覆盖现有的属性\n- vars([obj])：返回obj对象的\\_\\_dict\\_\\_属性，如果实例所属的类定义了\\_\\_slots\\_\\_属性，实例没有\\_\\_dict\\_\\_属性，那么vars函数不能处理那个实例\n\n### 处理属性的特殊方法\n- obj.attr 和 getattr(obj, 'attr', 42) 都会触发 Class.\\_\\_getattribute\\_\\_(obj, 'attr')方法\n- \\_\\_delattr\\_\\_(self, name) del 语句， 都会触发Class.\\_\\_delattr\\_\\_(obj, 'attr')方法\n- \\_\\_dir\\_\\_ 把对象传给dir函数时调用，列出属性\n- \\_\\_getattr\\_\\_(obj, name) 仅当获取指定的属性失败，搜索过obj，Class和超类之后调用\n- \\_\\_getattribute\\_\\_(self, name)尝试获取指定的属性时总会获取调用这个方法，寻找的属性是特殊属性或者特殊方法时除外\n- \\_\\_setattr\\_\\_(self, name, value) 尝试设置指定的属性时总会调用这个方法，点号和setattr内置函数会触发这个方法\n","source":"_posts/python-dyn-attr-prop.md","raw":"---\ntitle: Python 动态属性和特性\ndate: 2018-01-30 22:42:28\ntags:\n  - property\ncategories:\n  - python\n---\n\n###  \\_\\_getattr\\_\\_ 方法\n\n\\_\\_getattr\\_\\_(self, name) 作用仅当没有指定名称name的属性时才调用\\_\\_getattr\\_\\_方法\n```python\nfrom collections import abc\nimport keyword\n \nclass FrozenJSON:\n    def __init__(self, mapping):\n        self.__data = {}\n        for key, value in mapping.items():\n            if keyword.iskeyword(key):\n                key += '_'\n            self.__data[key] = value\n \n    def __getattr__(self, name):\n        if hasattr(self.__data, name):\n            return getattr(self.__data, name)\n        else:\n            return FrozenJSON.build(self.__data[name])\n \n    @classmethod\n    def build(cls, obj):  # 备选构造器\n        if isinstance(obj, abc.Mapping):  # 映射\n            return cls(obj)\n        elif isinstance(obj, abc.MutableSequence):  # 列表\n            return [cls.build(item) for item in obj]\n        else:\n            return obj\n \nif __name__ == '__main__':\n    grad = FrozenJSON({'name': 'ttxs', 'class': 123})\n    print(grod.name)\n    print(grad.class_)\n```\n\n### @property 解析\n- property 本身是一个类\n- property(fget=None, fset=None, fdel=None, doc=None)\n所有的参数都是可选，如果没有把函数传给某个参数，那么得到的特性对象就不允许执行相应的操作\n\n```python\nclass LineItem:\n \n    def __init__(self, description, weight, price):\n        self.description = description\n        self.weight = weight\n        self.price = price\n \n    def subtotal(self):\n        return self.weight * self.price\n \n    def get_weight(self):\n        return self.__weight\n \n    def set_weight(self, value):\n        if value > 0:\n            self.__weight = value\n        else:\n            raise ValueError('value must be > 0')\n \n    weight = property(get_weight, set_weight, )\n \nxxx = LineItem('ttxs', 10, 12.5)\nprint(xxx.subtotal())\nxxx.weight=-20\nprint(xxx.subtotal())\n```\n\n### 处理属性的重要属性和函数\n- \\_\\_class\\_\\_ : 对象所属类的引用(obj.\\_\\_class\\_\\_  和type(obj)相同)\n\n- \\_\\_getattr\\_\\_：只在对象的类中寻找，而不在实例中寻找\n- \\_\\_dict\\_\\_： 存储对象或类的可写属性,有dict属性的对象，任何时候都能设置新属性\n- \\_\\_slots\\_\\_： 类可以定义这个属性，限制实例能有哪些属性\n- dir([object])：列出对象的大部分属性\n- getattr(obj, name[, defult])：从obj对象中获取name字符串对应的属性\n- hasattr(obj, name)：如果obj对象中存在指定的属性，或者能以某种方式通过obj对象获取指定的属性，返回true\n- setattr(obj, name, value)：把obj对象指定属性的值设置为value，前提是obj对象能接受这个值；这个函数可能会创建一个新的属性或者覆盖现有的属性\n- vars([obj])：返回obj对象的\\_\\_dict\\_\\_属性，如果实例所属的类定义了\\_\\_slots\\_\\_属性，实例没有\\_\\_dict\\_\\_属性，那么vars函数不能处理那个实例\n\n### 处理属性的特殊方法\n- obj.attr 和 getattr(obj, 'attr', 42) 都会触发 Class.\\_\\_getattribute\\_\\_(obj, 'attr')方法\n- \\_\\_delattr\\_\\_(self, name) del 语句， 都会触发Class.\\_\\_delattr\\_\\_(obj, 'attr')方法\n- \\_\\_dir\\_\\_ 把对象传给dir函数时调用，列出属性\n- \\_\\_getattr\\_\\_(obj, name) 仅当获取指定的属性失败，搜索过obj，Class和超类之后调用\n- \\_\\_getattribute\\_\\_(self, name)尝试获取指定的属性时总会获取调用这个方法，寻找的属性是特殊属性或者特殊方法时除外\n- \\_\\_setattr\\_\\_(self, name, value) 尝试设置指定的属性时总会调用这个方法，点号和setattr内置函数会触发这个方法\n","slug":"python-dyn-attr-prop","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xl004act8ubvio9v00","content":"<h3 id=\"getattr-方法\"><a href=\"#getattr-方法\" class=\"headerlink\" title=\"__getattr__ 方法\"></a>__getattr__ 方法</h3><p>__getattr__(self, name) 作用仅当没有指定名称name的属性时才调用__getattr__方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> abc</div><div class=\"line\"><span class=\"keyword\">import</span> keyword</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrozenJSON</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, mapping)</span>:</span></div><div class=\"line\">        self.__data = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> mapping.items():</div><div class=\"line\">            <span class=\"keyword\">if</span> keyword.iskeyword(key):</div><div class=\"line\">                key += <span class=\"string\">'_'</span></div><div class=\"line\">            self.__data[key] = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> hasattr(self.__data, name):</div><div class=\"line\">            <span class=\"keyword\">return</span> getattr(self.__data, name)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> FrozenJSON.build(self.__data[name])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span><span class=\"params\">(cls, obj)</span>:</span>  <span class=\"comment\"># 备选构造器</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(obj, abc.Mapping):  <span class=\"comment\"># 映射</span></div><div class=\"line\">            <span class=\"keyword\">return</span> cls(obj)</div><div class=\"line\">        <span class=\"keyword\">elif</span> isinstance(obj, abc.MutableSequence):  <span class=\"comment\"># 列表</span></div><div class=\"line\">            <span class=\"keyword\">return</span> [cls.build(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> obj</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    grad = FrozenJSON(&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'ttxs'</span>, <span class=\"string\">'class'</span>: <span class=\"number\">123</span>&#125;)</div><div class=\"line\">    print(grod.name)</div><div class=\"line\">    print(grad.class_)</div></pre></td></tr></table></figure></p>\n<h3 id=\"property-解析\"><a href=\"#property-解析\" class=\"headerlink\" title=\"@property 解析\"></a>@property 解析</h3><ul>\n<li>property 本身是一个类</li>\n<li>property(fget=None, fset=None, fdel=None, doc=None)<br>所有的参数都是可选，如果没有把函数传给某个参数，那么得到的特性对象就不允许执行相应的操作</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, description, weight, price)</span>:</span></div><div class=\"line\">        self.description = description</div><div class=\"line\">        self.weight = weight</div><div class=\"line\">        self.price = price</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subtotal</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.weight * self.price</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_weight</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__weight</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_weight</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value &gt; <span class=\"number\">0</span>:</div><div class=\"line\">            self.__weight = value</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value must be &gt; 0'</span>)</div><div class=\"line\"> </div><div class=\"line\">    weight = property(get_weight, set_weight, )</div><div class=\"line\"> </div><div class=\"line\">xxx = LineItem(<span class=\"string\">'ttxs'</span>, <span class=\"number\">10</span>, <span class=\"number\">12.5</span>)</div><div class=\"line\">print(xxx.subtotal())</div><div class=\"line\">xxx.weight=<span class=\"number\">-20</span></div><div class=\"line\">print(xxx.subtotal())</div></pre></td></tr></table></figure>\n<h3 id=\"处理属性的重要属性和函数\"><a href=\"#处理属性的重要属性和函数\" class=\"headerlink\" title=\"处理属性的重要属性和函数\"></a>处理属性的重要属性和函数</h3><ul>\n<li><p>__class__ : 对象所属类的引用(obj.__class__  和type(obj)相同)</p>\n</li>\n<li><p>__getattr__：只在对象的类中寻找，而不在实例中寻找</p>\n</li>\n<li>__dict__： 存储对象或类的可写属性,有dict属性的对象，任何时候都能设置新属性</li>\n<li>__slots__： 类可以定义这个属性，限制实例能有哪些属性</li>\n<li>dir([object])：列出对象的大部分属性</li>\n<li>getattr(obj, name[, defult])：从obj对象中获取name字符串对应的属性</li>\n<li>hasattr(obj, name)：如果obj对象中存在指定的属性，或者能以某种方式通过obj对象获取指定的属性，返回true</li>\n<li>setattr(obj, name, value)：把obj对象指定属性的值设置为value，前提是obj对象能接受这个值；这个函数可能会创建一个新的属性或者覆盖现有的属性</li>\n<li>vars([obj])：返回obj对象的__dict__属性，如果实例所属的类定义了__slots__属性，实例没有__dict__属性，那么vars函数不能处理那个实例</li>\n</ul>\n<h3 id=\"处理属性的特殊方法\"><a href=\"#处理属性的特殊方法\" class=\"headerlink\" title=\"处理属性的特殊方法\"></a>处理属性的特殊方法</h3><ul>\n<li>obj.attr 和 getattr(obj, ‘attr’, 42) 都会触发 Class.__getattribute__(obj, ‘attr’)方法</li>\n<li>__delattr__(self, name) del 语句， 都会触发Class.__delattr__(obj, ‘attr’)方法</li>\n<li>__dir__ 把对象传给dir函数时调用，列出属性</li>\n<li>__getattr__(obj, name) 仅当获取指定的属性失败，搜索过obj，Class和超类之后调用</li>\n<li>__getattribute__(self, name)尝试获取指定的属性时总会获取调用这个方法，寻找的属性是特殊属性或者特殊方法时除外</li>\n<li>__setattr__(self, name, value) 尝试设置指定的属性时总会调用这个方法，点号和setattr内置函数会触发这个方法</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"getattr-方法\"><a href=\"#getattr-方法\" class=\"headerlink\" title=\"__getattr__ 方法\"></a>__getattr__ 方法</h3><p>__getattr__(self, name) 作用仅当没有指定名称name的属性时才调用__getattr__方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> abc</div><div class=\"line\"><span class=\"keyword\">import</span> keyword</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrozenJSON</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, mapping)</span>:</span></div><div class=\"line\">        self.__data = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> mapping.items():</div><div class=\"line\">            <span class=\"keyword\">if</span> keyword.iskeyword(key):</div><div class=\"line\">                key += <span class=\"string\">'_'</span></div><div class=\"line\">            self.__data[key] = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> hasattr(self.__data, name):</div><div class=\"line\">            <span class=\"keyword\">return</span> getattr(self.__data, name)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> FrozenJSON.build(self.__data[name])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span><span class=\"params\">(cls, obj)</span>:</span>  <span class=\"comment\"># 备选构造器</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(obj, abc.Mapping):  <span class=\"comment\"># 映射</span></div><div class=\"line\">            <span class=\"keyword\">return</span> cls(obj)</div><div class=\"line\">        <span class=\"keyword\">elif</span> isinstance(obj, abc.MutableSequence):  <span class=\"comment\"># 列表</span></div><div class=\"line\">            <span class=\"keyword\">return</span> [cls.build(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> obj</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    grad = FrozenJSON(&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'ttxs'</span>, <span class=\"string\">'class'</span>: <span class=\"number\">123</span>&#125;)</div><div class=\"line\">    print(grod.name)</div><div class=\"line\">    print(grad.class_)</div></pre></td></tr></table></figure></p>\n<h3 id=\"property-解析\"><a href=\"#property-解析\" class=\"headerlink\" title=\"@property 解析\"></a>@property 解析</h3><ul>\n<li>property 本身是一个类</li>\n<li>property(fget=None, fset=None, fdel=None, doc=None)<br>所有的参数都是可选，如果没有把函数传给某个参数，那么得到的特性对象就不允许执行相应的操作</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, description, weight, price)</span>:</span></div><div class=\"line\">        self.description = description</div><div class=\"line\">        self.weight = weight</div><div class=\"line\">        self.price = price</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subtotal</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.weight * self.price</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_weight</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__weight</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_weight</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value &gt; <span class=\"number\">0</span>:</div><div class=\"line\">            self.__weight = value</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'value must be &gt; 0'</span>)</div><div class=\"line\"> </div><div class=\"line\">    weight = property(get_weight, set_weight, )</div><div class=\"line\"> </div><div class=\"line\">xxx = LineItem(<span class=\"string\">'ttxs'</span>, <span class=\"number\">10</span>, <span class=\"number\">12.5</span>)</div><div class=\"line\">print(xxx.subtotal())</div><div class=\"line\">xxx.weight=<span class=\"number\">-20</span></div><div class=\"line\">print(xxx.subtotal())</div></pre></td></tr></table></figure>\n<h3 id=\"处理属性的重要属性和函数\"><a href=\"#处理属性的重要属性和函数\" class=\"headerlink\" title=\"处理属性的重要属性和函数\"></a>处理属性的重要属性和函数</h3><ul>\n<li><p>__class__ : 对象所属类的引用(obj.__class__  和type(obj)相同)</p>\n</li>\n<li><p>__getattr__：只在对象的类中寻找，而不在实例中寻找</p>\n</li>\n<li>__dict__： 存储对象或类的可写属性,有dict属性的对象，任何时候都能设置新属性</li>\n<li>__slots__： 类可以定义这个属性，限制实例能有哪些属性</li>\n<li>dir([object])：列出对象的大部分属性</li>\n<li>getattr(obj, name[, defult])：从obj对象中获取name字符串对应的属性</li>\n<li>hasattr(obj, name)：如果obj对象中存在指定的属性，或者能以某种方式通过obj对象获取指定的属性，返回true</li>\n<li>setattr(obj, name, value)：把obj对象指定属性的值设置为value，前提是obj对象能接受这个值；这个函数可能会创建一个新的属性或者覆盖现有的属性</li>\n<li>vars([obj])：返回obj对象的__dict__属性，如果实例所属的类定义了__slots__属性，实例没有__dict__属性，那么vars函数不能处理那个实例</li>\n</ul>\n<h3 id=\"处理属性的特殊方法\"><a href=\"#处理属性的特殊方法\" class=\"headerlink\" title=\"处理属性的特殊方法\"></a>处理属性的特殊方法</h3><ul>\n<li>obj.attr 和 getattr(obj, ‘attr’, 42) 都会触发 Class.__getattribute__(obj, ‘attr’)方法</li>\n<li>__delattr__(self, name) del 语句， 都会触发Class.__delattr__(obj, ‘attr’)方法</li>\n<li>__dir__ 把对象传给dir函数时调用，列出属性</li>\n<li>__getattr__(obj, name) 仅当获取指定的属性失败，搜索过obj，Class和超类之后调用</li>\n<li>__getattribute__(self, name)尝试获取指定的属性时总会获取调用这个方法，寻找的属性是特殊属性或者特殊方法时除外</li>\n<li>__setattr__(self, name, value) 尝试设置指定的属性时总会调用这个方法，点号和setattr内置函数会触发这个方法</li>\n</ul>\n"},{"title":"Python 特殊方法","date":"2018-02-11T13:13:59.000Z","_content":"### 说明\n主要说明类的特殊方法(也叫魔法方法)，了解使用场景和方法，使用时方便查询\n\n### 具体说明\n#### 创建实例和销毁\n##### \\_\\_new\\_\\_\n##### \\_\\_init\\_\\_\n##### \\_\\_del\\_\\_\n```python\nclass Foo01:\n    def __new__(cls, *args, **kwargs):\n        \"\"\"对象实例化调用的第一个方法,在__init__之前, args,kwargs传递给init方法\"\"\"\n        print('__new__')\n        return super().__new__(cls)\n \n    def __init__(self, name):\n    \t\"\"\"初始化实例操作\"\"\"\n        print('__init__')\n        self.name = name\n \n    def __del__(self):\n    \t\"\"\" del 时调用，或实例自行销毁时调用\"\"\"\n        print('__del__')\n        return\n \n \nfoo = Foo01(name='ttxs')  # __init__\nprint(foo.name)  # ttxs\ndel foo  # __del__\n```\n#### 属性管理\n##### \\_\\_getattr\\_\\_\n##### \\_\\_getattribute\\_\\_\n##### \\_\\_setattr\\_\\_\n##### \\_\\_delattr\\_\\_\n##### \\_\\_dir\\_\\_\n```python\nclass Foo02:\n    def __getattr__(self, item):\n        \"\"\" 该方法在访问一个不存在的属性时调用 \"\"\"\n        print('__getattr__')\n        if item not in self.__dict__:\n            return None\n        return super(Foo02, self).__getattr__(item)\n \n    def __setattr__(self, key, value):\n        \"\"\" 该方法在对属性进行赋值和修改时调用,应该避免\"无限递归\"错误,如: self.name = 'xxx' \"\"\"\n        print('__setattr__')\n        # self.key = value    # 每一次属性赋值时, __setattr__都会被调用，因此不断调用自身导致无限递归\n        self.__dict__[key] = value\n        return super(Foo02, self).__setattr__(key, value)\n \n    def __delattr__(self, item):\n        \"\"\" 该方法在删除属性时调用 \"\"\"\n        print('__delattr__')\n        # del self.item         # 无限递归, 原因同上\n        return super(Foo02, self).__delattr__(item)\n \n    def __getattribute__(self, item):\n        \"\"\" 该方法在属性被访问时调用,调用__getattr__前必定会调用 __getattribute__ \"\"\"\n        print('__getattribute__')\n        return super(Foo02, self).__getattribute__(item)\n \n \nfoo02 = Foo02()\nfoo02.abc = 'abc'  # 调用__setattr__方法\nprint(foo02.abc)  # 调用__getattribute__方法\nprint('error---', foo02.x)  # 调用__getattr__方法\nfoo02.__dict__  # 调用__getattribute__方法\ndel foo02.abc  # 调用__delattr__方法\n```\n#### 序列表示形式\n##### \\_\\_str\\_\\_\n##### \\_\\_repr\\_\\_\n##### \\_\\_bytes\\_\\_\n##### \\_\\_doc\\_\\_\n##### \\_\\_format\\_\\_\n```python\nclass Foo03:\n    \"\"\" 文档展示说明表示 (__doc__)\"\"\"\n \n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n \n    def __repr__(self):\n        \"\"\" 主要针对程序的调试,调用和使用,如果定义了str函数print会调用str,没有就调用repr函数 \"\"\"\n        print('__repr__')\n        return '%s with %s id' % (self.name, self.id)\n \n    def __str__(self):\n        \"\"\"print方法时调用\"\"\"\n        print('__str__')\n        return self.name.capitalize()\n \n    def __bytes__(self):\n        print('__bytes__')\n        return '%s in bytes is %s' % (self.name, self.id)\n \n    def __format__(self):\n        \"\"\" 调用format方法时 \"\"\"\n        print('__format__')\n        return '%s in format is %s' % (self.name, self.id)\n \n \nfoo03 = Foo03(name='ttxsgoto', id=666)\nprint(Foo05.__doc__)    # 说明文档信息\nprint(foo05)            # __str__()方法\n \nf = Foo03(name='ttxsgoto', id=666)\nf.__format__()\nff = bytes(f)  # bytes调用\n```\n#### 集合管理\n##### \\_\\_len\\_\\_\n##### \\_\\_getitem\\_\\_\n##### \\_\\_setitem\\_\\_\n##### \\_\\_delitem\\_\\_\n##### \\_\\_contains\\_\\_\n```python\nclass Foo04:\n    def __init__(self, value):\n        if value is None:\n            self.value = {}\n        else:\n            self.value = value\n \n    def __len__(self):\n        \"\"\"表示集合长度\"\"\"\n        return len(self.value)\n \n    def __getitem__(self, item):\n        \"\"\"执行self[item],调用该方法\"\"\"\n        print('__getitem__')\n        return self.value[item]\n \n    def __setitem__(self, key, value):\n        \"\"\"执行self[key]=value,调用该方法\"\"\"\n        print('__setitem__')\n        self.value[key] = value\n \n    def __delitem__(self, key):\n        \"\"\"执行 del self[key],调用该方法\"\"\"\n        print('__delitem__')\n        del self.value[key]\n \n    def __contains__(self, item):\n        \"\"\"判断item是否在容器中,调用该方法in/not in,如 item in container\"\"\"\n        print('__contains__')\n        if item in self.value:\n            return True\n        return False\n \n \nfoo04 = Foo04(value={'a': 'a'})\nfoo04['xx'] = 'abc'  # 调用__setitem__方法\nprint(foo04['xx'])  # 调用__getitem__方法\nprint(len(foo04))  # 调用__len__方法\n \nif 'xx' in foo04:  # 调用__contains__方法\n    print('ok')\nelse:\n    print('error')\n```\n#### 迭代枚举\n##### \\_\\_iter\\_\\_\n##### \\_\\_next\\_\\_\n```python\nimport re\nimport reprlib\nfrom collections import abc\n \nRE_WORD = re.compile('\\w+')\n \nclass Foo04:\n    \"\"\" 通过索引从文本中提取单词 \"\"\"\n \n    def __init__(self, text):\n        self.text = text\n        self.words = RE_WORD.findall(text)\n \n    def __iter__(self):\n        \"\"\" 可迭代对象 \"\"\"\n        return SentenceIterator(self.words)\n \n    def __len__(self, index):\n        return len(self.words)\n \n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)  # 用于生成大型数据结构的简略字符串表示形式, 默认情况下最多30个字符\n \n \nclass SentenceIterator:\n    \"\"\" 迭代器 \"\"\"\n    def __init__(self, words):\n        self.words = words\n        self.index = 0\n \n    def __next__(self):\n        \"\"\" 返回下一个可用的元素，如果没有，抛出StopIteration异常 \"\"\"\n        try:\n            word = self.words[self.index]\n        except IndexError:\n            raise StopIteration()\n        self.index += 1\n        return word\n \n    def __iter__(self):\n        \"\"\" 返回self，以便在应该使用可迭代对象的地方使用迭代器 \"\"\"\n        return self\n \n \nfoo04 = Foo04(text='\"The time has come,\" the Walrus said,')\n \nprint(foo04)\nprint(iter(foo04))\nfor foo in foo04:\n    print(foo)\n \nprint(issubclass(SentenceIterator, abc.Iterator))\n```\n#### 上下文管理\n##### \\_\\_enter\\_\\_\n##### \\_\\_exit\\_\\_\n参考链接\nhttps://ttxsgoto.github.io/2017/04/11/python-contextlib/\n#### 描述符\n##### \\_\\_get\\_\\_\n##### \\_\\_set\\_\\_\n##### \\_\\_delete\\_\\_\n参考链接\nhttps://ttxsgoto.github.io/2018/01/31/descriptor/\nhttps://ttxsgoto.github.io/2018/02/01/python-descriptor02/\n","source":"_posts/python-magic-function.md","raw":"---\ntitle: Python 特殊方法\ndate: 2018-02-11 21:13:59\ntags:\n  - class\ncategories:\n  - python\n---\n### 说明\n主要说明类的特殊方法(也叫魔法方法)，了解使用场景和方法，使用时方便查询\n\n### 具体说明\n#### 创建实例和销毁\n##### \\_\\_new\\_\\_\n##### \\_\\_init\\_\\_\n##### \\_\\_del\\_\\_\n```python\nclass Foo01:\n    def __new__(cls, *args, **kwargs):\n        \"\"\"对象实例化调用的第一个方法,在__init__之前, args,kwargs传递给init方法\"\"\"\n        print('__new__')\n        return super().__new__(cls)\n \n    def __init__(self, name):\n    \t\"\"\"初始化实例操作\"\"\"\n        print('__init__')\n        self.name = name\n \n    def __del__(self):\n    \t\"\"\" del 时调用，或实例自行销毁时调用\"\"\"\n        print('__del__')\n        return\n \n \nfoo = Foo01(name='ttxs')  # __init__\nprint(foo.name)  # ttxs\ndel foo  # __del__\n```\n#### 属性管理\n##### \\_\\_getattr\\_\\_\n##### \\_\\_getattribute\\_\\_\n##### \\_\\_setattr\\_\\_\n##### \\_\\_delattr\\_\\_\n##### \\_\\_dir\\_\\_\n```python\nclass Foo02:\n    def __getattr__(self, item):\n        \"\"\" 该方法在访问一个不存在的属性时调用 \"\"\"\n        print('__getattr__')\n        if item not in self.__dict__:\n            return None\n        return super(Foo02, self).__getattr__(item)\n \n    def __setattr__(self, key, value):\n        \"\"\" 该方法在对属性进行赋值和修改时调用,应该避免\"无限递归\"错误,如: self.name = 'xxx' \"\"\"\n        print('__setattr__')\n        # self.key = value    # 每一次属性赋值时, __setattr__都会被调用，因此不断调用自身导致无限递归\n        self.__dict__[key] = value\n        return super(Foo02, self).__setattr__(key, value)\n \n    def __delattr__(self, item):\n        \"\"\" 该方法在删除属性时调用 \"\"\"\n        print('__delattr__')\n        # del self.item         # 无限递归, 原因同上\n        return super(Foo02, self).__delattr__(item)\n \n    def __getattribute__(self, item):\n        \"\"\" 该方法在属性被访问时调用,调用__getattr__前必定会调用 __getattribute__ \"\"\"\n        print('__getattribute__')\n        return super(Foo02, self).__getattribute__(item)\n \n \nfoo02 = Foo02()\nfoo02.abc = 'abc'  # 调用__setattr__方法\nprint(foo02.abc)  # 调用__getattribute__方法\nprint('error---', foo02.x)  # 调用__getattr__方法\nfoo02.__dict__  # 调用__getattribute__方法\ndel foo02.abc  # 调用__delattr__方法\n```\n#### 序列表示形式\n##### \\_\\_str\\_\\_\n##### \\_\\_repr\\_\\_\n##### \\_\\_bytes\\_\\_\n##### \\_\\_doc\\_\\_\n##### \\_\\_format\\_\\_\n```python\nclass Foo03:\n    \"\"\" 文档展示说明表示 (__doc__)\"\"\"\n \n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n \n    def __repr__(self):\n        \"\"\" 主要针对程序的调试,调用和使用,如果定义了str函数print会调用str,没有就调用repr函数 \"\"\"\n        print('__repr__')\n        return '%s with %s id' % (self.name, self.id)\n \n    def __str__(self):\n        \"\"\"print方法时调用\"\"\"\n        print('__str__')\n        return self.name.capitalize()\n \n    def __bytes__(self):\n        print('__bytes__')\n        return '%s in bytes is %s' % (self.name, self.id)\n \n    def __format__(self):\n        \"\"\" 调用format方法时 \"\"\"\n        print('__format__')\n        return '%s in format is %s' % (self.name, self.id)\n \n \nfoo03 = Foo03(name='ttxsgoto', id=666)\nprint(Foo05.__doc__)    # 说明文档信息\nprint(foo05)            # __str__()方法\n \nf = Foo03(name='ttxsgoto', id=666)\nf.__format__()\nff = bytes(f)  # bytes调用\n```\n#### 集合管理\n##### \\_\\_len\\_\\_\n##### \\_\\_getitem\\_\\_\n##### \\_\\_setitem\\_\\_\n##### \\_\\_delitem\\_\\_\n##### \\_\\_contains\\_\\_\n```python\nclass Foo04:\n    def __init__(self, value):\n        if value is None:\n            self.value = {}\n        else:\n            self.value = value\n \n    def __len__(self):\n        \"\"\"表示集合长度\"\"\"\n        return len(self.value)\n \n    def __getitem__(self, item):\n        \"\"\"执行self[item],调用该方法\"\"\"\n        print('__getitem__')\n        return self.value[item]\n \n    def __setitem__(self, key, value):\n        \"\"\"执行self[key]=value,调用该方法\"\"\"\n        print('__setitem__')\n        self.value[key] = value\n \n    def __delitem__(self, key):\n        \"\"\"执行 del self[key],调用该方法\"\"\"\n        print('__delitem__')\n        del self.value[key]\n \n    def __contains__(self, item):\n        \"\"\"判断item是否在容器中,调用该方法in/not in,如 item in container\"\"\"\n        print('__contains__')\n        if item in self.value:\n            return True\n        return False\n \n \nfoo04 = Foo04(value={'a': 'a'})\nfoo04['xx'] = 'abc'  # 调用__setitem__方法\nprint(foo04['xx'])  # 调用__getitem__方法\nprint(len(foo04))  # 调用__len__方法\n \nif 'xx' in foo04:  # 调用__contains__方法\n    print('ok')\nelse:\n    print('error')\n```\n#### 迭代枚举\n##### \\_\\_iter\\_\\_\n##### \\_\\_next\\_\\_\n```python\nimport re\nimport reprlib\nfrom collections import abc\n \nRE_WORD = re.compile('\\w+')\n \nclass Foo04:\n    \"\"\" 通过索引从文本中提取单词 \"\"\"\n \n    def __init__(self, text):\n        self.text = text\n        self.words = RE_WORD.findall(text)\n \n    def __iter__(self):\n        \"\"\" 可迭代对象 \"\"\"\n        return SentenceIterator(self.words)\n \n    def __len__(self, index):\n        return len(self.words)\n \n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)  # 用于生成大型数据结构的简略字符串表示形式, 默认情况下最多30个字符\n \n \nclass SentenceIterator:\n    \"\"\" 迭代器 \"\"\"\n    def __init__(self, words):\n        self.words = words\n        self.index = 0\n \n    def __next__(self):\n        \"\"\" 返回下一个可用的元素，如果没有，抛出StopIteration异常 \"\"\"\n        try:\n            word = self.words[self.index]\n        except IndexError:\n            raise StopIteration()\n        self.index += 1\n        return word\n \n    def __iter__(self):\n        \"\"\" 返回self，以便在应该使用可迭代对象的地方使用迭代器 \"\"\"\n        return self\n \n \nfoo04 = Foo04(text='\"The time has come,\" the Walrus said,')\n \nprint(foo04)\nprint(iter(foo04))\nfor foo in foo04:\n    print(foo)\n \nprint(issubclass(SentenceIterator, abc.Iterator))\n```\n#### 上下文管理\n##### \\_\\_enter\\_\\_\n##### \\_\\_exit\\_\\_\n参考链接\nhttps://ttxsgoto.github.io/2017/04/11/python-contextlib/\n#### 描述符\n##### \\_\\_get\\_\\_\n##### \\_\\_set\\_\\_\n##### \\_\\_delete\\_\\_\n参考链接\nhttps://ttxsgoto.github.io/2018/01/31/descriptor/\nhttps://ttxsgoto.github.io/2018/02/01/python-descriptor02/\n","slug":"python-magic-function","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xn004dct8u5quvl9eo","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>主要说明类的特殊方法(也叫魔法方法)，了解使用场景和方法，使用时方便查询</p>\n<h3 id=\"具体说明\"><a href=\"#具体说明\" class=\"headerlink\" title=\"具体说明\"></a>具体说明</h3><h4 id=\"创建实例和销毁\"><a href=\"#创建实例和销毁\" class=\"headerlink\" title=\"创建实例和销毁\"></a>创建实例和销毁</h4><h5 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"__new__\"></a>__new__</h5><h5 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"__init__\"></a>__init__</h5><h5 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"__del__\"></a>__del__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo01</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"对象实例化调用的第一个方法,在__init__之前, args,kwargs传递给init方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__new__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> super().__new__(cls)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">    \t<span class=\"string\">\"\"\"初始化实例操作\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__init__'</span>)</div><div class=\"line\">        self.name = name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \t<span class=\"string\">\"\"\" del 时调用，或实例自行销毁时调用\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__del__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo = Foo01(name=<span class=\"string\">'ttxs'</span>)  <span class=\"comment\"># __init__</span></div><div class=\"line\">print(foo.name)  <span class=\"comment\"># ttxs</span></div><div class=\"line\"><span class=\"keyword\">del</span> foo  <span class=\"comment\"># __del__</span></div></pre></td></tr></table></figure>\n<h4 id=\"属性管理\"><a href=\"#属性管理\" class=\"headerlink\" title=\"属性管理\"></a>属性管理</h4><h5 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"__getattr__\"></a>__getattr__</h5><h5 id=\"getattribute\"><a href=\"#getattribute\" class=\"headerlink\" title=\"__getattribute__\"></a>__getattribute__</h5><h5 id=\"setattr\"><a href=\"#setattr\" class=\"headerlink\" title=\"__setattr__\"></a>__setattr__</h5><h5 id=\"delattr\"><a href=\"#delattr\" class=\"headerlink\" title=\"__delattr__\"></a>__delattr__</h5><h5 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"__dir__\"></a>__dir__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo02</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在访问一个不存在的属性时调用 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__getattr__'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.__dict__:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__getattr__(item)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, key, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在对属性进行赋值和修改时调用,应该避免\"无限递归\"错误,如: self.name = 'xxx' \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__setattr__'</span>)</div><div class=\"line\">        <span class=\"comment\"># self.key = value    # 每一次属性赋值时, __setattr__都会被调用，因此不断调用自身导致无限递归</span></div><div class=\"line\">        self.__dict__[key] = value</div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__setattr__(key, value)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在删除属性时调用 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__delattr__'</span>)</div><div class=\"line\">        <span class=\"comment\"># del self.item         # 无限递归, 原因同上</span></div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__delattr__(item)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattribute__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在属性被访问时调用,调用__getattr__前必定会调用 __getattribute__ \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__getattribute__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__getattribute__(item)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo02 = Foo02()</div><div class=\"line\">foo02.abc = <span class=\"string\">'abc'</span>  <span class=\"comment\"># 调用__setattr__方法</span></div><div class=\"line\">print(foo02.abc)  <span class=\"comment\"># 调用__getattribute__方法</span></div><div class=\"line\">print(<span class=\"string\">'error---'</span>, foo02.x)  <span class=\"comment\"># 调用__getattr__方法</span></div><div class=\"line\">foo02.__dict__  <span class=\"comment\"># 调用__getattribute__方法</span></div><div class=\"line\"><span class=\"keyword\">del</span> foo02.abc  <span class=\"comment\"># 调用__delattr__方法</span></div></pre></td></tr></table></figure>\n<h4 id=\"序列表示形式\"><a href=\"#序列表示形式\" class=\"headerlink\" title=\"序列表示形式\"></a>序列表示形式</h4><h5 id=\"str\"><a href=\"#str\" class=\"headerlink\" title=\"__str__\"></a>__str__</h5><h5 id=\"repr\"><a href=\"#repr\" class=\"headerlink\" title=\"__repr__\"></a>__repr__</h5><h5 id=\"bytes\"><a href=\"#bytes\" class=\"headerlink\" title=\"__bytes__\"></a>__bytes__</h5><h5 id=\"doc\"><a href=\"#doc\" class=\"headerlink\" title=\"__doc__\"></a>__doc__</h5><h5 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"__format__\"></a>__format__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo03</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 文档展示说明表示 (__doc__)\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, id)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.id = id</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 主要针对程序的调试,调用和使用,如果定义了str函数print会调用str,没有就调用repr函数 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__repr__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'%s with %s id'</span> % (self.name, self.id)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"print方法时调用\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__str__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.name.capitalize()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bytes__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'__bytes__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'%s in bytes is %s'</span> % (self.name, self.id)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 调用format方法时 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__format__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'%s in format is %s'</span> % (self.name, self.id)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo03 = Foo03(name=<span class=\"string\">'ttxsgoto'</span>, id=<span class=\"number\">666</span>)</div><div class=\"line\">print(Foo05.__doc__)    <span class=\"comment\"># 说明文档信息</span></div><div class=\"line\">print(foo05)            <span class=\"comment\"># __str__()方法</span></div><div class=\"line\"> </div><div class=\"line\">f = Foo03(name=<span class=\"string\">'ttxsgoto'</span>, id=<span class=\"number\">666</span>)</div><div class=\"line\">f.__format__()</div><div class=\"line\">ff = bytes(f)  <span class=\"comment\"># bytes调用</span></div></pre></td></tr></table></figure>\n<h4 id=\"集合管理\"><a href=\"#集合管理\" class=\"headerlink\" title=\"集合管理\"></a>集合管理</h4><h5 id=\"len\"><a href=\"#len\" class=\"headerlink\" title=\"__len__\"></a>__len__</h5><h5 id=\"getitem\"><a href=\"#getitem\" class=\"headerlink\" title=\"__getitem__\"></a>__getitem__</h5><h5 id=\"setitem\"><a href=\"#setitem\" class=\"headerlink\" title=\"__setitem__\"></a>__setitem__</h5><h5 id=\"delitem\"><a href=\"#delitem\" class=\"headerlink\" title=\"__delitem__\"></a>__delitem__</h5><h5 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"__contains__\"></a>__contains__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo04</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            self.value = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.value = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"表示集合长度\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> len(self.value)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"执行self[item],调用该方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__getitem__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.value[item]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self, key, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"执行self[key]=value,调用该方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__setitem__'</span>)</div><div class=\"line\">        self.value[key] = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delitem__</span><span class=\"params\">(self, key)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"执行 del self[key],调用该方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__delitem__'</span>)</div><div class=\"line\">        <span class=\"keyword\">del</span> self.value[key]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"判断item是否在容器中,调用该方法in/not in,如 item in container\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__contains__'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> item <span class=\"keyword\">in</span> self.value:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo04 = Foo04(value=&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a'</span>&#125;)</div><div class=\"line\">foo04[<span class=\"string\">'xx'</span>] = <span class=\"string\">'abc'</span>  <span class=\"comment\"># 调用__setitem__方法</span></div><div class=\"line\">print(foo04[<span class=\"string\">'xx'</span>])  <span class=\"comment\"># 调用__getitem__方法</span></div><div class=\"line\">print(len(foo04))  <span class=\"comment\"># 调用__len__方法</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'xx'</span> <span class=\"keyword\">in</span> foo04:  <span class=\"comment\"># 调用__contains__方法</span></div><div class=\"line\">    print(<span class=\"string\">'ok'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'error'</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"迭代枚举\"><a href=\"#迭代枚举\" class=\"headerlink\" title=\"迭代枚举\"></a>迭代枚举</h4><h5 id=\"iter\"><a href=\"#iter\" class=\"headerlink\" title=\"__iter__\"></a>__iter__</h5><h5 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"__next__\"></a>__next__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> reprlib</div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> abc</div><div class=\"line\"> </div><div class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo04</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 通过索引从文本中提取单词 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></div><div class=\"line\">        self.text = text</div><div class=\"line\">        self.words = RE_WORD.findall(text)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 可迭代对象 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> SentenceIterator(self.words)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self, index)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> len(self.words)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)  <span class=\"comment\"># 用于生成大型数据结构的简略字符串表示形式, 默认情况下最多30个字符</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentenceIterator</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 迭代器 \"\"\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, words)</span>:</span></div><div class=\"line\">        self.words = words</div><div class=\"line\">        self.index = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 返回下一个可用的元素，如果没有，抛出StopIteration异常 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            word = self.words[self.index]</div><div class=\"line\">        <span class=\"keyword\">except</span> IndexError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</div><div class=\"line\">        self.index += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> word</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 返回self，以便在应该使用可迭代对象的地方使用迭代器 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo04 = Foo04(text=<span class=\"string\">'\"The time has come,\" the Walrus said,'</span>)</div><div class=\"line\"> </div><div class=\"line\">print(foo04)</div><div class=\"line\">print(iter(foo04))</div><div class=\"line\"><span class=\"keyword\">for</span> foo <span class=\"keyword\">in</span> foo04:</div><div class=\"line\">    print(foo)</div><div class=\"line\"> </div><div class=\"line\">print(issubclass(SentenceIterator, abc.Iterator))</div></pre></td></tr></table></figure>\n<h4 id=\"上下文管理\"><a href=\"#上下文管理\" class=\"headerlink\" title=\"上下文管理\"></a>上下文管理</h4><h5 id=\"enter\"><a href=\"#enter\" class=\"headerlink\" title=\"__enter__\"></a>__enter__</h5><h5 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"__exit__\"></a>__exit__</h5><p>参考链接<br><a href=\"https://ttxsgoto.github.io/2017/04/11/python-contextlib/\">https://ttxsgoto.github.io/2017/04/11/python-contextlib/</a></p>\n<h4 id=\"描述符\"><a href=\"#描述符\" class=\"headerlink\" title=\"描述符\"></a>描述符</h4><h5 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"__get__\"></a>__get__</h5><h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"__set__\"></a>__set__</h5><h5 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"__delete__\"></a>__delete__</h5><p>参考链接<br><a href=\"https://ttxsgoto.github.io/2018/01/31/descriptor/\">https://ttxsgoto.github.io/2018/01/31/descriptor/</a><br><a href=\"https://ttxsgoto.github.io/2018/02/01/python-descriptor02/\">https://ttxsgoto.github.io/2018/02/01/python-descriptor02/</a></p>\n","excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>主要说明类的特殊方法(也叫魔法方法)，了解使用场景和方法，使用时方便查询</p>\n<h3 id=\"具体说明\"><a href=\"#具体说明\" class=\"headerlink\" title=\"具体说明\"></a>具体说明</h3><h4 id=\"创建实例和销毁\"><a href=\"#创建实例和销毁\" class=\"headerlink\" title=\"创建实例和销毁\"></a>创建实例和销毁</h4><h5 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"__new__\"></a>__new__</h5><h5 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"__init__\"></a>__init__</h5><h5 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"__del__\"></a>__del__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo01</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"对象实例化调用的第一个方法,在__init__之前, args,kwargs传递给init方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__new__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> super().__new__(cls)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">    \t<span class=\"string\">\"\"\"初始化实例操作\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__init__'</span>)</div><div class=\"line\">        self.name = name</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    \t<span class=\"string\">\"\"\" del 时调用，或实例自行销毁时调用\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__del__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo = Foo01(name=<span class=\"string\">'ttxs'</span>)  <span class=\"comment\"># __init__</span></div><div class=\"line\">print(foo.name)  <span class=\"comment\"># ttxs</span></div><div class=\"line\"><span class=\"keyword\">del</span> foo  <span class=\"comment\"># __del__</span></div></pre></td></tr></table></figure>\n<h4 id=\"属性管理\"><a href=\"#属性管理\" class=\"headerlink\" title=\"属性管理\"></a>属性管理</h4><h5 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"__getattr__\"></a>__getattr__</h5><h5 id=\"getattribute\"><a href=\"#getattribute\" class=\"headerlink\" title=\"__getattribute__\"></a>__getattribute__</h5><h5 id=\"setattr\"><a href=\"#setattr\" class=\"headerlink\" title=\"__setattr__\"></a>__setattr__</h5><h5 id=\"delattr\"><a href=\"#delattr\" class=\"headerlink\" title=\"__delattr__\"></a>__delattr__</h5><h5 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"__dir__\"></a>__dir__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo02</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在访问一个不存在的属性时调用 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__getattr__'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.__dict__:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__getattr__(item)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, key, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在对属性进行赋值和修改时调用,应该避免\"无限递归\"错误,如: self.name = 'xxx' \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__setattr__'</span>)</div><div class=\"line\">        <span class=\"comment\"># self.key = value    # 每一次属性赋值时, __setattr__都会被调用，因此不断调用自身导致无限递归</span></div><div class=\"line\">        self.__dict__[key] = value</div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__setattr__(key, value)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在删除属性时调用 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__delattr__'</span>)</div><div class=\"line\">        <span class=\"comment\"># del self.item         # 无限递归, 原因同上</span></div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__delattr__(item)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattribute__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 该方法在属性被访问时调用,调用__getattr__前必定会调用 __getattribute__ \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__getattribute__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> super(Foo02, self).__getattribute__(item)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo02 = Foo02()</div><div class=\"line\">foo02.abc = <span class=\"string\">'abc'</span>  <span class=\"comment\"># 调用__setattr__方法</span></div><div class=\"line\">print(foo02.abc)  <span class=\"comment\"># 调用__getattribute__方法</span></div><div class=\"line\">print(<span class=\"string\">'error---'</span>, foo02.x)  <span class=\"comment\"># 调用__getattr__方法</span></div><div class=\"line\">foo02.__dict__  <span class=\"comment\"># 调用__getattribute__方法</span></div><div class=\"line\"><span class=\"keyword\">del</span> foo02.abc  <span class=\"comment\"># 调用__delattr__方法</span></div></pre></td></tr></table></figure>\n<h4 id=\"序列表示形式\"><a href=\"#序列表示形式\" class=\"headerlink\" title=\"序列表示形式\"></a>序列表示形式</h4><h5 id=\"str\"><a href=\"#str\" class=\"headerlink\" title=\"__str__\"></a>__str__</h5><h5 id=\"repr\"><a href=\"#repr\" class=\"headerlink\" title=\"__repr__\"></a>__repr__</h5><h5 id=\"bytes\"><a href=\"#bytes\" class=\"headerlink\" title=\"__bytes__\"></a>__bytes__</h5><h5 id=\"doc\"><a href=\"#doc\" class=\"headerlink\" title=\"__doc__\"></a>__doc__</h5><h5 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"__format__\"></a>__format__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo03</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 文档展示说明表示 (__doc__)\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, id)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.id = id</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 主要针对程序的调试,调用和使用,如果定义了str函数print会调用str,没有就调用repr函数 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__repr__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'%s with %s id'</span> % (self.name, self.id)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"print方法时调用\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__str__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.name.capitalize()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bytes__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'__bytes__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'%s in bytes is %s'</span> % (self.name, self.id)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 调用format方法时 \"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__format__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'%s in format is %s'</span> % (self.name, self.id)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo03 = Foo03(name=<span class=\"string\">'ttxsgoto'</span>, id=<span class=\"number\">666</span>)</div><div class=\"line\">print(Foo05.__doc__)    <span class=\"comment\"># 说明文档信息</span></div><div class=\"line\">print(foo05)            <span class=\"comment\"># __str__()方法</span></div><div class=\"line\"> </div><div class=\"line\">f = Foo03(name=<span class=\"string\">'ttxsgoto'</span>, id=<span class=\"number\">666</span>)</div><div class=\"line\">f.__format__()</div><div class=\"line\">ff = bytes(f)  <span class=\"comment\"># bytes调用</span></div></pre></td></tr></table></figure>\n<h4 id=\"集合管理\"><a href=\"#集合管理\" class=\"headerlink\" title=\"集合管理\"></a>集合管理</h4><h5 id=\"len\"><a href=\"#len\" class=\"headerlink\" title=\"__len__\"></a>__len__</h5><h5 id=\"getitem\"><a href=\"#getitem\" class=\"headerlink\" title=\"__getitem__\"></a>__getitem__</h5><h5 id=\"setitem\"><a href=\"#setitem\" class=\"headerlink\" title=\"__setitem__\"></a>__setitem__</h5><h5 id=\"delitem\"><a href=\"#delitem\" class=\"headerlink\" title=\"__delitem__\"></a>__delitem__</h5><h5 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"__contains__\"></a>__contains__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo04</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            self.value = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.value = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"表示集合长度\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> len(self.value)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"执行self[item],调用该方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__getitem__'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.value[item]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self, key, value)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"执行self[key]=value,调用该方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__setitem__'</span>)</div><div class=\"line\">        self.value[key] = value</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delitem__</span><span class=\"params\">(self, key)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"执行 del self[key],调用该方法\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__delitem__'</span>)</div><div class=\"line\">        <span class=\"keyword\">del</span> self.value[key]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"判断item是否在容器中,调用该方法in/not in,如 item in container\"\"\"</span></div><div class=\"line\">        print(<span class=\"string\">'__contains__'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> item <span class=\"keyword\">in</span> self.value:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo04 = Foo04(value=&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a'</span>&#125;)</div><div class=\"line\">foo04[<span class=\"string\">'xx'</span>] = <span class=\"string\">'abc'</span>  <span class=\"comment\"># 调用__setitem__方法</span></div><div class=\"line\">print(foo04[<span class=\"string\">'xx'</span>])  <span class=\"comment\"># 调用__getitem__方法</span></div><div class=\"line\">print(len(foo04))  <span class=\"comment\"># 调用__len__方法</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'xx'</span> <span class=\"keyword\">in</span> foo04:  <span class=\"comment\"># 调用__contains__方法</span></div><div class=\"line\">    print(<span class=\"string\">'ok'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'error'</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"迭代枚举\"><a href=\"#迭代枚举\" class=\"headerlink\" title=\"迭代枚举\"></a>迭代枚举</h4><h5 id=\"iter\"><a href=\"#iter\" class=\"headerlink\" title=\"__iter__\"></a>__iter__</h5><h5 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"__next__\"></a>__next__</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> reprlib</div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> abc</div><div class=\"line\"> </div><div class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo04</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 通过索引从文本中提取单词 \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></div><div class=\"line\">        self.text = text</div><div class=\"line\">        self.words = RE_WORD.findall(text)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 可迭代对象 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> SentenceIterator(self.words)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self, index)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> len(self.words)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)  <span class=\"comment\"># 用于生成大型数据结构的简略字符串表示形式, 默认情况下最多30个字符</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentenceIterator</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" 迭代器 \"\"\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, words)</span>:</span></div><div class=\"line\">        self.words = words</div><div class=\"line\">        self.index = <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 返回下一个可用的元素，如果没有，抛出StopIteration异常 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            word = self.words[self.index]</div><div class=\"line\">        <span class=\"keyword\">except</span> IndexError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</div><div class=\"line\">        self.index += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> word</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" 返回self，以便在应该使用可迭代对象的地方使用迭代器 \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">foo04 = Foo04(text=<span class=\"string\">'\"The time has come,\" the Walrus said,'</span>)</div><div class=\"line\"> </div><div class=\"line\">print(foo04)</div><div class=\"line\">print(iter(foo04))</div><div class=\"line\"><span class=\"keyword\">for</span> foo <span class=\"keyword\">in</span> foo04:</div><div class=\"line\">    print(foo)</div><div class=\"line\"> </div><div class=\"line\">print(issubclass(SentenceIterator, abc.Iterator))</div></pre></td></tr></table></figure>\n<h4 id=\"上下文管理\"><a href=\"#上下文管理\" class=\"headerlink\" title=\"上下文管理\"></a>上下文管理</h4><h5 id=\"enter\"><a href=\"#enter\" class=\"headerlink\" title=\"__enter__\"></a>__enter__</h5><h5 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"__exit__\"></a>__exit__</h5><p>参考链接<br><a href=\"https://ttxsgoto.github.io/2017/04/11/python-contextlib/\">https://ttxsgoto.github.io/2017/04/11/python-contextlib/</a></p>\n<h4 id=\"描述符\"><a href=\"#描述符\" class=\"headerlink\" title=\"描述符\"></a>描述符</h4><h5 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"__get__\"></a>__get__</h5><h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"__set__\"></a>__set__</h5><h5 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"__delete__\"></a>__delete__</h5><p>参考链接<br><a href=\"https://ttxsgoto.github.io/2018/01/31/descriptor/\">https://ttxsgoto.github.io/2018/01/31/descriptor/</a><br><a href=\"https://ttxsgoto.github.io/2018/02/01/python-descriptor02/\">https://ttxsgoto.github.io/2018/02/01/python-descriptor02/</a></p>\n"},{"title":"Python Selenium模块","date":"2017-12-12T23:39:28.000Z","_content":"\n#### 说明\nSelenium是Thoughtworks公司的一个集成测试的强大工具，Selenium 是 ThoughtWorks 专门为 Web 应用程序编写的一个验收测试工具；使用 Selenium 的最大好处是： Selenium 测试直接在浏览器中运行，就像真实用户所做的一样。在浏览器加载js后，便可以通过xpath来解析网页了。直接pip install selenium 安装完成\n\n#### 实例\n```python\n#!/usr/bin/env python\n# coding: utf-8\nimport time\nimport unittest\n \nfrom selenium import webdriver  # selenium.webdriver 模块提供了所有WebDriver的实现,如Firefox, Chrome, IE and Remote\nfrom selenium.webdriver.common.keys import Keys # `Keys`类提供键盘按键的支持\n \nclass PythonOrgSearch(unittest.TestCase):\n \n    def setUp(self):\n        self.driver = webdriver.Chrome(executable_path=/usr/bin/chromedriver)     # 创建实例\n \n    def test_search(self):\n        driver = self.driver\n        driver.get(\"http://www.python.org\") # 方法将打开URL中填写的地址，WebDriver 将等待， 直到页面完全加载完毕（其实是等到”onload” 方法执行完毕），然后返回继续执行你的脚本。 值得注意的是，如果你的页面使用了大量的Ajax加载， WebDriver可能不知道什么时候页面已经完全加载\n        self.assertIn(\"Python\", driver.title)     # driver.title 表示网页标题\n        elem = driver.find_element_by_name(\"q\")\n        elem.clear()    # 预先清除input输入框中的任何预填充的文本\n        elem.send_keys(\"pycon\") # 输入搜索字\n        elem.send_keys(Keys.RETURN) # 发送keys，这个和使用键盘输入keys类似。 特殊的按键可以通过引入`selenium.webdriver.common.keys`的 Keys 类来输入,如enturn,\n        time.sleep(10)\n        assert \"No results found.\" not in driver.page_source    # driver.page_source 网页html源文件\n    \n    def test_other(self):\n        \"\"\"常用其他模块说明\"\"\"\n        browser = self.driver\n        browser.get(\"http://www.python.org\")\n        elem = browser.find_element_by_css_selector('input#id-search-field')\n        elem.clear()\n        elem.send_keys('python')\n        browser.find_element_by_css_selector('button#submit').click()   # 通过查找对应的元素，然后调用click方法\n        \n        # 将得到的网页通过scrapy的Selector来解析\n        from scrapy.selector import Selector\n        selector = Selector(text=browser.page_source)\n        submit = selector.css('button#submit::text').extract_first()\n        self.assertEqual('Go', submit.strip())\n \n    def tearDown(self):\n        self.driver.close() # close只会关闭一个标签页; quit关闭整个浏览器\n \n \nif __name__ == \"__main__\":\n    unittest.main()\n \n```\n\n#### 页面交互\n```\n<input type=\"text\" name=\"passwd\" id=\"passwd-id\" />\n```\n查询如下：\n```\nelement = driver.find_element_by_id(\"passwd-id\")\nelement = driver.find_element_by_name(\"passwd\")\nelement = driver.find_element_by_xpath(\"//input[@id='passwd-id']\")\n```\n`注意`：当使用`XPATH`时，你必须注意，如果匹配超过一个元素，只返回第一个元素。 如果上面也没找到，将会抛出 ``NoSuchElementException``异常。\n\n常用方法：\n```\nelement.send_keys(\"some text\")  # 输入内容\nelement.send_keys(\" and some\", Keys.ARROW_DOWN)    # 输入方向键\nelement.clear() # 预先清楚input/textarea中内容\nselect.deselect_all()   # 取消选择已经选择的元素\ndriver.find_element_by_id(\"submit\").click() # 提交\ndriver.switch_to_alert()    # 弹出对话框\ndriver.forward()    # 浏览历史中的前进\ndriver.back()   # 浏览历史中的后退\ndriver.get_cookies()    # 获取cookie\n```\n\n#### 查找元素\nSelenium提供的方法：\n- find_element\n- find_element_by_id\n- find_element_by_name\n- find_element_by_xpath\n- find_element_by_link_text\n- find_element_by_partial_link_text\n- find_element_by_tag_name\n- find_element_by_class_name\n- find_element_by_css_selector\n\n一次查找多个元素(返回list列表):\n- find_elements\n- find_elements_by_name\n- find_elements_by_xpath\n- find_elements_by_link_text\n- find_elements_by_partial_link_text\n- find_elements_by_tag_name\n- find_elements_by_class_name\n- find_elements_by_css_selector\n\n---\n`查找元素实例`\n- find_element_by_id\n```html\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n  </form>\n </body>\n<html>\n \n可以这样查找表单(form)元素\nlogin_form = driver.find_element_by_id('loginForm')\n```\n- find_element_by_name\n```html\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n   <input name=\"continue\" type=\"button\" value=\"Clear\" />\n  </form>\n</body>\n<html>\n \nname属性为 username & password 的元素可以像下面这样查找\nusername = driver.find_element_by_name('username')\npassword = driver.find_element_by_name('password')\ncontinue = driver.find_element_by_name('continue')\n```\n- find_element_by_xpath\n```html\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n   <input name=\"continue\" type=\"button\" value=\"Clear\" />\n  </form>\n</body>\n<html>\n \n可以这样查找表单(form)元素\nlogin_form = driver.find_element_by_xpath(\"/html/body/form[1]\")\nlogin_form = driver.find_element_by_xpath(\"//form[1]\")\nlogin_form = driver.find_element_by_xpath(\"//form[@id='loginForm']\")\n \nusername = driver.find_element_by_xpath(\"//form[input/@name='username']\")\nusername = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[1]\")\nusername = driver.find_element_by_xpath(\"//input[@name='username']\")\n \nclear_button = driver.find_element_by_xpath(\"//input[@name='continue'][@type='button']\")\nclear_button = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[4]\")\n```\n- find_element_by_link_text\n```html\n<html>\n <body>\n  <p>Are you sure you want to do this?</p>\n  <a href=\"continue.html\">Continue</a>\n  <a href=\"cancel.html\">Cancel</a>\n</body>\n<html>\n \ncontinue.html 超链接可以被这样查找到:\ncontinue_link = driver.find_element_by_link_text('Continue')\ncontinue_link = driver.find_element_by_partial_link_text('Conti')\n```\n- find_element_by_tag_name\n```html\n<html>\n <body>\n  <h1>Welcome</h1>\n  <p>Site content goes here.</p>\n</body>\n<html>\n \nh1 元素可以如下查找\nheading1 = driver.find_element_by_tag_name('h1')\n```\n- find_element_by_class_name\n```html\n<html>\n <body>\n  <p class=\"content\">Site content goes here.</p>\n</body>\n<html>\n \np 元素可以如下查找\ncontent = driver.find_element_by_class_name('content')\n```\n- find_element_by_css_selector\n```html\n<html>\n <body>\n  <p class=\"content\">Site content goes here.</p>\n</body>\n<html>\n \np 元素可以如下查找:\ncontent = driver.find_element_by_css_selector('p.content')\n```\n\n#### 等待加载\n- 显式等待\n\n    显式等待是你在代码中定义等待一定条件发生后再进一步执行你的代码，最糟糕的案例是使用time.sleep()，它将条件设置为等待一个确切的时间段\n\n- 隐式等待\n\n    如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素\n\n\n","source":"_posts/python-selenium.md","raw":"---\ntitle: Python Selenium模块\ndate: 2017-12-13 07:39:28\ntags:\n  - Selenium\n  - Scrapy\ncategories:\n  - python\n---\n\n#### 说明\nSelenium是Thoughtworks公司的一个集成测试的强大工具，Selenium 是 ThoughtWorks 专门为 Web 应用程序编写的一个验收测试工具；使用 Selenium 的最大好处是： Selenium 测试直接在浏览器中运行，就像真实用户所做的一样。在浏览器加载js后，便可以通过xpath来解析网页了。直接pip install selenium 安装完成\n\n#### 实例\n```python\n#!/usr/bin/env python\n# coding: utf-8\nimport time\nimport unittest\n \nfrom selenium import webdriver  # selenium.webdriver 模块提供了所有WebDriver的实现,如Firefox, Chrome, IE and Remote\nfrom selenium.webdriver.common.keys import Keys # `Keys`类提供键盘按键的支持\n \nclass PythonOrgSearch(unittest.TestCase):\n \n    def setUp(self):\n        self.driver = webdriver.Chrome(executable_path=/usr/bin/chromedriver)     # 创建实例\n \n    def test_search(self):\n        driver = self.driver\n        driver.get(\"http://www.python.org\") # 方法将打开URL中填写的地址，WebDriver 将等待， 直到页面完全加载完毕（其实是等到”onload” 方法执行完毕），然后返回继续执行你的脚本。 值得注意的是，如果你的页面使用了大量的Ajax加载， WebDriver可能不知道什么时候页面已经完全加载\n        self.assertIn(\"Python\", driver.title)     # driver.title 表示网页标题\n        elem = driver.find_element_by_name(\"q\")\n        elem.clear()    # 预先清除input输入框中的任何预填充的文本\n        elem.send_keys(\"pycon\") # 输入搜索字\n        elem.send_keys(Keys.RETURN) # 发送keys，这个和使用键盘输入keys类似。 特殊的按键可以通过引入`selenium.webdriver.common.keys`的 Keys 类来输入,如enturn,\n        time.sleep(10)\n        assert \"No results found.\" not in driver.page_source    # driver.page_source 网页html源文件\n    \n    def test_other(self):\n        \"\"\"常用其他模块说明\"\"\"\n        browser = self.driver\n        browser.get(\"http://www.python.org\")\n        elem = browser.find_element_by_css_selector('input#id-search-field')\n        elem.clear()\n        elem.send_keys('python')\n        browser.find_element_by_css_selector('button#submit').click()   # 通过查找对应的元素，然后调用click方法\n        \n        # 将得到的网页通过scrapy的Selector来解析\n        from scrapy.selector import Selector\n        selector = Selector(text=browser.page_source)\n        submit = selector.css('button#submit::text').extract_first()\n        self.assertEqual('Go', submit.strip())\n \n    def tearDown(self):\n        self.driver.close() # close只会关闭一个标签页; quit关闭整个浏览器\n \n \nif __name__ == \"__main__\":\n    unittest.main()\n \n```\n\n#### 页面交互\n```\n<input type=\"text\" name=\"passwd\" id=\"passwd-id\" />\n```\n查询如下：\n```\nelement = driver.find_element_by_id(\"passwd-id\")\nelement = driver.find_element_by_name(\"passwd\")\nelement = driver.find_element_by_xpath(\"//input[@id='passwd-id']\")\n```\n`注意`：当使用`XPATH`时，你必须注意，如果匹配超过一个元素，只返回第一个元素。 如果上面也没找到，将会抛出 ``NoSuchElementException``异常。\n\n常用方法：\n```\nelement.send_keys(\"some text\")  # 输入内容\nelement.send_keys(\" and some\", Keys.ARROW_DOWN)    # 输入方向键\nelement.clear() # 预先清楚input/textarea中内容\nselect.deselect_all()   # 取消选择已经选择的元素\ndriver.find_element_by_id(\"submit\").click() # 提交\ndriver.switch_to_alert()    # 弹出对话框\ndriver.forward()    # 浏览历史中的前进\ndriver.back()   # 浏览历史中的后退\ndriver.get_cookies()    # 获取cookie\n```\n\n#### 查找元素\nSelenium提供的方法：\n- find_element\n- find_element_by_id\n- find_element_by_name\n- find_element_by_xpath\n- find_element_by_link_text\n- find_element_by_partial_link_text\n- find_element_by_tag_name\n- find_element_by_class_name\n- find_element_by_css_selector\n\n一次查找多个元素(返回list列表):\n- find_elements\n- find_elements_by_name\n- find_elements_by_xpath\n- find_elements_by_link_text\n- find_elements_by_partial_link_text\n- find_elements_by_tag_name\n- find_elements_by_class_name\n- find_elements_by_css_selector\n\n---\n`查找元素实例`\n- find_element_by_id\n```html\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n  </form>\n </body>\n<html>\n \n可以这样查找表单(form)元素\nlogin_form = driver.find_element_by_id('loginForm')\n```\n- find_element_by_name\n```html\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n   <input name=\"continue\" type=\"button\" value=\"Clear\" />\n  </form>\n</body>\n<html>\n \nname属性为 username & password 的元素可以像下面这样查找\nusername = driver.find_element_by_name('username')\npassword = driver.find_element_by_name('password')\ncontinue = driver.find_element_by_name('continue')\n```\n- find_element_by_xpath\n```html\n<html>\n <body>\n  <form id=\"loginForm\">\n   <input name=\"username\" type=\"text\" />\n   <input name=\"password\" type=\"password\" />\n   <input name=\"continue\" type=\"submit\" value=\"Login\" />\n   <input name=\"continue\" type=\"button\" value=\"Clear\" />\n  </form>\n</body>\n<html>\n \n可以这样查找表单(form)元素\nlogin_form = driver.find_element_by_xpath(\"/html/body/form[1]\")\nlogin_form = driver.find_element_by_xpath(\"//form[1]\")\nlogin_form = driver.find_element_by_xpath(\"//form[@id='loginForm']\")\n \nusername = driver.find_element_by_xpath(\"//form[input/@name='username']\")\nusername = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[1]\")\nusername = driver.find_element_by_xpath(\"//input[@name='username']\")\n \nclear_button = driver.find_element_by_xpath(\"//input[@name='continue'][@type='button']\")\nclear_button = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[4]\")\n```\n- find_element_by_link_text\n```html\n<html>\n <body>\n  <p>Are you sure you want to do this?</p>\n  <a href=\"continue.html\">Continue</a>\n  <a href=\"cancel.html\">Cancel</a>\n</body>\n<html>\n \ncontinue.html 超链接可以被这样查找到:\ncontinue_link = driver.find_element_by_link_text('Continue')\ncontinue_link = driver.find_element_by_partial_link_text('Conti')\n```\n- find_element_by_tag_name\n```html\n<html>\n <body>\n  <h1>Welcome</h1>\n  <p>Site content goes here.</p>\n</body>\n<html>\n \nh1 元素可以如下查找\nheading1 = driver.find_element_by_tag_name('h1')\n```\n- find_element_by_class_name\n```html\n<html>\n <body>\n  <p class=\"content\">Site content goes here.</p>\n</body>\n<html>\n \np 元素可以如下查找\ncontent = driver.find_element_by_class_name('content')\n```\n- find_element_by_css_selector\n```html\n<html>\n <body>\n  <p class=\"content\">Site content goes here.</p>\n</body>\n<html>\n \np 元素可以如下查找:\ncontent = driver.find_element_by_css_selector('p.content')\n```\n\n#### 等待加载\n- 显式等待\n\n    显式等待是你在代码中定义等待一定条件发生后再进一步执行你的代码，最糟糕的案例是使用time.sleep()，它将条件设置为等待一个确切的时间段\n\n- 隐式等待\n\n    如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素\n\n\n","slug":"python-selenium","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xq004hct8uaxkdiskj","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Selenium是Thoughtworks公司的一个集成测试的强大工具，Selenium 是 ThoughtWorks 专门为 Web 应用程序编写的一个验收测试工具；使用 Selenium 的最大好处是： Selenium 测试直接在浏览器中运行，就像真实用户所做的一样。在浏览器加载js后，便可以通过xpath来解析网页了。直接pip install selenium 安装完成</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver  <span class=\"comment\"># selenium.webdriver 模块提供了所有WebDriver的实现,如Firefox, Chrome, IE and Remote</span></div><div class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.keys <span class=\"keyword\">import</span> Keys <span class=\"comment\"># `Keys`类提供键盘按键的支持</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PythonOrgSearch</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.driver = webdriver.Chrome(executable_path=/usr/bin/chromedriver)     <span class=\"comment\"># 创建实例</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_search</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        driver = self.driver</div><div class=\"line\">        driver.get(<span class=\"string\">\"http://www.python.org\"</span>) <span class=\"comment\"># 方法将打开URL中填写的地址，WebDriver 将等待， 直到页面完全加载完毕（其实是等到”onload” 方法执行完毕），然后返回继续执行你的脚本。 值得注意的是，如果你的页面使用了大量的Ajax加载， WebDriver可能不知道什么时候页面已经完全加载</span></div><div class=\"line\">        self.assertIn(<span class=\"string\">\"Python\"</span>, driver.title)     <span class=\"comment\"># driver.title 表示网页标题</span></div><div class=\"line\">        elem = driver.find_element_by_name(<span class=\"string\">\"q\"</span>)</div><div class=\"line\">        elem.clear()    <span class=\"comment\"># 预先清除input输入框中的任何预填充的文本</span></div><div class=\"line\">        elem.send_keys(<span class=\"string\">\"pycon\"</span>) <span class=\"comment\"># 输入搜索字</span></div><div class=\"line\">        elem.send_keys(Keys.RETURN) <span class=\"comment\"># 发送keys，这个和使用键盘输入keys类似。 特殊的按键可以通过引入`selenium.webdriver.common.keys`的 Keys 类来输入,如enturn,</span></div><div class=\"line\">        time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"string\">\"No results found.\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> driver.page_source    <span class=\"comment\"># driver.page_source 网页html源文件</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_other</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"常用其他模块说明\"\"\"</span></div><div class=\"line\">        browser = self.driver</div><div class=\"line\">        browser.get(<span class=\"string\">\"http://www.python.org\"</span>)</div><div class=\"line\">        elem = browser.find_element_by_css_selector(<span class=\"string\">'input#id-search-field'</span>)</div><div class=\"line\">        elem.clear()</div><div class=\"line\">        elem.send_keys(<span class=\"string\">'python'</span>)</div><div class=\"line\">        browser.find_element_by_css_selector(<span class=\"string\">'button#submit'</span>).click()   <span class=\"comment\"># 通过查找对应的元素，然后调用click方法</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 将得到的网页通过scrapy的Selector来解析</span></div><div class=\"line\">        <span class=\"keyword\">from</span> scrapy.selector <span class=\"keyword\">import</span> Selector</div><div class=\"line\">        selector = Selector(text=browser.page_source)</div><div class=\"line\">        submit = selector.css(<span class=\"string\">'button#submit::text'</span>).extract_first()</div><div class=\"line\">        self.assertEqual(<span class=\"string\">'Go'</span>, submit.strip())</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.driver.close() <span class=\"comment\"># close只会关闭一个标签页; quit关闭整个浏览器</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    unittest.main()</div></pre></td></tr></table></figure>\n<h4 id=\"页面交互\"><a href=\"#页面交互\" class=\"headerlink\" title=\"页面交互\"></a>页面交互</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot; name=&quot;passwd&quot; id=&quot;passwd-id&quot; /&gt;</div></pre></td></tr></table></figure>\n<p>查询如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">element = driver.find_element_by_id(&quot;passwd-id&quot;)</div><div class=\"line\">element = driver.find_element_by_name(&quot;passwd&quot;)</div><div class=\"line\">element = driver.find_element_by_xpath(&quot;//input[@id=&apos;passwd-id&apos;]&quot;)</div></pre></td></tr></table></figure></p>\n<p><code>注意</code>：当使用<code>XPATH</code>时，你必须注意，如果匹配超过一个元素，只返回第一个元素。 如果上面也没找到，将会抛出 <code>NoSuchElementException</code>异常。</p>\n<p>常用方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.send_keys(&quot;some text&quot;)  # 输入内容</div><div class=\"line\">element.send_keys(&quot; and some&quot;, Keys.ARROW_DOWN)    # 输入方向键</div><div class=\"line\">element.clear() # 预先清楚input/textarea中内容</div><div class=\"line\">select.deselect_all()   # 取消选择已经选择的元素</div><div class=\"line\">driver.find_element_by_id(&quot;submit&quot;).click() # 提交</div><div class=\"line\">driver.switch_to_alert()    # 弹出对话框</div><div class=\"line\">driver.forward()    # 浏览历史中的前进</div><div class=\"line\">driver.back()   # 浏览历史中的后退</div><div class=\"line\">driver.get_cookies()    # 获取cookie</div></pre></td></tr></table></figure></p>\n<h4 id=\"查找元素\"><a href=\"#查找元素\" class=\"headerlink\" title=\"查找元素\"></a>查找元素</h4><p>Selenium提供的方法：</p>\n<ul>\n<li>find_element</li>\n<li>find_element_by_id</li>\n<li>find_element_by_name</li>\n<li>find_element_by_xpath</li>\n<li>find_element_by_link_text</li>\n<li>find_element_by_partial_link_text</li>\n<li>find_element_by_tag_name</li>\n<li>find_element_by_class_name</li>\n<li>find_element_by_css_selector</li>\n</ul>\n<p>一次查找多个元素(返回list列表):</p>\n<ul>\n<li>find_elements</li>\n<li>find_elements_by_name</li>\n<li>find_elements_by_xpath</li>\n<li>find_elements_by_link_text</li>\n<li>find_elements_by_partial_link_text</li>\n<li>find_elements_by_tag_name</li>\n<li>find_elements_by_class_name</li>\n<li>find_elements_by_css_selector</li>\n</ul>\n<hr>\n<p><code>查找元素实例</code></p>\n<ul>\n<li><p>find_element_by_id</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginForm\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">可以这样查找表单(form)元素</div><div class=\"line\">login_form = driver.find_element_by_id('loginForm')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_name</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginForm\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Clear\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">name属性为 username &amp; password 的元素可以像下面这样查找</div><div class=\"line\">username = driver.find_element_by_name('username')</div><div class=\"line\">password = driver.find_element_by_name('password')</div><div class=\"line\">continue = driver.find_element_by_name('continue')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_xpath</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginForm\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Clear\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">可以这样查找表单(form)元素</div><div class=\"line\">login_form = driver.find_element_by_xpath(\"/html/body/form[1]\")</div><div class=\"line\">login_form = driver.find_element_by_xpath(\"//form[1]\")</div><div class=\"line\">login_form = driver.find_element_by_xpath(\"//form[@id='loginForm']\")</div><div class=\"line\"> </div><div class=\"line\">username = driver.find_element_by_xpath(\"//form[input/@name='username']\")</div><div class=\"line\">username = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[1]\")</div><div class=\"line\">username = driver.find_element_by_xpath(\"//input[@name='username']\")</div><div class=\"line\"> </div><div class=\"line\">clear_button = driver.find_element_by_xpath(\"//input[@name='continue'][@type='button']\")</div><div class=\"line\">clear_button = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[4]\")</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_link_text</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Are you sure you want to do this?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"continue.html\"</span>&gt;</span>Continue<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"cancel.html\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">continue.html 超链接可以被这样查找到:</div><div class=\"line\">continue_link = driver.find_element_by_link_text('Continue')</div><div class=\"line\">continue_link = driver.find_element_by_partial_link_text('Conti')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_tag_name</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Site content goes here.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">h1 元素可以如下查找</div><div class=\"line\">heading1 = driver.find_element_by_tag_name('h1')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_class_name</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>Site content goes here.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">p 元素可以如下查找</div><div class=\"line\">content = driver.find_element_by_class_name('content')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_css_selector</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>Site content goes here.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">p 元素可以如下查找:</div><div class=\"line\">content = driver.find_element_by_css_selector('p.content')</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"等待加载\"><a href=\"#等待加载\" class=\"headerlink\" title=\"等待加载\"></a>等待加载</h4><ul>\n<li><p>显式等待</p>\n<p>  显式等待是你在代码中定义等待一定条件发生后再进一步执行你的代码，最糟糕的案例是使用time.sleep()，它将条件设置为等待一个确切的时间段</p>\n</li>\n<li><p>隐式等待</p>\n<p>  如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素</p>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Selenium是Thoughtworks公司的一个集成测试的强大工具，Selenium 是 ThoughtWorks 专门为 Web 应用程序编写的一个验收测试工具；使用 Selenium 的最大好处是： Selenium 测试直接在浏览器中运行，就像真实用户所做的一样。在浏览器加载js后，便可以通过xpath来解析网页了。直接pip install selenium 安装完成</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver  <span class=\"comment\"># selenium.webdriver 模块提供了所有WebDriver的实现,如Firefox, Chrome, IE and Remote</span></div><div class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.keys <span class=\"keyword\">import</span> Keys <span class=\"comment\"># `Keys`类提供键盘按键的支持</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PythonOrgSearch</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.driver = webdriver.Chrome(executable_path=/usr/bin/chromedriver)     <span class=\"comment\"># 创建实例</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_search</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        driver = self.driver</div><div class=\"line\">        driver.get(<span class=\"string\">\"http://www.python.org\"</span>) <span class=\"comment\"># 方法将打开URL中填写的地址，WebDriver 将等待， 直到页面完全加载完毕（其实是等到”onload” 方法执行完毕），然后返回继续执行你的脚本。 值得注意的是，如果你的页面使用了大量的Ajax加载， WebDriver可能不知道什么时候页面已经完全加载</span></div><div class=\"line\">        self.assertIn(<span class=\"string\">\"Python\"</span>, driver.title)     <span class=\"comment\"># driver.title 表示网页标题</span></div><div class=\"line\">        elem = driver.find_element_by_name(<span class=\"string\">\"q\"</span>)</div><div class=\"line\">        elem.clear()    <span class=\"comment\"># 预先清除input输入框中的任何预填充的文本</span></div><div class=\"line\">        elem.send_keys(<span class=\"string\">\"pycon\"</span>) <span class=\"comment\"># 输入搜索字</span></div><div class=\"line\">        elem.send_keys(Keys.RETURN) <span class=\"comment\"># 发送keys，这个和使用键盘输入keys类似。 特殊的按键可以通过引入`selenium.webdriver.common.keys`的 Keys 类来输入,如enturn,</span></div><div class=\"line\">        time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"string\">\"No results found.\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> driver.page_source    <span class=\"comment\"># driver.page_source 网页html源文件</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_other</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"常用其他模块说明\"\"\"</span></div><div class=\"line\">        browser = self.driver</div><div class=\"line\">        browser.get(<span class=\"string\">\"http://www.python.org\"</span>)</div><div class=\"line\">        elem = browser.find_element_by_css_selector(<span class=\"string\">'input#id-search-field'</span>)</div><div class=\"line\">        elem.clear()</div><div class=\"line\">        elem.send_keys(<span class=\"string\">'python'</span>)</div><div class=\"line\">        browser.find_element_by_css_selector(<span class=\"string\">'button#submit'</span>).click()   <span class=\"comment\"># 通过查找对应的元素，然后调用click方法</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 将得到的网页通过scrapy的Selector来解析</span></div><div class=\"line\">        <span class=\"keyword\">from</span> scrapy.selector <span class=\"keyword\">import</span> Selector</div><div class=\"line\">        selector = Selector(text=browser.page_source)</div><div class=\"line\">        submit = selector.css(<span class=\"string\">'button#submit::text'</span>).extract_first()</div><div class=\"line\">        self.assertEqual(<span class=\"string\">'Go'</span>, submit.strip())</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.driver.close() <span class=\"comment\"># close只会关闭一个标签页; quit关闭整个浏览器</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    unittest.main()</div></pre></td></tr></table></figure>\n<h4 id=\"页面交互\"><a href=\"#页面交互\" class=\"headerlink\" title=\"页面交互\"></a>页面交互</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot; name=&quot;passwd&quot; id=&quot;passwd-id&quot; /&gt;</div></pre></td></tr></table></figure>\n<p>查询如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">element = driver.find_element_by_id(&quot;passwd-id&quot;)</div><div class=\"line\">element = driver.find_element_by_name(&quot;passwd&quot;)</div><div class=\"line\">element = driver.find_element_by_xpath(&quot;//input[@id=&apos;passwd-id&apos;]&quot;)</div></pre></td></tr></table></figure></p>\n<p><code>注意</code>：当使用<code>XPATH</code>时，你必须注意，如果匹配超过一个元素，只返回第一个元素。 如果上面也没找到，将会抛出 <code>NoSuchElementException</code>异常。</p>\n<p>常用方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.send_keys(&quot;some text&quot;)  # 输入内容</div><div class=\"line\">element.send_keys(&quot; and some&quot;, Keys.ARROW_DOWN)    # 输入方向键</div><div class=\"line\">element.clear() # 预先清楚input/textarea中内容</div><div class=\"line\">select.deselect_all()   # 取消选择已经选择的元素</div><div class=\"line\">driver.find_element_by_id(&quot;submit&quot;).click() # 提交</div><div class=\"line\">driver.switch_to_alert()    # 弹出对话框</div><div class=\"line\">driver.forward()    # 浏览历史中的前进</div><div class=\"line\">driver.back()   # 浏览历史中的后退</div><div class=\"line\">driver.get_cookies()    # 获取cookie</div></pre></td></tr></table></figure></p>\n<h4 id=\"查找元素\"><a href=\"#查找元素\" class=\"headerlink\" title=\"查找元素\"></a>查找元素</h4><p>Selenium提供的方法：</p>\n<ul>\n<li>find_element</li>\n<li>find_element_by_id</li>\n<li>find_element_by_name</li>\n<li>find_element_by_xpath</li>\n<li>find_element_by_link_text</li>\n<li>find_element_by_partial_link_text</li>\n<li>find_element_by_tag_name</li>\n<li>find_element_by_class_name</li>\n<li>find_element_by_css_selector</li>\n</ul>\n<p>一次查找多个元素(返回list列表):</p>\n<ul>\n<li>find_elements</li>\n<li>find_elements_by_name</li>\n<li>find_elements_by_xpath</li>\n<li>find_elements_by_link_text</li>\n<li>find_elements_by_partial_link_text</li>\n<li>find_elements_by_tag_name</li>\n<li>find_elements_by_class_name</li>\n<li>find_elements_by_css_selector</li>\n</ul>\n<hr>\n<p><code>查找元素实例</code></p>\n<ul>\n<li><p>find_element_by_id</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginForm\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">可以这样查找表单(form)元素</div><div class=\"line\">login_form = driver.find_element_by_id('loginForm')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_name</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginForm\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Clear\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">name属性为 username &amp; password 的元素可以像下面这样查找</div><div class=\"line\">username = driver.find_element_by_name('username')</div><div class=\"line\">password = driver.find_element_by_name('password')</div><div class=\"line\">continue = driver.find_element_by_name('continue')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_xpath</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginForm\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"continue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Clear\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">可以这样查找表单(form)元素</div><div class=\"line\">login_form = driver.find_element_by_xpath(\"/html/body/form[1]\")</div><div class=\"line\">login_form = driver.find_element_by_xpath(\"//form[1]\")</div><div class=\"line\">login_form = driver.find_element_by_xpath(\"//form[@id='loginForm']\")</div><div class=\"line\"> </div><div class=\"line\">username = driver.find_element_by_xpath(\"//form[input/@name='username']\")</div><div class=\"line\">username = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[1]\")</div><div class=\"line\">username = driver.find_element_by_xpath(\"//input[@name='username']\")</div><div class=\"line\"> </div><div class=\"line\">clear_button = driver.find_element_by_xpath(\"//input[@name='continue'][@type='button']\")</div><div class=\"line\">clear_button = driver.find_element_by_xpath(\"//form[@id='loginForm']/input[4]\")</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_link_text</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Are you sure you want to do this?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"continue.html\"</span>&gt;</span>Continue<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"cancel.html\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">continue.html 超链接可以被这样查找到:</div><div class=\"line\">continue_link = driver.find_element_by_link_text('Continue')</div><div class=\"line\">continue_link = driver.find_element_by_partial_link_text('Conti')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_tag_name</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Site content goes here.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">h1 元素可以如下查找</div><div class=\"line\">heading1 = driver.find_element_by_tag_name('h1')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_class_name</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>Site content goes here.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">p 元素可以如下查找</div><div class=\"line\">content = driver.find_element_by_class_name('content')</div></pre></td></tr></table></figure>\n</li>\n<li><p>find_element_by_css_selector</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>Site content goes here.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">p 元素可以如下查找:</div><div class=\"line\">content = driver.find_element_by_css_selector('p.content')</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"等待加载\"><a href=\"#等待加载\" class=\"headerlink\" title=\"等待加载\"></a>等待加载</h4><ul>\n<li><p>显式等待</p>\n<p>  显式等待是你在代码中定义等待一定条件发生后再进一步执行你的代码，最糟糕的案例是使用time.sleep()，它将条件设置为等待一个确切的时间段</p>\n</li>\n<li><p>隐式等待</p>\n<p>  如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素</p>\n</li>\n</ul>\n"},{"title":"Python Sqlalchemy模块","date":"2017-12-24T04:27:23.000Z","_content":"\n#### 说明\n项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作\n\n#### 基本用法\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \n# echo=True是开启调试\n# 连接到数据库, 返回engine实例,只有触发数据库事件,才连接数据库操作\nengine = create_engine('mysql+pymysql://root:root@127.0.0.1:3307/test?charset=utf8', echo=True)\n \n# 声明映射, 通常一个应用使用一个base实例，所有实体类都应该继承此类对象\nBase = declarative_base()\n \n# 定义表字段结构\nclass Address(Base):\n    \"\"\"\n    CREATE TABLE addresses (\n            id INTEGER NOT NULL AUTO_INCREMENT,\n            email_address VARCHAR(30) NOT NULL,\n            user_id INTEGER,\n            PRIMARY KEY (id),\n            FOREIGN KEY(user_id) REFERENCES ttxs_users (id)\n        )\n    \"\"\"\n    __tablename__ = 'addresses'\n    \n    id = Column(Integer, primary_key=True)\n    email_address = Column(String(30), nullable=False)\n    user_id = Column(Integer, ForeignKey('ttxs_users.id'))\n    user = relationship(\"User\", back_populates='addresses') # 通过relationship()来指明关系\n \n    def __repr__(self):\n        return \"<Address(email_address='%s')>\" % self.email_address\n \n \nclass User(Base):\n    \"\"\"\n    CREATE TABLE ttxs_users (\n        id INTEGER NOT NULL AUTO_INCREMENT,\n        name VARCHAR(30),\n        fullname VARCHAR(30),\n        password VARCHAR(30),\n        PRIMARY KEY (id)\n    )\n    \"\"\"\n    __tablename__ = 'ttxs_users'\n    \n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    fullname = Column(String(30))\n    password = Column(String(30))\n    addresses = relationship(Address, order_by=Address.id, back_populates=\"user\") # 通过relationship()来指明关系\n \n    def __repr__(self):\n        return \"<User(name='%s', fullname='%s', password='%s')>\" % (self.name, self.fullname, self.password)\n \n    @classmethod\n    def add(cls, **kwargs):\n    \ttry:\n            r = cls(**kwargs)\n            session.add(r)\n            session.commit()\n        except:\n            session.rollback()\n            raise\n \n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n \n# 插入数据\ned_user = User(name='ttxsgoto', fullname='ttxsgoto', password='password')\nprint(ed_user.name, ed_user.id) # ttxsgoto None\n \ned_user.password = 'f8s7ccs'\n \n# 添加ed_user的email_address\ned_user.addresses = [\n    Address(email_address='ttxsgoto01@163.com'),\n    Address(email_address='ttxsgoto02@163.com')\n]\n \n# 创建会话, Session是真正与数据库通信的handler\n# 绑定数据库,方法一\nSession = sessionmaker(bind=engine)\n# 绑定数据库,方法二\n# Session = sessionmaker()\n# Session.configure(bind=engine)\n \nsession = Session()\n \n# 插入数据\nsession.add(ed_user)\n# 插入多条数据\nsession.add_all([\n    User(name='ttxsgoto01', fullname='ttxsgoto01', password='ttxsgoto01'),\n    User(name='ttxsgoto02', fullname='ttxsgoto02', password='ttxsgoto02'),\n    User(name='ttxsgoto03', fullname='ttxsgoto03', password='ttxsgoto03')\n])\n \n# 提交写入数据\nsession.flush()\nsession.commit()\n \nour_user = session.query(User).filter_by(name='ttxsgoto').first()\nprint(ed_user is our_user)\nprint(our_user)\nprint(session.dirty)\nprint(session.new)\n \n# 查询\nfor instance in session.query(User).order_by(User.id):\n    print(instance.name, instance.fullname, instance.password)\n \n############################## 相关查询 ##############################\n# ==\nquerys = session.query(User).filter(User.name == 'ttxsgoto')   #得到的是查询sql语句\n# !=\nquerys = session.query(User).filter(User.name != 'ttxsgoto')\n# like\nquerys = session.query(User).filter(User.name.like('%ttxsgoto%'))\n# ilike\nquerys = session.query(User).filter(User.name.ilike('%ttxsgoto%'))\n# in\nquerys = session.query(User).filter(User.name.in_(['ttxsgoto01', 'ttxsgoto02']))\n# not in\nquerys = session.query(User).filter(~User.name.in_(['ttxsgoto01', 'ttxsgoto02']))\n# is null\nquerys = session.query(User).filter(User.name == None)\n# is not null\nquerys = session.query(User).filter(User.name != None)\n# and\nquerys = session.query(User).filter(User.name == 'ttxsgoto', User.password == 'f8s7ccs')\n# or\nfrom  sqlalchemy import or_\nquerys = session.query(User).filter(or_(User.name == 'ttxsgoto', User.name == 'ttxsgoto01'))\n# match\nquerys = session.query(User).filter(User.name.match('ttxsgoto'))\n# all()\nquerys = session.query(User).all()\n# first()\nquerys = session.query(User).first()\nprint(querys.name)\n# one() / one_or_none()\nquerys = session.query(User.id == 13).one()\n# count\nquerys = session.query(User).filter(User.name.like('%ttxsgoto%')).count()\nfor query in querys:\n    print('query--->', query.name)\n# Querying with joins\nquerys =session.query(User, Address).filter(User.id==Address.user_id).filter(Address.email_address=='ttxsgoto01@163.com').all()\n# join\nquerys =session.query(User).join(Address).filter(Address.email_address=='ttxsgoto01@163.com').all() # 这里查询的是User表中信息\nquerys = session.query(User).join(Address, User.id == Address.user_id).all()\nfor u, a in querys:\n    print('query--->', u.name, a.email_address)\n \n# delete\nuser = session.query(User).filter_by(id=6).first()\nsession.delete(user)\nsession.commit()\n```\n#### 多表关系\n\n##### 一对多(one to many)\n\n一对多(one to many) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在一的一方为一对多\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \nDB_URL = 'sqlite:///test.db'\nengine = create_engine(DB_URL)\nBase = declarative_base()\n \n \nclass Parent(Base):\n    __tablename__ = 'parent'\n \n    id = Column(Integer, primary_key=True)\n    children = relationship('Child', backref='parent')  # backref建立双向关系\n \n \nclass Child(Base):\n    __tablename__ = 'child'\n \n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n \n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n```\n##### 多对一(many to one)\n多对一(many to one) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在多的一方为多对一\n一个child可能有多个parent(父亲和母亲),这里的外键(child_id)和relationship(child)都定义在多(parent)的一方\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \nDB_URL = 'sqlite:///test.db'\nengine = create_engine(DB_URL)\nBase = declarative_base()\n \nclass Parent1(Base):\n    __tablename__ = 'parent1'\n \n    id = Column(Integer, primary_key=True)\n    child_id = Column(Integer, ForeignKey('child1.id'))\n    child = relationship('Child1', backref='parent1', cascade= 'all')   # cascade设置关联删除\n \n \nclass Child1(Base):\n    __tablename__ = 'child1'\n \n    id = Column(Integer, primary_key=True)\n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n```\n##### 一对一(one to one)\n只需在一对多的relationship加上一个参数uselist=False,或者在多对一的backref中添加uselist=False ,即将对应关系变成一对一\n\n##### 多对多(many to many)\n需要定义一张中间关联表来完成\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \nDB_URL = 'sqlite:///test.db'\nengine = create_engine(DB_URL)\nBase = declarative_base()\n \nclass Association(Base):\n    __tablename__ = 'association'\n \n    left_id = Column(Integer, ForeignKey('left.id'), primary_key=True)\n    right_id = Column(Integer, ForeignKey('right.id'), primary_key=True)\n    extra_data = Column(String(50))\n    child = relationship(\"Child2\")\n \n \nclass Parent2(Base):\n    __tablename__ = 'left'\n \n    id = Column(Integer, primary_key=True)\n    children = relationship(\n        \"Association\",)\n \n \nclass Child2(Base):\n    __tablename__ = 'right'\n \n    id = Column(Integer, primary_key=True)\n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n```\n\n#### 使用Alembic 数据库迁移\nalembic是sqlalchemy的作者开发的，用来做ORM模型与数据库的迁移与映射。\n```\nalembic.ini 提供了一些基本的配置\nenv.py 每次执行Alembic都会加载这个模块，主要提供项目Sqlalchemy Model 的连接\nscript.py.mako 迁移脚本生成模版\nversions 存放生成的迁移脚本目录\n \nalembic init   dir\n# alembic revision -m \"create account table\"  生成Migration文件\nalembic revision --autogenerate       自动生成迁移脚本\nalembic revision --autogenerate -m \"add user table\" # 生成alembic升级脚本\nalembic upgrade head          \n```\n使用步骤：\n1. 定义好模型\n2. 使用alembic创建一个仓库：`alembic init [仓库的名字，推荐使用alembic]`\n3. 修改配置文件：\n    - 在`alembic.ini`中，给`sqlalchemy.url`设置数据库的连接方式。这个连接方式跟sqlalchemy的方式一样的\n    - 在`alembic/env.py`中的`target_metadata`设置模型的`Base.metadata`。但是要导入`models`，需要将models所在的路径添加到这个文件中\n4. 将ORM模型生成迁移脚本：`alembic revision --autogenerate -m 'message'`\n5. 将生成的脚本映射到数据库中：`alembic upgrade head`\n6. 以后如果修改了模型，重复4、5步骤\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/python-sqlalchemy.md","raw":"---\ntitle: Python Sqlalchemy模块\ndate: 2017-12-24 12:27:23\ntags:\n  - Sqlalchemy\ncategories:\n  - python\n---\n\n#### 说明\n项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作\n\n#### 基本用法\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \n# echo=True是开启调试\n# 连接到数据库, 返回engine实例,只有触发数据库事件,才连接数据库操作\nengine = create_engine('mysql+pymysql://root:root@127.0.0.1:3307/test?charset=utf8', echo=True)\n \n# 声明映射, 通常一个应用使用一个base实例，所有实体类都应该继承此类对象\nBase = declarative_base()\n \n# 定义表字段结构\nclass Address(Base):\n    \"\"\"\n    CREATE TABLE addresses (\n            id INTEGER NOT NULL AUTO_INCREMENT,\n            email_address VARCHAR(30) NOT NULL,\n            user_id INTEGER,\n            PRIMARY KEY (id),\n            FOREIGN KEY(user_id) REFERENCES ttxs_users (id)\n        )\n    \"\"\"\n    __tablename__ = 'addresses'\n    \n    id = Column(Integer, primary_key=True)\n    email_address = Column(String(30), nullable=False)\n    user_id = Column(Integer, ForeignKey('ttxs_users.id'))\n    user = relationship(\"User\", back_populates='addresses') # 通过relationship()来指明关系\n \n    def __repr__(self):\n        return \"<Address(email_address='%s')>\" % self.email_address\n \n \nclass User(Base):\n    \"\"\"\n    CREATE TABLE ttxs_users (\n        id INTEGER NOT NULL AUTO_INCREMENT,\n        name VARCHAR(30),\n        fullname VARCHAR(30),\n        password VARCHAR(30),\n        PRIMARY KEY (id)\n    )\n    \"\"\"\n    __tablename__ = 'ttxs_users'\n    \n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    fullname = Column(String(30))\n    password = Column(String(30))\n    addresses = relationship(Address, order_by=Address.id, back_populates=\"user\") # 通过relationship()来指明关系\n \n    def __repr__(self):\n        return \"<User(name='%s', fullname='%s', password='%s')>\" % (self.name, self.fullname, self.password)\n \n    @classmethod\n    def add(cls, **kwargs):\n    \ttry:\n            r = cls(**kwargs)\n            session.add(r)\n            session.commit()\n        except:\n            session.rollback()\n            raise\n \n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n \n# 插入数据\ned_user = User(name='ttxsgoto', fullname='ttxsgoto', password='password')\nprint(ed_user.name, ed_user.id) # ttxsgoto None\n \ned_user.password = 'f8s7ccs'\n \n# 添加ed_user的email_address\ned_user.addresses = [\n    Address(email_address='ttxsgoto01@163.com'),\n    Address(email_address='ttxsgoto02@163.com')\n]\n \n# 创建会话, Session是真正与数据库通信的handler\n# 绑定数据库,方法一\nSession = sessionmaker(bind=engine)\n# 绑定数据库,方法二\n# Session = sessionmaker()\n# Session.configure(bind=engine)\n \nsession = Session()\n \n# 插入数据\nsession.add(ed_user)\n# 插入多条数据\nsession.add_all([\n    User(name='ttxsgoto01', fullname='ttxsgoto01', password='ttxsgoto01'),\n    User(name='ttxsgoto02', fullname='ttxsgoto02', password='ttxsgoto02'),\n    User(name='ttxsgoto03', fullname='ttxsgoto03', password='ttxsgoto03')\n])\n \n# 提交写入数据\nsession.flush()\nsession.commit()\n \nour_user = session.query(User).filter_by(name='ttxsgoto').first()\nprint(ed_user is our_user)\nprint(our_user)\nprint(session.dirty)\nprint(session.new)\n \n# 查询\nfor instance in session.query(User).order_by(User.id):\n    print(instance.name, instance.fullname, instance.password)\n \n############################## 相关查询 ##############################\n# ==\nquerys = session.query(User).filter(User.name == 'ttxsgoto')   #得到的是查询sql语句\n# !=\nquerys = session.query(User).filter(User.name != 'ttxsgoto')\n# like\nquerys = session.query(User).filter(User.name.like('%ttxsgoto%'))\n# ilike\nquerys = session.query(User).filter(User.name.ilike('%ttxsgoto%'))\n# in\nquerys = session.query(User).filter(User.name.in_(['ttxsgoto01', 'ttxsgoto02']))\n# not in\nquerys = session.query(User).filter(~User.name.in_(['ttxsgoto01', 'ttxsgoto02']))\n# is null\nquerys = session.query(User).filter(User.name == None)\n# is not null\nquerys = session.query(User).filter(User.name != None)\n# and\nquerys = session.query(User).filter(User.name == 'ttxsgoto', User.password == 'f8s7ccs')\n# or\nfrom  sqlalchemy import or_\nquerys = session.query(User).filter(or_(User.name == 'ttxsgoto', User.name == 'ttxsgoto01'))\n# match\nquerys = session.query(User).filter(User.name.match('ttxsgoto'))\n# all()\nquerys = session.query(User).all()\n# first()\nquerys = session.query(User).first()\nprint(querys.name)\n# one() / one_or_none()\nquerys = session.query(User.id == 13).one()\n# count\nquerys = session.query(User).filter(User.name.like('%ttxsgoto%')).count()\nfor query in querys:\n    print('query--->', query.name)\n# Querying with joins\nquerys =session.query(User, Address).filter(User.id==Address.user_id).filter(Address.email_address=='ttxsgoto01@163.com').all()\n# join\nquerys =session.query(User).join(Address).filter(Address.email_address=='ttxsgoto01@163.com').all() # 这里查询的是User表中信息\nquerys = session.query(User).join(Address, User.id == Address.user_id).all()\nfor u, a in querys:\n    print('query--->', u.name, a.email_address)\n \n# delete\nuser = session.query(User).filter_by(id=6).first()\nsession.delete(user)\nsession.commit()\n```\n#### 多表关系\n\n##### 一对多(one to many)\n\n一对多(one to many) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在一的一方为一对多\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \nDB_URL = 'sqlite:///test.db'\nengine = create_engine(DB_URL)\nBase = declarative_base()\n \n \nclass Parent(Base):\n    __tablename__ = 'parent'\n \n    id = Column(Integer, primary_key=True)\n    children = relationship('Child', backref='parent')  # backref建立双向关系\n \n \nclass Child(Base):\n    __tablename__ = 'child'\n \n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n \n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n```\n##### 多对一(many to one)\n多对一(many to one) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在多的一方为多对一\n一个child可能有多个parent(父亲和母亲),这里的外键(child_id)和relationship(child)都定义在多(parent)的一方\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \nDB_URL = 'sqlite:///test.db'\nengine = create_engine(DB_URL)\nBase = declarative_base()\n \nclass Parent1(Base):\n    __tablename__ = 'parent1'\n \n    id = Column(Integer, primary_key=True)\n    child_id = Column(Integer, ForeignKey('child1.id'))\n    child = relationship('Child1', backref='parent1', cascade= 'all')   # cascade设置关联删除\n \n \nclass Child1(Base):\n    __tablename__ = 'child1'\n \n    id = Column(Integer, primary_key=True)\n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n```\n##### 一对一(one to one)\n只需在一对多的relationship加上一个参数uselist=False,或者在多对一的backref中添加uselist=False ,即将对应关系变成一对一\n\n##### 多对多(many to many)\n需要定义一张中间关联表来完成\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship\n \nDB_URL = 'sqlite:///test.db'\nengine = create_engine(DB_URL)\nBase = declarative_base()\n \nclass Association(Base):\n    __tablename__ = 'association'\n \n    left_id = Column(Integer, ForeignKey('left.id'), primary_key=True)\n    right_id = Column(Integer, ForeignKey('right.id'), primary_key=True)\n    extra_data = Column(String(50))\n    child = relationship(\"Child2\")\n \n \nclass Parent2(Base):\n    __tablename__ = 'left'\n \n    id = Column(Integer, primary_key=True)\n    children = relationship(\n        \"Association\",)\n \n \nclass Child2(Base):\n    __tablename__ = 'right'\n \n    id = Column(Integer, primary_key=True)\n \n# 将表结构写入数据库中\nBase.metadata.create_all(engine)\n```\n\n#### 使用Alembic 数据库迁移\nalembic是sqlalchemy的作者开发的，用来做ORM模型与数据库的迁移与映射。\n```\nalembic.ini 提供了一些基本的配置\nenv.py 每次执行Alembic都会加载这个模块，主要提供项目Sqlalchemy Model 的连接\nscript.py.mako 迁移脚本生成模版\nversions 存放生成的迁移脚本目录\n \nalembic init   dir\n# alembic revision -m \"create account table\"  生成Migration文件\nalembic revision --autogenerate       自动生成迁移脚本\nalembic revision --autogenerate -m \"add user table\" # 生成alembic升级脚本\nalembic upgrade head          \n```\n使用步骤：\n1. 定义好模型\n2. 使用alembic创建一个仓库：`alembic init [仓库的名字，推荐使用alembic]`\n3. 修改配置文件：\n    - 在`alembic.ini`中，给`sqlalchemy.url`设置数据库的连接方式。这个连接方式跟sqlalchemy的方式一样的\n    - 在`alembic/env.py`中的`target_metadata`设置模型的`Base.metadata`。但是要导入`models`，需要将models所在的路径添加到这个文件中\n4. 将ORM模型生成迁移脚本：`alembic revision --autogenerate -m 'message'`\n5. 将生成的脚本映射到数据库中：`alembic upgrade head`\n6. 以后如果修改了模型，重复4、5步骤\n\n\n\n\n\n\n\n\n\n\n\n","slug":"python-sqlalchemy","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xs004lct8u3c0ejuuf","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作</p>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># echo=True是开启调试</span></div><div class=\"line\"><span class=\"comment\"># 连接到数据库, 返回engine实例,只有触发数据库事件,才连接数据库操作</span></div><div class=\"line\">engine = create_engine(<span class=\"string\">'mysql+pymysql://root:root@127.0.0.1:3307/test?charset=utf8'</span>, echo=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 声明映射, 通常一个应用使用一个base实例，所有实体类都应该继承此类对象</span></div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 定义表字段结构</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    CREATE TABLE addresses (</div><div class=\"line\">            id INTEGER NOT NULL AUTO_INCREMENT,</div><div class=\"line\">            email_address VARCHAR(30) NOT NULL,</div><div class=\"line\">            user_id INTEGER,</div><div class=\"line\">            PRIMARY KEY (id),</div><div class=\"line\">            FOREIGN KEY(user_id) REFERENCES ttxs_users (id)</div><div class=\"line\">        )</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    __tablename__ = <span class=\"string\">'addresses'</span></div><div class=\"line\">    </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    email_address = Column(String(<span class=\"number\">30</span>), nullable=<span class=\"keyword\">False</span>)</div><div class=\"line\">    user_id = Column(Integer, ForeignKey(<span class=\"string\">'ttxs_users.id'</span>))</div><div class=\"line\">    user = relationship(<span class=\"string\">\"User\"</span>, back_populates=<span class=\"string\">'addresses'</span>) <span class=\"comment\"># 通过relationship()来指明关系</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;Address(email_address='%s')&gt;\"</span> % self.email_address</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    CREATE TABLE ttxs_users (</div><div class=\"line\">        id INTEGER NOT NULL AUTO_INCREMENT,</div><div class=\"line\">        name VARCHAR(30),</div><div class=\"line\">        fullname VARCHAR(30),</div><div class=\"line\">        password VARCHAR(30),</div><div class=\"line\">        PRIMARY KEY (id)</div><div class=\"line\">    )</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    __tablename__ = <span class=\"string\">'ttxs_users'</span></div><div class=\"line\">    </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    name = Column(String(<span class=\"number\">30</span>))</div><div class=\"line\">    fullname = Column(String(<span class=\"number\">30</span>))</div><div class=\"line\">    password = Column(String(<span class=\"number\">30</span>))</div><div class=\"line\">    addresses = relationship(Address, order_by=Address.id, back_populates=<span class=\"string\">\"user\"</span>) <span class=\"comment\"># 通过relationship()来指明关系</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;User(name='%s', fullname='%s', password='%s')&gt;\"</span> % (self.name, self.fullname, self.password)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(cls, **kwargs)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">try</span>:</div><div class=\"line\">            r = cls(**kwargs)</div><div class=\"line\">            session.add(r)</div><div class=\"line\">            session.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            session.rollback()</div><div class=\"line\">            <span class=\"keyword\">raise</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 插入数据</span></div><div class=\"line\">ed_user = User(name=<span class=\"string\">'ttxsgoto'</span>, fullname=<span class=\"string\">'ttxsgoto'</span>, password=<span class=\"string\">'password'</span>)</div><div class=\"line\">print(ed_user.name, ed_user.id) <span class=\"comment\"># ttxsgoto None</span></div><div class=\"line\"> </div><div class=\"line\">ed_user.password = <span class=\"string\">'f8s7ccs'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 添加ed_user的email_address</span></div><div class=\"line\">ed_user.addresses = [</div><div class=\"line\">    Address(email_address=<span class=\"string\">'ttxsgoto01@163.com'</span>),</div><div class=\"line\">    Address(email_address=<span class=\"string\">'ttxsgoto02@163.com'</span>)</div><div class=\"line\">]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建会话, Session是真正与数据库通信的handler</span></div><div class=\"line\"><span class=\"comment\"># 绑定数据库,方法一</span></div><div class=\"line\">Session = sessionmaker(bind=engine)</div><div class=\"line\"><span class=\"comment\"># 绑定数据库,方法二</span></div><div class=\"line\"><span class=\"comment\"># Session = sessionmaker()</span></div><div class=\"line\"><span class=\"comment\"># Session.configure(bind=engine)</span></div><div class=\"line\"> </div><div class=\"line\">session = Session()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 插入数据</span></div><div class=\"line\">session.add(ed_user)</div><div class=\"line\"><span class=\"comment\"># 插入多条数据</span></div><div class=\"line\">session.add_all([</div><div class=\"line\">    User(name=<span class=\"string\">'ttxsgoto01'</span>, fullname=<span class=\"string\">'ttxsgoto01'</span>, password=<span class=\"string\">'ttxsgoto01'</span>),</div><div class=\"line\">    User(name=<span class=\"string\">'ttxsgoto02'</span>, fullname=<span class=\"string\">'ttxsgoto02'</span>, password=<span class=\"string\">'ttxsgoto02'</span>),</div><div class=\"line\">    User(name=<span class=\"string\">'ttxsgoto03'</span>, fullname=<span class=\"string\">'ttxsgoto03'</span>, password=<span class=\"string\">'ttxsgoto03'</span>)</div><div class=\"line\">])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 提交写入数据</span></div><div class=\"line\">session.flush()</div><div class=\"line\">session.commit()</div><div class=\"line\"> </div><div class=\"line\">our_user = session.query(User).filter_by(name=<span class=\"string\">'ttxsgoto'</span>).first()</div><div class=\"line\">print(ed_user <span class=\"keyword\">is</span> our_user)</div><div class=\"line\">print(our_user)</div><div class=\"line\">print(session.dirty)</div><div class=\"line\">print(session.new)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 查询</span></div><div class=\"line\"><span class=\"keyword\">for</span> instance <span class=\"keyword\">in</span> session.query(User).order_by(User.id):</div><div class=\"line\">    print(instance.name, instance.fullname, instance.password)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############################## 相关查询 ##############################</span></div><div class=\"line\"><span class=\"comment\"># ==</span></div><div class=\"line\">querys = session.query(User).filter(User.name == <span class=\"string\">'ttxsgoto'</span>)   <span class=\"comment\">#得到的是查询sql语句</span></div><div class=\"line\"><span class=\"comment\"># !=</span></div><div class=\"line\">querys = session.query(User).filter(User.name != <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\"><span class=\"comment\"># like</span></div><div class=\"line\">querys = session.query(User).filter(User.name.like(<span class=\"string\">'%ttxsgoto%'</span>))</div><div class=\"line\"><span class=\"comment\"># ilike</span></div><div class=\"line\">querys = session.query(User).filter(User.name.ilike(<span class=\"string\">'%ttxsgoto%'</span>))</div><div class=\"line\"><span class=\"comment\"># in</span></div><div class=\"line\">querys = session.query(User).filter(User.name.in_([<span class=\"string\">'ttxsgoto01'</span>, <span class=\"string\">'ttxsgoto02'</span>]))</div><div class=\"line\"><span class=\"comment\"># not in</span></div><div class=\"line\">querys = session.query(User).filter(~User.name.in_([<span class=\"string\">'ttxsgoto01'</span>, <span class=\"string\">'ttxsgoto02'</span>]))</div><div class=\"line\"><span class=\"comment\"># is null</span></div><div class=\"line\">querys = session.query(User).filter(User.name == <span class=\"keyword\">None</span>)</div><div class=\"line\"><span class=\"comment\"># is not null</span></div><div class=\"line\">querys = session.query(User).filter(User.name != <span class=\"keyword\">None</span>)</div><div class=\"line\"><span class=\"comment\"># and</span></div><div class=\"line\">querys = session.query(User).filter(User.name == <span class=\"string\">'ttxsgoto'</span>, User.password == <span class=\"string\">'f8s7ccs'</span>)</div><div class=\"line\"><span class=\"comment\"># or</span></div><div class=\"line\"><span class=\"keyword\">from</span>  sqlalchemy <span class=\"keyword\">import</span> or_</div><div class=\"line\">querys = session.query(User).filter(or_(User.name == <span class=\"string\">'ttxsgoto'</span>, User.name == <span class=\"string\">'ttxsgoto01'</span>))</div><div class=\"line\"><span class=\"comment\"># match</span></div><div class=\"line\">querys = session.query(User).filter(User.name.match(<span class=\"string\">'ttxsgoto'</span>))</div><div class=\"line\"><span class=\"comment\"># all()</span></div><div class=\"line\">querys = session.query(User).all()</div><div class=\"line\"><span class=\"comment\"># first()</span></div><div class=\"line\">querys = session.query(User).first()</div><div class=\"line\">print(querys.name)</div><div class=\"line\"><span class=\"comment\"># one() / one_or_none()</span></div><div class=\"line\">querys = session.query(User.id == <span class=\"number\">13</span>).one()</div><div class=\"line\"><span class=\"comment\"># count</span></div><div class=\"line\">querys = session.query(User).filter(User.name.like(<span class=\"string\">'%ttxsgoto%'</span>)).count()</div><div class=\"line\"><span class=\"keyword\">for</span> query <span class=\"keyword\">in</span> querys:</div><div class=\"line\">    print(<span class=\"string\">'query---&gt;'</span>, query.name)</div><div class=\"line\"><span class=\"comment\"># Querying with joins</span></div><div class=\"line\">querys =session.query(User, Address).filter(User.id==Address.user_id).filter(Address.email_address==<span class=\"string\">'ttxsgoto01@163.com'</span>).all()</div><div class=\"line\"><span class=\"comment\"># join</span></div><div class=\"line\">querys =session.query(User).join(Address).filter(Address.email_address==<span class=\"string\">'ttxsgoto01@163.com'</span>).all() <span class=\"comment\"># 这里查询的是User表中信息</span></div><div class=\"line\">querys = session.query(User).join(Address, User.id == Address.user_id).all()</div><div class=\"line\"><span class=\"keyword\">for</span> u, a <span class=\"keyword\">in</span> querys:</div><div class=\"line\">    print(<span class=\"string\">'query---&gt;'</span>, u.name, a.email_address)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># delete</span></div><div class=\"line\">user = session.query(User).filter_by(id=<span class=\"number\">6</span>).first()</div><div class=\"line\">session.delete(user)</div><div class=\"line\">session.commit()</div></pre></td></tr></table></figure>\n<h4 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h4><h5 id=\"一对多-one-to-many\"><a href=\"#一对多-one-to-many\" class=\"headerlink\" title=\"一对多(one to many)\"></a>一对多(one to many)</h5><p>一对多(one to many) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在一的一方为一对多</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\">DB_URL = <span class=\"string\">'sqlite:///test.db'</span></div><div class=\"line\">engine = create_engine(DB_URL)</div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'parent'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    children = relationship(<span class=\"string\">'Child'</span>, backref=<span class=\"string\">'parent'</span>)  <span class=\"comment\"># backref建立双向关系</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'child'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    parent_id = Column(Integer, ForeignKey(<span class=\"string\">'parent.id'</span>))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure>\n<h5 id=\"多对一-many-to-one\"><a href=\"#多对一-many-to-one\" class=\"headerlink\" title=\"多对一(many to one)\"></a>多对一(many to one)</h5><p>多对一(many to one) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在多的一方为多对一<br>一个child可能有多个parent(父亲和母亲),这里的外键(child_id)和relationship(child)都定义在多(parent)的一方<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\">DB_URL = <span class=\"string\">'sqlite:///test.db'</span></div><div class=\"line\">engine = create_engine(DB_URL)</div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent1</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'parent1'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    child_id = Column(Integer, ForeignKey(<span class=\"string\">'child1.id'</span>))</div><div class=\"line\">    child = relationship(<span class=\"string\">'Child1'</span>, backref=<span class=\"string\">'parent1'</span>, cascade= <span class=\"string\">'all'</span>)   <span class=\"comment\"># cascade设置关联删除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child1</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'child1'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>\n<h5 id=\"一对一-one-to-one\"><a href=\"#一对一-one-to-one\" class=\"headerlink\" title=\"一对一(one to one)\"></a>一对一(one to one)</h5><p>只需在一对多的relationship加上一个参数uselist=False,或者在多对一的backref中添加uselist=False ,即将对应关系变成一对一</p>\n<h5 id=\"多对多-many-to-many\"><a href=\"#多对多-many-to-many\" class=\"headerlink\" title=\"多对多(many to many)\"></a>多对多(many to many)</h5><p>需要定义一张中间关联表来完成<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\">DB_URL = <span class=\"string\">'sqlite:///test.db'</span></div><div class=\"line\">engine = create_engine(DB_URL)</div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Association</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'association'</span></div><div class=\"line\"> </div><div class=\"line\">    left_id = Column(Integer, ForeignKey(<span class=\"string\">'left.id'</span>), primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    right_id = Column(Integer, ForeignKey(<span class=\"string\">'right.id'</span>), primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    extra_data = Column(String(<span class=\"number\">50</span>))</div><div class=\"line\">    child = relationship(<span class=\"string\">\"Child2\"</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent2</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'left'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    children = relationship(</div><div class=\"line\">        <span class=\"string\">\"Association\"</span>,)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child2</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'right'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用Alembic-数据库迁移\"><a href=\"#使用Alembic-数据库迁移\" class=\"headerlink\" title=\"使用Alembic 数据库迁移\"></a>使用Alembic 数据库迁移</h4><p>alembic是sqlalchemy的作者开发的，用来做ORM模型与数据库的迁移与映射。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alembic.ini 提供了一些基本的配置</div><div class=\"line\">env.py 每次执行Alembic都会加载这个模块，主要提供项目Sqlalchemy Model 的连接</div><div class=\"line\">script.py.mako 迁移脚本生成模版</div><div class=\"line\">versions 存放生成的迁移脚本目录</div><div class=\"line\"> </div><div class=\"line\">alembic init   dir</div><div class=\"line\"># alembic revision -m &quot;create account table&quot;  生成Migration文件</div><div class=\"line\">alembic revision --autogenerate       自动生成迁移脚本</div><div class=\"line\">alembic revision --autogenerate -m &quot;add user table&quot; # 生成alembic升级脚本</div><div class=\"line\">alembic upgrade head</div></pre></td></tr></table></figure></p>\n<p>使用步骤：</p>\n<ol>\n<li>定义好模型</li>\n<li>使用alembic创建一个仓库：<code>alembic init [仓库的名字，推荐使用alembic]</code></li>\n<li>修改配置文件：<ul>\n<li>在<code>alembic.ini</code>中，给<code>sqlalchemy.url</code>设置数据库的连接方式。这个连接方式跟sqlalchemy的方式一样的</li>\n<li>在<code>alembic/env.py</code>中的<code>target_metadata</code>设置模型的<code>Base.metadata</code>。但是要导入<code>models</code>，需要将models所在的路径添加到这个文件中</li>\n</ul>\n</li>\n<li>将ORM模型生成迁移脚本：<code>alembic revision --autogenerate -m &#39;message&#39;</code></li>\n<li>将生成的脚本映射到数据库中：<code>alembic upgrade head</code></li>\n<li>以后如果修改了模型，重复4、5步骤</li>\n</ol>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>项目中会使用到数据库，需要创建表结构和相关属性，因对原生sql不熟悉，使用python中ORM框架qlalchemy模块来完成建表查询操作</p>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># echo=True是开启调试</span></div><div class=\"line\"><span class=\"comment\"># 连接到数据库, 返回engine实例,只有触发数据库事件,才连接数据库操作</span></div><div class=\"line\">engine = create_engine(<span class=\"string\">'mysql+pymysql://root:root@127.0.0.1:3307/test?charset=utf8'</span>, echo=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 声明映射, 通常一个应用使用一个base实例，所有实体类都应该继承此类对象</span></div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 定义表字段结构</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    CREATE TABLE addresses (</div><div class=\"line\">            id INTEGER NOT NULL AUTO_INCREMENT,</div><div class=\"line\">            email_address VARCHAR(30) NOT NULL,</div><div class=\"line\">            user_id INTEGER,</div><div class=\"line\">            PRIMARY KEY (id),</div><div class=\"line\">            FOREIGN KEY(user_id) REFERENCES ttxs_users (id)</div><div class=\"line\">        )</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'addresses'</span></div><div class=\"line\">    </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    email_address = Column(String(<span class=\"number\">30</span>), nullable=<span class=\"keyword\">False</span>)</div><div class=\"line\">    user_id = Column(Integer, ForeignKey(<span class=\"string\">'ttxs_users.id'</span>))</div><div class=\"line\">    user = relationship(<span class=\"string\">\"User\"</span>, back_populates=<span class=\"string\">'addresses'</span>) <span class=\"comment\"># 通过relationship()来指明关系</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;Address(email_address='%s')&gt;\"</span> % self.email_address</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    CREATE TABLE ttxs_users (</div><div class=\"line\">        id INTEGER NOT NULL AUTO_INCREMENT,</div><div class=\"line\">        name VARCHAR(30),</div><div class=\"line\">        fullname VARCHAR(30),</div><div class=\"line\">        password VARCHAR(30),</div><div class=\"line\">        PRIMARY KEY (id)</div><div class=\"line\">    )</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'ttxs_users'</span></div><div class=\"line\">    </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    name = Column(String(<span class=\"number\">30</span>))</div><div class=\"line\">    fullname = Column(String(<span class=\"number\">30</span>))</div><div class=\"line\">    password = Column(String(<span class=\"number\">30</span>))</div><div class=\"line\">    addresses = relationship(Address, order_by=Address.id, back_populates=<span class=\"string\">\"user\"</span>) <span class=\"comment\"># 通过relationship()来指明关系</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;User(name='%s', fullname='%s', password='%s')&gt;\"</span> % (self.name, self.fullname, self.password)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(cls, **kwargs)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">try</span>:</div><div class=\"line\">            r = cls(**kwargs)</div><div class=\"line\">            session.add(r)</div><div class=\"line\">            session.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            session.rollback()</div><div class=\"line\">            <span class=\"keyword\">raise</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 插入数据</span></div><div class=\"line\">ed_user = User(name=<span class=\"string\">'ttxsgoto'</span>, fullname=<span class=\"string\">'ttxsgoto'</span>, password=<span class=\"string\">'password'</span>)</div><div class=\"line\">print(ed_user.name, ed_user.id) <span class=\"comment\"># ttxsgoto None</span></div><div class=\"line\"> </div><div class=\"line\">ed_user.password = <span class=\"string\">'f8s7ccs'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 添加ed_user的email_address</span></div><div class=\"line\">ed_user.addresses = [</div><div class=\"line\">    Address(email_address=<span class=\"string\">'ttxsgoto01@163.com'</span>),</div><div class=\"line\">    Address(email_address=<span class=\"string\">'ttxsgoto02@163.com'</span>)</div><div class=\"line\">]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建会话, Session是真正与数据库通信的handler</span></div><div class=\"line\"><span class=\"comment\"># 绑定数据库,方法一</span></div><div class=\"line\">Session = sessionmaker(bind=engine)</div><div class=\"line\"><span class=\"comment\"># 绑定数据库,方法二</span></div><div class=\"line\"><span class=\"comment\"># Session = sessionmaker()</span></div><div class=\"line\"><span class=\"comment\"># Session.configure(bind=engine)</span></div><div class=\"line\"> </div><div class=\"line\">session = Session()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 插入数据</span></div><div class=\"line\">session.add(ed_user)</div><div class=\"line\"><span class=\"comment\"># 插入多条数据</span></div><div class=\"line\">session.add_all([</div><div class=\"line\">    User(name=<span class=\"string\">'ttxsgoto01'</span>, fullname=<span class=\"string\">'ttxsgoto01'</span>, password=<span class=\"string\">'ttxsgoto01'</span>),</div><div class=\"line\">    User(name=<span class=\"string\">'ttxsgoto02'</span>, fullname=<span class=\"string\">'ttxsgoto02'</span>, password=<span class=\"string\">'ttxsgoto02'</span>),</div><div class=\"line\">    User(name=<span class=\"string\">'ttxsgoto03'</span>, fullname=<span class=\"string\">'ttxsgoto03'</span>, password=<span class=\"string\">'ttxsgoto03'</span>)</div><div class=\"line\">])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 提交写入数据</span></div><div class=\"line\">session.flush()</div><div class=\"line\">session.commit()</div><div class=\"line\"> </div><div class=\"line\">our_user = session.query(User).filter_by(name=<span class=\"string\">'ttxsgoto'</span>).first()</div><div class=\"line\">print(ed_user <span class=\"keyword\">is</span> our_user)</div><div class=\"line\">print(our_user)</div><div class=\"line\">print(session.dirty)</div><div class=\"line\">print(session.new)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 查询</span></div><div class=\"line\"><span class=\"keyword\">for</span> instance <span class=\"keyword\">in</span> session.query(User).order_by(User.id):</div><div class=\"line\">    print(instance.name, instance.fullname, instance.password)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">############################## 相关查询 ##############################</span></div><div class=\"line\"><span class=\"comment\"># ==</span></div><div class=\"line\">querys = session.query(User).filter(User.name == <span class=\"string\">'ttxsgoto'</span>)   <span class=\"comment\">#得到的是查询sql语句</span></div><div class=\"line\"><span class=\"comment\"># !=</span></div><div class=\"line\">querys = session.query(User).filter(User.name != <span class=\"string\">'ttxsgoto'</span>)</div><div class=\"line\"><span class=\"comment\"># like</span></div><div class=\"line\">querys = session.query(User).filter(User.name.like(<span class=\"string\">'%ttxsgoto%'</span>))</div><div class=\"line\"><span class=\"comment\"># ilike</span></div><div class=\"line\">querys = session.query(User).filter(User.name.ilike(<span class=\"string\">'%ttxsgoto%'</span>))</div><div class=\"line\"><span class=\"comment\"># in</span></div><div class=\"line\">querys = session.query(User).filter(User.name.in_([<span class=\"string\">'ttxsgoto01'</span>, <span class=\"string\">'ttxsgoto02'</span>]))</div><div class=\"line\"><span class=\"comment\"># not in</span></div><div class=\"line\">querys = session.query(User).filter(~User.name.in_([<span class=\"string\">'ttxsgoto01'</span>, <span class=\"string\">'ttxsgoto02'</span>]))</div><div class=\"line\"><span class=\"comment\"># is null</span></div><div class=\"line\">querys = session.query(User).filter(User.name == <span class=\"keyword\">None</span>)</div><div class=\"line\"><span class=\"comment\"># is not null</span></div><div class=\"line\">querys = session.query(User).filter(User.name != <span class=\"keyword\">None</span>)</div><div class=\"line\"><span class=\"comment\"># and</span></div><div class=\"line\">querys = session.query(User).filter(User.name == <span class=\"string\">'ttxsgoto'</span>, User.password == <span class=\"string\">'f8s7ccs'</span>)</div><div class=\"line\"><span class=\"comment\"># or</span></div><div class=\"line\"><span class=\"keyword\">from</span>  sqlalchemy <span class=\"keyword\">import</span> or_</div><div class=\"line\">querys = session.query(User).filter(or_(User.name == <span class=\"string\">'ttxsgoto'</span>, User.name == <span class=\"string\">'ttxsgoto01'</span>))</div><div class=\"line\"><span class=\"comment\"># match</span></div><div class=\"line\">querys = session.query(User).filter(User.name.match(<span class=\"string\">'ttxsgoto'</span>))</div><div class=\"line\"><span class=\"comment\"># all()</span></div><div class=\"line\">querys = session.query(User).all()</div><div class=\"line\"><span class=\"comment\"># first()</span></div><div class=\"line\">querys = session.query(User).first()</div><div class=\"line\">print(querys.name)</div><div class=\"line\"><span class=\"comment\"># one() / one_or_none()</span></div><div class=\"line\">querys = session.query(User.id == <span class=\"number\">13</span>).one()</div><div class=\"line\"><span class=\"comment\"># count</span></div><div class=\"line\">querys = session.query(User).filter(User.name.like(<span class=\"string\">'%ttxsgoto%'</span>)).count()</div><div class=\"line\"><span class=\"keyword\">for</span> query <span class=\"keyword\">in</span> querys:</div><div class=\"line\">    print(<span class=\"string\">'query---&gt;'</span>, query.name)</div><div class=\"line\"><span class=\"comment\"># Querying with joins</span></div><div class=\"line\">querys =session.query(User, Address).filter(User.id==Address.user_id).filter(Address.email_address==<span class=\"string\">'ttxsgoto01@163.com'</span>).all()</div><div class=\"line\"><span class=\"comment\"># join</span></div><div class=\"line\">querys =session.query(User).join(Address).filter(Address.email_address==<span class=\"string\">'ttxsgoto01@163.com'</span>).all() <span class=\"comment\"># 这里查询的是User表中信息</span></div><div class=\"line\">querys = session.query(User).join(Address, User.id == Address.user_id).all()</div><div class=\"line\"><span class=\"keyword\">for</span> u, a <span class=\"keyword\">in</span> querys:</div><div class=\"line\">    print(<span class=\"string\">'query---&gt;'</span>, u.name, a.email_address)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># delete</span></div><div class=\"line\">user = session.query(User).filter_by(id=<span class=\"number\">6</span>).first()</div><div class=\"line\">session.delete(user)</div><div class=\"line\">session.commit()</div></pre></td></tr></table></figure>\n<h4 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h4><h5 id=\"一对多-one-to-many\"><a href=\"#一对多-one-to-many\" class=\"headerlink\" title=\"一对多(one to many)\"></a>一对多(one to many)</h5><p>一对多(one to many) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在一的一方为一对多</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\">DB_URL = <span class=\"string\">'sqlite:///test.db'</span></div><div class=\"line\">engine = create_engine(DB_URL)</div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'parent'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    children = relationship(<span class=\"string\">'Child'</span>, backref=<span class=\"string\">'parent'</span>)  <span class=\"comment\"># backref建立双向关系</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'child'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    parent_id = Column(Integer, ForeignKey(<span class=\"string\">'parent.id'</span>))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure>\n<h5 id=\"多对一-many-to-one\"><a href=\"#多对一-many-to-one\" class=\"headerlink\" title=\"多对一(many to one)\"></a>多对一(many to one)</h5><p>多对一(many to one) Foreignkey 始终定义在多的一方, 如果关联属性(relationship)定义在多的一方为多对一<br>一个child可能有多个parent(父亲和母亲),这里的外键(child_id)和relationship(child)都定义在多(parent)的一方<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\">DB_URL = <span class=\"string\">'sqlite:///test.db'</span></div><div class=\"line\">engine = create_engine(DB_URL)</div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent1</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'parent1'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    child_id = Column(Integer, ForeignKey(<span class=\"string\">'child1.id'</span>))</div><div class=\"line\">    child = relationship(<span class=\"string\">'Child1'</span>, backref=<span class=\"string\">'parent1'</span>, cascade= <span class=\"string\">'all'</span>)   <span class=\"comment\"># cascade设置关联删除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child1</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'child1'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>\n<h5 id=\"一对一-one-to-one\"><a href=\"#一对一-one-to-one\" class=\"headerlink\" title=\"一对一(one to one)\"></a>一对一(one to one)</h5><p>只需在一对多的relationship加上一个参数uselist=False,或者在多对一的backref中添加uselist=False ,即将对应关系变成一对一</p>\n<h5 id=\"多对多-many-to-many\"><a href=\"#多对多-many-to-many\" class=\"headerlink\" title=\"多对多(many to many)\"></a>多对多(many to many)</h5><p>需要定义一张中间关联表来完成<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, ForeignKey</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker, relationship</div><div class=\"line\"> </div><div class=\"line\">DB_URL = <span class=\"string\">'sqlite:///test.db'</span></div><div class=\"line\">engine = create_engine(DB_URL)</div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Association</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'association'</span></div><div class=\"line\"> </div><div class=\"line\">    left_id = Column(Integer, ForeignKey(<span class=\"string\">'left.id'</span>), primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    right_id = Column(Integer, ForeignKey(<span class=\"string\">'right.id'</span>), primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    extra_data = Column(String(<span class=\"number\">50</span>))</div><div class=\"line\">    child = relationship(<span class=\"string\">\"Child2\"</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent2</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'left'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    children = relationship(</div><div class=\"line\">        <span class=\"string\">\"Association\"</span>,)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child2</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'right'</span></div><div class=\"line\"> </div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将表结构写入数据库中</span></div><div class=\"line\">Base.metadata.create_all(engine)</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用Alembic-数据库迁移\"><a href=\"#使用Alembic-数据库迁移\" class=\"headerlink\" title=\"使用Alembic 数据库迁移\"></a>使用Alembic 数据库迁移</h4><p>alembic是sqlalchemy的作者开发的，用来做ORM模型与数据库的迁移与映射。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alembic.ini 提供了一些基本的配置</div><div class=\"line\">env.py 每次执行Alembic都会加载这个模块，主要提供项目Sqlalchemy Model 的连接</div><div class=\"line\">script.py.mako 迁移脚本生成模版</div><div class=\"line\">versions 存放生成的迁移脚本目录</div><div class=\"line\"> </div><div class=\"line\">alembic init   dir</div><div class=\"line\"># alembic revision -m &quot;create account table&quot;  生成Migration文件</div><div class=\"line\">alembic revision --autogenerate       自动生成迁移脚本</div><div class=\"line\">alembic revision --autogenerate -m &quot;add user table&quot; # 生成alembic升级脚本</div><div class=\"line\">alembic upgrade head</div></pre></td></tr></table></figure></p>\n<p>使用步骤：</p>\n<ol>\n<li>定义好模型</li>\n<li>使用alembic创建一个仓库：<code>alembic init [仓库的名字，推荐使用alembic]</code></li>\n<li>修改配置文件：<ul>\n<li>在<code>alembic.ini</code>中，给<code>sqlalchemy.url</code>设置数据库的连接方式。这个连接方式跟sqlalchemy的方式一样的</li>\n<li>在<code>alembic/env.py</code>中的<code>target_metadata</code>设置模型的<code>Base.metadata</code>。但是要导入<code>models</code>，需要将models所在的路径添加到这个文件中</li>\n</ul>\n</li>\n<li>将ORM模型生成迁移脚本：<code>alembic revision --autogenerate -m &#39;message&#39;</code></li>\n<li>将生成的脚本映射到数据库中：<code>alembic upgrade head</code></li>\n<li>以后如果修改了模型，重复4、5步骤</li>\n</ol>\n"},{"title":"运维 Iptables做端口映射","date":"2017-07-21T12:49:34.000Z","_content":"### 需求\n外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以通过端口转发，通过访问B的端口来实际访问A的redis服务\n\n### 解决方案\n```bash\n# B服务器 外网ip: 120.27.114.114   内网ip: 10.10.10.10 端口:6379  转发\n# A服务器 内网ip: 10.10.10.12:6379\necho '1' > /proc/sys/net/ipv4/ip_forward\nsysctl -p\niptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT\niptables -A FORWARD -d 10.10.10.12 -p tcp --dport 6379 -j ACCEPT\niptables -t nat -A PREROUTING -d 120.27.114.114 -p tcp -m tcp --dport 6379 -j DNAT --to-destination 10.10.10.12:6379\niptables -t nat -A POSTROUTING -d 10.10.10.12 -p tcp -m tcp --dport 6379 -j SNAT --to-source 10.10.10.10\n\niptables-save > /etc/iptables/rules.v4       # 保存\niptables-restore < /etc/iptables/rules.v4\t# 导入\n```\n\n","source":"_posts/iptables-forward.md","raw":"---\ntitle: 运维 Iptables做端口映射\ndate: 2017-07-21 20:49:34\ntags:\n  - Iptables\ncategories:\n  - 运维\n---\n### 需求\n外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以通过端口转发，通过访问B的端口来实际访问A的redis服务\n\n### 解决方案\n```bash\n# B服务器 外网ip: 120.27.114.114   内网ip: 10.10.10.10 端口:6379  转发\n# A服务器 内网ip: 10.10.10.12:6379\necho '1' > /proc/sys/net/ipv4/ip_forward\nsysctl -p\niptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT\niptables -A FORWARD -d 10.10.10.12 -p tcp --dport 6379 -j ACCEPT\niptables -t nat -A PREROUTING -d 120.27.114.114 -p tcp -m tcp --dport 6379 -j DNAT --to-destination 10.10.10.12:6379\niptables -t nat -A POSTROUTING -d 10.10.10.12 -p tcp -m tcp --dport 6379 -j SNAT --to-source 10.10.10.10\n\niptables-save > /etc/iptables/rules.v4       # 保存\niptables-restore < /etc/iptables/rules.v4\t# 导入\n```\n\n","slug":"iptables-forward","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xu004pct8uubms3isx","content":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以通过端口转发，通过访问B的端口来实际访问A的redis服务</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># B服务器 外网ip: 120.27.114.114   内网ip: 10.10.10.10 端口:6379  转发</span></div><div class=\"line\"><span class=\"comment\"># A服务器 内网ip: 10.10.10.12:6379</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'1'</span> &gt; /proc/sys/net/ipv4/ip_forward</div><div class=\"line\">sysctl -p</div><div class=\"line\">iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class=\"line\">iptables -A FORWARD <span class=\"_\">-d</span> 10.10.10.12 -p tcp --dport 6379 -j ACCEPT</div><div class=\"line\">iptables -t nat -A PREROUTING <span class=\"_\">-d</span> 120.27.114.114 -p tcp -m tcp --dport 6379 -j DNAT --to-destination 10.10.10.12:6379</div><div class=\"line\">iptables -t nat -A POSTROUTING <span class=\"_\">-d</span> 10.10.10.12 -p tcp -m tcp --dport 6379 -j SNAT --to-source 10.10.10.10</div><div class=\"line\"></div><div class=\"line\">iptables-save &gt; /etc/iptables/rules.v4       <span class=\"comment\"># 保存</span></div><div class=\"line\">iptables-restore &lt; /etc/iptables/rules.v4\t<span class=\"comment\"># 导入</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>外网需要访问内网的redis(无公网ip)服务器A，而它只能通过内网访问，其中服务器B有公网和内网地址，B通过内网可以访问A的服务；这时可以通过端口转发，通过访问B的端口来实际访问A的redis服务</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># B服务器 外网ip: 120.27.114.114   内网ip: 10.10.10.10 端口:6379  转发</span></div><div class=\"line\"><span class=\"comment\"># A服务器 内网ip: 10.10.10.12:6379</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'1'</span> &gt; /proc/sys/net/ipv4/ip_forward</div><div class=\"line\">sysctl -p</div><div class=\"line\">iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class=\"line\">iptables -A FORWARD <span class=\"_\">-d</span> 10.10.10.12 -p tcp --dport 6379 -j ACCEPT</div><div class=\"line\">iptables -t nat -A PREROUTING <span class=\"_\">-d</span> 120.27.114.114 -p tcp -m tcp --dport 6379 -j DNAT --to-destination 10.10.10.12:6379</div><div class=\"line\">iptables -t nat -A POSTROUTING <span class=\"_\">-d</span> 10.10.10.12 -p tcp -m tcp --dport 6379 -j SNAT --to-source 10.10.10.10</div><div class=\"line\"></div><div class=\"line\">iptables-save &gt; /etc/iptables/rules.v4       <span class=\"comment\"># 保存</span></div><div class=\"line\">iptables-restore &lt; /etc/iptables/rules.v4\t<span class=\"comment\"># 导入</span></div></pre></td></tr></table></figure>\n"},{"title":"运维 Redis日常笔记","date":"2017-02-18T14:16:52.000Z","_content":"### redis设置密码\n```\n方法一（命令行）：\nCONFIG SET requirepass  password\t#设置密码为password\nauth password\t#登录\nping\t#验证\nCONFIG SET requirepass  ''\t#取消密码，设置为空\nredis-cli -h 127.0.0.1 -p 6379 -a \"ttxsgoto\" \t#验证连接\n \n方法二（配置文件）：\n/etc/redis.conf中\n#requirepass foobared  \n去掉行前的注释，并修改密码为所需的密码,保存文件\n重启redis server完成\n \n#导出\nredis-cli -h 127.0.0.1 -p 6379 -a \"ttxsgoto\" keys xxx* > xxx.txt\n```\n### 常用命令\n```\nkeys *  #查看所有的keys\nget key #查看key\nset key vlaue   #设置key\ndel key #删除key\n \n#其他   http://redisdoc.com/\ndbsize  #当前数据库key数量\nselect 1    #切换到1号数据库\nconfig get *    #返回配置参数的变量和值\ninfo [Memory]    #返回redis服务器的各种信息和统计数据，如版本，内存使用情况  http://redisdoc.com/server/info.html\nmonitor    #实时打印出 Redis 服务器接收到的命令，调试用\nbgsave  #fork出一个新子进程，负责将数据保存到磁盘中\nslowlog get num    #查看slowlog http://redisdoc.com/server/slowlog.html\nslowlog len/reset     #slowlog数量/清空\nsave    #备份\nmove key db-index   # 返回1成功，0 如果key不存在，或者已经在指定数据库中\n \n#删除所有key\nflushdb     #删除当前数据库中的所有Key\nflushall    #删除所有数据库中的所有key\n \n查看建是否存在\nexists key   有返回(integer) 1，没有返回(integer) 0\n \nrename key newkey   #更改键的名称\ntype key    #返回键的数据类型\n```\n### redis备份&恢复\n```\n######## 备份 ########\nsave    #备份，写入rdb文件\nbgsave  #fork出一个新子进程，负责将数据保存到磁盘中\n \n######## 恢复 ########\nRedis 恢复的机制\n    - 如果只配置 AOF ，重启时加载 AOF 文件恢复数据；\n    - 如果同时配置了 RDB 和 AOF ，启动是只加载 AOF 文件恢复数据；\n    - 如果只配置 RDB，启动是将加载 dump 文件恢复数据\n \n1.aof 中恢复数据(配置如下)\n    appendonly yes\n    dir /data/redis/\n2.rdb 中恢复数据(配置如下)\n    appendonly no\n    dir /data/redis/\n3.启动服务\n \n#####重启服务时，会自动加载备份文件中的数据，但如果密码没有写入配置问题，会丢失需要重新设置\n#定时备份文件\n对于RDB和AOF，都是直接拷贝文件即可，可以设定crontab进行定时备份： cp /var/lib/redis/dump.rdb /somewhere/safe/dump.$(date +%Y%m%d%H%M).rdb\n \n检查修复AOF文件：\nredis-check-aof data/appendonly.aof\n \n# 数据快照，备份，主从\nhttp://blog.csdn.net/zhu_xun/article/details/16806697\n```\n### 配置文件\n```\n#redis.conf\n################################## INCLUDES ###################################\n# 其他个性化设置\n# include /path/to/local.conf\n# include /path/to/other.conf\n \n################################ GENERAL  #####################################常用\ndaemonize no    #默认不为守护进程运行，设置为yes修改为守护进程\npidfile /var/run/redis.pid  #如果为守护进程模式，pid文件\nport 6379   #监听端口\ntcp-backlog 511     # TCP 监听的最大容纳数量,在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题,/proc/sys/net/core/somaxconn 和设置值 相同\n# bind 192.168.1.100 10.0.0.1   #你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP，多个IP用空格隔开\ntimeout 0   # 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）\ntcp-keepalive 0 # tcp 心跳包，推荐一个合理的值就是60秒\nloglevel notice     # 定义日志级别，notice (适用于生产环境)\nlogfile \"\"      # 指定日志文件的位置\n \n# 要想把日志记录到系统日志，就把它改成 yes，\n# 也可以可选择性的更新其他的syslog 参数以达到你的要求\n# syslog-enabled no\n \n# 设置 syslog 的 identity。\n# syslog-ident redis\n \n# 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。\n# syslog-facility local0\n \ndatabases 32    #设置数据库的数目，启动32个数据库，默认为16个(0-15)\n \n################################ SNAPSHOTTING  ################################快照\n# 存 DB 到磁盘：\n#   格式：save <间隔时间（秒）> <写入次数>\n#   根据给定的时间间隔和写入次数将数据保存到磁盘\n#\n#   下面的例子的意思是：\n#   900 秒内如果至少有 1 个 key 的值变化，则保存\n#   300 秒内如果至少有 10 个 key 的值变化，则保存\n#   60 秒内如果至少有 10000 个 key 的值变化，则保存\n#　　\n#   注意：你可以注释掉所有的 save 行来停用保存功能。\n#   也可以直接一个空字符串来实现停用：\n#   save \"\"\n \nsave 900 1\nsave 300 10\nsave 60 10000\n \n# 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\n# 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\n# 否则就会没人注意到灾难的发生。\n#\n# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\n#\n# 你可能不希望 redis 这样做，那你就改成 no \nstop-writes-on-bgsave-error yes\n \n# 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串\n# 默认都设为 yes\n# 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，\n# 不过这个数据集可能就会比较大\nrdbcompression yes\n \n# 是否校验rdb文件\nrdbchecksum yes\n \n# 设置 dump 的文件位置\ndbfilename dump.rdb \n \n# 工作目录\n# 例如上面的 dbfilename 只指定了文件名，\n# 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。\ndir ./      #设置到 /etc/redis下 dir '/etc/redis/'\n \n################################# REPLICATION #################################主从复制\n#######\n \n################################## SECURITY ###################################安全\n# 设置认证密码\nrequirepass foobared\n \n################################### LIMITS ####################################限制\n# 一旦达到最大限制，redis 将关闭所有的新连接\n# 并发送一个‘max number of clients reached’的错误\n# maxclients 10000\n \n# 最大使用内存\n# maxmemory <bytes>\n \n# 最大内存策略，你有 5 个选择。\n# \n# volatile-lru -> remove the key with an expire set using an LRU algorithm\n# volatile-lru -> 使用 LRU 算法移除包含过期设置的 key 。\n# allkeys-lru -> remove any key accordingly to the LRU algorithm\n# allkeys-lru -> 根据 LRU 算法移除所有的 key 。\n# volatile-random -> remove a random key with an expire set\n# allkeys-random -> remove a random key, any key\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\n# noeviction -> don't expire at all, just return an error on write operations\n# noeviction -> 不让任何 key 过期，只是给写入操作返回一个错误\n \n############################## APPEND ONLY MODE ###############################\n \nappendonly no   #在启动时Redis会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入的速度相较RDB会慢一些\nappendfilename \"appendonly.aof\"\n \n# appendfsync always\nappendfsync everysec\nno-appendfsync-on-rewrite no\n \nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n \n################################ LUA SCRIPTING  ###############################\nlua-time-limit 5000\n \n################################ REDIS CLUSTER  ###############################集群\n# cluster-enabled yes   # 启用或停用集群\n \n# cluster-config-file nodes-6379.conf\n# cluster-node-timeout 15000\n# cluster-slave-validity-factor 10\n# cluster-migration-barrier 1\n \n################################## SLOW LOG ###################################慢日志\n \nslowlog-log-slower-than 10000   # 慢查询记录时间10000ms\nslowlog-max-len 128             # 记录数据条数 \n \n############################# Event notification ##############################\nnotify-keyspace-events \"\"\n \n############################### ADVANCED CONFIG ###############################\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\n \nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\n \nset-max-intset-entries 512\n \nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n \nhll-sparse-max-bytes 3000\n \nactiverehashing yes\n \nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n \nhz 10\n \naof-rewrite-incremental-fsync yes\n```","source":"_posts/redis.md","raw":"---\ntitle: 运维 Redis日常笔记\ndate: 2017-02-18 22:16:52\ntags:\n  - Redis\ncategories:\n  - 运维\n---\n### redis设置密码\n```\n方法一（命令行）：\nCONFIG SET requirepass  password\t#设置密码为password\nauth password\t#登录\nping\t#验证\nCONFIG SET requirepass  ''\t#取消密码，设置为空\nredis-cli -h 127.0.0.1 -p 6379 -a \"ttxsgoto\" \t#验证连接\n \n方法二（配置文件）：\n/etc/redis.conf中\n#requirepass foobared  \n去掉行前的注释，并修改密码为所需的密码,保存文件\n重启redis server完成\n \n#导出\nredis-cli -h 127.0.0.1 -p 6379 -a \"ttxsgoto\" keys xxx* > xxx.txt\n```\n### 常用命令\n```\nkeys *  #查看所有的keys\nget key #查看key\nset key vlaue   #设置key\ndel key #删除key\n \n#其他   http://redisdoc.com/\ndbsize  #当前数据库key数量\nselect 1    #切换到1号数据库\nconfig get *    #返回配置参数的变量和值\ninfo [Memory]    #返回redis服务器的各种信息和统计数据，如版本，内存使用情况  http://redisdoc.com/server/info.html\nmonitor    #实时打印出 Redis 服务器接收到的命令，调试用\nbgsave  #fork出一个新子进程，负责将数据保存到磁盘中\nslowlog get num    #查看slowlog http://redisdoc.com/server/slowlog.html\nslowlog len/reset     #slowlog数量/清空\nsave    #备份\nmove key db-index   # 返回1成功，0 如果key不存在，或者已经在指定数据库中\n \n#删除所有key\nflushdb     #删除当前数据库中的所有Key\nflushall    #删除所有数据库中的所有key\n \n查看建是否存在\nexists key   有返回(integer) 1，没有返回(integer) 0\n \nrename key newkey   #更改键的名称\ntype key    #返回键的数据类型\n```\n### redis备份&恢复\n```\n######## 备份 ########\nsave    #备份，写入rdb文件\nbgsave  #fork出一个新子进程，负责将数据保存到磁盘中\n \n######## 恢复 ########\nRedis 恢复的机制\n    - 如果只配置 AOF ，重启时加载 AOF 文件恢复数据；\n    - 如果同时配置了 RDB 和 AOF ，启动是只加载 AOF 文件恢复数据；\n    - 如果只配置 RDB，启动是将加载 dump 文件恢复数据\n \n1.aof 中恢复数据(配置如下)\n    appendonly yes\n    dir /data/redis/\n2.rdb 中恢复数据(配置如下)\n    appendonly no\n    dir /data/redis/\n3.启动服务\n \n#####重启服务时，会自动加载备份文件中的数据，但如果密码没有写入配置问题，会丢失需要重新设置\n#定时备份文件\n对于RDB和AOF，都是直接拷贝文件即可，可以设定crontab进行定时备份： cp /var/lib/redis/dump.rdb /somewhere/safe/dump.$(date +%Y%m%d%H%M).rdb\n \n检查修复AOF文件：\nredis-check-aof data/appendonly.aof\n \n# 数据快照，备份，主从\nhttp://blog.csdn.net/zhu_xun/article/details/16806697\n```\n### 配置文件\n```\n#redis.conf\n################################## INCLUDES ###################################\n# 其他个性化设置\n# include /path/to/local.conf\n# include /path/to/other.conf\n \n################################ GENERAL  #####################################常用\ndaemonize no    #默认不为守护进程运行，设置为yes修改为守护进程\npidfile /var/run/redis.pid  #如果为守护进程模式，pid文件\nport 6379   #监听端口\ntcp-backlog 511     # TCP 监听的最大容纳数量,在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题,/proc/sys/net/core/somaxconn 和设置值 相同\n# bind 192.168.1.100 10.0.0.1   #你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP，多个IP用空格隔开\ntimeout 0   # 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）\ntcp-keepalive 0 # tcp 心跳包，推荐一个合理的值就是60秒\nloglevel notice     # 定义日志级别，notice (适用于生产环境)\nlogfile \"\"      # 指定日志文件的位置\n \n# 要想把日志记录到系统日志，就把它改成 yes，\n# 也可以可选择性的更新其他的syslog 参数以达到你的要求\n# syslog-enabled no\n \n# 设置 syslog 的 identity。\n# syslog-ident redis\n \n# 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。\n# syslog-facility local0\n \ndatabases 32    #设置数据库的数目，启动32个数据库，默认为16个(0-15)\n \n################################ SNAPSHOTTING  ################################快照\n# 存 DB 到磁盘：\n#   格式：save <间隔时间（秒）> <写入次数>\n#   根据给定的时间间隔和写入次数将数据保存到磁盘\n#\n#   下面的例子的意思是：\n#   900 秒内如果至少有 1 个 key 的值变化，则保存\n#   300 秒内如果至少有 10 个 key 的值变化，则保存\n#   60 秒内如果至少有 10000 个 key 的值变化，则保存\n#　　\n#   注意：你可以注释掉所有的 save 行来停用保存功能。\n#   也可以直接一个空字符串来实现停用：\n#   save \"\"\n \nsave 900 1\nsave 300 10\nsave 60 10000\n \n# 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\n# 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\n# 否则就会没人注意到灾难的发生。\n#\n# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\n#\n# 你可能不希望 redis 这样做，那你就改成 no \nstop-writes-on-bgsave-error yes\n \n# 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串\n# 默认都设为 yes\n# 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，\n# 不过这个数据集可能就会比较大\nrdbcompression yes\n \n# 是否校验rdb文件\nrdbchecksum yes\n \n# 设置 dump 的文件位置\ndbfilename dump.rdb \n \n# 工作目录\n# 例如上面的 dbfilename 只指定了文件名，\n# 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。\ndir ./      #设置到 /etc/redis下 dir '/etc/redis/'\n \n################################# REPLICATION #################################主从复制\n#######\n \n################################## SECURITY ###################################安全\n# 设置认证密码\nrequirepass foobared\n \n################################### LIMITS ####################################限制\n# 一旦达到最大限制，redis 将关闭所有的新连接\n# 并发送一个‘max number of clients reached’的错误\n# maxclients 10000\n \n# 最大使用内存\n# maxmemory <bytes>\n \n# 最大内存策略，你有 5 个选择。\n# \n# volatile-lru -> remove the key with an expire set using an LRU algorithm\n# volatile-lru -> 使用 LRU 算法移除包含过期设置的 key 。\n# allkeys-lru -> remove any key accordingly to the LRU algorithm\n# allkeys-lru -> 根据 LRU 算法移除所有的 key 。\n# volatile-random -> remove a random key with an expire set\n# allkeys-random -> remove a random key, any key\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\n# noeviction -> don't expire at all, just return an error on write operations\n# noeviction -> 不让任何 key 过期，只是给写入操作返回一个错误\n \n############################## APPEND ONLY MODE ###############################\n \nappendonly no   #在启动时Redis会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入的速度相较RDB会慢一些\nappendfilename \"appendonly.aof\"\n \n# appendfsync always\nappendfsync everysec\nno-appendfsync-on-rewrite no\n \nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n \n################################ LUA SCRIPTING  ###############################\nlua-time-limit 5000\n \n################################ REDIS CLUSTER  ###############################集群\n# cluster-enabled yes   # 启用或停用集群\n \n# cluster-config-file nodes-6379.conf\n# cluster-node-timeout 15000\n# cluster-slave-validity-factor 10\n# cluster-migration-barrier 1\n \n################################## SLOW LOG ###################################慢日志\n \nslowlog-log-slower-than 10000   # 慢查询记录时间10000ms\nslowlog-max-len 128             # 记录数据条数 \n \n############################# Event notification ##############################\nnotify-keyspace-events \"\"\n \n############################### ADVANCED CONFIG ###############################\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\n \nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\n \nset-max-intset-entries 512\n \nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n \nhll-sparse-max-bytes 3000\n \nactiverehashing yes\n \nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n \nhz 10\n \naof-rewrite-incremental-fsync yes\n```","slug":"redis","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xw004sct8uvm40pk93","content":"<h3 id=\"redis设置密码\"><a href=\"#redis设置密码\" class=\"headerlink\" title=\"redis设置密码\"></a>redis设置密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法一（命令行）：</div><div class=\"line\">CONFIG SET requirepass  password\t#设置密码为password</div><div class=\"line\">auth password\t#登录</div><div class=\"line\">ping\t#验证</div><div class=\"line\">CONFIG SET requirepass  &apos;&apos;\t#取消密码，设置为空</div><div class=\"line\">redis-cli -h 127.0.0.1 -p 6379 -a &quot;ttxsgoto&quot; \t#验证连接</div><div class=\"line\"> </div><div class=\"line\">方法二（配置文件）：</div><div class=\"line\">/etc/redis.conf中</div><div class=\"line\">#requirepass foobared  </div><div class=\"line\">去掉行前的注释，并修改密码为所需的密码,保存文件</div><div class=\"line\">重启redis server完成</div><div class=\"line\"> </div><div class=\"line\">#导出</div><div class=\"line\">redis-cli -h 127.0.0.1 -p 6379 -a &quot;ttxsgoto&quot; keys xxx* &gt; xxx.txt</div></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">keys *  #查看所有的keys</div><div class=\"line\">get key #查看key</div><div class=\"line\">set key vlaue   #设置key</div><div class=\"line\">del key #删除key</div><div class=\"line\"> </div><div class=\"line\">#其他   http://redisdoc.com/</div><div class=\"line\">dbsize  #当前数据库key数量</div><div class=\"line\">select 1    #切换到1号数据库</div><div class=\"line\">config get *    #返回配置参数的变量和值</div><div class=\"line\">info [Memory]    #返回redis服务器的各种信息和统计数据，如版本，内存使用情况  http://redisdoc.com/server/info.html</div><div class=\"line\">monitor    #实时打印出 Redis 服务器接收到的命令，调试用</div><div class=\"line\">bgsave  #fork出一个新子进程，负责将数据保存到磁盘中</div><div class=\"line\">slowlog get num    #查看slowlog http://redisdoc.com/server/slowlog.html</div><div class=\"line\">slowlog len/reset     #slowlog数量/清空</div><div class=\"line\">save    #备份</div><div class=\"line\">move key db-index   # 返回1成功，0 如果key不存在，或者已经在指定数据库中</div><div class=\"line\"> </div><div class=\"line\">#删除所有key</div><div class=\"line\">flushdb     #删除当前数据库中的所有Key</div><div class=\"line\">flushall    #删除所有数据库中的所有key</div><div class=\"line\"> </div><div class=\"line\">查看建是否存在</div><div class=\"line\">exists key   有返回(integer) 1，没有返回(integer) 0</div><div class=\"line\"> </div><div class=\"line\">rename key newkey   #更改键的名称</div><div class=\"line\">type key    #返回键的数据类型</div></pre></td></tr></table></figure>\n<h3 id=\"redis备份-amp-恢复\"><a href=\"#redis备份-amp-恢复\" class=\"headerlink\" title=\"redis备份&amp;恢复\"></a>redis备份&amp;恢复</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">######## 备份 ########</div><div class=\"line\">save    #备份，写入rdb文件</div><div class=\"line\">bgsave  #fork出一个新子进程，负责将数据保存到磁盘中</div><div class=\"line\"> </div><div class=\"line\">######## 恢复 ########</div><div class=\"line\">Redis 恢复的机制</div><div class=\"line\">    - 如果只配置 AOF ，重启时加载 AOF 文件恢复数据；</div><div class=\"line\">    - 如果同时配置了 RDB 和 AOF ，启动是只加载 AOF 文件恢复数据；</div><div class=\"line\">    - 如果只配置 RDB，启动是将加载 dump 文件恢复数据</div><div class=\"line\"> </div><div class=\"line\">1.aof 中恢复数据(配置如下)</div><div class=\"line\">    appendonly yes</div><div class=\"line\">    dir /data/redis/</div><div class=\"line\">2.rdb 中恢复数据(配置如下)</div><div class=\"line\">    appendonly no</div><div class=\"line\">    dir /data/redis/</div><div class=\"line\">3.启动服务</div><div class=\"line\"> </div><div class=\"line\">#####重启服务时，会自动加载备份文件中的数据，但如果密码没有写入配置问题，会丢失需要重新设置</div><div class=\"line\">#定时备份文件</div><div class=\"line\">对于RDB和AOF，都是直接拷贝文件即可，可以设定crontab进行定时备份： cp /var/lib/redis/dump.rdb /somewhere/safe/dump.$(date +%Y%m%d%H%M).rdb</div><div class=\"line\"> </div><div class=\"line\">检查修复AOF文件：</div><div class=\"line\">redis-check-aof data/appendonly.aof</div><div class=\"line\"> </div><div class=\"line\"># 数据快照，备份，主从</div><div class=\"line\">http://blog.csdn.net/zhu_xun/article/details/16806697</div></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\">#redis.conf</div><div class=\"line\">################################## INCLUDES ###################################</div><div class=\"line\"># 其他个性化设置</div><div class=\"line\"># include /path/to/local.conf</div><div class=\"line\"># include /path/to/other.conf</div><div class=\"line\"> </div><div class=\"line\">################################ GENERAL  #####################################常用</div><div class=\"line\">daemonize no    #默认不为守护进程运行，设置为yes修改为守护进程</div><div class=\"line\">pidfile /var/run/redis.pid  #如果为守护进程模式，pid文件</div><div class=\"line\">port 6379   #监听端口</div><div class=\"line\">tcp-backlog 511     # TCP 监听的最大容纳数量,在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题,/proc/sys/net/core/somaxconn 和设置值 相同</div><div class=\"line\"># bind 192.168.1.100 10.0.0.1   #你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP，多个IP用空格隔开</div><div class=\"line\">timeout 0   # 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）</div><div class=\"line\">tcp-keepalive 0 # tcp 心跳包，推荐一个合理的值就是60秒</div><div class=\"line\">loglevel notice     # 定义日志级别，notice (适用于生产环境)</div><div class=\"line\">logfile &quot;&quot;      # 指定日志文件的位置</div><div class=\"line\"> </div><div class=\"line\"># 要想把日志记录到系统日志，就把它改成 yes，</div><div class=\"line\"># 也可以可选择性的更新其他的syslog 参数以达到你的要求</div><div class=\"line\"># syslog-enabled no</div><div class=\"line\"> </div><div class=\"line\"># 设置 syslog 的 identity。</div><div class=\"line\"># syslog-ident redis</div><div class=\"line\"> </div><div class=\"line\"># 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。</div><div class=\"line\"># syslog-facility local0</div><div class=\"line\"> </div><div class=\"line\">databases 32    #设置数据库的数目，启动32个数据库，默认为16个(0-15)</div><div class=\"line\"> </div><div class=\"line\">################################ SNAPSHOTTING  ################################快照</div><div class=\"line\"># 存 DB 到磁盘：</div><div class=\"line\">#   格式：save &lt;间隔时间（秒）&gt; &lt;写入次数&gt;</div><div class=\"line\">#   根据给定的时间间隔和写入次数将数据保存到磁盘</div><div class=\"line\">#</div><div class=\"line\">#   下面的例子的意思是：</div><div class=\"line\">#   900 秒内如果至少有 1 个 key 的值变化，则保存</div><div class=\"line\">#   300 秒内如果至少有 10 个 key 的值变化，则保存</div><div class=\"line\">#   60 秒内如果至少有 10000 个 key 的值变化，则保存</div><div class=\"line\">#　　</div><div class=\"line\">#   注意：你可以注释掉所有的 save 行来停用保存功能。</div><div class=\"line\">#   也可以直接一个空字符串来实现停用：</div><div class=\"line\">#   save &quot;&quot;</div><div class=\"line\"> </div><div class=\"line\">save 900 1</div><div class=\"line\">save 300 10</div><div class=\"line\">save 60 10000</div><div class=\"line\"> </div><div class=\"line\"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</div><div class=\"line\"># 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，</div><div class=\"line\"># 否则就会没人注意到灾难的发生。</div><div class=\"line\">#</div><div class=\"line\"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</div><div class=\"line\">#</div><div class=\"line\"># 你可能不希望 redis 这样做，那你就改成 no </div><div class=\"line\">stop-writes-on-bgsave-error yes</div><div class=\"line\"> </div><div class=\"line\"># 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串</div><div class=\"line\"># 默认都设为 yes</div><div class=\"line\"># 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，</div><div class=\"line\"># 不过这个数据集可能就会比较大</div><div class=\"line\">rdbcompression yes</div><div class=\"line\"> </div><div class=\"line\"># 是否校验rdb文件</div><div class=\"line\">rdbchecksum yes</div><div class=\"line\"> </div><div class=\"line\"># 设置 dump 的文件位置</div><div class=\"line\">dbfilename dump.rdb </div><div class=\"line\"> </div><div class=\"line\"># 工作目录</div><div class=\"line\"># 例如上面的 dbfilename 只指定了文件名，</div><div class=\"line\"># 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。</div><div class=\"line\">dir ./      #设置到 /etc/redis下 dir &apos;/etc/redis/&apos;</div><div class=\"line\"> </div><div class=\"line\">################################# REPLICATION #################################主从复制</div><div class=\"line\">#######</div><div class=\"line\"> </div><div class=\"line\">################################## SECURITY ###################################安全</div><div class=\"line\"># 设置认证密码</div><div class=\"line\">requirepass foobared</div><div class=\"line\"> </div><div class=\"line\">################################### LIMITS ####################################限制</div><div class=\"line\"># 一旦达到最大限制，redis 将关闭所有的新连接</div><div class=\"line\"># 并发送一个‘max number of clients reached’的错误</div><div class=\"line\"># maxclients 10000</div><div class=\"line\"> </div><div class=\"line\"># 最大使用内存</div><div class=\"line\"># maxmemory &lt;bytes&gt;</div><div class=\"line\"> </div><div class=\"line\"># 最大内存策略，你有 5 个选择。</div><div class=\"line\"># </div><div class=\"line\"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</div><div class=\"line\"># volatile-lru -&gt; 使用 LRU 算法移除包含过期设置的 key 。</div><div class=\"line\"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</div><div class=\"line\"># allkeys-lru -&gt; 根据 LRU 算法移除所有的 key 。</div><div class=\"line\"># volatile-random -&gt; remove a random key with an expire set</div><div class=\"line\"># allkeys-random -&gt; remove a random key, any key</div><div class=\"line\"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</div><div class=\"line\"># noeviction -&gt; don&apos;t expire at all, just return an error on write operations</div><div class=\"line\"># noeviction -&gt; 不让任何 key 过期，只是给写入操作返回一个错误</div><div class=\"line\"> </div><div class=\"line\">############################## APPEND ONLY MODE ###############################</div><div class=\"line\"> </div><div class=\"line\">appendonly no   #在启动时Redis会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入的速度相较RDB会慢一些</div><div class=\"line\">appendfilename &quot;appendonly.aof&quot;</div><div class=\"line\"> </div><div class=\"line\"># appendfsync always</div><div class=\"line\">appendfsync everysec</div><div class=\"line\">no-appendfsync-on-rewrite no</div><div class=\"line\"> </div><div class=\"line\">auto-aof-rewrite-percentage 100</div><div class=\"line\">auto-aof-rewrite-min-size 64mb</div><div class=\"line\"> </div><div class=\"line\">################################ LUA SCRIPTING  ###############################</div><div class=\"line\">lua-time-limit 5000</div><div class=\"line\"> </div><div class=\"line\">################################ REDIS CLUSTER  ###############################集群</div><div class=\"line\"># cluster-enabled yes   # 启用或停用集群</div><div class=\"line\"> </div><div class=\"line\"># cluster-config-file nodes-6379.conf</div><div class=\"line\"># cluster-node-timeout 15000</div><div class=\"line\"># cluster-slave-validity-factor 10</div><div class=\"line\"># cluster-migration-barrier 1</div><div class=\"line\"> </div><div class=\"line\">################################## SLOW LOG ###################################慢日志</div><div class=\"line\"> </div><div class=\"line\">slowlog-log-slower-than 10000   # 慢查询记录时间10000ms</div><div class=\"line\">slowlog-max-len 128             # 记录数据条数 </div><div class=\"line\"> </div><div class=\"line\">############################# Event notification ##############################</div><div class=\"line\">notify-keyspace-events &quot;&quot;</div><div class=\"line\"> </div><div class=\"line\">############################### ADVANCED CONFIG ###############################</div><div class=\"line\">hash-max-ziplist-entries 512</div><div class=\"line\">hash-max-ziplist-value 64</div><div class=\"line\"> </div><div class=\"line\">list-max-ziplist-entries 512</div><div class=\"line\">list-max-ziplist-value 64</div><div class=\"line\"> </div><div class=\"line\">set-max-intset-entries 512</div><div class=\"line\"> </div><div class=\"line\">zset-max-ziplist-entries 128</div><div class=\"line\">zset-max-ziplist-value 64</div><div class=\"line\"> </div><div class=\"line\">hll-sparse-max-bytes 3000</div><div class=\"line\"> </div><div class=\"line\">activerehashing yes</div><div class=\"line\"> </div><div class=\"line\">client-output-buffer-limit normal 0 0 0</div><div class=\"line\">client-output-buffer-limit slave 256mb 64mb 60</div><div class=\"line\">client-output-buffer-limit pubsub 32mb 8mb 60</div><div class=\"line\"> </div><div class=\"line\">hz 10</div><div class=\"line\"> </div><div class=\"line\">aof-rewrite-incremental-fsync yes</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"redis设置密码\"><a href=\"#redis设置密码\" class=\"headerlink\" title=\"redis设置密码\"></a>redis设置密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法一（命令行）：</div><div class=\"line\">CONFIG SET requirepass  password\t#设置密码为password</div><div class=\"line\">auth password\t#登录</div><div class=\"line\">ping\t#验证</div><div class=\"line\">CONFIG SET requirepass  &apos;&apos;\t#取消密码，设置为空</div><div class=\"line\">redis-cli -h 127.0.0.1 -p 6379 -a &quot;ttxsgoto&quot; \t#验证连接</div><div class=\"line\"> </div><div class=\"line\">方法二（配置文件）：</div><div class=\"line\">/etc/redis.conf中</div><div class=\"line\">#requirepass foobared  </div><div class=\"line\">去掉行前的注释，并修改密码为所需的密码,保存文件</div><div class=\"line\">重启redis server完成</div><div class=\"line\"> </div><div class=\"line\">#导出</div><div class=\"line\">redis-cli -h 127.0.0.1 -p 6379 -a &quot;ttxsgoto&quot; keys xxx* &gt; xxx.txt</div></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">keys *  #查看所有的keys</div><div class=\"line\">get key #查看key</div><div class=\"line\">set key vlaue   #设置key</div><div class=\"line\">del key #删除key</div><div class=\"line\"> </div><div class=\"line\">#其他   http://redisdoc.com/</div><div class=\"line\">dbsize  #当前数据库key数量</div><div class=\"line\">select 1    #切换到1号数据库</div><div class=\"line\">config get *    #返回配置参数的变量和值</div><div class=\"line\">info [Memory]    #返回redis服务器的各种信息和统计数据，如版本，内存使用情况  http://redisdoc.com/server/info.html</div><div class=\"line\">monitor    #实时打印出 Redis 服务器接收到的命令，调试用</div><div class=\"line\">bgsave  #fork出一个新子进程，负责将数据保存到磁盘中</div><div class=\"line\">slowlog get num    #查看slowlog http://redisdoc.com/server/slowlog.html</div><div class=\"line\">slowlog len/reset     #slowlog数量/清空</div><div class=\"line\">save    #备份</div><div class=\"line\">move key db-index   # 返回1成功，0 如果key不存在，或者已经在指定数据库中</div><div class=\"line\"> </div><div class=\"line\">#删除所有key</div><div class=\"line\">flushdb     #删除当前数据库中的所有Key</div><div class=\"line\">flushall    #删除所有数据库中的所有key</div><div class=\"line\"> </div><div class=\"line\">查看建是否存在</div><div class=\"line\">exists key   有返回(integer) 1，没有返回(integer) 0</div><div class=\"line\"> </div><div class=\"line\">rename key newkey   #更改键的名称</div><div class=\"line\">type key    #返回键的数据类型</div></pre></td></tr></table></figure>\n<h3 id=\"redis备份-amp-恢复\"><a href=\"#redis备份-amp-恢复\" class=\"headerlink\" title=\"redis备份&amp;恢复\"></a>redis备份&amp;恢复</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">######## 备份 ########</div><div class=\"line\">save    #备份，写入rdb文件</div><div class=\"line\">bgsave  #fork出一个新子进程，负责将数据保存到磁盘中</div><div class=\"line\"> </div><div class=\"line\">######## 恢复 ########</div><div class=\"line\">Redis 恢复的机制</div><div class=\"line\">    - 如果只配置 AOF ，重启时加载 AOF 文件恢复数据；</div><div class=\"line\">    - 如果同时配置了 RDB 和 AOF ，启动是只加载 AOF 文件恢复数据；</div><div class=\"line\">    - 如果只配置 RDB，启动是将加载 dump 文件恢复数据</div><div class=\"line\"> </div><div class=\"line\">1.aof 中恢复数据(配置如下)</div><div class=\"line\">    appendonly yes</div><div class=\"line\">    dir /data/redis/</div><div class=\"line\">2.rdb 中恢复数据(配置如下)</div><div class=\"line\">    appendonly no</div><div class=\"line\">    dir /data/redis/</div><div class=\"line\">3.启动服务</div><div class=\"line\"> </div><div class=\"line\">#####重启服务时，会自动加载备份文件中的数据，但如果密码没有写入配置问题，会丢失需要重新设置</div><div class=\"line\">#定时备份文件</div><div class=\"line\">对于RDB和AOF，都是直接拷贝文件即可，可以设定crontab进行定时备份： cp /var/lib/redis/dump.rdb /somewhere/safe/dump.$(date +%Y%m%d%H%M).rdb</div><div class=\"line\"> </div><div class=\"line\">检查修复AOF文件：</div><div class=\"line\">redis-check-aof data/appendonly.aof</div><div class=\"line\"> </div><div class=\"line\"># 数据快照，备份，主从</div><div class=\"line\">http://blog.csdn.net/zhu_xun/article/details/16806697</div></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\">#redis.conf</div><div class=\"line\">################################## INCLUDES ###################################</div><div class=\"line\"># 其他个性化设置</div><div class=\"line\"># include /path/to/local.conf</div><div class=\"line\"># include /path/to/other.conf</div><div class=\"line\"> </div><div class=\"line\">################################ GENERAL  #####################################常用</div><div class=\"line\">daemonize no    #默认不为守护进程运行，设置为yes修改为守护进程</div><div class=\"line\">pidfile /var/run/redis.pid  #如果为守护进程模式，pid文件</div><div class=\"line\">port 6379   #监听端口</div><div class=\"line\">tcp-backlog 511     # TCP 监听的最大容纳数量,在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题,/proc/sys/net/core/somaxconn 和设置值 相同</div><div class=\"line\"># bind 192.168.1.100 10.0.0.1   #你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP，多个IP用空格隔开</div><div class=\"line\">timeout 0   # 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）</div><div class=\"line\">tcp-keepalive 0 # tcp 心跳包，推荐一个合理的值就是60秒</div><div class=\"line\">loglevel notice     # 定义日志级别，notice (适用于生产环境)</div><div class=\"line\">logfile &quot;&quot;      # 指定日志文件的位置</div><div class=\"line\"> </div><div class=\"line\"># 要想把日志记录到系统日志，就把它改成 yes，</div><div class=\"line\"># 也可以可选择性的更新其他的syslog 参数以达到你的要求</div><div class=\"line\"># syslog-enabled no</div><div class=\"line\"> </div><div class=\"line\"># 设置 syslog 的 identity。</div><div class=\"line\"># syslog-ident redis</div><div class=\"line\"> </div><div class=\"line\"># 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。</div><div class=\"line\"># syslog-facility local0</div><div class=\"line\"> </div><div class=\"line\">databases 32    #设置数据库的数目，启动32个数据库，默认为16个(0-15)</div><div class=\"line\"> </div><div class=\"line\">################################ SNAPSHOTTING  ################################快照</div><div class=\"line\"># 存 DB 到磁盘：</div><div class=\"line\">#   格式：save &lt;间隔时间（秒）&gt; &lt;写入次数&gt;</div><div class=\"line\">#   根据给定的时间间隔和写入次数将数据保存到磁盘</div><div class=\"line\">#</div><div class=\"line\">#   下面的例子的意思是：</div><div class=\"line\">#   900 秒内如果至少有 1 个 key 的值变化，则保存</div><div class=\"line\">#   300 秒内如果至少有 10 个 key 的值变化，则保存</div><div class=\"line\">#   60 秒内如果至少有 10000 个 key 的值变化，则保存</div><div class=\"line\">#　　</div><div class=\"line\">#   注意：你可以注释掉所有的 save 行来停用保存功能。</div><div class=\"line\">#   也可以直接一个空字符串来实现停用：</div><div class=\"line\">#   save &quot;&quot;</div><div class=\"line\"> </div><div class=\"line\">save 900 1</div><div class=\"line\">save 300 10</div><div class=\"line\">save 60 10000</div><div class=\"line\"> </div><div class=\"line\"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</div><div class=\"line\"># 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，</div><div class=\"line\"># 否则就会没人注意到灾难的发生。</div><div class=\"line\">#</div><div class=\"line\"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</div><div class=\"line\">#</div><div class=\"line\"># 你可能不希望 redis 这样做，那你就改成 no </div><div class=\"line\">stop-writes-on-bgsave-error yes</div><div class=\"line\"> </div><div class=\"line\"># 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串</div><div class=\"line\"># 默认都设为 yes</div><div class=\"line\"># 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，</div><div class=\"line\"># 不过这个数据集可能就会比较大</div><div class=\"line\">rdbcompression yes</div><div class=\"line\"> </div><div class=\"line\"># 是否校验rdb文件</div><div class=\"line\">rdbchecksum yes</div><div class=\"line\"> </div><div class=\"line\"># 设置 dump 的文件位置</div><div class=\"line\">dbfilename dump.rdb </div><div class=\"line\"> </div><div class=\"line\"># 工作目录</div><div class=\"line\"># 例如上面的 dbfilename 只指定了文件名，</div><div class=\"line\"># 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。</div><div class=\"line\">dir ./      #设置到 /etc/redis下 dir &apos;/etc/redis/&apos;</div><div class=\"line\"> </div><div class=\"line\">################################# REPLICATION #################################主从复制</div><div class=\"line\">#######</div><div class=\"line\"> </div><div class=\"line\">################################## SECURITY ###################################安全</div><div class=\"line\"># 设置认证密码</div><div class=\"line\">requirepass foobared</div><div class=\"line\"> </div><div class=\"line\">################################### LIMITS ####################################限制</div><div class=\"line\"># 一旦达到最大限制，redis 将关闭所有的新连接</div><div class=\"line\"># 并发送一个‘max number of clients reached’的错误</div><div class=\"line\"># maxclients 10000</div><div class=\"line\"> </div><div class=\"line\"># 最大使用内存</div><div class=\"line\"># maxmemory &lt;bytes&gt;</div><div class=\"line\"> </div><div class=\"line\"># 最大内存策略，你有 5 个选择。</div><div class=\"line\"># </div><div class=\"line\"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</div><div class=\"line\"># volatile-lru -&gt; 使用 LRU 算法移除包含过期设置的 key 。</div><div class=\"line\"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</div><div class=\"line\"># allkeys-lru -&gt; 根据 LRU 算法移除所有的 key 。</div><div class=\"line\"># volatile-random -&gt; remove a random key with an expire set</div><div class=\"line\"># allkeys-random -&gt; remove a random key, any key</div><div class=\"line\"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</div><div class=\"line\"># noeviction -&gt; don&apos;t expire at all, just return an error on write operations</div><div class=\"line\"># noeviction -&gt; 不让任何 key 过期，只是给写入操作返回一个错误</div><div class=\"line\"> </div><div class=\"line\">############################## APPEND ONLY MODE ###############################</div><div class=\"line\"> </div><div class=\"line\">appendonly no   #在启动时Redis会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入的速度相较RDB会慢一些</div><div class=\"line\">appendfilename &quot;appendonly.aof&quot;</div><div class=\"line\"> </div><div class=\"line\"># appendfsync always</div><div class=\"line\">appendfsync everysec</div><div class=\"line\">no-appendfsync-on-rewrite no</div><div class=\"line\"> </div><div class=\"line\">auto-aof-rewrite-percentage 100</div><div class=\"line\">auto-aof-rewrite-min-size 64mb</div><div class=\"line\"> </div><div class=\"line\">################################ LUA SCRIPTING  ###############################</div><div class=\"line\">lua-time-limit 5000</div><div class=\"line\"> </div><div class=\"line\">################################ REDIS CLUSTER  ###############################集群</div><div class=\"line\"># cluster-enabled yes   # 启用或停用集群</div><div class=\"line\"> </div><div class=\"line\"># cluster-config-file nodes-6379.conf</div><div class=\"line\"># cluster-node-timeout 15000</div><div class=\"line\"># cluster-slave-validity-factor 10</div><div class=\"line\"># cluster-migration-barrier 1</div><div class=\"line\"> </div><div class=\"line\">################################## SLOW LOG ###################################慢日志</div><div class=\"line\"> </div><div class=\"line\">slowlog-log-slower-than 10000   # 慢查询记录时间10000ms</div><div class=\"line\">slowlog-max-len 128             # 记录数据条数 </div><div class=\"line\"> </div><div class=\"line\">############################# Event notification ##############################</div><div class=\"line\">notify-keyspace-events &quot;&quot;</div><div class=\"line\"> </div><div class=\"line\">############################### ADVANCED CONFIG ###############################</div><div class=\"line\">hash-max-ziplist-entries 512</div><div class=\"line\">hash-max-ziplist-value 64</div><div class=\"line\"> </div><div class=\"line\">list-max-ziplist-entries 512</div><div class=\"line\">list-max-ziplist-value 64</div><div class=\"line\"> </div><div class=\"line\">set-max-intset-entries 512</div><div class=\"line\"> </div><div class=\"line\">zset-max-ziplist-entries 128</div><div class=\"line\">zset-max-ziplist-value 64</div><div class=\"line\"> </div><div class=\"line\">hll-sparse-max-bytes 3000</div><div class=\"line\"> </div><div class=\"line\">activerehashing yes</div><div class=\"line\"> </div><div class=\"line\">client-output-buffer-limit normal 0 0 0</div><div class=\"line\">client-output-buffer-limit slave 256mb 64mb 60</div><div class=\"line\">client-output-buffer-limit pubsub 32mb 8mb 60</div><div class=\"line\"> </div><div class=\"line\">hz 10</div><div class=\"line\"> </div><div class=\"line\">aof-rewrite-incremental-fsync yes</div></pre></td></tr></table></figure>"},{"title":"Python Re模块","date":"2017-03-30T13:18:15.000Z","_content":"#### 说明\n正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；\n\n#### 匹配使用函数\n- re.match(pattern, string[, flags]):从第一个字符开始匹配,匹配成功就返回,不关心后面的内容;\n- re.search(pattern, string[, flags]):扫描整个string查找匹配,匹配成功就返回,不关心后面的内容;\n- re.split(pattern, string[, maxsplit]):按能够匹配的子串将string分割后返回列表;\n- re.findall(pattern, string[, flags]):搜索string，以列表形式返回全部能匹配的子串;\n- re.finditer(pattern, string[, flags]):搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器;\n- re.sub(pattern, repl, string[, count]):使用repl替换string中每一个匹配的子串后返回替换后的字符串;\n- re.subn(pattern, repl, string[, count]):返回 (sub(repl, string[, count]), 替换次数);\n\n#### 实例\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \n'''\n    Describe:\n    re.compile(string[,flag])   #返回pattern对象\n    pattern = re.compile(r'hello')\n    flag参数是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M\n    re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）\n    re.M(全拼：MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）\n    re.S(全拼：DOTALL): 点任意匹配模式，改变'.'的行为\n    re.L(全拼：LOCALE): 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定\n    re.U(全拼：UNICODE): 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性\n    re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。\n'''\n \nimport re\n \ndef match():\n    \"\"\"\n    re.match(pattern, string[, flags])\n    这个方法将会从string（我们要匹配的字符串）的开头开始，\n    尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，\n    立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。\n    两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止,不再对string向后匹配。\n    :return:\n    从第一个字符开始匹配,一旦匹配成功就返回,不关心后面的内容\n    ============match属性和方法==============\n    # 属性\n    1.string: 匹配时使用的文本。\n    2.re: 匹配时使用的Pattern对象。\n    3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n    4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n    5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。\n    6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。\n \n    # 方法\n    1.group([group1, …]):获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。\n    2.groups([default]):以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。\n    3.groupdict([default]):返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。\n    4.start([group]):返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。\n    5.end([group]):返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。\n    6.span([group]):返回(start(group), end(group))。\n    7.expand(template):将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g、\\g引用分组，但不能使用编号0。\\id与\\g是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符’0’，只能使用\\g0。\n    \"\"\"\n \n    pattern = re.compile(r'hello')  #把正则表达式编译成一个正则表达式对象,再使用\n    result1 = re.match(pattern, 'hello')\n    result2 = re.match(pattern, 'hello0 xxx')\n    result3 = re.match(pattern, 'heloo xxx')\n    result4 = re.match(pattern, 'hello xxx')\n \n    print result1,result2,result3,result4   #re对象，<_sre.SRE_Match object at 0x1053d55e0> <_sre.SRE_Match object at 0x1053ba098> None <_sre.SRE_Match object at 0x1053ba100>\n    if result1:\t\t\t\t\t#hello\n        print result1.group()\n    else:\n        print 'result1 faild'\n \n    if result2:\t\t\t\t\t#hello\n        print result2.group()\n    else:\n        print 'result2 faild'\n \n    if result3:\t\t\t\t\t#result3 faild\n        print result3.group()\n    else:\n        print 'result3 faild'\n \n    if result4:\t\t\t\t\t#hello\n        print result4.group()\n    else:\n        print 'result4 faild'\n \n    print '======================================='\n    m = re.match(r'(\\w+) (\\w+)(?P<sign>.*)', 'hello world!!!')\n    print 'm.string:', m.string                             #m.string: hello world!!!\n    print 'm.re:', m.re                                     #m.re: <_sre.SRE_Pattern object at 0x103d62690>\n    print 'm.pos', m.pos                                    #m.pos 0\n    print 'm.endpos', m.endpos                              #m.endpos 14\n    print 'm.lastindex:', m.lastindex                       #m.lastindex: 3\n    print 'm.lastgroup:', m.lastgroup                       #m.lastgroup: sign\n    print 'm.group():', m.group()                           #m.group(): hello world!!!\n    print 'm.group(1,2):', m.group(1,2)                     #m.group(1,2): ('hello', 'world')\n    print 'm.groups():', m.groups()                         #m.groups(): ('hello', 'world', '!!!')\n    print 'm.groupdict()', m.groupdict()                    #m.groupdict() {'sign': '!!!'}\n    print 'm.start(2):', m.start(2)                         #m.start(2): 6\n    print 'm.end(2):', m.end(2)                             #m.end(2): 11\n    print 'm.span(2):', m.span(2)                           #m.span(2): (6, 11)\n    print r\"m.expand(r'\\g \\g\\g'):\", m.expand(r'\\2 \\1\\3')    #m.expand(r'\\g \\g\\g'): world hello!!!\n \ndef search():\n    \"\"\"\n    re.search(pattern, string[, flags])\n    search()会扫描整个string查找匹配;\n    match（）只有在0位置匹配成功的话才有返回，\n    如果不是开始位置匹配成功的话，match()就返回None。\n    search方法的返回对象同样match()返回对象的方法和属性\n    :return:\n    \"\"\"\n    pattern = re.compile(r'world')\n    match = re.search(pattern, 'hello world!!!! world')\n    if match:\n        # 使用Match获得分组信息\n        print match.group()     #world\n \ndef split():\n    \"\"\"\n    re.split(pattern, string[, maxsplit])\n    按照能够匹配的子串将string分割后返回列表。\n    maxsplit用于指定最大分割次数，不指定将全部分割\n    :return:\n    \"\"\"\n    pattern = re.compile(r'\\d+')\n    print re.split(pattern, 'xxxx1wsd2dsafds4dafd8',maxsplit=10)    #['xxxx', 'wsd', 'dsafds', 'dafd', '']\n \ndef findall():\n    \"\"\"\n    re.findall(pattern, string[, flags])\n    搜索string，以列表形式返回全部能匹配的子串\n    :return:\n    \"\"\"\n    pattern = re.compile(r'\\d+')\n    print re.findall(pattern, 'xxxx1wsd2dsafds4dafd8',)     #['1', '2', '4', '8']\n \ndef finditer():\n    \"\"\"\n    re.finditer(pattern, string[, flags])\n    搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器\n    :return:\n    \"\"\"\n    pattern = re.compile(r'\\d+')\n    for m in re.finditer(pattern, 'one1two2three3four4'):\n        print m.group(),    #1 2 3 4\n \ndef sub():\n    \"\"\"\n    re.sub(pattern, repl, string[, count])\n    使用repl替换string中每一个匹配的子串后返回替换后的字符串\n    :return:\n    \"\"\"\n    pattern = re.compile(r'(\\w+)-(\\w+)')\n    s = 'I-can, hello world!'\n    print re.sub(pattern,r'\\2 \\1', s)   #can I, hello world!\n \ndef subn():\n    \"\"\"\n    re.subn(pattern, repl, string[, count])\n    返回 (sub(repl, string[, count]), 替换次数)\n    :return:\n    \"\"\"\n    pattern = re.compile(r'(\\w+)-(\\w+)')\n    s = 'I-can, hello-world!'\n    print re.subn(pattern, r'\\2 \\1', s)     #('can I, world hello!', 2)\n \n \nmatch()\nsearch()\nsplit()\nfindall()\nfinditer()\nsub()\nsubn()\n\n```\n","source":"_posts/re.md","raw":"---\ntitle: Python Re模块\ndate: 2017-03-30 21:18:15\ntags:\n  - Re\ncategories:\n  - python\n---\n#### 说明\n正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；\n\n#### 匹配使用函数\n- re.match(pattern, string[, flags]):从第一个字符开始匹配,匹配成功就返回,不关心后面的内容;\n- re.search(pattern, string[, flags]):扫描整个string查找匹配,匹配成功就返回,不关心后面的内容;\n- re.split(pattern, string[, maxsplit]):按能够匹配的子串将string分割后返回列表;\n- re.findall(pattern, string[, flags]):搜索string，以列表形式返回全部能匹配的子串;\n- re.finditer(pattern, string[, flags]):搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器;\n- re.sub(pattern, repl, string[, count]):使用repl替换string中每一个匹配的子串后返回替换后的字符串;\n- re.subn(pattern, repl, string[, count]):返回 (sub(repl, string[, count]), 替换次数);\n\n#### 实例\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \n'''\n    Describe:\n    re.compile(string[,flag])   #返回pattern对象\n    pattern = re.compile(r'hello')\n    flag参数是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M\n    re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）\n    re.M(全拼：MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）\n    re.S(全拼：DOTALL): 点任意匹配模式，改变'.'的行为\n    re.L(全拼：LOCALE): 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定\n    re.U(全拼：UNICODE): 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性\n    re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。\n'''\n \nimport re\n \ndef match():\n    \"\"\"\n    re.match(pattern, string[, flags])\n    这个方法将会从string（我们要匹配的字符串）的开头开始，\n    尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，\n    立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。\n    两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止,不再对string向后匹配。\n    :return:\n    从第一个字符开始匹配,一旦匹配成功就返回,不关心后面的内容\n    ============match属性和方法==============\n    # 属性\n    1.string: 匹配时使用的文本。\n    2.re: 匹配时使用的Pattern对象。\n    3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n    4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n    5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。\n    6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。\n \n    # 方法\n    1.group([group1, …]):获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。\n    2.groups([default]):以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。\n    3.groupdict([default]):返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。\n    4.start([group]):返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。\n    5.end([group]):返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。\n    6.span([group]):返回(start(group), end(group))。\n    7.expand(template):将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g、\\g引用分组，但不能使用编号0。\\id与\\g是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符’0’，只能使用\\g0。\n    \"\"\"\n \n    pattern = re.compile(r'hello')  #把正则表达式编译成一个正则表达式对象,再使用\n    result1 = re.match(pattern, 'hello')\n    result2 = re.match(pattern, 'hello0 xxx')\n    result3 = re.match(pattern, 'heloo xxx')\n    result4 = re.match(pattern, 'hello xxx')\n \n    print result1,result2,result3,result4   #re对象，<_sre.SRE_Match object at 0x1053d55e0> <_sre.SRE_Match object at 0x1053ba098> None <_sre.SRE_Match object at 0x1053ba100>\n    if result1:\t\t\t\t\t#hello\n        print result1.group()\n    else:\n        print 'result1 faild'\n \n    if result2:\t\t\t\t\t#hello\n        print result2.group()\n    else:\n        print 'result2 faild'\n \n    if result3:\t\t\t\t\t#result3 faild\n        print result3.group()\n    else:\n        print 'result3 faild'\n \n    if result4:\t\t\t\t\t#hello\n        print result4.group()\n    else:\n        print 'result4 faild'\n \n    print '======================================='\n    m = re.match(r'(\\w+) (\\w+)(?P<sign>.*)', 'hello world!!!')\n    print 'm.string:', m.string                             #m.string: hello world!!!\n    print 'm.re:', m.re                                     #m.re: <_sre.SRE_Pattern object at 0x103d62690>\n    print 'm.pos', m.pos                                    #m.pos 0\n    print 'm.endpos', m.endpos                              #m.endpos 14\n    print 'm.lastindex:', m.lastindex                       #m.lastindex: 3\n    print 'm.lastgroup:', m.lastgroup                       #m.lastgroup: sign\n    print 'm.group():', m.group()                           #m.group(): hello world!!!\n    print 'm.group(1,2):', m.group(1,2)                     #m.group(1,2): ('hello', 'world')\n    print 'm.groups():', m.groups()                         #m.groups(): ('hello', 'world', '!!!')\n    print 'm.groupdict()', m.groupdict()                    #m.groupdict() {'sign': '!!!'}\n    print 'm.start(2):', m.start(2)                         #m.start(2): 6\n    print 'm.end(2):', m.end(2)                             #m.end(2): 11\n    print 'm.span(2):', m.span(2)                           #m.span(2): (6, 11)\n    print r\"m.expand(r'\\g \\g\\g'):\", m.expand(r'\\2 \\1\\3')    #m.expand(r'\\g \\g\\g'): world hello!!!\n \ndef search():\n    \"\"\"\n    re.search(pattern, string[, flags])\n    search()会扫描整个string查找匹配;\n    match（）只有在0位置匹配成功的话才有返回，\n    如果不是开始位置匹配成功的话，match()就返回None。\n    search方法的返回对象同样match()返回对象的方法和属性\n    :return:\n    \"\"\"\n    pattern = re.compile(r'world')\n    match = re.search(pattern, 'hello world!!!! world')\n    if match:\n        # 使用Match获得分组信息\n        print match.group()     #world\n \ndef split():\n    \"\"\"\n    re.split(pattern, string[, maxsplit])\n    按照能够匹配的子串将string分割后返回列表。\n    maxsplit用于指定最大分割次数，不指定将全部分割\n    :return:\n    \"\"\"\n    pattern = re.compile(r'\\d+')\n    print re.split(pattern, 'xxxx1wsd2dsafds4dafd8',maxsplit=10)    #['xxxx', 'wsd', 'dsafds', 'dafd', '']\n \ndef findall():\n    \"\"\"\n    re.findall(pattern, string[, flags])\n    搜索string，以列表形式返回全部能匹配的子串\n    :return:\n    \"\"\"\n    pattern = re.compile(r'\\d+')\n    print re.findall(pattern, 'xxxx1wsd2dsafds4dafd8',)     #['1', '2', '4', '8']\n \ndef finditer():\n    \"\"\"\n    re.finditer(pattern, string[, flags])\n    搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器\n    :return:\n    \"\"\"\n    pattern = re.compile(r'\\d+')\n    for m in re.finditer(pattern, 'one1two2three3four4'):\n        print m.group(),    #1 2 3 4\n \ndef sub():\n    \"\"\"\n    re.sub(pattern, repl, string[, count])\n    使用repl替换string中每一个匹配的子串后返回替换后的字符串\n    :return:\n    \"\"\"\n    pattern = re.compile(r'(\\w+)-(\\w+)')\n    s = 'I-can, hello world!'\n    print re.sub(pattern,r'\\2 \\1', s)   #can I, hello world!\n \ndef subn():\n    \"\"\"\n    re.subn(pattern, repl, string[, count])\n    返回 (sub(repl, string[, count]), 替换次数)\n    :return:\n    \"\"\"\n    pattern = re.compile(r'(\\w+)-(\\w+)')\n    s = 'I-can, hello-world!'\n    print re.subn(pattern, r'\\2 \\1', s)     #('can I, world hello!', 2)\n \n \nmatch()\nsearch()\nsplit()\nfindall()\nfinditer()\nsub()\nsubn()\n\n```\n","slug":"re","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xx004wct8uz4bd9yhs","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；</p>\n<h4 id=\"匹配使用函数\"><a href=\"#匹配使用函数\" class=\"headerlink\" title=\"匹配使用函数\"></a>匹配使用函数</h4><ul>\n<li>re.match(pattern, string[, flags]):从第一个字符开始匹配,匹配成功就返回,不关心后面的内容;</li>\n<li>re.search(pattern, string[, flags]):扫描整个string查找匹配,匹配成功就返回,不关心后面的内容;</li>\n<li>re.split(pattern, string[, maxsplit]):按能够匹配的子串将string分割后返回列表;</li>\n<li>re.findall(pattern, string[, flags]):搜索string，以列表形式返回全部能匹配的子串;</li>\n<li>re.finditer(pattern, string[, flags]):搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器;</li>\n<li>re.sub(pattern, repl, string[, count]):使用repl替换string中每一个匹配的子串后返回替换后的字符串;</li>\n<li>re.subn(pattern, repl, string[, count]):返回 (sub(repl, string[, count]), 替换次数);</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">    Describe:</div><div class=\"line\">    re.compile(string[,flag])   #返回pattern对象</div><div class=\"line\">    pattern = re.compile(r'hello')</div><div class=\"line\">    flag参数是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M</div><div class=\"line\">    re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）</div><div class=\"line\">    re.M(全拼：MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）</div><div class=\"line\">    re.S(全拼：DOTALL): 点任意匹配模式，改变'.'的行为</div><div class=\"line\">    re.L(全拼：LOCALE): 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定</div><div class=\"line\">    re.U(全拼：UNICODE): 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性</div><div class=\"line\">    re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</div><div class=\"line\">'''</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    re.match(pattern, string[, flags])</div><div class=\"line\">    这个方法将会从string（我们要匹配的字符串）的开头开始，</div><div class=\"line\">    尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，</div><div class=\"line\">    立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。</div><div class=\"line\">    两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止,不再对string向后匹配。</div><div class=\"line\">    :return:</div><div class=\"line\">    从第一个字符开始匹配,一旦匹配成功就返回,不关心后面的内容</div><div class=\"line\">    ============match属性和方法==============</div><div class=\"line\">    # 属性</div><div class=\"line\">    1.string: 匹配时使用的文本。</div><div class=\"line\">    2.re: 匹配时使用的Pattern对象。</div><div class=\"line\">    3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class=\"line\">    4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class=\"line\">    5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</div><div class=\"line\">    6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</div><div class=\"line\"> </div><div class=\"line\">    # 方法</div><div class=\"line\">    1.group([group1, …]):获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</div><div class=\"line\">    2.groups([default]):以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</div><div class=\"line\">    3.groupdict([default]):返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</div><div class=\"line\">    4.start([group]):返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</div><div class=\"line\">    5.end([group]):返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</div><div class=\"line\">    6.span([group]):返回(start(group), end(group))。</div><div class=\"line\">    7.expand(template):将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g、\\g引用分组，但不能使用编号0。\\id与\\g是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符’0’，只能使用\\g0。</div><div class=\"line\">    \"\"\"</div><div class=\"line\"> </div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'hello'</span>)  <span class=\"comment\">#把正则表达式编译成一个正则表达式对象,再使用</span></div><div class=\"line\">    result1 = re.match(pattern, <span class=\"string\">'hello'</span>)</div><div class=\"line\">    result2 = re.match(pattern, <span class=\"string\">'hello0 xxx'</span>)</div><div class=\"line\">    result3 = re.match(pattern, <span class=\"string\">'heloo xxx'</span>)</div><div class=\"line\">    result4 = re.match(pattern, <span class=\"string\">'hello xxx'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">print</span> result1,result2,result3,result4   <span class=\"comment\">#re对象，&lt;_sre.SRE_Match object at 0x1053d55e0&gt; &lt;_sre.SRE_Match object at 0x1053ba098&gt; None &lt;_sre.SRE_Match object at 0x1053ba100&gt;</span></div><div class=\"line\">    <span class=\"keyword\">if</span> result1:\t\t\t\t\t<span class=\"comment\">#hello</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result1.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result1 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> result2:\t\t\t\t\t<span class=\"comment\">#hello</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result2.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result2 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> result3:\t\t\t\t\t<span class=\"comment\">#result3 faild</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result3.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result3 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> result4:\t\t\t\t\t<span class=\"comment\">#hello</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result4.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result4 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'======================================='</span></div><div class=\"line\">    m = re.match(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, <span class=\"string\">'hello world!!!'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.string:'</span>, m.string                             <span class=\"comment\">#m.string: hello world!!!</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.re:'</span>, m.re                                     <span class=\"comment\">#m.re: &lt;_sre.SRE_Pattern object at 0x103d62690&gt;</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.pos'</span>, m.pos                                    <span class=\"comment\">#m.pos 0</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.endpos'</span>, m.endpos                              <span class=\"comment\">#m.endpos 14</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.lastindex:'</span>, m.lastindex                       <span class=\"comment\">#m.lastindex: 3</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.lastgroup:'</span>, m.lastgroup                       <span class=\"comment\">#m.lastgroup: sign</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.group():'</span>, m.group()                           <span class=\"comment\">#m.group(): hello world!!!</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.group(1,2):'</span>, m.group(<span class=\"number\">1</span>,<span class=\"number\">2</span>)                     <span class=\"comment\">#m.group(1,2): ('hello', 'world')</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.groups():'</span>, m.groups()                         <span class=\"comment\">#m.groups(): ('hello', 'world', '!!!')</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.groupdict()'</span>, m.groupdict()                    <span class=\"comment\">#m.groupdict() &#123;'sign': '!!!'&#125;</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.start(2):'</span>, m.start(<span class=\"number\">2</span>)                         <span class=\"comment\">#m.start(2): 6</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.end(2):'</span>, m.end(<span class=\"number\">2</span>)                             <span class=\"comment\">#m.end(2): 11</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.span(2):'</span>, m.span(<span class=\"number\">2</span>)                           <span class=\"comment\">#m.span(2): (6, 11)</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">r\"m.expand(r'\\g \\g\\g'):\"</span>, m.expand(<span class=\"string\">r'\\2 \\1\\3'</span>)    <span class=\"comment\">#m.expand(r'\\g \\g\\g'): world hello!!!</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    re.search(pattern, string[, flags])</div><div class=\"line\">    search()会扫描整个string查找匹配;</div><div class=\"line\">    match（）只有在0位置匹配成功的话才有返回，</div><div class=\"line\">    如果不是开始位置匹配成功的话，match()就返回None。</div><div class=\"line\">    search方法的返回对象同样match()返回对象的方法和属性</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'world'</span>)</div><div class=\"line\">    match = re.search(pattern, <span class=\"string\">'hello world!!!! world'</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> match:</div><div class=\"line\">        <span class=\"comment\"># 使用Match获得分组信息</span></div><div class=\"line\">        <span class=\"keyword\">print</span> match.group()     <span class=\"comment\">#world</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">split</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    re.split(pattern, string[, maxsplit])</div><div class=\"line\">    按照能够匹配的子串将string分割后返回列表。</div><div class=\"line\">    maxsplit用于指定最大分割次数，不指定将全部分割</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> re.split(pattern, <span class=\"string\">'xxxx1wsd2dsafds4dafd8'</span>,maxsplit=<span class=\"number\">10</span>)    <span class=\"comment\">#['xxxx', 'wsd', 'dsafds', 'dafd', '']</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findall</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    re.findall(pattern, string[, flags])</div><div class=\"line\">    搜索string，以列表形式返回全部能匹配的子串</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> re.findall(pattern, <span class=\"string\">'xxxx1wsd2dsafds4dafd8'</span>,)     <span class=\"comment\">#['1', '2', '4', '8']</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finditer</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    re.finditer(pattern, string[, flags])</div><div class=\"line\">    搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> re.finditer(pattern, <span class=\"string\">'one1two2three3four4'</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> m.group(),    <span class=\"comment\">#1 2 3 4</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    re.sub(pattern, repl, string[, count])</div><div class=\"line\">    使用repl替换string中每一个匹配的子串后返回替换后的字符串</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'(\\w+)-(\\w+)'</span>)</div><div class=\"line\">    s = <span class=\"string\">'I-can, hello world!'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> re.sub(pattern,<span class=\"string\">r'\\2 \\1'</span>, s)   <span class=\"comment\">#can I, hello world!</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    re.subn(pattern, repl, string[, count])</div><div class=\"line\">    返回 (sub(repl, string[, count]), 替换次数)</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'(\\w+)-(\\w+)'</span>)</div><div class=\"line\">    s = <span class=\"string\">'I-can, hello-world!'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> re.subn(pattern, <span class=\"string\">r'\\2 \\1'</span>, s)     <span class=\"comment\">#('can I, world hello!', 2)</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">match()</div><div class=\"line\">search()</div><div class=\"line\">split()</div><div class=\"line\">findall()</div><div class=\"line\">finditer()</div><div class=\"line\">sub()</div><div class=\"line\">subn()</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>正则表达式用于字符的筛选和匹配，相关语法规则请参考其他文档，这里主要学习相关函数功能；</p>\n<h4 id=\"匹配使用函数\"><a href=\"#匹配使用函数\" class=\"headerlink\" title=\"匹配使用函数\"></a>匹配使用函数</h4><ul>\n<li>re.match(pattern, string[, flags]):从第一个字符开始匹配,匹配成功就返回,不关心后面的内容;</li>\n<li>re.search(pattern, string[, flags]):扫描整个string查找匹配,匹配成功就返回,不关心后面的内容;</li>\n<li>re.split(pattern, string[, maxsplit]):按能够匹配的子串将string分割后返回列表;</li>\n<li>re.findall(pattern, string[, flags]):搜索string，以列表形式返回全部能匹配的子串;</li>\n<li>re.finditer(pattern, string[, flags]):搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器;</li>\n<li>re.sub(pattern, repl, string[, count]):使用repl替换string中每一个匹配的子串后返回替换后的字符串;</li>\n<li>re.subn(pattern, repl, string[, count]):返回 (sub(repl, string[, count]), 替换次数);</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">    Describe:</div><div class=\"line\">    re.compile(string[,flag])   #返回pattern对象</div><div class=\"line\">    pattern = re.compile(r'hello')</div><div class=\"line\">    flag参数是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M</div><div class=\"line\">    re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）</div><div class=\"line\">    re.M(全拼：MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）</div><div class=\"line\">    re.S(全拼：DOTALL): 点任意匹配模式，改变'.'的行为</div><div class=\"line\">    re.L(全拼：LOCALE): 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定</div><div class=\"line\">    re.U(全拼：UNICODE): 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性</div><div class=\"line\">    re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</div><div class=\"line\">'''</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    re.match(pattern, string[, flags])</div><div class=\"line\">    这个方法将会从string（我们要匹配的字符串）的开头开始，</div><div class=\"line\">    尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，</div><div class=\"line\">    立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。</div><div class=\"line\">    两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止,不再对string向后匹配。</div><div class=\"line\">    :return:</div><div class=\"line\">    从第一个字符开始匹配,一旦匹配成功就返回,不关心后面的内容</div><div class=\"line\">    ============match属性和方法==============</div><div class=\"line\">    # 属性</div><div class=\"line\">    1.string: 匹配时使用的文本。</div><div class=\"line\">    2.re: 匹配时使用的Pattern对象。</div><div class=\"line\">    3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class=\"line\">    4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</div><div class=\"line\">    5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</div><div class=\"line\">    6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</div><div class=\"line\"> </div><div class=\"line\">    # 方法</div><div class=\"line\">    1.group([group1, …]):获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</div><div class=\"line\">    2.groups([default]):以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</div><div class=\"line\">    3.groupdict([default]):返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</div><div class=\"line\">    4.start([group]):返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</div><div class=\"line\">    5.end([group]):返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</div><div class=\"line\">    6.span([group]):返回(start(group), end(group))。</div><div class=\"line\">    7.expand(template):将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g、\\g引用分组，但不能使用编号0。\\id与\\g是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符’0’，只能使用\\g0。</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'hello'</span>)  <span class=\"comment\">#把正则表达式编译成一个正则表达式对象,再使用</span></div><div class=\"line\">    result1 = re.match(pattern, <span class=\"string\">'hello'</span>)</div><div class=\"line\">    result2 = re.match(pattern, <span class=\"string\">'hello0 xxx'</span>)</div><div class=\"line\">    result3 = re.match(pattern, <span class=\"string\">'heloo xxx'</span>)</div><div class=\"line\">    result4 = re.match(pattern, <span class=\"string\">'hello xxx'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">print</span> result1,result2,result3,result4   <span class=\"comment\">#re对象，&lt;_sre.SRE_Match object at 0x1053d55e0&gt; &lt;_sre.SRE_Match object at 0x1053ba098&gt; None &lt;_sre.SRE_Match object at 0x1053ba100&gt;</span></div><div class=\"line\">    <span class=\"keyword\">if</span> result1:\t\t\t\t\t<span class=\"comment\">#hello</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result1.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result1 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> result2:\t\t\t\t\t<span class=\"comment\">#hello</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result2.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result2 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> result3:\t\t\t\t\t<span class=\"comment\">#result3 faild</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result3.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result3 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> result4:\t\t\t\t\t<span class=\"comment\">#hello</span></div><div class=\"line\">        <span class=\"keyword\">print</span> result4.group()</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result4 faild'</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'======================================='</span></div><div class=\"line\">    m = re.match(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, <span class=\"string\">'hello world!!!'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.string:'</span>, m.string                             <span class=\"comment\">#m.string: hello world!!!</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.re:'</span>, m.re                                     <span class=\"comment\">#m.re: &lt;_sre.SRE_Pattern object at 0x103d62690&gt;</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.pos'</span>, m.pos                                    <span class=\"comment\">#m.pos 0</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.endpos'</span>, m.endpos                              <span class=\"comment\">#m.endpos 14</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.lastindex:'</span>, m.lastindex                       <span class=\"comment\">#m.lastindex: 3</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.lastgroup:'</span>, m.lastgroup                       <span class=\"comment\">#m.lastgroup: sign</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.group():'</span>, m.group()                           <span class=\"comment\">#m.group(): hello world!!!</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.group(1,2):'</span>, m.group(<span class=\"number\">1</span>,<span class=\"number\">2</span>)                     <span class=\"comment\">#m.group(1,2): ('hello', 'world')</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.groups():'</span>, m.groups()                         <span class=\"comment\">#m.groups(): ('hello', 'world', '!!!')</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.groupdict()'</span>, m.groupdict()                    <span class=\"comment\">#m.groupdict() &#123;'sign': '!!!'&#125;</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.start(2):'</span>, m.start(<span class=\"number\">2</span>)                         <span class=\"comment\">#m.start(2): 6</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.end(2):'</span>, m.end(<span class=\"number\">2</span>)                             <span class=\"comment\">#m.end(2): 11</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'m.span(2):'</span>, m.span(<span class=\"number\">2</span>)                           <span class=\"comment\">#m.span(2): (6, 11)</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">r\"m.expand(r'\\g \\g\\g'):\"</span>, m.expand(<span class=\"string\">r'\\2 \\1\\3'</span>)    <span class=\"comment\">#m.expand(r'\\g \\g\\g'): world hello!!!</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    re.search(pattern, string[, flags])</div><div class=\"line\">    search()会扫描整个string查找匹配;</div><div class=\"line\">    match（）只有在0位置匹配成功的话才有返回，</div><div class=\"line\">    如果不是开始位置匹配成功的话，match()就返回None。</div><div class=\"line\">    search方法的返回对象同样match()返回对象的方法和属性</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'world'</span>)</div><div class=\"line\">    match = re.search(pattern, <span class=\"string\">'hello world!!!! world'</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> match:</div><div class=\"line\">        <span class=\"comment\"># 使用Match获得分组信息</span></div><div class=\"line\">        <span class=\"keyword\">print</span> match.group()     <span class=\"comment\">#world</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">split</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    re.split(pattern, string[, maxsplit])</div><div class=\"line\">    按照能够匹配的子串将string分割后返回列表。</div><div class=\"line\">    maxsplit用于指定最大分割次数，不指定将全部分割</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> re.split(pattern, <span class=\"string\">'xxxx1wsd2dsafds4dafd8'</span>,maxsplit=<span class=\"number\">10</span>)    <span class=\"comment\">#['xxxx', 'wsd', 'dsafds', 'dafd', '']</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findall</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    re.findall(pattern, string[, flags])</div><div class=\"line\">    搜索string，以列表形式返回全部能匹配的子串</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> re.findall(pattern, <span class=\"string\">'xxxx1wsd2dsafds4dafd8'</span>,)     <span class=\"comment\">#['1', '2', '4', '8']</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finditer</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    re.finditer(pattern, string[, flags])</div><div class=\"line\">    搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> re.finditer(pattern, <span class=\"string\">'one1two2three3four4'</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> m.group(),    <span class=\"comment\">#1 2 3 4</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    re.sub(pattern, repl, string[, count])</div><div class=\"line\">    使用repl替换string中每一个匹配的子串后返回替换后的字符串</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'(\\w+)-(\\w+)'</span>)</div><div class=\"line\">    s = <span class=\"string\">'I-can, hello world!'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> re.sub(pattern,<span class=\"string\">r'\\2 \\1'</span>, s)   <span class=\"comment\">#can I, hello world!</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subn</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    re.subn(pattern, repl, string[, count])</div><div class=\"line\">    返回 (sub(repl, string[, count]), 替换次数)</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'(\\w+)-(\\w+)'</span>)</div><div class=\"line\">    s = <span class=\"string\">'I-can, hello-world!'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> re.subn(pattern, <span class=\"string\">r'\\2 \\1'</span>, s)     <span class=\"comment\">#('can I, world hello!', 2)</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">match()</div><div class=\"line\">search()</div><div class=\"line\">split()</div><div class=\"line\">findall()</div><div class=\"line\">finditer()</div><div class=\"line\">sub()</div><div class=\"line\">subn()</div></pre></td></tr></table></figure>\n"},{"title":"RabbitMQ","date":"2018-08-25T07:22:15.000Z","_content":"最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：\n\n#### RabbitMQ简介\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。\nAMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\nRabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持Ajax。\n\n#### Queue\nRabbitMQ中的消息都只能存储在Queue中，生产者（下图中的P）生产消息并最终投递到Queue中，消费者（下图中的C）可以从Queue中获取消息并消费。\n![](https://ttxsgoto.github.io/img/rabbitmq/01.png)\n多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。\n![](https://ttxsgoto.github.io/img/rabbitmq/02.png)\n#### Message acknowledgment(确认机制)\n在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。\n这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑,另外pub message是没有ack的。\nrabbitmq_producer_ack.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建\nchannel.queue_declare(queue=\"ttxsgoto\")\n \n# 设置指定队列名称，body往队列中发送消息\nfor i in range(20):\n    channel.basic_publish(exchange='',\n                          routing_key=\"ttxsgoto\",\n                          body=\"Hello World!--{}\".format(i))\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \nconnection.close()\n```\nrabbitmq_consumer_ack.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nimport time\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建\nchannel.queue_declare(queue=\"ttxsgoto\")\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    print(\"ok\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=\"ttxsgoto\",\n                      no_ack=False)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n#### Message durability(持久化)\n如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。\nrabbitmq_producer_ack_durable.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来\n# 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化\nchannel.queue_declare(queue=\"ttxsgoto01\", durable=True)\n \n# 设置指定队列名称，body往队列中发送消息\nfor i in range(20):\n    channel.basic_publish(exchange='',\n                          routing_key=\"ttxsgoto01\",\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_ack_durable.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来\n \nimport time\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,队列持久化\nchannel.queue_declare(queue=\"ttxsgoto01\", durable=True)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    print(\"ok\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=\"ttxsgoto01\",\n                      no_ack=False)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n说明：消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来；此时可以通过rabbitmq web管理页面看到队列ttxsgoto01的Parameters有一个D属性，表示durable=True\n\n#### Prefetch count(每发送数)\n如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个消息的处理时间不同，就有可能会导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息\nrabbitmq_producer_ack_durable_qos.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来\n# 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化\nchannel.queue_declare(queue=\"ttxsgoto02\", durable=True)\n \n# 设置指定队列名称，body往队列中发送消息\nfor i in range(20):\n    channel.basic_publish(exchange='',\n                          routing_key=\"ttxsgoto02\",\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_ack_durable_qos.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nimport time\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,队列持久化\nchannel.queue_declare(queue=\"ttxsgoto02\", durable=True)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    print(\"ok\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 表示谁来获取，不再按照奇偶数排列\nchannel.basic_qos(prefetch_count=1)\n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=\"ttxsgoto02\",\n                      no_ack=False)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n#### Exchange(交换器)\n在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际的情况是，生产者将消息发送到Exchange（交换器，下图中的X），由Exchange将消息路由到一个或多个Queue中（或者丢弃）。\n![](https://ttxsgoto.github.io/img/rabbitmq/03.png)\n#### routing key\n生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。（routing key + exchange type + binding key）\n在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。\nRabbitMQ为routing key设定的长度限制为255 bytes\n#### Binding(绑定到Queue)\nRabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由到指定的Queue了。\n![](https://ttxsgoto.github.io/img/rabbitmq/04.png)\n#### Binding key\n在绑定（Binding）Exchange与Queue的同时，一般会指定一个binding key；消费者将消息发送给Exchange时，一般会指定一个routing key；当binding key与routing key相匹配时，消息将会被路由到对应的Queue中。\n在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key。\nbinding key 并不是在所有情况下都生效，它依赖于Exchange Type，比如fanout类型的Exchange就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。\n\n#### Exchange Types\nRabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种,一般headers使用较少，不做演示说明，下面分别进行介绍\n##### fanout\nfanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。\n![](https://ttxsgoto.github.io/img/rabbitmq/05.png)\n上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。\nrabbitmq_producer_fanout.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='127.0.0.1', port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 指定exchange和对应的类型\nchannel.exchange_declare(exchange=\"test_fanout\",\n                         exchange_type='fanout')\n \n# 设置exchange，没有指定routing_key，队列随机\nfor i in range(20):\n    channel.basic_publish(exchange='test_fanout',\n                          routing_key=\"abc\",\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_fanout.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上\n \nimport pika\nimport time\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \nchannel.exchange_declare(exchange=\"test_fanout\",  # 创建一个exchange\n                         exchange_type=\"fanout\")  # 任何发送到fanout exchange的消息都会被转发到和exchange绑定的queue上\n \n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\n \n# 绑定，exchange绑定后端队列\nchannel.queue_bind(exchange=\"test_fanout\",\n                   queue=queue_name)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    # ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n##### direct\ndirect类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。\n![](https://ttxsgoto.github.io/img/rabbitmq/06.png)\n以上图的配置为例，我们以routingKey=”error”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；如果我们以routingKey=”info”或routingKey=”warning”来发送消息，则消息只会路由到Queue2。如果我们以其他routingKey发送消息，则消息不会路由到这两个Queue中。\nrabbitmq_producer_direct.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)\n# 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列\n# 结论：当我们将发布者的key设置成Error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 指定exchange和对应的类型\nchannel.exchange_declare(exchange=\"test_direct\",\n                         exchange_type='direct')\ntypeinfo = 'info'\n \n# 设置exchange，没有指定routing_key，队列指定关键字\nfor i in range(20):\n    channel.basic_publish(exchange='test_direct',\n                          routing_key=typeinfo,\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_direct1.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)\n# 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列\n \nimport pika\nimport time\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\nchannel.exchange_declare(exchange=\"test_direct\",  # 创建一个exchange\n                         exchange_type=\"direct\")\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\n \ntypeinfo = ['error', 'info', ]\n \n# 绑定，exchange绑定后端队列\nfor type1 in typeinfo:\n    channel.queue_bind(exchange=\"test_direct\", queue=queue_name, routing_key=type1)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s --- %s\" % (method.routing_key, body))\n    time.sleep(1)\n    # ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\nrabbitmq_consumer_direct2.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)\n# 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列\n \nimport pika\nimport time\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\nchannel.exchange_declare(exchange=\"test_direct\",  # 创建一个exchange\n                         exchange_type=\"direct\")\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\n \ntypeinfo = ['error', ]\n \n# 绑定，exchange绑定后端队列\nfor type1 in typeinfo:\n    channel.queue_bind(exchange=\"test_direct\", queue=queue_name, routing_key=type1)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s --- %s\" % (method.routing_key, body))\n    time.sleep(1)\n    # ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n结论：当我们将发布者的key设置成error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息。\n##### topic\ndirect类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：\n- routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”\n\n- binding key与routing key一样也是句点号“. ”分隔的字符串\n\n- binding key中可以存在两种特殊字符“*”与“#”，用于做模糊匹配，其中“*”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）\n\n![](https://ttxsgoto.github.io/img/rabbitmq/07.png)\n\n以上图中的配置为例，routingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，routingKey=”lazy.orange.fox”的消息会路由到Q1，routingKey=”lazy.brown.fox”的消息会路由到Q2，routingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，因为它们没有匹配任何bindingKey。\nrabbitmq_producer_topic.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)\n# 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列\n# # ：表示可以匹配0个或多个单词\n# * ：表示只能匹配一个单词\nimport sys\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 指定exchange和对应的类型\nchannel.exchange_declare(exchange=\"test_topic\",\n                         exchange_type='topic')\n \nrouting_key = sys.argv[1] if len(sys.argv) > 1 else 'anonymous'\nmessage = ''.join(sys.argv[2:]) or 'Hello Chengdu!'\n \n# 设置exchange，没有指定routing_key，队列指定关键字\nchannel.basic_publish(exchange='test_topic', routing_key=routing_key, body=message)\n \nprint(\" Sent routing_key:%s ——> body:%s \" % (routing_key, message))\n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_topic.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)\n# 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列\n \nimport sys\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 创建一个exchange,并指定类型\nchannel.exchange_declare(exchange=\"test_topic\",\n                         exchange_type=\"topic\")\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\n \nqueue_name = result.method.queue\nbinding_keys = sys.argv[1:]\n \nif not binding_keys:\n    sys.stderr.write(\"Usage: %s [binding_key]...\\n\" % sys.argv[0])\n    sys.exit(0)\n \nfor binding_key in binding_keys:\n    channel.queue_bind(exchange=\"test_topic\", queue=queue_name, routing_key=binding_key)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s -----%s \" % (method.routing_key, body))\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n#### 常用命令\n```\n添加用户：\nrabbitmqctl add_user abc abc\n \n添加权限：\nrabbitmqctl set_permissions -p \"/\" abc \".*\" \".*\" \".*\"\n \n设置用户标签：\nrabbitmqctl set_user_tags abc administrator\n \n删除用户：\nrabbitmqctl delete_user guest\n \n修改密码：\nrabbitmqctl change_password   username  newpassword\n \nlist_users\nadd_vhost   vhostpath\nrabbitmqctl list_user_permissions abc  \nlist_queues \nlist_exchanges\nlist_bindings\n```","source":"_posts/rabbitmq.md","raw":"---\ntitle: RabbitMQ\ndate: 2018-08-25 15:22:15\ntags:\n  - RabbitMQ\ncategories:\n  - 中间件\n---\n最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：\n\n#### RabbitMQ简介\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。\nAMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\nRabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持Ajax。\n\n#### Queue\nRabbitMQ中的消息都只能存储在Queue中，生产者（下图中的P）生产消息并最终投递到Queue中，消费者（下图中的C）可以从Queue中获取消息并消费。\n![](https://ttxsgoto.github.io/img/rabbitmq/01.png)\n多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。\n![](https://ttxsgoto.github.io/img/rabbitmq/02.png)\n#### Message acknowledgment(确认机制)\n在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。\n这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑,另外pub message是没有ack的。\nrabbitmq_producer_ack.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建\nchannel.queue_declare(queue=\"ttxsgoto\")\n \n# 设置指定队列名称，body往队列中发送消息\nfor i in range(20):\n    channel.basic_publish(exchange='',\n                          routing_key=\"ttxsgoto\",\n                          body=\"Hello World!--{}\".format(i))\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \nconnection.close()\n```\nrabbitmq_consumer_ack.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nimport time\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建\nchannel.queue_declare(queue=\"ttxsgoto\")\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    print(\"ok\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=\"ttxsgoto\",\n                      no_ack=False)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n#### Message durability(持久化)\n如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。\nrabbitmq_producer_ack_durable.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来\n# 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化\nchannel.queue_declare(queue=\"ttxsgoto01\", durable=True)\n \n# 设置指定队列名称，body往队列中发送消息\nfor i in range(20):\n    channel.basic_publish(exchange='',\n                          routing_key=\"ttxsgoto01\",\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_ack_durable.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来\n \nimport time\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,队列持久化\nchannel.queue_declare(queue=\"ttxsgoto01\", durable=True)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    print(\"ok\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=\"ttxsgoto01\",\n                      no_ack=False)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n说明：消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来；此时可以通过rabbitmq web管理页面看到队列ttxsgoto01的Parameters有一个D属性，表示durable=True\n\n#### Prefetch count(每发送数)\n如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个消息的处理时间不同，就有可能会导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息\nrabbitmq_producer_ack_durable_qos.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来\n# 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化\nchannel.queue_declare(queue=\"ttxsgoto02\", durable=True)\n \n# 设置指定队列名称，body往队列中发送消息\nfor i in range(20):\n    channel.basic_publish(exchange='',\n                          routing_key=\"ttxsgoto02\",\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_ack_durable_qos.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n \nimport time\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 通过频道创建队列，如果有则忽略，没有则创建,队列持久化\nchannel.queue_declare(queue=\"ttxsgoto02\", durable=True)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    print(\"ok\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 表示谁来获取，不再按照奇偶数排列\nchannel.basic_qos(prefetch_count=1)\n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=\"ttxsgoto02\",\n                      no_ack=False)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n#### Exchange(交换器)\n在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际的情况是，生产者将消息发送到Exchange（交换器，下图中的X），由Exchange将消息路由到一个或多个Queue中（或者丢弃）。\n![](https://ttxsgoto.github.io/img/rabbitmq/03.png)\n#### routing key\n生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。（routing key + exchange type + binding key）\n在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。\nRabbitMQ为routing key设定的长度限制为255 bytes\n#### Binding(绑定到Queue)\nRabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由到指定的Queue了。\n![](https://ttxsgoto.github.io/img/rabbitmq/04.png)\n#### Binding key\n在绑定（Binding）Exchange与Queue的同时，一般会指定一个binding key；消费者将消息发送给Exchange时，一般会指定一个routing key；当binding key与routing key相匹配时，消息将会被路由到对应的Queue中。\n在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key。\nbinding key 并不是在所有情况下都生效，它依赖于Exchange Type，比如fanout类型的Exchange就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。\n\n#### Exchange Types\nRabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种,一般headers使用较少，不做演示说明，下面分别进行介绍\n##### fanout\nfanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。\n![](https://ttxsgoto.github.io/img/rabbitmq/05.png)\n上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。\nrabbitmq_producer_fanout.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='127.0.0.1', port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 指定exchange和对应的类型\nchannel.exchange_declare(exchange=\"test_fanout\",\n                         exchange_type='fanout')\n \n# 设置exchange，没有指定routing_key，队列随机\nfor i in range(20):\n    channel.basic_publish(exchange='test_fanout',\n                          routing_key=\"abc\",\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_fanout.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上\n \nimport pika\nimport time\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \nchannel.exchange_declare(exchange=\"test_fanout\",  # 创建一个exchange\n                         exchange_type=\"fanout\")  # 任何发送到fanout exchange的消息都会被转发到和exchange绑定的queue上\n \n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\n \n# 绑定，exchange绑定后端队列\nchannel.queue_bind(exchange=\"test_fanout\",\n                   queue=queue_name)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s\" % body)\n    time.sleep(1)\n    # ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n##### direct\ndirect类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。\n![](https://ttxsgoto.github.io/img/rabbitmq/06.png)\n以上图的配置为例，我们以routingKey=”error”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；如果我们以routingKey=”info”或routingKey=”warning”来发送消息，则消息只会路由到Queue2。如果我们以其他routingKey发送消息，则消息不会路由到这两个Queue中。\nrabbitmq_producer_direct.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)\n# 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列\n# 结论：当我们将发布者的key设置成Error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息\n \nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 指定exchange和对应的类型\nchannel.exchange_declare(exchange=\"test_direct\",\n                         exchange_type='direct')\ntypeinfo = 'info'\n \n# 设置exchange，没有指定routing_key，队列指定关键字\nfor i in range(20):\n    channel.basic_publish(exchange='test_direct',\n                          routing_key=typeinfo,\n                          body=\"Hello World!--{}\".format(i),\n                          properties=pika.BasicProperties(delivery_mode=2, ))  # 指定消息持久化\n    print(\"Sent 'Hello World!' - {} \".format(i))\n \n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_direct1.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)\n# 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列\n \nimport pika\nimport time\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\nchannel.exchange_declare(exchange=\"test_direct\",  # 创建一个exchange\n                         exchange_type=\"direct\")\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\n \ntypeinfo = ['error', 'info', ]\n \n# 绑定，exchange绑定后端队列\nfor type1 in typeinfo:\n    channel.queue_bind(exchange=\"test_direct\", queue=queue_name, routing_key=type1)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s --- %s\" % (method.routing_key, body))\n    time.sleep(1)\n    # ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\nrabbitmq_consumer_direct2.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)\n# 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列\n \nimport pika\nimport time\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\nchannel.exchange_declare(exchange=\"test_direct\",  # 创建一个exchange\n                         exchange_type=\"direct\")\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\n \ntypeinfo = ['error', ]\n \n# 绑定，exchange绑定后端队列\nfor type1 in typeinfo:\n    channel.queue_bind(exchange=\"test_direct\", queue=queue_name, routing_key=type1)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s --- %s\" % (method.routing_key, body))\n    time.sleep(1)\n    # ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n结论：当我们将发布者的key设置成error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息。\n##### topic\ndirect类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：\n- routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”\n\n- binding key与routing key一样也是句点号“. ”分隔的字符串\n\n- binding key中可以存在两种特殊字符“*”与“#”，用于做模糊匹配，其中“*”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）\n\n![](https://ttxsgoto.github.io/img/rabbitmq/07.png)\n\n以上图中的配置为例，routingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，routingKey=”lazy.orange.fox”的消息会路由到Q1，routingKey=”lazy.brown.fox”的消息会路由到Q2，routingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，因为它们没有匹配任何bindingKey。\nrabbitmq_producer_topic.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)\n# 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列\n# # ：表示可以匹配0个或多个单词\n# * ：表示只能匹配一个单词\nimport sys\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 指定exchange和对应的类型\nchannel.exchange_declare(exchange=\"test_topic\",\n                         exchange_type='topic')\n \nrouting_key = sys.argv[1] if len(sys.argv) > 1 else 'anonymous'\nmessage = ''.join(sys.argv[2:]) or 'Hello Chengdu!'\n \n# 设置exchange，没有指定routing_key，队列指定关键字\nchannel.basic_publish(exchange='test_topic', routing_key=routing_key, body=message)\n \nprint(\" Sent routing_key:%s ——> body:%s \" % (routing_key, message))\n# 关闭连接\nconnection.close()\n \n```\nrabbitmq_consumer_topic.py\n```python\n#!/usr/bin/env python\n# coding: utf-8\n# exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)\n# 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列\n \nimport sys\nimport pika\n \nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=\"127.0.0.1\", port=5672))\n \n# 创建一个频道\nchannel = connection.channel()\n \n# 创建一个exchange,并指定类型\nchannel.exchange_declare(exchange=\"test_topic\",\n                         exchange_type=\"topic\")\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)\n \nqueue_name = result.method.queue\nbinding_keys = sys.argv[1:]\n \nif not binding_keys:\n    sys.stderr.write(\"Usage: %s [binding_key]...\\n\" % sys.argv[0])\n    sys.exit(0)\n \nfor binding_key in binding_keys:\n    channel.queue_bind(exchange=\"test_topic\", queue=queue_name, routing_key=binding_key)\n \n \ndef callback(ch, method, properties, body):\n    print(\"Received %s -----%s \" % (method.routing_key, body))\n \n \n# 从队列中取消息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)  # 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中\n \nprint(\"Waiting for messages,To exit press CTRL + C\")\nchannel.start_consuming()\n \n```\n#### 常用命令\n```\n添加用户：\nrabbitmqctl add_user abc abc\n \n添加权限：\nrabbitmqctl set_permissions -p \"/\" abc \".*\" \".*\" \".*\"\n \n设置用户标签：\nrabbitmqctl set_user_tags abc administrator\n \n删除用户：\nrabbitmqctl delete_user guest\n \n修改密码：\nrabbitmqctl change_password   username  newpassword\n \nlist_users\nadd_vhost   vhostpath\nrabbitmqctl list_user_permissions abc  \nlist_queues \nlist_exchanges\nlist_bindings\n```","slug":"rabbitmq","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5xz004yct8ugqbao644","content":"<p>最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：</p>\n<h4 id=\"RabbitMQ简介\"><a href=\"#RabbitMQ简介\" class=\"headerlink\" title=\"RabbitMQ简介\"></a>RabbitMQ简介</h4><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持Ajax。</p>\n<h4 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h4><p>RabbitMQ中的消息都只能存储在Queue中，生产者（下图中的P）生产消息并最终投递到Queue中，消费者（下图中的C）可以从Queue中获取消息并消费。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/01.png\" alt=\"\"><br>多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/02.png\" alt=\"\"></p>\n<h4 id=\"Message-acknowledgment-确认机制\"><a href=\"#Message-acknowledgment-确认机制\" class=\"headerlink\" title=\"Message acknowledgment(确认机制)\"></a>Message acknowledgment(确认机制)</h4><p>在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。<br>这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑,另外pub message是没有ack的。<br>rabbitmq_producer_ack.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto\"</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置指定队列名称，body往队列中发送消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i))</div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_ack.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto\"</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">\"ok\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class=\"comment\"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=<span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">False</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h4 id=\"Message-durability-持久化\"><a href=\"#Message-durability-持久化\" class=\"headerlink\" title=\"Message durability(持久化)\"></a>Message durability(持久化)</h4><p>如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。<br>rabbitmq_producer_ack_durable.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class=\"line\"><span class=\"comment\"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto01\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置指定队列名称，body往队列中发送消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"ttxsgoto01\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_ack_durable.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto01\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">\"ok\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class=\"comment\"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=<span class=\"string\">\"ttxsgoto01\"</span>,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">False</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<p>说明：消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来；此时可以通过rabbitmq web管理页面看到队列ttxsgoto01的Parameters有一个D属性，表示durable=True</p>\n<h4 id=\"Prefetch-count-每发送数\"><a href=\"#Prefetch-count-每发送数\" class=\"headerlink\" title=\"Prefetch count(每发送数)\"></a>Prefetch count(每发送数)</h4><p>如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个消息的处理时间不同，就有可能会导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息<br>rabbitmq_producer_ack_durable_qos.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class=\"line\"><span class=\"comment\"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto02\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置指定队列名称，body往队列中发送消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_ack_durable_qos.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto02\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">\"ok\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class=\"comment\"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 表示谁来获取，不再按照奇偶数排列</span></div><div class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=<span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">False</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h4 id=\"Exchange-交换器\"><a href=\"#Exchange-交换器\" class=\"headerlink\" title=\"Exchange(交换器)\"></a>Exchange(交换器)</h4><p>在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际的情况是，生产者将消息发送到Exchange（交换器，下图中的X），由Exchange将消息路由到一个或多个Queue中（或者丢弃）。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/03.png\" alt=\"\"></p>\n<h4 id=\"routing-key\"><a href=\"#routing-key\" class=\"headerlink\" title=\"routing key\"></a>routing key</h4><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。（routing key + exchange type + binding key）<br>在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。<br>RabbitMQ为routing key设定的长度限制为255 bytes</p>\n<h4 id=\"Binding-绑定到Queue\"><a href=\"#Binding-绑定到Queue\" class=\"headerlink\" title=\"Binding(绑定到Queue)\"></a>Binding(绑定到Queue)</h4><p>RabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由到指定的Queue了。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/04.png\" alt=\"\"></p>\n<h4 id=\"Binding-key\"><a href=\"#Binding-key\" class=\"headerlink\" title=\"Binding key\"></a>Binding key</h4><p>在绑定（Binding）Exchange与Queue的同时，一般会指定一个binding key；消费者将消息发送给Exchange时，一般会指定一个routing key；当binding key与routing key相匹配时，消息将会被路由到对应的Queue中。<br>在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key。<br>binding key 并不是在所有情况下都生效，它依赖于Exchange Type，比如fanout类型的Exchange就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。</p>\n<h4 id=\"Exchange-Types\"><a href=\"#Exchange-Types\" class=\"headerlink\" title=\"Exchange Types\"></a>Exchange Types</h4><p>RabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种,一般headers使用较少，不做演示说明，下面分别进行介绍</p>\n<h5 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h5><p>fanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/05.png\" alt=\"\"><br>上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。<br>rabbitmq_producer_fanout.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 指定exchange和对应的类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_fanout\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">'fanout'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置exchange，没有指定routing_key，队列随机</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'test_fanout'</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"abc\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_fanout.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_fanout\"</span>,  <span class=\"comment\"># 创建一个exchange</span></div><div class=\"line\">                         exchange_type=<span class=\"string\">\"fanout\"</span>)  <span class=\"comment\"># 任何发送到fanout exchange的消息都会被转发到和exchange绑定的queue上</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 绑定，exchange绑定后端队列</span></div><div class=\"line\">channel.queue_bind(exchange=<span class=\"string\">\"test_fanout\"</span>,</div><div class=\"line\">                   queue=queue_name)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"comment\"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h5 id=\"direct\"><a href=\"#direct\" class=\"headerlink\" title=\"direct\"></a>direct</h5><p>direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/06.png\" alt=\"\"><br>以上图的配置为例，我们以routingKey=”error”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；如果我们以routingKey=”info”或routingKey=”warning”来发送消息，则消息只会路由到Queue2。如果我们以其他routingKey发送消息，则消息不会路由到这两个Queue中。<br>rabbitmq_producer_direct.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class=\"line\"><span class=\"comment\"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class=\"line\"><span class=\"comment\"># 结论：当我们将发布者的key设置成Error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 指定exchange和对应的类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_direct\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">'direct'</span>)</div><div class=\"line\">typeinfo = <span class=\"string\">'info'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'test_direct'</span>,</div><div class=\"line\">                          routing_key=typeinfo,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_direct1.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class=\"line\"><span class=\"comment\"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_direct\"</span>,  <span class=\"comment\"># 创建一个exchange</span></div><div class=\"line\">                         exchange_type=<span class=\"string\">\"direct\"</span>)</div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"> </div><div class=\"line\">typeinfo = [<span class=\"string\">'error'</span>, <span class=\"string\">'info'</span>, ]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 绑定，exchange绑定后端队列</span></div><div class=\"line\"><span class=\"keyword\">for</span> type1 <span class=\"keyword\">in</span> typeinfo:</div><div class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">\"test_direct\"</span>, queue=queue_name, routing_key=type1)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s --- %s\"</span> % (method.routing_key, body))</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"comment\"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_direct2.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class=\"line\"><span class=\"comment\"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_direct\"</span>,  <span class=\"comment\"># 创建一个exchange</span></div><div class=\"line\">                         exchange_type=<span class=\"string\">\"direct\"</span>)</div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"> </div><div class=\"line\">typeinfo = [<span class=\"string\">'error'</span>, ]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 绑定，exchange绑定后端队列</span></div><div class=\"line\"><span class=\"keyword\">for</span> type1 <span class=\"keyword\">in</span> typeinfo:</div><div class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">\"test_direct\"</span>, queue=queue_name, routing_key=type1)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s --- %s\"</span> % (method.routing_key, body))</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"comment\"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<p>结论：当我们将发布者的key设置成error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息。</p>\n<h5 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h5><p>direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：</p>\n<ul>\n<li><p>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”</p>\n</li>\n<li><p>binding key与routing key一样也是句点号“. ”分隔的字符串</p>\n</li>\n<li><p>binding key中可以存在两种特殊字符“<em>”与“#”，用于做模糊匹配，其中“</em>”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）</p>\n</li>\n</ul>\n<p><img src=\"https://ttxsgoto.github.io/img/rabbitmq/07.png\" alt=\"\"></p>\n<p>以上图中的配置为例，routingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，routingKey=”lazy.orange.fox”的消息会路由到Q1，routingKey=”lazy.brown.fox”的消息会路由到Q2，routingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，因为它们没有匹配任何bindingKey。<br>rabbitmq_producer_topic.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class=\"line\"><span class=\"comment\"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class=\"line\"><span class=\"comment\"># # ：表示可以匹配0个或多个单词</span></div><div class=\"line\"><span class=\"comment\"># * ：表示只能匹配一个单词</span></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 指定exchange和对应的类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_topic\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">'topic'</span>)</div><div class=\"line\"> </div><div class=\"line\">routing_key = sys.argv[<span class=\"number\">1</span>] <span class=\"keyword\">if</span> len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"string\">'anonymous'</span></div><div class=\"line\">message = <span class=\"string\">''</span>.join(sys.argv[<span class=\"number\">2</span>:]) <span class=\"keyword\">or</span> <span class=\"string\">'Hello Chengdu!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class=\"line\">channel.basic_publish(exchange=<span class=\"string\">'test_topic'</span>, routing_key=routing_key, body=message)</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\" Sent routing_key:%s ——&gt; body:%s \"</span> % (routing_key, message))</div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_topic.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class=\"line\"><span class=\"comment\"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个exchange,并指定类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_topic\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">\"topic\"</span>)</div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\">binding_keys = sys.argv[<span class=\"number\">1</span>:]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> binding_keys:</div><div class=\"line\">    sys.stderr.write(<span class=\"string\">\"Usage: %s [binding_key]...\\n\"</span> % sys.argv[<span class=\"number\">0</span>])</div><div class=\"line\">    sys.exit(<span class=\"number\">0</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</div><div class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">\"test_topic\"</span>, queue=queue_name, routing_key=binding_key)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s -----%s \"</span> % (method.routing_key, body))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加用户：</div><div class=\"line\">rabbitmqctl add_user abc abc</div><div class=\"line\"> </div><div class=\"line\">添加权限：</div><div class=\"line\">rabbitmqctl set_permissions -p &quot;/&quot; abc &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</div><div class=\"line\"> </div><div class=\"line\">设置用户标签：</div><div class=\"line\">rabbitmqctl set_user_tags abc administrator</div><div class=\"line\"> </div><div class=\"line\">删除用户：</div><div class=\"line\">rabbitmqctl delete_user guest</div><div class=\"line\"> </div><div class=\"line\">修改密码：</div><div class=\"line\">rabbitmqctl change_password   username  newpassword</div><div class=\"line\"> </div><div class=\"line\">list_users</div><div class=\"line\">add_vhost   vhostpath</div><div class=\"line\">rabbitmqctl list_user_permissions abc  </div><div class=\"line\">list_queues </div><div class=\"line\">list_exchanges</div><div class=\"line\">list_bindings</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：</p>\n<h4 id=\"RabbitMQ简介\"><a href=\"#RabbitMQ简介\" class=\"headerlink\" title=\"RabbitMQ简介\"></a>RabbitMQ简介</h4><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持Ajax。</p>\n<h4 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h4><p>RabbitMQ中的消息都只能存储在Queue中，生产者（下图中的P）生产消息并最终投递到Queue中，消费者（下图中的C）可以从Queue中获取消息并消费。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/01.png\" alt=\"\"><br>多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/02.png\" alt=\"\"></p>\n<h4 id=\"Message-acknowledgment-确认机制\"><a href=\"#Message-acknowledgment-确认机制\" class=\"headerlink\" title=\"Message acknowledgment(确认机制)\"></a>Message acknowledgment(确认机制)</h4><p>在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。<br>这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑,另外pub message是没有ack的。<br>rabbitmq_producer_ack.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto\"</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置指定队列名称，body往队列中发送消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i))</div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_ack.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto\"</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">\"ok\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class=\"comment\"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=<span class=\"string\">\"ttxsgoto\"</span>,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">False</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h4 id=\"Message-durability-持久化\"><a href=\"#Message-durability-持久化\" class=\"headerlink\" title=\"Message durability(持久化)\"></a>Message durability(持久化)</h4><p>如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。<br>rabbitmq_producer_ack_durable.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class=\"line\"><span class=\"comment\"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto01\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置指定队列名称，body往队列中发送消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"ttxsgoto01\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_ack_durable.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto01\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">\"ok\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class=\"comment\"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=<span class=\"string\">\"ttxsgoto01\"</span>,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">False</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<p>说明：消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来；此时可以通过rabbitmq web管理页面看到队列ttxsgoto01的Parameters有一个D属性，表示durable=True</p>\n<h4 id=\"Prefetch-count-每发送数\"><a href=\"#Prefetch-count-每发送数\" class=\"headerlink\" title=\"Prefetch count(每发送数)\"></a>Prefetch count(每发送数)</h4><p>如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个消息的处理时间不同，就有可能会导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息<br>rabbitmq_producer_ack_durable_qos.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class=\"line\"><span class=\"comment\"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto02\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置指定队列名称，body往队列中发送消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_ack_durable_qos.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">\"ttxsgoto02\"</span>, durable=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">\"ok\"</span>)</div><div class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class=\"comment\"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 表示谁来获取，不再按照奇偶数排列</span></div><div class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=<span class=\"string\">\"ttxsgoto02\"</span>,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">False</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h4 id=\"Exchange-交换器\"><a href=\"#Exchange-交换器\" class=\"headerlink\" title=\"Exchange(交换器)\"></a>Exchange(交换器)</h4><p>在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际的情况是，生产者将消息发送到Exchange（交换器，下图中的X），由Exchange将消息路由到一个或多个Queue中（或者丢弃）。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/03.png\" alt=\"\"></p>\n<h4 id=\"routing-key\"><a href=\"#routing-key\" class=\"headerlink\" title=\"routing key\"></a>routing key</h4><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。（routing key + exchange type + binding key）<br>在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。<br>RabbitMQ为routing key设定的长度限制为255 bytes</p>\n<h4 id=\"Binding-绑定到Queue\"><a href=\"#Binding-绑定到Queue\" class=\"headerlink\" title=\"Binding(绑定到Queue)\"></a>Binding(绑定到Queue)</h4><p>RabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由到指定的Queue了。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/04.png\" alt=\"\"></p>\n<h4 id=\"Binding-key\"><a href=\"#Binding-key\" class=\"headerlink\" title=\"Binding key\"></a>Binding key</h4><p>在绑定（Binding）Exchange与Queue的同时，一般会指定一个binding key；消费者将消息发送给Exchange时，一般会指定一个routing key；当binding key与routing key相匹配时，消息将会被路由到对应的Queue中。<br>在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key。<br>binding key 并不是在所有情况下都生效，它依赖于Exchange Type，比如fanout类型的Exchange就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。</p>\n<h4 id=\"Exchange-Types\"><a href=\"#Exchange-Types\" class=\"headerlink\" title=\"Exchange Types\"></a>Exchange Types</h4><p>RabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种,一般headers使用较少，不做演示说明，下面分别进行介绍</p>\n<h5 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h5><p>fanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/05.png\" alt=\"\"><br>上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。<br>rabbitmq_producer_fanout.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 指定exchange和对应的类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_fanout\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">'fanout'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置exchange，没有指定routing_key，队列随机</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'test_fanout'</span>,</div><div class=\"line\">                          routing_key=<span class=\"string\">\"abc\"</span>,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_fanout.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_fanout\"</span>,  <span class=\"comment\"># 创建一个exchange</span></div><div class=\"line\">                         exchange_type=<span class=\"string\">\"fanout\"</span>)  <span class=\"comment\"># 任何发送到fanout exchange的消息都会被转发到和exchange绑定的queue上</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 绑定，exchange绑定后端队列</span></div><div class=\"line\">channel.queue_bind(exchange=<span class=\"string\">\"test_fanout\"</span>,</div><div class=\"line\">                   queue=queue_name)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s\"</span> % body)</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"comment\"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h5 id=\"direct\"><a href=\"#direct\" class=\"headerlink\" title=\"direct\"></a>direct</h5><p>direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。<br><img src=\"https://ttxsgoto.github.io/img/rabbitmq/06.png\" alt=\"\"><br>以上图的配置为例，我们以routingKey=”error”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；如果我们以routingKey=”info”或routingKey=”warning”来发送消息，则消息只会路由到Queue2。如果我们以其他routingKey发送消息，则消息不会路由到这两个Queue中。<br>rabbitmq_producer_direct.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class=\"line\"><span class=\"comment\"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class=\"line\"><span class=\"comment\"># 结论：当我们将发布者的key设置成Error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 指定exchange和对应的类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_direct\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">'direct'</span>)</div><div class=\"line\">typeinfo = <span class=\"string\">'info'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'test_direct'</span>,</div><div class=\"line\">                          routing_key=typeinfo,</div><div class=\"line\">                          body=<span class=\"string\">\"Hello World!--&#123;&#125;\"</span>.format(i),</div><div class=\"line\">                          properties=pika.BasicProperties(delivery_mode=<span class=\"number\">2</span>, ))  <span class=\"comment\"># 指定消息持久化</span></div><div class=\"line\">    print(<span class=\"string\">\"Sent 'Hello World!' - &#123;&#125; \"</span>.format(i))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_direct1.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class=\"line\"><span class=\"comment\"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_direct\"</span>,  <span class=\"comment\"># 创建一个exchange</span></div><div class=\"line\">                         exchange_type=<span class=\"string\">\"direct\"</span>)</div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"> </div><div class=\"line\">typeinfo = [<span class=\"string\">'error'</span>, <span class=\"string\">'info'</span>, ]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 绑定，exchange绑定后端队列</span></div><div class=\"line\"><span class=\"keyword\">for</span> type1 <span class=\"keyword\">in</span> typeinfo:</div><div class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">\"test_direct\"</span>, queue=queue_name, routing_key=type1)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s --- %s\"</span> % (method.routing_key, body))</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"comment\"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_direct2.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class=\"line\"><span class=\"comment\"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_direct\"</span>,  <span class=\"comment\"># 创建一个exchange</span></div><div class=\"line\">                         exchange_type=<span class=\"string\">\"direct\"</span>)</div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"> </div><div class=\"line\">typeinfo = [<span class=\"string\">'error'</span>, ]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 绑定，exchange绑定后端队列</span></div><div class=\"line\"><span class=\"keyword\">for</span> type1 <span class=\"keyword\">in</span> typeinfo:</div><div class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">\"test_direct\"</span>, queue=queue_name, routing_key=type1)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s --- %s\"</span> % (method.routing_key, body))</div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"comment\"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<p>结论：当我们将发布者的key设置成error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息。</p>\n<h5 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h5><p>direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：</p>\n<ul>\n<li><p>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”</p>\n</li>\n<li><p>binding key与routing key一样也是句点号“. ”分隔的字符串</p>\n</li>\n<li><p>binding key中可以存在两种特殊字符“<em>”与“#”，用于做模糊匹配，其中“</em>”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）</p>\n</li>\n</ul>\n<p><img src=\"https://ttxsgoto.github.io/img/rabbitmq/07.png\" alt=\"\"></p>\n<p>以上图中的配置为例，routingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，routingKey=”lazy.orange.fox”的消息会路由到Q1，routingKey=”lazy.brown.fox”的消息会路由到Q2，routingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，因为它们没有匹配任何bindingKey。<br>rabbitmq_producer_topic.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class=\"line\"><span class=\"comment\"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class=\"line\"><span class=\"comment\"># # ：表示可以匹配0个或多个单词</span></div><div class=\"line\"><span class=\"comment\"># * ：表示只能匹配一个单词</span></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 指定exchange和对应的类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_topic\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">'topic'</span>)</div><div class=\"line\"> </div><div class=\"line\">routing_key = sys.argv[<span class=\"number\">1</span>] <span class=\"keyword\">if</span> len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"string\">'anonymous'</span></div><div class=\"line\">message = <span class=\"string\">''</span>.join(sys.argv[<span class=\"number\">2</span>:]) <span class=\"keyword\">or</span> <span class=\"string\">'Hello Chengdu!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class=\"line\">channel.basic_publish(exchange=<span class=\"string\">'test_topic'</span>, routing_key=routing_key, body=message)</div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\" Sent routing_key:%s ——&gt; body:%s \"</span> % (routing_key, message))</div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>rabbitmq_consumer_topic.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class=\"line\"><span class=\"comment\"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和\"关键字\"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"> </div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">\"127.0.0.1\"</span>, port=<span class=\"number\">5672</span>))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个频道</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 创建一个exchange,并指定类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">\"test_topic\"</span>,</div><div class=\"line\">                         exchange_type=<span class=\"string\">\"topic\"</span>)</div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\">binding_keys = sys.argv[<span class=\"number\">1</span>:]</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> binding_keys:</div><div class=\"line\">    sys.stderr.write(<span class=\"string\">\"Usage: %s [binding_key]...\\n\"</span> % sys.argv[<span class=\"number\">0</span>])</div><div class=\"line\">    sys.exit(<span class=\"number\">0</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</div><div class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">\"test_topic\"</span>, queue=queue_name, routing_key=binding_key)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"Received %s -----%s \"</span> % (method.routing_key, body))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 从队列中取消息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)  <span class=\"comment\"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class=\"line\"> </div><div class=\"line\">print(<span class=\"string\">\"Waiting for messages,To exit press CTRL + C\"</span>)</div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加用户：</div><div class=\"line\">rabbitmqctl add_user abc abc</div><div class=\"line\"> </div><div class=\"line\">添加权限：</div><div class=\"line\">rabbitmqctl set_permissions -p &quot;/&quot; abc &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</div><div class=\"line\"> </div><div class=\"line\">设置用户标签：</div><div class=\"line\">rabbitmqctl set_user_tags abc administrator</div><div class=\"line\"> </div><div class=\"line\">删除用户：</div><div class=\"line\">rabbitmqctl delete_user guest</div><div class=\"line\"> </div><div class=\"line\">修改密码：</div><div class=\"line\">rabbitmqctl change_password   username  newpassword</div><div class=\"line\"> </div><div class=\"line\">list_users</div><div class=\"line\">add_vhost   vhostpath</div><div class=\"line\">rabbitmqctl list_user_permissions abc  </div><div class=\"line\">list_queues </div><div class=\"line\">list_exchanges</div><div class=\"line\">list_bindings</div></pre></td></tr></table></figure>"},{"title":"运维 Redis进阶","date":"2018-09-28T13:14:53.000Z","_content":"Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发\n\n#### 使用redis目的\n- 高性能：将数据缓存在redis中，访问数据从缓存中取，不直接访问数据库，提高页面响应效率\n- 高并发：在大的并发情况下，直接操作缓存能够承受的请求远大于直接访问数据库，这时我们需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库\n\n#### 一般应用场景\n\n- 缓存-热数据：需要执行耗时久，计算结果不频繁变动的sql查询\n- 异步队列\n- 计数器：如统计点击数，INCRBY\n- 分布式锁与单线程机制\n- 最新列表：使用LPUSH命令构建List\n- 排行榜应用： 使用ZADD(有续集，sorted set)\n- 位操作(大数据处理)\n\n#### 单线程的redis为什么快\n- 纯内存操作\n- 单线程操作，避免了频繁的上下文切换\n- 采用非阻塞I/O多路复用机制\n    \n    ```\n    在redis服务端，启用了I/O多路复用机制，将其置于队列中，然后文件事件分发器依次去队列中去取，转发到不同的事件处理器中处理\n    ```\n\n#### 常见数据结构和使用场景\n- String \n\n常用的命令： set、get、decr、incr、mget、mset\nString 数据结构是简单的 Key-Value 类型，Value 可为字符和数值和其他类型的值\n```python\n# 设置和获取key-value\nset mykey ttxsgoto\nget mykey\n \n# 原子递增\nset counter 100\nincr counter ((integer) 101)\n \n# 一次性存储和获取多个key对应的值,mget 命令返回由值组成的数组\n127.0.0.1:6379> mset a 10 b 20 c 30\n127.0.0.1:6379> mget a b c\n1) \"10\"\n2) \"20\"\n3) \"30\"\n127.0.0.1:6379> keys *\n1) \"ttxs\"\n2) \"c\"\n3) \"a\"\n4) \"counter\"\n5) \"b\"\n6) \"mykey\"\n127.0.0.1:6379> exists a\n(integer) 1\n127.0.0.1:6379> exists x\n(integer) 0\n127.0.0.1:6379> type a\nstring\n127.0.0.1:6379> del a\n(integer) 1\n \n# 设置过期时间\n127.0.0.1:6379> get b\n\"20\"\n127.0.0.1:6379> expire b 5\n(integer) 1\n127.0.0.1:6379> get b\n(nil)\n127.0.0.1:6379> set bbb 1000 ex 100\nOK\n# 查看过期时间\n127.0.0.1:6379> ttl bbb\n(integer) 95\n```\n\n- Hash\n\n常用命令：hget、hset、 hmget、hmset、hgetall\nHash 是一个 String 类型的 Field 和 Value 的映射表，Hash 特别适合用于存储对象；后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值\n```python\n# 由键值对组成\n127.0.0.1:6379> hmset user:1000 username antirez birthyear 1977 verified 1\nOK\n127.0.0.1:6379> hget user:1000 username\n\"antirez\"\n127.0.0.1:6379> hgetall user:1000\n1) \"username\"\n2) \"antirez\"\n3) \"birthyear\"\n4) \"1977\"\n5) \"verified\"\n6) \"1\"\n \n# 返回多个值\n127.0.0.1:6379> hmget user:1000 username birthyear xxx\n1) \"antirez\"\n2) \"1977\"\n3) (nil)\n \n```\n- List\n\n常用命令：lpush、rpush、lpop、rpop、lrange\nList 就是链表，Redis List 的应用场景非常多，也是 Redis 最重要的数据结构之一\nRedis List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销\n另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 List 实现分页查询\n\n```python\n# lpush 向list的左边（头部）添加一个新元素\n# rpush 向list的右边（尾部）添加一个新元素\n# lrange 从list中取出一定范围的元素\n127.0.0.1:6379> rpush mylist A\n(integer) 1\n127.0.0.1:6379> rpush mylist B\n(integer) 2\n127.0.0.1:6379> lpush mylist first\n(integer) 3\n# \n127.0.0.1:6379> lrange mylist 0 -1\n1) \"first\"\n2) \"A\"\n3) \"B\"\n# 写入多个值\n127.0.0.1:6379> rpush mylist 1 2 3 4 5 \"foo bar\"\n(integer) 9\n127.0.0.1:6379> lrange mylist 0 -1\n1) \"first\"\n2) \"A\"\n3) \"B\"\n4) \"1\"\n5) \"2\"\n6) \"3\"\n7) \"4\"\n8) \"5\"\n9) \"foo bar\"\n \n127.0.0.1:6379> rpush mylist001 a b c\n# 删除元素并同时返回删除的值\n127.0.0.1:6379> rpop mylist001\n\"c\"\n \n# ltrim把list从左边截取指定长度\n127.0.0.1:6379> ltrim mylist 0 2\nOK\n127.0.0.1:6379> LRANGE mylist 0 -1\n1) \"first\"\n2) \"A\"\n3) \"B\"\n# 查看list中元素的个数\n127.0.0.1:6379> llen mylist\n(integer) 6\n127.0.0.1:6379> del mylist\n(integer) 1\n```\n- Set\n\n常用命令：sadd、spop、smembers、sunion\nSet 对外提供的功能与 List 类似是一个列表的功能，特殊之处在于 Set 是可以自动排重\n当你需要存储一个列表数据，又不希望出现重复数据时，可以使用Set，同时也支持交集、并集、差集操作\n```python\n# 添加\n127.0.0.1:6379> sadd myset 1 2 3\n(integer) 3\n# 查看所有\n127.0.0.1:6379> smembers myset\n1) \"1\"\n2) \"2\"\n3) \"3\"\n# 检查元素是否存在\n127.0.0.1:6379> sismember myset 1\n(integer) 1\n127.0.0.1:6379> sismember myset 4\n(integer) 0\n \n```\n- Sorted Set\n\n常用命令：zadd、zrange、zrem、zcard \n和 Set 相比，Sorted Set 增加了一个权重参数 Score，使得集合中的元素能够按 Score 进行有序排列\n```python\n# zadd 添加\n127.0.0.1:6379> zadd hackers 1940 \"Alan Kay\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1957 \"Sophie Wilson\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1953 \"Richard Stallman\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1949 \"Anita Borg\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1965 \"Yukihiro Matsumoto\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1914 \"Hedy Lamarr\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1916 \"Claude Shannon\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1969 \"Linus Torvalds\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1912 \"Alan Turing\"\n(integer) 1\n \n# 查看数据\n127.0.0.1:6379> zrange hackers 0 -1\n1) \"Alan Turing\"\n2) \"Hedy Lamarr\"\n3) \"Claude Shannon\"\n4) \"Alan Kay\"\n5) \"Anita Borg\"\n6) \"Richard Stallman\"\n7) \"Sophie Wilson\"\n8) \"Yukihiro Matsumoto\"\n9) \"Linus Torvalds\"\n \n# 反向查看数据\n127.0.0.1:6379> zrevrange hackers 0 -1\n1) \"Linus Torvalds\"\n2) \"Yukihiro Matsumoto\"\n3) \"Sophie Wilson\"\n4) \"Richard Stallman\"\n5) \"Anita Borg\"\n6) \"Alan Kay\"\n7) \"Claude Shannon\"\n8) \"Hedy Lamarr\"\n9) \"Alan Turing\"\n \n# 查看对应的得分\n127.0.0.1:6379> zrange hackers 0 -1 withscores\n 1) \"Alan Turing\"\n 2) \"1912\"\n 3) \"Hedy Lamarr\"\n 4) \"1914\"\n 5) \"Claude Shannon\"\n 6) \"1916\"\n 7) \"Alan Kay\"\n 8) \"1940\"\n 9) \"Anita Borg\"\n10) \"1949\"\n11) \"Richard Stallman\"\n12) \"1953\"\n13) \"Sophie Wilson\"\n14) \"1957\"\n15) \"Yukihiro Matsumoto\"\n16) \"1965\"\n17) \"Linus Torvalds\"\n18) \"1969\"\n  \n# 小于1950的数据\n127.0.0.1:6379> zrangebyscore hackers -inf 1950\n1) \"Alan Turing\"\n2) \"Hedy Lamarr\"\n3) \"Claude Shannon\"\n4) \"Alan Kay\"\n5) \"Anita Borg\"\n```\n#### 过期策略以及内存淘汰机制\nredis采用的是定期删除+惰性删除策略\n- 定期删除：Redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 Key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机？假如 Redis 存了几十万个 Key ，每隔 100ms 就遍历所有的设置过期时间的 Key 的话，就会给 CPU 带来很大的负载\n- 惰性删除 ：定期删除可能会导致很多过期 Key 到了时间并没有被删除掉。所以就有了惰性删除，也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除\n\n- 内存淘汰机制： 在redis配置文件中配置 # maxmemory-policy volatile-lru\nRedis 提供 6 种数据淘汰策略：\n\n\n    - volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n    - volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n    - volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n    - allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）\n    - allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n    - no-enviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错\n\n#### 持久化机制\nRedis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file，AOF）。\n\n- RDB 快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\n```python\nsave 900 1              #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\nsave 300 10            #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\nsave 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n```\n- AOF\n与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案\n默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：\n```python\nappendonly yes\n```\n开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。\n\nAOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\n\n在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：\n```python\nappendfsync always     #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度\nappendfsync everysec  #每秒钟同步一次，显示地将多个写命令同步到硬盘\nappendfsync no      #让操作系统决定何时进行同步\n```\n为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。\n\n- Redis 4.0 对于持久化机制的优化\n\nRedis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。\n\n如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。\n\n这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。\n\n当然缺点也是有的，AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。\n\n#### 缓存雪崩\n当缓存失效(过期)后引起系统性能急剧下降的情况\n\n解决方案：\n- 更新锁机制\n    ```\n    对缓存更新操作进行加锁保护，保证只有一个线程进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么返回一个空值或者默认值\n    ```\n- 后台更新机制\n    ```\n    由后台线程更新缓存， 不是由业务来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存\n    ```\n- 给缓存的失效时间加一个随机值，避免集体失效\n- 使用双缓存，缓存A和B,A设置失效时间，B不设置失效\n    ```\n    - 从缓存A读取数据，有就返回\n    - A没有数据，直接从B读取数据，直接返回，并异步启动一个更新线程\n    - 更新线程同时更新A，B的缓存数据\n    ```\n#### 缓存穿透\n请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉\n\n解决方案：\n- 利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试\n- 采用异步更新策略，无论key是否取到值，都直接返回，如果查询返回的数据为空也缓存清理。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作\n\n#### 如何解决redis的并发竞争key问题\n所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 Key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同\n\n推荐方案： 分布式锁（ZooKeeper 和 Redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能），大家去抢锁，抢到锁就做set操作即可；\n\n#### redis和数据库双写一致性问题\n首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列\n#### 参考链接\n- http://www.redis.cn/topics/data-types-intro.html#strings\n\n\n","source":"_posts/redis-advance.md","raw":"---\ntitle: 运维 Redis进阶\ndate: 2018-09-28 21:14:53\ntags:\n  - Redis\ncategories:\n  - 运维\n---\nRedis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发\n\n#### 使用redis目的\n- 高性能：将数据缓存在redis中，访问数据从缓存中取，不直接访问数据库，提高页面响应效率\n- 高并发：在大的并发情况下，直接操作缓存能够承受的请求远大于直接访问数据库，这时我们需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库\n\n#### 一般应用场景\n\n- 缓存-热数据：需要执行耗时久，计算结果不频繁变动的sql查询\n- 异步队列\n- 计数器：如统计点击数，INCRBY\n- 分布式锁与单线程机制\n- 最新列表：使用LPUSH命令构建List\n- 排行榜应用： 使用ZADD(有续集，sorted set)\n- 位操作(大数据处理)\n\n#### 单线程的redis为什么快\n- 纯内存操作\n- 单线程操作，避免了频繁的上下文切换\n- 采用非阻塞I/O多路复用机制\n    \n    ```\n    在redis服务端，启用了I/O多路复用机制，将其置于队列中，然后文件事件分发器依次去队列中去取，转发到不同的事件处理器中处理\n    ```\n\n#### 常见数据结构和使用场景\n- String \n\n常用的命令： set、get、decr、incr、mget、mset\nString 数据结构是简单的 Key-Value 类型，Value 可为字符和数值和其他类型的值\n```python\n# 设置和获取key-value\nset mykey ttxsgoto\nget mykey\n \n# 原子递增\nset counter 100\nincr counter ((integer) 101)\n \n# 一次性存储和获取多个key对应的值,mget 命令返回由值组成的数组\n127.0.0.1:6379> mset a 10 b 20 c 30\n127.0.0.1:6379> mget a b c\n1) \"10\"\n2) \"20\"\n3) \"30\"\n127.0.0.1:6379> keys *\n1) \"ttxs\"\n2) \"c\"\n3) \"a\"\n4) \"counter\"\n5) \"b\"\n6) \"mykey\"\n127.0.0.1:6379> exists a\n(integer) 1\n127.0.0.1:6379> exists x\n(integer) 0\n127.0.0.1:6379> type a\nstring\n127.0.0.1:6379> del a\n(integer) 1\n \n# 设置过期时间\n127.0.0.1:6379> get b\n\"20\"\n127.0.0.1:6379> expire b 5\n(integer) 1\n127.0.0.1:6379> get b\n(nil)\n127.0.0.1:6379> set bbb 1000 ex 100\nOK\n# 查看过期时间\n127.0.0.1:6379> ttl bbb\n(integer) 95\n```\n\n- Hash\n\n常用命令：hget、hset、 hmget、hmset、hgetall\nHash 是一个 String 类型的 Field 和 Value 的映射表，Hash 特别适合用于存储对象；后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值\n```python\n# 由键值对组成\n127.0.0.1:6379> hmset user:1000 username antirez birthyear 1977 verified 1\nOK\n127.0.0.1:6379> hget user:1000 username\n\"antirez\"\n127.0.0.1:6379> hgetall user:1000\n1) \"username\"\n2) \"antirez\"\n3) \"birthyear\"\n4) \"1977\"\n5) \"verified\"\n6) \"1\"\n \n# 返回多个值\n127.0.0.1:6379> hmget user:1000 username birthyear xxx\n1) \"antirez\"\n2) \"1977\"\n3) (nil)\n \n```\n- List\n\n常用命令：lpush、rpush、lpop、rpop、lrange\nList 就是链表，Redis List 的应用场景非常多，也是 Redis 最重要的数据结构之一\nRedis List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销\n另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 List 实现分页查询\n\n```python\n# lpush 向list的左边（头部）添加一个新元素\n# rpush 向list的右边（尾部）添加一个新元素\n# lrange 从list中取出一定范围的元素\n127.0.0.1:6379> rpush mylist A\n(integer) 1\n127.0.0.1:6379> rpush mylist B\n(integer) 2\n127.0.0.1:6379> lpush mylist first\n(integer) 3\n# \n127.0.0.1:6379> lrange mylist 0 -1\n1) \"first\"\n2) \"A\"\n3) \"B\"\n# 写入多个值\n127.0.0.1:6379> rpush mylist 1 2 3 4 5 \"foo bar\"\n(integer) 9\n127.0.0.1:6379> lrange mylist 0 -1\n1) \"first\"\n2) \"A\"\n3) \"B\"\n4) \"1\"\n5) \"2\"\n6) \"3\"\n7) \"4\"\n8) \"5\"\n9) \"foo bar\"\n \n127.0.0.1:6379> rpush mylist001 a b c\n# 删除元素并同时返回删除的值\n127.0.0.1:6379> rpop mylist001\n\"c\"\n \n# ltrim把list从左边截取指定长度\n127.0.0.1:6379> ltrim mylist 0 2\nOK\n127.0.0.1:6379> LRANGE mylist 0 -1\n1) \"first\"\n2) \"A\"\n3) \"B\"\n# 查看list中元素的个数\n127.0.0.1:6379> llen mylist\n(integer) 6\n127.0.0.1:6379> del mylist\n(integer) 1\n```\n- Set\n\n常用命令：sadd、spop、smembers、sunion\nSet 对外提供的功能与 List 类似是一个列表的功能，特殊之处在于 Set 是可以自动排重\n当你需要存储一个列表数据，又不希望出现重复数据时，可以使用Set，同时也支持交集、并集、差集操作\n```python\n# 添加\n127.0.0.1:6379> sadd myset 1 2 3\n(integer) 3\n# 查看所有\n127.0.0.1:6379> smembers myset\n1) \"1\"\n2) \"2\"\n3) \"3\"\n# 检查元素是否存在\n127.0.0.1:6379> sismember myset 1\n(integer) 1\n127.0.0.1:6379> sismember myset 4\n(integer) 0\n \n```\n- Sorted Set\n\n常用命令：zadd、zrange、zrem、zcard \n和 Set 相比，Sorted Set 增加了一个权重参数 Score，使得集合中的元素能够按 Score 进行有序排列\n```python\n# zadd 添加\n127.0.0.1:6379> zadd hackers 1940 \"Alan Kay\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1957 \"Sophie Wilson\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1953 \"Richard Stallman\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1949 \"Anita Borg\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1965 \"Yukihiro Matsumoto\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1914 \"Hedy Lamarr\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1916 \"Claude Shannon\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1969 \"Linus Torvalds\"\n(integer) 1\n127.0.0.1:6379> zadd hackers 1912 \"Alan Turing\"\n(integer) 1\n \n# 查看数据\n127.0.0.1:6379> zrange hackers 0 -1\n1) \"Alan Turing\"\n2) \"Hedy Lamarr\"\n3) \"Claude Shannon\"\n4) \"Alan Kay\"\n5) \"Anita Borg\"\n6) \"Richard Stallman\"\n7) \"Sophie Wilson\"\n8) \"Yukihiro Matsumoto\"\n9) \"Linus Torvalds\"\n \n# 反向查看数据\n127.0.0.1:6379> zrevrange hackers 0 -1\n1) \"Linus Torvalds\"\n2) \"Yukihiro Matsumoto\"\n3) \"Sophie Wilson\"\n4) \"Richard Stallman\"\n5) \"Anita Borg\"\n6) \"Alan Kay\"\n7) \"Claude Shannon\"\n8) \"Hedy Lamarr\"\n9) \"Alan Turing\"\n \n# 查看对应的得分\n127.0.0.1:6379> zrange hackers 0 -1 withscores\n 1) \"Alan Turing\"\n 2) \"1912\"\n 3) \"Hedy Lamarr\"\n 4) \"1914\"\n 5) \"Claude Shannon\"\n 6) \"1916\"\n 7) \"Alan Kay\"\n 8) \"1940\"\n 9) \"Anita Borg\"\n10) \"1949\"\n11) \"Richard Stallman\"\n12) \"1953\"\n13) \"Sophie Wilson\"\n14) \"1957\"\n15) \"Yukihiro Matsumoto\"\n16) \"1965\"\n17) \"Linus Torvalds\"\n18) \"1969\"\n  \n# 小于1950的数据\n127.0.0.1:6379> zrangebyscore hackers -inf 1950\n1) \"Alan Turing\"\n2) \"Hedy Lamarr\"\n3) \"Claude Shannon\"\n4) \"Alan Kay\"\n5) \"Anita Borg\"\n```\n#### 过期策略以及内存淘汰机制\nredis采用的是定期删除+惰性删除策略\n- 定期删除：Redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 Key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机？假如 Redis 存了几十万个 Key ，每隔 100ms 就遍历所有的设置过期时间的 Key 的话，就会给 CPU 带来很大的负载\n- 惰性删除 ：定期删除可能会导致很多过期 Key 到了时间并没有被删除掉。所以就有了惰性删除，也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除\n\n- 内存淘汰机制： 在redis配置文件中配置 # maxmemory-policy volatile-lru\nRedis 提供 6 种数据淘汰策略：\n\n\n    - volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n    - volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n    - volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n    - allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）\n    - allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n    - no-enviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错\n\n#### 持久化机制\nRedis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file，AOF）。\n\n- RDB 快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\n```python\nsave 900 1              #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\nsave 300 10            #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\nsave 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n```\n- AOF\n与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案\n默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：\n```python\nappendonly yes\n```\n开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。\n\nAOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\n\n在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：\n```python\nappendfsync always     #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度\nappendfsync everysec  #每秒钟同步一次，显示地将多个写命令同步到硬盘\nappendfsync no      #让操作系统决定何时进行同步\n```\n为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。\n\n- Redis 4.0 对于持久化机制的优化\n\nRedis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。\n\n如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。\n\n这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。\n\n当然缺点也是有的，AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。\n\n#### 缓存雪崩\n当缓存失效(过期)后引起系统性能急剧下降的情况\n\n解决方案：\n- 更新锁机制\n    ```\n    对缓存更新操作进行加锁保护，保证只有一个线程进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么返回一个空值或者默认值\n    ```\n- 后台更新机制\n    ```\n    由后台线程更新缓存， 不是由业务来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存\n    ```\n- 给缓存的失效时间加一个随机值，避免集体失效\n- 使用双缓存，缓存A和B,A设置失效时间，B不设置失效\n    ```\n    - 从缓存A读取数据，有就返回\n    - A没有数据，直接从B读取数据，直接返回，并异步启动一个更新线程\n    - 更新线程同时更新A，B的缓存数据\n    ```\n#### 缓存穿透\n请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉\n\n解决方案：\n- 利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试\n- 采用异步更新策略，无论key是否取到值，都直接返回，如果查询返回的数据为空也缓存清理。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作\n\n#### 如何解决redis的并发竞争key问题\n所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 Key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同\n\n推荐方案： 分布式锁（ZooKeeper 和 Redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能），大家去抢锁，抢到锁就做set操作即可；\n\n#### redis和数据库双写一致性问题\n首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列\n#### 参考链接\n- http://www.redis.cn/topics/data-types-intro.html#strings\n\n\n","slug":"redis-advance","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5y10053ct8uiudkzdy0","content":"<p>Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发</p>\n<h4 id=\"使用redis目的\"><a href=\"#使用redis目的\" class=\"headerlink\" title=\"使用redis目的\"></a>使用redis目的</h4><ul>\n<li>高性能：将数据缓存在redis中，访问数据从缓存中取，不直接访问数据库，提高页面响应效率</li>\n<li>高并发：在大的并发情况下，直接操作缓存能够承受的请求远大于直接访问数据库，这时我们需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库</li>\n</ul>\n<h4 id=\"一般应用场景\"><a href=\"#一般应用场景\" class=\"headerlink\" title=\"一般应用场景\"></a>一般应用场景</h4><ul>\n<li>缓存-热数据：需要执行耗时久，计算结果不频繁变动的sql查询</li>\n<li>异步队列</li>\n<li>计数器：如统计点击数，INCRBY</li>\n<li>分布式锁与单线程机制</li>\n<li>最新列表：使用LPUSH命令构建List</li>\n<li>排行榜应用： 使用ZADD(有续集，sorted set)</li>\n<li>位操作(大数据处理)</li>\n</ul>\n<h4 id=\"单线程的redis为什么快\"><a href=\"#单线程的redis为什么快\" class=\"headerlink\" title=\"单线程的redis为什么快\"></a>单线程的redis为什么快</h4><ul>\n<li>纯内存操作</li>\n<li>单线程操作，避免了频繁的上下文切换</li>\n<li><p>采用非阻塞I/O多路复用机制</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在redis服务端，启用了I/O多路复用机制，将其置于队列中，然后文件事件分发器依次去队列中去取，转发到不同的事件处理器中处理</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"常见数据结构和使用场景\"><a href=\"#常见数据结构和使用场景\" class=\"headerlink\" title=\"常见数据结构和使用场景\"></a>常见数据结构和使用场景</h4><ul>\n<li>String </li>\n</ul>\n<p>常用的命令： set、get、decr、incr、mget、mset<br>String 数据结构是简单的 Key-Value 类型，Value 可为字符和数值和其他类型的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置和获取key-value</span></div><div class=\"line\">set mykey ttxsgoto</div><div class=\"line\">get mykey</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 原子递增</span></div><div class=\"line\">set counter <span class=\"number\">100</span></div><div class=\"line\">incr counter ((integer) <span class=\"number\">101</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 一次性存储和获取多个key对应的值,mget 命令返回由值组成的数组</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; mset a <span class=\"number\">10</span> b <span class=\"number\">20</span> c <span class=\"number\">30</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; mget a b c</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"10\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"20\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"30\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; keys *</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"ttxs\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"c\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"a\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"counter\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"b\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"mykey\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; exists a</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; exists x</div><div class=\"line\">(integer) <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; type a</div><div class=\"line\">string</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; <span class=\"keyword\">del</span> a</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置过期时间</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get b</div><div class=\"line\"><span class=\"string\">\"20\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; expire b <span class=\"number\">5</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get b</div><div class=\"line\">(nil)</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; set bbb <span class=\"number\">1000</span> ex <span class=\"number\">100</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"comment\"># 查看过期时间</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ttl bbb</div><div class=\"line\">(integer) <span class=\"number\">95</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>Hash</li>\n</ul>\n<p>常用命令：hget、hset、 hmget、hmset、hgetall<br>Hash 是一个 String 类型的 Field 和 Value 的映射表，Hash 特别适合用于存储对象；后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 由键值对组成</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hmset user:<span class=\"number\">1000</span> username antirez birthyear <span class=\"number\">1977</span> verified <span class=\"number\">1</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hget user:<span class=\"number\">1000</span> username</div><div class=\"line\"><span class=\"string\">\"antirez\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hgetall user:<span class=\"number\">1000</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"username\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"antirez\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"birthyear\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"1977\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"verified\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"1\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 返回多个值</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hmget user:<span class=\"number\">1000</span> username birthyear xxx</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"antirez\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"1977\"</span></div><div class=\"line\"><span class=\"number\">3</span>) (nil)</div></pre></td></tr></table></figure></p>\n<ul>\n<li>List</li>\n</ul>\n<p>常用命令：lpush、rpush、lpop、rpop、lrange<br>List 就是链表，Redis List 的应用场景非常多，也是 Redis 最重要的数据结构之一<br>Redis List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销<br>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 List 实现分页查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># lpush 向list的左边（头部）添加一个新元素</span></div><div class=\"line\"><span class=\"comment\"># rpush 向list的右边（尾部）添加一个新元素</span></div><div class=\"line\"><span class=\"comment\"># lrange 从list中取出一定范围的元素</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist A</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist B</div><div class=\"line\">(integer) <span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; lpush mylist first</div><div class=\"line\">(integer) <span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; lrange mylist <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"first\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"B\"</span></div><div class=\"line\"><span class=\"comment\"># 写入多个值</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"string\">\"foo bar\"</span></div><div class=\"line\">(integer) <span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; lrange mylist <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"first\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"B\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"2\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"3\"</span></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"4\"</span></div><div class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"5\"</span></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"string\">\"foo bar\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist001 a b c</div><div class=\"line\"><span class=\"comment\"># 删除元素并同时返回删除的值</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpop mylist001</div><div class=\"line\"><span class=\"string\">\"c\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ltrim把list从左边截取指定长度</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ltrim mylist <span class=\"number\">0</span> <span class=\"number\">2</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; LRANGE mylist <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"first\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"B\"</span></div><div class=\"line\"><span class=\"comment\"># 查看list中元素的个数</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; llen mylist</div><div class=\"line\">(integer) <span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; <span class=\"keyword\">del</span> mylist</div><div class=\"line\">(integer) <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Set</li>\n</ul>\n<p>常用命令：sadd、spop、smembers、sunion<br>Set 对外提供的功能与 List 类似是一个列表的功能，特殊之处在于 Set 是可以自动排重<br>当你需要存储一个列表数据，又不希望出现重复数据时，可以使用Set，同时也支持交集、并集、差集操作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; sadd myset <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></div><div class=\"line\">(integer) <span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\"># 查看所有</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; smembers myset</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"2\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"3\"</span></div><div class=\"line\"><span class=\"comment\"># 检查元素是否存在</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; sismember myset <span class=\"number\">1</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; sismember myset <span class=\"number\">4</span></div><div class=\"line\">(integer) <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>Sorted Set</li>\n</ul>\n<p>常用命令：zadd、zrange、zrem、zcard<br>和 Set 相比，Sorted Set 增加了一个权重参数 Score，使得集合中的元素能够按 Score 进行有序排列<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># zadd 添加</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1940</span> <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1957</span> <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1953</span> <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1949</span> <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1965</span> <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1914</span> <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1916</span> <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1969</span> <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1912</span> <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 查看数据</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrange hackers <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 反向查看数据</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrevrange hackers <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 查看对应的得分</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrange hackers <span class=\"number\">0</span> <span class=\"number\">-1</span> withscores</div><div class=\"line\"> <span class=\"number\">1</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"> <span class=\"number\">2</span>) <span class=\"string\">\"1912\"</span></div><div class=\"line\"> <span class=\"number\">3</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"> <span class=\"number\">4</span>) <span class=\"string\">\"1914\"</span></div><div class=\"line\"> <span class=\"number\">5</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"> <span class=\"number\">6</span>) <span class=\"string\">\"1916\"</span></div><div class=\"line\"> <span class=\"number\">7</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"> <span class=\"number\">8</span>) <span class=\"string\">\"1940\"</span></div><div class=\"line\"> <span class=\"number\">9</span>) <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\"><span class=\"number\">10</span>) <span class=\"string\">\"1949\"</span></div><div class=\"line\"><span class=\"number\">11</span>) <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\"><span class=\"number\">12</span>) <span class=\"string\">\"1953\"</span></div><div class=\"line\"><span class=\"number\">13</span>) <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\"><span class=\"number\">14</span>) <span class=\"string\">\"1957\"</span></div><div class=\"line\"><span class=\"number\">15</span>) <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\"><span class=\"number\">16</span>) <span class=\"string\">\"1965\"</span></div><div class=\"line\"><span class=\"number\">17</span>) <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\"><span class=\"number\">18</span>) <span class=\"string\">\"1969\"</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\"># 小于1950的数据</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrangebyscore hackers -inf <span class=\"number\">1950</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"Anita Borg\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"过期策略以及内存淘汰机制\"><a href=\"#过期策略以及内存淘汰机制\" class=\"headerlink\" title=\"过期策略以及内存淘汰机制\"></a>过期策略以及内存淘汰机制</h4><p>redis采用的是定期删除+惰性删除策略</p>\n<ul>\n<li>定期删除：Redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 Key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机？假如 Redis 存了几十万个 Key ，每隔 100ms 就遍历所有的设置过期时间的 Key 的话，就会给 CPU 带来很大的负载</li>\n<li><p>惰性删除 ：定期删除可能会导致很多过期 Key 到了时间并没有被删除掉。所以就有了惰性删除，也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除</p>\n</li>\n<li><p>内存淘汰机制： 在redis配置文件中配置 # maxmemory-policy volatile-lru<br>Redis 提供 6 种数据淘汰策略：</p>\n</li>\n</ul>\n<pre><code>- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n- allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）\n- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n- no-enviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错\n</code></pre><h4 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h4><p>Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file，AOF）。</p>\n<ul>\n<li><p>RDB 快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">save <span class=\"number\">900</span> <span class=\"number\">1</span>              <span class=\"comment\">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class=\"line\">save <span class=\"number\">300</span> <span class=\"number\">10</span>            <span class=\"comment\">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class=\"line\">save <span class=\"number\">60</span> <span class=\"number\">10000</span>        <span class=\"comment\">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>AOF<br>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案<br>默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendonly yes</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。</p>\n<p>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。</p>\n<p>在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendfsync always     <span class=\"comment\">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span></div><div class=\"line\">appendfsync everysec  <span class=\"comment\">#每秒钟同步一次，显示地将多个写命令同步到硬盘</span></div><div class=\"line\">appendfsync no      <span class=\"comment\">#让操作系统决定何时进行同步</span></div></pre></td></tr></table></figure></p>\n<p>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。</p>\n<ul>\n<li>Redis 4.0 对于持久化机制的优化</li>\n</ul>\n<p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。</p>\n<p>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。</p>\n<p>这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。</p>\n<p>当然缺点也是有的，AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>\n<h4 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h4><p>当缓存失效(过期)后引起系统性能急剧下降的情况</p>\n<p>解决方案：</p>\n<ul>\n<li><p>更新锁机制</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">对缓存更新操作进行加锁保护，保证只有一个线程进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么返回一个空值或者默认值</div></pre></td></tr></table></figure>\n</li>\n<li><p>后台更新机制</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">由后台线程更新缓存， 不是由业务来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存</div></pre></td></tr></table></figure>\n</li>\n<li><p>给缓存的失效时间加一个随机值，避免集体失效</p>\n</li>\n<li>使用双缓存，缓存A和B,A设置失效时间，B不设置失效  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 从缓存A读取数据，有就返回</div><div class=\"line\">- A没有数据，直接从B读取数据，直接返回，并异步启动一个更新线程</div><div class=\"line\">- 更新线程同时更新A，B的缓存数据</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h4><p>请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>\n<p>解决方案：</p>\n<ul>\n<li>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</li>\n<li>采用异步更新策略，无论key是否取到值，都直接返回，如果查询返回的数据为空也缓存清理。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作</li>\n</ul>\n<h4 id=\"如何解决redis的并发竞争key问题\"><a href=\"#如何解决redis的并发竞争key问题\" class=\"headerlink\" title=\"如何解决redis的并发竞争key问题\"></a>如何解决redis的并发竞争key问题</h4><p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 Key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同</p>\n<p>推荐方案： 分布式锁（ZooKeeper 和 Redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能），大家去抢锁，抢到锁就做set操作即可；</p>\n<h4 id=\"redis和数据库双写一致性问题\"><a href=\"#redis和数据库双写一致性问题\" class=\"headerlink\" title=\"redis和数据库双写一致性问题\"></a>redis和数据库双写一致性问题</h4><p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列</p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"http://www.redis.cn/topics/data-types-intro.html#strings\" target=\"_blank\" rel=\"external\">http://www.redis.cn/topics/data-types-intro.html#strings</a></li>\n</ul>\n","excerpt":"","more":"<p>Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发</p>\n<h4 id=\"使用redis目的\"><a href=\"#使用redis目的\" class=\"headerlink\" title=\"使用redis目的\"></a>使用redis目的</h4><ul>\n<li>高性能：将数据缓存在redis中，访问数据从缓存中取，不直接访问数据库，提高页面响应效率</li>\n<li>高并发：在大的并发情况下，直接操作缓存能够承受的请求远大于直接访问数据库，这时我们需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库</li>\n</ul>\n<h4 id=\"一般应用场景\"><a href=\"#一般应用场景\" class=\"headerlink\" title=\"一般应用场景\"></a>一般应用场景</h4><ul>\n<li>缓存-热数据：需要执行耗时久，计算结果不频繁变动的sql查询</li>\n<li>异步队列</li>\n<li>计数器：如统计点击数，INCRBY</li>\n<li>分布式锁与单线程机制</li>\n<li>最新列表：使用LPUSH命令构建List</li>\n<li>排行榜应用： 使用ZADD(有续集，sorted set)</li>\n<li>位操作(大数据处理)</li>\n</ul>\n<h4 id=\"单线程的redis为什么快\"><a href=\"#单线程的redis为什么快\" class=\"headerlink\" title=\"单线程的redis为什么快\"></a>单线程的redis为什么快</h4><ul>\n<li>纯内存操作</li>\n<li>单线程操作，避免了频繁的上下文切换</li>\n<li><p>采用非阻塞I/O多路复用机制</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在redis服务端，启用了I/O多路复用机制，将其置于队列中，然后文件事件分发器依次去队列中去取，转发到不同的事件处理器中处理</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"常见数据结构和使用场景\"><a href=\"#常见数据结构和使用场景\" class=\"headerlink\" title=\"常见数据结构和使用场景\"></a>常见数据结构和使用场景</h4><ul>\n<li>String </li>\n</ul>\n<p>常用的命令： set、get、decr、incr、mget、mset<br>String 数据结构是简单的 Key-Value 类型，Value 可为字符和数值和其他类型的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置和获取key-value</span></div><div class=\"line\">set mykey ttxsgoto</div><div class=\"line\">get mykey</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 原子递增</span></div><div class=\"line\">set counter <span class=\"number\">100</span></div><div class=\"line\">incr counter ((integer) <span class=\"number\">101</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 一次性存储和获取多个key对应的值,mget 命令返回由值组成的数组</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; mset a <span class=\"number\">10</span> b <span class=\"number\">20</span> c <span class=\"number\">30</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; mget a b c</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"10\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"20\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"30\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; keys *</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"ttxs\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"c\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"a\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"counter\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"b\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"mykey\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; exists a</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; exists x</div><div class=\"line\">(integer) <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; type a</div><div class=\"line\">string</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; <span class=\"keyword\">del</span> a</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 设置过期时间</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get b</div><div class=\"line\"><span class=\"string\">\"20\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; expire b <span class=\"number\">5</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get b</div><div class=\"line\">(nil)</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; set bbb <span class=\"number\">1000</span> ex <span class=\"number\">100</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"comment\"># 查看过期时间</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ttl bbb</div><div class=\"line\">(integer) <span class=\"number\">95</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>Hash</li>\n</ul>\n<p>常用命令：hget、hset、 hmget、hmset、hgetall<br>Hash 是一个 String 类型的 Field 和 Value 的映射表，Hash 特别适合用于存储对象；后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 由键值对组成</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hmset user:<span class=\"number\">1000</span> username antirez birthyear <span class=\"number\">1977</span> verified <span class=\"number\">1</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hget user:<span class=\"number\">1000</span> username</div><div class=\"line\"><span class=\"string\">\"antirez\"</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hgetall user:<span class=\"number\">1000</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"username\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"antirez\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"birthyear\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"1977\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"verified\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"1\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 返回多个值</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; hmget user:<span class=\"number\">1000</span> username birthyear xxx</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"antirez\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"1977\"</span></div><div class=\"line\"><span class=\"number\">3</span>) (nil)</div></pre></td></tr></table></figure></p>\n<ul>\n<li>List</li>\n</ul>\n<p>常用命令：lpush、rpush、lpop、rpop、lrange<br>List 就是链表，Redis List 的应用场景非常多，也是 Redis 最重要的数据结构之一<br>Redis List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销<br>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 List 实现分页查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># lpush 向list的左边（头部）添加一个新元素</span></div><div class=\"line\"><span class=\"comment\"># rpush 向list的右边（尾部）添加一个新元素</span></div><div class=\"line\"><span class=\"comment\"># lrange 从list中取出一定范围的元素</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist A</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist B</div><div class=\"line\">(integer) <span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; lpush mylist first</div><div class=\"line\">(integer) <span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; lrange mylist <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"first\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"B\"</span></div><div class=\"line\"><span class=\"comment\"># 写入多个值</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"string\">\"foo bar\"</span></div><div class=\"line\">(integer) <span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; lrange mylist <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"first\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"B\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"2\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"3\"</span></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"4\"</span></div><div class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"5\"</span></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"string\">\"foo bar\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpush mylist001 a b c</div><div class=\"line\"><span class=\"comment\"># 删除元素并同时返回删除的值</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; rpop mylist001</div><div class=\"line\"><span class=\"string\">\"c\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># ltrim把list从左边截取指定长度</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ltrim mylist <span class=\"number\">0</span> <span class=\"number\">2</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; LRANGE mylist <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"first\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"B\"</span></div><div class=\"line\"><span class=\"comment\"># 查看list中元素的个数</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; llen mylist</div><div class=\"line\">(integer) <span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; <span class=\"keyword\">del</span> mylist</div><div class=\"line\">(integer) <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Set</li>\n</ul>\n<p>常用命令：sadd、spop、smembers、sunion<br>Set 对外提供的功能与 List 类似是一个列表的功能，特殊之处在于 Set 是可以自动排重<br>当你需要存储一个列表数据，又不希望出现重复数据时，可以使用Set，同时也支持交集、并集、差集操作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; sadd myset <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></div><div class=\"line\">(integer) <span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\"># 查看所有</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; smembers myset</div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"2\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"3\"</span></div><div class=\"line\"><span class=\"comment\"># 检查元素是否存在</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; sismember myset <span class=\"number\">1</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; sismember myset <span class=\"number\">4</span></div><div class=\"line\">(integer) <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>Sorted Set</li>\n</ul>\n<p>常用命令：zadd、zrange、zrem、zcard<br>和 Set 相比，Sorted Set 增加了一个权重参数 Score，使得集合中的元素能够按 Score 进行有序排列<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># zadd 添加</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1940</span> <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1957</span> <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1953</span> <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1949</span> <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1965</span> <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1914</span> <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1916</span> <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1969</span> <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zadd hackers <span class=\"number\">1912</span> <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 查看数据</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrange hackers <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 反向查看数据</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrevrange hackers <span class=\"number\">0</span> <span class=\"number\">-1</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 查看对应的得分</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrange hackers <span class=\"number\">0</span> <span class=\"number\">-1</span> withscores</div><div class=\"line\"> <span class=\"number\">1</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"> <span class=\"number\">2</span>) <span class=\"string\">\"1912\"</span></div><div class=\"line\"> <span class=\"number\">3</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"> <span class=\"number\">4</span>) <span class=\"string\">\"1914\"</span></div><div class=\"line\"> <span class=\"number\">5</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"> <span class=\"number\">6</span>) <span class=\"string\">\"1916\"</span></div><div class=\"line\"> <span class=\"number\">7</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"> <span class=\"number\">8</span>) <span class=\"string\">\"1940\"</span></div><div class=\"line\"> <span class=\"number\">9</span>) <span class=\"string\">\"Anita Borg\"</span></div><div class=\"line\"><span class=\"number\">10</span>) <span class=\"string\">\"1949\"</span></div><div class=\"line\"><span class=\"number\">11</span>) <span class=\"string\">\"Richard Stallman\"</span></div><div class=\"line\"><span class=\"number\">12</span>) <span class=\"string\">\"1953\"</span></div><div class=\"line\"><span class=\"number\">13</span>) <span class=\"string\">\"Sophie Wilson\"</span></div><div class=\"line\"><span class=\"number\">14</span>) <span class=\"string\">\"1957\"</span></div><div class=\"line\"><span class=\"number\">15</span>) <span class=\"string\">\"Yukihiro Matsumoto\"</span></div><div class=\"line\"><span class=\"number\">16</span>) <span class=\"string\">\"1965\"</span></div><div class=\"line\"><span class=\"number\">17</span>) <span class=\"string\">\"Linus Torvalds\"</span></div><div class=\"line\"><span class=\"number\">18</span>) <span class=\"string\">\"1969\"</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\"># 小于1950的数据</span></div><div class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; zrangebyscore hackers -inf <span class=\"number\">1950</span></div><div class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Alan Turing\"</span></div><div class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"Hedy Lamarr\"</span></div><div class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Claude Shannon\"</span></div><div class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"Alan Kay\"</span></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"Anita Borg\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"过期策略以及内存淘汰机制\"><a href=\"#过期策略以及内存淘汰机制\" class=\"headerlink\" title=\"过期策略以及内存淘汰机制\"></a>过期策略以及内存淘汰机制</h4><p>redis采用的是定期删除+惰性删除策略</p>\n<ul>\n<li>定期删除：Redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 Key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机？假如 Redis 存了几十万个 Key ，每隔 100ms 就遍历所有的设置过期时间的 Key 的话，就会给 CPU 带来很大的负载</li>\n<li><p>惰性删除 ：定期删除可能会导致很多过期 Key 到了时间并没有被删除掉。所以就有了惰性删除，也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除</p>\n</li>\n<li><p>内存淘汰机制： 在redis配置文件中配置 # maxmemory-policy volatile-lru<br>Redis 提供 6 种数据淘汰策略：</p>\n</li>\n</ul>\n<pre><code>- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n- allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）\n- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n- no-enviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错\n</code></pre><h4 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h4><p>Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file，AOF）。</p>\n<ul>\n<li><p>RDB 快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">save <span class=\"number\">900</span> <span class=\"number\">1</span>              <span class=\"comment\">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class=\"line\">save <span class=\"number\">300</span> <span class=\"number\">10</span>            <span class=\"comment\">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class=\"line\">save <span class=\"number\">60</span> <span class=\"number\">10000</span>        <span class=\"comment\">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>AOF<br>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案<br>默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendonly yes</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。</p>\n<p>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。</p>\n<p>在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendfsync always     <span class=\"comment\">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span></div><div class=\"line\">appendfsync everysec  <span class=\"comment\">#每秒钟同步一次，显示地将多个写命令同步到硬盘</span></div><div class=\"line\">appendfsync no      <span class=\"comment\">#让操作系统决定何时进行同步</span></div></pre></td></tr></table></figure></p>\n<p>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。</p>\n<ul>\n<li>Redis 4.0 对于持久化机制的优化</li>\n</ul>\n<p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。</p>\n<p>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。</p>\n<p>这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。</p>\n<p>当然缺点也是有的，AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>\n<h4 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h4><p>当缓存失效(过期)后引起系统性能急剧下降的情况</p>\n<p>解决方案：</p>\n<ul>\n<li><p>更新锁机制</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">对缓存更新操作进行加锁保护，保证只有一个线程进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么返回一个空值或者默认值</div></pre></td></tr></table></figure>\n</li>\n<li><p>后台更新机制</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">由后台线程更新缓存， 不是由业务来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存</div></pre></td></tr></table></figure>\n</li>\n<li><p>给缓存的失效时间加一个随机值，避免集体失效</p>\n</li>\n<li>使用双缓存，缓存A和B,A设置失效时间，B不设置失效  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 从缓存A读取数据，有就返回</div><div class=\"line\">- A没有数据，直接从B读取数据，直接返回，并异步启动一个更新线程</div><div class=\"line\">- 更新线程同时更新A，B的缓存数据</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h4><p>请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>\n<p>解决方案：</p>\n<ul>\n<li>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</li>\n<li>采用异步更新策略，无论key是否取到值，都直接返回，如果查询返回的数据为空也缓存清理。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作</li>\n</ul>\n<h4 id=\"如何解决redis的并发竞争key问题\"><a href=\"#如何解决redis的并发竞争key问题\" class=\"headerlink\" title=\"如何解决redis的并发竞争key问题\"></a>如何解决redis的并发竞争key问题</h4><p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 Key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同</p>\n<p>推荐方案： 分布式锁（ZooKeeper 和 Redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能），大家去抢锁，抢到锁就做set操作即可；</p>\n<h4 id=\"redis和数据库双写一致性问题\"><a href=\"#redis和数据库双写一致性问题\" class=\"headerlink\" title=\"redis和数据库双写一致性问题\"></a>redis和数据库双写一致性问题</h4><p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列</p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"http://www.redis.cn/topics/data-types-intro.html#strings\">http://www.redis.cn/topics/data-types-intro.html#strings</a></li>\n</ul>\n"},{"title":"(转)优化DRF的性能","date":"2018-04-14T04:05:12.000Z","_content":"看似简单直观的 Django REST Framework 及其[嵌套序列化](http://www.django-rest-framework.org/api-guide/relations/#nested-relationships)可能会大大降低你的 API 端的性能。你的服务器的其他部分的响应能力也会被某一个低效的 REST API 影响\n问题的根源就是 「N+1 selects problem」；首先查询数据库一次得到表中的数据（例如，Customers），然后每个用户的其他字段又需要循环不止一次地查询数据库（例如 customer.country.Name）。使用 Django 的 ORM，很容易造成这个问题，而使用 DRF，同样会造成这个问题。\n\n幸运的是，目前有修复 Django REST Framework 性能问题的解决方法，而且不需要对代码进行重大重组。它只是需要使用未充分利用的 select_related 和 prefetch_related 方法来执行所谓的「预加载」。\n\n#### 为什么 Django REST Framework 那么容易造成这个问题\n\n当你建立一个 DRF 视图时，你经常需要从多个相关表中返回相应的数据。写这样的功能是很简单的，DRF文档中有详细的介绍。不过不幸的是，只要你在序列化中使用嵌套关系，你就在拿你的性能开玩笑，像很多的性能问题一样，它往往只出现有大型数据集的真实生产环境中。\n\n这种情况发生就是因为 Django 的 ORM 是惰性的，它只取出当前查询所需响应最小的数据。它不知道你是否有成百上千的相同或相似的数据也需要取出来。\n\n况且如今，当我们谈到数据库型网站时，一般情况下，最重要的响应指标就是数据库的访问次数。\n\n在 DRF 视图中，我们每次序列化有嵌套关系的数据时都会出现问题，如下面的例子：\n```python\nclass CustomerSerializer(serializers.ModelSerializer):  \n    # This can kill performance!\n    order_descriptions = serializers.StringRelatedField(many=True) \n    # So can this, same exact problem...\n    orders = OrderSerializer(many=True, read_only=True) # This can kill performance!\n```\nCustomerSerializer 函数里面是这么运行的：\n\n- 获取所有的 customers (需要往返到数据库)\n- 对于第一个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第二个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第三个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第四个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第五个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第六个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 。。。。终于意识到，千万不要有更多的用户\n\n#### 解决 Django 「懒惰」的基本方法\n现在我们解决这个问题的方法就是「预加载」。从本质上讲，就是你提前警告 Django ORM 你要一遍又一遍的告诉它同样无聊的指令。在上面的例子中，在 DRF 开始获取前很简单地加上这句话就搞定了：\n```python\nqueryset = queryset.prefetch_related('orders')\n```\n当 DRF 调用上述相同序列化 customers 时，出现的是这种情况：\n- 获取所有 customers（执行两个往返数据库操作，第一个是获取 customers，第二个获取相关 customers 的所有相关的 orders。）\n- 对于第一个返回的 customers，获取其 order（不需要访问数据库，我们已经在上一步中获取了所需要的数据）\n- 对于第二个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第三个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第四个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第五个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第六个返回的 customers，获取其 order （不需要访问数据库）\n- 你又意识到，你可以有了很多 customers，已经不需要再继续等待去数据库。\n\n其实 Django ORM 的「预备」是在第1步进行请求，它在本地高速缓存的数据能够提供步骤2+所要求的数据。与之前往返数据库相比从本地缓存数据中读取数据基本上是瞬时的，所以我们在有很多 customers 时就获得了巨大的性能加速。\n\n#### 解决 Django REST Framework 性能问题的标准化模式\n我们已经确定了一个优化 Django REST Framework 性能问题的通用模式，那就是每当序列化查询嵌套字段时，我们就添加一个新的 @staticmethod 名叫 setup_eager_loading，像这样：\n```python\nclass CustomerSerializer(serializers.ModelSerializer):  \n    orders = OrderSerializer(many=True, read_only=True)\n \n    def setup_eager_loading(cls, queryset):\n        \"\"\" Perform necessary eager loading of data. \"\"\"\n        queryset = queryset.prefetch_related('orders')\n        return queryset\n```\n这样，不管哪里要用到这个序列化，都只需在调用序列化前简单调用 setup_eager_loading ，就像这样：\n```python\ncustomer_qs = Customers.objects.all()  \ncustomer_qs = CustomerSerializer.setup_eager_loading(customer_qs)  # Set up eager loading to avoid N+1 selects  \npost_data = CustomerSerializer(customer_qs, many=True).data  \n```\n或者，如果你有一个 APIView 或 ViewSet，你可以在 get_queryset 方法里调用 setup_eager_loading：\n```python\ndef get_queryset(self):  \n    queryset = Customers.objects.all()\n    # Set up eager loading to avoid N+1 selects\n    queryset = self.get_serializer_class().setup_eager_loading(queryset)  \n    return queryset\n```\n#### 那么怎样编写 setup_eager_loading\n想要解决 Django 的性能问题，最困难的部分就是要熟悉 select_related ，我们将详细介绍它们在 Django ORM 和 Django REST Framework 中怎样使用。\n\n- select_related：Django ORM 最简单的预加载工具，对于所有一对一或多对一的数据关系，你都需要从同一个父对象获取数据，如客户的公司名称。这个会被翻译成 SQL 的 join 操作，这样父对象的数据就和子对象的数据一起取回来了。（[参见官方文档](https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related)）\n- prefetch_related：对于更复杂的关系，即每个结果有多行（例如 many=True ），像多对一或多对多的数据关系，比如上述客户的订单，这转化一个二级 SQL 查询，通常有很长的 WHERE ... IN ，从中只选择相关的行。（[参见官方文档](https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related)）\n- Prefetch：用于复杂 prefetch_related 查询，例如过滤子集。它也可以嵌套setup_eager_loading 进行调用。 （[参见官方文档](https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related)）\n\n\n#### 链接\nhttp://blog.oneapm.com/apm-tech/304.html\n","source":"_posts/rest-framwork-serializer-efficient.md","raw":"---\ntitle: (转)优化DRF的性能\ndate: 2018-04-14 12:05:12\ntags:\n  - ORM\n  - Serializer\ncategories:\n  - DRF\n---\n看似简单直观的 Django REST Framework 及其[嵌套序列化](http://www.django-rest-framework.org/api-guide/relations/#nested-relationships)可能会大大降低你的 API 端的性能。你的服务器的其他部分的响应能力也会被某一个低效的 REST API 影响\n问题的根源就是 「N+1 selects problem」；首先查询数据库一次得到表中的数据（例如，Customers），然后每个用户的其他字段又需要循环不止一次地查询数据库（例如 customer.country.Name）。使用 Django 的 ORM，很容易造成这个问题，而使用 DRF，同样会造成这个问题。\n\n幸运的是，目前有修复 Django REST Framework 性能问题的解决方法，而且不需要对代码进行重大重组。它只是需要使用未充分利用的 select_related 和 prefetch_related 方法来执行所谓的「预加载」。\n\n#### 为什么 Django REST Framework 那么容易造成这个问题\n\n当你建立一个 DRF 视图时，你经常需要从多个相关表中返回相应的数据。写这样的功能是很简单的，DRF文档中有详细的介绍。不过不幸的是，只要你在序列化中使用嵌套关系，你就在拿你的性能开玩笑，像很多的性能问题一样，它往往只出现有大型数据集的真实生产环境中。\n\n这种情况发生就是因为 Django 的 ORM 是惰性的，它只取出当前查询所需响应最小的数据。它不知道你是否有成百上千的相同或相似的数据也需要取出来。\n\n况且如今，当我们谈到数据库型网站时，一般情况下，最重要的响应指标就是数据库的访问次数。\n\n在 DRF 视图中，我们每次序列化有嵌套关系的数据时都会出现问题，如下面的例子：\n```python\nclass CustomerSerializer(serializers.ModelSerializer):  \n    # This can kill performance!\n    order_descriptions = serializers.StringRelatedField(many=True) \n    # So can this, same exact problem...\n    orders = OrderSerializer(many=True, read_only=True) # This can kill performance!\n```\nCustomerSerializer 函数里面是这么运行的：\n\n- 获取所有的 customers (需要往返到数据库)\n- 对于第一个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第二个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第三个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第四个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第五个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 对于第六个返回的客户，获取他们的 orders (又需要去往返一趟数据库)\n- 。。。。终于意识到，千万不要有更多的用户\n\n#### 解决 Django 「懒惰」的基本方法\n现在我们解决这个问题的方法就是「预加载」。从本质上讲，就是你提前警告 Django ORM 你要一遍又一遍的告诉它同样无聊的指令。在上面的例子中，在 DRF 开始获取前很简单地加上这句话就搞定了：\n```python\nqueryset = queryset.prefetch_related('orders')\n```\n当 DRF 调用上述相同序列化 customers 时，出现的是这种情况：\n- 获取所有 customers（执行两个往返数据库操作，第一个是获取 customers，第二个获取相关 customers 的所有相关的 orders。）\n- 对于第一个返回的 customers，获取其 order（不需要访问数据库，我们已经在上一步中获取了所需要的数据）\n- 对于第二个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第三个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第四个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第五个返回的 customers，获取其 order （不需要访问数据库）\n- 对于第六个返回的 customers，获取其 order （不需要访问数据库）\n- 你又意识到，你可以有了很多 customers，已经不需要再继续等待去数据库。\n\n其实 Django ORM 的「预备」是在第1步进行请求，它在本地高速缓存的数据能够提供步骤2+所要求的数据。与之前往返数据库相比从本地缓存数据中读取数据基本上是瞬时的，所以我们在有很多 customers 时就获得了巨大的性能加速。\n\n#### 解决 Django REST Framework 性能问题的标准化模式\n我们已经确定了一个优化 Django REST Framework 性能问题的通用模式，那就是每当序列化查询嵌套字段时，我们就添加一个新的 @staticmethod 名叫 setup_eager_loading，像这样：\n```python\nclass CustomerSerializer(serializers.ModelSerializer):  \n    orders = OrderSerializer(many=True, read_only=True)\n \n    def setup_eager_loading(cls, queryset):\n        \"\"\" Perform necessary eager loading of data. \"\"\"\n        queryset = queryset.prefetch_related('orders')\n        return queryset\n```\n这样，不管哪里要用到这个序列化，都只需在调用序列化前简单调用 setup_eager_loading ，就像这样：\n```python\ncustomer_qs = Customers.objects.all()  \ncustomer_qs = CustomerSerializer.setup_eager_loading(customer_qs)  # Set up eager loading to avoid N+1 selects  \npost_data = CustomerSerializer(customer_qs, many=True).data  \n```\n或者，如果你有一个 APIView 或 ViewSet，你可以在 get_queryset 方法里调用 setup_eager_loading：\n```python\ndef get_queryset(self):  \n    queryset = Customers.objects.all()\n    # Set up eager loading to avoid N+1 selects\n    queryset = self.get_serializer_class().setup_eager_loading(queryset)  \n    return queryset\n```\n#### 那么怎样编写 setup_eager_loading\n想要解决 Django 的性能问题，最困难的部分就是要熟悉 select_related ，我们将详细介绍它们在 Django ORM 和 Django REST Framework 中怎样使用。\n\n- select_related：Django ORM 最简单的预加载工具，对于所有一对一或多对一的数据关系，你都需要从同一个父对象获取数据，如客户的公司名称。这个会被翻译成 SQL 的 join 操作，这样父对象的数据就和子对象的数据一起取回来了。（[参见官方文档](https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related)）\n- prefetch_related：对于更复杂的关系，即每个结果有多行（例如 many=True ），像多对一或多对多的数据关系，比如上述客户的订单，这转化一个二级 SQL 查询，通常有很长的 WHERE ... IN ，从中只选择相关的行。（[参见官方文档](https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related)）\n- Prefetch：用于复杂 prefetch_related 查询，例如过滤子集。它也可以嵌套setup_eager_loading 进行调用。 （[参见官方文档](https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related)）\n\n\n#### 链接\nhttp://blog.oneapm.com/apm-tech/304.html\n","slug":"rest-framwork-serializer-efficient","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5y20055ct8urzwp0asv","content":"<p>看似简单直观的 Django REST Framework 及其<a href=\"http://www.django-rest-framework.org/api-guide/relations/#nested-relationships\" target=\"_blank\" rel=\"external\">嵌套序列化</a>可能会大大降低你的 API 端的性能。你的服务器的其他部分的响应能力也会被某一个低效的 REST API 影响<br>问题的根源就是 「N+1 selects problem」；首先查询数据库一次得到表中的数据（例如，Customers），然后每个用户的其他字段又需要循环不止一次地查询数据库（例如 customer.country.Name）。使用 Django 的 ORM，很容易造成这个问题，而使用 DRF，同样会造成这个问题。</p>\n<p>幸运的是，目前有修复 Django REST Framework 性能问题的解决方法，而且不需要对代码进行重大重组。它只是需要使用未充分利用的 select_related 和 prefetch_related 方法来执行所谓的「预加载」。</p>\n<h4 id=\"为什么-Django-REST-Framework-那么容易造成这个问题\"><a href=\"#为什么-Django-REST-Framework-那么容易造成这个问题\" class=\"headerlink\" title=\"为什么 Django REST Framework 那么容易造成这个问题\"></a>为什么 Django REST Framework 那么容易造成这个问题</h4><p>当你建立一个 DRF 视图时，你经常需要从多个相关表中返回相应的数据。写这样的功能是很简单的，DRF文档中有详细的介绍。不过不幸的是，只要你在序列化中使用嵌套关系，你就在拿你的性能开玩笑，像很多的性能问题一样，它往往只出现有大型数据集的真实生产环境中。</p>\n<p>这种情况发生就是因为 Django 的 ORM 是惰性的，它只取出当前查询所需响应最小的数据。它不知道你是否有成百上千的相同或相似的数据也需要取出来。</p>\n<p>况且如今，当我们谈到数据库型网站时，一般情况下，最重要的响应指标就是数据库的访问次数。</p>\n<p>在 DRF 视图中，我们每次序列化有嵌套关系的数据时都会出现问题，如下面的例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span>  </div><div class=\"line\">    <span class=\"comment\"># This can kill performance!</span></div><div class=\"line\">    order_descriptions = serializers.StringRelatedField(many=<span class=\"keyword\">True</span>) </div><div class=\"line\">    <span class=\"comment\"># So can this, same exact problem...</span></div><div class=\"line\">    orders = OrderSerializer(many=<span class=\"keyword\">True</span>, read_only=<span class=\"keyword\">True</span>) <span class=\"comment\"># This can kill performance!</span></div></pre></td></tr></table></figure></p>\n<p>CustomerSerializer 函数里面是这么运行的：</p>\n<ul>\n<li>获取所有的 customers (需要往返到数据库)</li>\n<li>对于第一个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第二个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第三个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第四个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第五个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第六个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>。。。。终于意识到，千万不要有更多的用户</li>\n</ul>\n<h4 id=\"解决-Django-「懒惰」的基本方法\"><a href=\"#解决-Django-「懒惰」的基本方法\" class=\"headerlink\" title=\"解决 Django 「懒惰」的基本方法\"></a>解决 Django 「懒惰」的基本方法</h4><p>现在我们解决这个问题的方法就是「预加载」。从本质上讲，就是你提前警告 Django ORM 你要一遍又一遍的告诉它同样无聊的指令。在上面的例子中，在 DRF 开始获取前很简单地加上这句话就搞定了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">queryset = queryset.prefetch_related(<span class=\"string\">'orders'</span>)</div></pre></td></tr></table></figure></p>\n<p>当 DRF 调用上述相同序列化 customers 时，出现的是这种情况：</p>\n<ul>\n<li>获取所有 customers（执行两个往返数据库操作，第一个是获取 customers，第二个获取相关 customers 的所有相关的 orders。）</li>\n<li>对于第一个返回的 customers，获取其 order（不需要访问数据库，我们已经在上一步中获取了所需要的数据）</li>\n<li>对于第二个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第三个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第四个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第五个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第六个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>你又意识到，你可以有了很多 customers，已经不需要再继续等待去数据库。</li>\n</ul>\n<p>其实 Django ORM 的「预备」是在第1步进行请求，它在本地高速缓存的数据能够提供步骤2+所要求的数据。与之前往返数据库相比从本地缓存数据中读取数据基本上是瞬时的，所以我们在有很多 customers 时就获得了巨大的性能加速。</p>\n<h4 id=\"解决-Django-REST-Framework-性能问题的标准化模式\"><a href=\"#解决-Django-REST-Framework-性能问题的标准化模式\" class=\"headerlink\" title=\"解决 Django REST Framework 性能问题的标准化模式\"></a>解决 Django REST Framework 性能问题的标准化模式</h4><p>我们已经确定了一个优化 Django REST Framework 性能问题的通用模式，那就是每当序列化查询嵌套字段时，我们就添加一个新的 @staticmethod 名叫 setup_eager_loading，像这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span>  </div><div class=\"line\">    orders = OrderSerializer(many=<span class=\"keyword\">True</span>, read_only=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setup_eager_loading</span><span class=\"params\">(cls, queryset)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" Perform necessary eager loading of data. \"\"\"</span></div><div class=\"line\">        queryset = queryset.prefetch_related(<span class=\"string\">'orders'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> queryset</div></pre></td></tr></table></figure></p>\n<p>这样，不管哪里要用到这个序列化，都只需在调用序列化前简单调用 setup_eager_loading ，就像这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">customer_qs = Customers.objects.all()  </div><div class=\"line\">customer_qs = CustomerSerializer.setup_eager_loading(customer_qs)  <span class=\"comment\"># Set up eager loading to avoid N+1 selects  </span></div><div class=\"line\">post_data = CustomerSerializer(customer_qs, many=<span class=\"keyword\">True</span>).data</div></pre></td></tr></table></figure></p>\n<p>或者，如果你有一个 APIView 或 ViewSet，你可以在 get_queryset 方法里调用 setup_eager_loading：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span>  </div><div class=\"line\">    queryset = Customers.objects.all()</div><div class=\"line\">    <span class=\"comment\"># Set up eager loading to avoid N+1 selects</span></div><div class=\"line\">    queryset = self.get_serializer_class().setup_eager_loading(queryset)  </div><div class=\"line\">    <span class=\"keyword\">return</span> queryset</div></pre></td></tr></table></figure></p>\n<h4 id=\"那么怎样编写-setup-eager-loading\"><a href=\"#那么怎样编写-setup-eager-loading\" class=\"headerlink\" title=\"那么怎样编写 setup_eager_loading\"></a>那么怎样编写 setup_eager_loading</h4><p>想要解决 Django 的性能问题，最困难的部分就是要熟悉 select_related ，我们将详细介绍它们在 Django ORM 和 Django REST Framework 中怎样使用。</p>\n<ul>\n<li>select_related：Django ORM 最简单的预加载工具，对于所有一对一或多对一的数据关系，你都需要从同一个父对象获取数据，如客户的公司名称。这个会被翻译成 SQL 的 join 操作，这样父对象的数据就和子对象的数据一起取回来了。（<a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related\" target=\"_blank\" rel=\"external\">参见官方文档</a>）</li>\n<li>prefetch_related：对于更复杂的关系，即每个结果有多行（例如 many=True ），像多对一或多对多的数据关系，比如上述客户的订单，这转化一个二级 SQL 查询，通常有很长的 WHERE … IN ，从中只选择相关的行。（<a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related\" target=\"_blank\" rel=\"external\">参见官方文档</a>）</li>\n<li>Prefetch：用于复杂 prefetch_related 查询，例如过滤子集。它也可以嵌套setup_eager_loading 进行调用。 （<a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related\" target=\"_blank\" rel=\"external\">参见官方文档</a>）</li>\n</ul>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p><a href=\"http://blog.oneapm.com/apm-tech/304.html\" target=\"_blank\" rel=\"external\">http://blog.oneapm.com/apm-tech/304.html</a></p>\n","excerpt":"","more":"<p>看似简单直观的 Django REST Framework 及其<a href=\"http://www.django-rest-framework.org/api-guide/relations/#nested-relationships\">嵌套序列化</a>可能会大大降低你的 API 端的性能。你的服务器的其他部分的响应能力也会被某一个低效的 REST API 影响<br>问题的根源就是 「N+1 selects problem」；首先查询数据库一次得到表中的数据（例如，Customers），然后每个用户的其他字段又需要循环不止一次地查询数据库（例如 customer.country.Name）。使用 Django 的 ORM，很容易造成这个问题，而使用 DRF，同样会造成这个问题。</p>\n<p>幸运的是，目前有修复 Django REST Framework 性能问题的解决方法，而且不需要对代码进行重大重组。它只是需要使用未充分利用的 select_related 和 prefetch_related 方法来执行所谓的「预加载」。</p>\n<h4 id=\"为什么-Django-REST-Framework-那么容易造成这个问题\"><a href=\"#为什么-Django-REST-Framework-那么容易造成这个问题\" class=\"headerlink\" title=\"为什么 Django REST Framework 那么容易造成这个问题\"></a>为什么 Django REST Framework 那么容易造成这个问题</h4><p>当你建立一个 DRF 视图时，你经常需要从多个相关表中返回相应的数据。写这样的功能是很简单的，DRF文档中有详细的介绍。不过不幸的是，只要你在序列化中使用嵌套关系，你就在拿你的性能开玩笑，像很多的性能问题一样，它往往只出现有大型数据集的真实生产环境中。</p>\n<p>这种情况发生就是因为 Django 的 ORM 是惰性的，它只取出当前查询所需响应最小的数据。它不知道你是否有成百上千的相同或相似的数据也需要取出来。</p>\n<p>况且如今，当我们谈到数据库型网站时，一般情况下，最重要的响应指标就是数据库的访问次数。</p>\n<p>在 DRF 视图中，我们每次序列化有嵌套关系的数据时都会出现问题，如下面的例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span>  </div><div class=\"line\">    <span class=\"comment\"># This can kill performance!</span></div><div class=\"line\">    order_descriptions = serializers.StringRelatedField(many=<span class=\"keyword\">True</span>) </div><div class=\"line\">    <span class=\"comment\"># So can this, same exact problem...</span></div><div class=\"line\">    orders = OrderSerializer(many=<span class=\"keyword\">True</span>, read_only=<span class=\"keyword\">True</span>) <span class=\"comment\"># This can kill performance!</span></div></pre></td></tr></table></figure></p>\n<p>CustomerSerializer 函数里面是这么运行的：</p>\n<ul>\n<li>获取所有的 customers (需要往返到数据库)</li>\n<li>对于第一个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第二个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第三个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第四个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第五个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>对于第六个返回的客户，获取他们的 orders (又需要去往返一趟数据库)</li>\n<li>。。。。终于意识到，千万不要有更多的用户</li>\n</ul>\n<h4 id=\"解决-Django-「懒惰」的基本方法\"><a href=\"#解决-Django-「懒惰」的基本方法\" class=\"headerlink\" title=\"解决 Django 「懒惰」的基本方法\"></a>解决 Django 「懒惰」的基本方法</h4><p>现在我们解决这个问题的方法就是「预加载」。从本质上讲，就是你提前警告 Django ORM 你要一遍又一遍的告诉它同样无聊的指令。在上面的例子中，在 DRF 开始获取前很简单地加上这句话就搞定了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">queryset = queryset.prefetch_related(<span class=\"string\">'orders'</span>)</div></pre></td></tr></table></figure></p>\n<p>当 DRF 调用上述相同序列化 customers 时，出现的是这种情况：</p>\n<ul>\n<li>获取所有 customers（执行两个往返数据库操作，第一个是获取 customers，第二个获取相关 customers 的所有相关的 orders。）</li>\n<li>对于第一个返回的 customers，获取其 order（不需要访问数据库，我们已经在上一步中获取了所需要的数据）</li>\n<li>对于第二个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第三个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第四个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第五个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>对于第六个返回的 customers，获取其 order （不需要访问数据库）</li>\n<li>你又意识到，你可以有了很多 customers，已经不需要再继续等待去数据库。</li>\n</ul>\n<p>其实 Django ORM 的「预备」是在第1步进行请求，它在本地高速缓存的数据能够提供步骤2+所要求的数据。与之前往返数据库相比从本地缓存数据中读取数据基本上是瞬时的，所以我们在有很多 customers 时就获得了巨大的性能加速。</p>\n<h4 id=\"解决-Django-REST-Framework-性能问题的标准化模式\"><a href=\"#解决-Django-REST-Framework-性能问题的标准化模式\" class=\"headerlink\" title=\"解决 Django REST Framework 性能问题的标准化模式\"></a>解决 Django REST Framework 性能问题的标准化模式</h4><p>我们已经确定了一个优化 Django REST Framework 性能问题的通用模式，那就是每当序列化查询嵌套字段时，我们就添加一个新的 @staticmethod 名叫 setup_eager_loading，像这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span>  </div><div class=\"line\">    orders = OrderSerializer(many=<span class=\"keyword\">True</span>, read_only=<span class=\"keyword\">True</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setup_eager_loading</span><span class=\"params\">(cls, queryset)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\" Perform necessary eager loading of data. \"\"\"</span></div><div class=\"line\">        queryset = queryset.prefetch_related(<span class=\"string\">'orders'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> queryset</div></pre></td></tr></table></figure></p>\n<p>这样，不管哪里要用到这个序列化，都只需在调用序列化前简单调用 setup_eager_loading ，就像这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">customer_qs = Customers.objects.all()  </div><div class=\"line\">customer_qs = CustomerSerializer.setup_eager_loading(customer_qs)  <span class=\"comment\"># Set up eager loading to avoid N+1 selects  </span></div><div class=\"line\">post_data = CustomerSerializer(customer_qs, many=<span class=\"keyword\">True</span>).data</div></pre></td></tr></table></figure></p>\n<p>或者，如果你有一个 APIView 或 ViewSet，你可以在 get_queryset 方法里调用 setup_eager_loading：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span>  </div><div class=\"line\">    queryset = Customers.objects.all()</div><div class=\"line\">    <span class=\"comment\"># Set up eager loading to avoid N+1 selects</span></div><div class=\"line\">    queryset = self.get_serializer_class().setup_eager_loading(queryset)  </div><div class=\"line\">    <span class=\"keyword\">return</span> queryset</div></pre></td></tr></table></figure></p>\n<h4 id=\"那么怎样编写-setup-eager-loading\"><a href=\"#那么怎样编写-setup-eager-loading\" class=\"headerlink\" title=\"那么怎样编写 setup_eager_loading\"></a>那么怎样编写 setup_eager_loading</h4><p>想要解决 Django 的性能问题，最困难的部分就是要熟悉 select_related ，我们将详细介绍它们在 Django ORM 和 Django REST Framework 中怎样使用。</p>\n<ul>\n<li>select_related：Django ORM 最简单的预加载工具，对于所有一对一或多对一的数据关系，你都需要从同一个父对象获取数据，如客户的公司名称。这个会被翻译成 SQL 的 join 操作，这样父对象的数据就和子对象的数据一起取回来了。（<a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related\">参见官方文档</a>）</li>\n<li>prefetch_related：对于更复杂的关系，即每个结果有多行（例如 many=True ），像多对一或多对多的数据关系，比如上述客户的订单，这转化一个二级 SQL 查询，通常有很长的 WHERE … IN ，从中只选择相关的行。（<a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related\">参见官方文档</a>）</li>\n<li>Prefetch：用于复杂 prefetch_related 查询，例如过滤子集。它也可以嵌套setup_eager_loading 进行调用。 （<a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related\">参见官方文档</a>）</li>\n</ul>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p><a href=\"http://blog.oneapm.com/apm-tech/304.html\">http://blog.oneapm.com/apm-tech/304.html</a></p>\n"},{"title":"DRF Rest_framwork笔记","date":"2017-05-14T11:36:53.000Z","_content":"\n### 实现restful操作步骤\n0.setting.py 添加设置\n```python\nINSTALLED_APPS = (\n\t'rest_framework',\n        'app',\n)\n\n```\n1.serializer序列化models\n```python\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\n \n#使用模型序列化ModelSerializer\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    用户管理\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'password')\n \n    def create(self, validated_data):   # 方法重写\n        user = User.objects.create(**validated_data)\n        return user\n \n#简单的默认create()和update()方法的实现\n```\n2.viewSet中：\n```python\nqueryset = user.objects.all()       # 取数据all\nserializer_class = UserSerializer   # 将序列化的数据给\n \n# 或者返回数据列表\ndepartments = Department.objects.all()\nresponse.data.update({'departments': DepartmentSerializer(list(departments), many=True).data})\n```\n3.注册router\n```python\nfrom rest_framework.routers import DefaultRouter\nrouter =  routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\n```\n### 实例化(Serializer)类和模型实例化(ModelSerializer)类\nserializers.py  #序列化类的快捷方式，同时包括create,update方法\n```python\nfrom rest_framework import serializers\t    # 序列化\nfrom django.contrib.auth.models import User\t# 导入model\n \nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    用户管理\n    \"\"\"\n \n    class Meta:\n        model = User  # 定义models\n        fields = ('id', 'username', 'first_name', 'email', 'password')\t# 字段\n \n```\n\n### 请求对象\n```\nrequest.data #可以处理任何数据，对post，put，patch等方法也起作用\n```\n\n### 响应对象\n```\nfrom rest_framework.response import Response\nreturn Response()\t\n# 根据客户端的请求来渲染成指定的内容类型,用于未渲染内容和内容协商来决定正确的内容类型并把它返回给客户端的模板响应(TemplateResponse).\n```\n\n### 状态码\n```python\n# REST框架为每个状态码提供了明确的标识符，如HTTP_400_BAD_REQUEST等\n \nfrom rest_framework import status\n \ndef create(self,request):\n\treturn Response(data, status=status.HTTP_201_CREATED)\n```\n\n### 装饰API视图\n\n- @app_view 用在基于视图的方法上\n\n```python\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n \n@api_view(['GET', 'PUT', 'DELETE', 'POST'])\ndef index(request):\n    print request.method\n    print request.DATA\n    return Response([{'asset': '1','status': 'ok'}])\n \n@api_view(['GET', 'PUT', 'DELETE', 'POST'])\ndef list_api(request):\n    if request.method == 'GET':\n    \tpass\n        return Respose(serializer.data)\n    elif request.method == 'POST':\n    \tpass\n        return Response(data,status=status.HTTP_206_PARTIAL_CONTENT)\n \n#urls.py中设置\nfrom rest_framework.urlpatterns import format_suffix_patterns\n \nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n\n- APIView 用在基于视图的类\n\n```python\n# 基于视图的类\nviews.py中\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n \nclass UserView(APIView):\n\tdef get(self,request,format=None):\n    \tobjectall = User.objects.all()\n        serializer = UserSerializer(objectall)\n        return Response(serializer.data)\n \n    def post(self, request, formate=None):\n    \tpass\n \n# urls.py中\nfrom rest_framework.urlpatterns import format_suffix_patterns\n \n    url(r'^app/user/$', UserView.as_view()),\n    url(r'^app/user/(?P<pk>[0-9]+)$', UserView.as_view()),\n \nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n\n- 使用基于视图的一般类(generic class)\n\n```python\n# views.py\n    queryset = info.objects.all()    #models对象\n    serializer_class = UserSerializer\t#序列化的类\n```\n\n### 授权(Authentication)与权限(Permissions)\n- 数据总是和创建者联系在一起\n- 只有授权用户才能创建对应的数据\n- 只有对应的数据的创建者才能更新或删除它\n- 没有授权的请求应该只有只读权限\n\n```python\n# views.py中\nfrom rest_framework import permissons\n \nurls.py中\nurlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n]\n################################\n# 在浏览器API中添加登录\nurls.py\nfrom django.conf.urls import url, include\n \nurlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n]\t# 为api添加一个包括登录和退出视图的url样式\n \n# api-auth部分可以是任何你想要的url，唯一的限制为include中的链接必须使用‘rest_framework’名字空间，在Django1.9+ rest框架会设置名字空间，所以必须写\n```\n\n### URL模式命名\n```python\nurl(r'^app/user/$', UserView.as_view(), name='user_add'), # name指定url名称\n\n```\n\n### 添加分页\n```python\n# setting.py中\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'base.serializers.PlugPageNumberPagination',\n    'MAX_PAGE_SIZE': 50,\n    'PAGE_SIZE':     15  # default page size\n}\n```\n\n### 视图集(ViewSets)和路由(Routers)\n视图集让开发者把精力集中在构建状态和交互的api模型，而且他可以基于一般规范自动构建url\n一个viewset类只绑定一个方法集合，当它初始化一个视图集合时，一般使用为处理复杂的url定义的Router类\n```python\n# views.py\nfrom rest_framework import viewsets\n \nclass UserviewSet(viewsets.ModelViewSet):\n\tqueryset = User.objects.all()\n\tserializer_class = UserSerializer\n    def list(self,request):\n    \tpass\n        return data\n \n```\n### 明确绑定视图集到URL\n定义URLConf时，处理方法只绑定了动作，我们必须从我们的视图集(ViewSets)创建一个视图集合，在urls.py文件中，我们将ViewSet类绑定到具体视图的集合\n\n```python\n# urls.py中\nfrom rest_framework.urlpatterns import format_suffix_patterns\n \nuser_list = UserView.as_view({\n    'get':'list',\n    'post':'creat',\n})\nurl(r'^user/$, user_list)),\n \n# 或者：\nlist_create = {\n    'get': 'list',\n    'post': 'create',\n}\n url(r'^user/$', UserView.as_view(list_create)),\n```\n\n### 使用路由\n使用Router类可以自动将资源和视图(views),链接(urls)联系起来，我们只需要用一个路由注册合适的视图集合\n```python\n# urls.py中\nfrom rest_framework.routers import DefaultRouter\n \nrouter =  routers.DefaultRouter()\nrouter.register(r'users',views.UserViewSet)\nrouter.register(r'groups',views.GroupsViewSet)\n \nurlpatterns += [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n]\n```\n### 参考链接\nhttp://www.django-rest-framework.org/\nhttps://github.com/tomchristie/rest-framework-tutorial\nhttp://www.cnblogs.com/loveis715/p/4669091.html\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/rest-framwork-note.md","raw":"---\ntitle: DRF Rest_framwork笔记\ndate: 2017-05-14 19:36:53\ntags:\n  - DRF\ncategories:\n  - DRF\n---\n\n### 实现restful操作步骤\n0.setting.py 添加设置\n```python\nINSTALLED_APPS = (\n\t'rest_framework',\n        'app',\n)\n\n```\n1.serializer序列化models\n```python\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\n \n#使用模型序列化ModelSerializer\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    用户管理\n    \"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'password')\n \n    def create(self, validated_data):   # 方法重写\n        user = User.objects.create(**validated_data)\n        return user\n \n#简单的默认create()和update()方法的实现\n```\n2.viewSet中：\n```python\nqueryset = user.objects.all()       # 取数据all\nserializer_class = UserSerializer   # 将序列化的数据给\n \n# 或者返回数据列表\ndepartments = Department.objects.all()\nresponse.data.update({'departments': DepartmentSerializer(list(departments), many=True).data})\n```\n3.注册router\n```python\nfrom rest_framework.routers import DefaultRouter\nrouter =  routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\n```\n### 实例化(Serializer)类和模型实例化(ModelSerializer)类\nserializers.py  #序列化类的快捷方式，同时包括create,update方法\n```python\nfrom rest_framework import serializers\t    # 序列化\nfrom django.contrib.auth.models import User\t# 导入model\n \nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"\n    用户管理\n    \"\"\"\n \n    class Meta:\n        model = User  # 定义models\n        fields = ('id', 'username', 'first_name', 'email', 'password')\t# 字段\n \n```\n\n### 请求对象\n```\nrequest.data #可以处理任何数据，对post，put，patch等方法也起作用\n```\n\n### 响应对象\n```\nfrom rest_framework.response import Response\nreturn Response()\t\n# 根据客户端的请求来渲染成指定的内容类型,用于未渲染内容和内容协商来决定正确的内容类型并把它返回给客户端的模板响应(TemplateResponse).\n```\n\n### 状态码\n```python\n# REST框架为每个状态码提供了明确的标识符，如HTTP_400_BAD_REQUEST等\n \nfrom rest_framework import status\n \ndef create(self,request):\n\treturn Response(data, status=status.HTTP_201_CREATED)\n```\n\n### 装饰API视图\n\n- @app_view 用在基于视图的方法上\n\n```python\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n \n@api_view(['GET', 'PUT', 'DELETE', 'POST'])\ndef index(request):\n    print request.method\n    print request.DATA\n    return Response([{'asset': '1','status': 'ok'}])\n \n@api_view(['GET', 'PUT', 'DELETE', 'POST'])\ndef list_api(request):\n    if request.method == 'GET':\n    \tpass\n        return Respose(serializer.data)\n    elif request.method == 'POST':\n    \tpass\n        return Response(data,status=status.HTTP_206_PARTIAL_CONTENT)\n \n#urls.py中设置\nfrom rest_framework.urlpatterns import format_suffix_patterns\n \nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n\n- APIView 用在基于视图的类\n\n```python\n# 基于视图的类\nviews.py中\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n \nclass UserView(APIView):\n\tdef get(self,request,format=None):\n    \tobjectall = User.objects.all()\n        serializer = UserSerializer(objectall)\n        return Response(serializer.data)\n \n    def post(self, request, formate=None):\n    \tpass\n \n# urls.py中\nfrom rest_framework.urlpatterns import format_suffix_patterns\n \n    url(r'^app/user/$', UserView.as_view()),\n    url(r'^app/user/(?P<pk>[0-9]+)$', UserView.as_view()),\n \nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n\n- 使用基于视图的一般类(generic class)\n\n```python\n# views.py\n    queryset = info.objects.all()    #models对象\n    serializer_class = UserSerializer\t#序列化的类\n```\n\n### 授权(Authentication)与权限(Permissions)\n- 数据总是和创建者联系在一起\n- 只有授权用户才能创建对应的数据\n- 只有对应的数据的创建者才能更新或删除它\n- 没有授权的请求应该只有只读权限\n\n```python\n# views.py中\nfrom rest_framework import permissons\n \nurls.py中\nurlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n]\n################################\n# 在浏览器API中添加登录\nurls.py\nfrom django.conf.urls import url, include\n \nurlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n]\t# 为api添加一个包括登录和退出视图的url样式\n \n# api-auth部分可以是任何你想要的url，唯一的限制为include中的链接必须使用‘rest_framework’名字空间，在Django1.9+ rest框架会设置名字空间，所以必须写\n```\n\n### URL模式命名\n```python\nurl(r'^app/user/$', UserView.as_view(), name='user_add'), # name指定url名称\n\n```\n\n### 添加分页\n```python\n# setting.py中\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'base.serializers.PlugPageNumberPagination',\n    'MAX_PAGE_SIZE': 50,\n    'PAGE_SIZE':     15  # default page size\n}\n```\n\n### 视图集(ViewSets)和路由(Routers)\n视图集让开发者把精力集中在构建状态和交互的api模型，而且他可以基于一般规范自动构建url\n一个viewset类只绑定一个方法集合，当它初始化一个视图集合时，一般使用为处理复杂的url定义的Router类\n```python\n# views.py\nfrom rest_framework import viewsets\n \nclass UserviewSet(viewsets.ModelViewSet):\n\tqueryset = User.objects.all()\n\tserializer_class = UserSerializer\n    def list(self,request):\n    \tpass\n        return data\n \n```\n### 明确绑定视图集到URL\n定义URLConf时，处理方法只绑定了动作，我们必须从我们的视图集(ViewSets)创建一个视图集合，在urls.py文件中，我们将ViewSet类绑定到具体视图的集合\n\n```python\n# urls.py中\nfrom rest_framework.urlpatterns import format_suffix_patterns\n \nuser_list = UserView.as_view({\n    'get':'list',\n    'post':'creat',\n})\nurl(r'^user/$, user_list)),\n \n# 或者：\nlist_create = {\n    'get': 'list',\n    'post': 'create',\n}\n url(r'^user/$', UserView.as_view(list_create)),\n```\n\n### 使用路由\n使用Router类可以自动将资源和视图(views),链接(urls)联系起来，我们只需要用一个路由注册合适的视图集合\n```python\n# urls.py中\nfrom rest_framework.routers import DefaultRouter\n \nrouter =  routers.DefaultRouter()\nrouter.register(r'users',views.UserViewSet)\nrouter.register(r'groups',views.GroupsViewSet)\n \nurlpatterns += [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n]\n```\n### 参考链接\nhttp://www.django-rest-framework.org/\nhttps://github.com/tomchristie/rest-framework-tutorial\nhttp://www.cnblogs.com/loveis715/p/4669091.html\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"rest-framwork-note","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5y50059ct8upmoap2ee","content":"<h3 id=\"实现restful操作步骤\"><a href=\"#实现restful操作步骤\" class=\"headerlink\" title=\"实现restful操作步骤\"></a>实现restful操作步骤</h3><p>0.setting.py 添加设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">\t<span class=\"string\">'rest_framework'</span>,</div><div class=\"line\">        <span class=\"string\">'app'</span>,</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>1.serializer序列化models<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#使用模型序列化ModelSerializer</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    用户管理</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span>   <span class=\"comment\"># 方法重写</span></div><div class=\"line\">        user = User.objects.create(**validated_data)</div><div class=\"line\">        <span class=\"keyword\">return</span> user</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#简单的默认create()和update()方法的实现</span></div></pre></td></tr></table></figure></p>\n<p>2.viewSet中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">queryset = user.objects.all()       <span class=\"comment\"># 取数据all</span></div><div class=\"line\">serializer_class = UserSerializer   <span class=\"comment\"># 将序列化的数据给</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 或者返回数据列表</span></div><div class=\"line\">departments = Department.objects.all()</div><div class=\"line\">response.data.update(&#123;<span class=\"string\">'departments'</span>: DepartmentSerializer(list(departments), many=<span class=\"keyword\">True</span>).data&#125;)</div></pre></td></tr></table></figure></p>\n<p>3.注册router<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.routers <span class=\"keyword\">import</span> DefaultRouter</div><div class=\"line\">router =  routers.DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>, UserViewSet)</div></pre></td></tr></table></figure></p>\n<h3 id=\"实例化-Serializer-类和模型实例化-ModelSerializer-类\"><a href=\"#实例化-Serializer-类和模型实例化-ModelSerializer-类\" class=\"headerlink\" title=\"实例化(Serializer)类和模型实例化(ModelSerializer)类\"></a>实例化(Serializer)类和模型实例化(ModelSerializer)类</h3><p>serializers.py  #序列化类的快捷方式，同时包括create,update方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers\t    <span class=\"comment\"># 序列化</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User\t<span class=\"comment\"># 导入model</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    用户管理</div><div class=\"line\">    \"\"\"</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User  <span class=\"comment\"># 定义models</span></div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'first_name'</span>, <span class=\"string\">'email'</span>, <span class=\"string\">'password'</span>)\t<span class=\"comment\"># 字段</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"请求对象\"><a href=\"#请求对象\" class=\"headerlink\" title=\"请求对象\"></a>请求对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.data #可以处理任何数据，对post，put，patch等方法也起作用</div></pre></td></tr></table></figure>\n<h3 id=\"响应对象\"><a href=\"#响应对象\" class=\"headerlink\" title=\"响应对象\"></a>响应对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">from rest_framework.response import Response</div><div class=\"line\">return Response()\t</div><div class=\"line\"># 根据客户端的请求来渲染成指定的内容类型,用于未渲染内容和内容协商来决定正确的内容类型并把它返回给客户端的模板响应(TemplateResponse).</div></pre></td></tr></table></figure>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># REST框架为每个状态码提供了明确的标识符，如HTTP_400_BAD_REQUEST等</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self,request)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> Response(data, status=status.HTTP_201_CREATED)</div></pre></td></tr></table></figure>\n<h3 id=\"装饰API视图\"><a href=\"#装饰API视图\" class=\"headerlink\" title=\"装饰API视图\"></a>装饰API视图</h3><ul>\n<li>@app_view 用在基于视图的方法上</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.decorators <span class=\"keyword\">import</span> api_view</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> request.method</div><div class=\"line\">    <span class=\"keyword\">print</span> request.DATA</div><div class=\"line\">    <span class=\"keyword\">return</span> Response([&#123;<span class=\"string\">'asset'</span>: <span class=\"string\">'1'</span>,<span class=\"string\">'status'</span>: <span class=\"string\">'ok'</span>&#125;])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list_api</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Respose(serializer.data)</div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Response(data,status=status.HTTP_206_PARTIAL_CONTENT)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#urls.py中设置</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"> </div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<ul>\n<li>APIView 用在基于视图的类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 基于视图的类</span></div><div class=\"line\">views.py中</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserView</span><span class=\"params\">(APIView)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self,request,format=None)</span>:</span></div><div class=\"line\">    \tobjectall = User.objects.all()</div><div class=\"line\">        serializer = UserSerializer(objectall)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, formate=None)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># urls.py中</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"> </div><div class=\"line\">    url(<span class=\"string\">r'^app/user/$'</span>, UserView.as_view()),</div><div class=\"line\">    url(<span class=\"string\">r'^app/user/(?P&lt;pk&gt;[0-9]+)$'</span>, UserView.as_view()),</div><div class=\"line\"> </div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<ul>\n<li>使用基于视图的一般类(generic class)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># views.py</span></div><div class=\"line\">    queryset = info.objects.all()    <span class=\"comment\">#models对象</span></div><div class=\"line\">    serializer_class = UserSerializer\t<span class=\"comment\">#序列化的类</span></div></pre></td></tr></table></figure>\n<h3 id=\"授权-Authentication-与权限-Permissions\"><a href=\"#授权-Authentication-与权限-Permissions\" class=\"headerlink\" title=\"授权(Authentication)与权限(Permissions)\"></a>授权(Authentication)与权限(Permissions)</h3><ul>\n<li>数据总是和创建者联系在一起</li>\n<li>只有授权用户才能创建对应的数据</li>\n<li>只有对应的数据的创建者才能更新或删除它</li>\n<li>没有授权的请求应该只有只读权限</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># views.py中</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> permissons</div><div class=\"line\"> </div><div class=\"line\">urls.py中</div><div class=\"line\">urlpatterns += [</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>)),</div><div class=\"line\">]</div><div class=\"line\"><span class=\"comment\">################################</span></div><div class=\"line\"><span class=\"comment\"># 在浏览器API中添加登录</span></div><div class=\"line\">urls.py</div><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"> </div><div class=\"line\">urlpatterns += [</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>)),</div><div class=\"line\">]\t<span class=\"comment\"># 为api添加一个包括登录和退出视图的url样式</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># api-auth部分可以是任何你想要的url，唯一的限制为include中的链接必须使用‘rest_framework’名字空间，在Django1.9+ rest框架会设置名字空间，所以必须写</span></div></pre></td></tr></table></figure>\n<h3 id=\"URL模式命名\"><a href=\"#URL模式命名\" class=\"headerlink\" title=\"URL模式命名\"></a>URL模式命名</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">url(<span class=\"string\">r'^app/user/$'</span>, UserView.as_view(), name=<span class=\"string\">'user_add'</span>), <span class=\"comment\"># name指定url名称</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加分页\"><a href=\"#添加分页\" class=\"headerlink\" title=\"添加分页\"></a>添加分页</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># setting.py中</span></div><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">    <span class=\"string\">'DEFAULT_PAGINATION_CLASS'</span>: <span class=\"string\">'base.serializers.PlugPageNumberPagination'</span>,</div><div class=\"line\">    <span class=\"string\">'MAX_PAGE_SIZE'</span>: <span class=\"number\">50</span>,</div><div class=\"line\">    <span class=\"string\">'PAGE_SIZE'</span>:     <span class=\"number\">15</span>  <span class=\"comment\"># default page size</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"视图集-ViewSets-和路由-Routers\"><a href=\"#视图集-ViewSets-和路由-Routers\" class=\"headerlink\" title=\"视图集(ViewSets)和路由(Routers)\"></a>视图集(ViewSets)和路由(Routers)</h3><p>视图集让开发者把精力集中在构建状态和交互的api模型，而且他可以基于一般规范自动构建url<br>一个viewset类只绑定一个方法集合，当它初始化一个视图集合时，一般使用为处理复杂的url定义的Router类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># views.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> viewsets</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserviewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">\tqueryset = User.objects.all()</div><div class=\"line\">\tserializer_class = UserSerializer</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list</span><span class=\"params\">(self,request)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> data</div></pre></td></tr></table></figure></p>\n<h3 id=\"明确绑定视图集到URL\"><a href=\"#明确绑定视图集到URL\" class=\"headerlink\" title=\"明确绑定视图集到URL\"></a>明确绑定视图集到URL</h3><p>定义URLConf时，处理方法只绑定了动作，我们必须从我们的视图集(ViewSets)创建一个视图集合，在urls.py文件中，我们将ViewSet类绑定到具体视图的集合</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"># urls.py中</div><div class=\"line\">from rest_framework.urlpatterns import format_suffix_patterns</div><div class=\"line\"> </div><div class=\"line\">user_list = UserView.as_view(&#123;</div><div class=\"line\">    'get':'list',</div><div class=\"line\">    'post':'creat',</div><div class=\"line\">&#125;)</div><div class=\"line\">url(r'^user/$, user_list)),</div><div class=\"line\"> </div><div class=\"line\"># 或者：</div><div class=\"line\">list_create = &#123;</div><div class=\"line\">    'get': 'list',</div><div class=\"line\">    'post': 'create',</div><div class=\"line\">&#125;</div><div class=\"line\"> url(r'^user/$', UserView.as_view(list_create)),</div></pre></td></tr></table></figure>\n<h3 id=\"使用路由\"><a href=\"#使用路由\" class=\"headerlink\" title=\"使用路由\"></a>使用路由</h3><p>使用Router类可以自动将资源和视图(views),链接(urls)联系起来，我们只需要用一个路由注册合适的视图集合<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># urls.py中</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.routers <span class=\"keyword\">import</span> DefaultRouter</div><div class=\"line\"> </div><div class=\"line\">router =  routers.DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>,views.UserViewSet)</div><div class=\"line\">router.register(<span class=\"string\">r'groups'</span>,views.GroupsViewSet)</div><div class=\"line\"> </div><div class=\"line\">urlpatterns += [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(router.urls)),</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>)),</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.django-rest-framework.org/\" target=\"_blank\" rel=\"external\">http://www.django-rest-framework.org/</a><br><a href=\"https://github.com/tomchristie/rest-framework-tutorial\" target=\"_blank\" rel=\"external\">https://github.com/tomchristie/rest-framework-tutorial</a><br><a href=\"http://www.cnblogs.com/loveis715/p/4669091.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/loveis715/p/4669091.html</a></p>\n","excerpt":"","more":"<h3 id=\"实现restful操作步骤\"><a href=\"#实现restful操作步骤\" class=\"headerlink\" title=\"实现restful操作步骤\"></a>实现restful操作步骤</h3><p>0.setting.py 添加设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">\t<span class=\"string\">'rest_framework'</span>,</div><div class=\"line\">        <span class=\"string\">'app'</span>,</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>1.serializer序列化models<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#使用模型序列化ModelSerializer</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    用户管理</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span>   <span class=\"comment\"># 方法重写</span></div><div class=\"line\">        user = User.objects.create(**validated_data)</div><div class=\"line\">        <span class=\"keyword\">return</span> user</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#简单的默认create()和update()方法的实现</span></div></pre></td></tr></table></figure></p>\n<p>2.viewSet中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">queryset = user.objects.all()       <span class=\"comment\"># 取数据all</span></div><div class=\"line\">serializer_class = UserSerializer   <span class=\"comment\"># 将序列化的数据给</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 或者返回数据列表</span></div><div class=\"line\">departments = Department.objects.all()</div><div class=\"line\">response.data.update(&#123;<span class=\"string\">'departments'</span>: DepartmentSerializer(list(departments), many=<span class=\"keyword\">True</span>).data&#125;)</div></pre></td></tr></table></figure></p>\n<p>3.注册router<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.routers <span class=\"keyword\">import</span> DefaultRouter</div><div class=\"line\">router =  routers.DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>, UserViewSet)</div></pre></td></tr></table></figure></p>\n<h3 id=\"实例化-Serializer-类和模型实例化-ModelSerializer-类\"><a href=\"#实例化-Serializer-类和模型实例化-ModelSerializer-类\" class=\"headerlink\" title=\"实例化(Serializer)类和模型实例化(ModelSerializer)类\"></a>实例化(Serializer)类和模型实例化(ModelSerializer)类</h3><p>serializers.py  #序列化类的快捷方式，同时包括create,update方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers\t    <span class=\"comment\"># 序列化</span></div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User\t<span class=\"comment\"># 导入model</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    用户管理</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User  <span class=\"comment\"># 定义models</span></div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'first_name'</span>, <span class=\"string\">'email'</span>, <span class=\"string\">'password'</span>)\t<span class=\"comment\"># 字段</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"请求对象\"><a href=\"#请求对象\" class=\"headerlink\" title=\"请求对象\"></a>请求对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.data #可以处理任何数据，对post，put，patch等方法也起作用</div></pre></td></tr></table></figure>\n<h3 id=\"响应对象\"><a href=\"#响应对象\" class=\"headerlink\" title=\"响应对象\"></a>响应对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">from rest_framework.response import Response</div><div class=\"line\">return Response()\t</div><div class=\"line\"># 根据客户端的请求来渲染成指定的内容类型,用于未渲染内容和内容协商来决定正确的内容类型并把它返回给客户端的模板响应(TemplateResponse).</div></pre></td></tr></table></figure>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># REST框架为每个状态码提供了明确的标识符，如HTTP_400_BAD_REQUEST等</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self,request)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> Response(data, status=status.HTTP_201_CREATED)</div></pre></td></tr></table></figure>\n<h3 id=\"装饰API视图\"><a href=\"#装饰API视图\" class=\"headerlink\" title=\"装饰API视图\"></a>装饰API视图</h3><ul>\n<li>@app_view 用在基于视图的方法上</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.decorators <span class=\"keyword\">import</span> api_view</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> request.method</div><div class=\"line\">    <span class=\"keyword\">print</span> request.DATA</div><div class=\"line\">    <span class=\"keyword\">return</span> Response([&#123;<span class=\"string\">'asset'</span>: <span class=\"string\">'1'</span>,<span class=\"string\">'status'</span>: <span class=\"string\">'ok'</span>&#125;])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'PUT', 'DELETE', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list_api</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Respose(serializer.data)</div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Response(data,status=status.HTTP_206_PARTIAL_CONTENT)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#urls.py中设置</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"> </div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<ul>\n<li>APIView 用在基于视图的类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 基于视图的类</span></div><div class=\"line\">views.py中</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserView</span><span class=\"params\">(APIView)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self,request,format=None)</span>:</span></div><div class=\"line\">    \tobjectall = User.objects.all()</div><div class=\"line\">        serializer = UserSerializer(objectall)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, formate=None)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># urls.py中</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"> </div><div class=\"line\">    url(<span class=\"string\">r'^app/user/$'</span>, UserView.as_view()),</div><div class=\"line\">    url(<span class=\"string\">r'^app/user/(?P&lt;pk&gt;[0-9]+)$'</span>, UserView.as_view()),</div><div class=\"line\"> </div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<ul>\n<li>使用基于视图的一般类(generic class)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># views.py</span></div><div class=\"line\">    queryset = info.objects.all()    <span class=\"comment\">#models对象</span></div><div class=\"line\">    serializer_class = UserSerializer\t<span class=\"comment\">#序列化的类</span></div></pre></td></tr></table></figure>\n<h3 id=\"授权-Authentication-与权限-Permissions\"><a href=\"#授权-Authentication-与权限-Permissions\" class=\"headerlink\" title=\"授权(Authentication)与权限(Permissions)\"></a>授权(Authentication)与权限(Permissions)</h3><ul>\n<li>数据总是和创建者联系在一起</li>\n<li>只有授权用户才能创建对应的数据</li>\n<li>只有对应的数据的创建者才能更新或删除它</li>\n<li>没有授权的请求应该只有只读权限</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># views.py中</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> permissons</div><div class=\"line\"> </div><div class=\"line\">urls.py中</div><div class=\"line\">urlpatterns += [</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>)),</div><div class=\"line\">]</div><div class=\"line\"><span class=\"comment\">################################</span></div><div class=\"line\"><span class=\"comment\"># 在浏览器API中添加登录</span></div><div class=\"line\">urls.py</div><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"> </div><div class=\"line\">urlpatterns += [</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>)),</div><div class=\"line\">]\t<span class=\"comment\"># 为api添加一个包括登录和退出视图的url样式</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># api-auth部分可以是任何你想要的url，唯一的限制为include中的链接必须使用‘rest_framework’名字空间，在Django1.9+ rest框架会设置名字空间，所以必须写</span></div></pre></td></tr></table></figure>\n<h3 id=\"URL模式命名\"><a href=\"#URL模式命名\" class=\"headerlink\" title=\"URL模式命名\"></a>URL模式命名</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">url(<span class=\"string\">r'^app/user/$'</span>, UserView.as_view(), name=<span class=\"string\">'user_add'</span>), <span class=\"comment\"># name指定url名称</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加分页\"><a href=\"#添加分页\" class=\"headerlink\" title=\"添加分页\"></a>添加分页</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># setting.py中</span></div><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">    <span class=\"string\">'DEFAULT_PAGINATION_CLASS'</span>: <span class=\"string\">'base.serializers.PlugPageNumberPagination'</span>,</div><div class=\"line\">    <span class=\"string\">'MAX_PAGE_SIZE'</span>: <span class=\"number\">50</span>,</div><div class=\"line\">    <span class=\"string\">'PAGE_SIZE'</span>:     <span class=\"number\">15</span>  <span class=\"comment\"># default page size</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"视图集-ViewSets-和路由-Routers\"><a href=\"#视图集-ViewSets-和路由-Routers\" class=\"headerlink\" title=\"视图集(ViewSets)和路由(Routers)\"></a>视图集(ViewSets)和路由(Routers)</h3><p>视图集让开发者把精力集中在构建状态和交互的api模型，而且他可以基于一般规范自动构建url<br>一个viewset类只绑定一个方法集合，当它初始化一个视图集合时，一般使用为处理复杂的url定义的Router类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># views.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> viewsets</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserviewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">\tqueryset = User.objects.all()</div><div class=\"line\">\tserializer_class = UserSerializer</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list</span><span class=\"params\">(self,request)</span>:</span></div><div class=\"line\">    \t<span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> data</div></pre></td></tr></table></figure></p>\n<h3 id=\"明确绑定视图集到URL\"><a href=\"#明确绑定视图集到URL\" class=\"headerlink\" title=\"明确绑定视图集到URL\"></a>明确绑定视图集到URL</h3><p>定义URLConf时，处理方法只绑定了动作，我们必须从我们的视图集(ViewSets)创建一个视图集合，在urls.py文件中，我们将ViewSet类绑定到具体视图的集合</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"># urls.py中</div><div class=\"line\">from rest_framework.urlpatterns import format_suffix_patterns</div><div class=\"line\"> </div><div class=\"line\">user_list = UserView.as_view(&#123;</div><div class=\"line\">    'get':'list',</div><div class=\"line\">    'post':'creat',</div><div class=\"line\">&#125;)</div><div class=\"line\">url(r'^user/$, user_list)),</div><div class=\"line\"> </div><div class=\"line\"># 或者：</div><div class=\"line\">list_create = &#123;</div><div class=\"line\">    'get': 'list',</div><div class=\"line\">    'post': 'create',</div><div class=\"line\">&#125;</div><div class=\"line\"> url(r'^user/$', UserView.as_view(list_create)),</div></pre></td></tr></table></figure>\n<h3 id=\"使用路由\"><a href=\"#使用路由\" class=\"headerlink\" title=\"使用路由\"></a>使用路由</h3><p>使用Router类可以自动将资源和视图(views),链接(urls)联系起来，我们只需要用一个路由注册合适的视图集合<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># urls.py中</span></div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.routers <span class=\"keyword\">import</span> DefaultRouter</div><div class=\"line\"> </div><div class=\"line\">router =  routers.DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>,views.UserViewSet)</div><div class=\"line\">router.register(<span class=\"string\">r'groups'</span>,views.GroupsViewSet)</div><div class=\"line\"> </div><div class=\"line\">urlpatterns += [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(router.urls)),</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>)),</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.django-rest-framework.org/\">http://www.django-rest-framework.org/</a><br><a href=\"https://github.com/tomchristie/rest-framework-tutorial\">https://github.com/tomchristie/rest-framework-tutorial</a><br><a href=\"http://www.cnblogs.com/loveis715/p/4669091.html\">http://www.cnblogs.com/loveis715/p/4669091.html</a></p>\n"},{"title":"DRF ModelSerializer常用方法","date":"2017-05-14T12:13:22.000Z","_content":"\n### ModelSerializer属性方法\n```python\nclass AccountSerializer(serializers.ModelSerializer):\n    other_name = serializers.CharField(source='name', read_only=True)   # 新添加fields中字段,该serializer对应的model中字段\n    other_field = serializers.SerializerMethodField()   # 添加不是该model中的字段\n    class Meta:\n        model = Account # 指定model\n        fields = ('id', 'account_name', 'users', 'created')  # 包括的字段\n        fields = '__all__'  # 显示所有字段\n        exclude = ('users',)    # 排除不显示的字段,和fields不能同时使用\n        depth = 1   # 展示ForeignKey对应的数据，设置展示深度\n        read_only_fields = ('account_name',)    # 设置只读字段\n    \n    def get_other_field(self, obj):# (dept为外键字段)\n        return obj.dept.name if obj.dept else ''\n```\n","source":"_posts/rest-framwork-serializers.md","raw":"---\ntitle: DRF ModelSerializer常用方法\ndate: 2017-05-14 20:13:22\ntags:\n  - ModelSerializer\ncategories:\n  - DRF\n---\n\n### ModelSerializer属性方法\n```python\nclass AccountSerializer(serializers.ModelSerializer):\n    other_name = serializers.CharField(source='name', read_only=True)   # 新添加fields中字段,该serializer对应的model中字段\n    other_field = serializers.SerializerMethodField()   # 添加不是该model中的字段\n    class Meta:\n        model = Account # 指定model\n        fields = ('id', 'account_name', 'users', 'created')  # 包括的字段\n        fields = '__all__'  # 显示所有字段\n        exclude = ('users',)    # 排除不显示的字段,和fields不能同时使用\n        depth = 1   # 展示ForeignKey对应的数据，设置展示深度\n        read_only_fields = ('account_name',)    # 设置只读字段\n    \n    def get_other_field(self, obj):# (dept为外键字段)\n        return obj.dept.name if obj.dept else ''\n```\n","slug":"rest-framwork-serializers","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5y7005cct8u6157ada2","content":"<h3 id=\"ModelSerializer属性方法\"><a href=\"#ModelSerializer属性方法\" class=\"headerlink\" title=\"ModelSerializer属性方法\"></a>ModelSerializer属性方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    other_name = serializers.CharField(source=<span class=\"string\">'name'</span>, read_only=<span class=\"keyword\">True</span>)   <span class=\"comment\"># 新添加fields中字段,该serializer对应的model中字段</span></div><div class=\"line\">    other_field = serializers.SerializerMethodField()   <span class=\"comment\"># 添加不是该model中的字段</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Account <span class=\"comment\"># 指定model</span></div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'account_name'</span>, <span class=\"string\">'users'</span>, <span class=\"string\">'created'</span>)  <span class=\"comment\"># 包括的字段</span></div><div class=\"line\">        fields = <span class=\"string\">'__all__'</span>  <span class=\"comment\"># 显示所有字段</span></div><div class=\"line\">        exclude = (<span class=\"string\">'users'</span>,)    <span class=\"comment\"># 排除不显示的字段,和fields不能同时使用</span></div><div class=\"line\">        depth = <span class=\"number\">1</span>   <span class=\"comment\"># 展示ForeignKey对应的数据，设置展示深度</span></div><div class=\"line\">        read_only_fields = (<span class=\"string\">'account_name'</span>,)    <span class=\"comment\"># 设置只读字段</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_other_field</span><span class=\"params\">(self, obj)</span>:</span><span class=\"comment\"># (dept为外键字段)</span></div><div class=\"line\">        <span class=\"keyword\">return</span> obj.dept.name <span class=\"keyword\">if</span> obj.dept <span class=\"keyword\">else</span> <span class=\"string\">''</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"ModelSerializer属性方法\"><a href=\"#ModelSerializer属性方法\" class=\"headerlink\" title=\"ModelSerializer属性方法\"></a>ModelSerializer属性方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    other_name = serializers.CharField(source=<span class=\"string\">'name'</span>, read_only=<span class=\"keyword\">True</span>)   <span class=\"comment\"># 新添加fields中字段,该serializer对应的model中字段</span></div><div class=\"line\">    other_field = serializers.SerializerMethodField()   <span class=\"comment\"># 添加不是该model中的字段</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Account <span class=\"comment\"># 指定model</span></div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'account_name'</span>, <span class=\"string\">'users'</span>, <span class=\"string\">'created'</span>)  <span class=\"comment\"># 包括的字段</span></div><div class=\"line\">        fields = <span class=\"string\">'__all__'</span>  <span class=\"comment\"># 显示所有字段</span></div><div class=\"line\">        exclude = (<span class=\"string\">'users'</span>,)    <span class=\"comment\"># 排除不显示的字段,和fields不能同时使用</span></div><div class=\"line\">        depth = <span class=\"number\">1</span>   <span class=\"comment\"># 展示ForeignKey对应的数据，设置展示深度</span></div><div class=\"line\">        read_only_fields = (<span class=\"string\">'account_name'</span>,)    <span class=\"comment\"># 设置只读字段</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_other_field</span><span class=\"params\">(self, obj)</span>:</span><span class=\"comment\"># (dept为外键字段)</span></div><div class=\"line\">        <span class=\"keyword\">return</span> obj.dept.name <span class=\"keyword\">if</span> obj.dept <span class=\"keyword\">else</span> <span class=\"string\">''</span></div></pre></td></tr></table></figure>\n"},{"title":"Scrapy Architecture","date":"2017-12-01T14:03:49.000Z","_content":"#### 架构\n![Scrapy](https://ttxsgoto.github.io/img/scrapy/scrapy.png)\n所有过程的流向都依赖于 ENGINE 模块\n1.Engine从Spider中得到初始的Requests，Requests将被用来进行爬取；\n2.Engine将得到的Requests放入Scheduler中，然后不断从Scheduler询问下次可以进行爬去的Requests；\n3.Scheduler返回下一次需要被爬取的Requests给Engine；\n4.Engine将Requests发送给Downloader，通过Downloader Middlewares 的`process_request()` 方法进行传递；\n5.Downloader完成了对该页面的下载，Downloader将会生成一个与该页面相关的Response对象，通过Downloader Middlewares的`process_response()`方法进行传递,将其反馈给Engine；\n6.Engine从Downloader得到Response再发送给Spider进行处理；通过Spidder Middlewares的`process_spider_input()`方法进行传递；\n7.Spider 处理从Engine返回的Reponse对象，返回被爬取的items和新的Requests给Engine继续处理,通过Spider Middlewares的`process_spider_output()`方法进行传递；\n8.Engine发送已经被处理的Items到Item Pipelines，然后将新的Requests发送给Scheduler请求下一次可能的新的Request进行爬取；\n9.再重复整个流程，直到Scheduler中没有新的Requests\n\n#### Scrapy主要模块\n- Engine:核心引擎来控制所有组件之间的数据流向\n- Scheduler:从Engine当中获取Requests，然后将它们放入队列当中，当Engine需要再触发\n- Downloader:主要是取得web页面，然后将它们返回给Engine，Engine再反馈给Spider\n- Downloader middleware:位于Engine和Downloader之间的一个特殊的“钩子(hook)”，主要处理从Engine发送给 Downloader的Requests，以及从Downloader传递给Engine的Responses\n- Spiders:自定义类，用来解析Responses并提取相关的元素items\n- Spider middleware:是Engine和Spiders之间的一个特殊的钩子(hook)，主要处理spider的input(reponses)和output(items和requests)\n- Item Pipeline:处理Spider提取完成的items,对数据进行清洗，验证和持久化处理\n\n","source":"_posts/scrapy-state.md","raw":"---\ntitle: Scrapy Architecture\ndate: 2017-12-01 22:03:49\ntags:\n  - Architecture\ncategories:\n  - Scrapy\n---\n#### 架构\n![Scrapy](https://ttxsgoto.github.io/img/scrapy/scrapy.png)\n所有过程的流向都依赖于 ENGINE 模块\n1.Engine从Spider中得到初始的Requests，Requests将被用来进行爬取；\n2.Engine将得到的Requests放入Scheduler中，然后不断从Scheduler询问下次可以进行爬去的Requests；\n3.Scheduler返回下一次需要被爬取的Requests给Engine；\n4.Engine将Requests发送给Downloader，通过Downloader Middlewares 的`process_request()` 方法进行传递；\n5.Downloader完成了对该页面的下载，Downloader将会生成一个与该页面相关的Response对象，通过Downloader Middlewares的`process_response()`方法进行传递,将其反馈给Engine；\n6.Engine从Downloader得到Response再发送给Spider进行处理；通过Spidder Middlewares的`process_spider_input()`方法进行传递；\n7.Spider 处理从Engine返回的Reponse对象，返回被爬取的items和新的Requests给Engine继续处理,通过Spider Middlewares的`process_spider_output()`方法进行传递；\n8.Engine发送已经被处理的Items到Item Pipelines，然后将新的Requests发送给Scheduler请求下一次可能的新的Request进行爬取；\n9.再重复整个流程，直到Scheduler中没有新的Requests\n\n#### Scrapy主要模块\n- Engine:核心引擎来控制所有组件之间的数据流向\n- Scheduler:从Engine当中获取Requests，然后将它们放入队列当中，当Engine需要再触发\n- Downloader:主要是取得web页面，然后将它们返回给Engine，Engine再反馈给Spider\n- Downloader middleware:位于Engine和Downloader之间的一个特殊的“钩子(hook)”，主要处理从Engine发送给 Downloader的Requests，以及从Downloader传递给Engine的Responses\n- Spiders:自定义类，用来解析Responses并提取相关的元素items\n- Spider middleware:是Engine和Spiders之间的一个特殊的钩子(hook)，主要处理spider的input(reponses)和output(items和requests)\n- Item Pipeline:处理Spider提取完成的items,对数据进行清洗，验证和持久化处理\n\n","slug":"scrapy-state","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yk005hct8ubr95hbs9","content":"<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><p><img src=\"https://ttxsgoto.github.io/img/scrapy/scrapy.png\" alt=\"Scrapy\"><br>所有过程的流向都依赖于 ENGINE 模块<br>1.Engine从Spider中得到初始的Requests，Requests将被用来进行爬取；<br>2.Engine将得到的Requests放入Scheduler中，然后不断从Scheduler询问下次可以进行爬去的Requests；<br>3.Scheduler返回下一次需要被爬取的Requests给Engine；<br>4.Engine将Requests发送给Downloader，通过Downloader Middlewares 的<code>process_request()</code> 方法进行传递；<br>5.Downloader完成了对该页面的下载，Downloader将会生成一个与该页面相关的Response对象，通过Downloader Middlewares的<code>process_response()</code>方法进行传递,将其反馈给Engine；<br>6.Engine从Downloader得到Response再发送给Spider进行处理；通过Spidder Middlewares的<code>process_spider_input()</code>方法进行传递；<br>7.Spider 处理从Engine返回的Reponse对象，返回被爬取的items和新的Requests给Engine继续处理,通过Spider Middlewares的<code>process_spider_output()</code>方法进行传递；<br>8.Engine发送已经被处理的Items到Item Pipelines，然后将新的Requests发送给Scheduler请求下一次可能的新的Request进行爬取；<br>9.再重复整个流程，直到Scheduler中没有新的Requests</p>\n<h4 id=\"Scrapy主要模块\"><a href=\"#Scrapy主要模块\" class=\"headerlink\" title=\"Scrapy主要模块\"></a>Scrapy主要模块</h4><ul>\n<li>Engine:核心引擎来控制所有组件之间的数据流向</li>\n<li>Scheduler:从Engine当中获取Requests，然后将它们放入队列当中，当Engine需要再触发</li>\n<li>Downloader:主要是取得web页面，然后将它们返回给Engine，Engine再反馈给Spider</li>\n<li>Downloader middleware:位于Engine和Downloader之间的一个特殊的“钩子(hook)”，主要处理从Engine发送给 Downloader的Requests，以及从Downloader传递给Engine的Responses</li>\n<li>Spiders:自定义类，用来解析Responses并提取相关的元素items</li>\n<li>Spider middleware:是Engine和Spiders之间的一个特殊的钩子(hook)，主要处理spider的input(reponses)和output(items和requests)</li>\n<li>Item Pipeline:处理Spider提取完成的items,对数据进行清洗，验证和持久化处理</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><p><img src=\"https://ttxsgoto.github.io/img/scrapy/scrapy.png\" alt=\"Scrapy\"><br>所有过程的流向都依赖于 ENGINE 模块<br>1.Engine从Spider中得到初始的Requests，Requests将被用来进行爬取；<br>2.Engine将得到的Requests放入Scheduler中，然后不断从Scheduler询问下次可以进行爬去的Requests；<br>3.Scheduler返回下一次需要被爬取的Requests给Engine；<br>4.Engine将Requests发送给Downloader，通过Downloader Middlewares 的<code>process_request()</code> 方法进行传递；<br>5.Downloader完成了对该页面的下载，Downloader将会生成一个与该页面相关的Response对象，通过Downloader Middlewares的<code>process_response()</code>方法进行传递,将其反馈给Engine；<br>6.Engine从Downloader得到Response再发送给Spider进行处理；通过Spidder Middlewares的<code>process_spider_input()</code>方法进行传递；<br>7.Spider 处理从Engine返回的Reponse对象，返回被爬取的items和新的Requests给Engine继续处理,通过Spider Middlewares的<code>process_spider_output()</code>方法进行传递；<br>8.Engine发送已经被处理的Items到Item Pipelines，然后将新的Requests发送给Scheduler请求下一次可能的新的Request进行爬取；<br>9.再重复整个流程，直到Scheduler中没有新的Requests</p>\n<h4 id=\"Scrapy主要模块\"><a href=\"#Scrapy主要模块\" class=\"headerlink\" title=\"Scrapy主要模块\"></a>Scrapy主要模块</h4><ul>\n<li>Engine:核心引擎来控制所有组件之间的数据流向</li>\n<li>Scheduler:从Engine当中获取Requests，然后将它们放入队列当中，当Engine需要再触发</li>\n<li>Downloader:主要是取得web页面，然后将它们返回给Engine，Engine再反馈给Spider</li>\n<li>Downloader middleware:位于Engine和Downloader之间的一个特殊的“钩子(hook)”，主要处理从Engine发送给 Downloader的Requests，以及从Downloader传递给Engine的Responses</li>\n<li>Spiders:自定义类，用来解析Responses并提取相关的元素items</li>\n<li>Spider middleware:是Engine和Spiders之间的一个特殊的钩子(hook)，主要处理spider的input(reponses)和output(items和requests)</li>\n<li>Item Pipeline:处理Spider提取完成的items,对数据进行清洗，验证和持久化处理</li>\n</ul>\n"},{"title":"Scrapy Scrapy+Selenium抓取本站博客","date":"2017-12-17T13:12:00.000Z","_content":"\n#### 说明\n1. 通过scrapy+selenium对本站blog进行抓取\n2. 抓取到的数据通过sqlalchemy操作写入mysql\n3. 用来练习scrapy+selenium模拟操作浏览器，没有对blog正文进行相应处理\n\n#### 实现说明\n\n- 定义表结构(models.py)\n\n```python\nimport datetime\nfrom sqlalchemy.engine.url import URL\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Date\nfrom tutorial_spider.settings import MYSQL_DATABASE\n \n \ndef db_connect():\n    return create_engine(URL(**MYSQL_DATABASE), echo=False)\n \ndef create_news_table(engine):\n    Base.metadata.create_all(engine)\n \nBase = declarative_base()\n \nclass TtxsgotoBlog(Base):\n    __tablename__ = 'spider_ttxsgotoblog'\n    id = Column(Integer, primary_key=True)\n    title = Column(String(32))          # 标题\n    url = Column(String(128))           # url\n    publish = Column(String(32))        # 发布日期\n    content = Column(Text)              # 内容\n    classify = Column(String(32))       # 分类\n    lable = Column(String(32))          # 标签\n    create_time = Column(String(32))    # 创建时间\n```\n\n- 定义item(items.py)\n\n```python\nimport scrapy\nfrom tutorial_spider.models import TtxsgotoBlog\n \nclass TtxsgotoItem(scrapy.Item):\n \n    title = scrapy.Field()          # 标题\n    url = scrapy.Field()            # url\n    publish = scrapy.Field()        # 发布日期\n    content = scrapy.Field()        # 内容\n    classify = scrapy.Field(        # 分类\n        output_processor=Join(',')\n    )\n    lable = scrapy.Field()          # 标签\n    create_time = scrapy.Field()    # 创建时间\n \n    def insert_to_mysql(self):\n        item_sql = TtxsgotoBlog(\n            title=self[\"title\"],\n            url=self[\"url\"],\n            publish=self[\"publish\"],\n            content=self[\"content\"],\n            classify=self[\"classify\"],\n            lable=self[\"lable\"],\n            create_time=self[\"create_time\"]\n        )\n        return item_sql\n```\n- 数据处理pipeline(pipelines.py)\n\n```python\nimport scrapy\nfrom scrapy.exceptions import DropItem\nfrom sqlalchemy.orm import sessionmaker\nfrom tutorial_spider.models import db_connect, create_news_table\nfrom contextlib import contextmanager\nimport logging\nlogger = logging.getLogger(__name__)\n \n \n@contextmanager\ndef session_scope(Session):\n    session = Session()\n    session.expire_on_commit = False\n    try:\n        yield session\n        session.commit()\n    except:\n        session.rollback()\n        raise\n    finally:\n        session.close()\n \n \nclass BasicMyslqchemyPipeline(object):\n    def __init__(self):\n        engine = db_connect()\n        create_news_table(engine)\n        self.Session = sessionmaker(bind=engine)\n \n    def open_spider(self, spider):\n        pass\n \n    def process_item(self, item, spider):\n        insert_sql = item.insert_to_mysql()\n        with session_scope(self.Session) as session:\n            session.add(insert_sql)\n        # return item\n \n    def close_spider(self, spider):\n        pass\n \n \nclass TtxsgotoBlogMysqlchemyPipeline(BasicMyslqchemyPipeline):\n    \"\"\"保存ttxsgoto Blog到数据库\"\"\"\n    pass\n```\n\n- 抓取逻辑(spiders/ttxsgoto.py)\n\n```python\n# -*- coding: utf-8 -*-\n\"\"\"\n    - scrapy + selenium 爬取ttxsgoto.github.io 文章\n    - 主要用来练习scrapy和selenium结合完成抓取工作\n    - 使用过程非标准scrapy框架\n\"\"\"\nimport datetime\nimport logging\nfrom urllib import parse\nimport scrapy\nimport time\nfrom scrapy.http import HtmlResponse\nfrom selenium import webdriver\nfrom scrapy.xlib.pydispatch import dispatcher\nfrom scrapy import signals\nfrom tutorial_spider.items import TtxsgotoItem\nfrom tutorial_spider.pipelines import TtxsgotoBlogMysqlchemyPipeline\n \nlogger = logging.getLogger(__name__)\n \n \nclass TtxsgotoSpider(scrapy.Spider):\n    name = 'ttxsgoto'\n    allowed_domains = ['ttxsgoto.github.io']\n    start_urls = ['http://ttxsgoto.github.io/']\n \n    def __init__(self, *args, **kwargs):\n        self.driver = webdriver.Chrome()\n        self.driver.maximize_window()\n        logger.info(\"开始爬取ttxsgoto.github.io数据\")\n        super(TtxsgotoSpider, self).__init__(*args, **kwargs)\n        dispatcher.connect(self.close_driver, signals.spider_closed)\n \n    def close_driver(self, spider):\n        '''\n       关闭浏览器\n        '''\n        self.driver.quit()\n \n    def start_requests(self):\n        self.driver.get(self.start_urls[0])\n        res = HtmlResponse(url='index html', body=self.driver.page_source, encoding=\"utf-8\")\n        title_text = res.css('#main section h1 a::text')[0].root.strip()\n        self.driver.find_element_by_link_text(title_text).click()    # 点击进去\n        time.sleep(2)\n        if title_text in self.driver.page_source:\n            self.detail_parse(self.driver.page_source, title_text)\n \n        while True:\n            try:\n                key_word = self.driver.find_elements_by_class_name(\"next\")[0].text  # 进行下一篇文章抓取\n            except (TypeError,IndexError):\n                self.driver.quit()\n                key_word = None\n            if not key_word:\n                break\n            self.driver.find_element_by_link_text(key_word).click()\n            time.sleep(2)\n            res = HtmlResponse(url='next html', body=self.driver.page_source, encoding=\"utf-8\")\n            title_text = res.css('.article-info h1 a::text').extract_first()\n            self.detail_parse(self.driver.page_source, title_text)\n \n    def detail_parse(self, page_source, title):\n        res = HtmlResponse(url='detail html', body=page_source, encoding=\"utf-8\")\n        item = TtxsgotoItem()\n        item['title'] = title   # 标题\n        _url = res.css('#main h1 a::attr(href)').extract_first()\n        item['url'] = parse.urljoin(self.start_urls[0], _url)   # url\n        item['publish'] = res.css('.article-time time::text').extract_first()   # 发布日期\n        item['content'] = res.css('.article-content').extract_first()   # 内容\n        classify_list = res.css('.article-tags a::text').extract()\n        item['classify'] = ','.join(classify_list)  # 分类\n        item['lable'] = res.css('.article-categories a::text').extract_first()   # 标签\n        item['create_time'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') # 创建日期\n        pipeline = TtxsgotoBlogMysqlchemyPipeline()\n        pipeline.process_item(item, self.name)\t# 写入数据库\n```\n\n#### 查看数据\n![](https://ttxsgoto.github.io/img/scrapy/selenium01.png)\n\n#### 代码github\n[Github](https://github.com/ttxsgoto/tutorial_spider)\n","source":"_posts/scrapy-selenium.md","raw":"---\ntitle: Scrapy Scrapy+Selenium抓取本站博客\ndate: 2017-12-17 21:12:00\ntags:\n  - Selenium\n  - Scrapy\ncategories:\n  - Scrapy\n---\n\n#### 说明\n1. 通过scrapy+selenium对本站blog进行抓取\n2. 抓取到的数据通过sqlalchemy操作写入mysql\n3. 用来练习scrapy+selenium模拟操作浏览器，没有对blog正文进行相应处理\n\n#### 实现说明\n\n- 定义表结构(models.py)\n\n```python\nimport datetime\nfrom sqlalchemy.engine.url import URL\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Date\nfrom tutorial_spider.settings import MYSQL_DATABASE\n \n \ndef db_connect():\n    return create_engine(URL(**MYSQL_DATABASE), echo=False)\n \ndef create_news_table(engine):\n    Base.metadata.create_all(engine)\n \nBase = declarative_base()\n \nclass TtxsgotoBlog(Base):\n    __tablename__ = 'spider_ttxsgotoblog'\n    id = Column(Integer, primary_key=True)\n    title = Column(String(32))          # 标题\n    url = Column(String(128))           # url\n    publish = Column(String(32))        # 发布日期\n    content = Column(Text)              # 内容\n    classify = Column(String(32))       # 分类\n    lable = Column(String(32))          # 标签\n    create_time = Column(String(32))    # 创建时间\n```\n\n- 定义item(items.py)\n\n```python\nimport scrapy\nfrom tutorial_spider.models import TtxsgotoBlog\n \nclass TtxsgotoItem(scrapy.Item):\n \n    title = scrapy.Field()          # 标题\n    url = scrapy.Field()            # url\n    publish = scrapy.Field()        # 发布日期\n    content = scrapy.Field()        # 内容\n    classify = scrapy.Field(        # 分类\n        output_processor=Join(',')\n    )\n    lable = scrapy.Field()          # 标签\n    create_time = scrapy.Field()    # 创建时间\n \n    def insert_to_mysql(self):\n        item_sql = TtxsgotoBlog(\n            title=self[\"title\"],\n            url=self[\"url\"],\n            publish=self[\"publish\"],\n            content=self[\"content\"],\n            classify=self[\"classify\"],\n            lable=self[\"lable\"],\n            create_time=self[\"create_time\"]\n        )\n        return item_sql\n```\n- 数据处理pipeline(pipelines.py)\n\n```python\nimport scrapy\nfrom scrapy.exceptions import DropItem\nfrom sqlalchemy.orm import sessionmaker\nfrom tutorial_spider.models import db_connect, create_news_table\nfrom contextlib import contextmanager\nimport logging\nlogger = logging.getLogger(__name__)\n \n \n@contextmanager\ndef session_scope(Session):\n    session = Session()\n    session.expire_on_commit = False\n    try:\n        yield session\n        session.commit()\n    except:\n        session.rollback()\n        raise\n    finally:\n        session.close()\n \n \nclass BasicMyslqchemyPipeline(object):\n    def __init__(self):\n        engine = db_connect()\n        create_news_table(engine)\n        self.Session = sessionmaker(bind=engine)\n \n    def open_spider(self, spider):\n        pass\n \n    def process_item(self, item, spider):\n        insert_sql = item.insert_to_mysql()\n        with session_scope(self.Session) as session:\n            session.add(insert_sql)\n        # return item\n \n    def close_spider(self, spider):\n        pass\n \n \nclass TtxsgotoBlogMysqlchemyPipeline(BasicMyslqchemyPipeline):\n    \"\"\"保存ttxsgoto Blog到数据库\"\"\"\n    pass\n```\n\n- 抓取逻辑(spiders/ttxsgoto.py)\n\n```python\n# -*- coding: utf-8 -*-\n\"\"\"\n    - scrapy + selenium 爬取ttxsgoto.github.io 文章\n    - 主要用来练习scrapy和selenium结合完成抓取工作\n    - 使用过程非标准scrapy框架\n\"\"\"\nimport datetime\nimport logging\nfrom urllib import parse\nimport scrapy\nimport time\nfrom scrapy.http import HtmlResponse\nfrom selenium import webdriver\nfrom scrapy.xlib.pydispatch import dispatcher\nfrom scrapy import signals\nfrom tutorial_spider.items import TtxsgotoItem\nfrom tutorial_spider.pipelines import TtxsgotoBlogMysqlchemyPipeline\n \nlogger = logging.getLogger(__name__)\n \n \nclass TtxsgotoSpider(scrapy.Spider):\n    name = 'ttxsgoto'\n    allowed_domains = ['ttxsgoto.github.io']\n    start_urls = ['http://ttxsgoto.github.io/']\n \n    def __init__(self, *args, **kwargs):\n        self.driver = webdriver.Chrome()\n        self.driver.maximize_window()\n        logger.info(\"开始爬取ttxsgoto.github.io数据\")\n        super(TtxsgotoSpider, self).__init__(*args, **kwargs)\n        dispatcher.connect(self.close_driver, signals.spider_closed)\n \n    def close_driver(self, spider):\n        '''\n       关闭浏览器\n        '''\n        self.driver.quit()\n \n    def start_requests(self):\n        self.driver.get(self.start_urls[0])\n        res = HtmlResponse(url='index html', body=self.driver.page_source, encoding=\"utf-8\")\n        title_text = res.css('#main section h1 a::text')[0].root.strip()\n        self.driver.find_element_by_link_text(title_text).click()    # 点击进去\n        time.sleep(2)\n        if title_text in self.driver.page_source:\n            self.detail_parse(self.driver.page_source, title_text)\n \n        while True:\n            try:\n                key_word = self.driver.find_elements_by_class_name(\"next\")[0].text  # 进行下一篇文章抓取\n            except (TypeError,IndexError):\n                self.driver.quit()\n                key_word = None\n            if not key_word:\n                break\n            self.driver.find_element_by_link_text(key_word).click()\n            time.sleep(2)\n            res = HtmlResponse(url='next html', body=self.driver.page_source, encoding=\"utf-8\")\n            title_text = res.css('.article-info h1 a::text').extract_first()\n            self.detail_parse(self.driver.page_source, title_text)\n \n    def detail_parse(self, page_source, title):\n        res = HtmlResponse(url='detail html', body=page_source, encoding=\"utf-8\")\n        item = TtxsgotoItem()\n        item['title'] = title   # 标题\n        _url = res.css('#main h1 a::attr(href)').extract_first()\n        item['url'] = parse.urljoin(self.start_urls[0], _url)   # url\n        item['publish'] = res.css('.article-time time::text').extract_first()   # 发布日期\n        item['content'] = res.css('.article-content').extract_first()   # 内容\n        classify_list = res.css('.article-tags a::text').extract()\n        item['classify'] = ','.join(classify_list)  # 分类\n        item['lable'] = res.css('.article-categories a::text').extract_first()   # 标签\n        item['create_time'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') # 创建日期\n        pipeline = TtxsgotoBlogMysqlchemyPipeline()\n        pipeline.process_item(item, self.name)\t# 写入数据库\n```\n\n#### 查看数据\n![](https://ttxsgoto.github.io/img/scrapy/selenium01.png)\n\n#### 代码github\n[Github](https://github.com/ttxsgoto/tutorial_spider)\n","slug":"scrapy-selenium","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yl005kct8uc4vts0lg","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>通过scrapy+selenium对本站blog进行抓取</li>\n<li>抓取到的数据通过sqlalchemy操作写入mysql</li>\n<li>用来练习scrapy+selenium模拟操作浏览器，没有对blog正文进行相应处理</li>\n</ol>\n<h4 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h4><ul>\n<li>定义表结构(models.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.engine.url <span class=\"keyword\">import</span> URL</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine, Column, Integer, String, Text, DateTime, Date</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.settings <span class=\"keyword\">import</span> MYSQL_DATABASE</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">db_connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> create_engine(URL(**MYSQL_DATABASE), echo=<span class=\"keyword\">False</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_news_table</span><span class=\"params\">(engine)</span>:</span></div><div class=\"line\">    Base.metadata.create_all(engine)</div><div class=\"line\"> </div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlog</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'spider_ttxsgotoblog'</span></div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = Column(String(<span class=\"number\">128</span>))           <span class=\"comment\"># url</span></div><div class=\"line\">    publish = Column(String(<span class=\"number\">32</span>))        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = Column(Text)              <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = Column(String(<span class=\"number\">32</span>))       <span class=\"comment\"># 分类</span></div><div class=\"line\">    lable = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = Column(String(<span class=\"number\">32</span>))    <span class=\"comment\"># 创建时间</span></div></pre></td></tr></table></figure>\n<ul>\n<li>定义item(items.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> TtxsgotoBlog</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    title = scrapy.Field()          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = scrapy.Field()            <span class=\"comment\"># url</span></div><div class=\"line\">    publish = scrapy.Field()        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = scrapy.Field()        <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = scrapy.Field(        <span class=\"comment\"># 分类</span></div><div class=\"line\">        output_processor=Join(<span class=\"string\">','</span>)</div><div class=\"line\">    )</div><div class=\"line\">    lable = scrapy.Field()          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = scrapy.Field()    <span class=\"comment\"># 创建时间</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_to_mysql</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        item_sql = TtxsgotoBlog(</div><div class=\"line\">            title=self[<span class=\"string\">\"title\"</span>],</div><div class=\"line\">            url=self[<span class=\"string\">\"url\"</span>],</div><div class=\"line\">            publish=self[<span class=\"string\">\"publish\"</span>],</div><div class=\"line\">            content=self[<span class=\"string\">\"content\"</span>],</div><div class=\"line\">            classify=self[<span class=\"string\">\"classify\"</span>],</div><div class=\"line\">            lable=self[<span class=\"string\">\"lable\"</span>],</div><div class=\"line\">            create_time=self[<span class=\"string\">\"create_time\"</span>]</div><div class=\"line\">        )</div><div class=\"line\">        <span class=\"keyword\">return</span> item_sql</div></pre></td></tr></table></figure>\n<ul>\n<li>数据处理pipeline(pipelines.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> db_connect, create_news_table</div><div class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">session_scope</span><span class=\"params\">(Session)</span>:</span></div><div class=\"line\">    session = Session()</div><div class=\"line\">    session.expire_on_commit = <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">yield</span> session</div><div class=\"line\">        session.commit()</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        session.rollback()</div><div class=\"line\">        <span class=\"keyword\">raise</span></div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        session.close()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicMyslqchemyPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        engine = db_connect()</div><div class=\"line\">        create_news_table(engine)</div><div class=\"line\">        self.Session = sessionmaker(bind=engine)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        insert_sql = item.insert_to_mysql()</div><div class=\"line\">        <span class=\"keyword\">with</span> session_scope(self.Session) <span class=\"keyword\">as</span> session:</div><div class=\"line\">            session.add(insert_sql)</div><div class=\"line\">        <span class=\"comment\"># return item</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlogMysqlchemyPipeline</span><span class=\"params\">(BasicMyslqchemyPipeline)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"保存ttxsgoto Blog到数据库\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<ul>\n<li>抓取逻辑(spiders/ttxsgoto.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">    - scrapy + selenium 爬取ttxsgoto.github.io 文章</div><div class=\"line\">    - 主要用来练习scrapy和selenium结合完成抓取工作</div><div class=\"line\">    - 使用过程非标准scrapy框架</div><div class=\"line\">\"\"\"</div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> HtmlResponse</div><div class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.xlib.pydispatch <span class=\"keyword\">import</span> dispatcher</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> signals</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.items <span class=\"keyword\">import</span> TtxsgotoItem</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.pipelines <span class=\"keyword\">import</span> TtxsgotoBlogMysqlchemyPipeline</div><div class=\"line\"> </div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">'ttxsgoto'</span></div><div class=\"line\">    allowed_domains = [<span class=\"string\">'ttxsgoto.github.io'</span>]</div><div class=\"line\">    start_urls = [<span class=\"string\">'http://ttxsgoto.github.io/'</span>]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></div><div class=\"line\">        self.driver = webdriver.Chrome()</div><div class=\"line\">        self.driver.maximize_window()</div><div class=\"line\">        logger.info(<span class=\"string\">\"开始爬取ttxsgoto.github.io数据\"</span>)</div><div class=\"line\">        super(TtxsgotoSpider, self).__init__(*args, **kwargs)</div><div class=\"line\">        dispatcher.connect(self.close_driver, signals.spider_closed)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_driver</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"string\">'''</span></div><div class=\"line\">       关闭浏览器</div><div class=\"line\">        '''</div><div class=\"line\">        self.driver.quit()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.driver.get(self.start_urls[<span class=\"number\">0</span>])</div><div class=\"line\">        res = HtmlResponse(url=<span class=\"string\">'index html'</span>, body=self.driver.page_source, encoding=<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\">        title_text = res.css(<span class=\"string\">'#main section h1 a::text'</span>)[<span class=\"number\">0</span>].root.strip()</div><div class=\"line\">        self.driver.find_element_by_link_text(title_text).click()    <span class=\"comment\"># 点击进去</span></div><div class=\"line\">        time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> title_text <span class=\"keyword\">in</span> self.driver.page_source:</div><div class=\"line\">            self.detail_parse(self.driver.page_source, title_text)</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                key_word = self.driver.find_elements_by_class_name(<span class=\"string\">\"next\"</span>)[<span class=\"number\">0</span>].text  <span class=\"comment\"># 进行下一篇文章抓取</span></div><div class=\"line\">            <span class=\"keyword\">except</span> (TypeError,IndexError):</div><div class=\"line\">                self.driver.quit()</div><div class=\"line\">                key_word = <span class=\"keyword\">None</span></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> key_word:</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            self.driver.find_element_by_link_text(key_word).click()</div><div class=\"line\">            time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">            res = HtmlResponse(url=<span class=\"string\">'next html'</span>, body=self.driver.page_source, encoding=<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\">            title_text = res.css(<span class=\"string\">'.article-info h1 a::text'</span>).extract_first()</div><div class=\"line\">            self.detail_parse(self.driver.page_source, title_text)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail_parse</span><span class=\"params\">(self, page_source, title)</span>:</span></div><div class=\"line\">        res = HtmlResponse(url=<span class=\"string\">'detail html'</span>, body=page_source, encoding=<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\">        item = TtxsgotoItem()</div><div class=\"line\">        item[<span class=\"string\">'title'</span>] = title   <span class=\"comment\"># 标题</span></div><div class=\"line\">        _url = res.css(<span class=\"string\">'#main h1 a::attr(href)'</span>).extract_first()</div><div class=\"line\">        item[<span class=\"string\">'url'</span>] = parse.urljoin(self.start_urls[<span class=\"number\">0</span>], _url)   <span class=\"comment\"># url</span></div><div class=\"line\">        item[<span class=\"string\">'publish'</span>] = res.css(<span class=\"string\">'.article-time time::text'</span>).extract_first()   <span class=\"comment\"># 发布日期</span></div><div class=\"line\">        item[<span class=\"string\">'content'</span>] = res.css(<span class=\"string\">'.article-content'</span>).extract_first()   <span class=\"comment\"># 内容</span></div><div class=\"line\">        classify_list = res.css(<span class=\"string\">'.article-tags a::text'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'classify'</span>] = <span class=\"string\">','</span>.join(classify_list)  <span class=\"comment\"># 分类</span></div><div class=\"line\">        item[<span class=\"string\">'lable'</span>] = res.css(<span class=\"string\">'.article-categories a::text'</span>).extract_first()   <span class=\"comment\"># 标签</span></div><div class=\"line\">        item[<span class=\"string\">'create_time'</span>] = datetime.datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>) <span class=\"comment\"># 创建日期</span></div><div class=\"line\">        pipeline = TtxsgotoBlogMysqlchemyPipeline()</div><div class=\"line\">        pipeline.process_item(item, self.name)\t<span class=\"comment\"># 写入数据库</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看数据\"><a href=\"#查看数据\" class=\"headerlink\" title=\"查看数据\"></a>查看数据</h4><p><img src=\"https://ttxsgoto.github.io/img/scrapy/selenium01.png\" alt=\"\"></p>\n<h4 id=\"代码github\"><a href=\"#代码github\" class=\"headerlink\" title=\"代码github\"></a>代码github</h4><p><a href=\"https://github.com/ttxsgoto/tutorial_spider\" target=\"_blank\" rel=\"external\">Github</a></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>通过scrapy+selenium对本站blog进行抓取</li>\n<li>抓取到的数据通过sqlalchemy操作写入mysql</li>\n<li>用来练习scrapy+selenium模拟操作浏览器，没有对blog正文进行相应处理</li>\n</ol>\n<h4 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h4><ul>\n<li>定义表结构(models.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.engine.url <span class=\"keyword\">import</span> URL</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine, Column, Integer, String, Text, DateTime, Date</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.settings <span class=\"keyword\">import</span> MYSQL_DATABASE</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">db_connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> create_engine(URL(**MYSQL_DATABASE), echo=<span class=\"keyword\">False</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_news_table</span><span class=\"params\">(engine)</span>:</span></div><div class=\"line\">    Base.metadata.create_all(engine)</div><div class=\"line\"> </div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlog</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'spider_ttxsgotoblog'</span></div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = Column(String(<span class=\"number\">128</span>))           <span class=\"comment\"># url</span></div><div class=\"line\">    publish = Column(String(<span class=\"number\">32</span>))        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = Column(Text)              <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = Column(String(<span class=\"number\">32</span>))       <span class=\"comment\"># 分类</span></div><div class=\"line\">    lable = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = Column(String(<span class=\"number\">32</span>))    <span class=\"comment\"># 创建时间</span></div></pre></td></tr></table></figure>\n<ul>\n<li>定义item(items.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> TtxsgotoBlog</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    title = scrapy.Field()          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = scrapy.Field()            <span class=\"comment\"># url</span></div><div class=\"line\">    publish = scrapy.Field()        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = scrapy.Field()        <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = scrapy.Field(        <span class=\"comment\"># 分类</span></div><div class=\"line\">        output_processor=Join(<span class=\"string\">','</span>)</div><div class=\"line\">    )</div><div class=\"line\">    lable = scrapy.Field()          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = scrapy.Field()    <span class=\"comment\"># 创建时间</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_to_mysql</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        item_sql = TtxsgotoBlog(</div><div class=\"line\">            title=self[<span class=\"string\">\"title\"</span>],</div><div class=\"line\">            url=self[<span class=\"string\">\"url\"</span>],</div><div class=\"line\">            publish=self[<span class=\"string\">\"publish\"</span>],</div><div class=\"line\">            content=self[<span class=\"string\">\"content\"</span>],</div><div class=\"line\">            classify=self[<span class=\"string\">\"classify\"</span>],</div><div class=\"line\">            lable=self[<span class=\"string\">\"lable\"</span>],</div><div class=\"line\">            create_time=self[<span class=\"string\">\"create_time\"</span>]</div><div class=\"line\">        )</div><div class=\"line\">        <span class=\"keyword\">return</span> item_sql</div></pre></td></tr></table></figure>\n<ul>\n<li>数据处理pipeline(pipelines.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> db_connect, create_news_table</div><div class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">session_scope</span><span class=\"params\">(Session)</span>:</span></div><div class=\"line\">    session = Session()</div><div class=\"line\">    session.expire_on_commit = <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">yield</span> session</div><div class=\"line\">        session.commit()</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        session.rollback()</div><div class=\"line\">        <span class=\"keyword\">raise</span></div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        session.close()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicMyslqchemyPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        engine = db_connect()</div><div class=\"line\">        create_news_table(engine)</div><div class=\"line\">        self.Session = sessionmaker(bind=engine)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        insert_sql = item.insert_to_mysql()</div><div class=\"line\">        <span class=\"keyword\">with</span> session_scope(self.Session) <span class=\"keyword\">as</span> session:</div><div class=\"line\">            session.add(insert_sql)</div><div class=\"line\">        <span class=\"comment\"># return item</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlogMysqlchemyPipeline</span><span class=\"params\">(BasicMyslqchemyPipeline)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"保存ttxsgoto Blog到数据库\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<ul>\n<li>抓取逻辑(spiders/ttxsgoto.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">    - scrapy + selenium 爬取ttxsgoto.github.io 文章</div><div class=\"line\">    - 主要用来练习scrapy和selenium结合完成抓取工作</div><div class=\"line\">    - 使用过程非标准scrapy框架</div><div class=\"line\">\"\"\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> HtmlResponse</div><div class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.xlib.pydispatch <span class=\"keyword\">import</span> dispatcher</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> signals</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.items <span class=\"keyword\">import</span> TtxsgotoItem</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.pipelines <span class=\"keyword\">import</span> TtxsgotoBlogMysqlchemyPipeline</div><div class=\"line\"> </div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">'ttxsgoto'</span></div><div class=\"line\">    allowed_domains = [<span class=\"string\">'ttxsgoto.github.io'</span>]</div><div class=\"line\">    start_urls = [<span class=\"string\">'http://ttxsgoto.github.io/'</span>]</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></div><div class=\"line\">        self.driver = webdriver.Chrome()</div><div class=\"line\">        self.driver.maximize_window()</div><div class=\"line\">        logger.info(<span class=\"string\">\"开始爬取ttxsgoto.github.io数据\"</span>)</div><div class=\"line\">        super(TtxsgotoSpider, self).__init__(*args, **kwargs)</div><div class=\"line\">        dispatcher.connect(self.close_driver, signals.spider_closed)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_driver</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"string\">'''</div><div class=\"line\">       关闭浏览器</div><div class=\"line\">        '''</span></div><div class=\"line\">        self.driver.quit()</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.driver.get(self.start_urls[<span class=\"number\">0</span>])</div><div class=\"line\">        res = HtmlResponse(url=<span class=\"string\">'index html'</span>, body=self.driver.page_source, encoding=<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\">        title_text = res.css(<span class=\"string\">'#main section h1 a::text'</span>)[<span class=\"number\">0</span>].root.strip()</div><div class=\"line\">        self.driver.find_element_by_link_text(title_text).click()    <span class=\"comment\"># 点击进去</span></div><div class=\"line\">        time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> title_text <span class=\"keyword\">in</span> self.driver.page_source:</div><div class=\"line\">            self.detail_parse(self.driver.page_source, title_text)</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                key_word = self.driver.find_elements_by_class_name(<span class=\"string\">\"next\"</span>)[<span class=\"number\">0</span>].text  <span class=\"comment\"># 进行下一篇文章抓取</span></div><div class=\"line\">            <span class=\"keyword\">except</span> (TypeError,IndexError):</div><div class=\"line\">                self.driver.quit()</div><div class=\"line\">                key_word = <span class=\"keyword\">None</span></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> key_word:</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            self.driver.find_element_by_link_text(key_word).click()</div><div class=\"line\">            time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">            res = HtmlResponse(url=<span class=\"string\">'next html'</span>, body=self.driver.page_source, encoding=<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\">            title_text = res.css(<span class=\"string\">'.article-info h1 a::text'</span>).extract_first()</div><div class=\"line\">            self.detail_parse(self.driver.page_source, title_text)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail_parse</span><span class=\"params\">(self, page_source, title)</span>:</span></div><div class=\"line\">        res = HtmlResponse(url=<span class=\"string\">'detail html'</span>, body=page_source, encoding=<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\">        item = TtxsgotoItem()</div><div class=\"line\">        item[<span class=\"string\">'title'</span>] = title   <span class=\"comment\"># 标题</span></div><div class=\"line\">        _url = res.css(<span class=\"string\">'#main h1 a::attr(href)'</span>).extract_first()</div><div class=\"line\">        item[<span class=\"string\">'url'</span>] = parse.urljoin(self.start_urls[<span class=\"number\">0</span>], _url)   <span class=\"comment\"># url</span></div><div class=\"line\">        item[<span class=\"string\">'publish'</span>] = res.css(<span class=\"string\">'.article-time time::text'</span>).extract_first()   <span class=\"comment\"># 发布日期</span></div><div class=\"line\">        item[<span class=\"string\">'content'</span>] = res.css(<span class=\"string\">'.article-content'</span>).extract_first()   <span class=\"comment\"># 内容</span></div><div class=\"line\">        classify_list = res.css(<span class=\"string\">'.article-tags a::text'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'classify'</span>] = <span class=\"string\">','</span>.join(classify_list)  <span class=\"comment\"># 分类</span></div><div class=\"line\">        item[<span class=\"string\">'lable'</span>] = res.css(<span class=\"string\">'.article-categories a::text'</span>).extract_first()   <span class=\"comment\"># 标签</span></div><div class=\"line\">        item[<span class=\"string\">'create_time'</span>] = datetime.datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>) <span class=\"comment\"># 创建日期</span></div><div class=\"line\">        pipeline = TtxsgotoBlogMysqlchemyPipeline()</div><div class=\"line\">        pipeline.process_item(item, self.name)\t<span class=\"comment\"># 写入数据库</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看数据\"><a href=\"#查看数据\" class=\"headerlink\" title=\"查看数据\"></a>查看数据</h4><p><img src=\"https://ttxsgoto.github.io/img/scrapy/selenium01.png\" alt=\"\"></p>\n<h4 id=\"代码github\"><a href=\"#代码github\" class=\"headerlink\" title=\"代码github\"></a>代码github</h4><p><a href=\"https://github.com/ttxsgoto/tutorial_spider\">Github</a></p>\n"},{"title":"Scrapy Scrapy抓取本站博客","date":"2017-12-16T13:38:23.000Z","_content":"\n#### 说明\n1. 通过scrapy对本站blog进行抓取\n2. 抓取到的数据通过sqlalchemy操作写入mysql\n\n#### 实现说明\n\n- 定义表结构(models.py)\n\n```python\n# -*- coding: utf-8 -*-\nimport datetime\nfrom sqlalchemy.engine.url import URL\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Date\nfrom tutorial_spider.settings import MYSQL_DATABASE\n \n \ndef db_connect():\n    return create_engine(URL(**MYSQL_DATABASE), echo=False)\n \ndef create_news_table(engine):\n    Base.metadata.create_all(engine)\n \nBase = declarative_base()\n \nclass TtxsgotoBlog(Base):\n    __tablename__ = 'spider_ttxsgotoblog'\n    id = Column(Integer, primary_key=True)\n    title = Column(String(32))          # 标题\n    url = Column(String(128))           # url\n    publish = Column(String(32))        # 发布日期\n    content = Column(Text)              # 内容\n    classify = Column(String(32))       # 分类\n    lable = Column(String(32))          # 标签\n    create_time = Column(String(32))    # 创建时间\n```\n\n- 定义item(items.py)\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom tutorial_spider.models import TtxsgotoBlog\nfrom scrapy.loader import ItemLoader\n \nclass TakeFirstItemLoader(ItemLoader):\n    \"\"\"\n    自定义item_loader, 修改为 默认取列表中的第一个值\n    \"\"\"\n    default_output_processor = TakeFirst()\n \n \nclass TtxsgotoItem(scrapy.Item):\n \n    title = scrapy.Field()          # 标题\n    url = scrapy.Field()            # url\n    publish = scrapy.Field()        # 发布日期\n    content = scrapy.Field()        # 内容\n    classify = scrapy.Field(        # 分类\n        output_processor=Join(',')\n    )\n    lable = scrapy.Field()          # 标签\n    create_time = scrapy.Field()    # 创建时间\n \n    def insert_to_mysql(self):\n        item_sql = TtxsgotoBlog(\n            title=self[\"title\"],\n            url=self[\"url\"],\n            publish=self[\"publish\"],\n            content=self[\"content\"],\n            classify=self[\"classify\"],\n            lable=self[\"lable\"],\n            create_time=self[\"create_time\"]\n        )\n        return item_sql\n```\n- 数据处理pipeline(pipelines.py)\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom scrapy.exceptions import DropItem\nfrom sqlalchemy.orm import sessionmaker\nfrom tutorial_spider.models import db_connect, create_news_table\nfrom contextlib import contextmanager\nimport logging\nlogger = logging.getLogger(__name__)\n \n \n@contextmanager\ndef session_scope(Session):\n    session = Session()\n    session.expire_on_commit = False\n    try:\n        yield session\n        session.commit()\n    except:\n        session.rollback()\n        raise\n    finally:\n        session.close()\n \n \nclass BasicMyslqchemyPipeline(object):\n    def __init__(self):\n        engine = db_connect()\n        create_news_table(engine)\n        self.Session = sessionmaker(bind=engine)\n \n    def open_spider(self, spider):\n        pass\n \n    def process_item(self, item, spider):\n        insert_sql = item.insert_to_mysql()\n        with session_scope(self.Session) as session:\n            session.add(insert_sql)\n        # return item\n \n    def close_spider(self, spider):\n        pass\n \n \nclass TtxsgotoFilterPipeline(object):\n    \"\"\"过滤某些item\"\"\"\n \n    def process_item(self, item, spider):\n        if item['title'] == 'Python Selenium模块':\n            raise DropItem('Drop item--->', item)\n        else:\n            return item\n \n \nclass TtxsgotoBlogMysqlchemyPipeline(BasicMyslqchemyPipeline):\n    \"\"\"保存ttxsgoto Blog到数据库\"\"\"\n    pass\n```\n\n- 抓取逻辑(spiders/ttxsgoto01.py)\n\n```python\n# -*- coding: utf-8 -*-\n \nimport datetime\nfrom urllib import parse\nimport scrapy\nimport logging\n \nfrom tutorial_spider.items import TakeFirstItemLoader, TtxsgotoItem\nlogger = logging.getLogger(__name__)\n \n \nclass Ttxsgoto01Spider(scrapy.Spider):\n    name = 'ttxsgoto01'\n    allowed_domains = ['ttxsgoto.github.io']\n    start_urls = ['http://ttxsgoto.github.io/']\n \n    custom_settings = {\t# 该项目对应settings\n        \"ITEM_PIPELINES\": {\n            'tutorial_spider.pipelines.TtxsgotoFilterPipeline': 10,\n            'tutorial_spider.pipelines.TtxsgotoBlogMysqlchemyPipeline': 20,\n        },\n    }\n \n    def parse(self, response):\n        articles = response.css('#main .post')\n        for article in articles:\n            article_url = article.css('h1 a::attr(href)').extract_first()\n            url = parse.urljoin(response.url, article_url)\n            yield scrapy.Request(url, callback=self.parse_article)\n \n        next_url = response.css('#page-nav a[rel=\"next\"][href]').css('::attr(href)').extract_first()\n        if next_url:\n            yield scrapy.Request(url=parse.urljoin(response.url, next_url), callback=self.parse)\n \n    def parse_article(self, response):\n        \"\"\"解析文章详情\"\"\"\n        item_loader = TakeFirstItemLoader(item=TtxsgotoItem(), selector=response)\n        item_loader.add_css('title', '#main header a::text')\n        item_loader.add_value('url', response.url)\n        item_loader.add_css('publish', '.article-time time::text')\n        item_loader.add_css('content', '.article-content')\n        item_loader.add_css('classify', '.article-tags a::text')\n        item_loader.add_css('lable', '.article-categories a::text')\n        item_loader.add_value('create_time', datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n        item = item_loader.load_item()\n        yield item\n```\n\n#### 查看数据\n![](https://ttxsgoto.github.io/img/scrapy/selenium01.png)\n\n#### 代码github\n[Github](https://github.com/ttxsgoto/tutorial_spider)\n\n","source":"_posts/scrapy-sample.md","raw":"---\ntitle: Scrapy Scrapy抓取本站博客\ndate: 2017-12-16 21:38:23\ntags:\n  - Scrapy\ncategories:\n  - Scrapy\n---\n\n#### 说明\n1. 通过scrapy对本站blog进行抓取\n2. 抓取到的数据通过sqlalchemy操作写入mysql\n\n#### 实现说明\n\n- 定义表结构(models.py)\n\n```python\n# -*- coding: utf-8 -*-\nimport datetime\nfrom sqlalchemy.engine.url import URL\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Date\nfrom tutorial_spider.settings import MYSQL_DATABASE\n \n \ndef db_connect():\n    return create_engine(URL(**MYSQL_DATABASE), echo=False)\n \ndef create_news_table(engine):\n    Base.metadata.create_all(engine)\n \nBase = declarative_base()\n \nclass TtxsgotoBlog(Base):\n    __tablename__ = 'spider_ttxsgotoblog'\n    id = Column(Integer, primary_key=True)\n    title = Column(String(32))          # 标题\n    url = Column(String(128))           # url\n    publish = Column(String(32))        # 发布日期\n    content = Column(Text)              # 内容\n    classify = Column(String(32))       # 分类\n    lable = Column(String(32))          # 标签\n    create_time = Column(String(32))    # 创建时间\n```\n\n- 定义item(items.py)\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom tutorial_spider.models import TtxsgotoBlog\nfrom scrapy.loader import ItemLoader\n \nclass TakeFirstItemLoader(ItemLoader):\n    \"\"\"\n    自定义item_loader, 修改为 默认取列表中的第一个值\n    \"\"\"\n    default_output_processor = TakeFirst()\n \n \nclass TtxsgotoItem(scrapy.Item):\n \n    title = scrapy.Field()          # 标题\n    url = scrapy.Field()            # url\n    publish = scrapy.Field()        # 发布日期\n    content = scrapy.Field()        # 内容\n    classify = scrapy.Field(        # 分类\n        output_processor=Join(',')\n    )\n    lable = scrapy.Field()          # 标签\n    create_time = scrapy.Field()    # 创建时间\n \n    def insert_to_mysql(self):\n        item_sql = TtxsgotoBlog(\n            title=self[\"title\"],\n            url=self[\"url\"],\n            publish=self[\"publish\"],\n            content=self[\"content\"],\n            classify=self[\"classify\"],\n            lable=self[\"lable\"],\n            create_time=self[\"create_time\"]\n        )\n        return item_sql\n```\n- 数据处理pipeline(pipelines.py)\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom scrapy.exceptions import DropItem\nfrom sqlalchemy.orm import sessionmaker\nfrom tutorial_spider.models import db_connect, create_news_table\nfrom contextlib import contextmanager\nimport logging\nlogger = logging.getLogger(__name__)\n \n \n@contextmanager\ndef session_scope(Session):\n    session = Session()\n    session.expire_on_commit = False\n    try:\n        yield session\n        session.commit()\n    except:\n        session.rollback()\n        raise\n    finally:\n        session.close()\n \n \nclass BasicMyslqchemyPipeline(object):\n    def __init__(self):\n        engine = db_connect()\n        create_news_table(engine)\n        self.Session = sessionmaker(bind=engine)\n \n    def open_spider(self, spider):\n        pass\n \n    def process_item(self, item, spider):\n        insert_sql = item.insert_to_mysql()\n        with session_scope(self.Session) as session:\n            session.add(insert_sql)\n        # return item\n \n    def close_spider(self, spider):\n        pass\n \n \nclass TtxsgotoFilterPipeline(object):\n    \"\"\"过滤某些item\"\"\"\n \n    def process_item(self, item, spider):\n        if item['title'] == 'Python Selenium模块':\n            raise DropItem('Drop item--->', item)\n        else:\n            return item\n \n \nclass TtxsgotoBlogMysqlchemyPipeline(BasicMyslqchemyPipeline):\n    \"\"\"保存ttxsgoto Blog到数据库\"\"\"\n    pass\n```\n\n- 抓取逻辑(spiders/ttxsgoto01.py)\n\n```python\n# -*- coding: utf-8 -*-\n \nimport datetime\nfrom urllib import parse\nimport scrapy\nimport logging\n \nfrom tutorial_spider.items import TakeFirstItemLoader, TtxsgotoItem\nlogger = logging.getLogger(__name__)\n \n \nclass Ttxsgoto01Spider(scrapy.Spider):\n    name = 'ttxsgoto01'\n    allowed_domains = ['ttxsgoto.github.io']\n    start_urls = ['http://ttxsgoto.github.io/']\n \n    custom_settings = {\t# 该项目对应settings\n        \"ITEM_PIPELINES\": {\n            'tutorial_spider.pipelines.TtxsgotoFilterPipeline': 10,\n            'tutorial_spider.pipelines.TtxsgotoBlogMysqlchemyPipeline': 20,\n        },\n    }\n \n    def parse(self, response):\n        articles = response.css('#main .post')\n        for article in articles:\n            article_url = article.css('h1 a::attr(href)').extract_first()\n            url = parse.urljoin(response.url, article_url)\n            yield scrapy.Request(url, callback=self.parse_article)\n \n        next_url = response.css('#page-nav a[rel=\"next\"][href]').css('::attr(href)').extract_first()\n        if next_url:\n            yield scrapy.Request(url=parse.urljoin(response.url, next_url), callback=self.parse)\n \n    def parse_article(self, response):\n        \"\"\"解析文章详情\"\"\"\n        item_loader = TakeFirstItemLoader(item=TtxsgotoItem(), selector=response)\n        item_loader.add_css('title', '#main header a::text')\n        item_loader.add_value('url', response.url)\n        item_loader.add_css('publish', '.article-time time::text')\n        item_loader.add_css('content', '.article-content')\n        item_loader.add_css('classify', '.article-tags a::text')\n        item_loader.add_css('lable', '.article-categories a::text')\n        item_loader.add_value('create_time', datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n        item = item_loader.load_item()\n        yield item\n```\n\n#### 查看数据\n![](https://ttxsgoto.github.io/img/scrapy/selenium01.png)\n\n#### 代码github\n[Github](https://github.com/ttxsgoto/tutorial_spider)\n\n","slug":"scrapy-sample","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yo005oct8ulu3wppv9","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>通过scrapy对本站blog进行抓取</li>\n<li>抓取到的数据通过sqlalchemy操作写入mysql</li>\n</ol>\n<h4 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h4><ul>\n<li>定义表结构(models.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.engine.url <span class=\"keyword\">import</span> URL</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine, Column, Integer, String, Text, DateTime, Date</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.settings <span class=\"keyword\">import</span> MYSQL_DATABASE</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">db_connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> create_engine(URL(**MYSQL_DATABASE), echo=<span class=\"keyword\">False</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_news_table</span><span class=\"params\">(engine)</span>:</span></div><div class=\"line\">    Base.metadata.create_all(engine)</div><div class=\"line\"> </div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlog</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'spider_ttxsgotoblog'</span></div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = Column(String(<span class=\"number\">128</span>))           <span class=\"comment\"># url</span></div><div class=\"line\">    publish = Column(String(<span class=\"number\">32</span>))        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = Column(Text)              <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = Column(String(<span class=\"number\">32</span>))       <span class=\"comment\"># 分类</span></div><div class=\"line\">    lable = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = Column(String(<span class=\"number\">32</span>))    <span class=\"comment\"># 创建时间</span></div></pre></td></tr></table></figure>\n<ul>\n<li>定义item(items.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> TtxsgotoBlog</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader <span class=\"keyword\">import</span> ItemLoader</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TakeFirstItemLoader</span><span class=\"params\">(ItemLoader)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    自定义item_loader, 修改为 默认取列表中的第一个值</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    default_output_processor = TakeFirst()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    title = scrapy.Field()          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = scrapy.Field()            <span class=\"comment\"># url</span></div><div class=\"line\">    publish = scrapy.Field()        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = scrapy.Field()        <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = scrapy.Field(        <span class=\"comment\"># 分类</span></div><div class=\"line\">        output_processor=Join(<span class=\"string\">','</span>)</div><div class=\"line\">    )</div><div class=\"line\">    lable = scrapy.Field()          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = scrapy.Field()    <span class=\"comment\"># 创建时间</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_to_mysql</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        item_sql = TtxsgotoBlog(</div><div class=\"line\">            title=self[<span class=\"string\">\"title\"</span>],</div><div class=\"line\">            url=self[<span class=\"string\">\"url\"</span>],</div><div class=\"line\">            publish=self[<span class=\"string\">\"publish\"</span>],</div><div class=\"line\">            content=self[<span class=\"string\">\"content\"</span>],</div><div class=\"line\">            classify=self[<span class=\"string\">\"classify\"</span>],</div><div class=\"line\">            lable=self[<span class=\"string\">\"lable\"</span>],</div><div class=\"line\">            create_time=self[<span class=\"string\">\"create_time\"</span>]</div><div class=\"line\">        )</div><div class=\"line\">        <span class=\"keyword\">return</span> item_sql</div></pre></td></tr></table></figure>\n<ul>\n<li>数据处理pipeline(pipelines.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> db_connect, create_news_table</div><div class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">session_scope</span><span class=\"params\">(Session)</span>:</span></div><div class=\"line\">    session = Session()</div><div class=\"line\">    session.expire_on_commit = <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">yield</span> session</div><div class=\"line\">        session.commit()</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        session.rollback()</div><div class=\"line\">        <span class=\"keyword\">raise</span></div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        session.close()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicMyslqchemyPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        engine = db_connect()</div><div class=\"line\">        create_news_table(engine)</div><div class=\"line\">        self.Session = sessionmaker(bind=engine)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        insert_sql = item.insert_to_mysql()</div><div class=\"line\">        <span class=\"keyword\">with</span> session_scope(self.Session) <span class=\"keyword\">as</span> session:</div><div class=\"line\">            session.add(insert_sql)</div><div class=\"line\">        <span class=\"comment\"># return item</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoFilterPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"过滤某些item\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> item[<span class=\"string\">'title'</span>] == <span class=\"string\">'Python Selenium模块'</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> DropItem(<span class=\"string\">'Drop item---&gt;'</span>, item)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> item</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlogMysqlchemyPipeline</span><span class=\"params\">(BasicMyslqchemyPipeline)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"保存ttxsgoto Blog到数据库\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<ul>\n<li>抓取逻辑(spiders/ttxsgoto01.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.items <span class=\"keyword\">import</span> TakeFirstItemLoader, TtxsgotoItem</div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ttxsgoto01Spider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">'ttxsgoto01'</span></div><div class=\"line\">    allowed_domains = [<span class=\"string\">'ttxsgoto.github.io'</span>]</div><div class=\"line\">    start_urls = [<span class=\"string\">'http://ttxsgoto.github.io/'</span>]</div><div class=\"line\"> </div><div class=\"line\">    custom_settings = &#123;\t<span class=\"comment\"># 该项目对应settings</span></div><div class=\"line\">        <span class=\"string\">\"ITEM_PIPELINES\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'tutorial_spider.pipelines.TtxsgotoFilterPipeline'</span>: <span class=\"number\">10</span>,</div><div class=\"line\">            <span class=\"string\">'tutorial_spider.pipelines.TtxsgotoBlogMysqlchemyPipeline'</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">        articles = response.css(<span class=\"string\">'#main .post'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> article <span class=\"keyword\">in</span> articles:</div><div class=\"line\">            article_url = article.css(<span class=\"string\">'h1 a::attr(href)'</span>).extract_first()</div><div class=\"line\">            url = parse.urljoin(response.url, article_url)</div><div class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url, callback=self.parse_article)</div><div class=\"line\"> </div><div class=\"line\">        next_url = response.css(<span class=\"string\">'#page-nav a[rel=\"next\"][href]'</span>).css(<span class=\"string\">'::attr(href)'</span>).extract_first()</div><div class=\"line\">        <span class=\"keyword\">if</span> next_url:</div><div class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url=parse.urljoin(response.url, next_url), callback=self.parse)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_article</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"解析文章详情\"\"\"</span></div><div class=\"line\">        item_loader = TakeFirstItemLoader(item=TtxsgotoItem(), selector=response)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'title'</span>, <span class=\"string\">'#main header a::text'</span>)</div><div class=\"line\">        item_loader.add_value(<span class=\"string\">'url'</span>, response.url)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'publish'</span>, <span class=\"string\">'.article-time time::text'</span>)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'content'</span>, <span class=\"string\">'.article-content'</span>)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'classify'</span>, <span class=\"string\">'.article-tags a::text'</span>)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'lable'</span>, <span class=\"string\">'.article-categories a::text'</span>)</div><div class=\"line\">        item_loader.add_value(<span class=\"string\">'create_time'</span>, datetime.datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>))</div><div class=\"line\">        item = item_loader.load_item()</div><div class=\"line\">        <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure>\n<h4 id=\"查看数据\"><a href=\"#查看数据\" class=\"headerlink\" title=\"查看数据\"></a>查看数据</h4><p><img src=\"https://ttxsgoto.github.io/img/scrapy/selenium01.png\" alt=\"\"></p>\n<h4 id=\"代码github\"><a href=\"#代码github\" class=\"headerlink\" title=\"代码github\"></a>代码github</h4><p><a href=\"https://github.com/ttxsgoto/tutorial_spider\" target=\"_blank\" rel=\"external\">Github</a></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ol>\n<li>通过scrapy对本站blog进行抓取</li>\n<li>抓取到的数据通过sqlalchemy操作写入mysql</li>\n</ol>\n<h4 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h4><ul>\n<li>定义表结构(models.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.engine.url <span class=\"keyword\">import</span> URL</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine, Column, Integer, String, Text, DateTime, Date</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.settings <span class=\"keyword\">import</span> MYSQL_DATABASE</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">db_connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> create_engine(URL(**MYSQL_DATABASE), echo=<span class=\"keyword\">False</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_news_table</span><span class=\"params\">(engine)</span>:</span></div><div class=\"line\">    Base.metadata.create_all(engine)</div><div class=\"line\"> </div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlog</span><span class=\"params\">(Base)</span>:</span></div><div class=\"line\">    __tablename__ = <span class=\"string\">'spider_ttxsgotoblog'</span></div><div class=\"line\">    id = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = Column(String(<span class=\"number\">128</span>))           <span class=\"comment\"># url</span></div><div class=\"line\">    publish = Column(String(<span class=\"number\">32</span>))        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = Column(Text)              <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = Column(String(<span class=\"number\">32</span>))       <span class=\"comment\"># 分类</span></div><div class=\"line\">    lable = Column(String(<span class=\"number\">32</span>))          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = Column(String(<span class=\"number\">32</span>))    <span class=\"comment\"># 创建时间</span></div></pre></td></tr></table></figure>\n<ul>\n<li>定义item(items.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> TtxsgotoBlog</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.loader <span class=\"keyword\">import</span> ItemLoader</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TakeFirstItemLoader</span><span class=\"params\">(ItemLoader)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    自定义item_loader, 修改为 默认取列表中的第一个值</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    default_output_processor = TakeFirst()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\"> </div><div class=\"line\">    title = scrapy.Field()          <span class=\"comment\"># 标题</span></div><div class=\"line\">    url = scrapy.Field()            <span class=\"comment\"># url</span></div><div class=\"line\">    publish = scrapy.Field()        <span class=\"comment\"># 发布日期</span></div><div class=\"line\">    content = scrapy.Field()        <span class=\"comment\"># 内容</span></div><div class=\"line\">    classify = scrapy.Field(        <span class=\"comment\"># 分类</span></div><div class=\"line\">        output_processor=Join(<span class=\"string\">','</span>)</div><div class=\"line\">    )</div><div class=\"line\">    lable = scrapy.Field()          <span class=\"comment\"># 标签</span></div><div class=\"line\">    create_time = scrapy.Field()    <span class=\"comment\"># 创建时间</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_to_mysql</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        item_sql = TtxsgotoBlog(</div><div class=\"line\">            title=self[<span class=\"string\">\"title\"</span>],</div><div class=\"line\">            url=self[<span class=\"string\">\"url\"</span>],</div><div class=\"line\">            publish=self[<span class=\"string\">\"publish\"</span>],</div><div class=\"line\">            content=self[<span class=\"string\">\"content\"</span>],</div><div class=\"line\">            classify=self[<span class=\"string\">\"classify\"</span>],</div><div class=\"line\">            lable=self[<span class=\"string\">\"lable\"</span>],</div><div class=\"line\">            create_time=self[<span class=\"string\">\"create_time\"</span>]</div><div class=\"line\">        )</div><div class=\"line\">        <span class=\"keyword\">return</span> item_sql</div></pre></td></tr></table></figure>\n<ul>\n<li>数据处理pipeline(pipelines.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</div><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.models <span class=\"keyword\">import</span> db_connect, create_news_table</div><div class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@contextmanager</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">session_scope</span><span class=\"params\">(Session)</span>:</span></div><div class=\"line\">    session = Session()</div><div class=\"line\">    session.expire_on_commit = <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">yield</span> session</div><div class=\"line\">        session.commit()</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        session.rollback()</div><div class=\"line\">        <span class=\"keyword\">raise</span></div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        session.close()</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicMyslqchemyPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        engine = db_connect()</div><div class=\"line\">        create_news_table(engine)</div><div class=\"line\">        self.Session = sessionmaker(bind=engine)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        insert_sql = item.insert_to_mysql()</div><div class=\"line\">        <span class=\"keyword\">with</span> session_scope(self.Session) <span class=\"keyword\">as</span> session:</div><div class=\"line\">            session.add(insert_sql)</div><div class=\"line\">        <span class=\"comment\"># return item</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span><span class=\"params\">(self, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoFilterPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"过滤某些item\"\"\"</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> item[<span class=\"string\">'title'</span>] == <span class=\"string\">'Python Selenium模块'</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> DropItem(<span class=\"string\">'Drop item---&gt;'</span>, item)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> item</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TtxsgotoBlogMysqlchemyPipeline</span><span class=\"params\">(BasicMyslqchemyPipeline)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"保存ttxsgoto Blog到数据库\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<ul>\n<li>抓取逻辑(spiders/ttxsgoto01.py)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> parse</div><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> tutorial_spider.items <span class=\"keyword\">import</span> TakeFirstItemLoader, TtxsgotoItem</div><div class=\"line\">logger = logging.getLogger(__name__)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ttxsgoto01Spider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">'ttxsgoto01'</span></div><div class=\"line\">    allowed_domains = [<span class=\"string\">'ttxsgoto.github.io'</span>]</div><div class=\"line\">    start_urls = [<span class=\"string\">'http://ttxsgoto.github.io/'</span>]</div><div class=\"line\"> </div><div class=\"line\">    custom_settings = &#123;\t<span class=\"comment\"># 该项目对应settings</span></div><div class=\"line\">        <span class=\"string\">\"ITEM_PIPELINES\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'tutorial_spider.pipelines.TtxsgotoFilterPipeline'</span>: <span class=\"number\">10</span>,</div><div class=\"line\">            <span class=\"string\">'tutorial_spider.pipelines.TtxsgotoBlogMysqlchemyPipeline'</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">        articles = response.css(<span class=\"string\">'#main .post'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> article <span class=\"keyword\">in</span> articles:</div><div class=\"line\">            article_url = article.css(<span class=\"string\">'h1 a::attr(href)'</span>).extract_first()</div><div class=\"line\">            url = parse.urljoin(response.url, article_url)</div><div class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url, callback=self.parse_article)</div><div class=\"line\"> </div><div class=\"line\">        next_url = response.css(<span class=\"string\">'#page-nav a[rel=\"next\"][href]'</span>).css(<span class=\"string\">'::attr(href)'</span>).extract_first()</div><div class=\"line\">        <span class=\"keyword\">if</span> next_url:</div><div class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url=parse.urljoin(response.url, next_url), callback=self.parse)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_article</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"解析文章详情\"\"\"</span></div><div class=\"line\">        item_loader = TakeFirstItemLoader(item=TtxsgotoItem(), selector=response)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'title'</span>, <span class=\"string\">'#main header a::text'</span>)</div><div class=\"line\">        item_loader.add_value(<span class=\"string\">'url'</span>, response.url)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'publish'</span>, <span class=\"string\">'.article-time time::text'</span>)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'content'</span>, <span class=\"string\">'.article-content'</span>)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'classify'</span>, <span class=\"string\">'.article-tags a::text'</span>)</div><div class=\"line\">        item_loader.add_css(<span class=\"string\">'lable'</span>, <span class=\"string\">'.article-categories a::text'</span>)</div><div class=\"line\">        item_loader.add_value(<span class=\"string\">'create_time'</span>, datetime.datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>))</div><div class=\"line\">        item = item_loader.load_item()</div><div class=\"line\">        <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure>\n<h4 id=\"查看数据\"><a href=\"#查看数据\" class=\"headerlink\" title=\"查看数据\"></a>查看数据</h4><p><img src=\"https://ttxsgoto.github.io/img/scrapy/selenium01.png\" alt=\"\"></p>\n<h4 id=\"代码github\"><a href=\"#代码github\" class=\"headerlink\" title=\"代码github\"></a>代码github</h4><p><a href=\"https://github.com/ttxsgoto/tutorial_spider\">Github</a></p>\n"},{"title":"Python Setuptools模块","date":"2017-06-14T13:51:32.000Z","_content":"\n### 说明\n将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作\n\n### 简单实例\n目录结构：\n```\n├── README\t\t# readme信息\n├── package_demo\t# 包名\n│   ├── __init__.py\n│   └── now_time.py\t# 功能模块\n└── setup.py\t\t# setup文件\n```\nnow_time.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\nimport datetime\n \ndef now():\n    return datetime.datetime.now()\n \nif __name__ == '__main__':\n    now()\n```\nsetup.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nfrom setuptools import setup, find_packages\nfrom os import path\n \nhere = path.abspath(path.dirname(__file__))\n \nwith open(path.join(here, 'README')) as f:\n    long_description = f.read()\n \ninstall_requires=[\n    'gitchangelog',\n]\n \nsetup(\n    name='Package_demo',\n    version='1.0.0',\n    description='setup package demo',\n    long_description=long_description,\n    url='https://github.com/',\n    author='ttxsgoto',\n    author_email='359450323@qq.com',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n    ],\n    keywords='Package_demo',\n    # packages=find_packages(\n    #     where='.',\n    #     exclude=['contrib', 'docs', 'tests'], # 排除某些包\n    # ),\n    packages=['package_demo'],\n    install_requires=install_requires,\n)\n```\n#### 常用字段\n- name 项目名称\n- version 项目当前的版本，1.0.0表示1.0.0版，目前还处于开发阶段\n- description 包的简单描述\n- long_description=long_description, 较长的描述\n- url 为项目访问地址\n- author 为项目开发人员\n- author_email 为项目开发人员邮件\n- license 为本项目遵循的授权许可\n- classifiers 有很多设置，具体内容可以参考官方文档, https://pypi.python.org/pypi?%3Aaction=list_classifiers\n- keywords 是本项目的关键词，理解为标签\n- packages 指定包,如果很多可以使用find_packages & exclude\n- install_requires 依赖包安装\n- extras_require 额外的依赖包\n\n#### 打包命令\n```python\npython setup.py check  # 检查\npython setup.py sdist  # 打包为 .tar.gz\npython setup.py bdist_egg  #  创建 Eggs包\npython setup.py bdist_wheel  # 创建 Wheel包\n# 生成的文件均位于 dist 目录下\n```\n打包后的目录结构\n```\npython setup.py sdist\n \n├── Package_demo.egg-info\n│   ├── PKG-INFO\n│   ├── SOURCES.txt\n│   ├── dependency_links.txt\n│   ├── requires.txt\n│   └── top_level.txt\n├── README\n├── dist\n│   └── Package_demo-1.0.0.tar.gz\n├── package_demo\n│   ├── __init__.py\n│   └── now_time.py\n└── setup.py\n```\n#### 包验证\n```python\npip install Package_demo-1.0.0.tar.gz\nIn [1]: from package_demo import now_time\n \nIn [2]: now_time.now()\nOut[2]: datetime.datetime(2017, 6, 14, 23, 10, 52, 278942)\n \n```\n### 分发到PyPI\n首先到 PyPI 注册一个帐号, 在邮箱内确认\n之后在目录新建一个 .pypirc 文件, 写入下面内容(注意填入自己的帐号密码):\n```python\n[pypirc]\nservers = pypi\n[server-login]\nusername:username\npassword:password\n```\n上传\n```python\npython setup.py register  # 将包注册到 PyPI\npython setup.py register sdist upload  # 上传\n```\n登录验证查看是否上传成功\n\n### 参考链接\n- https://packaging.python.org/tutorials/distributing-packages/#name\n- https://github.com/pypa/sampleproject/blob/master/setup.py\n- https://github.com/celery/celery/blob/master/setup.py\n\n\n","source":"_posts/setup.md","raw":"---\ntitle: Python Setuptools模块\ndate: 2017-06-14 21:51:32\ntags:\n  - Setuptools\ncategories:\n  - python\n---\n\n### 说明\n将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作\n\n### 简单实例\n目录结构：\n```\n├── README\t\t# readme信息\n├── package_demo\t# 包名\n│   ├── __init__.py\n│   └── now_time.py\t# 功能模块\n└── setup.py\t\t# setup文件\n```\nnow_time.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\nimport datetime\n \ndef now():\n    return datetime.datetime.now()\n \nif __name__ == '__main__':\n    now()\n```\nsetup.py\n```python\n#!/usr/bin/env python\n#coding: utf_8\n \nfrom setuptools import setup, find_packages\nfrom os import path\n \nhere = path.abspath(path.dirname(__file__))\n \nwith open(path.join(here, 'README')) as f:\n    long_description = f.read()\n \ninstall_requires=[\n    'gitchangelog',\n]\n \nsetup(\n    name='Package_demo',\n    version='1.0.0',\n    description='setup package demo',\n    long_description=long_description,\n    url='https://github.com/',\n    author='ttxsgoto',\n    author_email='359450323@qq.com',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n    ],\n    keywords='Package_demo',\n    # packages=find_packages(\n    #     where='.',\n    #     exclude=['contrib', 'docs', 'tests'], # 排除某些包\n    # ),\n    packages=['package_demo'],\n    install_requires=install_requires,\n)\n```\n#### 常用字段\n- name 项目名称\n- version 项目当前的版本，1.0.0表示1.0.0版，目前还处于开发阶段\n- description 包的简单描述\n- long_description=long_description, 较长的描述\n- url 为项目访问地址\n- author 为项目开发人员\n- author_email 为项目开发人员邮件\n- license 为本项目遵循的授权许可\n- classifiers 有很多设置，具体内容可以参考官方文档, https://pypi.python.org/pypi?%3Aaction=list_classifiers\n- keywords 是本项目的关键词，理解为标签\n- packages 指定包,如果很多可以使用find_packages & exclude\n- install_requires 依赖包安装\n- extras_require 额外的依赖包\n\n#### 打包命令\n```python\npython setup.py check  # 检查\npython setup.py sdist  # 打包为 .tar.gz\npython setup.py bdist_egg  #  创建 Eggs包\npython setup.py bdist_wheel  # 创建 Wheel包\n# 生成的文件均位于 dist 目录下\n```\n打包后的目录结构\n```\npython setup.py sdist\n \n├── Package_demo.egg-info\n│   ├── PKG-INFO\n│   ├── SOURCES.txt\n│   ├── dependency_links.txt\n│   ├── requires.txt\n│   └── top_level.txt\n├── README\n├── dist\n│   └── Package_demo-1.0.0.tar.gz\n├── package_demo\n│   ├── __init__.py\n│   └── now_time.py\n└── setup.py\n```\n#### 包验证\n```python\npip install Package_demo-1.0.0.tar.gz\nIn [1]: from package_demo import now_time\n \nIn [2]: now_time.now()\nOut[2]: datetime.datetime(2017, 6, 14, 23, 10, 52, 278942)\n \n```\n### 分发到PyPI\n首先到 PyPI 注册一个帐号, 在邮箱内确认\n之后在目录新建一个 .pypirc 文件, 写入下面内容(注意填入自己的帐号密码):\n```python\n[pypirc]\nservers = pypi\n[server-login]\nusername:username\npassword:password\n```\n上传\n```python\npython setup.py register  # 将包注册到 PyPI\npython setup.py register sdist upload  # 上传\n```\n登录验证查看是否上传成功\n\n### 参考链接\n- https://packaging.python.org/tutorials/distributing-packages/#name\n- https://github.com/pypa/sampleproject/blob/master/setup.py\n- https://github.com/celery/celery/blob/master/setup.py\n\n\n","slug":"setup","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yq005rct8um80u7uoe","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作</p>\n<h3 id=\"简单实例\"><a href=\"#简单实例\" class=\"headerlink\" title=\"简单实例\"></a>简单实例</h3><p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── README\t\t# readme信息</div><div class=\"line\">├── package_demo\t# 包名</div><div class=\"line\">│   ├── __init__.py</div><div class=\"line\">│   └── now_time.py\t# 功能模块</div><div class=\"line\">└── setup.py\t\t# setup文件</div></pre></td></tr></table></figure></p>\n<p>now_time.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> datetime.datetime.now()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    now()</div></pre></td></tr></table></figure></p>\n<p>setup.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, find_packages</div><div class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> path</div><div class=\"line\"> </div><div class=\"line\">here = path.abspath(path.dirname(__file__))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">with</span> open(path.join(here, <span class=\"string\">'README'</span>)) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    long_description = f.read()</div><div class=\"line\"> </div><div class=\"line\">install_requires=[</div><div class=\"line\">    <span class=\"string\">'gitchangelog'</span>,</div><div class=\"line\">]</div><div class=\"line\"> </div><div class=\"line\">setup(</div><div class=\"line\">    name=<span class=\"string\">'Package_demo'</span>,</div><div class=\"line\">    version=<span class=\"string\">'1.0.0'</span>,</div><div class=\"line\">    description=<span class=\"string\">'setup package demo'</span>,</div><div class=\"line\">    long_description=long_description,</div><div class=\"line\">    url=<span class=\"string\">'https://github.com/'</span>,</div><div class=\"line\">    author=<span class=\"string\">'ttxsgoto'</span>,</div><div class=\"line\">    author_email=<span class=\"string\">'359450323@qq.com'</span>,</div><div class=\"line\">    license=<span class=\"string\">'MIT'</span>,</div><div class=\"line\">    classifiers=[</div><div class=\"line\">        <span class=\"string\">'Development Status :: 4 - Beta'</span>,</div><div class=\"line\">        <span class=\"string\">'Intended Audience :: Developers'</span>,</div><div class=\"line\">        <span class=\"string\">'Topic :: Software Development :: Build Tools'</span>,</div><div class=\"line\">        <span class=\"string\">'License :: OSI Approved :: MIT License'</span>,</div><div class=\"line\">        <span class=\"string\">'Programming Language :: Python'</span>,</div><div class=\"line\">        <span class=\"string\">'Programming Language :: Python :: 2.7'</span>,</div><div class=\"line\">    ],</div><div class=\"line\">    keywords=<span class=\"string\">'Package_demo'</span>,</div><div class=\"line\">    <span class=\"comment\"># packages=find_packages(</span></div><div class=\"line\">    <span class=\"comment\">#     where='.',</span></div><div class=\"line\">    <span class=\"comment\">#     exclude=['contrib', 'docs', 'tests'], # 排除某些包</span></div><div class=\"line\">    <span class=\"comment\"># ),</span></div><div class=\"line\">    packages=[<span class=\"string\">'package_demo'</span>],</div><div class=\"line\">    install_requires=install_requires,</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用字段\"><a href=\"#常用字段\" class=\"headerlink\" title=\"常用字段\"></a>常用字段</h4><ul>\n<li>name 项目名称</li>\n<li>version 项目当前的版本，1.0.0表示1.0.0版，目前还处于开发阶段</li>\n<li>description 包的简单描述</li>\n<li>long_description=long_description, 较长的描述</li>\n<li>url 为项目访问地址</li>\n<li>author 为项目开发人员</li>\n<li>author_email 为项目开发人员邮件</li>\n<li>license 为本项目遵循的授权许可</li>\n<li>classifiers 有很多设置，具体内容可以参考官方文档, <a href=\"https://pypi.python.org/pypi?%3Aaction=list_classifiers\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi?%3Aaction=list_classifiers</a></li>\n<li>keywords 是本项目的关键词，理解为标签</li>\n<li>packages 指定包,如果很多可以使用find_packages &amp; exclude</li>\n<li>install_requires 依赖包安装</li>\n<li>extras_require 额外的依赖包</li>\n</ul>\n<h4 id=\"打包命令\"><a href=\"#打包命令\" class=\"headerlink\" title=\"打包命令\"></a>打包命令</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py check  <span class=\"comment\"># 检查</span></div><div class=\"line\">python setup.py sdist  <span class=\"comment\"># 打包为 .tar.gz</span></div><div class=\"line\">python setup.py bdist_egg  <span class=\"comment\">#  创建 Eggs包</span></div><div class=\"line\">python setup.py bdist_wheel  <span class=\"comment\"># 创建 Wheel包</span></div><div class=\"line\"><span class=\"comment\"># 生成的文件均位于 dist 目录下</span></div></pre></td></tr></table></figure>\n<p>打包后的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py sdist</div><div class=\"line\"> </div><div class=\"line\">├── Package_demo.egg-info</div><div class=\"line\">│   ├── PKG-INFO</div><div class=\"line\">│   ├── SOURCES.txt</div><div class=\"line\">│   ├── dependency_links.txt</div><div class=\"line\">│   ├── requires.txt</div><div class=\"line\">│   └── top_level.txt</div><div class=\"line\">├── README</div><div class=\"line\">├── dist</div><div class=\"line\">│   └── Package_demo-1.0.0.tar.gz</div><div class=\"line\">├── package_demo</div><div class=\"line\">│   ├── __init__.py</div><div class=\"line\">│   └── now_time.py</div><div class=\"line\">└── setup.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"包验证\"><a href=\"#包验证\" class=\"headerlink\" title=\"包验证\"></a>包验证</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Package_demo<span class=\"number\">-1.0</span><span class=\"number\">.0</span>.tar.gz</div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> package_demo <span class=\"keyword\">import</span> now_time</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: now_time.now()</div><div class=\"line\">Out[<span class=\"number\">2</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">23</span>, <span class=\"number\">10</span>, <span class=\"number\">52</span>, <span class=\"number\">278942</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"分发到PyPI\"><a href=\"#分发到PyPI\" class=\"headerlink\" title=\"分发到PyPI\"></a>分发到PyPI</h3><p>首先到 PyPI 注册一个帐号, 在邮箱内确认<br>之后在目录新建一个 .pypirc 文件, 写入下面内容(注意填入自己的帐号密码):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[pypirc]</div><div class=\"line\">servers = pypi</div><div class=\"line\">[server-login]</div><div class=\"line\">username:username</div><div class=\"line\">password:password</div></pre></td></tr></table></figure></p>\n<p>上传<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py register  <span class=\"comment\"># 将包注册到 PyPI</span></div><div class=\"line\">python setup.py register sdist upload  <span class=\"comment\"># 上传</span></div></pre></td></tr></table></figure></p>\n<p>登录验证查看是否上传成功</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://packaging.python.org/tutorials/distributing-packages/#name\" target=\"_blank\" rel=\"external\">https://packaging.python.org/tutorials/distributing-packages/#name</a></li>\n<li><a href=\"https://github.com/pypa/sampleproject/blob/master/setup.py\" target=\"_blank\" rel=\"external\">https://github.com/pypa/sampleproject/blob/master/setup.py</a></li>\n<li><a href=\"https://github.com/celery/celery/blob/master/setup.py\" target=\"_blank\" rel=\"external\">https://github.com/celery/celery/blob/master/setup.py</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>将日常常用模块打包成tar.gz/egg/wheel包，方便其他工程复用；主要通过setuptools这个模块完成打包工作</p>\n<h3 id=\"简单实例\"><a href=\"#简单实例\" class=\"headerlink\" title=\"简单实例\"></a>简单实例</h3><p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── README\t\t# readme信息</div><div class=\"line\">├── package_demo\t# 包名</div><div class=\"line\">│   ├── __init__.py</div><div class=\"line\">│   └── now_time.py\t# 功能模块</div><div class=\"line\">└── setup.py\t\t# setup文件</div></pre></td></tr></table></figure></p>\n<p>now_time.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> datetime.datetime.now()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    now()</div></pre></td></tr></table></figure></p>\n<p>setup.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding: utf_8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, find_packages</div><div class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> path</div><div class=\"line\"> </div><div class=\"line\">here = path.abspath(path.dirname(__file__))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">with</span> open(path.join(here, <span class=\"string\">'README'</span>)) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    long_description = f.read()</div><div class=\"line\"> </div><div class=\"line\">install_requires=[</div><div class=\"line\">    <span class=\"string\">'gitchangelog'</span>,</div><div class=\"line\">]</div><div class=\"line\"> </div><div class=\"line\">setup(</div><div class=\"line\">    name=<span class=\"string\">'Package_demo'</span>,</div><div class=\"line\">    version=<span class=\"string\">'1.0.0'</span>,</div><div class=\"line\">    description=<span class=\"string\">'setup package demo'</span>,</div><div class=\"line\">    long_description=long_description,</div><div class=\"line\">    url=<span class=\"string\">'https://github.com/'</span>,</div><div class=\"line\">    author=<span class=\"string\">'ttxsgoto'</span>,</div><div class=\"line\">    author_email=<span class=\"string\">'359450323@qq.com'</span>,</div><div class=\"line\">    license=<span class=\"string\">'MIT'</span>,</div><div class=\"line\">    classifiers=[</div><div class=\"line\">        <span class=\"string\">'Development Status :: 4 - Beta'</span>,</div><div class=\"line\">        <span class=\"string\">'Intended Audience :: Developers'</span>,</div><div class=\"line\">        <span class=\"string\">'Topic :: Software Development :: Build Tools'</span>,</div><div class=\"line\">        <span class=\"string\">'License :: OSI Approved :: MIT License'</span>,</div><div class=\"line\">        <span class=\"string\">'Programming Language :: Python'</span>,</div><div class=\"line\">        <span class=\"string\">'Programming Language :: Python :: 2.7'</span>,</div><div class=\"line\">    ],</div><div class=\"line\">    keywords=<span class=\"string\">'Package_demo'</span>,</div><div class=\"line\">    <span class=\"comment\"># packages=find_packages(</span></div><div class=\"line\">    <span class=\"comment\">#     where='.',</span></div><div class=\"line\">    <span class=\"comment\">#     exclude=['contrib', 'docs', 'tests'], # 排除某些包</span></div><div class=\"line\">    <span class=\"comment\"># ),</span></div><div class=\"line\">    packages=[<span class=\"string\">'package_demo'</span>],</div><div class=\"line\">    install_requires=install_requires,</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<h4 id=\"常用字段\"><a href=\"#常用字段\" class=\"headerlink\" title=\"常用字段\"></a>常用字段</h4><ul>\n<li>name 项目名称</li>\n<li>version 项目当前的版本，1.0.0表示1.0.0版，目前还处于开发阶段</li>\n<li>description 包的简单描述</li>\n<li>long_description=long_description, 较长的描述</li>\n<li>url 为项目访问地址</li>\n<li>author 为项目开发人员</li>\n<li>author_email 为项目开发人员邮件</li>\n<li>license 为本项目遵循的授权许可</li>\n<li>classifiers 有很多设置，具体内容可以参考官方文档, <a href=\"https://pypi.python.org/pypi?%3Aaction=list_classifiers\">https://pypi.python.org/pypi?%3Aaction=list_classifiers</a></li>\n<li>keywords 是本项目的关键词，理解为标签</li>\n<li>packages 指定包,如果很多可以使用find_packages &amp; exclude</li>\n<li>install_requires 依赖包安装</li>\n<li>extras_require 额外的依赖包</li>\n</ul>\n<h4 id=\"打包命令\"><a href=\"#打包命令\" class=\"headerlink\" title=\"打包命令\"></a>打包命令</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py check  <span class=\"comment\"># 检查</span></div><div class=\"line\">python setup.py sdist  <span class=\"comment\"># 打包为 .tar.gz</span></div><div class=\"line\">python setup.py bdist_egg  <span class=\"comment\">#  创建 Eggs包</span></div><div class=\"line\">python setup.py bdist_wheel  <span class=\"comment\"># 创建 Wheel包</span></div><div class=\"line\"><span class=\"comment\"># 生成的文件均位于 dist 目录下</span></div></pre></td></tr></table></figure>\n<p>打包后的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py sdist</div><div class=\"line\"> </div><div class=\"line\">├── Package_demo.egg-info</div><div class=\"line\">│   ├── PKG-INFO</div><div class=\"line\">│   ├── SOURCES.txt</div><div class=\"line\">│   ├── dependency_links.txt</div><div class=\"line\">│   ├── requires.txt</div><div class=\"line\">│   └── top_level.txt</div><div class=\"line\">├── README</div><div class=\"line\">├── dist</div><div class=\"line\">│   └── Package_demo-1.0.0.tar.gz</div><div class=\"line\">├── package_demo</div><div class=\"line\">│   ├── __init__.py</div><div class=\"line\">│   └── now_time.py</div><div class=\"line\">└── setup.py</div></pre></td></tr></table></figure></p>\n<h4 id=\"包验证\"><a href=\"#包验证\" class=\"headerlink\" title=\"包验证\"></a>包验证</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Package_demo<span class=\"number\">-1.0</span><span class=\"number\">.0</span>.tar.gz</div><div class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> package_demo <span class=\"keyword\">import</span> now_time</div><div class=\"line\"> </div><div class=\"line\">In [<span class=\"number\">2</span>]: now_time.now()</div><div class=\"line\">Out[<span class=\"number\">2</span>]: datetime.datetime(<span class=\"number\">2017</span>, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">23</span>, <span class=\"number\">10</span>, <span class=\"number\">52</span>, <span class=\"number\">278942</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"分发到PyPI\"><a href=\"#分发到PyPI\" class=\"headerlink\" title=\"分发到PyPI\"></a>分发到PyPI</h3><p>首先到 PyPI 注册一个帐号, 在邮箱内确认<br>之后在目录新建一个 .pypirc 文件, 写入下面内容(注意填入自己的帐号密码):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[pypirc]</div><div class=\"line\">servers = pypi</div><div class=\"line\">[server-login]</div><div class=\"line\">username:username</div><div class=\"line\">password:password</div></pre></td></tr></table></figure></p>\n<p>上传<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py register  <span class=\"comment\"># 将包注册到 PyPI</span></div><div class=\"line\">python setup.py register sdist upload  <span class=\"comment\"># 上传</span></div></pre></td></tr></table></figure></p>\n<p>登录验证查看是否上传成功</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://packaging.python.org/tutorials/distributing-packages/#name\">https://packaging.python.org/tutorials/distributing-packages/#name</a></li>\n<li><a href=\"https://github.com/pypa/sampleproject/blob/master/setup.py\">https://github.com/pypa/sampleproject/blob/master/setup.py</a></li>\n<li><a href=\"https://github.com/celery/celery/blob/master/setup.py\">https://github.com/celery/celery/blob/master/setup.py</a></li>\n</ul>\n"},{"title":"Python Threading","date":"2017-04-17T12:37:11.000Z","_content":"#### 线程5种状态\n- 新建\n- 就绪\n- 运行\n- 阻塞\n- 死亡\n\n阻塞的三种情况：\n- 同步阻塞：是指处于竞争锁定的状态，线程请求锁定时将进入这个状态，一旦成功获得锁定又恢复到运行状态；\n- 等待阻塞：是指等待其他线程通知的状态，线程获得条件锁定后，调用“等待”将进入这个状态，一旦其他线程发出通知，线程将进入同步阻塞状态，再次竞争条件锁定；\n- 其他阻塞：是指调用time.sleep()、anotherthread.join()或等待IO时的阻塞，这个状态下线程不会释放已获得的锁定。\n\n#### GIL\n在python虚拟机中的访问由全局解释器锁（GIL）控制，由于有了这把锁能保证同一时刻只有一个线程在运行，在多线程环境下，python虚拟机按照如下方式运行：\n1. 设置GIL\n2. 切换到一个线程中运行\n3. 运行：\n    a指定数量的字节码的指令，或者\n    b线程主动让出控制（可以调用time.sleep(0)）\n4. 把线程设置为睡眠状态\n5. 解锁GIL\n6. 在重复以上所有步骤\n\n#### threading.Thread模块\nthreading.Thread 作用：创建线程实例\n```python\n- start()    开始一个线程的执行\n- run()    定义线程的功能的函数（一般会被子类重写）\n- join(timeout=None)  程序挂起，直到子线程结束，在执行主线程，如果给了timeout，则最多阻塞timeout秒\n- getName()    返回线程的名字\n- setName()    设置线程的名字\n- isAlive()    检查线程是否成活\n- isDaemon()   是否等待线程执行完成后在执行主进程，默认为false\n- setDeaemon() 设置为daemoe模式，setDeaemon(True)，不等子线程执行完成，直接执行主线程；如果在主线程没有结束时，子线程会执行直到主线程结束，子线程也结束\n```\n#### 多线程运行方式\n##### 函数调用\ntarget传入函数名称，args传递给函数的参数\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom threading import Thread\nfrom time import sleep,ctime,sleep\n \ndef myfunction(arg):\n    for item in range(10):\n        print item\n        sleep(1)\nprint \"before\"\n \nt1 = Thread(target=myfunction,args=('hello',))\nprint t1.getName() #Thread-1\nprint t1.isDaemon() #默认为false\n#t1.setDaemon(True)  #设置为setDaemon模式\nt1.start()\nt1.join(timeout=5)\nprint \"after\"\nprint \"Over\"\nsleep(5)\n```\n##### 类继承调用\n使用Threading创建线程，从threading.Thread继承，然后重写init方法和run方法\n```python\n#!/usr/bin/env python\n#coding:utf-8\n \nimport time\nfrom threading import Thread\n \nclass mythread(Thread): #继承父类的threading.Thread\n    def __init__(self,threadid,threadname,counter):\n        Thread.__init__(self)\n        self.threadid = threadid\n        self.threadname = threadname\n        self.counter = counter\n         \n    def run(self): #把要执行的代码写在run函数中，线程创建后会直接运行run函数\n        print \"Starting %s \\n\" %self.threadname\n        print_time(self.name,self.counter,self.threadid) #函数调用\n        print \"Exiting %s\" %self.threadname\n         \ndef print_time(threadName,delay,counter):\n    while counter :\n        time.sleep(delay)\n        print counter,\"%s: %s\" %(threadName,time.ctime())\n        counter -=1\n         \nt1 = mythread(2,\"线程一\",1)\nt1.start()\n```\n#### 生产者消费者模型\n优点：\n1. 解耦：两者都只依赖于缓冲区，不相互依赖\n2. 支持并发：生产者把制造出来的数据往缓冲区一丢，就可以再去生产下一个数据，即不用依赖消费者的处理速度\n3. 支持忙闲不均\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nimport threading\nimport time,random\nimport Queue\n \ndef proudcer(name,que):\n    while True:\n        if que.qsize() < 3:\n            que.put('生产包子')\n            print \"%s:生产了一个包子....\" %name\n        time.sleep(random.randrange(5))\n         \ndef consumer(name,que):\n    while True:\n        try:\n            que.get_nowait() #不等待队列是否有值\n            print \"%s:消费了一个包子....\" %name\n        except Exception:\n            print u'没有包子可消费了 .....'\n        time.sleep(random.randrange(3))\n         \n#实例化生产者\nq = Queue.Queue()\np1 = threading.Thread(target=proudcer,args=(\"生产者01\",q))\np2 = threading.Thread(target=proudcer,args=(\"生产者02\",q))\np1.start()\np2.start()\n \n#实例化消费者\nc1 = threading.Thread(target=consumer,args=(\"消费者01\",q))\nc2 = threading.Thread(target=consumer,args=(\"消费者02\",q))\nc1.start()\nc2.start()\n```\n#### 线程安全\n线程锁,保证数据安全，多个线程都同时修改某个变量，有可能出现问题，Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法\n\n运行：任何时刻只能有一个线程在执行\n\n定义和方法:\n\n        lock = threading.Lock() #线程锁定义\n        lock.acquire() #获取锁，开始独占cpu\n        slock.release() #释放锁，可以被其他使用cpu资源,必须在获得锁定后再使用，否则抛出异常\n        slock.locked()  #主程序判断locked()状态\n        Lock= threading.RLock() #可重入锁，多把锁时引用，释放时也应该释放对应的多把锁\n        lock = threading.BoundedSemaphore(4) #同时允许多少个线程进行数据修改信号量：同一时刻，允许几个线程运行\n```python\n#!/usr/bin/env python\n#coding:utf-8\nimport threading\nimport time\n \ndata = 0\nlock = threading.Lock() #定义锁\n \ndef func():\n    global data\n    print \"%s acquire lock ...\" %threading.currentThread().getName()\n    #print \"acquire-----%s\" %lock.acquire()\n    if lock.acquire(): #调用锁，返回是否获得锁\n        print \"%s get the lock.\" %threading.currentThread().getName()\n        data += 1\n        print data\n        time.sleep(2)\n        print \"%s release lock...\" %threading.currentThread().getName()\n        lock.release() # 调用release()将释放锁\n         \nt1 = threading.Thread(target=func)\nt2 = threading.Thread(target=func)\nt3 = threading.Thread(target=func)\nt1.start()\nt2.start()\nt3.start()\n```\n#### Event\n```\nevent = threading.Event()\nevent.wait()    #将阻塞线程放置为阻塞状态，等待设置处理\nevent.set()   #event内置了一个初始为false的标示，当调用set时，设置为true，开始处理\nevent.clear()    #将set标示位清空，设置为false\nevent.isSet()    #判断set标示位是否为true\n```\n#### 参考链接\nhttp://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html\n\n","source":"_posts/threading.md","raw":"---\ntitle: Python Threading\ndate: 2017-04-17 20:37:11\ntags:\n  - Threading\ncategories:\n  - python\n---\n#### 线程5种状态\n- 新建\n- 就绪\n- 运行\n- 阻塞\n- 死亡\n\n阻塞的三种情况：\n- 同步阻塞：是指处于竞争锁定的状态，线程请求锁定时将进入这个状态，一旦成功获得锁定又恢复到运行状态；\n- 等待阻塞：是指等待其他线程通知的状态，线程获得条件锁定后，调用“等待”将进入这个状态，一旦其他线程发出通知，线程将进入同步阻塞状态，再次竞争条件锁定；\n- 其他阻塞：是指调用time.sleep()、anotherthread.join()或等待IO时的阻塞，这个状态下线程不会释放已获得的锁定。\n\n#### GIL\n在python虚拟机中的访问由全局解释器锁（GIL）控制，由于有了这把锁能保证同一时刻只有一个线程在运行，在多线程环境下，python虚拟机按照如下方式运行：\n1. 设置GIL\n2. 切换到一个线程中运行\n3. 运行：\n    a指定数量的字节码的指令，或者\n    b线程主动让出控制（可以调用time.sleep(0)）\n4. 把线程设置为睡眠状态\n5. 解锁GIL\n6. 在重复以上所有步骤\n\n#### threading.Thread模块\nthreading.Thread 作用：创建线程实例\n```python\n- start()    开始一个线程的执行\n- run()    定义线程的功能的函数（一般会被子类重写）\n- join(timeout=None)  程序挂起，直到子线程结束，在执行主线程，如果给了timeout，则最多阻塞timeout秒\n- getName()    返回线程的名字\n- setName()    设置线程的名字\n- isAlive()    检查线程是否成活\n- isDaemon()   是否等待线程执行完成后在执行主进程，默认为false\n- setDeaemon() 设置为daemoe模式，setDeaemon(True)，不等子线程执行完成，直接执行主线程；如果在主线程没有结束时，子线程会执行直到主线程结束，子线程也结束\n```\n#### 多线程运行方式\n##### 函数调用\ntarget传入函数名称，args传递给函数的参数\n```python\n#!/usr/bin/env python\n# encoding: utf-8\nfrom threading import Thread\nfrom time import sleep,ctime,sleep\n \ndef myfunction(arg):\n    for item in range(10):\n        print item\n        sleep(1)\nprint \"before\"\n \nt1 = Thread(target=myfunction,args=('hello',))\nprint t1.getName() #Thread-1\nprint t1.isDaemon() #默认为false\n#t1.setDaemon(True)  #设置为setDaemon模式\nt1.start()\nt1.join(timeout=5)\nprint \"after\"\nprint \"Over\"\nsleep(5)\n```\n##### 类继承调用\n使用Threading创建线程，从threading.Thread继承，然后重写init方法和run方法\n```python\n#!/usr/bin/env python\n#coding:utf-8\n \nimport time\nfrom threading import Thread\n \nclass mythread(Thread): #继承父类的threading.Thread\n    def __init__(self,threadid,threadname,counter):\n        Thread.__init__(self)\n        self.threadid = threadid\n        self.threadname = threadname\n        self.counter = counter\n         \n    def run(self): #把要执行的代码写在run函数中，线程创建后会直接运行run函数\n        print \"Starting %s \\n\" %self.threadname\n        print_time(self.name,self.counter,self.threadid) #函数调用\n        print \"Exiting %s\" %self.threadname\n         \ndef print_time(threadName,delay,counter):\n    while counter :\n        time.sleep(delay)\n        print counter,\"%s: %s\" %(threadName,time.ctime())\n        counter -=1\n         \nt1 = mythread(2,\"线程一\",1)\nt1.start()\n```\n#### 生产者消费者模型\n优点：\n1. 解耦：两者都只依赖于缓冲区，不相互依赖\n2. 支持并发：生产者把制造出来的数据往缓冲区一丢，就可以再去生产下一个数据，即不用依赖消费者的处理速度\n3. 支持忙闲不均\n\n```python\n#!/usr/bin/env python\n#coding:utf-8\nimport threading\nimport time,random\nimport Queue\n \ndef proudcer(name,que):\n    while True:\n        if que.qsize() < 3:\n            que.put('生产包子')\n            print \"%s:生产了一个包子....\" %name\n        time.sleep(random.randrange(5))\n         \ndef consumer(name,que):\n    while True:\n        try:\n            que.get_nowait() #不等待队列是否有值\n            print \"%s:消费了一个包子....\" %name\n        except Exception:\n            print u'没有包子可消费了 .....'\n        time.sleep(random.randrange(3))\n         \n#实例化生产者\nq = Queue.Queue()\np1 = threading.Thread(target=proudcer,args=(\"生产者01\",q))\np2 = threading.Thread(target=proudcer,args=(\"生产者02\",q))\np1.start()\np2.start()\n \n#实例化消费者\nc1 = threading.Thread(target=consumer,args=(\"消费者01\",q))\nc2 = threading.Thread(target=consumer,args=(\"消费者02\",q))\nc1.start()\nc2.start()\n```\n#### 线程安全\n线程锁,保证数据安全，多个线程都同时修改某个变量，有可能出现问题，Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法\n\n运行：任何时刻只能有一个线程在执行\n\n定义和方法:\n\n        lock = threading.Lock() #线程锁定义\n        lock.acquire() #获取锁，开始独占cpu\n        slock.release() #释放锁，可以被其他使用cpu资源,必须在获得锁定后再使用，否则抛出异常\n        slock.locked()  #主程序判断locked()状态\n        Lock= threading.RLock() #可重入锁，多把锁时引用，释放时也应该释放对应的多把锁\n        lock = threading.BoundedSemaphore(4) #同时允许多少个线程进行数据修改信号量：同一时刻，允许几个线程运行\n```python\n#!/usr/bin/env python\n#coding:utf-8\nimport threading\nimport time\n \ndata = 0\nlock = threading.Lock() #定义锁\n \ndef func():\n    global data\n    print \"%s acquire lock ...\" %threading.currentThread().getName()\n    #print \"acquire-----%s\" %lock.acquire()\n    if lock.acquire(): #调用锁，返回是否获得锁\n        print \"%s get the lock.\" %threading.currentThread().getName()\n        data += 1\n        print data\n        time.sleep(2)\n        print \"%s release lock...\" %threading.currentThread().getName()\n        lock.release() # 调用release()将释放锁\n         \nt1 = threading.Thread(target=func)\nt2 = threading.Thread(target=func)\nt3 = threading.Thread(target=func)\nt1.start()\nt2.start()\nt3.start()\n```\n#### Event\n```\nevent = threading.Event()\nevent.wait()    #将阻塞线程放置为阻塞状态，等待设置处理\nevent.set()   #event内置了一个初始为false的标示，当调用set时，设置为true，开始处理\nevent.clear()    #将set标示位清空，设置为false\nevent.isSet()    #判断set标示位是否为true\n```\n#### 参考链接\nhttp://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html\n\n","slug":"threading","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5ys005tct8u8d2tdioj","content":"<h4 id=\"线程5种状态\"><a href=\"#线程5种状态\" class=\"headerlink\" title=\"线程5种状态\"></a>线程5种状态</h4><ul>\n<li>新建</li>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞</li>\n<li>死亡</li>\n</ul>\n<p>阻塞的三种情况：</p>\n<ul>\n<li>同步阻塞：是指处于竞争锁定的状态，线程请求锁定时将进入这个状态，一旦成功获得锁定又恢复到运行状态；</li>\n<li>等待阻塞：是指等待其他线程通知的状态，线程获得条件锁定后，调用“等待”将进入这个状态，一旦其他线程发出通知，线程将进入同步阻塞状态，再次竞争条件锁定；</li>\n<li>其他阻塞：是指调用time.sleep()、anotherthread.join()或等待IO时的阻塞，这个状态下线程不会释放已获得的锁定。</li>\n</ul>\n<h4 id=\"GIL\"><a href=\"#GIL\" class=\"headerlink\" title=\"GIL\"></a>GIL</h4><p>在python虚拟机中的访问由全局解释器锁（GIL）控制，由于有了这把锁能保证同一时刻只有一个线程在运行，在多线程环境下，python虚拟机按照如下方式运行：</p>\n<ol>\n<li>设置GIL</li>\n<li>切换到一个线程中运行</li>\n<li>运行：<br> a指定数量的字节码的指令，或者<br> b线程主动让出控制（可以调用time.sleep(0)）</li>\n<li>把线程设置为睡眠状态</li>\n<li>解锁GIL</li>\n<li>在重复以上所有步骤</li>\n</ol>\n<h4 id=\"threading-Thread模块\"><a href=\"#threading-Thread模块\" class=\"headerlink\" title=\"threading.Thread模块\"></a>threading.Thread模块</h4><p>threading.Thread 作用：创建线程实例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- start()    开始一个线程的执行</div><div class=\"line\">- run()    定义线程的功能的函数（一般会被子类重写）</div><div class=\"line\">- join(timeout=<span class=\"keyword\">None</span>)  程序挂起，直到子线程结束，在执行主线程，如果给了timeout，则最多阻塞timeout秒</div><div class=\"line\">- getName()    返回线程的名字</div><div class=\"line\">- setName()    设置线程的名字</div><div class=\"line\">- isAlive()    检查线程是否成活</div><div class=\"line\">- isDaemon()   是否等待线程执行完成后在执行主进程，默认为false</div><div class=\"line\">- setDeaemon() 设置为daemoe模式，setDeaemon(<span class=\"keyword\">True</span>)，不等子线程执行完成，直接执行主线程；如果在主线程没有结束时，子线程会执行直到主线程结束，子线程也结束</div></pre></td></tr></table></figure></p>\n<h4 id=\"多线程运行方式\"><a href=\"#多线程运行方式\" class=\"headerlink\" title=\"多线程运行方式\"></a>多线程运行方式</h4><h5 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h5><p>target传入函数名称，args传递给函数的参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime,sleep</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunction</span><span class=\"params\">(arg)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> item</div><div class=\"line\">        sleep(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span></div><div class=\"line\"> </div><div class=\"line\">t1 = Thread(target=myfunction,args=(<span class=\"string\">'hello'</span>,))</div><div class=\"line\"><span class=\"keyword\">print</span> t1.getName() <span class=\"comment\">#Thread-1</span></div><div class=\"line\"><span class=\"keyword\">print</span> t1.isDaemon() <span class=\"comment\">#默认为false</span></div><div class=\"line\"><span class=\"comment\">#t1.setDaemon(True)  #设置为setDaemon模式</span></div><div class=\"line\">t1.start()</div><div class=\"line\">t1.join(timeout=<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Over\"</span></div><div class=\"line\">sleep(<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"类继承调用\"><a href=\"#类继承调用\" class=\"headerlink\" title=\"类继承调用\"></a>类继承调用</h5><p>使用Threading创建线程，从threading.Thread继承，然后重写init方法和run方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mythread</span><span class=\"params\">(Thread)</span>:</span> <span class=\"comment\">#继承父类的threading.Thread</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,threadid,threadname,counter)</span>:</span></div><div class=\"line\">        Thread.__init__(self)</div><div class=\"line\">        self.threadid = threadid</div><div class=\"line\">        self.threadname = threadname</div><div class=\"line\">        self.counter = counter</div><div class=\"line\">         </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#把要执行的代码写在run函数中，线程创建后会直接运行run函数</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Starting %s \\n\"</span> %self.threadname</div><div class=\"line\">        print_time(self.name,self.counter,self.threadid) <span class=\"comment\">#函数调用</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting %s\"</span> %self.threadname</div><div class=\"line\">         </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName,delay,counter)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> counter :</div><div class=\"line\">        time.sleep(delay)</div><div class=\"line\">        <span class=\"keyword\">print</span> counter,<span class=\"string\">\"%s: %s\"</span> %(threadName,time.ctime())</div><div class=\"line\">        counter -=<span class=\"number\">1</span></div><div class=\"line\">         </div><div class=\"line\">t1 = mythread(<span class=\"number\">2</span>,<span class=\"string\">\"线程一\"</span>,<span class=\"number\">1</span>)</div><div class=\"line\">t1.start()</div></pre></td></tr></table></figure></p>\n<h4 id=\"生产者消费者模型\"><a href=\"#生产者消费者模型\" class=\"headerlink\" title=\"生产者消费者模型\"></a>生产者消费者模型</h4><p>优点：</p>\n<ol>\n<li>解耦：两者都只依赖于缓冲区，不相互依赖</li>\n<li>支持并发：生产者把制造出来的数据往缓冲区一丢，就可以再去生产下一个数据，即不用依赖消费者的处理速度</li>\n<li>支持忙闲不均</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> time,random</div><div class=\"line\"><span class=\"keyword\">import</span> Queue</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">proudcer</span><span class=\"params\">(name,que)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> que.qsize() &lt; <span class=\"number\">3</span>:</div><div class=\"line\">            que.put(<span class=\"string\">'生产包子'</span>)</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"%s:生产了一个包子....\"</span> %name</div><div class=\"line\">        time.sleep(random.randrange(<span class=\"number\">5</span>))</div><div class=\"line\">         </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer</span><span class=\"params\">(name,que)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            que.get_nowait() <span class=\"comment\">#不等待队列是否有值</span></div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"%s:消费了一个包子....\"</span> %name</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">u'没有包子可消费了 .....'</span></div><div class=\"line\">        time.sleep(random.randrange(<span class=\"number\">3</span>))</div><div class=\"line\">         </div><div class=\"line\"><span class=\"comment\">#实例化生产者</span></div><div class=\"line\">q = Queue.Queue()</div><div class=\"line\">p1 = threading.Thread(target=proudcer,args=(<span class=\"string\">\"生产者01\"</span>,q))</div><div class=\"line\">p2 = threading.Thread(target=proudcer,args=(<span class=\"string\">\"生产者02\"</span>,q))</div><div class=\"line\">p1.start()</div><div class=\"line\">p2.start()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#实例化消费者</span></div><div class=\"line\">c1 = threading.Thread(target=consumer,args=(<span class=\"string\">\"消费者01\"</span>,q))</div><div class=\"line\">c2 = threading.Thread(target=consumer,args=(<span class=\"string\">\"消费者02\"</span>,q))</div><div class=\"line\">c1.start()</div><div class=\"line\">c2.start()</div></pre></td></tr></table></figure>\n<h4 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h4><p>线程锁,保证数据安全，多个线程都同时修改某个变量，有可能出现问题，Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法</p>\n<p>运行：任何时刻只能有一个线程在执行</p>\n<p>定义和方法:</p>\n<pre><code>lock = threading.Lock() #线程锁定义\nlock.acquire() #获取锁，开始独占cpu\nslock.release() #释放锁，可以被其他使用cpu资源,必须在获得锁定后再使用，否则抛出异常\nslock.locked()  #主程序判断locked()状态\nLock= threading.RLock() #可重入锁，多把锁时引用，释放时也应该释放对应的多把锁\nlock = threading.BoundedSemaphore(4) #同时允许多少个线程进行数据修改信号量：同一时刻，允许几个线程运行\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">data = <span class=\"number\">0</span></div><div class=\"line\">lock = threading.Lock() <span class=\"comment\">#定义锁</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">global</span> data</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"%s acquire lock ...\"</span> %threading.currentThread().getName()</div><div class=\"line\">    <span class=\"comment\">#print \"acquire-----%s\" %lock.acquire()</span></div><div class=\"line\">    <span class=\"keyword\">if</span> lock.acquire(): <span class=\"comment\">#调用锁，返回是否获得锁</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"%s get the lock.\"</span> %threading.currentThread().getName()</div><div class=\"line\">        data += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">print</span> data</div><div class=\"line\">        time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"%s release lock...\"</span> %threading.currentThread().getName()</div><div class=\"line\">        lock.release() <span class=\"comment\"># 调用release()将释放锁</span></div><div class=\"line\">         </div><div class=\"line\">t1 = threading.Thread(target=func)</div><div class=\"line\">t2 = threading.Thread(target=func)</div><div class=\"line\">t3 = threading.Thread(target=func)</div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\">t3.start()</div></pre></td></tr></table></figure>\n<h4 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">event = threading.Event()</div><div class=\"line\">event.wait()    #将阻塞线程放置为阻塞状态，等待设置处理</div><div class=\"line\">event.set()   #event内置了一个初始为false的标示，当调用set时，设置为true，开始处理</div><div class=\"line\">event.clear()    #将set标示位清空，设置为false</div><div class=\"line\">event.isSet()    #判断set标示位是否为true</div></pre></td></tr></table></figure>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html</a></p>\n","excerpt":"","more":"<h4 id=\"线程5种状态\"><a href=\"#线程5种状态\" class=\"headerlink\" title=\"线程5种状态\"></a>线程5种状态</h4><ul>\n<li>新建</li>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞</li>\n<li>死亡</li>\n</ul>\n<p>阻塞的三种情况：</p>\n<ul>\n<li>同步阻塞：是指处于竞争锁定的状态，线程请求锁定时将进入这个状态，一旦成功获得锁定又恢复到运行状态；</li>\n<li>等待阻塞：是指等待其他线程通知的状态，线程获得条件锁定后，调用“等待”将进入这个状态，一旦其他线程发出通知，线程将进入同步阻塞状态，再次竞争条件锁定；</li>\n<li>其他阻塞：是指调用time.sleep()、anotherthread.join()或等待IO时的阻塞，这个状态下线程不会释放已获得的锁定。</li>\n</ul>\n<h4 id=\"GIL\"><a href=\"#GIL\" class=\"headerlink\" title=\"GIL\"></a>GIL</h4><p>在python虚拟机中的访问由全局解释器锁（GIL）控制，由于有了这把锁能保证同一时刻只有一个线程在运行，在多线程环境下，python虚拟机按照如下方式运行：</p>\n<ol>\n<li>设置GIL</li>\n<li>切换到一个线程中运行</li>\n<li>运行：<br> a指定数量的字节码的指令，或者<br> b线程主动让出控制（可以调用time.sleep(0)）</li>\n<li>把线程设置为睡眠状态</li>\n<li>解锁GIL</li>\n<li>在重复以上所有步骤</li>\n</ol>\n<h4 id=\"threading-Thread模块\"><a href=\"#threading-Thread模块\" class=\"headerlink\" title=\"threading.Thread模块\"></a>threading.Thread模块</h4><p>threading.Thread 作用：创建线程实例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- start()    开始一个线程的执行</div><div class=\"line\">- run()    定义线程的功能的函数（一般会被子类重写）</div><div class=\"line\">- join(timeout=<span class=\"keyword\">None</span>)  程序挂起，直到子线程结束，在执行主线程，如果给了timeout，则最多阻塞timeout秒</div><div class=\"line\">- getName()    返回线程的名字</div><div class=\"line\">- setName()    设置线程的名字</div><div class=\"line\">- isAlive()    检查线程是否成活</div><div class=\"line\">- isDaemon()   是否等待线程执行完成后在执行主进程，默认为false</div><div class=\"line\">- setDeaemon() 设置为daemoe模式，setDeaemon(<span class=\"keyword\">True</span>)，不等子线程执行完成，直接执行主线程；如果在主线程没有结束时，子线程会执行直到主线程结束，子线程也结束</div></pre></td></tr></table></figure></p>\n<h4 id=\"多线程运行方式\"><a href=\"#多线程运行方式\" class=\"headerlink\" title=\"多线程运行方式\"></a>多线程运行方式</h4><h5 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h5><p>target传入函数名称，args传递给函数的参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># encoding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime,sleep</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunction</span><span class=\"params\">(arg)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> item</div><div class=\"line\">        sleep(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"before\"</span></div><div class=\"line\"> </div><div class=\"line\">t1 = Thread(target=myfunction,args=(<span class=\"string\">'hello'</span>,))</div><div class=\"line\"><span class=\"keyword\">print</span> t1.getName() <span class=\"comment\">#Thread-1</span></div><div class=\"line\"><span class=\"keyword\">print</span> t1.isDaemon() <span class=\"comment\">#默认为false</span></div><div class=\"line\"><span class=\"comment\">#t1.setDaemon(True)  #设置为setDaemon模式</span></div><div class=\"line\">t1.start()</div><div class=\"line\">t1.join(timeout=<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"after\"</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Over\"</span></div><div class=\"line\">sleep(<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"类继承调用\"><a href=\"#类继承调用\" class=\"headerlink\" title=\"类继承调用\"></a>类继承调用</h5><p>使用Threading创建线程，从threading.Thread继承，然后重写init方法和run方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mythread</span><span class=\"params\">(Thread)</span>:</span> <span class=\"comment\">#继承父类的threading.Thread</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,threadid,threadname,counter)</span>:</span></div><div class=\"line\">        Thread.__init__(self)</div><div class=\"line\">        self.threadid = threadid</div><div class=\"line\">        self.threadname = threadname</div><div class=\"line\">        self.counter = counter</div><div class=\"line\">         </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#把要执行的代码写在run函数中，线程创建后会直接运行run函数</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Starting %s \\n\"</span> %self.threadname</div><div class=\"line\">        print_time(self.name,self.counter,self.threadid) <span class=\"comment\">#函数调用</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting %s\"</span> %self.threadname</div><div class=\"line\">         </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName,delay,counter)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> counter :</div><div class=\"line\">        time.sleep(delay)</div><div class=\"line\">        <span class=\"keyword\">print</span> counter,<span class=\"string\">\"%s: %s\"</span> %(threadName,time.ctime())</div><div class=\"line\">        counter -=<span class=\"number\">1</span></div><div class=\"line\">         </div><div class=\"line\">t1 = mythread(<span class=\"number\">2</span>,<span class=\"string\">\"线程一\"</span>,<span class=\"number\">1</span>)</div><div class=\"line\">t1.start()</div></pre></td></tr></table></figure></p>\n<h4 id=\"生产者消费者模型\"><a href=\"#生产者消费者模型\" class=\"headerlink\" title=\"生产者消费者模型\"></a>生产者消费者模型</h4><p>优点：</p>\n<ol>\n<li>解耦：两者都只依赖于缓冲区，不相互依赖</li>\n<li>支持并发：生产者把制造出来的数据往缓冲区一丢，就可以再去生产下一个数据，即不用依赖消费者的处理速度</li>\n<li>支持忙闲不均</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> time,random</div><div class=\"line\"><span class=\"keyword\">import</span> Queue</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">proudcer</span><span class=\"params\">(name,que)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> que.qsize() &lt; <span class=\"number\">3</span>:</div><div class=\"line\">            que.put(<span class=\"string\">'生产包子'</span>)</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"%s:生产了一个包子....\"</span> %name</div><div class=\"line\">        time.sleep(random.randrange(<span class=\"number\">5</span>))</div><div class=\"line\">         </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer</span><span class=\"params\">(name,que)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            que.get_nowait() <span class=\"comment\">#不等待队列是否有值</span></div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"%s:消费了一个包子....\"</span> %name</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">u'没有包子可消费了 .....'</span></div><div class=\"line\">        time.sleep(random.randrange(<span class=\"number\">3</span>))</div><div class=\"line\">         </div><div class=\"line\"><span class=\"comment\">#实例化生产者</span></div><div class=\"line\">q = Queue.Queue()</div><div class=\"line\">p1 = threading.Thread(target=proudcer,args=(<span class=\"string\">\"生产者01\"</span>,q))</div><div class=\"line\">p2 = threading.Thread(target=proudcer,args=(<span class=\"string\">\"生产者02\"</span>,q))</div><div class=\"line\">p1.start()</div><div class=\"line\">p2.start()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">#实例化消费者</span></div><div class=\"line\">c1 = threading.Thread(target=consumer,args=(<span class=\"string\">\"消费者01\"</span>,q))</div><div class=\"line\">c2 = threading.Thread(target=consumer,args=(<span class=\"string\">\"消费者02\"</span>,q))</div><div class=\"line\">c1.start()</div><div class=\"line\">c2.start()</div></pre></td></tr></table></figure>\n<h4 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h4><p>线程锁,保证数据安全，多个线程都同时修改某个变量，有可能出现问题，Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法</p>\n<p>运行：任何时刻只能有一个线程在执行</p>\n<p>定义和方法:</p>\n<pre><code>lock = threading.Lock() #线程锁定义\nlock.acquire() #获取锁，开始独占cpu\nslock.release() #释放锁，可以被其他使用cpu资源,必须在获得锁定后再使用，否则抛出异常\nslock.locked()  #主程序判断locked()状态\nLock= threading.RLock() #可重入锁，多把锁时引用，释放时也应该释放对应的多把锁\nlock = threading.BoundedSemaphore(4) #同时允许多少个线程进行数据修改信号量：同一时刻，允许几个线程运行\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding:utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"> </div><div class=\"line\">data = <span class=\"number\">0</span></div><div class=\"line\">lock = threading.Lock() <span class=\"comment\">#定义锁</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">global</span> data</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"%s acquire lock ...\"</span> %threading.currentThread().getName()</div><div class=\"line\">    <span class=\"comment\">#print \"acquire-----%s\" %lock.acquire()</span></div><div class=\"line\">    <span class=\"keyword\">if</span> lock.acquire(): <span class=\"comment\">#调用锁，返回是否获得锁</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"%s get the lock.\"</span> %threading.currentThread().getName()</div><div class=\"line\">        data += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">print</span> data</div><div class=\"line\">        time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"%s release lock...\"</span> %threading.currentThread().getName()</div><div class=\"line\">        lock.release() <span class=\"comment\"># 调用release()将释放锁</span></div><div class=\"line\">         </div><div class=\"line\">t1 = threading.Thread(target=func)</div><div class=\"line\">t2 = threading.Thread(target=func)</div><div class=\"line\">t3 = threading.Thread(target=func)</div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\">t3.start()</div></pre></td></tr></table></figure>\n<h4 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">event = threading.Event()</div><div class=\"line\">event.wait()    #将阻塞线程放置为阻塞状态，等待设置处理</div><div class=\"line\">event.set()   #event内置了一个初始为false的标示，当调用set时，设置为true，开始处理</div><div class=\"line\">event.clear()    #将set标示位清空，设置为false</div><div class=\"line\">event.isSet()    #判断set标示位是否为true</div></pre></td></tr></table></figure>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html\">http://www.cnblogs.com/huxi/archive/2010/06/26/1765808.html</a></p>\n"},{"title":"运维 Pycharm,Vim,Items2常用快捷键","date":"2017-02-06T14:05:33.000Z","_content":"#### 熟练掌握下面快捷键的使用(方便查询)\n---\n##### Pycharm日常快捷键\n```\n- cmd + b           跳转到声明处(cmd + 鼠标)\n- cmd + y           显示方法对应的代码\n- cmd + []          光标之前/后的位置\n- cmd + del         删除当前行\n- cmd + o           搜索class\n- cmd + l           指定行数跳转\n- cmd + shift + o   搜索文件\n- cmd + opt + o     搜索函数\n- cmd + +           展开当前\n- cmd + -           收缩当前\n- cmd + shift + +   展开所有\n- cmd + shift + -   收缩所有\n- cmd + fn + F2     停止运行程序\n- cmd + /           注释/取消注释\n- cmd + fn + F12    显示文件结构\n- cmd + d           在下一行复制本行的内容\n- cmd + up/down     转到其他目录中\n- alt + enter       自动添加包\n- alt + del         向前删除一个字符串\n- alt + up          选中一个单词\n- alt + control + i 自动缩进行\n- double shift      选择需要查看的文件\n- alt + r           启动程序\n- alt + d           debug启动程序\n```\n---\n\n##### Vim日常快捷键\n```\n- hjkl              左下上右\n- gg                跳到文首\n- G                 跳到文末\n- M                 跳到当前页屏幕中间\n- '0                光标跳到上次关闭文件前的位置\n- control + b       向上翻页\n- control + f       向下翻页\n- dw                删除一个单词\n- D                 删除所在行光标后面的内容\n- d0                删除所在行光标前面的内容\n- x/X               向后删除一个字符，X为向前删除一个字符\n- 0                 移动到当前行的第一个字符处\n- $                 移动到当前行的最后一个字符处\n- u                 撤销之前的操作\n- control + r       向后执行刚才撤销的内容\n- n                 查询时向下重复前一个查询操作\n- N                 查询时向上重复前一个查询操作\n- :s/old/new/g      用new替换行中所有的old\n- %s/old/new/g      用new替换当前文件里所有的old\n- v                 字符选择\n- V                 行选择\n- ctrl+v            块选择\n\n可用于在选中的行上插入相同的内容\n- 定位光标\n- crtl+v           进入块编辑模式\n- I                大写字母I，然后插入字符\n- ESC              按两下esc 即可添加相同内容到对应的行\n```\n---\n\n##### Items2常用快捷键\n```\n- cmd + t           新建标签\n- cmd + w           关闭标签\n- cmd + L/R         左右切换标签\n- cmd + ;           查看历史命令\n- cmd + r           清屏\n- cmd + d           垂直分屏\n- cmd + shift + d   水平分屏\n- control + a       到行首\n- control + e       到行末\n- control + d       删除当前光标的字符\n- 选中即复制 + 鼠标中键粘贴\n```\n---\n\n\n","source":"_posts/vim.md","raw":"---\ntitle: 运维 Pycharm,Vim,Items2常用快捷键\ndate: 2017-02-06 22:05:33\ntags:\n  - Vim\n  - Pycharm\n  - Items2\ncategories:\n  - 运维\n---\n#### 熟练掌握下面快捷键的使用(方便查询)\n---\n##### Pycharm日常快捷键\n```\n- cmd + b           跳转到声明处(cmd + 鼠标)\n- cmd + y           显示方法对应的代码\n- cmd + []          光标之前/后的位置\n- cmd + del         删除当前行\n- cmd + o           搜索class\n- cmd + l           指定行数跳转\n- cmd + shift + o   搜索文件\n- cmd + opt + o     搜索函数\n- cmd + +           展开当前\n- cmd + -           收缩当前\n- cmd + shift + +   展开所有\n- cmd + shift + -   收缩所有\n- cmd + fn + F2     停止运行程序\n- cmd + /           注释/取消注释\n- cmd + fn + F12    显示文件结构\n- cmd + d           在下一行复制本行的内容\n- cmd + up/down     转到其他目录中\n- alt + enter       自动添加包\n- alt + del         向前删除一个字符串\n- alt + up          选中一个单词\n- alt + control + i 自动缩进行\n- double shift      选择需要查看的文件\n- alt + r           启动程序\n- alt + d           debug启动程序\n```\n---\n\n##### Vim日常快捷键\n```\n- hjkl              左下上右\n- gg                跳到文首\n- G                 跳到文末\n- M                 跳到当前页屏幕中间\n- '0                光标跳到上次关闭文件前的位置\n- control + b       向上翻页\n- control + f       向下翻页\n- dw                删除一个单词\n- D                 删除所在行光标后面的内容\n- d0                删除所在行光标前面的内容\n- x/X               向后删除一个字符，X为向前删除一个字符\n- 0                 移动到当前行的第一个字符处\n- $                 移动到当前行的最后一个字符处\n- u                 撤销之前的操作\n- control + r       向后执行刚才撤销的内容\n- n                 查询时向下重复前一个查询操作\n- N                 查询时向上重复前一个查询操作\n- :s/old/new/g      用new替换行中所有的old\n- %s/old/new/g      用new替换当前文件里所有的old\n- v                 字符选择\n- V                 行选择\n- ctrl+v            块选择\n\n可用于在选中的行上插入相同的内容\n- 定位光标\n- crtl+v           进入块编辑模式\n- I                大写字母I，然后插入字符\n- ESC              按两下esc 即可添加相同内容到对应的行\n```\n---\n\n##### Items2常用快捷键\n```\n- cmd + t           新建标签\n- cmd + w           关闭标签\n- cmd + L/R         左右切换标签\n- cmd + ;           查看历史命令\n- cmd + r           清屏\n- cmd + d           垂直分屏\n- cmd + shift + d   水平分屏\n- control + a       到行首\n- control + e       到行末\n- control + d       删除当前光标的字符\n- 选中即复制 + 鼠标中键粘贴\n```\n---\n\n\n","slug":"vim","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yu005yct8uje38l86w","content":"<h4 id=\"熟练掌握下面快捷键的使用-方便查询\"><a href=\"#熟练掌握下面快捷键的使用-方便查询\" class=\"headerlink\" title=\"熟练掌握下面快捷键的使用(方便查询)\"></a>熟练掌握下面快捷键的使用(方便查询)</h4><hr>\n<h5 id=\"Pycharm日常快捷键\"><a href=\"#Pycharm日常快捷键\" class=\"headerlink\" title=\"Pycharm日常快捷键\"></a>Pycharm日常快捷键</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cmd + b           跳转到声明处(cmd + 鼠标)</div><div class=\"line\">- cmd + y           显示方法对应的代码</div><div class=\"line\">- cmd + []          光标之前/后的位置</div><div class=\"line\">- cmd + del         删除当前行</div><div class=\"line\">- cmd + o           搜索class</div><div class=\"line\">- cmd + l           指定行数跳转</div><div class=\"line\">- cmd + shift + o   搜索文件</div><div class=\"line\">- cmd + opt + o     搜索函数</div><div class=\"line\">- cmd + +           展开当前</div><div class=\"line\">- cmd + -           收缩当前</div><div class=\"line\">- cmd + shift + +   展开所有</div><div class=\"line\">- cmd + shift + -   收缩所有</div><div class=\"line\">- cmd + fn + F2     停止运行程序</div><div class=\"line\">- cmd + /           注释/取消注释</div><div class=\"line\">- cmd + fn + F12    显示文件结构</div><div class=\"line\">- cmd + d           在下一行复制本行的内容</div><div class=\"line\">- cmd + up/down     转到其他目录中</div><div class=\"line\">- alt + enter       自动添加包</div><div class=\"line\">- alt + del         向前删除一个字符串</div><div class=\"line\">- alt + up          选中一个单词</div><div class=\"line\">- alt + control + i 自动缩进行</div><div class=\"line\">- double shift      选择需要查看的文件</div><div class=\"line\">- alt + r           启动程序</div><div class=\"line\">- alt + d           debug启动程序</div></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"Vim日常快捷键\"><a href=\"#Vim日常快捷键\" class=\"headerlink\" title=\"Vim日常快捷键\"></a>Vim日常快捷键</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hjkl              左下上右</div><div class=\"line\">- gg                跳到文首</div><div class=\"line\">- G                 跳到文末</div><div class=\"line\">- M                 跳到当前页屏幕中间</div><div class=\"line\">- &apos;0                光标跳到上次关闭文件前的位置</div><div class=\"line\">- control + b       向上翻页</div><div class=\"line\">- control + f       向下翻页</div><div class=\"line\">- dw                删除一个单词</div><div class=\"line\">- D                 删除所在行光标后面的内容</div><div class=\"line\">- d0                删除所在行光标前面的内容</div><div class=\"line\">- x/X               向后删除一个字符，X为向前删除一个字符</div><div class=\"line\">- 0                 移动到当前行的第一个字符处</div><div class=\"line\">- $                 移动到当前行的最后一个字符处</div><div class=\"line\">- u                 撤销之前的操作</div><div class=\"line\">- control + r       向后执行刚才撤销的内容</div><div class=\"line\">- n                 查询时向下重复前一个查询操作</div><div class=\"line\">- N                 查询时向上重复前一个查询操作</div><div class=\"line\">- :s/old/new/g      用new替换行中所有的old</div><div class=\"line\">- %s/old/new/g      用new替换当前文件里所有的old</div><div class=\"line\">- v                 字符选择</div><div class=\"line\">- V                 行选择</div><div class=\"line\">- ctrl+v            块选择</div><div class=\"line\"></div><div class=\"line\">可用于在选中的行上插入相同的内容</div><div class=\"line\">- 定位光标</div><div class=\"line\">- crtl+v           进入块编辑模式</div><div class=\"line\">- I                大写字母I，然后插入字符</div><div class=\"line\">- ESC              按两下esc 即可添加相同内容到对应的行</div></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"Items2常用快捷键\"><a href=\"#Items2常用快捷键\" class=\"headerlink\" title=\"Items2常用快捷键\"></a>Items2常用快捷键</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cmd + t           新建标签</div><div class=\"line\">- cmd + w           关闭标签</div><div class=\"line\">- cmd + L/R         左右切换标签</div><div class=\"line\">- cmd + ;           查看历史命令</div><div class=\"line\">- cmd + r           清屏</div><div class=\"line\">- cmd + d           垂直分屏</div><div class=\"line\">- cmd + shift + d   水平分屏</div><div class=\"line\">- control + a       到行首</div><div class=\"line\">- control + e       到行末</div><div class=\"line\">- control + d       删除当前光标的字符</div><div class=\"line\">- 选中即复制 + 鼠标中键粘贴</div></pre></td></tr></table></figure>\n<hr>\n","excerpt":"","more":"<h4 id=\"熟练掌握下面快捷键的使用-方便查询\"><a href=\"#熟练掌握下面快捷键的使用-方便查询\" class=\"headerlink\" title=\"熟练掌握下面快捷键的使用(方便查询)\"></a>熟练掌握下面快捷键的使用(方便查询)</h4><hr>\n<h5 id=\"Pycharm日常快捷键\"><a href=\"#Pycharm日常快捷键\" class=\"headerlink\" title=\"Pycharm日常快捷键\"></a>Pycharm日常快捷键</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cmd + b           跳转到声明处(cmd + 鼠标)</div><div class=\"line\">- cmd + y           显示方法对应的代码</div><div class=\"line\">- cmd + []          光标之前/后的位置</div><div class=\"line\">- cmd + del         删除当前行</div><div class=\"line\">- cmd + o           搜索class</div><div class=\"line\">- cmd + l           指定行数跳转</div><div class=\"line\">- cmd + shift + o   搜索文件</div><div class=\"line\">- cmd + opt + o     搜索函数</div><div class=\"line\">- cmd + +           展开当前</div><div class=\"line\">- cmd + -           收缩当前</div><div class=\"line\">- cmd + shift + +   展开所有</div><div class=\"line\">- cmd + shift + -   收缩所有</div><div class=\"line\">- cmd + fn + F2     停止运行程序</div><div class=\"line\">- cmd + /           注释/取消注释</div><div class=\"line\">- cmd + fn + F12    显示文件结构</div><div class=\"line\">- cmd + d           在下一行复制本行的内容</div><div class=\"line\">- cmd + up/down     转到其他目录中</div><div class=\"line\">- alt + enter       自动添加包</div><div class=\"line\">- alt + del         向前删除一个字符串</div><div class=\"line\">- alt + up          选中一个单词</div><div class=\"line\">- alt + control + i 自动缩进行</div><div class=\"line\">- double shift      选择需要查看的文件</div><div class=\"line\">- alt + r           启动程序</div><div class=\"line\">- alt + d           debug启动程序</div></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"Vim日常快捷键\"><a href=\"#Vim日常快捷键\" class=\"headerlink\" title=\"Vim日常快捷键\"></a>Vim日常快捷键</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hjkl              左下上右</div><div class=\"line\">- gg                跳到文首</div><div class=\"line\">- G                 跳到文末</div><div class=\"line\">- M                 跳到当前页屏幕中间</div><div class=\"line\">- &apos;0                光标跳到上次关闭文件前的位置</div><div class=\"line\">- control + b       向上翻页</div><div class=\"line\">- control + f       向下翻页</div><div class=\"line\">- dw                删除一个单词</div><div class=\"line\">- D                 删除所在行光标后面的内容</div><div class=\"line\">- d0                删除所在行光标前面的内容</div><div class=\"line\">- x/X               向后删除一个字符，X为向前删除一个字符</div><div class=\"line\">- 0                 移动到当前行的第一个字符处</div><div class=\"line\">- $                 移动到当前行的最后一个字符处</div><div class=\"line\">- u                 撤销之前的操作</div><div class=\"line\">- control + r       向后执行刚才撤销的内容</div><div class=\"line\">- n                 查询时向下重复前一个查询操作</div><div class=\"line\">- N                 查询时向上重复前一个查询操作</div><div class=\"line\">- :s/old/new/g      用new替换行中所有的old</div><div class=\"line\">- %s/old/new/g      用new替换当前文件里所有的old</div><div class=\"line\">- v                 字符选择</div><div class=\"line\">- V                 行选择</div><div class=\"line\">- ctrl+v            块选择</div><div class=\"line\"></div><div class=\"line\">可用于在选中的行上插入相同的内容</div><div class=\"line\">- 定位光标</div><div class=\"line\">- crtl+v           进入块编辑模式</div><div class=\"line\">- I                大写字母I，然后插入字符</div><div class=\"line\">- ESC              按两下esc 即可添加相同内容到对应的行</div></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"Items2常用快捷键\"><a href=\"#Items2常用快捷键\" class=\"headerlink\" title=\"Items2常用快捷键\"></a>Items2常用快捷键</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cmd + t           新建标签</div><div class=\"line\">- cmd + w           关闭标签</div><div class=\"line\">- cmd + L/R         左右切换标签</div><div class=\"line\">- cmd + ;           查看历史命令</div><div class=\"line\">- cmd + r           清屏</div><div class=\"line\">- cmd + d           垂直分屏</div><div class=\"line\">- cmd + shift + d   水平分屏</div><div class=\"line\">- control + a       到行首</div><div class=\"line\">- control + e       到行末</div><div class=\"line\">- control + d       删除当前光标的字符</div><div class=\"line\">- 选中即复制 + 鼠标中键粘贴</div></pre></td></tr></table></figure>\n<hr>\n"},{"title":"运维 Tmux日常","date":"2017-03-29T13:06:09.000Z","_content":"#### 安装\n```\n# Mac中\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew install tmux\n# Ubuntu中\napt-get install tmux\n```\nSession可以包含多个Window, 每个Window又可以包含多个Pane\n\n#### Session操作\n```\ntmux new -s xxx #新建session会话\nC-b : new -s abc # 在当前session中新建一个session，并保证之前session依然存在\ntmux a -t xxx #进入xxx会话\nC-b ? #列出所有快捷键，按q返回\nC-b d #当前会话，返回shell；tmux attach 重新进入之前的会话\nC-b s #选择并切换会话，在开启多个会话时使用\n```\n#### Window操作\n```\nC-b c 创建一个新窗口\nC-b & 关闭当前窗口\nC-b w 列出所有的窗口选择\nC-b 窗口号(例如窗口号为1的, 则C-b 1)\nC-b , 重命名当前窗口，便于识别各个窗口\n```\n#### Pane操作\n```\nC-b % 横向分Terminal\nC-b \" 纵向分Terminal\nC-b 方向键 在自由选择各面板\nC-b x 关闭当前pane\nC-b q 显示面板编号\n```\n\n#### 配置文件(~/.tmux.conf)\n```\n#设置前缀为Ctrl + a\nset -g prefix C-a\n \n#解除Ctrl+b 与前缀的对应关系\nunbind C-b\n \n#将r 设置为加载配置文件，并显示\"reloaded!\"信息\nbind r source-file ~/.tmux.conf \\; display \"~/.tmux Reloaded!\"\n \n#window 水平分割和纵向分割\nbind | split-window -h -c\nbind - split-window -v -c\n \n#方向移动设置\n#up\nbind -n C-k select-pane -U\n#down\nbind -n C-j select-pane -D\n#left\nbind -n C-h select-pane -L\n#right\nbind -n C-l select-pane -R\n \n#设置鼠标操作\n#set -g mouse on\n \n# 设置终端类型为256色\n#set -g default-terminal \"screen-256color\"\n \n# 设置窗口分割的边框颜色\nset -g pane-border-fg green\nset -g pane-border-bg black\n \n# 设置当前窗口分割的边框颜色\n#set -g pane-active-border-fg white\n#set -g pane-active-border-bg yellow\n \nset -g status-bg colour236\nset -g status-fg colour68\n \n#copy-mode 将快捷键设置为vi 模式\nsetw -g mode-keys vi\n \n# 设置状态栏左部宽度  默认为10\nset -g status-left-length 35\n# 设置状态栏左部显示内容。\nset -g status-left \"#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]\"\n# 设置状态栏右部宽度\nset -g status-right-length 48\n# 设置状态栏右部内容，这里设置为时间信息\nset -g status-right \"#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep 'inet.*netmask.*broadcast' | awk '{print $2}')\"\n# 窗口信息居中显示\nset -g status-justify centre\n# 设置状态栏更新时间 每60秒更新一次，默认是15秒更新\nset -g status-interval 60\n```\n#### 参考链接\nhttps://github.com/liuchengxu/dotfiles/blob/master/tmux.conf\nhttps://github.com/wklken/k-tmux/blob/master/tmux.conf\nhttps://my.oschina.net/am313/blog/865915\nhttps://gist.github.com/ryerh/14b7c24dfd623ef8edc7\n\n\n\n","source":"_posts/tmux.md","raw":"---\ntitle: 运维 Tmux日常\ndate: 2017-03-29 21:06:09\ntags:\n  - Tmux\ncategories:\n  - 运维\n---\n#### 安装\n```\n# Mac中\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew install tmux\n# Ubuntu中\napt-get install tmux\n```\nSession可以包含多个Window, 每个Window又可以包含多个Pane\n\n#### Session操作\n```\ntmux new -s xxx #新建session会话\nC-b : new -s abc # 在当前session中新建一个session，并保证之前session依然存在\ntmux a -t xxx #进入xxx会话\nC-b ? #列出所有快捷键，按q返回\nC-b d #当前会话，返回shell；tmux attach 重新进入之前的会话\nC-b s #选择并切换会话，在开启多个会话时使用\n```\n#### Window操作\n```\nC-b c 创建一个新窗口\nC-b & 关闭当前窗口\nC-b w 列出所有的窗口选择\nC-b 窗口号(例如窗口号为1的, 则C-b 1)\nC-b , 重命名当前窗口，便于识别各个窗口\n```\n#### Pane操作\n```\nC-b % 横向分Terminal\nC-b \" 纵向分Terminal\nC-b 方向键 在自由选择各面板\nC-b x 关闭当前pane\nC-b q 显示面板编号\n```\n\n#### 配置文件(~/.tmux.conf)\n```\n#设置前缀为Ctrl + a\nset -g prefix C-a\n \n#解除Ctrl+b 与前缀的对应关系\nunbind C-b\n \n#将r 设置为加载配置文件，并显示\"reloaded!\"信息\nbind r source-file ~/.tmux.conf \\; display \"~/.tmux Reloaded!\"\n \n#window 水平分割和纵向分割\nbind | split-window -h -c\nbind - split-window -v -c\n \n#方向移动设置\n#up\nbind -n C-k select-pane -U\n#down\nbind -n C-j select-pane -D\n#left\nbind -n C-h select-pane -L\n#right\nbind -n C-l select-pane -R\n \n#设置鼠标操作\n#set -g mouse on\n \n# 设置终端类型为256色\n#set -g default-terminal \"screen-256color\"\n \n# 设置窗口分割的边框颜色\nset -g pane-border-fg green\nset -g pane-border-bg black\n \n# 设置当前窗口分割的边框颜色\n#set -g pane-active-border-fg white\n#set -g pane-active-border-bg yellow\n \nset -g status-bg colour236\nset -g status-fg colour68\n \n#copy-mode 将快捷键设置为vi 模式\nsetw -g mode-keys vi\n \n# 设置状态栏左部宽度  默认为10\nset -g status-left-length 35\n# 设置状态栏左部显示内容。\nset -g status-left \"#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]\"\n# 设置状态栏右部宽度\nset -g status-right-length 48\n# 设置状态栏右部内容，这里设置为时间信息\nset -g status-right \"#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep 'inet.*netmask.*broadcast' | awk '{print $2}')\"\n# 窗口信息居中显示\nset -g status-justify centre\n# 设置状态栏更新时间 每60秒更新一次，默认是15秒更新\nset -g status-interval 60\n```\n#### 参考链接\nhttps://github.com/liuchengxu/dotfiles/blob/master/tmux.conf\nhttps://github.com/wklken/k-tmux/blob/master/tmux.conf\nhttps://my.oschina.net/am313/blog/865915\nhttps://gist.github.com/ryerh/14b7c24dfd623ef8edc7\n\n\n\n","slug":"tmux","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yw0060ct8u5l7nnalp","content":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Mac中</div><div class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class=\"line\">brew install tmux</div><div class=\"line\"># Ubuntu中</div><div class=\"line\">apt-get install tmux</div></pre></td></tr></table></figure>\n<p>Session可以包含多个Window, 每个Window又可以包含多个Pane</p>\n<h4 id=\"Session操作\"><a href=\"#Session操作\" class=\"headerlink\" title=\"Session操作\"></a>Session操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tmux new -s xxx #新建session会话</div><div class=\"line\">C-b : new -s abc # 在当前session中新建一个session，并保证之前session依然存在</div><div class=\"line\">tmux a -t xxx #进入xxx会话</div><div class=\"line\">C-b ? #列出所有快捷键，按q返回</div><div class=\"line\">C-b d #当前会话，返回shell；tmux attach 重新进入之前的会话</div><div class=\"line\">C-b s #选择并切换会话，在开启多个会话时使用</div></pre></td></tr></table></figure>\n<h4 id=\"Window操作\"><a href=\"#Window操作\" class=\"headerlink\" title=\"Window操作\"></a>Window操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">C-b c 创建一个新窗口</div><div class=\"line\">C-b &amp; 关闭当前窗口</div><div class=\"line\">C-b w 列出所有的窗口选择</div><div class=\"line\">C-b 窗口号(例如窗口号为1的, 则C-b 1)</div><div class=\"line\">C-b , 重命名当前窗口，便于识别各个窗口</div></pre></td></tr></table></figure>\n<h4 id=\"Pane操作\"><a href=\"#Pane操作\" class=\"headerlink\" title=\"Pane操作\"></a>Pane操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">C-b % 横向分Terminal</div><div class=\"line\">C-b &quot; 纵向分Terminal</div><div class=\"line\">C-b 方向键 在自由选择各面板</div><div class=\"line\">C-b x 关闭当前pane</div><div class=\"line\">C-b q 显示面板编号</div></pre></td></tr></table></figure>\n<h4 id=\"配置文件-tmux-conf\"><a href=\"#配置文件-tmux-conf\" class=\"headerlink\" title=\"配置文件(~/.tmux.conf)\"></a>配置文件(~/.tmux.conf)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">#设置前缀为Ctrl + a</div><div class=\"line\">set -g prefix C-a</div><div class=\"line\"> </div><div class=\"line\">#解除Ctrl+b 与前缀的对应关系</div><div class=\"line\">unbind C-b</div><div class=\"line\"> </div><div class=\"line\">#将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息</div><div class=\"line\">bind r source-file ~/.tmux.conf \\; display &quot;~/.tmux Reloaded!&quot;</div><div class=\"line\"> </div><div class=\"line\">#window 水平分割和纵向分割</div><div class=\"line\">bind | split-window -h -c</div><div class=\"line\">bind - split-window -v -c</div><div class=\"line\"> </div><div class=\"line\">#方向移动设置</div><div class=\"line\">#up</div><div class=\"line\">bind -n C-k select-pane -U</div><div class=\"line\">#down</div><div class=\"line\">bind -n C-j select-pane -D</div><div class=\"line\">#left</div><div class=\"line\">bind -n C-h select-pane -L</div><div class=\"line\">#right</div><div class=\"line\">bind -n C-l select-pane -R</div><div class=\"line\"> </div><div class=\"line\">#设置鼠标操作</div><div class=\"line\">#set -g mouse on</div><div class=\"line\"> </div><div class=\"line\"># 设置终端类型为256色</div><div class=\"line\">#set -g default-terminal &quot;screen-256color&quot;</div><div class=\"line\"> </div><div class=\"line\"># 设置窗口分割的边框颜色</div><div class=\"line\">set -g pane-border-fg green</div><div class=\"line\">set -g pane-border-bg black</div><div class=\"line\"> </div><div class=\"line\"># 设置当前窗口分割的边框颜色</div><div class=\"line\">#set -g pane-active-border-fg white</div><div class=\"line\">#set -g pane-active-border-bg yellow</div><div class=\"line\"> </div><div class=\"line\">set -g status-bg colour236</div><div class=\"line\">set -g status-fg colour68</div><div class=\"line\"> </div><div class=\"line\">#copy-mode 将快捷键设置为vi 模式</div><div class=\"line\">setw -g mode-keys vi</div><div class=\"line\"> </div><div class=\"line\"># 设置状态栏左部宽度  默认为10</div><div class=\"line\">set -g status-left-length 35</div><div class=\"line\"># 设置状态栏左部显示内容。</div><div class=\"line\">set -g status-left &quot;#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]&quot;</div><div class=\"line\"># 设置状态栏右部宽度</div><div class=\"line\">set -g status-right-length 48</div><div class=\"line\"># 设置状态栏右部内容，这里设置为时间信息</div><div class=\"line\">set -g status-right &quot;#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep &apos;inet.*netmask.*broadcast&apos; | awk &apos;&#123;print $2&#125;&apos;)&quot;</div><div class=\"line\"># 窗口信息居中显示</div><div class=\"line\">set -g status-justify centre</div><div class=\"line\"># 设置状态栏更新时间 每60秒更新一次，默认是15秒更新</div><div class=\"line\">set -g status-interval 60</div></pre></td></tr></table></figure>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf\" target=\"_blank\" rel=\"external\">https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf</a><br><a href=\"https://github.com/wklken/k-tmux/blob/master/tmux.conf\" target=\"_blank\" rel=\"external\">https://github.com/wklken/k-tmux/blob/master/tmux.conf</a><br><a href=\"https://my.oschina.net/am313/blog/865915\" target=\"_blank\" rel=\"external\">https://my.oschina.net/am313/blog/865915</a><br><a href=\"https://gist.github.com/ryerh/14b7c24dfd623ef8edc7\" target=\"_blank\" rel=\"external\">https://gist.github.com/ryerh/14b7c24dfd623ef8edc7</a></p>\n","excerpt":"","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Mac中</div><div class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class=\"line\">brew install tmux</div><div class=\"line\"># Ubuntu中</div><div class=\"line\">apt-get install tmux</div></pre></td></tr></table></figure>\n<p>Session可以包含多个Window, 每个Window又可以包含多个Pane</p>\n<h4 id=\"Session操作\"><a href=\"#Session操作\" class=\"headerlink\" title=\"Session操作\"></a>Session操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tmux new -s xxx #新建session会话</div><div class=\"line\">C-b : new -s abc # 在当前session中新建一个session，并保证之前session依然存在</div><div class=\"line\">tmux a -t xxx #进入xxx会话</div><div class=\"line\">C-b ? #列出所有快捷键，按q返回</div><div class=\"line\">C-b d #当前会话，返回shell；tmux attach 重新进入之前的会话</div><div class=\"line\">C-b s #选择并切换会话，在开启多个会话时使用</div></pre></td></tr></table></figure>\n<h4 id=\"Window操作\"><a href=\"#Window操作\" class=\"headerlink\" title=\"Window操作\"></a>Window操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">C-b c 创建一个新窗口</div><div class=\"line\">C-b &amp; 关闭当前窗口</div><div class=\"line\">C-b w 列出所有的窗口选择</div><div class=\"line\">C-b 窗口号(例如窗口号为1的, 则C-b 1)</div><div class=\"line\">C-b , 重命名当前窗口，便于识别各个窗口</div></pre></td></tr></table></figure>\n<h4 id=\"Pane操作\"><a href=\"#Pane操作\" class=\"headerlink\" title=\"Pane操作\"></a>Pane操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">C-b % 横向分Terminal</div><div class=\"line\">C-b &quot; 纵向分Terminal</div><div class=\"line\">C-b 方向键 在自由选择各面板</div><div class=\"line\">C-b x 关闭当前pane</div><div class=\"line\">C-b q 显示面板编号</div></pre></td></tr></table></figure>\n<h4 id=\"配置文件-tmux-conf\"><a href=\"#配置文件-tmux-conf\" class=\"headerlink\" title=\"配置文件(~/.tmux.conf)\"></a>配置文件(~/.tmux.conf)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">#设置前缀为Ctrl + a</div><div class=\"line\">set -g prefix C-a</div><div class=\"line\"> </div><div class=\"line\">#解除Ctrl+b 与前缀的对应关系</div><div class=\"line\">unbind C-b</div><div class=\"line\"> </div><div class=\"line\">#将r 设置为加载配置文件，并显示&quot;reloaded!&quot;信息</div><div class=\"line\">bind r source-file ~/.tmux.conf \\; display &quot;~/.tmux Reloaded!&quot;</div><div class=\"line\"> </div><div class=\"line\">#window 水平分割和纵向分割</div><div class=\"line\">bind | split-window -h -c</div><div class=\"line\">bind - split-window -v -c</div><div class=\"line\"> </div><div class=\"line\">#方向移动设置</div><div class=\"line\">#up</div><div class=\"line\">bind -n C-k select-pane -U</div><div class=\"line\">#down</div><div class=\"line\">bind -n C-j select-pane -D</div><div class=\"line\">#left</div><div class=\"line\">bind -n C-h select-pane -L</div><div class=\"line\">#right</div><div class=\"line\">bind -n C-l select-pane -R</div><div class=\"line\"> </div><div class=\"line\">#设置鼠标操作</div><div class=\"line\">#set -g mouse on</div><div class=\"line\"> </div><div class=\"line\"># 设置终端类型为256色</div><div class=\"line\">#set -g default-terminal &quot;screen-256color&quot;</div><div class=\"line\"> </div><div class=\"line\"># 设置窗口分割的边框颜色</div><div class=\"line\">set -g pane-border-fg green</div><div class=\"line\">set -g pane-border-bg black</div><div class=\"line\"> </div><div class=\"line\"># 设置当前窗口分割的边框颜色</div><div class=\"line\">#set -g pane-active-border-fg white</div><div class=\"line\">#set -g pane-active-border-bg yellow</div><div class=\"line\"> </div><div class=\"line\">set -g status-bg colour236</div><div class=\"line\">set -g status-fg colour68</div><div class=\"line\"> </div><div class=\"line\">#copy-mode 将快捷键设置为vi 模式</div><div class=\"line\">setw -g mode-keys vi</div><div class=\"line\"> </div><div class=\"line\"># 设置状态栏左部宽度  默认为10</div><div class=\"line\">set -g status-left-length 35</div><div class=\"line\"># 设置状态栏左部显示内容。</div><div class=\"line\">set -g status-left &quot;#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]&quot;</div><div class=\"line\"># 设置状态栏右部宽度</div><div class=\"line\">set -g status-right-length 48</div><div class=\"line\"># 设置状态栏右部内容，这里设置为时间信息</div><div class=\"line\">set -g status-right &quot;#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep &apos;inet.*netmask.*broadcast&apos; | awk &apos;&#123;print $2&#125;&apos;)&quot;</div><div class=\"line\"># 窗口信息居中显示</div><div class=\"line\">set -g status-justify centre</div><div class=\"line\"># 设置状态栏更新时间 每60秒更新一次，默认是15秒更新</div><div class=\"line\">set -g status-interval 60</div></pre></td></tr></table></figure>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf\">https://github.com/liuchengxu/dotfiles/blob/master/tmux.conf</a><br><a href=\"https://github.com/wklken/k-tmux/blob/master/tmux.conf\">https://github.com/wklken/k-tmux/blob/master/tmux.conf</a><br><a href=\"https://my.oschina.net/am313/blog/865915\">https://my.oschina.net/am313/blog/865915</a><br><a href=\"https://gist.github.com/ryerh/14b7c24dfd623ef8edc7\">https://gist.github.com/ryerh/14b7c24dfd623ef8edc7</a></p>\n"},{"title":"Vue echarts可视化","date":"2019-07-03T12:00:47.000Z","_content":"### 背景\n最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据\n\n### 实现说明\n- 将图形封装为一个基础组件\n- 按照对应的数据格式，填充到option中\n- 多组数据通过for循环来完成\n\n### 效果图\n\n![](https://ttxsgoto.github.io/img/vue/echarts/bar.png)\n![](https://ttxsgoto.github.io/img/vue/echarts/line.png)\n![](https://ttxsgoto.github.io/img/vue/echarts/pie.png)\n\n### 实例\n- chart.vue组件\n```bash\n<template>\n  <div :id=\"id\" :style=\"style\"></div>\n</template>\n<script>\n  import echarts from 'echarts'\n  export default {\n    name: \"Chart\",\n    props: {\n      id: {\n        type: String\n      },\n      width: {\n        type: String,\n        default: \"100%\",\n      },\n      height: {\n        type: String,\n        default: \"300px\"\n      },\n      option: {\n        type: Object,\n        required: true,\n      }\n    },\n    computed: {\n      style() {\n        return {\n          height: this.height,\n          width: this.width\n        }\n      }\n    },\n    data() {\n        return {\n          chart: \"\"\n        };\n    },\n    methods: {\n      init() {\n        this.chart = echarts.init(document.getElementById(this.id));\n        // this.chart.showLoading();\n        this.chart.setOption(this.option);\n        // this.chart.hideLoading();\n        window.addEventListener(\"resize\", this.chart.resize);\n      }\n    },\n    mounted: function () {\n      this.init();\n    },\n    watch: {\n      option: {\n        handler(newVal, oldVal) {\n          if (this.chart) {\n            if (newVal) {\n              this.chart.setOption(newVal);\n            } else {\n              this.chart.setOption(oldVal);\n            }\n          } else {\n            this.init();\n          }\n        },\n        deep: true\n      }\n    }\n  }\n</script>\n```\n- echarts.vue\n```bash\n<style scoped lang=\"less\">\n</style>\n \n<template>\n  <div>\n    <h2>Bar Num</h2>\n      <div v-for=\"(item,index) in optionData\" :key=\"item.series.name\">\n          <Chart :id=\"item.series.name\" :option=\"item\" :width=\"item._width\" :height=\"item._height\"></Chart>\n      </div>\n    <h2>Line Total num && Num</h2>\n      <div v-for=\"(item,index) in optionAllData\" :key=\"item.title.text\">\n          <Chart :id=\"item.title.text\" :option=\"item\" :width=\"item._width\" :height=\"item._height\"></Chart>\n      </div>\n    <h2> Pie Num Chart</h2>\n    <Chart :id=\"pieOption.title.text\" :option=\"pieOption\" :width=\"pieOption._width\" :height=\"pieOption._height\"></Chart>\n  </div>\n</template>\n \n<script>\nimport Chart from './Chart.vue'\n \nexport default {\n  name: 'echarts',\n  components: {\n    Chart\n  },\n  data() {\n    return {\n      // 模拟后端返回的数据\n      dateTime: [\"20190624\", \"20190625\", \"20190626\", \"20190627\"],\n      selectObject: {\n        'TYPE01': [7, 5, 15, 10],\n        'TYPE02': [2, 5, 10, 8],\n      },\n      selectAllObject: {\n        'TYPE03':{\n          'total_num': [20, 20, 25, 30],\n          'error_num': [3, 5, 5, 10]\n        },\n        'TYPE04': {\n          'total_num': [20, 20, 25, 30],\n          'error_num': [2, 5, 15, 8]\n        }\n      },\n      optionData: [],\n      optionAllData: [],\n\n      // Pie数据\n      pieOption: {\n        title : {\n          text: 'COLOUR TYPE',\n          // subtext: '-',\n          x:'center'\n        },\n        tooltip : {\n            trigger: 'item',\n            formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n        },\n        legend: {\n            orient: 'vertical',\n            left: 'left',\n            data: ['RED','BLUE','YELLOW','GREEN']\n        },\n        // 保存为图片设置\n        toolbox: {\n          show: true,\n          feature: {\n            saveAsImage: {\n              show:true,\n              title: 'Save image',\n              excludeComponents :['toolbox'],\n              pixelRatio: 2\n            }\n          }\n        },\n        series : [{\n            name: 'COLOUR TYPE',\n            type: 'pie',\n            radius : '55%',\n            center: ['50%', '50%'],\n            data:[\n                {value:335, name:'RED'},\n                {value:310, name:'BLUE'},\n                {value:234, name:'YELLOW'},\n                {value:135, name:'GREEN'},\n            ],\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }],\n          _width: \"50%\",\n          _height: '300px'\n      },\n    }\n  },\n  created() {\n    this.initData();\n    this.initAllData();\n  },\n  methods: {\n    initData() {\n      let item_list = Object.keys(this.selectObject);\n      item_list.forEach((key)=>{\n        this.optionData.push(\n          {\n            title: {\n              text: key\n            },\n            toolbox: {\n              show: true,\n              feature: {\n                saveAsImage: {\n                  show:true,\n                  title: 'Save image',\n                  excludeComponents :['toolbox'],\n                  pixelRatio: 2\n                }\n              }\n            },\n            tooltip: {\n              trigger: 'axis',\n              axisPointer: {  // 坐标轴指示器，坐标轴触发有效\n                type: 'line', // 默认为直线，可选为：'line' | 'shadow'\n              }\n            },\n            legend: {\n              data: [key]\n            },\n            xAxis: [\n              {\n                type: 'category',\n                data: this.dateTime,\n                axisTick: {\n                  alignWithLable: true\n                }\n              },\n            ],\n            yAxis: [\n              {\n                type: \"value\"\n              }\n            ],\n            series: {\n              name: key,\n              type: \"bar\", // bar, line\n              data: this.selectObject[key],\n              barWidth: '60%'\n            },\n            _width: \"45%\",\n            _height: '240px'\n          }\n        )\n        })\n      },\n    initAllData() {\n      let item_list = Object.keys(this.selectAllObject);\n      item_list.forEach((key)=>{\n        let type_list = Object.keys(this.selectAllObject[key]);\n        this.optionAllData.push(\n          {\n            title: {\n              text: key\n            },\n            toolbox: {\n              show: true,\n              feature: {\n                saveAsImage: {\n                  show:true,\n                  title: 'Save image',\n                  excludeComponents :['toolbox'],\n                  pixelRatio: 2\n                }\n              }\n            },\n            tooltip: {\n              trigger: 'axis',\n              axisPointer: {  // 坐标轴指示器，坐标轴触发有效\n                type: 'line', // 默认为直线，可选为：'line' | 'shadow'\n              }\n            },\n            legend: {\n              data: type_list,\n            },\n            xAxis: [\n              {\n                type: 'category',\n                data: this.dateTime,\n                axisTick: {\n                  alignWithLable: true\n                }\n              },\n            ],\n            yAxis: [\n              {\n                type: \"value\"\n              }\n            ],\n            series: [\n              {\n                name: type_list[0],\n                type: \"line\", // bar, line\n                data: this.selectAllObject[key][type_list[0]],\n                barWidth: '60%'\n              },\n              {\n                name: type_list[1],\n                type: \"line\", // bar, line\n                data: this.selectAllObject[key][type_list[1]],\n                barWidth: '60%'\n              }\n            ],\n            _width: \"45%\",\n            _height: '240px'\n          }\n        )\n        })\n      },\n    }\n}\n</script>\n```\n","source":"_posts/vue-echarts.md","raw":"---\ntitle: Vue echarts可视化\ndate: 2019-07-03 20:00:47\ntags:\n  - vue\n  - echarts\ncategories:\n  - Frontend\n---\n### 背景\n最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据\n\n### 实现说明\n- 将图形封装为一个基础组件\n- 按照对应的数据格式，填充到option中\n- 多组数据通过for循环来完成\n\n### 效果图\n\n![](https://ttxsgoto.github.io/img/vue/echarts/bar.png)\n![](https://ttxsgoto.github.io/img/vue/echarts/line.png)\n![](https://ttxsgoto.github.io/img/vue/echarts/pie.png)\n\n### 实例\n- chart.vue组件\n```bash\n<template>\n  <div :id=\"id\" :style=\"style\"></div>\n</template>\n<script>\n  import echarts from 'echarts'\n  export default {\n    name: \"Chart\",\n    props: {\n      id: {\n        type: String\n      },\n      width: {\n        type: String,\n        default: \"100%\",\n      },\n      height: {\n        type: String,\n        default: \"300px\"\n      },\n      option: {\n        type: Object,\n        required: true,\n      }\n    },\n    computed: {\n      style() {\n        return {\n          height: this.height,\n          width: this.width\n        }\n      }\n    },\n    data() {\n        return {\n          chart: \"\"\n        };\n    },\n    methods: {\n      init() {\n        this.chart = echarts.init(document.getElementById(this.id));\n        // this.chart.showLoading();\n        this.chart.setOption(this.option);\n        // this.chart.hideLoading();\n        window.addEventListener(\"resize\", this.chart.resize);\n      }\n    },\n    mounted: function () {\n      this.init();\n    },\n    watch: {\n      option: {\n        handler(newVal, oldVal) {\n          if (this.chart) {\n            if (newVal) {\n              this.chart.setOption(newVal);\n            } else {\n              this.chart.setOption(oldVal);\n            }\n          } else {\n            this.init();\n          }\n        },\n        deep: true\n      }\n    }\n  }\n</script>\n```\n- echarts.vue\n```bash\n<style scoped lang=\"less\">\n</style>\n \n<template>\n  <div>\n    <h2>Bar Num</h2>\n      <div v-for=\"(item,index) in optionData\" :key=\"item.series.name\">\n          <Chart :id=\"item.series.name\" :option=\"item\" :width=\"item._width\" :height=\"item._height\"></Chart>\n      </div>\n    <h2>Line Total num && Num</h2>\n      <div v-for=\"(item,index) in optionAllData\" :key=\"item.title.text\">\n          <Chart :id=\"item.title.text\" :option=\"item\" :width=\"item._width\" :height=\"item._height\"></Chart>\n      </div>\n    <h2> Pie Num Chart</h2>\n    <Chart :id=\"pieOption.title.text\" :option=\"pieOption\" :width=\"pieOption._width\" :height=\"pieOption._height\"></Chart>\n  </div>\n</template>\n \n<script>\nimport Chart from './Chart.vue'\n \nexport default {\n  name: 'echarts',\n  components: {\n    Chart\n  },\n  data() {\n    return {\n      // 模拟后端返回的数据\n      dateTime: [\"20190624\", \"20190625\", \"20190626\", \"20190627\"],\n      selectObject: {\n        'TYPE01': [7, 5, 15, 10],\n        'TYPE02': [2, 5, 10, 8],\n      },\n      selectAllObject: {\n        'TYPE03':{\n          'total_num': [20, 20, 25, 30],\n          'error_num': [3, 5, 5, 10]\n        },\n        'TYPE04': {\n          'total_num': [20, 20, 25, 30],\n          'error_num': [2, 5, 15, 8]\n        }\n      },\n      optionData: [],\n      optionAllData: [],\n\n      // Pie数据\n      pieOption: {\n        title : {\n          text: 'COLOUR TYPE',\n          // subtext: '-',\n          x:'center'\n        },\n        tooltip : {\n            trigger: 'item',\n            formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n        },\n        legend: {\n            orient: 'vertical',\n            left: 'left',\n            data: ['RED','BLUE','YELLOW','GREEN']\n        },\n        // 保存为图片设置\n        toolbox: {\n          show: true,\n          feature: {\n            saveAsImage: {\n              show:true,\n              title: 'Save image',\n              excludeComponents :['toolbox'],\n              pixelRatio: 2\n            }\n          }\n        },\n        series : [{\n            name: 'COLOUR TYPE',\n            type: 'pie',\n            radius : '55%',\n            center: ['50%', '50%'],\n            data:[\n                {value:335, name:'RED'},\n                {value:310, name:'BLUE'},\n                {value:234, name:'YELLOW'},\n                {value:135, name:'GREEN'},\n            ],\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }],\n          _width: \"50%\",\n          _height: '300px'\n      },\n    }\n  },\n  created() {\n    this.initData();\n    this.initAllData();\n  },\n  methods: {\n    initData() {\n      let item_list = Object.keys(this.selectObject);\n      item_list.forEach((key)=>{\n        this.optionData.push(\n          {\n            title: {\n              text: key\n            },\n            toolbox: {\n              show: true,\n              feature: {\n                saveAsImage: {\n                  show:true,\n                  title: 'Save image',\n                  excludeComponents :['toolbox'],\n                  pixelRatio: 2\n                }\n              }\n            },\n            tooltip: {\n              trigger: 'axis',\n              axisPointer: {  // 坐标轴指示器，坐标轴触发有效\n                type: 'line', // 默认为直线，可选为：'line' | 'shadow'\n              }\n            },\n            legend: {\n              data: [key]\n            },\n            xAxis: [\n              {\n                type: 'category',\n                data: this.dateTime,\n                axisTick: {\n                  alignWithLable: true\n                }\n              },\n            ],\n            yAxis: [\n              {\n                type: \"value\"\n              }\n            ],\n            series: {\n              name: key,\n              type: \"bar\", // bar, line\n              data: this.selectObject[key],\n              barWidth: '60%'\n            },\n            _width: \"45%\",\n            _height: '240px'\n          }\n        )\n        })\n      },\n    initAllData() {\n      let item_list = Object.keys(this.selectAllObject);\n      item_list.forEach((key)=>{\n        let type_list = Object.keys(this.selectAllObject[key]);\n        this.optionAllData.push(\n          {\n            title: {\n              text: key\n            },\n            toolbox: {\n              show: true,\n              feature: {\n                saveAsImage: {\n                  show:true,\n                  title: 'Save image',\n                  excludeComponents :['toolbox'],\n                  pixelRatio: 2\n                }\n              }\n            },\n            tooltip: {\n              trigger: 'axis',\n              axisPointer: {  // 坐标轴指示器，坐标轴触发有效\n                type: 'line', // 默认为直线，可选为：'line' | 'shadow'\n              }\n            },\n            legend: {\n              data: type_list,\n            },\n            xAxis: [\n              {\n                type: 'category',\n                data: this.dateTime,\n                axisTick: {\n                  alignWithLable: true\n                }\n              },\n            ],\n            yAxis: [\n              {\n                type: \"value\"\n              }\n            ],\n            series: [\n              {\n                name: type_list[0],\n                type: \"line\", // bar, line\n                data: this.selectAllObject[key][type_list[0]],\n                barWidth: '60%'\n              },\n              {\n                name: type_list[1],\n                type: \"line\", // bar, line\n                data: this.selectAllObject[key][type_list[1]],\n                barWidth: '60%'\n              }\n            ],\n            _width: \"45%\",\n            _height: '240px'\n          }\n        )\n        })\n      },\n    }\n}\n</script>\n```\n","slug":"vue-echarts","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yy0063ct8u26uzfd9a","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据</p>\n<h3 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h3><ul>\n<li>将图形封装为一个基础组件</li>\n<li>按照对应的数据格式，填充到option中</li>\n<li>多组数据通过for循环来完成</li>\n</ul>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"https://ttxsgoto.github.io/img/vue/echarts/bar.png\" alt=\"\"><br><img src=\"https://ttxsgoto.github.io/img/vue/echarts/line.png\" alt=\"\"><br><img src=\"https://ttxsgoto.github.io/img/vue/echarts/pie.png\" alt=\"\"></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><ul>\n<li><p>chart.vue组件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div :id=<span class=\"string\">\"id\"</span> :style=<span class=\"string\">\"style\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  import echarts from <span class=\"string\">'echarts'</span></div><div class=\"line\">  <span class=\"built_in\">export</span> default &#123;</div><div class=\"line\">    name: <span class=\"string\">\"Chart\"</span>,</div><div class=\"line\">    props: &#123;</div><div class=\"line\">      id: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: String</div><div class=\"line\">      &#125;,</div><div class=\"line\">      width: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: String,</div><div class=\"line\">        default: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">      &#125;,</div><div class=\"line\">      height: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: String,</div><div class=\"line\">        default: <span class=\"string\">\"300px\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      option: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: Object,</div><div class=\"line\">        required: <span class=\"literal\">true</span>,</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    computed: &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">style</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">          height: this.height,</div><div class=\"line\">          width: this.width</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">data</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">          chart: <span class=\"string\">\"\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    methods: &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">init</span></span>() &#123;</div><div class=\"line\">        this.chart = echarts.init(document.getElementById(this.id));</div><div class=\"line\">        // this.chart.showLoading();</div><div class=\"line\">        this.chart.setOption(this.option);</div><div class=\"line\">        // this.chart.hideLoading();</div><div class=\"line\">        window.addEventListener(<span class=\"string\">\"resize\"</span>, this.chart.resize);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mounted: <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">      this.init();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    watch: &#123;</div><div class=\"line\">      option: &#123;</div><div class=\"line\">        handler(newVal, oldVal) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (this.chart) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (newVal) &#123;</div><div class=\"line\">              this.chart.setOption(newVal);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              this.chart.setOption(oldVal);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            this.init();</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        deep: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>echarts.vue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style scoped lang=<span class=\"string\">\"less\"</span>&gt;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &lt;h2&gt;Bar Num&lt;/h2&gt;</div><div class=\"line\">      &lt;div v-for=<span class=\"string\">\"(item,index) in optionData\"</span> :key=<span class=\"string\">\"item.series.name\"</span>&gt;</div><div class=\"line\">          &lt;Chart :id=<span class=\"string\">\"item.series.name\"</span> :option=<span class=\"string\">\"item\"</span> :width=<span class=\"string\">\"item._width\"</span> :height=<span class=\"string\">\"item._height\"</span>&gt;&lt;/Chart&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;h2&gt;Line Total num &amp;&amp; Num&lt;/h2&gt;</div><div class=\"line\">      &lt;div v-for=<span class=\"string\">\"(item,index) in optionAllData\"</span> :key=<span class=\"string\">\"item.title.text\"</span>&gt;</div><div class=\"line\">          &lt;Chart :id=<span class=\"string\">\"item.title.text\"</span> :option=<span class=\"string\">\"item\"</span> :width=<span class=\"string\">\"item._width\"</span> :height=<span class=\"string\">\"item._height\"</span>&gt;&lt;/Chart&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;h2&gt; Pie Num Chart&lt;/h2&gt;</div><div class=\"line\">    &lt;Chart :id=<span class=\"string\">\"pieOption.title.text\"</span> :option=<span class=\"string\">\"pieOption\"</span> :width=<span class=\"string\">\"pieOption._width\"</span> :height=<span class=\"string\">\"pieOption._height\"</span>&gt;&lt;/Chart&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">import Chart from <span class=\"string\">'./Chart.vue'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">export</span> default &#123;</div><div class=\"line\">  name: <span class=\"string\">'echarts'</span>,</div><div class=\"line\">  components: &#123;</div><div class=\"line\">    Chart</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">data</span></span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">      // 模拟后端返回的数据</div><div class=\"line\">      dateTime: [<span class=\"string\">\"20190624\"</span>, <span class=\"string\">\"20190625\"</span>, <span class=\"string\">\"20190626\"</span>, <span class=\"string\">\"20190627\"</span>],</div><div class=\"line\">      selectObject: &#123;</div><div class=\"line\">        <span class=\"string\">'TYPE01'</span>: [7, 5, 15, 10],</div><div class=\"line\">        <span class=\"string\">'TYPE02'</span>: [2, 5, 10, 8],</div><div class=\"line\">      &#125;,</div><div class=\"line\">      selectAllObject: &#123;</div><div class=\"line\">        <span class=\"string\">'TYPE03'</span>:&#123;</div><div class=\"line\">          <span class=\"string\">'total_num'</span>: [20, 20, 25, 30],</div><div class=\"line\">          <span class=\"string\">'error_num'</span>: [3, 5, 5, 10]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'TYPE04'</span>: &#123;</div><div class=\"line\">          <span class=\"string\">'total_num'</span>: [20, 20, 25, 30],</div><div class=\"line\">          <span class=\"string\">'error_num'</span>: [2, 5, 15, 8]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      optionData: [],</div><div class=\"line\">      optionAllData: [],</div><div class=\"line\"></div><div class=\"line\">      // Pie数据</div><div class=\"line\">      pieOption: &#123;</div><div class=\"line\">        title : &#123;</div><div class=\"line\">          text: <span class=\"string\">'COLOUR TYPE'</span>,</div><div class=\"line\">          // subtext: <span class=\"string\">'-'</span>,</div><div class=\"line\">          x:<span class=\"string\">'center'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        tooltip : &#123;</div><div class=\"line\">            trigger: <span class=\"string\">'item'</span>,</div><div class=\"line\">            formatter: <span class=\"string\">\"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        legend: &#123;</div><div class=\"line\">            orient: <span class=\"string\">'vertical'</span>,</div><div class=\"line\">            left: <span class=\"string\">'left'</span>,</div><div class=\"line\">            data: [<span class=\"string\">'RED'</span>,<span class=\"string\">'BLUE'</span>,<span class=\"string\">'YELLOW'</span>,<span class=\"string\">'GREEN'</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 保存为图片设置</div><div class=\"line\">        toolbox: &#123;</div><div class=\"line\">          show: <span class=\"literal\">true</span>,</div><div class=\"line\">          feature: &#123;</div><div class=\"line\">            saveAsImage: &#123;</div><div class=\"line\">              show:<span class=\"literal\">true</span>,</div><div class=\"line\">              title: <span class=\"string\">'Save image'</span>,</div><div class=\"line\">              excludeComponents :[<span class=\"string\">'toolbox'</span>],</div><div class=\"line\">              pixelRatio: 2</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        series : [&#123;</div><div class=\"line\">            name: <span class=\"string\">'COLOUR TYPE'</span>,</div><div class=\"line\">            <span class=\"built_in\">type</span>: <span class=\"string\">'pie'</span>,</div><div class=\"line\">            radius : <span class=\"string\">'55%'</span>,</div><div class=\"line\">            center: [<span class=\"string\">'50%'</span>, <span class=\"string\">'50%'</span>],</div><div class=\"line\">            data:[</div><div class=\"line\">                &#123;value:335, name:<span class=\"string\">'RED'</span>&#125;,</div><div class=\"line\">                &#123;value:310, name:<span class=\"string\">'BLUE'</span>&#125;,</div><div class=\"line\">                &#123;value:234, name:<span class=\"string\">'YELLOW'</span>&#125;,</div><div class=\"line\">                &#123;value:135, name:<span class=\"string\">'GREEN'</span>&#125;,</div><div class=\"line\">            ],</div><div class=\"line\">            itemStyle: &#123;</div><div class=\"line\">              emphasis: &#123;</div><div class=\"line\">                shadowBlur: 10,</div><div class=\"line\">                shadowOffsetX: 0,</div><div class=\"line\">                shadowColor: <span class=\"string\">'rgba(0, 0, 0, 0.5)'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;],</div><div class=\"line\">          _width: <span class=\"string\">\"50%\"</span>,</div><div class=\"line\">          _height: <span class=\"string\">'300px'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">created</span></span>() &#123;</div><div class=\"line\">    this.initData();</div><div class=\"line\">    this.initAllData();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">initData</span></span>() &#123;</div><div class=\"line\">      <span class=\"built_in\">let</span> item_list = Object.keys(this.selectObject);</div><div class=\"line\">      item_list.forEach((key)=&gt;&#123;</div><div class=\"line\">        this.optionData.push(</div><div class=\"line\">          &#123;</div><div class=\"line\">            title: &#123;</div><div class=\"line\">              text: key</div><div class=\"line\">            &#125;,</div><div class=\"line\">            toolbox: &#123;</div><div class=\"line\">              show: <span class=\"literal\">true</span>,</div><div class=\"line\">              feature: &#123;</div><div class=\"line\">                saveAsImage: &#123;</div><div class=\"line\">                  show:<span class=\"literal\">true</span>,</div><div class=\"line\">                  title: <span class=\"string\">'Save image'</span>,</div><div class=\"line\">                  excludeComponents :[<span class=\"string\">'toolbox'</span>],</div><div class=\"line\">                  pixelRatio: 2</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            tooltip: &#123;</div><div class=\"line\">              trigger: <span class=\"string\">'axis'</span>,</div><div class=\"line\">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'line'</span>, // 默认为直线，可选为：<span class=\"string\">'line'</span> | <span class=\"string\">'shadow'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            legend: &#123;</div><div class=\"line\">              data: [key]</div><div class=\"line\">            &#125;,</div><div class=\"line\">            xAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'category'</span>,</div><div class=\"line\">                data: this.dateTime,</div><div class=\"line\">                axisTick: &#123;</div><div class=\"line\">                  alignWithLable: <span class=\"literal\">true</span></div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;,</div><div class=\"line\">            ],</div><div class=\"line\">            yAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"value\"</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            ],</div><div class=\"line\">            series: &#123;</div><div class=\"line\">              name: key,</div><div class=\"line\">              <span class=\"built_in\">type</span>: <span class=\"string\">\"bar\"</span>, // bar, line</div><div class=\"line\">              data: this.selectObject[key],</div><div class=\"line\">              barWidth: <span class=\"string\">'60%'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            _width: <span class=\"string\">\"45%\"</span>,</div><div class=\"line\">            _height: <span class=\"string\">'240px'</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        )</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">initAllData</span></span>() &#123;</div><div class=\"line\">      <span class=\"built_in\">let</span> item_list = Object.keys(this.selectAllObject);</div><div class=\"line\">      item_list.forEach((key)=&gt;&#123;</div><div class=\"line\">        <span class=\"built_in\">let</span> type_list = Object.keys(this.selectAllObject[key]);</div><div class=\"line\">        this.optionAllData.push(</div><div class=\"line\">          &#123;</div><div class=\"line\">            title: &#123;</div><div class=\"line\">              text: key</div><div class=\"line\">            &#125;,</div><div class=\"line\">            toolbox: &#123;</div><div class=\"line\">              show: <span class=\"literal\">true</span>,</div><div class=\"line\">              feature: &#123;</div><div class=\"line\">                saveAsImage: &#123;</div><div class=\"line\">                  show:<span class=\"literal\">true</span>,</div><div class=\"line\">                  title: <span class=\"string\">'Save image'</span>,</div><div class=\"line\">                  excludeComponents :[<span class=\"string\">'toolbox'</span>],</div><div class=\"line\">                  pixelRatio: 2</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            tooltip: &#123;</div><div class=\"line\">              trigger: <span class=\"string\">'axis'</span>,</div><div class=\"line\">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'line'</span>, // 默认为直线，可选为：<span class=\"string\">'line'</span> | <span class=\"string\">'shadow'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            legend: &#123;</div><div class=\"line\">              data: type_list,</div><div class=\"line\">            &#125;,</div><div class=\"line\">            xAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'category'</span>,</div><div class=\"line\">                data: this.dateTime,</div><div class=\"line\">                axisTick: &#123;</div><div class=\"line\">                  alignWithLable: <span class=\"literal\">true</span></div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;,</div><div class=\"line\">            ],</div><div class=\"line\">            yAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"value\"</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            ],</div><div class=\"line\">            series: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                name: type_list[0],</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"line\"</span>, // bar, line</div><div class=\"line\">                data: this.selectAllObject[key][type_list[0]],</div><div class=\"line\">                barWidth: <span class=\"string\">'60%'</span></div><div class=\"line\">              &#125;,</div><div class=\"line\">              &#123;</div><div class=\"line\">                name: type_list[1],</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"line\"</span>, // bar, line</div><div class=\"line\">                data: this.selectAllObject[key][type_list[1]],</div><div class=\"line\">                barWidth: <span class=\"string\">'60%'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            ],</div><div class=\"line\">            _width: <span class=\"string\">\"45%\"</span>,</div><div class=\"line\">            _height: <span class=\"string\">'240px'</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        )</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据</p>\n<h3 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h3><ul>\n<li>将图形封装为一个基础组件</li>\n<li>按照对应的数据格式，填充到option中</li>\n<li>多组数据通过for循环来完成</li>\n</ul>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"https://ttxsgoto.github.io/img/vue/echarts/bar.png\" alt=\"\"><br><img src=\"https://ttxsgoto.github.io/img/vue/echarts/line.png\" alt=\"\"><br><img src=\"https://ttxsgoto.github.io/img/vue/echarts/pie.png\" alt=\"\"></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><ul>\n<li><p>chart.vue组件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div :id=<span class=\"string\">\"id\"</span> :style=<span class=\"string\">\"style\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  import echarts from <span class=\"string\">'echarts'</span></div><div class=\"line\">  <span class=\"built_in\">export</span> default &#123;</div><div class=\"line\">    name: <span class=\"string\">\"Chart\"</span>,</div><div class=\"line\">    props: &#123;</div><div class=\"line\">      id: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: String</div><div class=\"line\">      &#125;,</div><div class=\"line\">      width: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: String,</div><div class=\"line\">        default: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">      &#125;,</div><div class=\"line\">      height: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: String,</div><div class=\"line\">        default: <span class=\"string\">\"300px\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      option: &#123;</div><div class=\"line\">        <span class=\"built_in\">type</span>: Object,</div><div class=\"line\">        required: <span class=\"literal\">true</span>,</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    computed: &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">style</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">          height: this.height,</div><div class=\"line\">          width: this.width</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">data</span></span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">          chart: <span class=\"string\">\"\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    methods: &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"title\">init</span></span>() &#123;</div><div class=\"line\">        this.chart = echarts.init(document.getElementById(this.id));</div><div class=\"line\">        // this.chart.showLoading();</div><div class=\"line\">        this.chart.setOption(this.option);</div><div class=\"line\">        // this.chart.hideLoading();</div><div class=\"line\">        window.addEventListener(<span class=\"string\">\"resize\"</span>, this.chart.resize);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mounted: <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">      this.init();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    watch: &#123;</div><div class=\"line\">      option: &#123;</div><div class=\"line\">        handler(newVal, oldVal) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (this.chart) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (newVal) &#123;</div><div class=\"line\">              this.chart.setOption(newVal);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              this.chart.setOption(oldVal);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            this.init();</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        deep: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>echarts.vue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style scoped lang=<span class=\"string\">\"less\"</span>&gt;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &lt;h2&gt;Bar Num&lt;/h2&gt;</div><div class=\"line\">      &lt;div v-for=<span class=\"string\">\"(item,index) in optionData\"</span> :key=<span class=\"string\">\"item.series.name\"</span>&gt;</div><div class=\"line\">          &lt;Chart :id=<span class=\"string\">\"item.series.name\"</span> :option=<span class=\"string\">\"item\"</span> :width=<span class=\"string\">\"item._width\"</span> :height=<span class=\"string\">\"item._height\"</span>&gt;&lt;/Chart&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;h2&gt;Line Total num &amp;&amp; Num&lt;/h2&gt;</div><div class=\"line\">      &lt;div v-for=<span class=\"string\">\"(item,index) in optionAllData\"</span> :key=<span class=\"string\">\"item.title.text\"</span>&gt;</div><div class=\"line\">          &lt;Chart :id=<span class=\"string\">\"item.title.text\"</span> :option=<span class=\"string\">\"item\"</span> :width=<span class=\"string\">\"item._width\"</span> :height=<span class=\"string\">\"item._height\"</span>&gt;&lt;/Chart&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;h2&gt; Pie Num Chart&lt;/h2&gt;</div><div class=\"line\">    &lt;Chart :id=<span class=\"string\">\"pieOption.title.text\"</span> :option=<span class=\"string\">\"pieOption\"</span> :width=<span class=\"string\">\"pieOption._width\"</span> :height=<span class=\"string\">\"pieOption._height\"</span>&gt;&lt;/Chart&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">import Chart from <span class=\"string\">'./Chart.vue'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">export</span> default &#123;</div><div class=\"line\">  name: <span class=\"string\">'echarts'</span>,</div><div class=\"line\">  components: &#123;</div><div class=\"line\">    Chart</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">data</span></span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">      // 模拟后端返回的数据</div><div class=\"line\">      dateTime: [<span class=\"string\">\"20190624\"</span>, <span class=\"string\">\"20190625\"</span>, <span class=\"string\">\"20190626\"</span>, <span class=\"string\">\"20190627\"</span>],</div><div class=\"line\">      selectObject: &#123;</div><div class=\"line\">        <span class=\"string\">'TYPE01'</span>: [7, 5, 15, 10],</div><div class=\"line\">        <span class=\"string\">'TYPE02'</span>: [2, 5, 10, 8],</div><div class=\"line\">      &#125;,</div><div class=\"line\">      selectAllObject: &#123;</div><div class=\"line\">        <span class=\"string\">'TYPE03'</span>:&#123;</div><div class=\"line\">          <span class=\"string\">'total_num'</span>: [20, 20, 25, 30],</div><div class=\"line\">          <span class=\"string\">'error_num'</span>: [3, 5, 5, 10]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'TYPE04'</span>: &#123;</div><div class=\"line\">          <span class=\"string\">'total_num'</span>: [20, 20, 25, 30],</div><div class=\"line\">          <span class=\"string\">'error_num'</span>: [2, 5, 15, 8]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      optionData: [],</div><div class=\"line\">      optionAllData: [],</div><div class=\"line\"></div><div class=\"line\">      // Pie数据</div><div class=\"line\">      pieOption: &#123;</div><div class=\"line\">        title : &#123;</div><div class=\"line\">          text: <span class=\"string\">'COLOUR TYPE'</span>,</div><div class=\"line\">          // subtext: <span class=\"string\">'-'</span>,</div><div class=\"line\">          x:<span class=\"string\">'center'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        tooltip : &#123;</div><div class=\"line\">            trigger: <span class=\"string\">'item'</span>,</div><div class=\"line\">            formatter: <span class=\"string\">\"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        legend: &#123;</div><div class=\"line\">            orient: <span class=\"string\">'vertical'</span>,</div><div class=\"line\">            left: <span class=\"string\">'left'</span>,</div><div class=\"line\">            data: [<span class=\"string\">'RED'</span>,<span class=\"string\">'BLUE'</span>,<span class=\"string\">'YELLOW'</span>,<span class=\"string\">'GREEN'</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 保存为图片设置</div><div class=\"line\">        toolbox: &#123;</div><div class=\"line\">          show: <span class=\"literal\">true</span>,</div><div class=\"line\">          feature: &#123;</div><div class=\"line\">            saveAsImage: &#123;</div><div class=\"line\">              show:<span class=\"literal\">true</span>,</div><div class=\"line\">              title: <span class=\"string\">'Save image'</span>,</div><div class=\"line\">              excludeComponents :[<span class=\"string\">'toolbox'</span>],</div><div class=\"line\">              pixelRatio: 2</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        series : [&#123;</div><div class=\"line\">            name: <span class=\"string\">'COLOUR TYPE'</span>,</div><div class=\"line\">            <span class=\"built_in\">type</span>: <span class=\"string\">'pie'</span>,</div><div class=\"line\">            radius : <span class=\"string\">'55%'</span>,</div><div class=\"line\">            center: [<span class=\"string\">'50%'</span>, <span class=\"string\">'50%'</span>],</div><div class=\"line\">            data:[</div><div class=\"line\">                &#123;value:335, name:<span class=\"string\">'RED'</span>&#125;,</div><div class=\"line\">                &#123;value:310, name:<span class=\"string\">'BLUE'</span>&#125;,</div><div class=\"line\">                &#123;value:234, name:<span class=\"string\">'YELLOW'</span>&#125;,</div><div class=\"line\">                &#123;value:135, name:<span class=\"string\">'GREEN'</span>&#125;,</div><div class=\"line\">            ],</div><div class=\"line\">            itemStyle: &#123;</div><div class=\"line\">              emphasis: &#123;</div><div class=\"line\">                shadowBlur: 10,</div><div class=\"line\">                shadowOffsetX: 0,</div><div class=\"line\">                shadowColor: <span class=\"string\">'rgba(0, 0, 0, 0.5)'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;],</div><div class=\"line\">          _width: <span class=\"string\">\"50%\"</span>,</div><div class=\"line\">          _height: <span class=\"string\">'300px'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"title\">created</span></span>() &#123;</div><div class=\"line\">    this.initData();</div><div class=\"line\">    this.initAllData();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">initData</span></span>() &#123;</div><div class=\"line\">      <span class=\"built_in\">let</span> item_list = Object.keys(this.selectObject);</div><div class=\"line\">      item_list.forEach((key)=&gt;&#123;</div><div class=\"line\">        this.optionData.push(</div><div class=\"line\">          &#123;</div><div class=\"line\">            title: &#123;</div><div class=\"line\">              text: key</div><div class=\"line\">            &#125;,</div><div class=\"line\">            toolbox: &#123;</div><div class=\"line\">              show: <span class=\"literal\">true</span>,</div><div class=\"line\">              feature: &#123;</div><div class=\"line\">                saveAsImage: &#123;</div><div class=\"line\">                  show:<span class=\"literal\">true</span>,</div><div class=\"line\">                  title: <span class=\"string\">'Save image'</span>,</div><div class=\"line\">                  excludeComponents :[<span class=\"string\">'toolbox'</span>],</div><div class=\"line\">                  pixelRatio: 2</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            tooltip: &#123;</div><div class=\"line\">              trigger: <span class=\"string\">'axis'</span>,</div><div class=\"line\">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'line'</span>, // 默认为直线，可选为：<span class=\"string\">'line'</span> | <span class=\"string\">'shadow'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            legend: &#123;</div><div class=\"line\">              data: [key]</div><div class=\"line\">            &#125;,</div><div class=\"line\">            xAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'category'</span>,</div><div class=\"line\">                data: this.dateTime,</div><div class=\"line\">                axisTick: &#123;</div><div class=\"line\">                  alignWithLable: <span class=\"literal\">true</span></div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;,</div><div class=\"line\">            ],</div><div class=\"line\">            yAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"value\"</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            ],</div><div class=\"line\">            series: &#123;</div><div class=\"line\">              name: key,</div><div class=\"line\">              <span class=\"built_in\">type</span>: <span class=\"string\">\"bar\"</span>, // bar, line</div><div class=\"line\">              data: this.selectObject[key],</div><div class=\"line\">              barWidth: <span class=\"string\">'60%'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            _width: <span class=\"string\">\"45%\"</span>,</div><div class=\"line\">            _height: <span class=\"string\">'240px'</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        )</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">initAllData</span></span>() &#123;</div><div class=\"line\">      <span class=\"built_in\">let</span> item_list = Object.keys(this.selectAllObject);</div><div class=\"line\">      item_list.forEach((key)=&gt;&#123;</div><div class=\"line\">        <span class=\"built_in\">let</span> type_list = Object.keys(this.selectAllObject[key]);</div><div class=\"line\">        this.optionAllData.push(</div><div class=\"line\">          &#123;</div><div class=\"line\">            title: &#123;</div><div class=\"line\">              text: key</div><div class=\"line\">            &#125;,</div><div class=\"line\">            toolbox: &#123;</div><div class=\"line\">              show: <span class=\"literal\">true</span>,</div><div class=\"line\">              feature: &#123;</div><div class=\"line\">                saveAsImage: &#123;</div><div class=\"line\">                  show:<span class=\"literal\">true</span>,</div><div class=\"line\">                  title: <span class=\"string\">'Save image'</span>,</div><div class=\"line\">                  excludeComponents :[<span class=\"string\">'toolbox'</span>],</div><div class=\"line\">                  pixelRatio: 2</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            tooltip: &#123;</div><div class=\"line\">              trigger: <span class=\"string\">'axis'</span>,</div><div class=\"line\">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'line'</span>, // 默认为直线，可选为：<span class=\"string\">'line'</span> | <span class=\"string\">'shadow'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            legend: &#123;</div><div class=\"line\">              data: type_list,</div><div class=\"line\">            &#125;,</div><div class=\"line\">            xAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">'category'</span>,</div><div class=\"line\">                data: this.dateTime,</div><div class=\"line\">                axisTick: &#123;</div><div class=\"line\">                  alignWithLable: <span class=\"literal\">true</span></div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;,</div><div class=\"line\">            ],</div><div class=\"line\">            yAxis: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"value\"</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            ],</div><div class=\"line\">            series: [</div><div class=\"line\">              &#123;</div><div class=\"line\">                name: type_list[0],</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"line\"</span>, // bar, line</div><div class=\"line\">                data: this.selectAllObject[key][type_list[0]],</div><div class=\"line\">                barWidth: <span class=\"string\">'60%'</span></div><div class=\"line\">              &#125;,</div><div class=\"line\">              &#123;</div><div class=\"line\">                name: type_list[1],</div><div class=\"line\">                <span class=\"built_in\">type</span>: <span class=\"string\">\"line\"</span>, // bar, line</div><div class=\"line\">                data: this.selectAllObject[key][type_list[1]],</div><div class=\"line\">                barWidth: <span class=\"string\">'60%'</span></div><div class=\"line\">              &#125;</div><div class=\"line\">            ],</div><div class=\"line\">            _width: <span class=\"string\">\"45%\"</span>,</div><div class=\"line\">            _height: <span class=\"string\">'240px'</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        )</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Airflow架构、安装部署","date":"2019-07-26T07:50:35.000Z","_content":"\n#### 说明\nAirflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务，只需要把任务的名字和运行方式提供给Airflow作为一个task就可以， 以代码的方式来定义任务执行流程，可操作性强。\n\n#### Airflow架构\nAirflow 是建立在元数据库上的队列系统。数据库存储队列任务的状态，调度器使用这些状态来确定如何将其它任务添加到队列的优先级。此功能由四个主要组件编排\n1. 元数据库：这个数据库存储有关任务状态的信息。数据库使用在 SQLAlchemy 中实现的抽象层执行更新。该抽象层将 Airflow 剩余组件功能从数据库中干净地分离了出来。\n2. 调度器：调度器是一种使用 DAG 定义结合元数据中的任务状态来决定哪些任务需要被执行以及任务执行优先级的过程。调度器通常作为服务运行。\n3. 执行器：Excutor 是一个消息队列进程，它被绑定到调度器中，用于确定实际执行每个任务计划的工作进程。有不同类型的执行器，每个执行器都使用一个指定工作进程的类来执行任务。例如，LocalExecutor 使用与调度器进程在同一台机器上运行的并行进程执行任务。其他像 CeleryExecutor 的执行器使用存在于独立的工作机器集群中的工作进程执行任务。\n4. Workers：这些是实际执行任务逻辑的进程，由正在使用的执行器确定。\n\nAirflow 的操作建立于存储任务状态和工作流的元数据库之上（即 DAG）。调度器和执行器将任务发送至队列，让 Worker 进程执行。WebServer 运行（经常与调度器在同一台机器上运行）并与数据库通信，在 Web UI 中呈现任务状态和任务执行日志。每个有色框表明每个组件都可以独立于其他组件存在，这取决于部署配置的类型。\n\n##### 调度器操作\n```\n0. 从磁盘中加载可用的 DAG 定义（填充 DagBag）\n调度器running：\n  1. 调度器使用 DAG 定义来标识并且/或者初始化在元数据的 db 中的任何 DagRuns。\n  2. 调度器检查与活动 DagRun 关联的 TaskInstance 的状态，解析 TaskInstance 之间的任何依赖，标识需要被执行的 TaskInstance，然后将它们添加至 worker 队列，将新排列的 TaskInstance 状态更新为数据库中的“排队”状态。\n  3. 每个可用的 worker 从队列中取一个 TaskInstance，然后开始执行它，将此 TaskInstance 的数据库记录从“排队”更新为“运行”。\n  4. 一旦一个 TaskInstance 完成运行，关联的 worker 就会报告到队列并更新数据库中的 TaskInstance 的状态（例如“完成”、“失败”等）。\n  5. 调度器根据所有已完成的相关 TaskInstance 的状态更新所有活动 DagRuns 的状态（“运行”、“失败”、“完成”）。\n  6. 重复步骤 1-5\n \n```\n\n#### 进程说明\n```\nairflow webserver -p 8090   # web管理页面， 如果添加-D 以后台进程启动\nairflow scheduler           # 调度进程\nairflow worker              # worker执行进程， -q 指定启用的quene\nairflow flower              # 监控celery进程\n```\n\n#### airflow 的守护进程是如何一起工作的\n1. 调度器 scheduler 会间隔性的去轮询元数据库（Metastore）已注册的 DAG（有向无环图，可理解为作业流）是否需要被执行。如果一个具体的 DAG 根据其调度计划需要被执行，scheduler 守护进程就会先在元数据库创建一个 DagRun 的实例，并触发 DAG 内部的具体 task（任务，可以这样理解：DAG 包含一个或多个task），触发其实并不是真正的去执行任务，而是推送 task 消息至消息队列（即 broker）中，每一个 task 消息都包含此 task 的 DAG ID，task ID，及具体需要被执行的函数。如果 task 是要执行 bash 脚本，那么 task 消息还会包含 bash 脚本的代码。\n2. 用户可能在 webserver 上来控制 DAG，比如手动触发一个 DAG 去执行。当用户这样做的时候，一个DagRun 的实例将在元数据库被创建，scheduler 使同 #1 一样的方法去触发 DAG 中具体的 task 。\n3. worker 守护进程将会监听消息队列，如果有消息就从消息队列中取出消息，当取出任务消息时，它会更新元数据中的 DagRun 实例的状态为正在运行，并尝试执行 DAG 中的 task，如果 DAG 执行成功，则更新任 DagRun 实例的状态为成功，否则更新状态为失败。\n\n#### 常用CLI命令行接口\n```\nairflow test DAG_ID TASK_ID EXECUTION_DAT  # 测试任务调用是否可用\nairflow list_dags   # 查看dags\nairflow list_tasks DAG_ID  # 查看对应dag的task\nairflow clear DAG_ID    # 移除dag_id元数据库中的taskinstance记录\nairflow resetdb     # 重载数据库，删表在新创建\n```\n\n#### 部署说明\n- 两台ubuntu 16.04 ,\n- 192.168.0.10  (webserver,scheduler,worker,flower)\n-  192.168.0.11  (worker)\n\n  说明 两台服务器airflow.cfg配置要一样，对应的dags文件路径也要相同\n\n##### Environmental dependence\n```python\n# python3.5 && pip3\nsudo apt-get update\nln -s /usr/bin/python3 /usr/bin/python\nsudo apt install python3-pip -y\npip3 install --upgrade pip\n \n# Docker Install\nsudo apt-get install -y apt-transport-https ca-certificates\nsudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho \"deb https://mirrors.tuna.tsinghua.edu.cn/docker/apt/repo ubuntu-trusty main\" \\\n| sudo tee /etc/apt/sources.list.d/docker.list\nsudo apt-get update\napt-cache policy docker-engine\nsudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual\nsudo apt install -y docker.io\n```\n##### Install Airflow\n```python\npip3 install apache-airflow\npip3 install 'apache-airflow[celery]'\npip3 install -U werkzeug Jinja2\npip3 install flask_bcrypt\n \n####\n修改对应的配置(dags路径)\nexecutor = CeleryExecutor\ndemo_mode = False\nsql_alchemy_conn = mysql://root:admin@192.168.0.10:3306/airflow\nbroker_url = pyamqp://airflow:airflow@192.168.0.10:5672/airflow\nsql_alchemy_conn = mysql://root:admin@192.168.0.10:3306/airflow\n \n```\n\n##### Run Docker(Mysql && RabbitMQ)\n```python\n- docker mysql\n    docker pull mysql\n    docker run -it -d --name airflow-mysql -v /data/airflow_mysql_data/:/var/lib/mysql/ -p 3306:3306 -e MYSQL_ROOT_PASSWORD=admin --restart=always -d mysql\n \n \n- docker rabbitmq\n    docker pull rabbitmq\n    docker run -it -d -p 5672:5672 -p 15672:15672 -v /data/airflow_rabbitmq_data:/var/lib/rabbitmq --restart=always --name airflow_rabbitmq rabbitmq\n    #创建一个RabbitMQ用户\n    rabbitmqctl add_user airflow airflow\n    #创建一个RabbitMQ虚拟主机\n    rabbitmqctl add_vhost airflow\n    #将这个用户赋予admin的角色\n    rabbitmqctl set_user_tags airflow admin\n    #允许这个用户访问这个虚拟主机\n    rabbitmqctl set_permissions -p airflow airflow \".*\" \".*\" \".*\"\n    # no usage\n    rabbitmq-plugins enable rabbitmq_management\n```\n##### Supervisor管理进程\n```python\nsudo apt-get install supervisor\n \n192.168.0.10配置文件如下：\n[program:airflow_webserver]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow webserver\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_webserver.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_webserver.err\nstderr_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \n[program:airflow_scheduler]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow scheduler\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_scheduler.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_scheduler.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n[program:airflow_worker]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow worker\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_worker.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_worker.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n[program:airflow_flower]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow flower\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_flower.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_flower.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n \n192.168.0.11配置文件如下：\n[program:airflow_worker]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow worker\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_worker.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_worker.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n```\n\n#### 遇到的问题\n1. locale.Error: unsupported locale setting\n```python\n    https://stackoverflow.com/questions/14547631/python-locale-error-unsupported-locale-setting\n    export LC_ALL=\"en_US.UTF-8\"\n    export LC_CTYPE=\"en_US.UTF-8\"\n    sudo dpkg-reconfigure locales\n```\n2. ImportError: No module named 'MySQLdb'\n```python\n    sudo apt-get install libmysqlclient-dev -y\n    sudo pip3 install mysqlclient\n```\n3. airflow.exceptions.AirflowException: No module named 'flask_bcrypt'\n```python\n    pip3 install flask_bcrypt\n```\n4. UnicodeDecodeError: 'ascii' codec can't decode byte 0xe8 in position 3199: ordinal not in range(128)\n```python\n字符集问题\n/etc/default/locale \nLANG=\"zh_CN.UTF-8\"\nLANGUAGE=\"zh_CN:zh\"\nLC_ALL=\"zh_CN.UTF-8\"\n```\n\n#### 参考链接\nhttps://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a\nhttps://blog.csdn.net/youzi_yun/article/details/90141362\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/yw-airflow-install.md","raw":"---\ntitle: Airflow架构、安装部署\ndate: 2019-07-26 15:50:35\ntags:\n  - Airflow\ncategories:\n  - 运维\n---\n\n#### 说明\nAirflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务，只需要把任务的名字和运行方式提供给Airflow作为一个task就可以， 以代码的方式来定义任务执行流程，可操作性强。\n\n#### Airflow架构\nAirflow 是建立在元数据库上的队列系统。数据库存储队列任务的状态，调度器使用这些状态来确定如何将其它任务添加到队列的优先级。此功能由四个主要组件编排\n1. 元数据库：这个数据库存储有关任务状态的信息。数据库使用在 SQLAlchemy 中实现的抽象层执行更新。该抽象层将 Airflow 剩余组件功能从数据库中干净地分离了出来。\n2. 调度器：调度器是一种使用 DAG 定义结合元数据中的任务状态来决定哪些任务需要被执行以及任务执行优先级的过程。调度器通常作为服务运行。\n3. 执行器：Excutor 是一个消息队列进程，它被绑定到调度器中，用于确定实际执行每个任务计划的工作进程。有不同类型的执行器，每个执行器都使用一个指定工作进程的类来执行任务。例如，LocalExecutor 使用与调度器进程在同一台机器上运行的并行进程执行任务。其他像 CeleryExecutor 的执行器使用存在于独立的工作机器集群中的工作进程执行任务。\n4. Workers：这些是实际执行任务逻辑的进程，由正在使用的执行器确定。\n\nAirflow 的操作建立于存储任务状态和工作流的元数据库之上（即 DAG）。调度器和执行器将任务发送至队列，让 Worker 进程执行。WebServer 运行（经常与调度器在同一台机器上运行）并与数据库通信，在 Web UI 中呈现任务状态和任务执行日志。每个有色框表明每个组件都可以独立于其他组件存在，这取决于部署配置的类型。\n\n##### 调度器操作\n```\n0. 从磁盘中加载可用的 DAG 定义（填充 DagBag）\n调度器running：\n  1. 调度器使用 DAG 定义来标识并且/或者初始化在元数据的 db 中的任何 DagRuns。\n  2. 调度器检查与活动 DagRun 关联的 TaskInstance 的状态，解析 TaskInstance 之间的任何依赖，标识需要被执行的 TaskInstance，然后将它们添加至 worker 队列，将新排列的 TaskInstance 状态更新为数据库中的“排队”状态。\n  3. 每个可用的 worker 从队列中取一个 TaskInstance，然后开始执行它，将此 TaskInstance 的数据库记录从“排队”更新为“运行”。\n  4. 一旦一个 TaskInstance 完成运行，关联的 worker 就会报告到队列并更新数据库中的 TaskInstance 的状态（例如“完成”、“失败”等）。\n  5. 调度器根据所有已完成的相关 TaskInstance 的状态更新所有活动 DagRuns 的状态（“运行”、“失败”、“完成”）。\n  6. 重复步骤 1-5\n \n```\n\n#### 进程说明\n```\nairflow webserver -p 8090   # web管理页面， 如果添加-D 以后台进程启动\nairflow scheduler           # 调度进程\nairflow worker              # worker执行进程， -q 指定启用的quene\nairflow flower              # 监控celery进程\n```\n\n#### airflow 的守护进程是如何一起工作的\n1. 调度器 scheduler 会间隔性的去轮询元数据库（Metastore）已注册的 DAG（有向无环图，可理解为作业流）是否需要被执行。如果一个具体的 DAG 根据其调度计划需要被执行，scheduler 守护进程就会先在元数据库创建一个 DagRun 的实例，并触发 DAG 内部的具体 task（任务，可以这样理解：DAG 包含一个或多个task），触发其实并不是真正的去执行任务，而是推送 task 消息至消息队列（即 broker）中，每一个 task 消息都包含此 task 的 DAG ID，task ID，及具体需要被执行的函数。如果 task 是要执行 bash 脚本，那么 task 消息还会包含 bash 脚本的代码。\n2. 用户可能在 webserver 上来控制 DAG，比如手动触发一个 DAG 去执行。当用户这样做的时候，一个DagRun 的实例将在元数据库被创建，scheduler 使同 #1 一样的方法去触发 DAG 中具体的 task 。\n3. worker 守护进程将会监听消息队列，如果有消息就从消息队列中取出消息，当取出任务消息时，它会更新元数据中的 DagRun 实例的状态为正在运行，并尝试执行 DAG 中的 task，如果 DAG 执行成功，则更新任 DagRun 实例的状态为成功，否则更新状态为失败。\n\n#### 常用CLI命令行接口\n```\nairflow test DAG_ID TASK_ID EXECUTION_DAT  # 测试任务调用是否可用\nairflow list_dags   # 查看dags\nairflow list_tasks DAG_ID  # 查看对应dag的task\nairflow clear DAG_ID    # 移除dag_id元数据库中的taskinstance记录\nairflow resetdb     # 重载数据库，删表在新创建\n```\n\n#### 部署说明\n- 两台ubuntu 16.04 ,\n- 192.168.0.10  (webserver,scheduler,worker,flower)\n-  192.168.0.11  (worker)\n\n  说明 两台服务器airflow.cfg配置要一样，对应的dags文件路径也要相同\n\n##### Environmental dependence\n```python\n# python3.5 && pip3\nsudo apt-get update\nln -s /usr/bin/python3 /usr/bin/python\nsudo apt install python3-pip -y\npip3 install --upgrade pip\n \n# Docker Install\nsudo apt-get install -y apt-transport-https ca-certificates\nsudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho \"deb https://mirrors.tuna.tsinghua.edu.cn/docker/apt/repo ubuntu-trusty main\" \\\n| sudo tee /etc/apt/sources.list.d/docker.list\nsudo apt-get update\napt-cache policy docker-engine\nsudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual\nsudo apt install -y docker.io\n```\n##### Install Airflow\n```python\npip3 install apache-airflow\npip3 install 'apache-airflow[celery]'\npip3 install -U werkzeug Jinja2\npip3 install flask_bcrypt\n \n####\n修改对应的配置(dags路径)\nexecutor = CeleryExecutor\ndemo_mode = False\nsql_alchemy_conn = mysql://root:admin@192.168.0.10:3306/airflow\nbroker_url = pyamqp://airflow:airflow@192.168.0.10:5672/airflow\nsql_alchemy_conn = mysql://root:admin@192.168.0.10:3306/airflow\n \n```\n\n##### Run Docker(Mysql && RabbitMQ)\n```python\n- docker mysql\n    docker pull mysql\n    docker run -it -d --name airflow-mysql -v /data/airflow_mysql_data/:/var/lib/mysql/ -p 3306:3306 -e MYSQL_ROOT_PASSWORD=admin --restart=always -d mysql\n \n \n- docker rabbitmq\n    docker pull rabbitmq\n    docker run -it -d -p 5672:5672 -p 15672:15672 -v /data/airflow_rabbitmq_data:/var/lib/rabbitmq --restart=always --name airflow_rabbitmq rabbitmq\n    #创建一个RabbitMQ用户\n    rabbitmqctl add_user airflow airflow\n    #创建一个RabbitMQ虚拟主机\n    rabbitmqctl add_vhost airflow\n    #将这个用户赋予admin的角色\n    rabbitmqctl set_user_tags airflow admin\n    #允许这个用户访问这个虚拟主机\n    rabbitmqctl set_permissions -p airflow airflow \".*\" \".*\" \".*\"\n    # no usage\n    rabbitmq-plugins enable rabbitmq_management\n```\n##### Supervisor管理进程\n```python\nsudo apt-get install supervisor\n \n192.168.0.10配置文件如下：\n[program:airflow_webserver]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow webserver\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_webserver.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_webserver.err\nstderr_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \n[program:airflow_scheduler]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow scheduler\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_scheduler.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_scheduler.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n[program:airflow_worker]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow worker\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_worker.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_worker.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n[program:airflow_flower]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow flower\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_flower.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_flower.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n \n192.168.0.11配置文件如下：\n[program:airflow_worker]\ndirectory=/home/ubuntu/airflow/\ncommand=/usr/local/bin/airflow worker\nautostart=true\nautorestart=true\nredirect_stderr=true\nenvironment=AIRFLOW_HOME=\"/home/ubuntu/airflow\",HOME=\"/home/ubuntu/\"\nuser=ubuntu\n \nstdout_logfile=/var/log/supervisor/airflow_worker.out\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n \nstderr_logfile=/var/log/supervisor/airflow_worker.err\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\n \n```\n\n#### 遇到的问题\n1. locale.Error: unsupported locale setting\n```python\n    https://stackoverflow.com/questions/14547631/python-locale-error-unsupported-locale-setting\n    export LC_ALL=\"en_US.UTF-8\"\n    export LC_CTYPE=\"en_US.UTF-8\"\n    sudo dpkg-reconfigure locales\n```\n2. ImportError: No module named 'MySQLdb'\n```python\n    sudo apt-get install libmysqlclient-dev -y\n    sudo pip3 install mysqlclient\n```\n3. airflow.exceptions.AirflowException: No module named 'flask_bcrypt'\n```python\n    pip3 install flask_bcrypt\n```\n4. UnicodeDecodeError: 'ascii' codec can't decode byte 0xe8 in position 3199: ordinal not in range(128)\n```python\n字符集问题\n/etc/default/locale \nLANG=\"zh_CN.UTF-8\"\nLANGUAGE=\"zh_CN:zh\"\nLC_ALL=\"zh_CN.UTF-8\"\n```\n\n#### 参考链接\nhttps://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a\nhttps://blog.csdn.net/youzi_yun/article/details/90141362\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"yw-airflow-install","published":1,"updated":"2019-07-27T06:25:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5yz0066ct8u9b6bjun9","content":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Airflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务，只需要把任务的名字和运行方式提供给Airflow作为一个task就可以， 以代码的方式来定义任务执行流程，可操作性强。</p>\n<h4 id=\"Airflow架构\"><a href=\"#Airflow架构\" class=\"headerlink\" title=\"Airflow架构\"></a>Airflow架构</h4><p>Airflow 是建立在元数据库上的队列系统。数据库存储队列任务的状态，调度器使用这些状态来确定如何将其它任务添加到队列的优先级。此功能由四个主要组件编排</p>\n<ol>\n<li>元数据库：这个数据库存储有关任务状态的信息。数据库使用在 SQLAlchemy 中实现的抽象层执行更新。该抽象层将 Airflow 剩余组件功能从数据库中干净地分离了出来。</li>\n<li>调度器：调度器是一种使用 DAG 定义结合元数据中的任务状态来决定哪些任务需要被执行以及任务执行优先级的过程。调度器通常作为服务运行。</li>\n<li>执行器：Excutor 是一个消息队列进程，它被绑定到调度器中，用于确定实际执行每个任务计划的工作进程。有不同类型的执行器，每个执行器都使用一个指定工作进程的类来执行任务。例如，LocalExecutor 使用与调度器进程在同一台机器上运行的并行进程执行任务。其他像 CeleryExecutor 的执行器使用存在于独立的工作机器集群中的工作进程执行任务。</li>\n<li>Workers：这些是实际执行任务逻辑的进程，由正在使用的执行器确定。</li>\n</ol>\n<p>Airflow 的操作建立于存储任务状态和工作流的元数据库之上（即 DAG）。调度器和执行器将任务发送至队列，让 Worker 进程执行。WebServer 运行（经常与调度器在同一台机器上运行）并与数据库通信，在 Web UI 中呈现任务状态和任务执行日志。每个有色框表明每个组件都可以独立于其他组件存在，这取决于部署配置的类型。</p>\n<h5 id=\"调度器操作\"><a href=\"#调度器操作\" class=\"headerlink\" title=\"调度器操作\"></a>调度器操作</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">0. 从磁盘中加载可用的 DAG 定义（填充 DagBag）</div><div class=\"line\">调度器running：</div><div class=\"line\">  1. 调度器使用 DAG 定义来标识并且/或者初始化在元数据的 db 中的任何 DagRuns。</div><div class=\"line\">  2. 调度器检查与活动 DagRun 关联的 TaskInstance 的状态，解析 TaskInstance 之间的任何依赖，标识需要被执行的 TaskInstance，然后将它们添加至 worker 队列，将新排列的 TaskInstance 状态更新为数据库中的“排队”状态。</div><div class=\"line\">  3. 每个可用的 worker 从队列中取一个 TaskInstance，然后开始执行它，将此 TaskInstance 的数据库记录从“排队”更新为“运行”。</div><div class=\"line\">  4. 一旦一个 TaskInstance 完成运行，关联的 worker 就会报告到队列并更新数据库中的 TaskInstance 的状态（例如“完成”、“失败”等）。</div><div class=\"line\">  5. 调度器根据所有已完成的相关 TaskInstance 的状态更新所有活动 DagRuns 的状态（“运行”、“失败”、“完成”）。</div><div class=\"line\">  6. 重复步骤 1-5</div></pre></td></tr></table></figure>\n<h4 id=\"进程说明\"><a href=\"#进程说明\" class=\"headerlink\" title=\"进程说明\"></a>进程说明</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow webserver -p 8090   # web管理页面， 如果添加-D 以后台进程启动</div><div class=\"line\">airflow scheduler           # 调度进程</div><div class=\"line\">airflow worker              # worker执行进程， -q 指定启用的quene</div><div class=\"line\">airflow flower              # 监控celery进程</div></pre></td></tr></table></figure>\n<h4 id=\"airflow-的守护进程是如何一起工作的\"><a href=\"#airflow-的守护进程是如何一起工作的\" class=\"headerlink\" title=\"airflow 的守护进程是如何一起工作的\"></a>airflow 的守护进程是如何一起工作的</h4><ol>\n<li>调度器 scheduler 会间隔性的去轮询元数据库（Metastore）已注册的 DAG（有向无环图，可理解为作业流）是否需要被执行。如果一个具体的 DAG 根据其调度计划需要被执行，scheduler 守护进程就会先在元数据库创建一个 DagRun 的实例，并触发 DAG 内部的具体 task（任务，可以这样理解：DAG 包含一个或多个task），触发其实并不是真正的去执行任务，而是推送 task 消息至消息队列（即 broker）中，每一个 task 消息都包含此 task 的 DAG ID，task ID，及具体需要被执行的函数。如果 task 是要执行 bash 脚本，那么 task 消息还会包含 bash 脚本的代码。</li>\n<li>用户可能在 webserver 上来控制 DAG，比如手动触发一个 DAG 去执行。当用户这样做的时候，一个DagRun 的实例将在元数据库被创建，scheduler 使同 #1 一样的方法去触发 DAG 中具体的 task 。</li>\n<li>worker 守护进程将会监听消息队列，如果有消息就从消息队列中取出消息，当取出任务消息时，它会更新元数据中的 DagRun 实例的状态为正在运行，并尝试执行 DAG 中的 task，如果 DAG 执行成功，则更新任 DagRun 实例的状态为成功，否则更新状态为失败。</li>\n</ol>\n<h4 id=\"常用CLI命令行接口\"><a href=\"#常用CLI命令行接口\" class=\"headerlink\" title=\"常用CLI命令行接口\"></a>常用CLI命令行接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow test DAG_ID TASK_ID EXECUTION_DAT  # 测试任务调用是否可用</div><div class=\"line\">airflow list_dags   # 查看dags</div><div class=\"line\">airflow list_tasks DAG_ID  # 查看对应dag的task</div><div class=\"line\">airflow clear DAG_ID    # 移除dag_id元数据库中的taskinstance记录</div><div class=\"line\">airflow resetdb     # 重载数据库，删表在新创建</div></pre></td></tr></table></figure>\n<h4 id=\"部署说明\"><a href=\"#部署说明\" class=\"headerlink\" title=\"部署说明\"></a>部署说明</h4><ul>\n<li>两台ubuntu 16.04 ,</li>\n<li>192.168.0.10  (webserver,scheduler,worker,flower)</li>\n<li><p>192.168.0.11  (worker)</p>\n<p>说明 两台服务器airflow.cfg配置要一样，对应的dags文件路径也要相同</p>\n</li>\n</ul>\n<h5 id=\"Environmental-dependence\"><a href=\"#Environmental-dependence\" class=\"headerlink\" title=\"Environmental dependence\"></a>Environmental dependence</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python3.5 &amp;&amp; pip3</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\">ln -s /usr/bin/python3 /usr/bin/python</div><div class=\"line\">sudo apt install python3-pip -y</div><div class=\"line\">pip3 install --upgrade pip</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Docker Install</span></div><div class=\"line\">sudo apt-get install -y apt-transport-https ca-certificates</div><div class=\"line\">sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:<span class=\"number\">80</span> --recv-keys <span class=\"number\">58118E89</span>F3A912897C070ADBF76221572C52609D</div><div class=\"line\">echo <span class=\"string\">\"deb https://mirrors.tuna.tsinghua.edu.cn/docker/apt/repo ubuntu-trusty main\"</span> \\</div><div class=\"line\">| sudo tee /etc/apt/sources.list.d/docker.list</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">apt-cache policy docker-engine</div><div class=\"line\">sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual</div><div class=\"line\">sudo apt install -y docker.io</div></pre></td></tr></table></figure>\n<h5 id=\"Install-Airflow\"><a href=\"#Install-Airflow\" class=\"headerlink\" title=\"Install Airflow\"></a>Install Airflow</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install apache-airflow</div><div class=\"line\">pip3 install <span class=\"string\">'apache-airflow[celery]'</span></div><div class=\"line\">pip3 install -U werkzeug Jinja2</div><div class=\"line\">pip3 install flask_bcrypt</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">####</span></div><div class=\"line\">修改对应的配置(dags路径)</div><div class=\"line\">executor = CeleryExecutor</div><div class=\"line\">demo_mode = <span class=\"keyword\">False</span></div><div class=\"line\">sql_alchemy_conn = mysql://root:admin@<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>:<span class=\"number\">3306</span>/airflow</div><div class=\"line\">broker_url = pyamqp://airflow:airflow@<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>:<span class=\"number\">5672</span>/airflow</div><div class=\"line\">sql_alchemy_conn = mysql://root:admin@<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>:<span class=\"number\">3306</span>/airflow</div></pre></td></tr></table></figure>\n<h5 id=\"Run-Docker-Mysql-amp-amp-RabbitMQ\"><a href=\"#Run-Docker-Mysql-amp-amp-RabbitMQ\" class=\"headerlink\" title=\"Run Docker(Mysql &amp;&amp; RabbitMQ)\"></a>Run Docker(Mysql &amp;&amp; RabbitMQ)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">- docker mysql</div><div class=\"line\">    docker pull mysql</div><div class=\"line\">    docker run -it -d --name airflow-mysql -v /data/airflow_mysql_data/:/var/lib/mysql/ -p <span class=\"number\">3306</span>:<span class=\"number\">3306</span> -e MYSQL_ROOT_PASSWORD=admin --restart=always -d mysql</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">- docker rabbitmq</div><div class=\"line\">    docker pull rabbitmq</div><div class=\"line\">    docker run -it -d -p <span class=\"number\">5672</span>:<span class=\"number\">5672</span> -p <span class=\"number\">15672</span>:<span class=\"number\">15672</span> -v /data/airflow_rabbitmq_data:/var/lib/rabbitmq --restart=always --name airflow_rabbitmq rabbitmq</div><div class=\"line\">    <span class=\"comment\">#创建一个RabbitMQ用户</span></div><div class=\"line\">    rabbitmqctl add_user airflow airflow</div><div class=\"line\">    <span class=\"comment\">#创建一个RabbitMQ虚拟主机</span></div><div class=\"line\">    rabbitmqctl add_vhost airflow</div><div class=\"line\">    <span class=\"comment\">#将这个用户赋予admin的角色</span></div><div class=\"line\">    rabbitmqctl set_user_tags airflow admin</div><div class=\"line\">    <span class=\"comment\">#允许这个用户访问这个虚拟主机</span></div><div class=\"line\">    rabbitmqctl set_permissions -p airflow airflow <span class=\"string\">\".*\"</span> <span class=\"string\">\".*\"</span> <span class=\"string\">\".*\"</span></div><div class=\"line\">    <span class=\"comment\"># no usage</span></div><div class=\"line\">    rabbitmq-plugins enable rabbitmq_management</div></pre></td></tr></table></figure>\n<h5 id=\"Supervisor管理进程\"><a href=\"#Supervisor管理进程\" class=\"headerlink\" title=\"Supervisor管理进程\"></a>Supervisor管理进程</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install supervisor</div><div class=\"line\"> </div><div class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>配置文件如下：</div><div class=\"line\">[program:airflow_webserver]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow webserver</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_webserver.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_webserver.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">[program:airflow_scheduler]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow scheduler</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_scheduler.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_scheduler.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">[program:airflow_worker]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow worker</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">[program:airflow_flower]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow flower</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_flower.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_flower.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.11</span>配置文件如下：</div><div class=\"line\">[program:airflow_worker]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow worker</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ol>\n<li><p>locale.Error: unsupported locale setting</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://stackoverflow.com/questions/<span class=\"number\">14547631</span>/python-locale-error-unsupported-locale-setting</div><div class=\"line\">export LC_ALL=<span class=\"string\">\"en_US.UTF-8\"</span></div><div class=\"line\">export LC_CTYPE=<span class=\"string\">\"en_US.UTF-8\"</span></div><div class=\"line\">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>\n</li>\n<li><p>ImportError: No module named ‘MySQLdb’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libmysqlclient-dev -y</div><div class=\"line\">sudo pip3 install mysqlclient</div></pre></td></tr></table></figure>\n</li>\n<li><p>airflow.exceptions.AirflowException: No module named ‘flask_bcrypt’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install flask_bcrypt</div></pre></td></tr></table></figure>\n</li>\n<li><p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe8 in position 3199: ordinal not in range(128)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">字符集问题</div><div class=\"line\">/etc/default/locale </div><div class=\"line\">LANG=<span class=\"string\">\"zh_CN.UTF-8\"</span></div><div class=\"line\">LANGUAGE=<span class=\"string\">\"zh_CN:zh\"</span></div><div class=\"line\">LC_ALL=<span class=\"string\">\"zh_CN.UTF-8\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a\" target=\"_blank\" rel=\"external\">https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a</a><br><a href=\"https://blog.csdn.net/youzi_yun/article/details/90141362\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/youzi_yun/article/details/90141362</a></p>\n","excerpt":"","more":"<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Airflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务，只需要把任务的名字和运行方式提供给Airflow作为一个task就可以， 以代码的方式来定义任务执行流程，可操作性强。</p>\n<h4 id=\"Airflow架构\"><a href=\"#Airflow架构\" class=\"headerlink\" title=\"Airflow架构\"></a>Airflow架构</h4><p>Airflow 是建立在元数据库上的队列系统。数据库存储队列任务的状态，调度器使用这些状态来确定如何将其它任务添加到队列的优先级。此功能由四个主要组件编排</p>\n<ol>\n<li>元数据库：这个数据库存储有关任务状态的信息。数据库使用在 SQLAlchemy 中实现的抽象层执行更新。该抽象层将 Airflow 剩余组件功能从数据库中干净地分离了出来。</li>\n<li>调度器：调度器是一种使用 DAG 定义结合元数据中的任务状态来决定哪些任务需要被执行以及任务执行优先级的过程。调度器通常作为服务运行。</li>\n<li>执行器：Excutor 是一个消息队列进程，它被绑定到调度器中，用于确定实际执行每个任务计划的工作进程。有不同类型的执行器，每个执行器都使用一个指定工作进程的类来执行任务。例如，LocalExecutor 使用与调度器进程在同一台机器上运行的并行进程执行任务。其他像 CeleryExecutor 的执行器使用存在于独立的工作机器集群中的工作进程执行任务。</li>\n<li>Workers：这些是实际执行任务逻辑的进程，由正在使用的执行器确定。</li>\n</ol>\n<p>Airflow 的操作建立于存储任务状态和工作流的元数据库之上（即 DAG）。调度器和执行器将任务发送至队列，让 Worker 进程执行。WebServer 运行（经常与调度器在同一台机器上运行）并与数据库通信，在 Web UI 中呈现任务状态和任务执行日志。每个有色框表明每个组件都可以独立于其他组件存在，这取决于部署配置的类型。</p>\n<h5 id=\"调度器操作\"><a href=\"#调度器操作\" class=\"headerlink\" title=\"调度器操作\"></a>调度器操作</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">0. 从磁盘中加载可用的 DAG 定义（填充 DagBag）</div><div class=\"line\">调度器running：</div><div class=\"line\">  1. 调度器使用 DAG 定义来标识并且/或者初始化在元数据的 db 中的任何 DagRuns。</div><div class=\"line\">  2. 调度器检查与活动 DagRun 关联的 TaskInstance 的状态，解析 TaskInstance 之间的任何依赖，标识需要被执行的 TaskInstance，然后将它们添加至 worker 队列，将新排列的 TaskInstance 状态更新为数据库中的“排队”状态。</div><div class=\"line\">  3. 每个可用的 worker 从队列中取一个 TaskInstance，然后开始执行它，将此 TaskInstance 的数据库记录从“排队”更新为“运行”。</div><div class=\"line\">  4. 一旦一个 TaskInstance 完成运行，关联的 worker 就会报告到队列并更新数据库中的 TaskInstance 的状态（例如“完成”、“失败”等）。</div><div class=\"line\">  5. 调度器根据所有已完成的相关 TaskInstance 的状态更新所有活动 DagRuns 的状态（“运行”、“失败”、“完成”）。</div><div class=\"line\">  6. 重复步骤 1-5</div></pre></td></tr></table></figure>\n<h4 id=\"进程说明\"><a href=\"#进程说明\" class=\"headerlink\" title=\"进程说明\"></a>进程说明</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow webserver -p 8090   # web管理页面， 如果添加-D 以后台进程启动</div><div class=\"line\">airflow scheduler           # 调度进程</div><div class=\"line\">airflow worker              # worker执行进程， -q 指定启用的quene</div><div class=\"line\">airflow flower              # 监控celery进程</div></pre></td></tr></table></figure>\n<h4 id=\"airflow-的守护进程是如何一起工作的\"><a href=\"#airflow-的守护进程是如何一起工作的\" class=\"headerlink\" title=\"airflow 的守护进程是如何一起工作的\"></a>airflow 的守护进程是如何一起工作的</h4><ol>\n<li>调度器 scheduler 会间隔性的去轮询元数据库（Metastore）已注册的 DAG（有向无环图，可理解为作业流）是否需要被执行。如果一个具体的 DAG 根据其调度计划需要被执行，scheduler 守护进程就会先在元数据库创建一个 DagRun 的实例，并触发 DAG 内部的具体 task（任务，可以这样理解：DAG 包含一个或多个task），触发其实并不是真正的去执行任务，而是推送 task 消息至消息队列（即 broker）中，每一个 task 消息都包含此 task 的 DAG ID，task ID，及具体需要被执行的函数。如果 task 是要执行 bash 脚本，那么 task 消息还会包含 bash 脚本的代码。</li>\n<li>用户可能在 webserver 上来控制 DAG，比如手动触发一个 DAG 去执行。当用户这样做的时候，一个DagRun 的实例将在元数据库被创建，scheduler 使同 #1 一样的方法去触发 DAG 中具体的 task 。</li>\n<li>worker 守护进程将会监听消息队列，如果有消息就从消息队列中取出消息，当取出任务消息时，它会更新元数据中的 DagRun 实例的状态为正在运行，并尝试执行 DAG 中的 task，如果 DAG 执行成功，则更新任 DagRun 实例的状态为成功，否则更新状态为失败。</li>\n</ol>\n<h4 id=\"常用CLI命令行接口\"><a href=\"#常用CLI命令行接口\" class=\"headerlink\" title=\"常用CLI命令行接口\"></a>常用CLI命令行接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow test DAG_ID TASK_ID EXECUTION_DAT  # 测试任务调用是否可用</div><div class=\"line\">airflow list_dags   # 查看dags</div><div class=\"line\">airflow list_tasks DAG_ID  # 查看对应dag的task</div><div class=\"line\">airflow clear DAG_ID    # 移除dag_id元数据库中的taskinstance记录</div><div class=\"line\">airflow resetdb     # 重载数据库，删表在新创建</div></pre></td></tr></table></figure>\n<h4 id=\"部署说明\"><a href=\"#部署说明\" class=\"headerlink\" title=\"部署说明\"></a>部署说明</h4><ul>\n<li>两台ubuntu 16.04 ,</li>\n<li>192.168.0.10  (webserver,scheduler,worker,flower)</li>\n<li><p>192.168.0.11  (worker)</p>\n<p>说明 两台服务器airflow.cfg配置要一样，对应的dags文件路径也要相同</p>\n</li>\n</ul>\n<h5 id=\"Environmental-dependence\"><a href=\"#Environmental-dependence\" class=\"headerlink\" title=\"Environmental dependence\"></a>Environmental dependence</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># python3.5 &amp;&amp; pip3</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\">ln -s /usr/bin/python3 /usr/bin/python</div><div class=\"line\">sudo apt install python3-pip -y</div><div class=\"line\">pip3 install --upgrade pip</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># Docker Install</span></div><div class=\"line\">sudo apt-get install -y apt-transport-https ca-certificates</div><div class=\"line\">sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:<span class=\"number\">80</span> --recv-keys <span class=\"number\">58118E89</span>F3A912897C070ADBF76221572C52609D</div><div class=\"line\">echo <span class=\"string\">\"deb https://mirrors.tuna.tsinghua.edu.cn/docker/apt/repo ubuntu-trusty main\"</span> \\</div><div class=\"line\">| sudo tee /etc/apt/sources.list.d/docker.list</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">apt-cache policy docker-engine</div><div class=\"line\">sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual</div><div class=\"line\">sudo apt install -y docker.io</div></pre></td></tr></table></figure>\n<h5 id=\"Install-Airflow\"><a href=\"#Install-Airflow\" class=\"headerlink\" title=\"Install Airflow\"></a>Install Airflow</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install apache-airflow</div><div class=\"line\">pip3 install <span class=\"string\">'apache-airflow[celery]'</span></div><div class=\"line\">pip3 install -U werkzeug Jinja2</div><div class=\"line\">pip3 install flask_bcrypt</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">####</span></div><div class=\"line\">修改对应的配置(dags路径)</div><div class=\"line\">executor = CeleryExecutor</div><div class=\"line\">demo_mode = <span class=\"keyword\">False</span></div><div class=\"line\">sql_alchemy_conn = mysql://root:admin@<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>:<span class=\"number\">3306</span>/airflow</div><div class=\"line\">broker_url = pyamqp://airflow:airflow@<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>:<span class=\"number\">5672</span>/airflow</div><div class=\"line\">sql_alchemy_conn = mysql://root:admin@<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>:<span class=\"number\">3306</span>/airflow</div></pre></td></tr></table></figure>\n<h5 id=\"Run-Docker-Mysql-amp-amp-RabbitMQ\"><a href=\"#Run-Docker-Mysql-amp-amp-RabbitMQ\" class=\"headerlink\" title=\"Run Docker(Mysql &amp;&amp; RabbitMQ)\"></a>Run Docker(Mysql &amp;&amp; RabbitMQ)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">- docker mysql</div><div class=\"line\">    docker pull mysql</div><div class=\"line\">    docker run -it -d --name airflow-mysql -v /data/airflow_mysql_data/:/var/lib/mysql/ -p <span class=\"number\">3306</span>:<span class=\"number\">3306</span> -e MYSQL_ROOT_PASSWORD=admin --restart=always -d mysql</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">- docker rabbitmq</div><div class=\"line\">    docker pull rabbitmq</div><div class=\"line\">    docker run -it -d -p <span class=\"number\">5672</span>:<span class=\"number\">5672</span> -p <span class=\"number\">15672</span>:<span class=\"number\">15672</span> -v /data/airflow_rabbitmq_data:/var/lib/rabbitmq --restart=always --name airflow_rabbitmq rabbitmq</div><div class=\"line\">    <span class=\"comment\">#创建一个RabbitMQ用户</span></div><div class=\"line\">    rabbitmqctl add_user airflow airflow</div><div class=\"line\">    <span class=\"comment\">#创建一个RabbitMQ虚拟主机</span></div><div class=\"line\">    rabbitmqctl add_vhost airflow</div><div class=\"line\">    <span class=\"comment\">#将这个用户赋予admin的角色</span></div><div class=\"line\">    rabbitmqctl set_user_tags airflow admin</div><div class=\"line\">    <span class=\"comment\">#允许这个用户访问这个虚拟主机</span></div><div class=\"line\">    rabbitmqctl set_permissions -p airflow airflow <span class=\"string\">\".*\"</span> <span class=\"string\">\".*\"</span> <span class=\"string\">\".*\"</span></div><div class=\"line\">    <span class=\"comment\"># no usage</span></div><div class=\"line\">    rabbitmq-plugins enable rabbitmq_management</div></pre></td></tr></table></figure>\n<h5 id=\"Supervisor管理进程\"><a href=\"#Supervisor管理进程\" class=\"headerlink\" title=\"Supervisor管理进程\"></a>Supervisor管理进程</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install supervisor</div><div class=\"line\"> </div><div class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.10</span>配置文件如下：</div><div class=\"line\">[program:airflow_webserver]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow webserver</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_webserver.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_webserver.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">[program:airflow_scheduler]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow scheduler</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_scheduler.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_scheduler.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">[program:airflow_worker]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow worker</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">[program:airflow_flower]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow flower</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_flower.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_flower.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.11</span>配置文件如下：</div><div class=\"line\">[program:airflow_worker]</div><div class=\"line\">directory=/home/ubuntu/airflow/</div><div class=\"line\">command=/usr/local/bin/airflow worker</div><div class=\"line\">autostart=true</div><div class=\"line\">autorestart=true</div><div class=\"line\">redirect_stderr=true</div><div class=\"line\">environment=AIRFLOW_HOME=<span class=\"string\">\"/home/ubuntu/airflow\"</span>,HOME=<span class=\"string\">\"/home/ubuntu/\"</span></div><div class=\"line\">user=ubuntu</div><div class=\"line\"> </div><div class=\"line\">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class=\"line\">stdout_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stdout_logfile_backups=<span class=\"number\">10</span></div><div class=\"line\"> </div><div class=\"line\">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class=\"line\">stderr_logfile_maxbytes=<span class=\"number\">50</span>MB</div><div class=\"line\">stderr_logfile_backups=<span class=\"number\">10</span></div></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ol>\n<li><p>locale.Error: unsupported locale setting</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://stackoverflow.com/questions/<span class=\"number\">14547631</span>/python-locale-error-unsupported-locale-setting</div><div class=\"line\">export LC_ALL=<span class=\"string\">\"en_US.UTF-8\"</span></div><div class=\"line\">export LC_CTYPE=<span class=\"string\">\"en_US.UTF-8\"</span></div><div class=\"line\">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>\n</li>\n<li><p>ImportError: No module named ‘MySQLdb’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libmysqlclient-dev -y</div><div class=\"line\">sudo pip3 install mysqlclient</div></pre></td></tr></table></figure>\n</li>\n<li><p>airflow.exceptions.AirflowException: No module named ‘flask_bcrypt’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install flask_bcrypt</div></pre></td></tr></table></figure>\n</li>\n<li><p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe8 in position 3199: ordinal not in range(128)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">字符集问题</div><div class=\"line\">/etc/default/locale </div><div class=\"line\">LANG=<span class=\"string\">\"zh_CN.UTF-8\"</span></div><div class=\"line\">LANGUAGE=<span class=\"string\">\"zh_CN:zh\"</span></div><div class=\"line\">LC_ALL=<span class=\"string\">\"zh_CN.UTF-8\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><p><a href=\"https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a\">https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a</a><br><a href=\"https://blog.csdn.net/youzi_yun/article/details/90141362\">https://blog.csdn.net/youzi_yun/article/details/90141362</a></p>\n"},{"title":"Vue 生命周期函数","date":"2019-06-30T11:29:15.000Z","_content":"记录vue 生命周期函数的学习\n\n### 生命周期图示\n![](https://cn.vuejs.org/images/lifecycle.png)\n### 实例\n```js\n// 生命周期函数：就是vue实例在某一个时间点会自动执行的函数\nvar vm = new Vue({\n    el: \"#root\",\n    //template: \"\",\n    data: {\n        message: \"hello world\"\n    },\n    methods: {\n        handleClick: function () {\n            alert('xxxxx')\n        }\n    },\n    // 生命周期函数\n    // 在实例初始化之后，数据观测 (data observer) 和 \n    // event/watcher 事件配置之前被调用\n    beforeCreate: function () { // 自动执行\n        console.log('beforeCreate')\n    },\n    // 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：\n    // 数据观测 (data observer)，属性和方法的运算，\n    // watch/event 事件回调。\n    // 然而，挂载阶段还没开始，$el 属性目前不可见\n    created: function () { // 自动执行\n        console.log('created')\n    },\n    // 在挂载开始之前被调用：相关的 render 函数首次被调用。\n    beforeMount: function () { // 页面还没有挂载，自动执行\n        console.log(this.$el);\n        console.log('beforeMount')\n    },\n    // el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子\n    mounted: function () { // 页面挂载后，自动执行\n        console.log(this.$el);\n        console.log('mounted')\n    },\n    // 实例销毁之前调用。在这一步，实例仍然完全可用\n    beforeDestroy: function () { \n     \t// 当调用$destroy()方法时，还没有被销毁时，方法被触发\n        console.log('beforeDestroy')\n    },\n    // Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，\n    // 所有的事件监听器会被移除，所有的子实例也会被销毁\n    destroyed: function () { // 当调用$destroy()方法时，完全销毁时方法被触发\n        console.log('destroy')\n    },\n    beforeUpdate: function () { \n    \t// 数据发生改变，还没有渲染之前执行该函数, vm.message= 'test'\n        console.log('beforeUpdate')\n    },\n    updated: function () {  // 数据渲染之后执行该函数\n        console.log('updated')\n    }\n})\n```\n\n\n\n","source":"_posts/vue-life-cycle-function.md","raw":"---\ntitle: Vue 生命周期函数\ndate: 2019-06-30 19:29:15\ntags:\n  - Vue\ncategories:\n  - Frontend\n---\n记录vue 生命周期函数的学习\n\n### 生命周期图示\n![](https://cn.vuejs.org/images/lifecycle.png)\n### 实例\n```js\n// 生命周期函数：就是vue实例在某一个时间点会自动执行的函数\nvar vm = new Vue({\n    el: \"#root\",\n    //template: \"\",\n    data: {\n        message: \"hello world\"\n    },\n    methods: {\n        handleClick: function () {\n            alert('xxxxx')\n        }\n    },\n    // 生命周期函数\n    // 在实例初始化之后，数据观测 (data observer) 和 \n    // event/watcher 事件配置之前被调用\n    beforeCreate: function () { // 自动执行\n        console.log('beforeCreate')\n    },\n    // 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：\n    // 数据观测 (data observer)，属性和方法的运算，\n    // watch/event 事件回调。\n    // 然而，挂载阶段还没开始，$el 属性目前不可见\n    created: function () { // 自动执行\n        console.log('created')\n    },\n    // 在挂载开始之前被调用：相关的 render 函数首次被调用。\n    beforeMount: function () { // 页面还没有挂载，自动执行\n        console.log(this.$el);\n        console.log('beforeMount')\n    },\n    // el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子\n    mounted: function () { // 页面挂载后，自动执行\n        console.log(this.$el);\n        console.log('mounted')\n    },\n    // 实例销毁之前调用。在这一步，实例仍然完全可用\n    beforeDestroy: function () { \n     \t// 当调用$destroy()方法时，还没有被销毁时，方法被触发\n        console.log('beforeDestroy')\n    },\n    // Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，\n    // 所有的事件监听器会被移除，所有的子实例也会被销毁\n    destroyed: function () { // 当调用$destroy()方法时，完全销毁时方法被触发\n        console.log('destroy')\n    },\n    beforeUpdate: function () { \n    \t// 数据发生改变，还没有渲染之前执行该函数, vm.message= 'test'\n        console.log('beforeUpdate')\n    },\n    updated: function () {  // 数据渲染之后执行该函数\n        console.log('updated')\n    }\n})\n```\n\n\n\n","slug":"vue-life-cycle-function","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5z20069ct8uu710fw38","content":"<p>记录vue 生命周期函数的学习</p>\n<h3 id=\"生命周期图示\"><a href=\"#生命周期图示\" class=\"headerlink\" title=\"生命周期图示\"></a>生命周期图示</h3><p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"\"></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生命周期函数：就是vue实例在某一个时间点会自动执行的函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">\"#root\"</span>,</div><div class=\"line\">    <span class=\"comment\">//template: \"\",</span></div><div class=\"line\">    data: &#123;</div><div class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">\"hello world\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">handleClick</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'xxxxx'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 生命周期函数</span></div><div class=\"line\">    <span class=\"comment\">// 在实例初始化之后，数据观测 (data observer) 和 </span></div><div class=\"line\">    <span class=\"comment\">// event/watcher 事件配置之前被调用</span></div><div class=\"line\">    beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeCreate'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：</span></div><div class=\"line\">    <span class=\"comment\">// 数据观测 (data observer)，属性和方法的运算，</span></div><div class=\"line\">    <span class=\"comment\">// watch/event 事件回调。</span></div><div class=\"line\">    <span class=\"comment\">// 然而，挂载阶段还没开始，$el 属性目前不可见</span></div><div class=\"line\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'created'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 在挂载开始之前被调用：相关的 render 函数首次被调用。</span></div><div class=\"line\">    beforeMount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 页面还没有挂载，自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeMount'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</span></div><div class=\"line\">    mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 页面挂载后，自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'mounted'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 实例销毁之前调用。在这一步，实例仍然完全可用</span></div><div class=\"line\">    beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">     \t<span class=\"comment\">// 当调用$destroy()方法时，还没有被销毁时，方法被触发</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeDestroy'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，</span></div><div class=\"line\">    <span class=\"comment\">// 所有的事件监听器会被移除，所有的子实例也会被销毁</span></div><div class=\"line\">    destroyed: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 当调用$destroy()方法时，完全销毁时方法被触发</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'destroy'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">beforeUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    \t<span class=\"comment\">// 数据发生改变，还没有渲染之前执行该函数, vm.message= 'test'</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeUpdate'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">updated</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 数据渲染之后执行该函数</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'updated'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>记录vue 生命周期函数的学习</p>\n<h3 id=\"生命周期图示\"><a href=\"#生命周期图示\" class=\"headerlink\" title=\"生命周期图示\"></a>生命周期图示</h3><p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"\"></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生命周期函数：就是vue实例在某一个时间点会自动执行的函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">\"#root\"</span>,</div><div class=\"line\">    <span class=\"comment\">//template: \"\",</span></div><div class=\"line\">    data: &#123;</div><div class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">\"hello world\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">handleClick</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'xxxxx'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 生命周期函数</span></div><div class=\"line\">    <span class=\"comment\">// 在实例初始化之后，数据观测 (data observer) 和 </span></div><div class=\"line\">    <span class=\"comment\">// event/watcher 事件配置之前被调用</span></div><div class=\"line\">    beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeCreate'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：</span></div><div class=\"line\">    <span class=\"comment\">// 数据观测 (data observer)，属性和方法的运算，</span></div><div class=\"line\">    <span class=\"comment\">// watch/event 事件回调。</span></div><div class=\"line\">    <span class=\"comment\">// 然而，挂载阶段还没开始，$el 属性目前不可见</span></div><div class=\"line\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'created'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 在挂载开始之前被调用：相关的 render 函数首次被调用。</span></div><div class=\"line\">    beforeMount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 页面还没有挂载，自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeMount'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</span></div><div class=\"line\">    mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 页面挂载后，自动执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'mounted'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 实例销毁之前调用。在这一步，实例仍然完全可用</span></div><div class=\"line\">    beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">     \t<span class=\"comment\">// 当调用$destroy()方法时，还没有被销毁时，方法被触发</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeDestroy'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，</span></div><div class=\"line\">    <span class=\"comment\">// 所有的事件监听器会被移除，所有的子实例也会被销毁</span></div><div class=\"line\">    destroyed: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 当调用$destroy()方法时，完全销毁时方法被触发</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'destroy'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">beforeUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    \t<span class=\"comment\">// 数据发生改变，还没有渲染之前执行该函数, vm.message= 'test'</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeUpdate'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">updated</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 数据渲染之后执行该函数</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'updated'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"Airflow动态生成Tasks和dags","date":"2019-07-28T08:21:22.000Z","_content":"\n#### 动态生成task任务\n现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资料后发现主要使用动态生成TaskInstance实例来完成\n具体说明如下：\n- 将计算得到值使用Variables变量保存\n    ```python\n    airflow variables --set keyName value\n    ```\n- 动态生成TaskInstance实例\n- 将计算得到的列表遍历task任务\n\n实例如下\n```python\n# coding: utf8\nfrom datetime import datetime\nimport airflow\nfrom airflow.operators.python_operator import PythonOperator\nimport os\nfrom airflow.models import Variable\nimport logging\nfrom airflow import configuration as conf\nfrom airflow.models import DagBag, TaskInstance\nfrom airflow import DAG, settings\nfrom airflow.operators.bash_operator import BashOperator\n \nmain_dag_id = 'DynamicWorkflow2'\n \nargs = {\n    'owner': 'airflow',\n    'start_date': airflow.utils.dates.days_ago(2),\n    'provide_context': True\n}\n \ndag = DAG(\n    main_dag_id,\n    schedule_interval=None,\n    default_args=args)\n \n \ndef start(*args, **kwargs):\n    dynamicValue = 1\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group1\")\n    logging.info(\"Current DynamicWorkflow_Group1 value is \" + str(variableValue))\n \n    logging.info(\"Setting the Airflow Variable DynamicWorkflow_Group1 to \" + str(dynamicValue))\n    os.system('airflow variables --set DynamicWorkflow_Group1 ' + str(dynamicValue))\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group1\")\n    logging.info(\"Current DynamicWorkflow_Group1 value is \" + str(variableValue))\n    for i in range(dynamicValue):\n        resetTasksStatus('firstGroup_' + str(i))\n \n \ndef resetTasksStatus(task_id):\n    dag_folder = conf.get('core', 'DAGS_FOLDER')\n    dagbag = DagBag(dag_folder)\n    check_dag = dagbag.dags[main_dag_id]\n    session = settings.Session()\n    execution_date = datetime.now()\n    my_task = check_dag.get_task(task_id)\n    ti = TaskInstance(my_task, execution_date)\n    state = ti.current_state()\n    logging.info(\"Current state of \" + task_id + \" is \" + str(state))\n    ti.set_state(None, session)\n    state = ti.current_state()\n    logging.info(\"Updated state of \" + task_id + \" is \" + str(state))\n \n \ndef bridge1(*args, **kwargs):\n    dynamicValue = 2\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group2\")\n    logging.info(\"Current DynamicWorkflow_Group2 value is \" + str(variableValue))\n \n    logging.info(\"Setting the Airflow Variable DynamicWorkflow_Group2 to \" + str(dynamicValue))\n    os.system('airflow variables --set DynamicWorkflow_Group2 ' + str(dynamicValue))\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group2\")\n    logging.info(\"Current DynamicWorkflow_Group2 value is \" + str(variableValue))\n    for i in range(dynamicValue):\n        resetTasksStatus('secondGroup_' + str(i))\n \n \ndef bridge2(*args, **kwargs):\n    dynamicValue = 3\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group3\")\n    logging.info(\"Current DynamicWorkflow_Group3 value is \" + str(variableValue))\n \n    logging.info(\"Setting the Airflow Variable DynamicWorkflow_Group3 to \" + str(dynamicValue))\n    os.system('airflow variables --set DynamicWorkflow_Group3 ' + str(dynamicValue))\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group3\")\n    logging.info(\"Current DynamicWorkflow_Group3 value is \" + str(variableValue))\n    for i in range(dynamicValue):\n        resetTasksStatus('thirdGroup_' + str(i))\n \n \ndef end(*args, **kwargs):\n    logging.info(\"Ending\")\n \n \nstarting_task = PythonOperator(\n    task_id='start',\n    dag=dag,\n    provide_context=True,\n    python_callable=start,\n    op_args=[])\n \nbridge1_task = PythonOperator(\n    task_id='bridge1',\n    dag=dag,\n    provide_context=True,\n    python_callable=bridge1,\n    op_args=[])\n \nDynamicWorkflow_Group1 = Variable.get(\"DynamicWorkflow_Group1\")\nlogging.info(\"The current DynamicWorkflow_Group1 value is \" + str(DynamicWorkflow_Group1))\n \n \ndef doSomeWork(name, index, *args, **kwargs):\n    os.system('touch /home/user/airflow/' + str(name) + str(index) + '.txt')\n \n \nfor index in range(int(DynamicWorkflow_Group1)):\n    dynamicTask = PythonOperator(\n        task_id='firstGroup_' + str(index),\n        dag=dag,\n        provide_context=True,\n        python_callable=doSomeWork,\n        op_args=['firstGroup', index],\n    )\n \n    starting_task.set_downstream(dynamicTask)\n    dynamicTask.set_downstream(bridge1_task)\n \nbridge2_task = PythonOperator(\n    task_id='bridge2',\n    dag=dag,\n    provide_context=True,\n    python_callable=bridge2,\n    op_args=[])\n \nDynamicWorkflow_Group2 = Variable.get(\"DynamicWorkflow_Group2\")\nlogging.info(\"The current DynamicWorkflow value is \" + str(DynamicWorkflow_Group2))\n \nfor index in range(int(DynamicWorkflow_Group2)):\n    dynamicTask = PythonOperator(\n        task_id='secondGroup_' + str(index),\n        dag=dag,\n        provide_context=True,\n        python_callable=doSomeWork,\n        op_args=['secondGroup', index])\n    bridge1_task >> dynamicTask\n    dynamicTask >> bridge2_task\n \nending_task = PythonOperator(\n    task_id='end',\n    dag=dag,\n    provide_context=True,\n    python_callable=end,\n    op_args=[])\n \nDynamicWorkflow_Group3 = Variable.get(\"DynamicWorkflow_Group3\")\nlogging.info(\"The current DynamicWorkflow value is \" + str(DynamicWorkflow_Group3))\n \nfor index in range(int(DynamicWorkflow_Group3)):\n    if index < (int(DynamicWorkflow_Group3) - 1):\n        dynamicTask = PythonOperator(\n            task_id='thirdGroup_' + str(index),\n            dag=dag,\n            provide_context=True,\n            python_callable=doSomeWork,\n            op_args=['thirdGroup', index])\n    else:\n        dynamicTask = BashOperator(\n            task_id='thirdGroup_' + str(index),\n            bash_command='touch /home/user/airflow/thirdGroup_' + str(index) + '.txt',\n            dag=dag)\n \n    bridge2_task >> dynamicTask\n    dynamicTask >> ending_task\n \nstarting_task >> bridge1_task >> bridge2_task >> ending_task\n \n```\n执行前：\n![](https://ttxsgoto.github.io/img/airflow/airflow01.png)\n执行后\n![](https://ttxsgoto.github.io/img/airflow/airflow02.png)\n\n#### 动态生成Dags\n通过获取变量值，globals实现动态生成dags\n实例：\n```python\n# coding: utf-8\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime\nfrom airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\n \n \ndef create_dag(dag_id,\n               schedule,\n               dag_number,\n               default_args):\n    def hello_world_py(*args):\n        print('Hello World')\n        print('This is DAG: {}'.format(str(dag_number)))\n \n    dag = DAG(dag_id,\n              schedule_interval=schedule,\n              default_args=default_args)\n \n    with dag:\n        t1 = PythonOperator(\n            task_id='hello_world',\n            python_callable=hello_world_py,\n            dag_number=dag_number)\n        t2 = BashOperator(\n            task_id='current_date',\n            bash_command='date'\n        )\n        t1 >> t2\n \n    return dag\n \n \ndef get_api_data():\n    data = ['test01', 'test02', 'test03']\n    return data\n \n \ndef create_dags(data=None):\n    for n in range(len(data)):\n        dag_id = 'dynamic_day_{}'.format(data[n])\n        default_args = {'owner': 'airflow',\n                        'start_date': datetime(2019, 6, 1)}\n        schedule = None\n        dag_number = n\n        globals()[dag_id] = create_dag(dag_id, schedule, dag_number, default_args)\n \n \ndata = get_api_data()\ncreate_dags(data)\n \n```\n![](https://ttxsgoto.github.io/img/airflow/airflow03.png)\n#### 链接\nhttps://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/\nhttps://xbuba.com/questions/41517798\nhttps://www.astronomer.io/guides/dynamically-generating-dags/\n\n\n\n","source":"_posts/yw-airflow-dynamic-dags-tasks.md","raw":"---\ntitle: Airflow动态生成Tasks和dags\ndate: 2019-07-28 16:21:22\ntags:\n  - Airflow\ncategories:\n  - 运维\n---\n\n#### 动态生成task任务\n现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资料后发现主要使用动态生成TaskInstance实例来完成\n具体说明如下：\n- 将计算得到值使用Variables变量保存\n    ```python\n    airflow variables --set keyName value\n    ```\n- 动态生成TaskInstance实例\n- 将计算得到的列表遍历task任务\n\n实例如下\n```python\n# coding: utf8\nfrom datetime import datetime\nimport airflow\nfrom airflow.operators.python_operator import PythonOperator\nimport os\nfrom airflow.models import Variable\nimport logging\nfrom airflow import configuration as conf\nfrom airflow.models import DagBag, TaskInstance\nfrom airflow import DAG, settings\nfrom airflow.operators.bash_operator import BashOperator\n \nmain_dag_id = 'DynamicWorkflow2'\n \nargs = {\n    'owner': 'airflow',\n    'start_date': airflow.utils.dates.days_ago(2),\n    'provide_context': True\n}\n \ndag = DAG(\n    main_dag_id,\n    schedule_interval=None,\n    default_args=args)\n \n \ndef start(*args, **kwargs):\n    dynamicValue = 1\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group1\")\n    logging.info(\"Current DynamicWorkflow_Group1 value is \" + str(variableValue))\n \n    logging.info(\"Setting the Airflow Variable DynamicWorkflow_Group1 to \" + str(dynamicValue))\n    os.system('airflow variables --set DynamicWorkflow_Group1 ' + str(dynamicValue))\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group1\")\n    logging.info(\"Current DynamicWorkflow_Group1 value is \" + str(variableValue))\n    for i in range(dynamicValue):\n        resetTasksStatus('firstGroup_' + str(i))\n \n \ndef resetTasksStatus(task_id):\n    dag_folder = conf.get('core', 'DAGS_FOLDER')\n    dagbag = DagBag(dag_folder)\n    check_dag = dagbag.dags[main_dag_id]\n    session = settings.Session()\n    execution_date = datetime.now()\n    my_task = check_dag.get_task(task_id)\n    ti = TaskInstance(my_task, execution_date)\n    state = ti.current_state()\n    logging.info(\"Current state of \" + task_id + \" is \" + str(state))\n    ti.set_state(None, session)\n    state = ti.current_state()\n    logging.info(\"Updated state of \" + task_id + \" is \" + str(state))\n \n \ndef bridge1(*args, **kwargs):\n    dynamicValue = 2\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group2\")\n    logging.info(\"Current DynamicWorkflow_Group2 value is \" + str(variableValue))\n \n    logging.info(\"Setting the Airflow Variable DynamicWorkflow_Group2 to \" + str(dynamicValue))\n    os.system('airflow variables --set DynamicWorkflow_Group2 ' + str(dynamicValue))\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group2\")\n    logging.info(\"Current DynamicWorkflow_Group2 value is \" + str(variableValue))\n    for i in range(dynamicValue):\n        resetTasksStatus('secondGroup_' + str(i))\n \n \ndef bridge2(*args, **kwargs):\n    dynamicValue = 3\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group3\")\n    logging.info(\"Current DynamicWorkflow_Group3 value is \" + str(variableValue))\n \n    logging.info(\"Setting the Airflow Variable DynamicWorkflow_Group3 to \" + str(dynamicValue))\n    os.system('airflow variables --set DynamicWorkflow_Group3 ' + str(dynamicValue))\n \n    variableValue = Variable.get(\"DynamicWorkflow_Group3\")\n    logging.info(\"Current DynamicWorkflow_Group3 value is \" + str(variableValue))\n    for i in range(dynamicValue):\n        resetTasksStatus('thirdGroup_' + str(i))\n \n \ndef end(*args, **kwargs):\n    logging.info(\"Ending\")\n \n \nstarting_task = PythonOperator(\n    task_id='start',\n    dag=dag,\n    provide_context=True,\n    python_callable=start,\n    op_args=[])\n \nbridge1_task = PythonOperator(\n    task_id='bridge1',\n    dag=dag,\n    provide_context=True,\n    python_callable=bridge1,\n    op_args=[])\n \nDynamicWorkflow_Group1 = Variable.get(\"DynamicWorkflow_Group1\")\nlogging.info(\"The current DynamicWorkflow_Group1 value is \" + str(DynamicWorkflow_Group1))\n \n \ndef doSomeWork(name, index, *args, **kwargs):\n    os.system('touch /home/user/airflow/' + str(name) + str(index) + '.txt')\n \n \nfor index in range(int(DynamicWorkflow_Group1)):\n    dynamicTask = PythonOperator(\n        task_id='firstGroup_' + str(index),\n        dag=dag,\n        provide_context=True,\n        python_callable=doSomeWork,\n        op_args=['firstGroup', index],\n    )\n \n    starting_task.set_downstream(dynamicTask)\n    dynamicTask.set_downstream(bridge1_task)\n \nbridge2_task = PythonOperator(\n    task_id='bridge2',\n    dag=dag,\n    provide_context=True,\n    python_callable=bridge2,\n    op_args=[])\n \nDynamicWorkflow_Group2 = Variable.get(\"DynamicWorkflow_Group2\")\nlogging.info(\"The current DynamicWorkflow value is \" + str(DynamicWorkflow_Group2))\n \nfor index in range(int(DynamicWorkflow_Group2)):\n    dynamicTask = PythonOperator(\n        task_id='secondGroup_' + str(index),\n        dag=dag,\n        provide_context=True,\n        python_callable=doSomeWork,\n        op_args=['secondGroup', index])\n    bridge1_task >> dynamicTask\n    dynamicTask >> bridge2_task\n \nending_task = PythonOperator(\n    task_id='end',\n    dag=dag,\n    provide_context=True,\n    python_callable=end,\n    op_args=[])\n \nDynamicWorkflow_Group3 = Variable.get(\"DynamicWorkflow_Group3\")\nlogging.info(\"The current DynamicWorkflow value is \" + str(DynamicWorkflow_Group3))\n \nfor index in range(int(DynamicWorkflow_Group3)):\n    if index < (int(DynamicWorkflow_Group3) - 1):\n        dynamicTask = PythonOperator(\n            task_id='thirdGroup_' + str(index),\n            dag=dag,\n            provide_context=True,\n            python_callable=doSomeWork,\n            op_args=['thirdGroup', index])\n    else:\n        dynamicTask = BashOperator(\n            task_id='thirdGroup_' + str(index),\n            bash_command='touch /home/user/airflow/thirdGroup_' + str(index) + '.txt',\n            dag=dag)\n \n    bridge2_task >> dynamicTask\n    dynamicTask >> ending_task\n \nstarting_task >> bridge1_task >> bridge2_task >> ending_task\n \n```\n执行前：\n![](https://ttxsgoto.github.io/img/airflow/airflow01.png)\n执行后\n![](https://ttxsgoto.github.io/img/airflow/airflow02.png)\n\n#### 动态生成Dags\n通过获取变量值，globals实现动态生成dags\n实例：\n```python\n# coding: utf-8\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime\nfrom airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\n \n \ndef create_dag(dag_id,\n               schedule,\n               dag_number,\n               default_args):\n    def hello_world_py(*args):\n        print('Hello World')\n        print('This is DAG: {}'.format(str(dag_number)))\n \n    dag = DAG(dag_id,\n              schedule_interval=schedule,\n              default_args=default_args)\n \n    with dag:\n        t1 = PythonOperator(\n            task_id='hello_world',\n            python_callable=hello_world_py,\n            dag_number=dag_number)\n        t2 = BashOperator(\n            task_id='current_date',\n            bash_command='date'\n        )\n        t1 >> t2\n \n    return dag\n \n \ndef get_api_data():\n    data = ['test01', 'test02', 'test03']\n    return data\n \n \ndef create_dags(data=None):\n    for n in range(len(data)):\n        dag_id = 'dynamic_day_{}'.format(data[n])\n        default_args = {'owner': 'airflow',\n                        'start_date': datetime(2019, 6, 1)}\n        schedule = None\n        dag_number = n\n        globals()[dag_id] = create_dag(dag_id, schedule, dag_number, default_args)\n \n \ndata = get_api_data()\ncreate_dags(data)\n \n```\n![](https://ttxsgoto.github.io/img/airflow/airflow03.png)\n#### 链接\nhttps://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/\nhttps://xbuba.com/questions/41517798\nhttps://www.astronomer.io/guides/dynamically-generating-dags/\n\n\n\n","slug":"yw-airflow-dynamic-dags-tasks","published":1,"updated":"2019-07-27T06:25:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5z4006cct8u8n4jmi7t","content":"<h4 id=\"动态生成task任务\"><a href=\"#动态生成task任务\" class=\"headerlink\" title=\"动态生成task任务\"></a>动态生成task任务</h4><p>现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资料后发现主要使用动态生成TaskInstance实例来完成<br>具体说明如下：</p>\n<ul>\n<li><p>将计算得到值使用Variables变量保存</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow variables --set keyName value</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态生成TaskInstance实例</p>\n</li>\n<li>将计算得到的列表遍历task任务</li>\n</ul>\n<p>实例如下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf8</span></div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">import</span> airflow</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> configuration <span class=\"keyword\">as</span> conf</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> DagBag, TaskInstance</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG, settings</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"> </div><div class=\"line\">main_dag_id = <span class=\"string\">'DynamicWorkflow2'</span></div><div class=\"line\"> </div><div class=\"line\">args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: airflow.utils.dates.days_ago(<span class=\"number\">2</span>),</div><div class=\"line\">    <span class=\"string\">'provide_context'</span>: <span class=\"keyword\">True</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">dag = DAG(</div><div class=\"line\">    main_dag_id,</div><div class=\"line\">    schedule_interval=<span class=\"keyword\">None</span>,</div><div class=\"line\">    default_args=args)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    dynamicValue = <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group1\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group1 value is \"</span> + str(variableValue))</div><div class=\"line\"> </div><div class=\"line\">    logging.info(<span class=\"string\">\"Setting the Airflow Variable DynamicWorkflow_Group1 to \"</span> + str(dynamicValue))</div><div class=\"line\">    os.system(<span class=\"string\">'airflow variables --set DynamicWorkflow_Group1 '</span> + str(dynamicValue))</div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group1\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group1 value is \"</span> + str(variableValue))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(dynamicValue):</div><div class=\"line\">        resetTasksStatus(<span class=\"string\">'firstGroup_'</span> + str(i))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resetTasksStatus</span><span class=\"params\">(task_id)</span>:</span></div><div class=\"line\">    dag_folder = conf.get(<span class=\"string\">'core'</span>, <span class=\"string\">'DAGS_FOLDER'</span>)</div><div class=\"line\">    dagbag = DagBag(dag_folder)</div><div class=\"line\">    check_dag = dagbag.dags[main_dag_id]</div><div class=\"line\">    session = settings.Session()</div><div class=\"line\">    execution_date = datetime.now()</div><div class=\"line\">    my_task = check_dag.get_task(task_id)</div><div class=\"line\">    ti = TaskInstance(my_task, execution_date)</div><div class=\"line\">    state = ti.current_state()</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current state of \"</span> + task_id + <span class=\"string\">\" is \"</span> + str(state))</div><div class=\"line\">    ti.set_state(<span class=\"keyword\">None</span>, session)</div><div class=\"line\">    state = ti.current_state()</div><div class=\"line\">    logging.info(<span class=\"string\">\"Updated state of \"</span> + task_id + <span class=\"string\">\" is \"</span> + str(state))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bridge1</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    dynamicValue = <span class=\"number\">2</span></div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group2\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group2 value is \"</span> + str(variableValue))</div><div class=\"line\"> </div><div class=\"line\">    logging.info(<span class=\"string\">\"Setting the Airflow Variable DynamicWorkflow_Group2 to \"</span> + str(dynamicValue))</div><div class=\"line\">    os.system(<span class=\"string\">'airflow variables --set DynamicWorkflow_Group2 '</span> + str(dynamicValue))</div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group2\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group2 value is \"</span> + str(variableValue))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(dynamicValue):</div><div class=\"line\">        resetTasksStatus(<span class=\"string\">'secondGroup_'</span> + str(i))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bridge2</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    dynamicValue = <span class=\"number\">3</span></div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group3\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group3 value is \"</span> + str(variableValue))</div><div class=\"line\"> </div><div class=\"line\">    logging.info(<span class=\"string\">\"Setting the Airflow Variable DynamicWorkflow_Group3 to \"</span> + str(dynamicValue))</div><div class=\"line\">    os.system(<span class=\"string\">'airflow variables --set DynamicWorkflow_Group3 '</span> + str(dynamicValue))</div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group3\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group3 value is \"</span> + str(variableValue))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(dynamicValue):</div><div class=\"line\">        resetTasksStatus(<span class=\"string\">'thirdGroup_'</span> + str(i))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    logging.info(<span class=\"string\">\"Ending\"</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">starting_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'start'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=start,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">bridge1_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'bridge1'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=bridge1,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">DynamicWorkflow_Group1 = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group1\"</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"The current DynamicWorkflow_Group1 value is \"</span> + str(DynamicWorkflow_Group1))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doSomeWork</span><span class=\"params\">(name, index, *args, **kwargs)</span>:</span></div><div class=\"line\">    os.system(<span class=\"string\">'touch /home/user/airflow/'</span> + str(name) + str(index) + <span class=\"string\">'.txt'</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(int(DynamicWorkflow_Group1)):</div><div class=\"line\">    dynamicTask = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'firstGroup_'</span> + str(index),</div><div class=\"line\">        dag=dag,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">        python_callable=doSomeWork,</div><div class=\"line\">        op_args=[<span class=\"string\">'firstGroup'</span>, index],</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    starting_task.set_downstream(dynamicTask)</div><div class=\"line\">    dynamicTask.set_downstream(bridge1_task)</div><div class=\"line\"> </div><div class=\"line\">bridge2_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'bridge2'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=bridge2,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">DynamicWorkflow_Group2 = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group2\"</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"The current DynamicWorkflow value is \"</span> + str(DynamicWorkflow_Group2))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(int(DynamicWorkflow_Group2)):</div><div class=\"line\">    dynamicTask = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'secondGroup_'</span> + str(index),</div><div class=\"line\">        dag=dag,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">        python_callable=doSomeWork,</div><div class=\"line\">        op_args=[<span class=\"string\">'secondGroup'</span>, index])</div><div class=\"line\">    bridge1_task &gt;&gt; dynamicTask</div><div class=\"line\">    dynamicTask &gt;&gt; bridge2_task</div><div class=\"line\"> </div><div class=\"line\">ending_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'end'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=end,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">DynamicWorkflow_Group3 = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group3\"</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"The current DynamicWorkflow value is \"</span> + str(DynamicWorkflow_Group3))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(int(DynamicWorkflow_Group3)):</div><div class=\"line\">    <span class=\"keyword\">if</span> index &lt; (int(DynamicWorkflow_Group3) - <span class=\"number\">1</span>):</div><div class=\"line\">        dynamicTask = PythonOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'thirdGroup_'</span> + str(index),</div><div class=\"line\">            dag=dag,</div><div class=\"line\">            provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">            python_callable=doSomeWork,</div><div class=\"line\">            op_args=[<span class=\"string\">'thirdGroup'</span>, index])</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        dynamicTask = BashOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'thirdGroup_'</span> + str(index),</div><div class=\"line\">            bash_command=<span class=\"string\">'touch /home/user/airflow/thirdGroup_'</span> + str(index) + <span class=\"string\">'.txt'</span>,</div><div class=\"line\">            dag=dag)</div><div class=\"line\"> </div><div class=\"line\">    bridge2_task &gt;&gt; dynamicTask</div><div class=\"line\">    dynamicTask &gt;&gt; ending_task</div><div class=\"line\"> </div><div class=\"line\">starting_task &gt;&gt; bridge1_task &gt;&gt; bridge2_task &gt;&gt; ending_task</div></pre></td></tr></table></figure></p>\n<p>执行前：<br><img src=\"https://ttxsgoto.github.io/img/airflow/airflow01.png\" alt=\"\"><br>执行后<br><img src=\"https://ttxsgoto.github.io/img/airflow/airflow02.png\" alt=\"\"></p>\n<h4 id=\"动态生成Dags\"><a href=\"#动态生成Dags\" class=\"headerlink\" title=\"动态生成Dags\"></a>动态生成Dags</h4><p>通过获取变量值，globals实现动态生成dags<br>实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dag</span><span class=\"params\">(dag_id,</span></span></div><div class=\"line\">               schedule,</div><div class=\"line\">               dag_number,</div><div class=\"line\">               default_args):</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world_py</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        print(<span class=\"string\">'This is DAG: &#123;&#125;'</span>.format(str(dag_number)))</div><div class=\"line\"> </div><div class=\"line\">    dag = DAG(dag_id,</div><div class=\"line\">              schedule_interval=schedule,</div><div class=\"line\">              default_args=default_args)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">with</span> dag:</div><div class=\"line\">        t1 = PythonOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'hello_world'</span>,</div><div class=\"line\">            python_callable=hello_world_py,</div><div class=\"line\">            dag_number=dag_number)</div><div class=\"line\">        t2 = BashOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'current_date'</span>,</div><div class=\"line\">            bash_command=<span class=\"string\">'date'</span></div><div class=\"line\">        )</div><div class=\"line\">        t1 &gt;&gt; t2</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> dag</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_api_data</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = [<span class=\"string\">'test01'</span>, <span class=\"string\">'test02'</span>, <span class=\"string\">'test03'</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> data</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dags</span><span class=\"params\">(data=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(len(data)):</div><div class=\"line\">        dag_id = <span class=\"string\">'dynamic_day_&#123;&#125;'</span>.format(data[n])</div><div class=\"line\">        default_args = &#123;<span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">                        <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>)&#125;</div><div class=\"line\">        schedule = <span class=\"keyword\">None</span></div><div class=\"line\">        dag_number = n</div><div class=\"line\">        globals()[dag_id] = create_dag(dag_id, schedule, dag_number, default_args)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">data = get_api_data()</div><div class=\"line\">create_dags(data)</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ttxsgoto.github.io/img/airflow/airflow03.png\" alt=\"\"></p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p><a href=\"https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/\" target=\"_blank\" rel=\"external\">https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/</a><br><a href=\"https://xbuba.com/questions/41517798\" target=\"_blank\" rel=\"external\">https://xbuba.com/questions/41517798</a><br><a href=\"https://www.astronomer.io/guides/dynamically-generating-dags/\" target=\"_blank\" rel=\"external\">https://www.astronomer.io/guides/dynamically-generating-dags/</a></p>\n","excerpt":"","more":"<h4 id=\"动态生成task任务\"><a href=\"#动态生成task任务\" class=\"headerlink\" title=\"动态生成task任务\"></a>动态生成task任务</h4><p>现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资料后发现主要使用动态生成TaskInstance实例来完成<br>具体说明如下：</p>\n<ul>\n<li><p>将计算得到值使用Variables变量保存</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airflow variables --set keyName value</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态生成TaskInstance实例</p>\n</li>\n<li>将计算得到的列表遍历task任务</li>\n</ul>\n<p>实例如下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf8</span></div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">import</span> airflow</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> configuration <span class=\"keyword\">as</span> conf</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> DagBag, TaskInstance</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG, settings</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"> </div><div class=\"line\">main_dag_id = <span class=\"string\">'DynamicWorkflow2'</span></div><div class=\"line\"> </div><div class=\"line\">args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: airflow.utils.dates.days_ago(<span class=\"number\">2</span>),</div><div class=\"line\">    <span class=\"string\">'provide_context'</span>: <span class=\"keyword\">True</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">dag = DAG(</div><div class=\"line\">    main_dag_id,</div><div class=\"line\">    schedule_interval=<span class=\"keyword\">None</span>,</div><div class=\"line\">    default_args=args)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    dynamicValue = <span class=\"number\">1</span></div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group1\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group1 value is \"</span> + str(variableValue))</div><div class=\"line\"> </div><div class=\"line\">    logging.info(<span class=\"string\">\"Setting the Airflow Variable DynamicWorkflow_Group1 to \"</span> + str(dynamicValue))</div><div class=\"line\">    os.system(<span class=\"string\">'airflow variables --set DynamicWorkflow_Group1 '</span> + str(dynamicValue))</div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group1\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group1 value is \"</span> + str(variableValue))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(dynamicValue):</div><div class=\"line\">        resetTasksStatus(<span class=\"string\">'firstGroup_'</span> + str(i))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resetTasksStatus</span><span class=\"params\">(task_id)</span>:</span></div><div class=\"line\">    dag_folder = conf.get(<span class=\"string\">'core'</span>, <span class=\"string\">'DAGS_FOLDER'</span>)</div><div class=\"line\">    dagbag = DagBag(dag_folder)</div><div class=\"line\">    check_dag = dagbag.dags[main_dag_id]</div><div class=\"line\">    session = settings.Session()</div><div class=\"line\">    execution_date = datetime.now()</div><div class=\"line\">    my_task = check_dag.get_task(task_id)</div><div class=\"line\">    ti = TaskInstance(my_task, execution_date)</div><div class=\"line\">    state = ti.current_state()</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current state of \"</span> + task_id + <span class=\"string\">\" is \"</span> + str(state))</div><div class=\"line\">    ti.set_state(<span class=\"keyword\">None</span>, session)</div><div class=\"line\">    state = ti.current_state()</div><div class=\"line\">    logging.info(<span class=\"string\">\"Updated state of \"</span> + task_id + <span class=\"string\">\" is \"</span> + str(state))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bridge1</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    dynamicValue = <span class=\"number\">2</span></div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group2\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group2 value is \"</span> + str(variableValue))</div><div class=\"line\"> </div><div class=\"line\">    logging.info(<span class=\"string\">\"Setting the Airflow Variable DynamicWorkflow_Group2 to \"</span> + str(dynamicValue))</div><div class=\"line\">    os.system(<span class=\"string\">'airflow variables --set DynamicWorkflow_Group2 '</span> + str(dynamicValue))</div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group2\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group2 value is \"</span> + str(variableValue))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(dynamicValue):</div><div class=\"line\">        resetTasksStatus(<span class=\"string\">'secondGroup_'</span> + str(i))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bridge2</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    dynamicValue = <span class=\"number\">3</span></div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group3\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group3 value is \"</span> + str(variableValue))</div><div class=\"line\"> </div><div class=\"line\">    logging.info(<span class=\"string\">\"Setting the Airflow Variable DynamicWorkflow_Group3 to \"</span> + str(dynamicValue))</div><div class=\"line\">    os.system(<span class=\"string\">'airflow variables --set DynamicWorkflow_Group3 '</span> + str(dynamicValue))</div><div class=\"line\"> </div><div class=\"line\">    variableValue = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group3\"</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">\"Current DynamicWorkflow_Group3 value is \"</span> + str(variableValue))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(dynamicValue):</div><div class=\"line\">        resetTasksStatus(<span class=\"string\">'thirdGroup_'</span> + str(i))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    logging.info(<span class=\"string\">\"Ending\"</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">starting_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'start'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=start,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">bridge1_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'bridge1'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=bridge1,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">DynamicWorkflow_Group1 = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group1\"</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"The current DynamicWorkflow_Group1 value is \"</span> + str(DynamicWorkflow_Group1))</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doSomeWork</span><span class=\"params\">(name, index, *args, **kwargs)</span>:</span></div><div class=\"line\">    os.system(<span class=\"string\">'touch /home/user/airflow/'</span> + str(name) + str(index) + <span class=\"string\">'.txt'</span>)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(int(DynamicWorkflow_Group1)):</div><div class=\"line\">    dynamicTask = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'firstGroup_'</span> + str(index),</div><div class=\"line\">        dag=dag,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">        python_callable=doSomeWork,</div><div class=\"line\">        op_args=[<span class=\"string\">'firstGroup'</span>, index],</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    starting_task.set_downstream(dynamicTask)</div><div class=\"line\">    dynamicTask.set_downstream(bridge1_task)</div><div class=\"line\"> </div><div class=\"line\">bridge2_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'bridge2'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=bridge2,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">DynamicWorkflow_Group2 = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group2\"</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"The current DynamicWorkflow value is \"</span> + str(DynamicWorkflow_Group2))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(int(DynamicWorkflow_Group2)):</div><div class=\"line\">    dynamicTask = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'secondGroup_'</span> + str(index),</div><div class=\"line\">        dag=dag,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">        python_callable=doSomeWork,</div><div class=\"line\">        op_args=[<span class=\"string\">'secondGroup'</span>, index])</div><div class=\"line\">    bridge1_task &gt;&gt; dynamicTask</div><div class=\"line\">    dynamicTask &gt;&gt; bridge2_task</div><div class=\"line\"> </div><div class=\"line\">ending_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'end'</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=end,</div><div class=\"line\">    op_args=[])</div><div class=\"line\"> </div><div class=\"line\">DynamicWorkflow_Group3 = Variable.get(<span class=\"string\">\"DynamicWorkflow_Group3\"</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"The current DynamicWorkflow value is \"</span> + str(DynamicWorkflow_Group3))</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(int(DynamicWorkflow_Group3)):</div><div class=\"line\">    <span class=\"keyword\">if</span> index &lt; (int(DynamicWorkflow_Group3) - <span class=\"number\">1</span>):</div><div class=\"line\">        dynamicTask = PythonOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'thirdGroup_'</span> + str(index),</div><div class=\"line\">            dag=dag,</div><div class=\"line\">            provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">            python_callable=doSomeWork,</div><div class=\"line\">            op_args=[<span class=\"string\">'thirdGroup'</span>, index])</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        dynamicTask = BashOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'thirdGroup_'</span> + str(index),</div><div class=\"line\">            bash_command=<span class=\"string\">'touch /home/user/airflow/thirdGroup_'</span> + str(index) + <span class=\"string\">'.txt'</span>,</div><div class=\"line\">            dag=dag)</div><div class=\"line\"> </div><div class=\"line\">    bridge2_task &gt;&gt; dynamicTask</div><div class=\"line\">    dynamicTask &gt;&gt; ending_task</div><div class=\"line\"> </div><div class=\"line\">starting_task &gt;&gt; bridge1_task &gt;&gt; bridge2_task &gt;&gt; ending_task</div></pre></td></tr></table></figure></p>\n<p>执行前：<br><img src=\"https://ttxsgoto.github.io/img/airflow/airflow01.png\" alt=\"\"><br>执行后<br><img src=\"https://ttxsgoto.github.io/img/airflow/airflow02.png\" alt=\"\"></p>\n<h4 id=\"动态生成Dags\"><a href=\"#动态生成Dags\" class=\"headerlink\" title=\"动态生成Dags\"></a>动态生成Dags</h4><p>通过获取变量值，globals实现动态生成dags<br>实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dag</span><span class=\"params\">(dag_id,</div><div class=\"line\">               schedule,</div><div class=\"line\">               dag_number,</div><div class=\"line\">               default_args)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world_py</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        print(<span class=\"string\">'This is DAG: &#123;&#125;'</span>.format(str(dag_number)))</div><div class=\"line\"> </div><div class=\"line\">    dag = DAG(dag_id,</div><div class=\"line\">              schedule_interval=schedule,</div><div class=\"line\">              default_args=default_args)</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">with</span> dag:</div><div class=\"line\">        t1 = PythonOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'hello_world'</span>,</div><div class=\"line\">            python_callable=hello_world_py,</div><div class=\"line\">            dag_number=dag_number)</div><div class=\"line\">        t2 = BashOperator(</div><div class=\"line\">            task_id=<span class=\"string\">'current_date'</span>,</div><div class=\"line\">            bash_command=<span class=\"string\">'date'</span></div><div class=\"line\">        )</div><div class=\"line\">        t1 &gt;&gt; t2</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> dag</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_api_data</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = [<span class=\"string\">'test01'</span>, <span class=\"string\">'test02'</span>, <span class=\"string\">'test03'</span>]</div><div class=\"line\">    <span class=\"keyword\">return</span> data</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_dags</span><span class=\"params\">(data=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(len(data)):</div><div class=\"line\">        dag_id = <span class=\"string\">'dynamic_day_&#123;&#125;'</span>.format(data[n])</div><div class=\"line\">        default_args = &#123;<span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">                        <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>)&#125;</div><div class=\"line\">        schedule = <span class=\"keyword\">None</span></div><div class=\"line\">        dag_number = n</div><div class=\"line\">        globals()[dag_id] = create_dag(dag_id, schedule, dag_number, default_args)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">data = get_api_data()</div><div class=\"line\">create_dags(data)</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ttxsgoto.github.io/img/airflow/airflow03.png\" alt=\"\"></p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p><a href=\"https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/\">https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/</a><br><a href=\"https://xbuba.com/questions/41517798\">https://xbuba.com/questions/41517798</a><br><a href=\"https://www.astronomer.io/guides/dynamically-generating-dags/\">https://www.astronomer.io/guides/dynamically-generating-dags/</a></p>\n"},{"title":"Apollo配置中心","date":"2019-01-07T12:59:45.000Z","_content":"#### 背景\n之前文章中说过发布流程([Jenkins+Gitlab+Harbor构建持续集成](https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/)),但这里有个问题——不同环境中的配置文件不一样，之前的方案只是把代码发布到机器上，不能“一刀切”使用相同的配置，我们现在使用携程框架部门研发的开源配置管理中心Apollo来完成配置文件分发\n\n#### 特点\n- 配置修改实时生效\n- 灰度发布\n- 分环节\n- 分集群管理配置\n- 权限\n- 审核机制等\n\napollo能够集中化管理应用不同环境，不同集群，修改配置后能够实时推送到应用，并具备规范的权限和流程治理特性\n\n#### 4个维度管理k-v配置\n\n- application(应用)\n- environment(环境)\n- cluster(集群)\n- namespace(命名空间)\n\n配置文件实时生效(热发布),用户在apollo修改完配置并发布后，客户端能实时(1s)接收到最新配置，并通知应用程序\n\n#### 客户端实现\n客户端(python)实现参照\nhttps://github.com/filamoon/pyapollo\n\n#### 参考链接\n- https://github.com/ctripcorp/apollo\n- https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D\n- https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\n\n","source":"_posts/yw-apollo.md","raw":"---\ntitle: Apollo配置中心\ndate: 2019-01-07 20:59:45\ntags:\n  - Apollo\ncategories:\n  - 运维\n---\n#### 背景\n之前文章中说过发布流程([Jenkins+Gitlab+Harbor构建持续集成](https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/)),但这里有个问题——不同环境中的配置文件不一样，之前的方案只是把代码发布到机器上，不能“一刀切”使用相同的配置，我们现在使用携程框架部门研发的开源配置管理中心Apollo来完成配置文件分发\n\n#### 特点\n- 配置修改实时生效\n- 灰度发布\n- 分环节\n- 分集群管理配置\n- 权限\n- 审核机制等\n\napollo能够集中化管理应用不同环境，不同集群，修改配置后能够实时推送到应用，并具备规范的权限和流程治理特性\n\n#### 4个维度管理k-v配置\n\n- application(应用)\n- environment(环境)\n- cluster(集群)\n- namespace(命名空间)\n\n配置文件实时生效(热发布),用户在apollo修改完配置并发布后，客户端能实时(1s)接收到最新配置，并通知应用程序\n\n#### 客户端实现\n客户端(python)实现参照\nhttps://github.com/filamoon/pyapollo\n\n#### 参考链接\n- https://github.com/ctripcorp/apollo\n- https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D\n- https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\n\n","slug":"yw-apollo","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5z5006fct8u6qvmqomj","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>之前文章中说过发布流程(<a href=\"https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/\">Jenkins+Gitlab+Harbor构建持续集成</a>),但这里有个问题——不同环境中的配置文件不一样，之前的方案只是把代码发布到机器上，不能“一刀切”使用相同的配置，我们现在使用携程框架部门研发的开源配置管理中心Apollo来完成配置文件分发</p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>配置修改实时生效</li>\n<li>灰度发布</li>\n<li>分环节</li>\n<li>分集群管理配置</li>\n<li>权限</li>\n<li>审核机制等</li>\n</ul>\n<p>apollo能够集中化管理应用不同环境，不同集群，修改配置后能够实时推送到应用，并具备规范的权限和流程治理特性</p>\n<h4 id=\"4个维度管理k-v配置\"><a href=\"#4个维度管理k-v配置\" class=\"headerlink\" title=\"4个维度管理k-v配置\"></a>4个维度管理k-v配置</h4><ul>\n<li>application(应用)</li>\n<li>environment(环境)</li>\n<li>cluster(集群)</li>\n<li>namespace(命名空间)</li>\n</ul>\n<p>配置文件实时生效(热发布),用户在apollo修改完配置并发布后，客户端能实时(1s)接收到最新配置，并通知应用程序</p>\n<h4 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h4><p>客户端(python)实现参照<br><a href=\"https://github.com/filamoon/pyapollo\" target=\"_blank\" rel=\"external\">https://github.com/filamoon/pyapollo</a></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"https://github.com/ctripcorp/apollo\" target=\"_blank\" rel=\"external\">https://github.com/ctripcorp/apollo</a></li>\n<li><a href=\"https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D\" target=\"_blank\" rel=\"external\">https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D</a></li>\n<li><a href=\"https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"external\">https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a></li>\n</ul>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>之前文章中说过发布流程(<a href=\"https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/\">Jenkins+Gitlab+Harbor构建持续集成</a>),但这里有个问题——不同环境中的配置文件不一样，之前的方案只是把代码发布到机器上，不能“一刀切”使用相同的配置，我们现在使用携程框架部门研发的开源配置管理中心Apollo来完成配置文件分发</p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>配置修改实时生效</li>\n<li>灰度发布</li>\n<li>分环节</li>\n<li>分集群管理配置</li>\n<li>权限</li>\n<li>审核机制等</li>\n</ul>\n<p>apollo能够集中化管理应用不同环境，不同集群，修改配置后能够实时推送到应用，并具备规范的权限和流程治理特性</p>\n<h4 id=\"4个维度管理k-v配置\"><a href=\"#4个维度管理k-v配置\" class=\"headerlink\" title=\"4个维度管理k-v配置\"></a>4个维度管理k-v配置</h4><ul>\n<li>application(应用)</li>\n<li>environment(环境)</li>\n<li>cluster(集群)</li>\n<li>namespace(命名空间)</li>\n</ul>\n<p>配置文件实时生效(热发布),用户在apollo修改完配置并发布后，客户端能实时(1s)接收到最新配置，并通知应用程序</p>\n<h4 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h4><p>客户端(python)实现参照<br><a href=\"https://github.com/filamoon/pyapollo\">https://github.com/filamoon/pyapollo</a></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"https://github.com/ctripcorp/apollo\">https://github.com/ctripcorp/apollo</a></li>\n<li><a href=\"https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D\">https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D</a></li>\n<li><a href=\"https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\">https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a></li>\n</ul>\n"},{"title":"Python 生成器、迭代器、反射器","date":"2017-02-09T14:37:32.000Z","_content":"### 生成器（generator)\n\n一个函数调用时返回一个迭代器，那么这个就叫生成器（generator），如果函数中包含yield语法，那么这个函数就变成了生成器\nreturn作用：在一个生成器中，如果没有return，则默认执行到函数完毕；如果遇到return，如果在执行过程中return则会抛出StopIteration终止迭代\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\nfor n in fab(5):\n    print n\n```\n**yield：** 每需要一个时，添加一个\n简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。\n\n\n### 迭代器 \n\n**迭代器iter** :存在内存中或者文件中，一次只能读取1个元素\n是访问元素的一种方式，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完后结束\n\n迭代器的优点：不需要事项准备好整个迭代过程中的所有元素，迭代器仅在迭代到某个元素时才计算该元素，在这之前或之后，元素可以不存在或者被销毁，该特点使它特别适合用于遍历一个大的文件或集合，如几个G的文件\n\n**特点**\n\n    1.访问值不需要关心迭代器内部结构，仅需通过next()方法来不断取下一个内容\n    2.不能随机访问集合中的某个值，只能从头到尾依次访问\n    3.访问到一半时不能回退\n    4.用于循环大的数据集合，节约内存\n\n**方法**\n\n    next():返回迭代器的下一个元素\n    __iter__:返回迭代器对象本身\n\n **定义一个迭代器**\n \n    names = iter([\"a\",\"b\",\"d\"])\n**使用**\n    \n    print (names.next())\n\n\n### 反射器\n\n- hasattr(obj,attr)    这个方法用来检查obj中是否有一个名为attr的属性，返回一个布尔值\n- getattr(obj,attr)     这个方法将返回名为attr值得属性的值，如attr为’bar’，则返回obj.bar方法\n- setattr(obj,attr,val)    调用这个方法将给obj的名为attr的值得属性赋值为val，如果attr为’bar’，则相当于obj.bar=val\n\n**三种执行方式**\n1. 以字符串的形式导入模块\n```python\ntemp = 'sys'\nmodel = __import__(temp)\nprint model.path\n \n# 结果：\n['/Users/study/py01']\n```\n2. 以字符串的形式执行函数\n```python\ntemp = \"mymodel\"  #模块名称\nfunc = \"myfunc\"   #函数名称\nmodel = __import__(temp)\nfunc1 = getattr(model, func) #到mymodel模块中找myfunc函数，如果有返回function\nfunc1(*args, **kwargs)    #执行func1函数，即执行模块中的函数\n```\n3. 以字符串的形式判断类里面有没有对应的方法，根据输入的内容，执行类中对应的方法\n```python\nclass MyClass(object):\n    def sayhi(self):\n        print \"sayhi\"\n    def info(self):\n        print \"info\"\n    def do(self):\n        print \"do\"\n    def run(self):\n        print \"run\"\ndef outside():\n    print \"outside other funciton\"\n \nm = MyClass()\nuser_input  = raw_input('Pls input function:')\nif hasattr(m, user_input): #判断有没有该方法\n    func = getattr(m, user_input) #获得该方法\n    func()  #执行方法\nelse:\n    print \"Error!\"\n    setattr(m, user_input, outside) #设置方法\n    func = getattr(m,user_input)\n    func()\n```\n\n\n","source":"_posts/yield.md","raw":"---\ntitle: Python 生成器、迭代器、反射器\ndate: 2017-02-09 22:37:32\ntags:\n  - Yeild\n  - Generator\ncategories:\n  - python\n---\n### 生成器（generator)\n\n一个函数调用时返回一个迭代器，那么这个就叫生成器（generator），如果函数中包含yield语法，那么这个函数就变成了生成器\nreturn作用：在一个生成器中，如果没有return，则默认执行到函数完毕；如果遇到return，如果在执行过程中return则会抛出StopIteration终止迭代\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\nfor n in fab(5):\n    print n\n```\n**yield：** 每需要一个时，添加一个\n简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。\n\n\n### 迭代器 \n\n**迭代器iter** :存在内存中或者文件中，一次只能读取1个元素\n是访问元素的一种方式，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完后结束\n\n迭代器的优点：不需要事项准备好整个迭代过程中的所有元素，迭代器仅在迭代到某个元素时才计算该元素，在这之前或之后，元素可以不存在或者被销毁，该特点使它特别适合用于遍历一个大的文件或集合，如几个G的文件\n\n**特点**\n\n    1.访问值不需要关心迭代器内部结构，仅需通过next()方法来不断取下一个内容\n    2.不能随机访问集合中的某个值，只能从头到尾依次访问\n    3.访问到一半时不能回退\n    4.用于循环大的数据集合，节约内存\n\n**方法**\n\n    next():返回迭代器的下一个元素\n    __iter__:返回迭代器对象本身\n\n **定义一个迭代器**\n \n    names = iter([\"a\",\"b\",\"d\"])\n**使用**\n    \n    print (names.next())\n\n\n### 反射器\n\n- hasattr(obj,attr)    这个方法用来检查obj中是否有一个名为attr的属性，返回一个布尔值\n- getattr(obj,attr)     这个方法将返回名为attr值得属性的值，如attr为’bar’，则返回obj.bar方法\n- setattr(obj,attr,val)    调用这个方法将给obj的名为attr的值得属性赋值为val，如果attr为’bar’，则相当于obj.bar=val\n\n**三种执行方式**\n1. 以字符串的形式导入模块\n```python\ntemp = 'sys'\nmodel = __import__(temp)\nprint model.path\n \n# 结果：\n['/Users/study/py01']\n```\n2. 以字符串的形式执行函数\n```python\ntemp = \"mymodel\"  #模块名称\nfunc = \"myfunc\"   #函数名称\nmodel = __import__(temp)\nfunc1 = getattr(model, func) #到mymodel模块中找myfunc函数，如果有返回function\nfunc1(*args, **kwargs)    #执行func1函数，即执行模块中的函数\n```\n3. 以字符串的形式判断类里面有没有对应的方法，根据输入的内容，执行类中对应的方法\n```python\nclass MyClass(object):\n    def sayhi(self):\n        print \"sayhi\"\n    def info(self):\n        print \"info\"\n    def do(self):\n        print \"do\"\n    def run(self):\n        print \"run\"\ndef outside():\n    print \"outside other funciton\"\n \nm = MyClass()\nuser_input  = raw_input('Pls input function:')\nif hasattr(m, user_input): #判断有没有该方法\n    func = getattr(m, user_input) #获得该方法\n    func()  #执行方法\nelse:\n    print \"Error!\"\n    setattr(m, user_input, outside) #设置方法\n    func = getattr(m,user_input)\n    func()\n```\n\n\n","slug":"yield","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5z6006hct8u45719pfv","content":"<h3 id=\"生成器（generator\"><a href=\"#生成器（generator\" class=\"headerlink\" title=\"生成器（generator)\"></a>生成器（generator)</h3><p>一个函数调用时返回一个迭代器，那么这个就叫生成器（generator），如果函数中包含yield语法，那么这个函数就变成了生成器<br>return作用：在一个生成器中，如果没有return，则默认执行到函数完毕；如果遇到return，如果在执行过程中return则会抛出StopIteration终止迭代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure>\n<p><strong>yield：</strong> 每需要一个时，添加一个<br>简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p><strong>迭代器iter</strong> :存在内存中或者文件中，一次只能读取1个元素<br>是访问元素的一种方式，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完后结束</p>\n<p>迭代器的优点：不需要事项准备好整个迭代过程中的所有元素，迭代器仅在迭代到某个元素时才计算该元素，在这之前或之后，元素可以不存在或者被销毁，该特点使它特别适合用于遍历一个大的文件或集合，如几个G的文件</p>\n<p><strong>特点</strong></p>\n<pre><code>1.访问值不需要关心迭代器内部结构，仅需通过next()方法来不断取下一个内容\n2.不能随机访问集合中的某个值，只能从头到尾依次访问\n3.访问到一半时不能回退\n4.用于循环大的数据集合，节约内存\n</code></pre><p><strong>方法</strong></p>\n<pre><code>next():返回迭代器的下一个元素\n__iter__:返回迭代器对象本身\n</code></pre><p> <strong>定义一个迭代器</strong></p>\n<pre><code>names = iter([&quot;a&quot;,&quot;b&quot;,&quot;d&quot;])\n</code></pre><p><strong>使用</strong></p>\n<pre><code>print (names.next())\n</code></pre><h3 id=\"反射器\"><a href=\"#反射器\" class=\"headerlink\" title=\"反射器\"></a>反射器</h3><ul>\n<li>hasattr(obj,attr)    这个方法用来检查obj中是否有一个名为attr的属性，返回一个布尔值</li>\n<li>getattr(obj,attr)     这个方法将返回名为attr值得属性的值，如attr为’bar’，则返回obj.bar方法</li>\n<li>setattr(obj,attr,val)    调用这个方法将给obj的名为attr的值得属性赋值为val，如果attr为’bar’，则相当于obj.bar=val</li>\n</ul>\n<p><strong>三种执行方式</strong></p>\n<ol>\n<li><p>以字符串的形式导入模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">temp = <span class=\"string\">'sys'</span></div><div class=\"line\">model = __import__(temp)</div><div class=\"line\"><span class=\"keyword\">print</span> model.path</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 结果：</span></div><div class=\"line\">[<span class=\"string\">'/Users/study/py01'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>以字符串的形式执行函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">temp = <span class=\"string\">\"mymodel\"</span>  <span class=\"comment\">#模块名称</span></div><div class=\"line\">func = <span class=\"string\">\"myfunc\"</span>   <span class=\"comment\">#函数名称</span></div><div class=\"line\">model = __import__(temp)</div><div class=\"line\">func1 = getattr(model, func) <span class=\"comment\">#到mymodel模块中找myfunc函数，如果有返回function</span></div><div class=\"line\">func1(*args, **kwargs)    <span class=\"comment\">#执行func1函数，即执行模块中的函数</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>以字符串的形式判断类里面有没有对应的方法，根据输入的内容，执行类中对应的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayhi</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"sayhi\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"info\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"do\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"run\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outside</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"outside other funciton\"</span></div><div class=\"line\"> </div><div class=\"line\">m = MyClass()</div><div class=\"line\">user_input  = raw_input(<span class=\"string\">'Pls input function:'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> hasattr(m, user_input): <span class=\"comment\">#判断有没有该方法</span></div><div class=\"line\">    func = getattr(m, user_input) <span class=\"comment\">#获得该方法</span></div><div class=\"line\">    func()  <span class=\"comment\">#执行方法</span></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Error!\"</span></div><div class=\"line\">    setattr(m, user_input, outside) <span class=\"comment\">#设置方法</span></div><div class=\"line\">    func = getattr(m,user_input)</div><div class=\"line\">    func()</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"生成器（generator\"><a href=\"#生成器（generator\" class=\"headerlink\" title=\"生成器（generator)\"></a>生成器（generator)</h3><p>一个函数调用时返回一个迭代器，那么这个就叫生成器（generator），如果函数中包含yield语法，那么这个函数就变成了生成器<br>return作用：在一个生成器中，如果没有return，则默认执行到函数完毕；如果遇到return，如果在执行过程中return则会抛出StopIteration终止迭代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure>\n<p><strong>yield：</strong> 每需要一个时，添加一个<br>简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p><strong>迭代器iter</strong> :存在内存中或者文件中，一次只能读取1个元素<br>是访问元素的一种方式，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完后结束</p>\n<p>迭代器的优点：不需要事项准备好整个迭代过程中的所有元素，迭代器仅在迭代到某个元素时才计算该元素，在这之前或之后，元素可以不存在或者被销毁，该特点使它特别适合用于遍历一个大的文件或集合，如几个G的文件</p>\n<p><strong>特点</strong></p>\n<pre><code>1.访问值不需要关心迭代器内部结构，仅需通过next()方法来不断取下一个内容\n2.不能随机访问集合中的某个值，只能从头到尾依次访问\n3.访问到一半时不能回退\n4.用于循环大的数据集合，节约内存\n</code></pre><p><strong>方法</strong></p>\n<pre><code>next():返回迭代器的下一个元素\n__iter__:返回迭代器对象本身\n</code></pre><p> <strong>定义一个迭代器</strong></p>\n<pre><code>names = iter([&quot;a&quot;,&quot;b&quot;,&quot;d&quot;])\n</code></pre><p><strong>使用</strong></p>\n<pre><code>print (names.next())\n</code></pre><h3 id=\"反射器\"><a href=\"#反射器\" class=\"headerlink\" title=\"反射器\"></a>反射器</h3><ul>\n<li>hasattr(obj,attr)    这个方法用来检查obj中是否有一个名为attr的属性，返回一个布尔值</li>\n<li>getattr(obj,attr)     这个方法将返回名为attr值得属性的值，如attr为’bar’，则返回obj.bar方法</li>\n<li>setattr(obj,attr,val)    调用这个方法将给obj的名为attr的值得属性赋值为val，如果attr为’bar’，则相当于obj.bar=val</li>\n</ul>\n<p><strong>三种执行方式</strong></p>\n<ol>\n<li><p>以字符串的形式导入模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">temp = <span class=\"string\">'sys'</span></div><div class=\"line\">model = __import__(temp)</div><div class=\"line\"><span class=\"keyword\">print</span> model.path</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 结果：</span></div><div class=\"line\">[<span class=\"string\">'/Users/study/py01'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>以字符串的形式执行函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">temp = <span class=\"string\">\"mymodel\"</span>  <span class=\"comment\">#模块名称</span></div><div class=\"line\">func = <span class=\"string\">\"myfunc\"</span>   <span class=\"comment\">#函数名称</span></div><div class=\"line\">model = __import__(temp)</div><div class=\"line\">func1 = getattr(model, func) <span class=\"comment\">#到mymodel模块中找myfunc函数，如果有返回function</span></div><div class=\"line\">func1(*args, **kwargs)    <span class=\"comment\">#执行func1函数，即执行模块中的函数</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>以字符串的形式判断类里面有没有对应的方法，根据输入的内容，执行类中对应的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayhi</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"sayhi\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"info\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"do\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"run\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outside</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"outside other funciton\"</span></div><div class=\"line\"> </div><div class=\"line\">m = MyClass()</div><div class=\"line\">user_input  = raw_input(<span class=\"string\">'Pls input function:'</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> hasattr(m, user_input): <span class=\"comment\">#判断有没有该方法</span></div><div class=\"line\">    func = getattr(m, user_input) <span class=\"comment\">#获得该方法</span></div><div class=\"line\">    func()  <span class=\"comment\">#执行方法</span></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Error!\"</span></div><div class=\"line\">    setattr(m, user_input, outside) <span class=\"comment\">#设置方法</span></div><div class=\"line\">    func = getattr(m,user_input)</div><div class=\"line\">    func()</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"运维 Chroot限制普通用户登录特定目录","date":"2017-04-07T14:18:33.000Z","_content":"#### 需求\n普通用户登陆到服务器上只能执行ssh，ls，cat等有限的基础命令，另外要求把用户锁定在特定目录中，不能看到其他任何目录下文件\n\n#### 实现\n1. 创建查看日志的用户\n    ```python\n    useradd -m ttxsgoto -s /bin/bash\n    passwd ttxsgoto\n    ```\n\n2. 初始化chroot环境\n\n    ```python\n    mkdir /home/chroot\n    mkdir /home/chroot/{bin,dev,lib,lib64,etc,home}\n    CMD=\"/bin/bash /bin/ls /bin/cp /bin/mkdir /bin/mv /bin/rm /bin/rmdir /usr/bin/vim /bin/cat /usr/bin/tail\"\n    CHROOT=\"/home/chroot\"\n    lib1=`ldd $CMD | awk '{ print $1 }' | grep \"/lib\" | sort | uniq`\n    lib2=`ldd $CMD | awk '{ print $3 }' | grep \"/lib\" | sort | uniq`\n    for i in $CMD\n    do\n        cp -a $i $CHROOT/bin/ && echo \"$i done\"\n    done\n    for j in $lib1\n    do\n    cp -f $j $CHROOT/lib64/ && cp -f $j $CHROOT/lib/  && echo \"$j done\"\n    done\n    for k in $lib2\n    do\n    cp -f $k $CHROOT/lib64/ && cp -f $k $CHROOT/lib/ && echo \"$k done\"\n    done\n    chown -R root:root /home/chroot\n    chmod -R 755 /home/chroot\n    ```\n3. 创建用户目录\n    ```python\n    mkdir /home/chroot/home/ttxsgoto\n    chown -R ttxsgoto:ttxsgoto /home/chroot/home/ttxsgoto\n    ```\n4. 添加sshd_config\n    ```python\n    Match User ttxsgoto\n    ChrootDirectory /home/chroot\n    ```\n5. 日志目录挂载\n    ```python\n    mount --bind /var/logs /home/chroot/home/ttxsgoto\n    #修改/etc/fstab文件，开机自挂载：\n    echo \"/var/logs     /home/chroot/home/loglooker    none    rw,bind        0    0\" >> /etc/fstab\n    ```\n","source":"_posts/yw-chroot.md","raw":"---\ntitle: 运维 Chroot限制普通用户登录特定目录\ndate: 2017-04-07 22:18:33\ntags:\n  - chroot\ncategories:\n  - 运维\n---\n#### 需求\n普通用户登陆到服务器上只能执行ssh，ls，cat等有限的基础命令，另外要求把用户锁定在特定目录中，不能看到其他任何目录下文件\n\n#### 实现\n1. 创建查看日志的用户\n    ```python\n    useradd -m ttxsgoto -s /bin/bash\n    passwd ttxsgoto\n    ```\n\n2. 初始化chroot环境\n\n    ```python\n    mkdir /home/chroot\n    mkdir /home/chroot/{bin,dev,lib,lib64,etc,home}\n    CMD=\"/bin/bash /bin/ls /bin/cp /bin/mkdir /bin/mv /bin/rm /bin/rmdir /usr/bin/vim /bin/cat /usr/bin/tail\"\n    CHROOT=\"/home/chroot\"\n    lib1=`ldd $CMD | awk '{ print $1 }' | grep \"/lib\" | sort | uniq`\n    lib2=`ldd $CMD | awk '{ print $3 }' | grep \"/lib\" | sort | uniq`\n    for i in $CMD\n    do\n        cp -a $i $CHROOT/bin/ && echo \"$i done\"\n    done\n    for j in $lib1\n    do\n    cp -f $j $CHROOT/lib64/ && cp -f $j $CHROOT/lib/  && echo \"$j done\"\n    done\n    for k in $lib2\n    do\n    cp -f $k $CHROOT/lib64/ && cp -f $k $CHROOT/lib/ && echo \"$k done\"\n    done\n    chown -R root:root /home/chroot\n    chmod -R 755 /home/chroot\n    ```\n3. 创建用户目录\n    ```python\n    mkdir /home/chroot/home/ttxsgoto\n    chown -R ttxsgoto:ttxsgoto /home/chroot/home/ttxsgoto\n    ```\n4. 添加sshd_config\n    ```python\n    Match User ttxsgoto\n    ChrootDirectory /home/chroot\n    ```\n5. 日志目录挂载\n    ```python\n    mount --bind /var/logs /home/chroot/home/ttxsgoto\n    #修改/etc/fstab文件，开机自挂载：\n    echo \"/var/logs     /home/chroot/home/loglooker    none    rw,bind        0    0\" >> /etc/fstab\n    ```\n","slug":"yw-chroot","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5z7006jct8u46ot8d51","content":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>普通用户登陆到服务器上只能执行ssh，ls，cat等有限的基础命令，另外要求把用户锁定在特定目录中，不能看到其他任何目录下文件</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ol>\n<li><p>创建查看日志的用户</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd -m ttxsgoto -s /bin/bash</div><div class=\"line\">passwd ttxsgoto</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化chroot环境</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /home/chroot</div><div class=\"line\">mkdir /home/chroot/&#123;bin,dev,lib,lib64,etc,home&#125;</div><div class=\"line\">CMD=<span class=\"string\">\"/bin/bash /bin/ls /bin/cp /bin/mkdir /bin/mv /bin/rm /bin/rmdir /usr/bin/vim /bin/cat /usr/bin/tail\"</span></div><div class=\"line\">CHROOT=<span class=\"string\">\"/home/chroot\"</span></div><div class=\"line\">lib1=`ldd $CMD | awk <span class=\"string\">'&#123; print $1 &#125;'</span> | grep <span class=\"string\">\"/lib\"</span> | sort | uniq`</div><div class=\"line\">lib2=`ldd $CMD | awk <span class=\"string\">'&#123; print $3 &#125;'</span> | grep <span class=\"string\">\"/lib\"</span> | sort | uniq`</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $CMD</div><div class=\"line\">do</div><div class=\"line\">    cp -a $i $CHROOT/bin/ &amp;&amp; echo <span class=\"string\">\"$i done\"</span></div><div class=\"line\">done</div><div class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> $lib1</div><div class=\"line\">do</div><div class=\"line\">cp -f $j $CHROOT/lib64/ &amp;&amp; cp -f $j $CHROOT/lib/  &amp;&amp; echo <span class=\"string\">\"$j done\"</span></div><div class=\"line\">done</div><div class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> $lib2</div><div class=\"line\">do</div><div class=\"line\">cp -f $k $CHROOT/lib64/ &amp;&amp; cp -f $k $CHROOT/lib/ &amp;&amp; echo <span class=\"string\">\"$k done\"</span></div><div class=\"line\">done</div><div class=\"line\">chown -R root:root /home/chroot</div><div class=\"line\">chmod -R <span class=\"number\">755</span> /home/chroot</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建用户目录</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /home/chroot/home/ttxsgoto</div><div class=\"line\">chown -R ttxsgoto:ttxsgoto /home/chroot/home/ttxsgoto</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加sshd_config</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Match User ttxsgoto</div><div class=\"line\">ChrootDirectory /home/chroot</div></pre></td></tr></table></figure>\n</li>\n<li><p>日志目录挂载</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount --bind /var/logs /home/chroot/home/ttxsgoto</div><div class=\"line\"><span class=\"comment\">#修改/etc/fstab文件，开机自挂载：</span></div><div class=\"line\">echo <span class=\"string\">\"/var/logs     /home/chroot/home/loglooker    none    rw,bind        0    0\"</span> &gt;&gt; /etc/fstab</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>普通用户登陆到服务器上只能执行ssh，ls，cat等有限的基础命令，另外要求把用户锁定在特定目录中，不能看到其他任何目录下文件</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ol>\n<li><p>创建查看日志的用户</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd -m ttxsgoto -s /bin/bash</div><div class=\"line\">passwd ttxsgoto</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化chroot环境</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /home/chroot</div><div class=\"line\">mkdir /home/chroot/&#123;bin,dev,lib,lib64,etc,home&#125;</div><div class=\"line\">CMD=<span class=\"string\">\"/bin/bash /bin/ls /bin/cp /bin/mkdir /bin/mv /bin/rm /bin/rmdir /usr/bin/vim /bin/cat /usr/bin/tail\"</span></div><div class=\"line\">CHROOT=<span class=\"string\">\"/home/chroot\"</span></div><div class=\"line\">lib1=`ldd $CMD | awk <span class=\"string\">'&#123; print $1 &#125;'</span> | grep <span class=\"string\">\"/lib\"</span> | sort | uniq`</div><div class=\"line\">lib2=`ldd $CMD | awk <span class=\"string\">'&#123; print $3 &#125;'</span> | grep <span class=\"string\">\"/lib\"</span> | sort | uniq`</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $CMD</div><div class=\"line\">do</div><div class=\"line\">    cp -a $i $CHROOT/bin/ &amp;&amp; echo <span class=\"string\">\"$i done\"</span></div><div class=\"line\">done</div><div class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> $lib1</div><div class=\"line\">do</div><div class=\"line\">cp -f $j $CHROOT/lib64/ &amp;&amp; cp -f $j $CHROOT/lib/  &amp;&amp; echo <span class=\"string\">\"$j done\"</span></div><div class=\"line\">done</div><div class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> $lib2</div><div class=\"line\">do</div><div class=\"line\">cp -f $k $CHROOT/lib64/ &amp;&amp; cp -f $k $CHROOT/lib/ &amp;&amp; echo <span class=\"string\">\"$k done\"</span></div><div class=\"line\">done</div><div class=\"line\">chown -R root:root /home/chroot</div><div class=\"line\">chmod -R <span class=\"number\">755</span> /home/chroot</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建用户目录</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /home/chroot/home/ttxsgoto</div><div class=\"line\">chown -R ttxsgoto:ttxsgoto /home/chroot/home/ttxsgoto</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加sshd_config</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Match User ttxsgoto</div><div class=\"line\">ChrootDirectory /home/chroot</div></pre></td></tr></table></figure>\n</li>\n<li><p>日志目录挂载</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount --bind /var/logs /home/chroot/home/ttxsgoto</div><div class=\"line\"><span class=\"comment\">#修改/etc/fstab文件，开机自挂载：</span></div><div class=\"line\">echo <span class=\"string\">\"/var/logs     /home/chroot/home/loglooker    none    rw,bind        0    0\"</span> &gt;&gt; /etc/fstab</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"运维 Linux(fg_jobs)","date":"2017-05-15T14:31:08.000Z","_content":"#### 背景\n在启动程序后，往往需要查看启动日志是否正常，有无报错，而有时日志量很大（刷屏），不易看清楚日志，这时就需要停下来，之前一直使用CRTL+C 直接退出，而后想看接下来的日志的话，日志已经刷好远了。。。。，今天发现一个将程序存放到后台的功能，需要时再调回前台查看就可以了，刚开始学linux时 知道有这功能，工作后一直没有用；今天用起来了，记录如下：\nping www.baidu.com  然后按 CRTL+Z,如下放到后台运行 \n```python\nroot@hadoop1:~# ping www.baidu.com\nPING www.a.shifen.com (180.97.33.107) 56(84) bytes of data.\n64 bytes from 180.97.33.107: icmp_seq=1 ttl=54 time=42.5 ms\n64 bytes from 180.97.33.107: icmp_seq=2 ttl=54 time=42.4 ms\n^Z\n[1]+  Stopped                 ping www.baidu.com\n```\nping blog.51cto.com \n```python\nroot@hadoop1:~# ping ttxsgoto.github.io\nPING sni.github.map.fastly.net (151.101.73.147): 56 data bytes\n64 bytes from 151.101.73.147: icmp_seq=0 ttl=54 time=154.436 ms\n64 bytes from 151.101.73.147: icmp_seq=1 ttl=54 time=145.728 ms\n64 bytes from 151.101.73.147: icmp_seq=2 ttl=54 time=145.869 ms\n^Z\n[2]+  Stopped                 ping ttxsgoto.github.io\n```\nping docs.python.org\n```python\nroot@hadoop1:~# ping docs.python.org\nPING prod.python.map.fastlylb.net (151.101.16.223) 56(84) bytes of data.\n64 bytes from 151.101.16.223: icmp_seq=1 ttl=44 time=513 ms\n64 bytes from 151.101.16.223: icmp_seq=2 ttl=44 time=513 ms\n^Z\n[3]+  Stopped                 ping docs.python.org\n```\njobs 查看目前运行的后台程序\n```python\nroot@hadoop1:~# jobs \n[1]   Stopped                 ping www.baidu.com\n[2]-  Stopped                 ping ttxsgoto.github.io\n[3]+  Stopped                 ping docs.python.org\n```\nfg 将最近后台运行程序(+)前台执行，这里为3 —ping docs.python.org\n```python\nroot@hadoop1:~# fg \nping docs.python.org\n64 bytes from 151.101.16.223: icmp_seq=4 ttl=44 time=491 ms\n64 bytes from 151.101.16.223: icmp_seq=5 ttl=44 time=488 ms\n64 bytes from 151.101.16.223: icmp_seq=7 ttl=44 time=489 ms\n64 bytes from 151.101.16.223: icmp_seq=8 ttl=44 time=496 ms\n```\n可以看到基本上是从放入后台这个时间点运行到前台的\nfg 1  将系列号为1的后台程序放入前台执行\n```python\nroot@hadoop1:~# fg 1\nping www.baidu.com\n64 bytes from 180.97.33.107: icmp_seq=12 ttl=54 time=41.1 ms\n64 bytes from 180.97.33.107: icmp_seq=13 ttl=54 time=42.1 ms\n64 bytes from 180.97.33.107: icmp_seq=14 ttl=54 time=42.8 ms\n64 bytes from 180.97.33.107: icmp_seq=15 ttl=54 time=41.2 ms\n```\n功能简单，但挺实用，记录一下！\n","source":"_posts/yw-fg.md","raw":"---\ntitle: 运维 Linux(fg_jobs)\ndate: 2017-05-15 22:31:08\ntags:\n  - fg\ncategories:\n  - 运维\n---\n#### 背景\n在启动程序后，往往需要查看启动日志是否正常，有无报错，而有时日志量很大（刷屏），不易看清楚日志，这时就需要停下来，之前一直使用CRTL+C 直接退出，而后想看接下来的日志的话，日志已经刷好远了。。。。，今天发现一个将程序存放到后台的功能，需要时再调回前台查看就可以了，刚开始学linux时 知道有这功能，工作后一直没有用；今天用起来了，记录如下：\nping www.baidu.com  然后按 CRTL+Z,如下放到后台运行 \n```python\nroot@hadoop1:~# ping www.baidu.com\nPING www.a.shifen.com (180.97.33.107) 56(84) bytes of data.\n64 bytes from 180.97.33.107: icmp_seq=1 ttl=54 time=42.5 ms\n64 bytes from 180.97.33.107: icmp_seq=2 ttl=54 time=42.4 ms\n^Z\n[1]+  Stopped                 ping www.baidu.com\n```\nping blog.51cto.com \n```python\nroot@hadoop1:~# ping ttxsgoto.github.io\nPING sni.github.map.fastly.net (151.101.73.147): 56 data bytes\n64 bytes from 151.101.73.147: icmp_seq=0 ttl=54 time=154.436 ms\n64 bytes from 151.101.73.147: icmp_seq=1 ttl=54 time=145.728 ms\n64 bytes from 151.101.73.147: icmp_seq=2 ttl=54 time=145.869 ms\n^Z\n[2]+  Stopped                 ping ttxsgoto.github.io\n```\nping docs.python.org\n```python\nroot@hadoop1:~# ping docs.python.org\nPING prod.python.map.fastlylb.net (151.101.16.223) 56(84) bytes of data.\n64 bytes from 151.101.16.223: icmp_seq=1 ttl=44 time=513 ms\n64 bytes from 151.101.16.223: icmp_seq=2 ttl=44 time=513 ms\n^Z\n[3]+  Stopped                 ping docs.python.org\n```\njobs 查看目前运行的后台程序\n```python\nroot@hadoop1:~# jobs \n[1]   Stopped                 ping www.baidu.com\n[2]-  Stopped                 ping ttxsgoto.github.io\n[3]+  Stopped                 ping docs.python.org\n```\nfg 将最近后台运行程序(+)前台执行，这里为3 —ping docs.python.org\n```python\nroot@hadoop1:~# fg \nping docs.python.org\n64 bytes from 151.101.16.223: icmp_seq=4 ttl=44 time=491 ms\n64 bytes from 151.101.16.223: icmp_seq=5 ttl=44 time=488 ms\n64 bytes from 151.101.16.223: icmp_seq=7 ttl=44 time=489 ms\n64 bytes from 151.101.16.223: icmp_seq=8 ttl=44 time=496 ms\n```\n可以看到基本上是从放入后台这个时间点运行到前台的\nfg 1  将系列号为1的后台程序放入前台执行\n```python\nroot@hadoop1:~# fg 1\nping www.baidu.com\n64 bytes from 180.97.33.107: icmp_seq=12 ttl=54 time=41.1 ms\n64 bytes from 180.97.33.107: icmp_seq=13 ttl=54 time=42.1 ms\n64 bytes from 180.97.33.107: icmp_seq=14 ttl=54 time=42.8 ms\n64 bytes from 180.97.33.107: icmp_seq=15 ttl=54 time=41.2 ms\n```\n功能简单，但挺实用，记录一下！\n","slug":"yw-fg","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5z9006nct8u3qip6nih","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>在启动程序后，往往需要查看启动日志是否正常，有无报错，而有时日志量很大（刷屏），不易看清楚日志，这时就需要停下来，之前一直使用CRTL+C 直接退出，而后想看接下来的日志的话，日志已经刷好远了。。。。，今天发现一个将程序存放到后台的功能，需要时再调回前台查看就可以了，刚开始学linux时 知道有这功能，工作后一直没有用；今天用起来了，记录如下：<br>ping www.baidu.com  然后按 CRTL+Z,如下放到后台运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># ping www.baidu.com</span></div><div class=\"line\">PING www.a.shifen.com (<span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>) <span class=\"number\">56</span>(<span class=\"number\">84</span>) bytes of data.</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">1</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.5</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">2</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.4</span> ms</div><div class=\"line\">^Z</div><div class=\"line\">[<span class=\"number\">1</span>]+  Stopped                 ping www.baidu.com</div></pre></td></tr></table></figure></p>\n<p>ping blog.51cto.com<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># ping ttxsgoto.github.io</span></div><div class=\"line\">PING sni.github.map.fastly.net (<span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>): <span class=\"number\">56</span> data bytes</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>: icmp_seq=<span class=\"number\">0</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">154.436</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>: icmp_seq=<span class=\"number\">1</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">145.728</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>: icmp_seq=<span class=\"number\">2</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">145.869</span> ms</div><div class=\"line\">^Z</div><div class=\"line\">[<span class=\"number\">2</span>]+  Stopped                 ping ttxsgoto.github.io</div></pre></td></tr></table></figure></p>\n<p>ping docs.python.org<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># ping docs.python.org</span></div><div class=\"line\">PING prod.python.map.fastlylb.net (<span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>) <span class=\"number\">56</span>(<span class=\"number\">84</span>) bytes of data.</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">1</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">513</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">2</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">513</span> ms</div><div class=\"line\">^Z</div><div class=\"line\">[<span class=\"number\">3</span>]+  Stopped                 ping docs.python.org</div></pre></td></tr></table></figure></p>\n<p>jobs 查看目前运行的后台程序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># jobs </span></div><div class=\"line\">[<span class=\"number\">1</span>]   Stopped                 ping www.baidu.com</div><div class=\"line\">[<span class=\"number\">2</span>]-  Stopped                 ping ttxsgoto.github.io</div><div class=\"line\">[<span class=\"number\">3</span>]+  Stopped                 ping docs.python.org</div></pre></td></tr></table></figure></p>\n<p>fg 将最近后台运行程序(+)前台执行，这里为3 —ping docs.python.org<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># fg </span></div><div class=\"line\">ping docs.python.org</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">4</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">491</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">5</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">488</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">7</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">489</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">8</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">496</span> ms</div></pre></td></tr></table></figure></p>\n<p>可以看到基本上是从放入后台这个时间点运行到前台的<br>fg 1  将系列号为1的后台程序放入前台执行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># fg 1</span></div><div class=\"line\">ping www.baidu.com</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">12</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">41.1</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">13</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.1</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">14</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.8</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">15</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">41.2</span> ms</div></pre></td></tr></table></figure></p>\n<p>功能简单，但挺实用，记录一下！</p>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>在启动程序后，往往需要查看启动日志是否正常，有无报错，而有时日志量很大（刷屏），不易看清楚日志，这时就需要停下来，之前一直使用CRTL+C 直接退出，而后想看接下来的日志的话，日志已经刷好远了。。。。，今天发现一个将程序存放到后台的功能，需要时再调回前台查看就可以了，刚开始学linux时 知道有这功能，工作后一直没有用；今天用起来了，记录如下：<br>ping www.baidu.com  然后按 CRTL+Z,如下放到后台运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># ping www.baidu.com</span></div><div class=\"line\">PING www.a.shifen.com (<span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>) <span class=\"number\">56</span>(<span class=\"number\">84</span>) bytes of data.</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">1</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.5</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">2</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.4</span> ms</div><div class=\"line\">^Z</div><div class=\"line\">[<span class=\"number\">1</span>]+  Stopped                 ping www.baidu.com</div></pre></td></tr></table></figure></p>\n<p>ping blog.51cto.com<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># ping ttxsgoto.github.io</span></div><div class=\"line\">PING sni.github.map.fastly.net (<span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>): <span class=\"number\">56</span> data bytes</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>: icmp_seq=<span class=\"number\">0</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">154.436</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>: icmp_seq=<span class=\"number\">1</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">145.728</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.73</span><span class=\"number\">.147</span>: icmp_seq=<span class=\"number\">2</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">145.869</span> ms</div><div class=\"line\">^Z</div><div class=\"line\">[<span class=\"number\">2</span>]+  Stopped                 ping ttxsgoto.github.io</div></pre></td></tr></table></figure></p>\n<p>ping docs.python.org<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># ping docs.python.org</span></div><div class=\"line\">PING prod.python.map.fastlylb.net (<span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>) <span class=\"number\">56</span>(<span class=\"number\">84</span>) bytes of data.</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">1</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">513</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">2</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">513</span> ms</div><div class=\"line\">^Z</div><div class=\"line\">[<span class=\"number\">3</span>]+  Stopped                 ping docs.python.org</div></pre></td></tr></table></figure></p>\n<p>jobs 查看目前运行的后台程序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># jobs </span></div><div class=\"line\">[<span class=\"number\">1</span>]   Stopped                 ping www.baidu.com</div><div class=\"line\">[<span class=\"number\">2</span>]-  Stopped                 ping ttxsgoto.github.io</div><div class=\"line\">[<span class=\"number\">3</span>]+  Stopped                 ping docs.python.org</div></pre></td></tr></table></figure></p>\n<p>fg 将最近后台运行程序(+)前台执行，这里为3 —ping docs.python.org<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># fg </span></div><div class=\"line\">ping docs.python.org</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">4</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">491</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">5</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">488</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">7</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">489</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">151.101</span><span class=\"number\">.16</span><span class=\"number\">.223</span>: icmp_seq=<span class=\"number\">8</span> ttl=<span class=\"number\">44</span> time=<span class=\"number\">496</span> ms</div></pre></td></tr></table></figure></p>\n<p>可以看到基本上是从放入后台这个时间点运行到前台的<br>fg 1  将系列号为1的后台程序放入前台执行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop1:~<span class=\"comment\"># fg 1</span></div><div class=\"line\">ping www.baidu.com</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">12</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">41.1</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">13</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.1</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">14</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">42.8</span> ms</div><div class=\"line\"><span class=\"number\">64</span> bytes <span class=\"keyword\">from</span> <span class=\"number\">180.97</span><span class=\"number\">.33</span><span class=\"number\">.107</span>: icmp_seq=<span class=\"number\">15</span> ttl=<span class=\"number\">54</span> time=<span class=\"number\">41.2</span> ms</div></pre></td></tr></table></figure></p>\n<p>功能简单，但挺实用，记录一下！</p>\n"},{"title":"Airflow变量和执行器","date":"2019-07-27T08:15:08.000Z","_content":"#### 问题描述\n最近在调研Airflow demo相关的问题和解决方案， 主要问题有：\n\n- Dags中任务启动时，参数如何传递\n- Task任务之间的依赖关系，返回值如何被其他task使用\n- 运行docker程序\n- Http API请求实现\n\n#### 具体说明\n##### Dags中任务启动时，参数如何传递\nAirflow中可以使用Variables来定义变量来传递参数，该变量为全局变量\n```python\n# 设置变量\nairflow variables --set keyName value # 或者管理UI设置\n \n# 获取变量\nfrom airflow.models import Variable\nmessage = Variable.get('message')\n```\n##### Task任务之间的依赖关系，返回值如何被其他task使用\n通过xcom来返回给后面的task任务使用任务的返回值，使用kwargs['task_instance'].xcom_pull(task_ids='run_task')来获取run_task任务的返回值\n```python\n# coding: utf8\n \nfrom airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\nfrom datetime import timedelta, datetime\nfrom airflow.models import Variable\n \ndefault_args = {\n    'owner': 'airflow',\n    'description': 'Use of the Xcom',\n    'depend_on_past': False,\n    'start_date': datetime(2019, 6, 3),\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=30)\n    # 'queue': 'bash_queue',\n    # 'pool': 'backfill',\n    # 'priority_weight': 10,\n    # 'end_date': datetime(2016, 1, 1),\n    # 'wait_for_downstream': False,\n    # 'dag': dag,\n    # 'adhoc':False,\n    # 'sla': timedelta(hours=2),\n    # 'execution_timeout': timedelta(seconds=300),\n    # 'on_failure_callback': some_function,\n    # 'on_success_callback': some_other_function,\n    # 'on_retry_callback': another_function,\n    # 'trigger_rule': u'all_success'\n}\n \ndag = DAG(\n    'xcom_demo',\n    default_args=default_args,\n    schedule_interval=None\n)\n \n \ndef run_this_func(**kwargs):\n    message = Variable.get('message')\n    print('message------>', message)\n    return message\n \n \nrun_task = PythonOperator(\n    task_id='run_task',\n    provide_context=True,\n    python_callable=run_this_func,\n    dag=dag\n)\n \n \ndef print_hello(**context):\n    before_data = context['task_instance'].xcom_pull(task_ids='run_task')\n    return before_data\n \n \nhello_operator = PythonOperator(\n    task_id='hello_task',\n    python_callable=print_hello,\n    provide_context=True,\n    dag=dag,\n)\n \n \ndef three(**kwargs):\n    frist_data = kwargs['task_instance'].xcom_pull(task_ids='run_task')\n    two_data = kwargs['task_instance'].xcom_pull(task_ids='hello_task')\n    return frist_data, two_data\n \n \nlast_operator = PythonOperator(\n    task_id='last_task',\n    python_callable=three,\n    provide_context=True,\n    dag=dag,\n)\n \nrun_task >> hello_operator >> last_operator  # xcoms\n \nif __name__ == \"__main__\":\n    dag.cli()\n \n \n```\n##### 运行docker程序\n执行器DockerOperator 完成docker运行\n```python\n# coding: utf-8\n \nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime, timedelta\nfrom airflow.operators.docker_operator import DockerOperator\n \ndefault_args = {\n    'owner': 'airflow',\n    'description': 'Use of the DockerOperator',\n    'depend_on_past': False,\n    'start_date': datetime(2019, 6, 3),\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=30)\n}\n \nimage = 'docker.api:0.1.0'\nvolumes = ['/home/user/data:/data']\nrun_commend = 'cd /data/ && ./run.sh'\nwith DAG('docker_demo', default_args=default_args, schedule_interval=None, catchup=False) as dag:\n    t1 = BashOperator(\n        task_id='print_current_date',\n        bash_command='date'\n    )\n \n    t2 = DockerOperator(\n        task_id='dpt_docker',\n        image=image,\n        auto_remove=True,\n        command=run_commend,\n        force_pull=True,\n        volumes=volumes,\n        # network_mode='bridge'\n    )\n \n    t3 = BashOperator(\n        task_id='print_hello',\n        bash_command='echo \"hello world\"'\n    )\n \n    t1 >> t2 >> t3\n \nif __name__ == \"__main__\":\n    dag.cli()\n \n```\n##### Http API请求实现\n执行器SimpleHttpOperator 完成http api请求\n```python\n# coding: utf-8\nimport json\nimport os\nimport time\nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom airflow.operators.python_operator import PythonOperator\nfrom airflow.utils.trigger_rule import TriggerRule\nfrom datetime import datetime, timedelta\nfrom airflow.operators.http_operator import SimpleHttpOperator\n \nfrom airflow.models import Variable\n \ndefault_args = {\n    'owner': 'airflow',\n    'description': 'Use of the SimpleHttpOperator',\n    'depend_on_past': False,\n    'start_date': datetime(2019, 6, 3),\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=30)\n}\n \nhttp_add = 'http://127.0.0.1:8888'\napi = '/person/'\nurl = 'http://1027.0.0.1:8889'\nlogin_api = '/user/login/'\nget_task_api = '/task/'\nos.environ[\n    'AIRFLOW_CONN_HTTP_TEST'] = http_add  # 这里定义不同的接口规则,在SimpleHttpOperator中http_conn_id需要指定IRFLOW_CONN_*对应的内容,默认接口指向google的api\nos.environ['AIRFLOW_CONN_TEST_HTTP'] = url\n \ntoken = ''\n \n \ndef get_http_data(**context):\n    token_data = context['task_instance'].xcom_pull(task_ids='post_login')\n    token_dict = json.loads(token_data)\n    token = token_dict['data']['token']\n    Variable.set('token', token)\n    return token\n \n \ndef get_data(**context):\n    time.sleep(10)\n    return token\n \n \nwith DAG('http_api_demo',\n         default_args=default_args,\n         schedule_interval=\"5 * * * *\",\n         catchup=False) as dag:\n    t1 = BashOperator(\n        task_id='print_current_date',\n        bash_command='date'\n    )\n \n    t2 = SimpleHttpOperator(\n        task_id='get_person',\n        http_conn_id='http_test',\n        method='GET',\n        headers={\"Content-Type\": \"application/json\"},\n        endpoint=api,\n        xcom_push=True,  # 将结果通过xcom传递给下一个task\n        response_check=lambda response: True if response.status_code == 200 else False,\n    )\n    t3 = SimpleHttpOperator(\n        task_id='post_login',\n        http_conn_id='test_http',\n        method='POST',\n        headers={\n            \"X-Requested-With\": 'XMLHttpRequest',\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=UTF-8\"\n        },\n        endpoint=login_api,\n        xcom_push=True,  # 将结果通过xcom传递给下一个task\n        response_check=lambda response: True if response.status_code == 200 else False,\n        data=json.dumps({'username': 'admin', 'password': 'admin'}),\n    )\n    # PostgresOperator\n    t4 = SimpleHttpOperator(\n        task_id='get_task',\n        http_conn_id='test_http',\n        method='GET',\n        headers={\n            \"X-Requested-With\": 'XMLHttpRequest',\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \"Authorization\": 'jwt {}'.format(Variable.get('token')),  # 这里需要获取到login的token\n        },\n        endpoint=get_task_api,\n        xcom_push=True,  # 将结果通过xcom传递给下一个task\n        response_check=lambda response: True if response.status_code == 200 else False,\n        trigger_rule=TriggerRule.NONE_FAILED\n    )\n \n    t5 = PythonOperator(\n        task_id='data_task',\n        python_callable=get_http_data,\n        provide_context=True,\n        # trigger_rule=TriggerRule.ONE_SUCCESS\n    )\n    t6 = PythonOperator(\n        task_id='test_data',\n        python_callable=get_data,\n        provide_context=True\n    )\n    t7 = PythonOperator(\n        task_id='sleep_data',\n        python_callable=get_data,\n        provide_context=True,\n    )\n \n    t1 >> t2 >> t3 >> [t5, t6] >> t4 >> t7\n \nif __name__ == \"__main__\":\n    dag.cli()\n \n```\n\n","source":"_posts/yw-airflow-operator.md","raw":"---\ntitle: Airflow变量和执行器\ndate: 2019-07-27 16:15:08\ntags:\n  - Airflow\ncategories:\n  - 运维\n---\n#### 问题描述\n最近在调研Airflow demo相关的问题和解决方案， 主要问题有：\n\n- Dags中任务启动时，参数如何传递\n- Task任务之间的依赖关系，返回值如何被其他task使用\n- 运行docker程序\n- Http API请求实现\n\n#### 具体说明\n##### Dags中任务启动时，参数如何传递\nAirflow中可以使用Variables来定义变量来传递参数，该变量为全局变量\n```python\n# 设置变量\nairflow variables --set keyName value # 或者管理UI设置\n \n# 获取变量\nfrom airflow.models import Variable\nmessage = Variable.get('message')\n```\n##### Task任务之间的依赖关系，返回值如何被其他task使用\n通过xcom来返回给后面的task任务使用任务的返回值，使用kwargs['task_instance'].xcom_pull(task_ids='run_task')来获取run_task任务的返回值\n```python\n# coding: utf8\n \nfrom airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\nfrom datetime import timedelta, datetime\nfrom airflow.models import Variable\n \ndefault_args = {\n    'owner': 'airflow',\n    'description': 'Use of the Xcom',\n    'depend_on_past': False,\n    'start_date': datetime(2019, 6, 3),\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=30)\n    # 'queue': 'bash_queue',\n    # 'pool': 'backfill',\n    # 'priority_weight': 10,\n    # 'end_date': datetime(2016, 1, 1),\n    # 'wait_for_downstream': False,\n    # 'dag': dag,\n    # 'adhoc':False,\n    # 'sla': timedelta(hours=2),\n    # 'execution_timeout': timedelta(seconds=300),\n    # 'on_failure_callback': some_function,\n    # 'on_success_callback': some_other_function,\n    # 'on_retry_callback': another_function,\n    # 'trigger_rule': u'all_success'\n}\n \ndag = DAG(\n    'xcom_demo',\n    default_args=default_args,\n    schedule_interval=None\n)\n \n \ndef run_this_func(**kwargs):\n    message = Variable.get('message')\n    print('message------>', message)\n    return message\n \n \nrun_task = PythonOperator(\n    task_id='run_task',\n    provide_context=True,\n    python_callable=run_this_func,\n    dag=dag\n)\n \n \ndef print_hello(**context):\n    before_data = context['task_instance'].xcom_pull(task_ids='run_task')\n    return before_data\n \n \nhello_operator = PythonOperator(\n    task_id='hello_task',\n    python_callable=print_hello,\n    provide_context=True,\n    dag=dag,\n)\n \n \ndef three(**kwargs):\n    frist_data = kwargs['task_instance'].xcom_pull(task_ids='run_task')\n    two_data = kwargs['task_instance'].xcom_pull(task_ids='hello_task')\n    return frist_data, two_data\n \n \nlast_operator = PythonOperator(\n    task_id='last_task',\n    python_callable=three,\n    provide_context=True,\n    dag=dag,\n)\n \nrun_task >> hello_operator >> last_operator  # xcoms\n \nif __name__ == \"__main__\":\n    dag.cli()\n \n \n```\n##### 运行docker程序\n执行器DockerOperator 完成docker运行\n```python\n# coding: utf-8\n \nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime, timedelta\nfrom airflow.operators.docker_operator import DockerOperator\n \ndefault_args = {\n    'owner': 'airflow',\n    'description': 'Use of the DockerOperator',\n    'depend_on_past': False,\n    'start_date': datetime(2019, 6, 3),\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=30)\n}\n \nimage = 'docker.api:0.1.0'\nvolumes = ['/home/user/data:/data']\nrun_commend = 'cd /data/ && ./run.sh'\nwith DAG('docker_demo', default_args=default_args, schedule_interval=None, catchup=False) as dag:\n    t1 = BashOperator(\n        task_id='print_current_date',\n        bash_command='date'\n    )\n \n    t2 = DockerOperator(\n        task_id='dpt_docker',\n        image=image,\n        auto_remove=True,\n        command=run_commend,\n        force_pull=True,\n        volumes=volumes,\n        # network_mode='bridge'\n    )\n \n    t3 = BashOperator(\n        task_id='print_hello',\n        bash_command='echo \"hello world\"'\n    )\n \n    t1 >> t2 >> t3\n \nif __name__ == \"__main__\":\n    dag.cli()\n \n```\n##### Http API请求实现\n执行器SimpleHttpOperator 完成http api请求\n```python\n# coding: utf-8\nimport json\nimport os\nimport time\nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom airflow.operators.python_operator import PythonOperator\nfrom airflow.utils.trigger_rule import TriggerRule\nfrom datetime import datetime, timedelta\nfrom airflow.operators.http_operator import SimpleHttpOperator\n \nfrom airflow.models import Variable\n \ndefault_args = {\n    'owner': 'airflow',\n    'description': 'Use of the SimpleHttpOperator',\n    'depend_on_past': False,\n    'start_date': datetime(2019, 6, 3),\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=30)\n}\n \nhttp_add = 'http://127.0.0.1:8888'\napi = '/person/'\nurl = 'http://1027.0.0.1:8889'\nlogin_api = '/user/login/'\nget_task_api = '/task/'\nos.environ[\n    'AIRFLOW_CONN_HTTP_TEST'] = http_add  # 这里定义不同的接口规则,在SimpleHttpOperator中http_conn_id需要指定IRFLOW_CONN_*对应的内容,默认接口指向google的api\nos.environ['AIRFLOW_CONN_TEST_HTTP'] = url\n \ntoken = ''\n \n \ndef get_http_data(**context):\n    token_data = context['task_instance'].xcom_pull(task_ids='post_login')\n    token_dict = json.loads(token_data)\n    token = token_dict['data']['token']\n    Variable.set('token', token)\n    return token\n \n \ndef get_data(**context):\n    time.sleep(10)\n    return token\n \n \nwith DAG('http_api_demo',\n         default_args=default_args,\n         schedule_interval=\"5 * * * *\",\n         catchup=False) as dag:\n    t1 = BashOperator(\n        task_id='print_current_date',\n        bash_command='date'\n    )\n \n    t2 = SimpleHttpOperator(\n        task_id='get_person',\n        http_conn_id='http_test',\n        method='GET',\n        headers={\"Content-Type\": \"application/json\"},\n        endpoint=api,\n        xcom_push=True,  # 将结果通过xcom传递给下一个task\n        response_check=lambda response: True if response.status_code == 200 else False,\n    )\n    t3 = SimpleHttpOperator(\n        task_id='post_login',\n        http_conn_id='test_http',\n        method='POST',\n        headers={\n            \"X-Requested-With\": 'XMLHttpRequest',\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=UTF-8\"\n        },\n        endpoint=login_api,\n        xcom_push=True,  # 将结果通过xcom传递给下一个task\n        response_check=lambda response: True if response.status_code == 200 else False,\n        data=json.dumps({'username': 'admin', 'password': 'admin'}),\n    )\n    # PostgresOperator\n    t4 = SimpleHttpOperator(\n        task_id='get_task',\n        http_conn_id='test_http',\n        method='GET',\n        headers={\n            \"X-Requested-With\": 'XMLHttpRequest',\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \"Authorization\": 'jwt {}'.format(Variable.get('token')),  # 这里需要获取到login的token\n        },\n        endpoint=get_task_api,\n        xcom_push=True,  # 将结果通过xcom传递给下一个task\n        response_check=lambda response: True if response.status_code == 200 else False,\n        trigger_rule=TriggerRule.NONE_FAILED\n    )\n \n    t5 = PythonOperator(\n        task_id='data_task',\n        python_callable=get_http_data,\n        provide_context=True,\n        # trigger_rule=TriggerRule.ONE_SUCCESS\n    )\n    t6 = PythonOperator(\n        task_id='test_data',\n        python_callable=get_data,\n        provide_context=True\n    )\n    t7 = PythonOperator(\n        task_id='sleep_data',\n        python_callable=get_data,\n        provide_context=True,\n    )\n \n    t1 >> t2 >> t3 >> [t5, t6] >> t4 >> t7\n \nif __name__ == \"__main__\":\n    dag.cli()\n \n```\n\n","slug":"yw-airflow-operator","published":1,"updated":"2019-07-27T06:25:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5za006qct8u3616xqwq","content":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>最近在调研Airflow demo相关的问题和解决方案， 主要问题有：</p>\n<ul>\n<li>Dags中任务启动时，参数如何传递</li>\n<li>Task任务之间的依赖关系，返回值如何被其他task使用</li>\n<li>运行docker程序</li>\n<li>Http API请求实现</li>\n</ul>\n<h4 id=\"具体说明\"><a href=\"#具体说明\" class=\"headerlink\" title=\"具体说明\"></a>具体说明</h4><h5 id=\"Dags中任务启动时，参数如何传递\"><a href=\"#Dags中任务启动时，参数如何传递\" class=\"headerlink\" title=\"Dags中任务启动时，参数如何传递\"></a>Dags中任务启动时，参数如何传递</h5><p>Airflow中可以使用Variables来定义变量来传递参数，该变量为全局变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置变量</span></div><div class=\"line\">airflow variables --set keyName value <span class=\"comment\"># 或者管理UI设置</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 获取变量</span></div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\">message = Variable.get(<span class=\"string\">'message'</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"Task任务之间的依赖关系，返回值如何被其他task使用\"><a href=\"#Task任务之间的依赖关系，返回值如何被其他task使用\" class=\"headerlink\" title=\"Task任务之间的依赖关系，返回值如何被其他task使用\"></a>Task任务之间的依赖关系，返回值如何被其他task使用</h5><p>通过xcom来返回给后面的task任务使用任务的返回值，使用kwargs[‘task_instance’].xcom_pull(task_ids=’run_task’)来获取run_task任务的返回值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta, datetime</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\"> </div><div class=\"line\">default_args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'description'</span>: <span class=\"string\">'Use of the Xcom'</span>,</div><div class=\"line\">    <span class=\"string\">'depend_on_past'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>),</div><div class=\"line\">    <span class=\"string\">'email_on_failure'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'email_on_retry'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'retries'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'retry_delay'</span>: timedelta(minutes=<span class=\"number\">30</span>)</div><div class=\"line\">    <span class=\"comment\"># 'queue': 'bash_queue',</span></div><div class=\"line\">    <span class=\"comment\"># 'pool': 'backfill',</span></div><div class=\"line\">    <span class=\"comment\"># 'priority_weight': 10,</span></div><div class=\"line\">    <span class=\"comment\"># 'end_date': datetime(2016, 1, 1),</span></div><div class=\"line\">    <span class=\"comment\"># 'wait_for_downstream': False,</span></div><div class=\"line\">    <span class=\"comment\"># 'dag': dag,</span></div><div class=\"line\">    <span class=\"comment\"># 'adhoc':False,</span></div><div class=\"line\">    <span class=\"comment\"># 'sla': timedelta(hours=2),</span></div><div class=\"line\">    <span class=\"comment\"># 'execution_timeout': timedelta(seconds=300),</span></div><div class=\"line\">    <span class=\"comment\"># 'on_failure_callback': some_function,</span></div><div class=\"line\">    <span class=\"comment\"># 'on_success_callback': some_other_function,</span></div><div class=\"line\">    <span class=\"comment\"># 'on_retry_callback': another_function,</span></div><div class=\"line\">    <span class=\"comment\"># 'trigger_rule': u'all_success'</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">dag = DAG(</div><div class=\"line\">    <span class=\"string\">'xcom_demo'</span>,</div><div class=\"line\">    default_args=default_args,</div><div class=\"line\">    schedule_interval=<span class=\"keyword\">None</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_this_func</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    message = Variable.get(<span class=\"string\">'message'</span>)</div><div class=\"line\">    print(<span class=\"string\">'message------&gt;'</span>, message)</div><div class=\"line\">    <span class=\"keyword\">return</span> message</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">run_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'run_task'</span>,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=run_this_func,</div><div class=\"line\">    dag=dag</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_hello</span><span class=\"params\">(**context)</span>:</span></div><div class=\"line\">    before_data = context[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'run_task'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> before_data</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">hello_operator = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'hello_task'</span>,</div><div class=\"line\">    python_callable=print_hello,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">three</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    frist_data = kwargs[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'run_task'</span>)</div><div class=\"line\">    two_data = kwargs[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'hello_task'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> frist_data, two_data</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">last_operator = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'last_task'</span>,</div><div class=\"line\">    python_callable=three,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">run_task &gt;&gt; hello_operator &gt;&gt; last_operator  <span class=\"comment\"># xcoms</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    dag.cli()</div></pre></td></tr></table></figure></p>\n<h5 id=\"运行docker程序\"><a href=\"#运行docker程序\" class=\"headerlink\" title=\"运行docker程序\"></a>运行docker程序</h5><p>执行器DockerOperator 完成docker运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, timedelta</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.docker_operator <span class=\"keyword\">import</span> DockerOperator</div><div class=\"line\"> </div><div class=\"line\">default_args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'description'</span>: <span class=\"string\">'Use of the DockerOperator'</span>,</div><div class=\"line\">    <span class=\"string\">'depend_on_past'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>),</div><div class=\"line\">    <span class=\"string\">'email_on_failure'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'email_on_retry'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'retries'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'retry_delay'</span>: timedelta(minutes=<span class=\"number\">30</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">image = <span class=\"string\">'docker.api:0.1.0'</span></div><div class=\"line\">volumes = [<span class=\"string\">'/home/user/data:/data'</span>]</div><div class=\"line\">run_commend = <span class=\"string\">'cd /data/ &amp;&amp; ./run.sh'</span></div><div class=\"line\"><span class=\"keyword\">with</span> DAG(<span class=\"string\">'docker_demo'</span>, default_args=default_args, schedule_interval=<span class=\"keyword\">None</span>, catchup=<span class=\"keyword\">False</span>) <span class=\"keyword\">as</span> dag:</div><div class=\"line\">    t1 = BashOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'print_current_date'</span>,</div><div class=\"line\">        bash_command=<span class=\"string\">'date'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t2 = DockerOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'dpt_docker'</span>,</div><div class=\"line\">        image=image,</div><div class=\"line\">        auto_remove=<span class=\"keyword\">True</span>,</div><div class=\"line\">        command=run_commend,</div><div class=\"line\">        force_pull=<span class=\"keyword\">True</span>,</div><div class=\"line\">        volumes=volumes,</div><div class=\"line\">        <span class=\"comment\"># network_mode='bridge'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t3 = BashOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'print_hello'</span>,</div><div class=\"line\">        bash_command=<span class=\"string\">'echo \"hello world\"'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t1 &gt;&gt; t2 &gt;&gt; t3</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    dag.cli()</div></pre></td></tr></table></figure></p>\n<h5 id=\"Http-API请求实现\"><a href=\"#Http-API请求实现\" class=\"headerlink\" title=\"Http API请求实现\"></a>Http API请求实现</h5><p>执行器SimpleHttpOperator 完成http api请求<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.utils.trigger_rule <span class=\"keyword\">import</span> TriggerRule</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, timedelta</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.http_operator <span class=\"keyword\">import</span> SimpleHttpOperator</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\"> </div><div class=\"line\">default_args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'description'</span>: <span class=\"string\">'Use of the SimpleHttpOperator'</span>,</div><div class=\"line\">    <span class=\"string\">'depend_on_past'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>),</div><div class=\"line\">    <span class=\"string\">'email_on_failure'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'email_on_retry'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'retries'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'retry_delay'</span>: timedelta(minutes=<span class=\"number\">30</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">http_add = <span class=\"string\">'http://127.0.0.1:8888'</span></div><div class=\"line\">api = <span class=\"string\">'/person/'</span></div><div class=\"line\">url = <span class=\"string\">'http://1027.0.0.1:8889'</span></div><div class=\"line\">login_api = <span class=\"string\">'/user/login/'</span></div><div class=\"line\">get_task_api = <span class=\"string\">'/task/'</span></div><div class=\"line\">os.environ[</div><div class=\"line\">    <span class=\"string\">'AIRFLOW_CONN_HTTP_TEST'</span>] = http_add  <span class=\"comment\"># 这里定义不同的接口规则,在SimpleHttpOperator中http_conn_id需要指定IRFLOW_CONN_*对应的内容,默认接口指向google的api</span></div><div class=\"line\">os.environ[<span class=\"string\">'AIRFLOW_CONN_TEST_HTTP'</span>] = url</div><div class=\"line\"> </div><div class=\"line\">token = <span class=\"string\">''</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_http_data</span><span class=\"params\">(**context)</span>:</span></div><div class=\"line\">    token_data = context[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'post_login'</span>)</div><div class=\"line\">    token_dict = json.loads(token_data)</div><div class=\"line\">    token = token_dict[<span class=\"string\">'data'</span>][<span class=\"string\">'token'</span>]</div><div class=\"line\">    Variable.set(<span class=\"string\">'token'</span>, token)</div><div class=\"line\">    <span class=\"keyword\">return</span> token</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_data</span><span class=\"params\">(**context)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> token</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">with</span> DAG(<span class=\"string\">'http_api_demo'</span>,</div><div class=\"line\">         default_args=default_args,</div><div class=\"line\">         schedule_interval=<span class=\"string\">\"5 * * * *\"</span>,</div><div class=\"line\">         catchup=<span class=\"keyword\">False</span>) <span class=\"keyword\">as</span> dag:</div><div class=\"line\">    t1 = BashOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'print_current_date'</span>,</div><div class=\"line\">        bash_command=<span class=\"string\">'date'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t2 = SimpleHttpOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'get_person'</span>,</div><div class=\"line\">        http_conn_id=<span class=\"string\">'http_test'</span>,</div><div class=\"line\">        method=<span class=\"string\">'GET'</span>,</div><div class=\"line\">        headers=&#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span>&#125;,</div><div class=\"line\">        endpoint=api,</div><div class=\"line\">        xcom_push=<span class=\"keyword\">True</span>,  <span class=\"comment\"># 将结果通过xcom传递给下一个task</span></div><div class=\"line\">        response_check=<span class=\"keyword\">lambda</span> response: <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>,</div><div class=\"line\">    )</div><div class=\"line\">    t3 = SimpleHttpOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'post_login'</span>,</div><div class=\"line\">        http_conn_id=<span class=\"string\">'test_http'</span>,</div><div class=\"line\">        method=<span class=\"string\">'POST'</span>,</div><div class=\"line\">        headers=&#123;</div><div class=\"line\">            <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">'XMLHttpRequest'</span>,</div><div class=\"line\">            <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json; charset=UTF-8\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        endpoint=login_api,</div><div class=\"line\">        xcom_push=<span class=\"keyword\">True</span>,  <span class=\"comment\"># 将结果通过xcom传递给下一个task</span></div><div class=\"line\">        response_check=<span class=\"keyword\">lambda</span> response: <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>,</div><div class=\"line\">        data=json.dumps(&#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'admin'</span>&#125;),</div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"comment\"># PostgresOperator</span></div><div class=\"line\">    t4 = SimpleHttpOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'get_task'</span>,</div><div class=\"line\">        http_conn_id=<span class=\"string\">'test_http'</span>,</div><div class=\"line\">        method=<span class=\"string\">'GET'</span>,</div><div class=\"line\">        headers=&#123;</div><div class=\"line\">            <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">'XMLHttpRequest'</span>,</div><div class=\"line\">            <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json; charset=UTF-8\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">'jwt &#123;&#125;'</span>.format(Variable.get(<span class=\"string\">'token'</span>)),  <span class=\"comment\"># 这里需要获取到login的token</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        endpoint=get_task_api,</div><div class=\"line\">        xcom_push=<span class=\"keyword\">True</span>,  <span class=\"comment\"># 将结果通过xcom传递给下一个task</span></div><div class=\"line\">        response_check=<span class=\"keyword\">lambda</span> response: <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>,</div><div class=\"line\">        trigger_rule=TriggerRule.NONE_FAILED</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t5 = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'data_task'</span>,</div><div class=\"line\">        python_callable=get_http_data,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">        <span class=\"comment\"># trigger_rule=TriggerRule.ONE_SUCCESS</span></div><div class=\"line\">    )</div><div class=\"line\">    t6 = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'test_data'</span>,</div><div class=\"line\">        python_callable=get_data,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span></div><div class=\"line\">    )</div><div class=\"line\">    t7 = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'sleep_data'</span>,</div><div class=\"line\">        python_callable=get_data,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t1 &gt;&gt; t2 &gt;&gt; t3 &gt;&gt; [t5, t6] &gt;&gt; t4 &gt;&gt; t7</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    dag.cli()</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>最近在调研Airflow demo相关的问题和解决方案， 主要问题有：</p>\n<ul>\n<li>Dags中任务启动时，参数如何传递</li>\n<li>Task任务之间的依赖关系，返回值如何被其他task使用</li>\n<li>运行docker程序</li>\n<li>Http API请求实现</li>\n</ul>\n<h4 id=\"具体说明\"><a href=\"#具体说明\" class=\"headerlink\" title=\"具体说明\"></a>具体说明</h4><h5 id=\"Dags中任务启动时，参数如何传递\"><a href=\"#Dags中任务启动时，参数如何传递\" class=\"headerlink\" title=\"Dags中任务启动时，参数如何传递\"></a>Dags中任务启动时，参数如何传递</h5><p>Airflow中可以使用Variables来定义变量来传递参数，该变量为全局变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置变量</span></div><div class=\"line\">airflow variables --set keyName value <span class=\"comment\"># 或者管理UI设置</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 获取变量</span></div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\">message = Variable.get(<span class=\"string\">'message'</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"Task任务之间的依赖关系，返回值如何被其他task使用\"><a href=\"#Task任务之间的依赖关系，返回值如何被其他task使用\" class=\"headerlink\" title=\"Task任务之间的依赖关系，返回值如何被其他task使用\"></a>Task任务之间的依赖关系，返回值如何被其他task使用</h5><p>通过xcom来返回给后面的task任务使用任务的返回值，使用kwargs[‘task_instance’].xcom_pull(task_ids=’run_task’)来获取run_task任务的返回值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta, datetime</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\"> </div><div class=\"line\">default_args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'description'</span>: <span class=\"string\">'Use of the Xcom'</span>,</div><div class=\"line\">    <span class=\"string\">'depend_on_past'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>),</div><div class=\"line\">    <span class=\"string\">'email_on_failure'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'email_on_retry'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'retries'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'retry_delay'</span>: timedelta(minutes=<span class=\"number\">30</span>)</div><div class=\"line\">    <span class=\"comment\"># 'queue': 'bash_queue',</span></div><div class=\"line\">    <span class=\"comment\"># 'pool': 'backfill',</span></div><div class=\"line\">    <span class=\"comment\"># 'priority_weight': 10,</span></div><div class=\"line\">    <span class=\"comment\"># 'end_date': datetime(2016, 1, 1),</span></div><div class=\"line\">    <span class=\"comment\"># 'wait_for_downstream': False,</span></div><div class=\"line\">    <span class=\"comment\"># 'dag': dag,</span></div><div class=\"line\">    <span class=\"comment\"># 'adhoc':False,</span></div><div class=\"line\">    <span class=\"comment\"># 'sla': timedelta(hours=2),</span></div><div class=\"line\">    <span class=\"comment\"># 'execution_timeout': timedelta(seconds=300),</span></div><div class=\"line\">    <span class=\"comment\"># 'on_failure_callback': some_function,</span></div><div class=\"line\">    <span class=\"comment\"># 'on_success_callback': some_other_function,</span></div><div class=\"line\">    <span class=\"comment\"># 'on_retry_callback': another_function,</span></div><div class=\"line\">    <span class=\"comment\"># 'trigger_rule': u'all_success'</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">dag = DAG(</div><div class=\"line\">    <span class=\"string\">'xcom_demo'</span>,</div><div class=\"line\">    default_args=default_args,</div><div class=\"line\">    schedule_interval=<span class=\"keyword\">None</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_this_func</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    message = Variable.get(<span class=\"string\">'message'</span>)</div><div class=\"line\">    print(<span class=\"string\">'message------&gt;'</span>, message)</div><div class=\"line\">    <span class=\"keyword\">return</span> message</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">run_task = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'run_task'</span>,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    python_callable=run_this_func,</div><div class=\"line\">    dag=dag</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_hello</span><span class=\"params\">(**context)</span>:</span></div><div class=\"line\">    before_data = context[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'run_task'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> before_data</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">hello_operator = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'hello_task'</span>,</div><div class=\"line\">    python_callable=print_hello,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">three</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    frist_data = kwargs[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'run_task'</span>)</div><div class=\"line\">    two_data = kwargs[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'hello_task'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> frist_data, two_data</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">last_operator = PythonOperator(</div><div class=\"line\">    task_id=<span class=\"string\">'last_task'</span>,</div><div class=\"line\">    python_callable=three,</div><div class=\"line\">    provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    dag=dag,</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">run_task &gt;&gt; hello_operator &gt;&gt; last_operator  <span class=\"comment\"># xcoms</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    dag.cli()</div></pre></td></tr></table></figure></p>\n<h5 id=\"运行docker程序\"><a href=\"#运行docker程序\" class=\"headerlink\" title=\"运行docker程序\"></a>运行docker程序</h5><p>执行器DockerOperator 完成docker运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, timedelta</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.docker_operator <span class=\"keyword\">import</span> DockerOperator</div><div class=\"line\"> </div><div class=\"line\">default_args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'description'</span>: <span class=\"string\">'Use of the DockerOperator'</span>,</div><div class=\"line\">    <span class=\"string\">'depend_on_past'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>),</div><div class=\"line\">    <span class=\"string\">'email_on_failure'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'email_on_retry'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'retries'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'retry_delay'</span>: timedelta(minutes=<span class=\"number\">30</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">image = <span class=\"string\">'docker.api:0.1.0'</span></div><div class=\"line\">volumes = [<span class=\"string\">'/home/user/data:/data'</span>]</div><div class=\"line\">run_commend = <span class=\"string\">'cd /data/ &amp;&amp; ./run.sh'</span></div><div class=\"line\"><span class=\"keyword\">with</span> DAG(<span class=\"string\">'docker_demo'</span>, default_args=default_args, schedule_interval=<span class=\"keyword\">None</span>, catchup=<span class=\"keyword\">False</span>) <span class=\"keyword\">as</span> dag:</div><div class=\"line\">    t1 = BashOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'print_current_date'</span>,</div><div class=\"line\">        bash_command=<span class=\"string\">'date'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t2 = DockerOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'dpt_docker'</span>,</div><div class=\"line\">        image=image,</div><div class=\"line\">        auto_remove=<span class=\"keyword\">True</span>,</div><div class=\"line\">        command=run_commend,</div><div class=\"line\">        force_pull=<span class=\"keyword\">True</span>,</div><div class=\"line\">        volumes=volumes,</div><div class=\"line\">        <span class=\"comment\"># network_mode='bridge'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t3 = BashOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'print_hello'</span>,</div><div class=\"line\">        bash_command=<span class=\"string\">'echo \"hello world\"'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t1 &gt;&gt; t2 &gt;&gt; t3</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    dag.cli()</div></pre></td></tr></table></figure></p>\n<h5 id=\"Http-API请求实现\"><a href=\"#Http-API请求实现\" class=\"headerlink\" title=\"Http API请求实现\"></a>Http API请求实现</h5><p>执行器SimpleHttpOperator 完成http api请求<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">from</span> airflow <span class=\"keyword\">import</span> DAG</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.bash_operator <span class=\"keyword\">import</span> BashOperator</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.python_operator <span class=\"keyword\">import</span> PythonOperator</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.utils.trigger_rule <span class=\"keyword\">import</span> TriggerRule</div><div class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, timedelta</div><div class=\"line\"><span class=\"keyword\">from</span> airflow.operators.http_operator <span class=\"keyword\">import</span> SimpleHttpOperator</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">from</span> airflow.models <span class=\"keyword\">import</span> Variable</div><div class=\"line\"> </div><div class=\"line\">default_args = &#123;</div><div class=\"line\">    <span class=\"string\">'owner'</span>: <span class=\"string\">'airflow'</span>,</div><div class=\"line\">    <span class=\"string\">'description'</span>: <span class=\"string\">'Use of the SimpleHttpOperator'</span>,</div><div class=\"line\">    <span class=\"string\">'depend_on_past'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'start_date'</span>: datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>),</div><div class=\"line\">    <span class=\"string\">'email_on_failure'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'email_on_retry'</span>: <span class=\"keyword\">False</span>,</div><div class=\"line\">    <span class=\"string\">'retries'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'retry_delay'</span>: timedelta(minutes=<span class=\"number\">30</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">http_add = <span class=\"string\">'http://127.0.0.1:8888'</span></div><div class=\"line\">api = <span class=\"string\">'/person/'</span></div><div class=\"line\">url = <span class=\"string\">'http://1027.0.0.1:8889'</span></div><div class=\"line\">login_api = <span class=\"string\">'/user/login/'</span></div><div class=\"line\">get_task_api = <span class=\"string\">'/task/'</span></div><div class=\"line\">os.environ[</div><div class=\"line\">    <span class=\"string\">'AIRFLOW_CONN_HTTP_TEST'</span>] = http_add  <span class=\"comment\"># 这里定义不同的接口规则,在SimpleHttpOperator中http_conn_id需要指定IRFLOW_CONN_*对应的内容,默认接口指向google的api</span></div><div class=\"line\">os.environ[<span class=\"string\">'AIRFLOW_CONN_TEST_HTTP'</span>] = url</div><div class=\"line\"> </div><div class=\"line\">token = <span class=\"string\">''</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_http_data</span><span class=\"params\">(**context)</span>:</span></div><div class=\"line\">    token_data = context[<span class=\"string\">'task_instance'</span>].xcom_pull(task_ids=<span class=\"string\">'post_login'</span>)</div><div class=\"line\">    token_dict = json.loads(token_data)</div><div class=\"line\">    token = token_dict[<span class=\"string\">'data'</span>][<span class=\"string\">'token'</span>]</div><div class=\"line\">    Variable.set(<span class=\"string\">'token'</span>, token)</div><div class=\"line\">    <span class=\"keyword\">return</span> token</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_data</span><span class=\"params\">(**context)</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> token</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">with</span> DAG(<span class=\"string\">'http_api_demo'</span>,</div><div class=\"line\">         default_args=default_args,</div><div class=\"line\">         schedule_interval=<span class=\"string\">\"5 * * * *\"</span>,</div><div class=\"line\">         catchup=<span class=\"keyword\">False</span>) <span class=\"keyword\">as</span> dag:</div><div class=\"line\">    t1 = BashOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'print_current_date'</span>,</div><div class=\"line\">        bash_command=<span class=\"string\">'date'</span></div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t2 = SimpleHttpOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'get_person'</span>,</div><div class=\"line\">        http_conn_id=<span class=\"string\">'http_test'</span>,</div><div class=\"line\">        method=<span class=\"string\">'GET'</span>,</div><div class=\"line\">        headers=&#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span>&#125;,</div><div class=\"line\">        endpoint=api,</div><div class=\"line\">        xcom_push=<span class=\"keyword\">True</span>,  <span class=\"comment\"># 将结果通过xcom传递给下一个task</span></div><div class=\"line\">        response_check=<span class=\"keyword\">lambda</span> response: <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>,</div><div class=\"line\">    )</div><div class=\"line\">    t3 = SimpleHttpOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'post_login'</span>,</div><div class=\"line\">        http_conn_id=<span class=\"string\">'test_http'</span>,</div><div class=\"line\">        method=<span class=\"string\">'POST'</span>,</div><div class=\"line\">        headers=&#123;</div><div class=\"line\">            <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">'XMLHttpRequest'</span>,</div><div class=\"line\">            <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json; charset=UTF-8\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        endpoint=login_api,</div><div class=\"line\">        xcom_push=<span class=\"keyword\">True</span>,  <span class=\"comment\"># 将结果通过xcom传递给下一个task</span></div><div class=\"line\">        response_check=<span class=\"keyword\">lambda</span> response: <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>,</div><div class=\"line\">        data=json.dumps(&#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'admin'</span>&#125;),</div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"comment\"># PostgresOperator</span></div><div class=\"line\">    t4 = SimpleHttpOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'get_task'</span>,</div><div class=\"line\">        http_conn_id=<span class=\"string\">'test_http'</span>,</div><div class=\"line\">        method=<span class=\"string\">'GET'</span>,</div><div class=\"line\">        headers=&#123;</div><div class=\"line\">            <span class=\"string\">\"X-Requested-With\"</span>: <span class=\"string\">'XMLHttpRequest'</span>,</div><div class=\"line\">            <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json; charset=UTF-8\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">'jwt &#123;&#125;'</span>.format(Variable.get(<span class=\"string\">'token'</span>)),  <span class=\"comment\"># 这里需要获取到login的token</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        endpoint=get_task_api,</div><div class=\"line\">        xcom_push=<span class=\"keyword\">True</span>,  <span class=\"comment\"># 将结果通过xcom传递给下一个task</span></div><div class=\"line\">        response_check=<span class=\"keyword\">lambda</span> response: <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span> <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>,</div><div class=\"line\">        trigger_rule=TriggerRule.NONE_FAILED</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t5 = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'data_task'</span>,</div><div class=\"line\">        python_callable=get_http_data,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">        <span class=\"comment\"># trigger_rule=TriggerRule.ONE_SUCCESS</span></div><div class=\"line\">    )</div><div class=\"line\">    t6 = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'test_data'</span>,</div><div class=\"line\">        python_callable=get_data,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span></div><div class=\"line\">    )</div><div class=\"line\">    t7 = PythonOperator(</div><div class=\"line\">        task_id=<span class=\"string\">'sleep_data'</span>,</div><div class=\"line\">        python_callable=get_data,</div><div class=\"line\">        provide_context=<span class=\"keyword\">True</span>,</div><div class=\"line\">    )</div><div class=\"line\"> </div><div class=\"line\">    t1 &gt;&gt; t2 &gt;&gt; t3 &gt;&gt; [t5, t6] &gt;&gt; t4 &gt;&gt; t7</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    dag.cli()</div></pre></td></tr></table></figure></p>\n"},{"title":"运维 Git日常笔记","date":"2017-12-14T14:10:05.000Z","_content":"#### 常用命令\n```\ngit push origin master\t\t# 将本地origin提交到远端 \ngit push origin master -f       # 将本地origin 强制覆盖远端\ngit pull --rebase upstream master# 将upstream master 和本地master合并到本地\ngit checkout -b xxx   \t\t# 创建并切换到xxx分支;相当于（git branch dev；git checkout dev）\ngit checkout xxx      \t\t# 切换到xxx分支\ngit checkout -- xxx   \t\t# 撤销xxx文件的修改内容\ngit branch            \t\t# 查看本地分支\ngit branch -d xxx     \t\t# 删除xxx分支\ngit branch -D xxx     \t\t# 强制删除xxx分支\ngit status    \t      \t\t# 查看文件是否被修改过\ngit diff      \t      \t\t# 查看文件修改\ngit merge dev         \t\t# 将dev分支的工作成果合并到master分支上，git merge命令用于合并指定分支到当前分支(Fast-forward 说明这次合并是\"快进模式\")\n \n##### git clone #####\ngit clone git@github.com:ttxsgoto/studypy.git     \t# 克隆为origin名称\ngit clone -o abc git@github.com:ttxsgoto/studypy.git    # -o 指定 克隆出来的名称为abc\ngit clone git@github.com:ttxsgoto/studypy.git  xxx  \t# 将远端的版本克隆下来到 xxx文件下\n \n##### git remote #####\ngit remote -v  \t\t   \t# 查看主机名称和远端的地址\ngit remote show xxx(主机名) \t# 查看xxx的具体相关信息\ngit remote add name url    \t# 添加仓库名称\ngit remote rm name    \t   \t# 删除本地仓库名称\ngit remote rename old new  \t# 修改本地仓库名称\n \n##### git fetch #####\ngit fetch    \t\t\t# 将远程所有的更新取回本地\ngit fetch 远程主机名    \t \t# 将某个远程主机的更新，全部取回本地\ngit fetch 远程主机名    分支名\t# 将远程主机的分支，取回本地\n \n##### git pull #####\ngit pull <远程主机名> <远程分支名>:<本地分支名>\ngit pull origin master  \t# 远程主机的master分支和当前所在分支合并\ngit pull origin next:master     # 取回origin主机的next分支和本地master分支合并\ngit pull --rebase <remote>  <master>:<master>    # 合并采用--rebase模式合并\n \n##### git push #####\ngit push <远程主机名> <本地分支名>:<远程分支名>\ngit push origin master    \t# 将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建\ngit push origin :master    \t# 删除远程分支名master\ngit push -u origin master    \t# -u 选项指定一个默认主机，这样后面就可以不加任何参数使用\ngit push --all origin           # 无论是否存在对应的远程分支，将本地的所有分支都推送到远程主机\ngit push --force origin         # 远程主机版本比本地版本新，推送时会报错，需要先git pull合并差异在推送，也可以强制推送，添加--force参数\ngit push origin --tags          # git push 不会推送标签(tag),可以使用--tags选项，来推送标签\n \n##### git stash #####\ngit stash  \t\t\t# 将工作暂存起来，进行其他操作\ngit stash pop  \t\t\t# 将栈中的信息重新打开\ngit stash list  \t\t# 列出栈中的信息\n \n##### git log #####\ngit log --graph --pretty=oneline --abbrev-commit  # 查看分支合并图\ngit log --pretty=oneline\n \n##### git reset #####\ngit log   \t\t\t# 查看详细日志，有时间点\ngit reflog \t\t\t# 查看命令历史，以便确定要回到未来的哪个版本\ngit reset --hard 83ec811628a08  # 回到相对应的版本，需要知道版本号，版本号没必要写全，前几位就可以\n\n```\n\n#### git 检查修改\n1. 已修改，未暂存, 查看更改内容--- git diff   内容修改后，没有使用 git add xxx 添加到缓存区\n2. 已暂存，未提交, 查看更改内容--- git diff --cached  使用git add xxx已添加到缓存区\n3. 已提交，未推送,  查看更改内容--- git diff master origin/master 使用git commit 提交到本地仓库\n    -- 这里master就是你的本地仓库，而origin/master就是你的远程仓库\n    -- master是主分支的意思,origin就代表远程\n    -- 比较本地master和origin的master区别\n\n#### git 撤销修改\n1. 已修改，未暂存,  撤销修改内容--- git reset --hard 或者(git checkout xxx) 内容修改后，没有使用 git add xxx 添加到缓存区\n2. 已暂存，未提交,  撤销修改内容--- git reset --hard 或者(git reset 然后执行 git checkout xxx)  使用git add xxx已添加到缓存区\n3. 已提交，未推送,  撤销修改内容--- git reset --hard origin/master  使用git commit 提交到本地仓库\n    -- git reset --hard origin/master 远程仓库把代码取回来\n4. 已推送到远程仓库, 撤销修改内容,回到上一个版本 --- git reset --hard HEAD^ 然后git push origin master -f \n    --  回滚到上一个版本\n    --  将本地分支，强制覆盖origin maser\n\n","source":"_posts/yw-git-basic.md","raw":"---\ntitle: 运维 Git日常笔记\ndate: 2017-12-14 22:10:05\ntags:\n  - Git\ncategories:\n  - 运维\n---\n#### 常用命令\n```\ngit push origin master\t\t# 将本地origin提交到远端 \ngit push origin master -f       # 将本地origin 强制覆盖远端\ngit pull --rebase upstream master# 将upstream master 和本地master合并到本地\ngit checkout -b xxx   \t\t# 创建并切换到xxx分支;相当于（git branch dev；git checkout dev）\ngit checkout xxx      \t\t# 切换到xxx分支\ngit checkout -- xxx   \t\t# 撤销xxx文件的修改内容\ngit branch            \t\t# 查看本地分支\ngit branch -d xxx     \t\t# 删除xxx分支\ngit branch -D xxx     \t\t# 强制删除xxx分支\ngit status    \t      \t\t# 查看文件是否被修改过\ngit diff      \t      \t\t# 查看文件修改\ngit merge dev         \t\t# 将dev分支的工作成果合并到master分支上，git merge命令用于合并指定分支到当前分支(Fast-forward 说明这次合并是\"快进模式\")\n \n##### git clone #####\ngit clone git@github.com:ttxsgoto/studypy.git     \t# 克隆为origin名称\ngit clone -o abc git@github.com:ttxsgoto/studypy.git    # -o 指定 克隆出来的名称为abc\ngit clone git@github.com:ttxsgoto/studypy.git  xxx  \t# 将远端的版本克隆下来到 xxx文件下\n \n##### git remote #####\ngit remote -v  \t\t   \t# 查看主机名称和远端的地址\ngit remote show xxx(主机名) \t# 查看xxx的具体相关信息\ngit remote add name url    \t# 添加仓库名称\ngit remote rm name    \t   \t# 删除本地仓库名称\ngit remote rename old new  \t# 修改本地仓库名称\n \n##### git fetch #####\ngit fetch    \t\t\t# 将远程所有的更新取回本地\ngit fetch 远程主机名    \t \t# 将某个远程主机的更新，全部取回本地\ngit fetch 远程主机名    分支名\t# 将远程主机的分支，取回本地\n \n##### git pull #####\ngit pull <远程主机名> <远程分支名>:<本地分支名>\ngit pull origin master  \t# 远程主机的master分支和当前所在分支合并\ngit pull origin next:master     # 取回origin主机的next分支和本地master分支合并\ngit pull --rebase <remote>  <master>:<master>    # 合并采用--rebase模式合并\n \n##### git push #####\ngit push <远程主机名> <本地分支名>:<远程分支名>\ngit push origin master    \t# 将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建\ngit push origin :master    \t# 删除远程分支名master\ngit push -u origin master    \t# -u 选项指定一个默认主机，这样后面就可以不加任何参数使用\ngit push --all origin           # 无论是否存在对应的远程分支，将本地的所有分支都推送到远程主机\ngit push --force origin         # 远程主机版本比本地版本新，推送时会报错，需要先git pull合并差异在推送，也可以强制推送，添加--force参数\ngit push origin --tags          # git push 不会推送标签(tag),可以使用--tags选项，来推送标签\n \n##### git stash #####\ngit stash  \t\t\t# 将工作暂存起来，进行其他操作\ngit stash pop  \t\t\t# 将栈中的信息重新打开\ngit stash list  \t\t# 列出栈中的信息\n \n##### git log #####\ngit log --graph --pretty=oneline --abbrev-commit  # 查看分支合并图\ngit log --pretty=oneline\n \n##### git reset #####\ngit log   \t\t\t# 查看详细日志，有时间点\ngit reflog \t\t\t# 查看命令历史，以便确定要回到未来的哪个版本\ngit reset --hard 83ec811628a08  # 回到相对应的版本，需要知道版本号，版本号没必要写全，前几位就可以\n\n```\n\n#### git 检查修改\n1. 已修改，未暂存, 查看更改内容--- git diff   内容修改后，没有使用 git add xxx 添加到缓存区\n2. 已暂存，未提交, 查看更改内容--- git diff --cached  使用git add xxx已添加到缓存区\n3. 已提交，未推送,  查看更改内容--- git diff master origin/master 使用git commit 提交到本地仓库\n    -- 这里master就是你的本地仓库，而origin/master就是你的远程仓库\n    -- master是主分支的意思,origin就代表远程\n    -- 比较本地master和origin的master区别\n\n#### git 撤销修改\n1. 已修改，未暂存,  撤销修改内容--- git reset --hard 或者(git checkout xxx) 内容修改后，没有使用 git add xxx 添加到缓存区\n2. 已暂存，未提交,  撤销修改内容--- git reset --hard 或者(git reset 然后执行 git checkout xxx)  使用git add xxx已添加到缓存区\n3. 已提交，未推送,  撤销修改内容--- git reset --hard origin/master  使用git commit 提交到本地仓库\n    -- git reset --hard origin/master 远程仓库把代码取回来\n4. 已推送到远程仓库, 撤销修改内容,回到上一个版本 --- git reset --hard HEAD^ 然后git push origin master -f \n    --  回滚到上一个版本\n    --  将本地分支，强制覆盖origin maser\n\n","slug":"yw-git-basic","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zc006tct8ue2epknxb","content":"<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin master\t\t# 将本地origin提交到远端 </div><div class=\"line\">git push origin master -f       # 将本地origin 强制覆盖远端</div><div class=\"line\">git pull --rebase upstream master# 将upstream master 和本地master合并到本地</div><div class=\"line\">git checkout -b xxx   \t\t# 创建并切换到xxx分支;相当于（git branch dev；git checkout dev）</div><div class=\"line\">git checkout xxx      \t\t# 切换到xxx分支</div><div class=\"line\">git checkout -- xxx   \t\t# 撤销xxx文件的修改内容</div><div class=\"line\">git branch            \t\t# 查看本地分支</div><div class=\"line\">git branch -d xxx     \t\t# 删除xxx分支</div><div class=\"line\">git branch -D xxx     \t\t# 强制删除xxx分支</div><div class=\"line\">git status    \t      \t\t# 查看文件是否被修改过</div><div class=\"line\">git diff      \t      \t\t# 查看文件修改</div><div class=\"line\">git merge dev         \t\t# 将dev分支的工作成果合并到master分支上，git merge命令用于合并指定分支到当前分支(Fast-forward 说明这次合并是&quot;快进模式&quot;)</div><div class=\"line\"> </div><div class=\"line\">##### git clone #####</div><div class=\"line\">git clone git@github.com:ttxsgoto/studypy.git     \t# 克隆为origin名称</div><div class=\"line\">git clone -o abc git@github.com:ttxsgoto/studypy.git    # -o 指定 克隆出来的名称为abc</div><div class=\"line\">git clone git@github.com:ttxsgoto/studypy.git  xxx  \t# 将远端的版本克隆下来到 xxx文件下</div><div class=\"line\"> </div><div class=\"line\">##### git remote #####</div><div class=\"line\">git remote -v  \t\t   \t# 查看主机名称和远端的地址</div><div class=\"line\">git remote show xxx(主机名) \t# 查看xxx的具体相关信息</div><div class=\"line\">git remote add name url    \t# 添加仓库名称</div><div class=\"line\">git remote rm name    \t   \t# 删除本地仓库名称</div><div class=\"line\">git remote rename old new  \t# 修改本地仓库名称</div><div class=\"line\"> </div><div class=\"line\">##### git fetch #####</div><div class=\"line\">git fetch    \t\t\t# 将远程所有的更新取回本地</div><div class=\"line\">git fetch 远程主机名    \t \t# 将某个远程主机的更新，全部取回本地</div><div class=\"line\">git fetch 远程主机名    分支名\t# 将远程主机的分支，取回本地</div><div class=\"line\"> </div><div class=\"line\">##### git pull #####</div><div class=\"line\">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div><div class=\"line\">git pull origin master  \t# 远程主机的master分支和当前所在分支合并</div><div class=\"line\">git pull origin next:master     # 取回origin主机的next分支和本地master分支合并</div><div class=\"line\">git pull --rebase &lt;remote&gt;  &lt;master&gt;:&lt;master&gt;    # 合并采用--rebase模式合并</div><div class=\"line\"> </div><div class=\"line\">##### git push #####</div><div class=\"line\">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</div><div class=\"line\">git push origin master    \t# 将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</div><div class=\"line\">git push origin :master    \t# 删除远程分支名master</div><div class=\"line\">git push -u origin master    \t# -u 选项指定一个默认主机，这样后面就可以不加任何参数使用</div><div class=\"line\">git push --all origin           # 无论是否存在对应的远程分支，将本地的所有分支都推送到远程主机</div><div class=\"line\">git push --force origin         # 远程主机版本比本地版本新，推送时会报错，需要先git pull合并差异在推送，也可以强制推送，添加--force参数</div><div class=\"line\">git push origin --tags          # git push 不会推送标签(tag),可以使用--tags选项，来推送标签</div><div class=\"line\"> </div><div class=\"line\">##### git stash #####</div><div class=\"line\">git stash  \t\t\t# 将工作暂存起来，进行其他操作</div><div class=\"line\">git stash pop  \t\t\t# 将栈中的信息重新打开</div><div class=\"line\">git stash list  \t\t# 列出栈中的信息</div><div class=\"line\"> </div><div class=\"line\">##### git log #####</div><div class=\"line\">git log --graph --pretty=oneline --abbrev-commit  # 查看分支合并图</div><div class=\"line\">git log --pretty=oneline</div><div class=\"line\"> </div><div class=\"line\">##### git reset #####</div><div class=\"line\">git log   \t\t\t# 查看详细日志，有时间点</div><div class=\"line\">git reflog \t\t\t# 查看命令历史，以便确定要回到未来的哪个版本</div><div class=\"line\">git reset --hard 83ec811628a08  # 回到相对应的版本，需要知道版本号，版本号没必要写全，前几位就可以</div></pre></td></tr></table></figure>\n<h4 id=\"git-检查修改\"><a href=\"#git-检查修改\" class=\"headerlink\" title=\"git 检查修改\"></a>git 检查修改</h4><ol>\n<li>已修改，未暂存, 查看更改内容— git diff   内容修改后，没有使用 git add xxx 添加到缓存区</li>\n<li>已暂存，未提交, 查看更改内容— git diff –cached  使用git add xxx已添加到缓存区</li>\n<li>已提交，未推送,  查看更改内容— git diff master origin/master 使用git commit 提交到本地仓库<br> – 这里master就是你的本地仓库，而origin/master就是你的远程仓库<br> – master是主分支的意思,origin就代表远程<br> – 比较本地master和origin的master区别</li>\n</ol>\n<h4 id=\"git-撤销修改\"><a href=\"#git-撤销修改\" class=\"headerlink\" title=\"git 撤销修改\"></a>git 撤销修改</h4><ol>\n<li>已修改，未暂存,  撤销修改内容— git reset –hard 或者(git checkout xxx) 内容修改后，没有使用 git add xxx 添加到缓存区</li>\n<li>已暂存，未提交,  撤销修改内容— git reset –hard 或者(git reset 然后执行 git checkout xxx)  使用git add xxx已添加到缓存区</li>\n<li>已提交，未推送,  撤销修改内容— git reset –hard origin/master  使用git commit 提交到本地仓库<br> – git reset –hard origin/master 远程仓库把代码取回来</li>\n<li>已推送到远程仓库, 撤销修改内容,回到上一个版本 — git reset –hard HEAD^ 然后git push origin master -f<br> –  回滚到上一个版本<br> –  将本地分支，强制覆盖origin maser</li>\n</ol>\n","excerpt":"","more":"<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin master\t\t# 将本地origin提交到远端 </div><div class=\"line\">git push origin master -f       # 将本地origin 强制覆盖远端</div><div class=\"line\">git pull --rebase upstream master# 将upstream master 和本地master合并到本地</div><div class=\"line\">git checkout -b xxx   \t\t# 创建并切换到xxx分支;相当于（git branch dev；git checkout dev）</div><div class=\"line\">git checkout xxx      \t\t# 切换到xxx分支</div><div class=\"line\">git checkout -- xxx   \t\t# 撤销xxx文件的修改内容</div><div class=\"line\">git branch            \t\t# 查看本地分支</div><div class=\"line\">git branch -d xxx     \t\t# 删除xxx分支</div><div class=\"line\">git branch -D xxx     \t\t# 强制删除xxx分支</div><div class=\"line\">git status    \t      \t\t# 查看文件是否被修改过</div><div class=\"line\">git diff      \t      \t\t# 查看文件修改</div><div class=\"line\">git merge dev         \t\t# 将dev分支的工作成果合并到master分支上，git merge命令用于合并指定分支到当前分支(Fast-forward 说明这次合并是&quot;快进模式&quot;)</div><div class=\"line\"> </div><div class=\"line\">##### git clone #####</div><div class=\"line\">git clone git@github.com:ttxsgoto/studypy.git     \t# 克隆为origin名称</div><div class=\"line\">git clone -o abc git@github.com:ttxsgoto/studypy.git    # -o 指定 克隆出来的名称为abc</div><div class=\"line\">git clone git@github.com:ttxsgoto/studypy.git  xxx  \t# 将远端的版本克隆下来到 xxx文件下</div><div class=\"line\"> </div><div class=\"line\">##### git remote #####</div><div class=\"line\">git remote -v  \t\t   \t# 查看主机名称和远端的地址</div><div class=\"line\">git remote show xxx(主机名) \t# 查看xxx的具体相关信息</div><div class=\"line\">git remote add name url    \t# 添加仓库名称</div><div class=\"line\">git remote rm name    \t   \t# 删除本地仓库名称</div><div class=\"line\">git remote rename old new  \t# 修改本地仓库名称</div><div class=\"line\"> </div><div class=\"line\">##### git fetch #####</div><div class=\"line\">git fetch    \t\t\t# 将远程所有的更新取回本地</div><div class=\"line\">git fetch 远程主机名    \t \t# 将某个远程主机的更新，全部取回本地</div><div class=\"line\">git fetch 远程主机名    分支名\t# 将远程主机的分支，取回本地</div><div class=\"line\"> </div><div class=\"line\">##### git pull #####</div><div class=\"line\">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div><div class=\"line\">git pull origin master  \t# 远程主机的master分支和当前所在分支合并</div><div class=\"line\">git pull origin next:master     # 取回origin主机的next分支和本地master分支合并</div><div class=\"line\">git pull --rebase &lt;remote&gt;  &lt;master&gt;:&lt;master&gt;    # 合并采用--rebase模式合并</div><div class=\"line\"> </div><div class=\"line\">##### git push #####</div><div class=\"line\">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</div><div class=\"line\">git push origin master    \t# 将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</div><div class=\"line\">git push origin :master    \t# 删除远程分支名master</div><div class=\"line\">git push -u origin master    \t# -u 选项指定一个默认主机，这样后面就可以不加任何参数使用</div><div class=\"line\">git push --all origin           # 无论是否存在对应的远程分支，将本地的所有分支都推送到远程主机</div><div class=\"line\">git push --force origin         # 远程主机版本比本地版本新，推送时会报错，需要先git pull合并差异在推送，也可以强制推送，添加--force参数</div><div class=\"line\">git push origin --tags          # git push 不会推送标签(tag),可以使用--tags选项，来推送标签</div><div class=\"line\"> </div><div class=\"line\">##### git stash #####</div><div class=\"line\">git stash  \t\t\t# 将工作暂存起来，进行其他操作</div><div class=\"line\">git stash pop  \t\t\t# 将栈中的信息重新打开</div><div class=\"line\">git stash list  \t\t# 列出栈中的信息</div><div class=\"line\"> </div><div class=\"line\">##### git log #####</div><div class=\"line\">git log --graph --pretty=oneline --abbrev-commit  # 查看分支合并图</div><div class=\"line\">git log --pretty=oneline</div><div class=\"line\"> </div><div class=\"line\">##### git reset #####</div><div class=\"line\">git log   \t\t\t# 查看详细日志，有时间点</div><div class=\"line\">git reflog \t\t\t# 查看命令历史，以便确定要回到未来的哪个版本</div><div class=\"line\">git reset --hard 83ec811628a08  # 回到相对应的版本，需要知道版本号，版本号没必要写全，前几位就可以</div></pre></td></tr></table></figure>\n<h4 id=\"git-检查修改\"><a href=\"#git-检查修改\" class=\"headerlink\" title=\"git 检查修改\"></a>git 检查修改</h4><ol>\n<li>已修改，未暂存, 查看更改内容— git diff   内容修改后，没有使用 git add xxx 添加到缓存区</li>\n<li>已暂存，未提交, 查看更改内容— git diff –cached  使用git add xxx已添加到缓存区</li>\n<li>已提交，未推送,  查看更改内容— git diff master origin/master 使用git commit 提交到本地仓库<br> – 这里master就是你的本地仓库，而origin/master就是你的远程仓库<br> – master是主分支的意思,origin就代表远程<br> – 比较本地master和origin的master区别</li>\n</ol>\n<h4 id=\"git-撤销修改\"><a href=\"#git-撤销修改\" class=\"headerlink\" title=\"git 撤销修改\"></a>git 撤销修改</h4><ol>\n<li>已修改，未暂存,  撤销修改内容— git reset –hard 或者(git checkout xxx) 内容修改后，没有使用 git add xxx 添加到缓存区</li>\n<li>已暂存，未提交,  撤销修改内容— git reset –hard 或者(git reset 然后执行 git checkout xxx)  使用git add xxx已添加到缓存区</li>\n<li>已提交，未推送,  撤销修改内容— git reset –hard origin/master  使用git commit 提交到本地仓库<br> – git reset –hard origin/master 远程仓库把代码取回来</li>\n<li>已推送到远程仓库, 撤销修改内容,回到上一个版本 — git reset –hard HEAD^ 然后git push origin master -f<br> –  回滚到上一个版本<br> –  将本地分支，强制覆盖origin maser</li>\n</ol>\n"},{"title":"Jenkins+Gitlab+Harbor构建持续集成","date":"2019-01-04T12:41:44.000Z","_content":"\n#### 背景\n最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenkins工具，自动发布代码到对应环境中，然后进行测试，提高研发工作效率和减少运维人员重复工作\n\n\n#### 组件说明\n##### Jenkins\njenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能\n特点：\n- 分布式构建\n- 大量三方插件\n- 变更支持\n- 消息通知\n\n##### Gitlab\nGitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务\n特点：\n- 代码仓库管理\n- 多人协作\n- 完善的用户、权限管理\n\n##### Harbor\nHarbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器\n特点：\n- 基于角色的访问控制\n- 镜像复制\n- 鉴权认证管理\n- 用户管理，访问控制和活动审计\n- RESTful API\n\n#### 实现说明\n1. 通过Jenkins 生成的secret token来关联gitlab Webhooks设置url 和token，当代码有更新时，自动触发构建\n2. 将代码拉取到Jenkins运行节点中，通过基础镜像加dockerfile文件构建应用镜像，然后上传到Harbor服务器中\n3. 在测试服务器中拉取对应的镜像，然后运行起来\n4. 构建完成没有错误，发邮件通知相关人员\n\n#### 注意\n1. Jenkins系统设置中需要配置gitlab服务器地址和对应的gitlab api token用于Jenkins和gitlab交互通信\n2. Jenkins任务构建可以指定在固定节点上构建， 构建节点和应用服务器之间必须有登录权限\n3. Harbor镜像管理，需要有鉴权和认证设置\n\n\n\n\n\n\n\n","source":"_posts/yw-jenkins-ci.md","raw":"---\ntitle: Jenkins+Gitlab+Harbor构建持续集成\ndate: 2019-01-04 20:41:44\ntags:\n  - Jenkins\ncategories:\n  - 运维\n---\n\n#### 背景\n最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenkins工具，自动发布代码到对应环境中，然后进行测试，提高研发工作效率和减少运维人员重复工作\n\n\n#### 组件说明\n##### Jenkins\njenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能\n特点：\n- 分布式构建\n- 大量三方插件\n- 变更支持\n- 消息通知\n\n##### Gitlab\nGitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务\n特点：\n- 代码仓库管理\n- 多人协作\n- 完善的用户、权限管理\n\n##### Harbor\nHarbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器\n特点：\n- 基于角色的访问控制\n- 镜像复制\n- 鉴权认证管理\n- 用户管理，访问控制和活动审计\n- RESTful API\n\n#### 实现说明\n1. 通过Jenkins 生成的secret token来关联gitlab Webhooks设置url 和token，当代码有更新时，自动触发构建\n2. 将代码拉取到Jenkins运行节点中，通过基础镜像加dockerfile文件构建应用镜像，然后上传到Harbor服务器中\n3. 在测试服务器中拉取对应的镜像，然后运行起来\n4. 构建完成没有错误，发邮件通知相关人员\n\n#### 注意\n1. Jenkins系统设置中需要配置gitlab服务器地址和对应的gitlab api token用于Jenkins和gitlab交互通信\n2. Jenkins任务构建可以指定在固定节点上构建， 构建节点和应用服务器之间必须有登录权限\n3. Harbor镜像管理，需要有鉴权和认证设置\n\n\n\n\n\n\n\n","slug":"yw-jenkins-ci","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5ze006wct8ubjsi71g7","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenkins工具，自动发布代码到对应环境中，然后进行测试，提高研发工作效率和减少运维人员重复工作</p>\n<h4 id=\"组件说明\"><a href=\"#组件说明\" class=\"headerlink\" title=\"组件说明\"></a>组件说明</h4><h5 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h5><p>jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能<br>特点：</p>\n<ul>\n<li>分布式构建</li>\n<li>大量三方插件</li>\n<li>变更支持</li>\n<li>消息通知</li>\n</ul>\n<h5 id=\"Gitlab\"><a href=\"#Gitlab\" class=\"headerlink\" title=\"Gitlab\"></a>Gitlab</h5><p>Gitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务<br>特点：</p>\n<ul>\n<li>代码仓库管理</li>\n<li>多人协作</li>\n<li>完善的用户、权限管理</li>\n</ul>\n<h5 id=\"Harbor\"><a href=\"#Harbor\" class=\"headerlink\" title=\"Harbor\"></a>Harbor</h5><p>Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器<br>特点：</p>\n<ul>\n<li>基于角色的访问控制</li>\n<li>镜像复制</li>\n<li>鉴权认证管理</li>\n<li>用户管理，访问控制和活动审计</li>\n<li>RESTful API</li>\n</ul>\n<h4 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h4><ol>\n<li>通过Jenkins 生成的secret token来关联gitlab Webhooks设置url 和token，当代码有更新时，自动触发构建</li>\n<li>将代码拉取到Jenkins运行节点中，通过基础镜像加dockerfile文件构建应用镜像，然后上传到Harbor服务器中</li>\n<li>在测试服务器中拉取对应的镜像，然后运行起来</li>\n<li>构建完成没有错误，发邮件通知相关人员</li>\n</ol>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li>Jenkins系统设置中需要配置gitlab服务器地址和对应的gitlab api token用于Jenkins和gitlab交互通信</li>\n<li>Jenkins任务构建可以指定在固定节点上构建， 构建节点和应用服务器之间必须有登录权限</li>\n<li>Harbor镜像管理，需要有鉴权和认证设置</li>\n</ol>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenkins工具，自动发布代码到对应环境中，然后进行测试，提高研发工作效率和减少运维人员重复工作</p>\n<h4 id=\"组件说明\"><a href=\"#组件说明\" class=\"headerlink\" title=\"组件说明\"></a>组件说明</h4><h5 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h5><p>jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能<br>特点：</p>\n<ul>\n<li>分布式构建</li>\n<li>大量三方插件</li>\n<li>变更支持</li>\n<li>消息通知</li>\n</ul>\n<h5 id=\"Gitlab\"><a href=\"#Gitlab\" class=\"headerlink\" title=\"Gitlab\"></a>Gitlab</h5><p>Gitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务<br>特点：</p>\n<ul>\n<li>代码仓库管理</li>\n<li>多人协作</li>\n<li>完善的用户、权限管理</li>\n</ul>\n<h5 id=\"Harbor\"><a href=\"#Harbor\" class=\"headerlink\" title=\"Harbor\"></a>Harbor</h5><p>Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器<br>特点：</p>\n<ul>\n<li>基于角色的访问控制</li>\n<li>镜像复制</li>\n<li>鉴权认证管理</li>\n<li>用户管理，访问控制和活动审计</li>\n<li>RESTful API</li>\n</ul>\n<h4 id=\"实现说明\"><a href=\"#实现说明\" class=\"headerlink\" title=\"实现说明\"></a>实现说明</h4><ol>\n<li>通过Jenkins 生成的secret token来关联gitlab Webhooks设置url 和token，当代码有更新时，自动触发构建</li>\n<li>将代码拉取到Jenkins运行节点中，通过基础镜像加dockerfile文件构建应用镜像，然后上传到Harbor服务器中</li>\n<li>在测试服务器中拉取对应的镜像，然后运行起来</li>\n<li>构建完成没有错误，发邮件通知相关人员</li>\n</ol>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li>Jenkins系统设置中需要配置gitlab服务器地址和对应的gitlab api token用于Jenkins和gitlab交互通信</li>\n<li>Jenkins任务构建可以指定在固定节点上构建， 构建节点和应用服务器之间必须有登录权限</li>\n<li>Harbor镜像管理，需要有鉴权和认证设置</li>\n</ol>\n"},{"title":"Count计数变慢","date":"2018-12-28T14:48:50.000Z","_content":"\n#### count(*) 实现方式\n不同的引擎，实现方式不同\n- Myisam把一个表的总行存在磁盘上，执行时直接返回这个数\n- Innodb，需要把数据一行行的从引擎中读出来，然后累积计数，遍历全表\n\n\n#### 不同的count用法\ncount()为聚合函数，对于返回的结果集，一行行判断，如果count函数的参数不为null，累计值加1，最终返回累计值\n- count(*)\n- count(id)\n- count(字段)\n- count(1)\n\n这里count(*),count(id),count(1)返回满足条件的结果集的总行数，而count(字段)返回满足条件不为null的总数\n性能比较原则：\n1. server层要做什么就给什么\n2. innodb只给必要的值\n\n#### 效率排序\n\ncount(字段)< count(id)<count(1)=count(*)","source":"_posts/yw-mysql-count.md","raw":"---\ntitle: Count计数变慢\ndate: 2018-12-28 22:48:50\ntags:\n  - count\ncategories:\n  - Mysql\n---\n\n#### count(*) 实现方式\n不同的引擎，实现方式不同\n- Myisam把一个表的总行存在磁盘上，执行时直接返回这个数\n- Innodb，需要把数据一行行的从引擎中读出来，然后累积计数，遍历全表\n\n\n#### 不同的count用法\ncount()为聚合函数，对于返回的结果集，一行行判断，如果count函数的参数不为null，累计值加1，最终返回累计值\n- count(*)\n- count(id)\n- count(字段)\n- count(1)\n\n这里count(*),count(id),count(1)返回满足条件的结果集的总行数，而count(字段)返回满足条件不为null的总数\n性能比较原则：\n1. server层要做什么就给什么\n2. innodb只给必要的值\n\n#### 效率排序\n\ncount(字段)< count(id)<count(1)=count(*)","slug":"yw-mysql-count","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zf006zct8usvltfgdf","content":"<h4 id=\"count-实现方式\"><a href=\"#count-实现方式\" class=\"headerlink\" title=\"count(*) 实现方式\"></a>count(*) 实现方式</h4><p>不同的引擎，实现方式不同</p>\n<ul>\n<li>Myisam把一个表的总行存在磁盘上，执行时直接返回这个数</li>\n<li>Innodb，需要把数据一行行的从引擎中读出来，然后累积计数，遍历全表</li>\n</ul>\n<h4 id=\"不同的count用法\"><a href=\"#不同的count用法\" class=\"headerlink\" title=\"不同的count用法\"></a>不同的count用法</h4><p>count()为聚合函数，对于返回的结果集，一行行判断，如果count函数的参数不为null，累计值加1，最终返回累计值</p>\n<ul>\n<li>count(*)</li>\n<li>count(id)</li>\n<li>count(字段)</li>\n<li>count(1)</li>\n</ul>\n<p>这里count(*),count(id),count(1)返回满足条件的结果集的总行数，而count(字段)返回满足条件不为null的总数<br>性能比较原则：</p>\n<ol>\n<li>server层要做什么就给什么</li>\n<li>innodb只给必要的值</li>\n</ol>\n<h4 id=\"效率排序\"><a href=\"#效率排序\" class=\"headerlink\" title=\"效率排序\"></a>效率排序</h4><p>count(字段)&lt; count(id)&lt;count(1)=count(*)</p>\n","excerpt":"","more":"<h4 id=\"count-实现方式\"><a href=\"#count-实现方式\" class=\"headerlink\" title=\"count(*) 实现方式\"></a>count(*) 实现方式</h4><p>不同的引擎，实现方式不同</p>\n<ul>\n<li>Myisam把一个表的总行存在磁盘上，执行时直接返回这个数</li>\n<li>Innodb，需要把数据一行行的从引擎中读出来，然后累积计数，遍历全表</li>\n</ul>\n<h4 id=\"不同的count用法\"><a href=\"#不同的count用法\" class=\"headerlink\" title=\"不同的count用法\"></a>不同的count用法</h4><p>count()为聚合函数，对于返回的结果集，一行行判断，如果count函数的参数不为null，累计值加1，最终返回累计值</p>\n<ul>\n<li>count(*)</li>\n<li>count(id)</li>\n<li>count(字段)</li>\n<li>count(1)</li>\n</ul>\n<p>这里count(*),count(id),count(1)返回满足条件的结果集的总行数，而count(字段)返回满足条件不为null的总数<br>性能比较原则：</p>\n<ol>\n<li>server层要做什么就给什么</li>\n<li>innodb只给必要的值</li>\n</ol>\n<h4 id=\"效率排序\"><a href=\"#效率排序\" class=\"headerlink\" title=\"效率排序\"></a>效率排序</h4><p>count(字段)&lt; count(id)&lt;count(1)=count(*)</p>\n"},{"title":"字符串加索引","date":"2018-12-28T12:41:50.000Z","_content":"\n#### 前缀索引\n前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数\n\n在建立索引时需要关注的是区分度，区分度越高越好\n\n查看对应索引的区分度方法\n```python\nselect count(distinct a) as L from user;\nselect count(*) as total from user;\n \nselect count(distinct left(a, 4) as L4,\n       count(distinct left(a, 5) as L5,\nfrom user\n```\n**注意**：使用前缀索引就用不上覆盖索引查询对查询性能的优化，这是在选择是否使用前缀索引时需要考虑的因素\n\n#### 倒序存储\n对前面n位数都是重复的字段，可以使用倒序存储，将存储的内容倒序存储\n```python\nselect field from t where word=reverse('input_string');\n```\n\n#### 使用hash字段\n在表中再创建一个整数字段，来保存字段的校验码，同时在这个字段创建索引\n```python\nalter table t add word_crc int unsigned, and index(word_crc);\n```\n\n#### 总结\n- 直接创建完整索引，这样可能会占用大量的空间\n- 创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引\n- 倒序存储，在创建前缀索引，用于绕过字符串本身前缀区分度不高的问题\n- 创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，同时不支持范围扫描\n\n","source":"_posts/yw-mysql-addindex-to-string.md","raw":"---\ntitle: 字符串加索引\ndate: 2018-12-28 20:41:50\ntags:\n  - Index\ncategories:\n  - Mysql\n---\n\n#### 前缀索引\n前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数\n\n在建立索引时需要关注的是区分度，区分度越高越好\n\n查看对应索引的区分度方法\n```python\nselect count(distinct a) as L from user;\nselect count(*) as total from user;\n \nselect count(distinct left(a, 4) as L4,\n       count(distinct left(a, 5) as L5,\nfrom user\n```\n**注意**：使用前缀索引就用不上覆盖索引查询对查询性能的优化，这是在选择是否使用前缀索引时需要考虑的因素\n\n#### 倒序存储\n对前面n位数都是重复的字段，可以使用倒序存储，将存储的内容倒序存储\n```python\nselect field from t where word=reverse('input_string');\n```\n\n#### 使用hash字段\n在表中再创建一个整数字段，来保存字段的校验码，同时在这个字段创建索引\n```python\nalter table t add word_crc int unsigned, and index(word_crc);\n```\n\n#### 总结\n- 直接创建完整索引，这样可能会占用大量的空间\n- 创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引\n- 倒序存储，在创建前缀索引，用于绕过字符串本身前缀区分度不高的问题\n- 创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，同时不支持范围扫描\n\n","slug":"yw-mysql-addindex-to-string","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zh0072ct8ueih3znll","content":"<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数</p>\n<p>在建立索引时需要关注的是区分度，区分度越高越好</p>\n<p>查看对应索引的区分度方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">select count(distinct a) <span class=\"keyword\">as</span> L <span class=\"keyword\">from</span> user;</div><div class=\"line\">select count(*) <span class=\"keyword\">as</span> total <span class=\"keyword\">from</span> user;</div><div class=\"line\"> </div><div class=\"line\">select count(distinct left(a, <span class=\"number\">4</span>) <span class=\"keyword\">as</span> L4,</div><div class=\"line\">       count(distinct left(a, <span class=\"number\">5</span>) <span class=\"keyword\">as</span> L5,</div><div class=\"line\"><span class=\"keyword\">from</span> user</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：使用前缀索引就用不上覆盖索引查询对查询性能的优化，这是在选择是否使用前缀索引时需要考虑的因素</p>\n<h4 id=\"倒序存储\"><a href=\"#倒序存储\" class=\"headerlink\" title=\"倒序存储\"></a>倒序存储</h4><p>对前面n位数都是重复的字段，可以使用倒序存储，将存储的内容倒序存储<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select field <span class=\"keyword\">from</span> t where word=reverse(<span class=\"string\">'input_string'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用hash字段\"><a href=\"#使用hash字段\" class=\"headerlink\" title=\"使用hash字段\"></a>使用hash字段</h4><p>在表中再创建一个整数字段，来保存字段的校验码，同时在这个字段创建索引<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table t add word_crc int unsigned, <span class=\"keyword\">and</span> index(word_crc);</div></pre></td></tr></table></figure></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>直接创建完整索引，这样可能会占用大量的空间</li>\n<li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引</li>\n<li>倒序存储，在创建前缀索引，用于绕过字符串本身前缀区分度不高的问题</li>\n<li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，同时不支持范围扫描</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数</p>\n<p>在建立索引时需要关注的是区分度，区分度越高越好</p>\n<p>查看对应索引的区分度方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">select count(distinct a) <span class=\"keyword\">as</span> L <span class=\"keyword\">from</span> user;</div><div class=\"line\">select count(*) <span class=\"keyword\">as</span> total <span class=\"keyword\">from</span> user;</div><div class=\"line\"> </div><div class=\"line\">select count(distinct left(a, <span class=\"number\">4</span>) <span class=\"keyword\">as</span> L4,</div><div class=\"line\">       count(distinct left(a, <span class=\"number\">5</span>) <span class=\"keyword\">as</span> L5,</div><div class=\"line\"><span class=\"keyword\">from</span> user</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：使用前缀索引就用不上覆盖索引查询对查询性能的优化，这是在选择是否使用前缀索引时需要考虑的因素</p>\n<h4 id=\"倒序存储\"><a href=\"#倒序存储\" class=\"headerlink\" title=\"倒序存储\"></a>倒序存储</h4><p>对前面n位数都是重复的字段，可以使用倒序存储，将存储的内容倒序存储<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select field <span class=\"keyword\">from</span> t where word=reverse(<span class=\"string\">'input_string'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用hash字段\"><a href=\"#使用hash字段\" class=\"headerlink\" title=\"使用hash字段\"></a>使用hash字段</h4><p>在表中再创建一个整数字段，来保存字段的校验码，同时在这个字段创建索引<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table t add word_crc int unsigned, <span class=\"keyword\">and</span> index(word_crc);</div></pre></td></tr></table></figure></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>直接创建完整索引，这样可能会占用大量的空间</li>\n<li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引</li>\n<li>倒序存储，在创建前缀索引，用于绕过字符串本身前缀区分度不高的问题</li>\n<li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，同时不支持范围扫描</li>\n</ul>\n"},{"title":"运维 Java中jvm设置","date":"2017-04-15T14:08:55.000Z","_content":"最近遇到java程序启动后，报错如下：\n```python\nException in thread \"catalina-exec-1190\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-1198\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-102\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-397\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-709\" java.lang.OutOfMemoryError: PermGen space\n```\n经查询发现是MaxPermSize设置太小，调整后恢复正常。之后查询java内存溢出的常见报错情况，整理如下：\n常见的Java内存溢出有以下三种：\n1. java.lang.OutOfMemoryError: Java heap space ----JVM Heap（堆）溢出\nJVM在启动的时候会自动设置JVM Heap的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)不可超过物理内存。\n可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap的大小是Young Generation 和Tenured Generaion 之和。\n在JVM中如果98％的时间是用于GC，且可用的Heap size 不足2％的时候将抛出此异常信息。\n`解决方法`：手动设置JVM Heap（堆）的大小\n\n2. java.lang.OutOfMemoryError: PermGen space  ---- PermGen space溢出。\nPermGen space的全称是Permanent Generation space，是指内存的永久保存区域。\n为什么会内存溢出，这是由于这块内存主要是被JVM存放Class和Meta信息的，Class在被Load的时候被放入PermGen space区域，它和存放Instance的Heap区域不同,sun的 GC不会在主程序运行期对PermGen space进行清理，所以如果你的APP会载入很多CLASS的话，就很可能出现PermGen space溢出。\n`解决方法`： 手动设置MaxPermSize大小\n\n3. java.lang.StackOverflowError   ---- 栈溢出\n栈溢出了，JVM依然是采用栈式的虚拟机，这个和C和Pascal都是一样的。函数的调用过程都体现在堆栈和退栈上了。\n调用构造函数的 “层”太多了，以致于把栈区溢出了。\n通常来讲，一般栈区远远小于堆区的，因为函数调用过程往往不会多于上千层，而即便每个函数调用需要 1K的空间(这个大约相当于在一个C函数内声明了256个int类型的变量)，那么栈区也不过是需要1MB的空间。通常栈的大小是1－2MB的。\n通常递归也不要递归的层次过多，很容易溢出。 \n`解决方法`：修改程序\n\n其他，设置jvm内存使用方法：\nlinux下的tomcat：  \n修改TOMCAT_HOME/bin/catalina.sh\n位置cygwin=false前\n```python\nJAVA_OPTS=\"-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms4096m -Xmx4096m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:+DisableExplicitGC\"  \n```\n\njvm参数说明：\n-server:一定要作为第一个参数，在多个CPU时性能佳\n-Xms：java Heap初始大小。 默认是物理内存的1/64\n-Xmx：java heap最大值。建议均设为物理内存的一半，不可超过物理内存。\n-XX:PermSize:设定内存的永久保存区初始大小，缺省值为64M。\n-XX:MaxPermSize:设定内存的永久保存区最大 大小，缺省值为64M。\n-XX:SurvivorRatio=2  :生还者池的大小,默认是2，如果垃圾回收变成了瓶颈，您可以尝试定制生成池设置\n-XX:NewSize: 新生成的池的初始大小。 缺省值为2M。\n-XX:MaxNewSize: 新生成的池的最大大小。   缺省值为32M。\n如果 JVM 的堆大小大于 1GB，则应该使用值：-XX:newSize=640m -XX:MaxNewSize=640m -XX:SurvivorRatio=16，或者将堆的总大小的 50% 到 60% 分配给新生成的池。调大新对象区，减少Full GC次数。\n+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。\n-Xss：每个线程的Stack大小，“-Xss 15120” 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k.\n-verbose:gc 现实垃圾收集信息\n-Xloggc:gc.log 指定垃圾收集日志文件\n-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一\n-XX:+UseParNewGC ：缩短minor收集的时间\n-XX:+UseConcMarkSweepGC ：缩短major收集的时间 此选项在Heap Size 比较大而且Major收集时间较长的情况下使用更合适。\n-XX:userParNewGC 可用来设置并行收集【多CPU】\n-XX:ParallelGCThreads 可用来增加并行度【多CPU】\n-XX:UseParallelGC 设置后可以使用并行清除收集器【多CPU】\n\nTomcat并发优化\n1.Tomcat连接相关参数\n在Tomcat配置文件conf下面 server.xml 中的配置中和连接数相关的参数有：\nminProcessors：最小空闲连接线程数，用于提高系统处理性能，默认值为10\nmaxProcessors：最大连接线程数，即：并发处理的最大请求数，默认值为75\nacceptCount：允许的最大连接数，应大于等于maxProcessors，默认值为100\nenableLookups：是否反查域名，取值为：true或false。为了提高处理能力，应设置为false\nconnectionTimeout：网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。\n默认的tomcat 参数：\n```python\n<Connector port=“8080\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"8443\" />\n```\n修改为：\n```python\n<Connector port=“8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n  maxThreads=\"600\"\n  minSpareThreads=\"100\"\n  maxSpareThreads=\"500\"\n  acceptCount=\"700\"\n  connectionTimeout=\"20000\"\n  redirectPort=\"8443\" />\n```\n相关说明：\nprotocol=\"org.apache.coyote.http11.Http11NioProtocol\" ///使用java的异步io护理技术,no blocking IO\nmaxThreads=“600\" 表示最多同时处理600个连接 ///最大线程数\nminSpareThreads=“100\" 表示即使没有人使用也开这么多空线程等待  ///初始化时创建的线程数\nmaxSpareThreads=“500\" 表示如果最多可以空500个线程，例如某时刻有505人访问，之后没有人访问了，则tomcat不会保留505个空线程，而是关闭505个空的。   ///一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。\nacceptCount=\"700\"//指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理\n\n这里是http connector的优化，如果使用apache和tomcat做集群的负载均衡，并且使用ajp协议做apache和tomcat的协议转发，那么还需要优化ajp connector。\n<Connector port=\"8009\" protocol=\"AJP/1.3\" maxThreads=\"600\" minSpareThreads=\"100\" maxSpareThreads=\"500\" acceptCount=\"700\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n\n\n\n\n\n\n\n","source":"_posts/yw-java-jvm.md","raw":"---\ntitle: 运维 Java中jvm设置\ndate: 2017-04-15 22:08:55\ntags:\n  - Jvm\ncategories:\n  - 运维\n---\n最近遇到java程序启动后，报错如下：\n```python\nException in thread \"catalina-exec-1190\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-1198\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-102\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-397\" java.lang.OutOfMemoryError: PermGen space\nException in thread \"catalina-exec-709\" java.lang.OutOfMemoryError: PermGen space\n```\n经查询发现是MaxPermSize设置太小，调整后恢复正常。之后查询java内存溢出的常见报错情况，整理如下：\n常见的Java内存溢出有以下三种：\n1. java.lang.OutOfMemoryError: Java heap space ----JVM Heap（堆）溢出\nJVM在启动的时候会自动设置JVM Heap的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)不可超过物理内存。\n可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap的大小是Young Generation 和Tenured Generaion 之和。\n在JVM中如果98％的时间是用于GC，且可用的Heap size 不足2％的时候将抛出此异常信息。\n`解决方法`：手动设置JVM Heap（堆）的大小\n\n2. java.lang.OutOfMemoryError: PermGen space  ---- PermGen space溢出。\nPermGen space的全称是Permanent Generation space，是指内存的永久保存区域。\n为什么会内存溢出，这是由于这块内存主要是被JVM存放Class和Meta信息的，Class在被Load的时候被放入PermGen space区域，它和存放Instance的Heap区域不同,sun的 GC不会在主程序运行期对PermGen space进行清理，所以如果你的APP会载入很多CLASS的话，就很可能出现PermGen space溢出。\n`解决方法`： 手动设置MaxPermSize大小\n\n3. java.lang.StackOverflowError   ---- 栈溢出\n栈溢出了，JVM依然是采用栈式的虚拟机，这个和C和Pascal都是一样的。函数的调用过程都体现在堆栈和退栈上了。\n调用构造函数的 “层”太多了，以致于把栈区溢出了。\n通常来讲，一般栈区远远小于堆区的，因为函数调用过程往往不会多于上千层，而即便每个函数调用需要 1K的空间(这个大约相当于在一个C函数内声明了256个int类型的变量)，那么栈区也不过是需要1MB的空间。通常栈的大小是1－2MB的。\n通常递归也不要递归的层次过多，很容易溢出。 \n`解决方法`：修改程序\n\n其他，设置jvm内存使用方法：\nlinux下的tomcat：  \n修改TOMCAT_HOME/bin/catalina.sh\n位置cygwin=false前\n```python\nJAVA_OPTS=\"-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms4096m -Xmx4096m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:+DisableExplicitGC\"  \n```\n\njvm参数说明：\n-server:一定要作为第一个参数，在多个CPU时性能佳\n-Xms：java Heap初始大小。 默认是物理内存的1/64\n-Xmx：java heap最大值。建议均设为物理内存的一半，不可超过物理内存。\n-XX:PermSize:设定内存的永久保存区初始大小，缺省值为64M。\n-XX:MaxPermSize:设定内存的永久保存区最大 大小，缺省值为64M。\n-XX:SurvivorRatio=2  :生还者池的大小,默认是2，如果垃圾回收变成了瓶颈，您可以尝试定制生成池设置\n-XX:NewSize: 新生成的池的初始大小。 缺省值为2M。\n-XX:MaxNewSize: 新生成的池的最大大小。   缺省值为32M。\n如果 JVM 的堆大小大于 1GB，则应该使用值：-XX:newSize=640m -XX:MaxNewSize=640m -XX:SurvivorRatio=16，或者将堆的总大小的 50% 到 60% 分配给新生成的池。调大新对象区，减少Full GC次数。\n+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。\n-Xss：每个线程的Stack大小，“-Xss 15120” 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k.\n-verbose:gc 现实垃圾收集信息\n-Xloggc:gc.log 指定垃圾收集日志文件\n-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一\n-XX:+UseParNewGC ：缩短minor收集的时间\n-XX:+UseConcMarkSweepGC ：缩短major收集的时间 此选项在Heap Size 比较大而且Major收集时间较长的情况下使用更合适。\n-XX:userParNewGC 可用来设置并行收集【多CPU】\n-XX:ParallelGCThreads 可用来增加并行度【多CPU】\n-XX:UseParallelGC 设置后可以使用并行清除收集器【多CPU】\n\nTomcat并发优化\n1.Tomcat连接相关参数\n在Tomcat配置文件conf下面 server.xml 中的配置中和连接数相关的参数有：\nminProcessors：最小空闲连接线程数，用于提高系统处理性能，默认值为10\nmaxProcessors：最大连接线程数，即：并发处理的最大请求数，默认值为75\nacceptCount：允许的最大连接数，应大于等于maxProcessors，默认值为100\nenableLookups：是否反查域名，取值为：true或false。为了提高处理能力，应设置为false\nconnectionTimeout：网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。\n默认的tomcat 参数：\n```python\n<Connector port=“8080\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"8443\" />\n```\n修改为：\n```python\n<Connector port=“8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n  maxThreads=\"600\"\n  minSpareThreads=\"100\"\n  maxSpareThreads=\"500\"\n  acceptCount=\"700\"\n  connectionTimeout=\"20000\"\n  redirectPort=\"8443\" />\n```\n相关说明：\nprotocol=\"org.apache.coyote.http11.Http11NioProtocol\" ///使用java的异步io护理技术,no blocking IO\nmaxThreads=“600\" 表示最多同时处理600个连接 ///最大线程数\nminSpareThreads=“100\" 表示即使没有人使用也开这么多空线程等待  ///初始化时创建的线程数\nmaxSpareThreads=“500\" 表示如果最多可以空500个线程，例如某时刻有505人访问，之后没有人访问了，则tomcat不会保留505个空线程，而是关闭505个空的。   ///一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。\nacceptCount=\"700\"//指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理\n\n这里是http connector的优化，如果使用apache和tomcat做集群的负载均衡，并且使用ajp协议做apache和tomcat的协议转发，那么还需要优化ajp connector。\n<Connector port=\"8009\" protocol=\"AJP/1.3\" maxThreads=\"600\" minSpareThreads=\"100\" maxSpareThreads=\"500\" acceptCount=\"700\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n\n\n\n\n\n\n\n","slug":"yw-java-jvm","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zi0075ct8usxq3fu2a","content":"<p>最近遇到java程序启动后，报错如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-1190\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-1198\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-102\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-397\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-709\"</span> java.lang.OutOfMemoryError: PermGen space</div></pre></td></tr></table></figure></p>\n<p>经查询发现是MaxPermSize设置太小，调整后恢复正常。之后查询java内存溢出的常见报错情况，整理如下：<br>常见的Java内存溢出有以下三种：</p>\n<ol>\n<li><p>java.lang.OutOfMemoryError: Java heap space —-JVM Heap（堆）溢出<br>JVM在启动的时候会自动设置JVM Heap的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)不可超过物理内存。<br>可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap的大小是Young Generation 和Tenured Generaion 之和。<br>在JVM中如果98％的时间是用于GC，且可用的Heap size 不足2％的时候将抛出此异常信息。<br><code>解决方法</code>：手动设置JVM Heap（堆）的大小</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: PermGen space  —- PermGen space溢出。<br>PermGen space的全称是Permanent Generation space，是指内存的永久保存区域。<br>为什么会内存溢出，这是由于这块内存主要是被JVM存放Class和Meta信息的，Class在被Load的时候被放入PermGen space区域，它和存放Instance的Heap区域不同,sun的 GC不会在主程序运行期对PermGen space进行清理，所以如果你的APP会载入很多CLASS的话，就很可能出现PermGen space溢出。<br><code>解决方法</code>： 手动设置MaxPermSize大小</p>\n</li>\n<li><p>java.lang.StackOverflowError   —- 栈溢出<br>栈溢出了，JVM依然是采用栈式的虚拟机，这个和C和Pascal都是一样的。函数的调用过程都体现在堆栈和退栈上了。<br>调用构造函数的 “层”太多了，以致于把栈区溢出了。<br>通常来讲，一般栈区远远小于堆区的，因为函数调用过程往往不会多于上千层，而即便每个函数调用需要 1K的空间(这个大约相当于在一个C函数内声明了256个int类型的变量)，那么栈区也不过是需要1MB的空间。通常栈的大小是1－2MB的。<br>通常递归也不要递归的层次过多，很容易溢出。<br><code>解决方法</code>：修改程序</p>\n</li>\n</ol>\n<p>其他，设置jvm内存使用方法：<br>linux下的tomcat：<br>修改TOMCAT_HOME/bin/catalina.sh<br>位置cygwin=false前<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_OPTS=<span class=\"string\">\"-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms4096m -Xmx4096m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:+DisableExplicitGC\"</span></div></pre></td></tr></table></figure></p>\n<p>jvm参数说明：<br>-server:一定要作为第一个参数，在多个CPU时性能佳<br>-Xms：java Heap初始大小。 默认是物理内存的1/64<br>-Xmx：java heap最大值。建议均设为物理内存的一半，不可超过物理内存。<br>-XX:PermSize:设定内存的永久保存区初始大小，缺省值为64M。<br>-XX:MaxPermSize:设定内存的永久保存区最大 大小，缺省值为64M。<br>-XX:SurvivorRatio=2  :生还者池的大小,默认是2，如果垃圾回收变成了瓶颈，您可以尝试定制生成池设置<br>-XX:NewSize: 新生成的池的初始大小。 缺省值为2M。<br>-XX:MaxNewSize: 新生成的池的最大大小。   缺省值为32M。<br>如果 JVM 的堆大小大于 1GB，则应该使用值：-XX:newSize=640m -XX:MaxNewSize=640m -XX:SurvivorRatio=16，或者将堆的总大小的 50% 到 60% 分配给新生成的池。调大新对象区，减少Full GC次数。<br>+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。<br>-Xss：每个线程的Stack大小，“-Xss 15120” 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k.<br>-verbose:gc 现实垃圾收集信息<br>-Xloggc:gc.log 指定垃圾收集日志文件<br>-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一<br>-XX:+UseParNewGC ：缩短minor收集的时间<br>-XX:+UseConcMarkSweepGC ：缩短major收集的时间 此选项在Heap Size 比较大而且Major收集时间较长的情况下使用更合适。<br>-XX:userParNewGC 可用来设置并行收集【多CPU】<br>-XX:ParallelGCThreads 可用来增加并行度【多CPU】<br>-XX:UseParallelGC 设置后可以使用并行清除收集器【多CPU】</p>\n<p>Tomcat并发优化<br>1.Tomcat连接相关参数<br>在Tomcat配置文件conf下面 server.xml 中的配置中和连接数相关的参数有：<br>minProcessors：最小空闲连接线程数，用于提高系统处理性能，默认值为10<br>maxProcessors：最大连接线程数，即：并发处理的最大请求数，默认值为75<br>acceptCount：允许的最大连接数，应大于等于maxProcessors，默认值为100<br>enableLookups：是否反查域名，取值为：true或false。为了提高处理能力，应设置为false<br>connectionTimeout：网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。<br>默认的tomcat 参数：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=“8080\" protocol=\"HTTP/1.1\"</div><div class=\"line\">           connectionTimeout=\"20000\"</div><div class=\"line\">           redirectPort=\"8443\" /&gt;</div></pre></td></tr></table></figure></p>\n<p>修改为：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=“8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"</div><div class=\"line\">  maxThreads=\"600\"</div><div class=\"line\">  minSpareThreads=\"100\"</div><div class=\"line\">  maxSpareThreads=\"500\"</div><div class=\"line\">  acceptCount=\"700\"</div><div class=\"line\">  connectionTimeout=\"20000\"</div><div class=\"line\">  redirectPort=\"8443\" /&gt;</div></pre></td></tr></table></figure></p>\n<p>相关说明：<br>protocol=”org.apache.coyote.http11.Http11NioProtocol” ///使用java的异步io护理技术,no blocking IO<br>maxThreads=“600” 表示最多同时处理600个连接 ///最大线程数<br>minSpareThreads=“100” 表示即使没有人使用也开这么多空线程等待  ///初始化时创建的线程数<br>maxSpareThreads=“500” 表示如果最多可以空500个线程，例如某时刻有505人访问，之后没有人访问了，则tomcat不会保留505个空线程，而是关闭505个空的。   ///一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。<br>acceptCount=”700”//指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理</p>\n<p>这里是http connector的优化，如果使用apache和tomcat做集群的负载均衡，并且使用ajp协议做apache和tomcat的协议转发，那么还需要优化ajp connector。</p>\n<connector port=\"8009\" protocol=\"AJP/1.3\" maxthreads=\"600\" minsparethreads=\"100\" maxsparethreads=\"500\" acceptcount=\"700\" connectiontimeout=\"20000\" redirectport=\"8443\">\n\n\n\n\n\n\n\n</connector>","excerpt":"","more":"<p>最近遇到java程序启动后，报错如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-1190\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-1198\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-102\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-397\"</span> java.lang.OutOfMemoryError: PermGen space</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"catalina-exec-709\"</span> java.lang.OutOfMemoryError: PermGen space</div></pre></td></tr></table></figure></p>\n<p>经查询发现是MaxPermSize设置太小，调整后恢复正常。之后查询java内存溢出的常见报错情况，整理如下：<br>常见的Java内存溢出有以下三种：</p>\n<ol>\n<li><p>java.lang.OutOfMemoryError: Java heap space —-JVM Heap（堆）溢出<br>JVM在启动的时候会自动设置JVM Heap的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)不可超过物理内存。<br>可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap的大小是Young Generation 和Tenured Generaion 之和。<br>在JVM中如果98％的时间是用于GC，且可用的Heap size 不足2％的时候将抛出此异常信息。<br><code>解决方法</code>：手动设置JVM Heap（堆）的大小</p>\n</li>\n<li><p>java.lang.OutOfMemoryError: PermGen space  —- PermGen space溢出。<br>PermGen space的全称是Permanent Generation space，是指内存的永久保存区域。<br>为什么会内存溢出，这是由于这块内存主要是被JVM存放Class和Meta信息的，Class在被Load的时候被放入PermGen space区域，它和存放Instance的Heap区域不同,sun的 GC不会在主程序运行期对PermGen space进行清理，所以如果你的APP会载入很多CLASS的话，就很可能出现PermGen space溢出。<br><code>解决方法</code>： 手动设置MaxPermSize大小</p>\n</li>\n<li><p>java.lang.StackOverflowError   —- 栈溢出<br>栈溢出了，JVM依然是采用栈式的虚拟机，这个和C和Pascal都是一样的。函数的调用过程都体现在堆栈和退栈上了。<br>调用构造函数的 “层”太多了，以致于把栈区溢出了。<br>通常来讲，一般栈区远远小于堆区的，因为函数调用过程往往不会多于上千层，而即便每个函数调用需要 1K的空间(这个大约相当于在一个C函数内声明了256个int类型的变量)，那么栈区也不过是需要1MB的空间。通常栈的大小是1－2MB的。<br>通常递归也不要递归的层次过多，很容易溢出。<br><code>解决方法</code>：修改程序</p>\n</li>\n</ol>\n<p>其他，设置jvm内存使用方法：<br>linux下的tomcat：<br>修改TOMCAT_HOME/bin/catalina.sh<br>位置cygwin=false前<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_OPTS=<span class=\"string\">\"-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms4096m -Xmx4096m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:+DisableExplicitGC\"</span></div></pre></td></tr></table></figure></p>\n<p>jvm参数说明：<br>-server:一定要作为第一个参数，在多个CPU时性能佳<br>-Xms：java Heap初始大小。 默认是物理内存的1/64<br>-Xmx：java heap最大值。建议均设为物理内存的一半，不可超过物理内存。<br>-XX:PermSize:设定内存的永久保存区初始大小，缺省值为64M。<br>-XX:MaxPermSize:设定内存的永久保存区最大 大小，缺省值为64M。<br>-XX:SurvivorRatio=2  :生还者池的大小,默认是2，如果垃圾回收变成了瓶颈，您可以尝试定制生成池设置<br>-XX:NewSize: 新生成的池的初始大小。 缺省值为2M。<br>-XX:MaxNewSize: 新生成的池的最大大小。   缺省值为32M。<br>如果 JVM 的堆大小大于 1GB，则应该使用值：-XX:newSize=640m -XX:MaxNewSize=640m -XX:SurvivorRatio=16，或者将堆的总大小的 50% 到 60% 分配给新生成的池。调大新对象区，减少Full GC次数。<br>+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。<br>-Xss：每个线程的Stack大小，“-Xss 15120” 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k.<br>-verbose:gc 现实垃圾收集信息<br>-Xloggc:gc.log 指定垃圾收集日志文件<br>-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一<br>-XX:+UseParNewGC ：缩短minor收集的时间<br>-XX:+UseConcMarkSweepGC ：缩短major收集的时间 此选项在Heap Size 比较大而且Major收集时间较长的情况下使用更合适。<br>-XX:userParNewGC 可用来设置并行收集【多CPU】<br>-XX:ParallelGCThreads 可用来增加并行度【多CPU】<br>-XX:UseParallelGC 设置后可以使用并行清除收集器【多CPU】</p>\n<p>Tomcat并发优化<br>1.Tomcat连接相关参数<br>在Tomcat配置文件conf下面 server.xml 中的配置中和连接数相关的参数有：<br>minProcessors：最小空闲连接线程数，用于提高系统处理性能，默认值为10<br>maxProcessors：最大连接线程数，即：并发处理的最大请求数，默认值为75<br>acceptCount：允许的最大连接数，应大于等于maxProcessors，默认值为100<br>enableLookups：是否反查域名，取值为：true或false。为了提高处理能力，应设置为false<br>connectionTimeout：网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。<br>默认的tomcat 参数：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=“8080\" protocol=\"HTTP/1.1\"</div><div class=\"line\">           connectionTimeout=\"20000\"</div><div class=\"line\">           redirectPort=\"8443\" /&gt;</div></pre></td></tr></table></figure></p>\n<p>修改为：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=“8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"</div><div class=\"line\">  maxThreads=\"600\"</div><div class=\"line\">  minSpareThreads=\"100\"</div><div class=\"line\">  maxSpareThreads=\"500\"</div><div class=\"line\">  acceptCount=\"700\"</div><div class=\"line\">  connectionTimeout=\"20000\"</div><div class=\"line\">  redirectPort=\"8443\" /&gt;</div></pre></td></tr></table></figure></p>\n<p>相关说明：<br>protocol=”org.apache.coyote.http11.Http11NioProtocol” ///使用java的异步io护理技术,no blocking IO<br>maxThreads=“600” 表示最多同时处理600个连接 ///最大线程数<br>minSpareThreads=“100” 表示即使没有人使用也开这么多空线程等待  ///初始化时创建的线程数<br>maxSpareThreads=“500” 表示如果最多可以空500个线程，例如某时刻有505人访问，之后没有人访问了，则tomcat不会保留505个空线程，而是关闭505个空的。   ///一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。<br>acceptCount=”700”//指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理</p>\n<p>这里是http connector的优化，如果使用apache和tomcat做集群的负载均衡，并且使用ajp协议做apache和tomcat的协议转发，那么还需要优化ajp connector。</p>\n<Connector port=\"8009\" protocol=\"AJP/1.3\" maxThreads=\"600\" minSpareThreads=\"100\" maxSpareThreads=\"500\" acceptCount=\"700\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n\n\n\n\n\n\n\n"},{"title":"Mysql索引01","date":"2018-04-15T14:34:24.000Z","_content":"#### 索引类型\nB-Tree索引：mysql引擎默认支持这种索引\n\nMyISAM 使用前缀技术使索引更小\nInnoDB 按照原数据格式进行存储\n\nB-Tree索引可以快速访问数据，不再需要进行全表扫描获取需要的数据，从索引的根节点开始进行搜索\n\n#### Mysql索引原理\n##### b+树介绍\n![](https://ttxsgoto.github.io/img/mysql/btree_index.png)\n如上图，是一颗b+树。浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含\n几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。\n\n真实的数据存在于叶子节点，即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中\n##### 查找过程\n在上图中，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高\n\n##### 性质\n(1) 索引字段要尽量的小。\n\n通过上面b+树的查找过程，或者通过真实的数据存在于叶子节点这个事实可知，IO次数取决于b+数的高度h。\n\n假设当前数据表的数据量为N，每个磁盘块的数据项的数量是m，则树高h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；\n\n而m = 磁盘块的大小/数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的；如果数据项占的空间越小，数据项的数量m越多，树的高度h越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。\n\n(2) 索引的最左匹配特性\n\n当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。\n\n#### Mysql索引类型\n- 主键索引 PRIMARY KEY\n\n    它是一种特殊的唯一索引，不允许有空值,一般是在建表的时候同时创建主键索引\n- 唯一索引 UNIQUE\n\n    唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD UNIQUE (column);\n- 普通索引 INDEX\n\n    这是最基本的索引，它没有任何限制。可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD INDEX index_name (column);\n\n- 组合索引 INDEX\n\n    组合索引，即一个索引包含多个列。可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);\n- 全文索引 FULLTEXT\n\n    全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用分词技术等多种算法智能分析出文本文字中关键字词的频率及重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。\n    可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD FULLTEXT (column);\n\n- 查看索引 SHOW INDEX FROM table_name;\n- 索引一旦创建后不能修改，如果需要修改，则需要删除重建，删除索引 DROP INDEX index_name ON table_name;\n\n#### 索引优点\n- 索引大大减少了服务器需要扫描的数据量\n- 索引可以帮助服务器避免排序和临时表\n- 索引可以将随机IO变成顺序IO\n\n#### 建索引的策略\n1. 最左前缀匹配原则\n\n\tmysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整\n\n\t一般情况，在创建多列索引时，where子句中使用最频繁的一列放在最左边\n\n2. =和in可以乱序\n\n\t比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式\n3. 尽量选择区分度高的作为索引\n\n    区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录\n\n4. 索引列不能参与计算，保持列“干净”\n5. 尽量的扩展索引，不要新建索引\n    \n    比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可\n\n#### 查询分析器-explain命令\n EXPLAIN SELECT * from trip_coord WHERE city=\"cd\"\\G;\n 对应的字段说明：\n```\n- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.\n- select_type: SELECT 查询的类型.\n- table: 查询的是哪个表\n- type: join 类型\n- possible_keys: 此次查询中可能选用的索引\n- key: 此次查询中确切使用到的索引.\n- key_len: 索引长度\n- ref: 哪个字段或常数与 key 一起被使用\n- rows: 显示此查询一共扫描了多少行. 这个是一个估计值\n- filtered: 存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)\n- extra: 额外的信息\n```\n其中重要的字段：\n```\nselect_type:\n- SIMPLE, 表示此查询不包含 UNION 查询或子查询\n- PRIMARY, 表示此查询是最外层的查询\n- UNION, 表示此查询是 UNION 的第二或随后的查询\n- DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询\n- UNION RESULT, UNION 的结果\n- SUBQUERY, 子查询中的第一个 SELECT\n- DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.\n- DERIVED：派生表的 SELECT(FROM 子句的子查询)\n \ntype:\nsystem > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n从左到右，性能由好到坏\n- ALL 全表扫描\n- index   索引全扫描\n- range   索引范围扫描\n- ref 非唯一索引扫描\n- eq_ref  唯一索引扫描\n- const,system    单表最多有一个匹配行\n- NULL    不用扫描表或索引\nALL 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.\n \nkey:MySQL 在当前查询时所真正使用到的索引.\n \nkey_len:\n表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到\nref:\n显示索引的哪一列被使用了，如果可能的话，是一个常数\nrows:\n估算 SQL 要查找到结果集需要扫描读取的数据行数,原则上rows越小越好\nfiltered:\n存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)\nExtra:\n执行情况的说明和描述，包含不适合在其他列中显示但是对执行计划非常重要的额外信息\n主要包括：\n- Using Index   表示索引覆盖，不会回表查询\n- Using Where   表示进行了回表查询\n- Using Index Condition 表示进行了ICP优化\n- Using Flesort  表示MySQL需额外排序操作, 不能通过索引顺序达到排序效果\n```\n\n\n\n\n\n\n\n","source":"_posts/yw-mysql-index.md","raw":"---\ntitle: Mysql索引01\ndate: 2018-04-15 22:34:24\ntags:\n  - Index\ncategories:\n  - Mysql\n---\n#### 索引类型\nB-Tree索引：mysql引擎默认支持这种索引\n\nMyISAM 使用前缀技术使索引更小\nInnoDB 按照原数据格式进行存储\n\nB-Tree索引可以快速访问数据，不再需要进行全表扫描获取需要的数据，从索引的根节点开始进行搜索\n\n#### Mysql索引原理\n##### b+树介绍\n![](https://ttxsgoto.github.io/img/mysql/btree_index.png)\n如上图，是一颗b+树。浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含\n几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。\n\n真实的数据存在于叶子节点，即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中\n##### 查找过程\n在上图中，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高\n\n##### 性质\n(1) 索引字段要尽量的小。\n\n通过上面b+树的查找过程，或者通过真实的数据存在于叶子节点这个事实可知，IO次数取决于b+数的高度h。\n\n假设当前数据表的数据量为N，每个磁盘块的数据项的数量是m，则树高h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；\n\n而m = 磁盘块的大小/数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的；如果数据项占的空间越小，数据项的数量m越多，树的高度h越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。\n\n(2) 索引的最左匹配特性\n\n当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。\n\n#### Mysql索引类型\n- 主键索引 PRIMARY KEY\n\n    它是一种特殊的唯一索引，不允许有空值,一般是在建表的时候同时创建主键索引\n- 唯一索引 UNIQUE\n\n    唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD UNIQUE (column);\n- 普通索引 INDEX\n\n    这是最基本的索引，它没有任何限制。可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD INDEX index_name (column);\n\n- 组合索引 INDEX\n\n    组合索引，即一个索引包含多个列。可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);\n- 全文索引 FULLTEXT\n\n    全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用分词技术等多种算法智能分析出文本文字中关键字词的频率及重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。\n    可以在创建表的时候指定，也可以修改表结构，如：\n    ALTER TABLE table_name ADD FULLTEXT (column);\n\n- 查看索引 SHOW INDEX FROM table_name;\n- 索引一旦创建后不能修改，如果需要修改，则需要删除重建，删除索引 DROP INDEX index_name ON table_name;\n\n#### 索引优点\n- 索引大大减少了服务器需要扫描的数据量\n- 索引可以帮助服务器避免排序和临时表\n- 索引可以将随机IO变成顺序IO\n\n#### 建索引的策略\n1. 最左前缀匹配原则\n\n\tmysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整\n\n\t一般情况，在创建多列索引时，where子句中使用最频繁的一列放在最左边\n\n2. =和in可以乱序\n\n\t比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式\n3. 尽量选择区分度高的作为索引\n\n    区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录\n\n4. 索引列不能参与计算，保持列“干净”\n5. 尽量的扩展索引，不要新建索引\n    \n    比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可\n\n#### 查询分析器-explain命令\n EXPLAIN SELECT * from trip_coord WHERE city=\"cd\"\\G;\n 对应的字段说明：\n```\n- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.\n- select_type: SELECT 查询的类型.\n- table: 查询的是哪个表\n- type: join 类型\n- possible_keys: 此次查询中可能选用的索引\n- key: 此次查询中确切使用到的索引.\n- key_len: 索引长度\n- ref: 哪个字段或常数与 key 一起被使用\n- rows: 显示此查询一共扫描了多少行. 这个是一个估计值\n- filtered: 存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)\n- extra: 额外的信息\n```\n其中重要的字段：\n```\nselect_type:\n- SIMPLE, 表示此查询不包含 UNION 查询或子查询\n- PRIMARY, 表示此查询是最外层的查询\n- UNION, 表示此查询是 UNION 的第二或随后的查询\n- DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询\n- UNION RESULT, UNION 的结果\n- SUBQUERY, 子查询中的第一个 SELECT\n- DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.\n- DERIVED：派生表的 SELECT(FROM 子句的子查询)\n \ntype:\nsystem > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n从左到右，性能由好到坏\n- ALL 全表扫描\n- index   索引全扫描\n- range   索引范围扫描\n- ref 非唯一索引扫描\n- eq_ref  唯一索引扫描\n- const,system    单表最多有一个匹配行\n- NULL    不用扫描表或索引\nALL 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.\n \nkey:MySQL 在当前查询时所真正使用到的索引.\n \nkey_len:\n表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到\nref:\n显示索引的哪一列被使用了，如果可能的话，是一个常数\nrows:\n估算 SQL 要查找到结果集需要扫描读取的数据行数,原则上rows越小越好\nfiltered:\n存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)\nExtra:\n执行情况的说明和描述，包含不适合在其他列中显示但是对执行计划非常重要的额外信息\n主要包括：\n- Using Index   表示索引覆盖，不会回表查询\n- Using Where   表示进行了回表查询\n- Using Index Condition 表示进行了ICP优化\n- Using Flesort  表示MySQL需额外排序操作, 不能通过索引顺序达到排序效果\n```\n\n\n\n\n\n\n\n","slug":"yw-mysql-index","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zj0078ct8u88rdvc41","content":"<h4 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h4><p>B-Tree索引：mysql引擎默认支持这种索引</p>\n<p>MyISAM 使用前缀技术使索引更小<br>InnoDB 按照原数据格式进行存储</p>\n<p>B-Tree索引可以快速访问数据，不再需要进行全表扫描获取需要的数据，从索引的根节点开始进行搜索</p>\n<h4 id=\"Mysql索引原理\"><a href=\"#Mysql索引原理\" class=\"headerlink\" title=\"Mysql索引原理\"></a>Mysql索引原理</h4><h5 id=\"b-树介绍\"><a href=\"#b-树介绍\" class=\"headerlink\" title=\"b+树介绍\"></a>b+树介绍</h5><p><img src=\"https://ttxsgoto.github.io/img/mysql/btree_index.png\" alt=\"\"><br>如上图，是一颗b+树。浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含<br>几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。</p>\n<p>真实的数据存在于叶子节点，即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中</p>\n<h5 id=\"查找过程\"><a href=\"#查找过程\" class=\"headerlink\" title=\"查找过程\"></a>查找过程</h5><p>在上图中，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高</p>\n<h5 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h5><p>(1) 索引字段要尽量的小。</p>\n<p>通过上面b+树的查找过程，或者通过真实的数据存在于叶子节点这个事实可知，IO次数取决于b+数的高度h。</p>\n<p>假设当前数据表的数据量为N，每个磁盘块的数据项的数量是m，则树高h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；</p>\n<p>而m = 磁盘块的大小/数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的；如果数据项占的空间越小，数据项的数量m越多，树的高度h越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。</p>\n<p>(2) 索引的最左匹配特性</p>\n<p>当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p>\n<h4 id=\"Mysql索引类型\"><a href=\"#Mysql索引类型\" class=\"headerlink\" title=\"Mysql索引类型\"></a>Mysql索引类型</h4><ul>\n<li><p>主键索引 PRIMARY KEY</p>\n<p>  它是一种特殊的唯一索引，不允许有空值,一般是在建表的时候同时创建主键索引</p>\n</li>\n<li><p>唯一索引 UNIQUE</p>\n<p>  唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD UNIQUE (column);</p>\n</li>\n<li><p>普通索引 INDEX</p>\n<p>  这是最基本的索引，它没有任何限制。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD INDEX index_name (column);</p>\n</li>\n<li><p>组合索引 INDEX</p>\n<p>  组合索引，即一个索引包含多个列。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);</p>\n</li>\n<li><p>全文索引 FULLTEXT</p>\n<p>  全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用分词技术等多种算法智能分析出文本文字中关键字词的频率及重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。<br>  可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD FULLTEXT (column);</p>\n</li>\n<li><p>查看索引 SHOW INDEX FROM table_name;</p>\n</li>\n<li>索引一旦创建后不能修改，如果需要修改，则需要删除重建，删除索引 DROP INDEX index_name ON table_name;</li>\n</ul>\n<h4 id=\"索引优点\"><a href=\"#索引优点\" class=\"headerlink\" title=\"索引优点\"></a>索引优点</h4><ul>\n<li>索引大大减少了服务器需要扫描的数据量</li>\n<li>索引可以帮助服务器避免排序和临时表</li>\n<li>索引可以将随机IO变成顺序IO</li>\n</ul>\n<h4 id=\"建索引的策略\"><a href=\"#建索引的策略\" class=\"headerlink\" title=\"建索引的策略\"></a>建索引的策略</h4><ol>\n<li><p>最左前缀匹配原则</p>\n<p> mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整</p>\n<p> 一般情况，在创建多列索引时，where子句中使用最频繁的一列放在最左边</p>\n</li>\n<li><p>=和in可以乱序</p>\n<p> 比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>\n</li>\n<li><p>尽量选择区分度高的作为索引</p>\n<p> 区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p>\n</li>\n<li><p>索引列不能参与计算，保持列“干净”</p>\n</li>\n<li><p>尽量的扩展索引，不要新建索引</p>\n<p> 比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p>\n</li>\n</ol>\n<h4 id=\"查询分析器-explain命令\"><a href=\"#查询分析器-explain命令\" class=\"headerlink\" title=\"查询分析器-explain命令\"></a>查询分析器-explain命令</h4><p> EXPLAIN SELECT * from trip_coord WHERE city=”cd”\\G;<br> 对应的字段说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</div><div class=\"line\">- select_type: SELECT 查询的类型.</div><div class=\"line\">- table: 查询的是哪个表</div><div class=\"line\">- type: join 类型</div><div class=\"line\">- possible_keys: 此次查询中可能选用的索引</div><div class=\"line\">- key: 此次查询中确切使用到的索引.</div><div class=\"line\">- key_len: 索引长度</div><div class=\"line\">- ref: 哪个字段或常数与 key 一起被使用</div><div class=\"line\">- rows: 显示此查询一共扫描了多少行. 这个是一个估计值</div><div class=\"line\">- filtered: 存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)</div><div class=\"line\">- extra: 额外的信息</div></pre></td></tr></table></figure></p>\n<p>其中重要的字段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">select_type:</div><div class=\"line\">- SIMPLE, 表示此查询不包含 UNION 查询或子查询</div><div class=\"line\">- PRIMARY, 表示此查询是最外层的查询</div><div class=\"line\">- UNION, 表示此查询是 UNION 的第二或随后的查询</div><div class=\"line\">- DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询</div><div class=\"line\">- UNION RESULT, UNION 的结果</div><div class=\"line\">- SUBQUERY, 子查询中的第一个 SELECT</div><div class=\"line\">- DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</div><div class=\"line\">- DERIVED：派生表的 SELECT(FROM 子句的子查询)</div><div class=\"line\"> </div><div class=\"line\">type:</div><div class=\"line\">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</div><div class=\"line\">从左到右，性能由好到坏</div><div class=\"line\">- ALL 全表扫描</div><div class=\"line\">- index   索引全扫描</div><div class=\"line\">- range   索引范围扫描</div><div class=\"line\">- ref 非唯一索引扫描</div><div class=\"line\">- eq_ref  唯一索引扫描</div><div class=\"line\">- const,system    单表最多有一个匹配行</div><div class=\"line\">- NULL    不用扫描表或索引</div><div class=\"line\">ALL 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.</div><div class=\"line\"> </div><div class=\"line\">key:MySQL 在当前查询时所真正使用到的索引.</div><div class=\"line\"> </div><div class=\"line\">key_len:</div><div class=\"line\">表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到</div><div class=\"line\">ref:</div><div class=\"line\">显示索引的哪一列被使用了，如果可能的话，是一个常数</div><div class=\"line\">rows:</div><div class=\"line\">估算 SQL 要查找到结果集需要扫描读取的数据行数,原则上rows越小越好</div><div class=\"line\">filtered:</div><div class=\"line\">存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)</div><div class=\"line\">Extra:</div><div class=\"line\">执行情况的说明和描述，包含不适合在其他列中显示但是对执行计划非常重要的额外信息</div><div class=\"line\">主要包括：</div><div class=\"line\">- Using Index   表示索引覆盖，不会回表查询</div><div class=\"line\">- Using Where   表示进行了回表查询</div><div class=\"line\">- Using Index Condition 表示进行了ICP优化</div><div class=\"line\">- Using Flesort  表示MySQL需额外排序操作, 不能通过索引顺序达到排序效果</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h4><p>B-Tree索引：mysql引擎默认支持这种索引</p>\n<p>MyISAM 使用前缀技术使索引更小<br>InnoDB 按照原数据格式进行存储</p>\n<p>B-Tree索引可以快速访问数据，不再需要进行全表扫描获取需要的数据，从索引的根节点开始进行搜索</p>\n<h4 id=\"Mysql索引原理\"><a href=\"#Mysql索引原理\" class=\"headerlink\" title=\"Mysql索引原理\"></a>Mysql索引原理</h4><h5 id=\"b-树介绍\"><a href=\"#b-树介绍\" class=\"headerlink\" title=\"b+树介绍\"></a>b+树介绍</h5><p><img src=\"https://ttxsgoto.github.io/img/mysql/btree_index.png\" alt=\"\"><br>如上图，是一颗b+树。浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含<br>几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。</p>\n<p>真实的数据存在于叶子节点，即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中</p>\n<h5 id=\"查找过程\"><a href=\"#查找过程\" class=\"headerlink\" title=\"查找过程\"></a>查找过程</h5><p>在上图中，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高</p>\n<h5 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h5><p>(1) 索引字段要尽量的小。</p>\n<p>通过上面b+树的查找过程，或者通过真实的数据存在于叶子节点这个事实可知，IO次数取决于b+数的高度h。</p>\n<p>假设当前数据表的数据量为N，每个磁盘块的数据项的数量是m，则树高h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；</p>\n<p>而m = 磁盘块的大小/数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的；如果数据项占的空间越小，数据项的数量m越多，树的高度h越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。</p>\n<p>(2) 索引的最左匹配特性</p>\n<p>当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p>\n<h4 id=\"Mysql索引类型\"><a href=\"#Mysql索引类型\" class=\"headerlink\" title=\"Mysql索引类型\"></a>Mysql索引类型</h4><ul>\n<li><p>主键索引 PRIMARY KEY</p>\n<p>  它是一种特殊的唯一索引，不允许有空值,一般是在建表的时候同时创建主键索引</p>\n</li>\n<li><p>唯一索引 UNIQUE</p>\n<p>  唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD UNIQUE (column);</p>\n</li>\n<li><p>普通索引 INDEX</p>\n<p>  这是最基本的索引，它没有任何限制。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD INDEX index_name (column);</p>\n</li>\n<li><p>组合索引 INDEX</p>\n<p>  组合索引，即一个索引包含多个列。可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);</p>\n</li>\n<li><p>全文索引 FULLTEXT</p>\n<p>  全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用分词技术等多种算法智能分析出文本文字中关键字词的频率及重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。<br>  可以在创建表的时候指定，也可以修改表结构，如：<br>  ALTER TABLE table_name ADD FULLTEXT (column);</p>\n</li>\n<li><p>查看索引 SHOW INDEX FROM table_name;</p>\n</li>\n<li>索引一旦创建后不能修改，如果需要修改，则需要删除重建，删除索引 DROP INDEX index_name ON table_name;</li>\n</ul>\n<h4 id=\"索引优点\"><a href=\"#索引优点\" class=\"headerlink\" title=\"索引优点\"></a>索引优点</h4><ul>\n<li>索引大大减少了服务器需要扫描的数据量</li>\n<li>索引可以帮助服务器避免排序和临时表</li>\n<li>索引可以将随机IO变成顺序IO</li>\n</ul>\n<h4 id=\"建索引的策略\"><a href=\"#建索引的策略\" class=\"headerlink\" title=\"建索引的策略\"></a>建索引的策略</h4><ol>\n<li><p>最左前缀匹配原则</p>\n<p> mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整</p>\n<p> 一般情况，在创建多列索引时，where子句中使用最频繁的一列放在最左边</p>\n</li>\n<li><p>=和in可以乱序</p>\n<p> 比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>\n</li>\n<li><p>尽量选择区分度高的作为索引</p>\n<p> 区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p>\n</li>\n<li><p>索引列不能参与计算，保持列“干净”</p>\n</li>\n<li><p>尽量的扩展索引，不要新建索引</p>\n<p> 比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p>\n</li>\n</ol>\n<h4 id=\"查询分析器-explain命令\"><a href=\"#查询分析器-explain命令\" class=\"headerlink\" title=\"查询分析器-explain命令\"></a>查询分析器-explain命令</h4><p> EXPLAIN SELECT * from trip_coord WHERE city=”cd”\\G;<br> 对应的字段说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</div><div class=\"line\">- select_type: SELECT 查询的类型.</div><div class=\"line\">- table: 查询的是哪个表</div><div class=\"line\">- type: join 类型</div><div class=\"line\">- possible_keys: 此次查询中可能选用的索引</div><div class=\"line\">- key: 此次查询中确切使用到的索引.</div><div class=\"line\">- key_len: 索引长度</div><div class=\"line\">- ref: 哪个字段或常数与 key 一起被使用</div><div class=\"line\">- rows: 显示此查询一共扫描了多少行. 这个是一个估计值</div><div class=\"line\">- filtered: 存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)</div><div class=\"line\">- extra: 额外的信息</div></pre></td></tr></table></figure></p>\n<p>其中重要的字段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">select_type:</div><div class=\"line\">- SIMPLE, 表示此查询不包含 UNION 查询或子查询</div><div class=\"line\">- PRIMARY, 表示此查询是最外层的查询</div><div class=\"line\">- UNION, 表示此查询是 UNION 的第二或随后的查询</div><div class=\"line\">- DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询</div><div class=\"line\">- UNION RESULT, UNION 的结果</div><div class=\"line\">- SUBQUERY, 子查询中的第一个 SELECT</div><div class=\"line\">- DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</div><div class=\"line\">- DERIVED：派生表的 SELECT(FROM 子句的子查询)</div><div class=\"line\"> </div><div class=\"line\">type:</div><div class=\"line\">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</div><div class=\"line\">从左到右，性能由好到坏</div><div class=\"line\">- ALL 全表扫描</div><div class=\"line\">- index   索引全扫描</div><div class=\"line\">- range   索引范围扫描</div><div class=\"line\">- ref 非唯一索引扫描</div><div class=\"line\">- eq_ref  唯一索引扫描</div><div class=\"line\">- const,system    单表最多有一个匹配行</div><div class=\"line\">- NULL    不用扫描表或索引</div><div class=\"line\">ALL 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.</div><div class=\"line\"> </div><div class=\"line\">key:MySQL 在当前查询时所真正使用到的索引.</div><div class=\"line\"> </div><div class=\"line\">key_len:</div><div class=\"line\">表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到</div><div class=\"line\">ref:</div><div class=\"line\">显示索引的哪一列被使用了，如果可能的话，是一个常数</div><div class=\"line\">rows:</div><div class=\"line\">估算 SQL 要查找到结果集需要扫描读取的数据行数,原则上rows越小越好</div><div class=\"line\">filtered:</div><div class=\"line\">存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)</div><div class=\"line\">Extra:</div><div class=\"line\">执行情况的说明和描述，包含不适合在其他列中显示但是对执行计划非常重要的额外信息</div><div class=\"line\">主要包括：</div><div class=\"line\">- Using Index   表示索引覆盖，不会回表查询</div><div class=\"line\">- Using Where   表示进行了回表查询</div><div class=\"line\">- Using Index Condition 表示进行了ICP优化</div><div class=\"line\">- Using Flesort  表示MySQL需额外排序操作, 不能通过索引顺序达到排序效果</div></pre></td></tr></table></figure></p>\n"},{"title":"Mysql索引02","date":"2018-08-11T03:33:20.000Z","_content":"#### 索引常见模型\n- 哈希表\n    - 适用于只有等值查询的场景\n    - 哈希冲突的处理办法：链表\n- 有序数组\n    - 在等值查询和范围查询场景中性能都非常优秀\n    - 只适用于静态存储引擎\n    - 在更新数据时，需要挪动后面所有的记录，成本高\n- 搜索树\n\n\n#### InnoDB索引模型\n在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表\n\n每一个索引在InnoDB里面对应一棵B+树\n\n主键索引的叶子节点存的整行数据，主键索引也称为聚簇索引(clustered index)\n\n非主键索引的叶子节点内容是主键的值，非主键索引也被称为二级索引(secondary index)\n\n#### 主键索引和普通索引的查询区别\n- 基于非主键索引的查询需要多扫描一棵索引数，扫描主键索引\n- 回到主键索引树搜索的过程，我们称为回表\n\n#### 索引维护\n在插入数据时，索引的数据也会变化\n\n如果插入的数据对应的数据页已经满了，根据B+树的算法，需要申请一个新的数据页，然后挪动部分数据到新的数据页中，该过程称为页分裂\n\n页分裂影响性能而且也影响数据页的利用率\n\n\n主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也越小\n\n从性能和存储空间考虑，自增主键比没有使用自增主键合理\n\n\n#### 覆盖索引\nselect id from table where k between 3 and 5;\n索引K 已经“覆盖了”我们查询需求，我们称之为覆盖索引\n由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引为一个常用的性能优化手段\n\n实例：\n```\nCREATE TABLE `tuser` (\n    `id` int(11) NOT NULL,\n    `id_card` varchar(32) DEFAULT NULL,\n    `name` varchar(32) DEFAULT NULL,\n    `age` int(11) DEFAULT NULL,\n    `ismale` tinyint(1) DEFAULT NULL,\n    PRIMARY KEY (`id`),\n    KEY `id_card` (`id_card`),\n    KEY `name_age` (`name`,`age`)\n    ) ENGINE=InnoDB;\n```\n如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间\n\n\n#### 最左前缀原则\n- B+树这种索引结构，可利用索引的“最左前缀”，来定位记录\n- 最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符\n- 最左前缀评估标准，索引的复用能力\n\n建立联合索引时，如果安排索引内的字段顺序？\n- 如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的\n- 在联合索引时，建立单个索引考虑的原则为空间\n\n#### 索引下推(Mysql5.6之后)\n在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数\nname like \"zhang%\" and age>10,会对匹配的数据进行回表查询，如果有索引下推机制，那么会先过滤掉age<10的数据，在执行回表查询，提高检索速度\n\nalter table T engine=InnoDB 是用来释放 delete 操作引起的页的空洞,也就是碎片空间 操作时候尽量避免当前表的dml 操作.\n表数据很大情况 建议使用 Percona Toolkit 工具来执行\n","source":"_posts/yw-mysql-index02.md","raw":"---\ntitle: Mysql索引02\ndate: 2018-08-11 11:33:20\ntags:\n  - Index\ncategories:\n  - Mysql\n---\n#### 索引常见模型\n- 哈希表\n    - 适用于只有等值查询的场景\n    - 哈希冲突的处理办法：链表\n- 有序数组\n    - 在等值查询和范围查询场景中性能都非常优秀\n    - 只适用于静态存储引擎\n    - 在更新数据时，需要挪动后面所有的记录，成本高\n- 搜索树\n\n\n#### InnoDB索引模型\n在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表\n\n每一个索引在InnoDB里面对应一棵B+树\n\n主键索引的叶子节点存的整行数据，主键索引也称为聚簇索引(clustered index)\n\n非主键索引的叶子节点内容是主键的值，非主键索引也被称为二级索引(secondary index)\n\n#### 主键索引和普通索引的查询区别\n- 基于非主键索引的查询需要多扫描一棵索引数，扫描主键索引\n- 回到主键索引树搜索的过程，我们称为回表\n\n#### 索引维护\n在插入数据时，索引的数据也会变化\n\n如果插入的数据对应的数据页已经满了，根据B+树的算法，需要申请一个新的数据页，然后挪动部分数据到新的数据页中，该过程称为页分裂\n\n页分裂影响性能而且也影响数据页的利用率\n\n\n主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也越小\n\n从性能和存储空间考虑，自增主键比没有使用自增主键合理\n\n\n#### 覆盖索引\nselect id from table where k between 3 and 5;\n索引K 已经“覆盖了”我们查询需求，我们称之为覆盖索引\n由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引为一个常用的性能优化手段\n\n实例：\n```\nCREATE TABLE `tuser` (\n    `id` int(11) NOT NULL,\n    `id_card` varchar(32) DEFAULT NULL,\n    `name` varchar(32) DEFAULT NULL,\n    `age` int(11) DEFAULT NULL,\n    `ismale` tinyint(1) DEFAULT NULL,\n    PRIMARY KEY (`id`),\n    KEY `id_card` (`id_card`),\n    KEY `name_age` (`name`,`age`)\n    ) ENGINE=InnoDB;\n```\n如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间\n\n\n#### 最左前缀原则\n- B+树这种索引结构，可利用索引的“最左前缀”，来定位记录\n- 最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符\n- 最左前缀评估标准，索引的复用能力\n\n建立联合索引时，如果安排索引内的字段顺序？\n- 如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的\n- 在联合索引时，建立单个索引考虑的原则为空间\n\n#### 索引下推(Mysql5.6之后)\n在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数\nname like \"zhang%\" and age>10,会对匹配的数据进行回表查询，如果有索引下推机制，那么会先过滤掉age<10的数据，在执行回表查询，提高检索速度\n\nalter table T engine=InnoDB 是用来释放 delete 操作引起的页的空洞,也就是碎片空间 操作时候尽量避免当前表的dml 操作.\n表数据很大情况 建议使用 Percona Toolkit 工具来执行\n","slug":"yw-mysql-index02","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zk007act8u9y7b83es","content":"<h4 id=\"索引常见模型\"><a href=\"#索引常见模型\" class=\"headerlink\" title=\"索引常见模型\"></a>索引常见模型</h4><ul>\n<li>哈希表<ul>\n<li>适用于只有等值查询的场景</li>\n<li>哈希冲突的处理办法：链表</li>\n</ul>\n</li>\n<li>有序数组<ul>\n<li>在等值查询和范围查询场景中性能都非常优秀</li>\n<li>只适用于静态存储引擎</li>\n<li>在更新数据时，需要挪动后面所有的记录，成本高</li>\n</ul>\n</li>\n<li>搜索树</li>\n</ul>\n<h4 id=\"InnoDB索引模型\"><a href=\"#InnoDB索引模型\" class=\"headerlink\" title=\"InnoDB索引模型\"></a>InnoDB索引模型</h4><p>在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表</p>\n<p>每一个索引在InnoDB里面对应一棵B+树</p>\n<p>主键索引的叶子节点存的整行数据，主键索引也称为聚簇索引(clustered index)</p>\n<p>非主键索引的叶子节点内容是主键的值，非主键索引也被称为二级索引(secondary index)</p>\n<h4 id=\"主键索引和普通索引的查询区别\"><a href=\"#主键索引和普通索引的查询区别\" class=\"headerlink\" title=\"主键索引和普通索引的查询区别\"></a>主键索引和普通索引的查询区别</h4><ul>\n<li>基于非主键索引的查询需要多扫描一棵索引数，扫描主键索引</li>\n<li>回到主键索引树搜索的过程，我们称为回表</li>\n</ul>\n<h4 id=\"索引维护\"><a href=\"#索引维护\" class=\"headerlink\" title=\"索引维护\"></a>索引维护</h4><p>在插入数据时，索引的数据也会变化</p>\n<p>如果插入的数据对应的数据页已经满了，根据B+树的算法，需要申请一个新的数据页，然后挪动部分数据到新的数据页中，该过程称为页分裂</p>\n<p>页分裂影响性能而且也影响数据页的利用率</p>\n<p>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也越小</p>\n<p>从性能和存储空间考虑，自增主键比没有使用自增主键合理</p>\n<h4 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h4><p>select id from table where k between 3 and 5;<br>索引K 已经“覆盖了”我们查询需求，我们称之为覆盖索引<br>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引为一个常用的性能优化手段</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE `tuser` (</div><div class=\"line\">    `id` int(11) NOT NULL,</div><div class=\"line\">    `id_card` varchar(32) DEFAULT NULL,</div><div class=\"line\">    `name` varchar(32) DEFAULT NULL,</div><div class=\"line\">    `age` int(11) DEFAULT NULL,</div><div class=\"line\">    `ismale` tinyint(1) DEFAULT NULL,</div><div class=\"line\">    PRIMARY KEY (`id`),</div><div class=\"line\">    KEY `id_card` (`id_card`),</div><div class=\"line\">    KEY `name_age` (`name`,`age`)</div><div class=\"line\">    ) ENGINE=InnoDB;</div></pre></td></tr></table></figure></p>\n<p>如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间</p>\n<h4 id=\"最左前缀原则\"><a href=\"#最左前缀原则\" class=\"headerlink\" title=\"最左前缀原则\"></a>最左前缀原则</h4><ul>\n<li>B+树这种索引结构，可利用索引的“最左前缀”，来定位记录</li>\n<li>最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符</li>\n<li>最左前缀评估标准，索引的复用能力</li>\n</ul>\n<p>建立联合索引时，如果安排索引内的字段顺序？</p>\n<ul>\n<li>如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的</li>\n<li>在联合索引时，建立单个索引考虑的原则为空间</li>\n</ul>\n<h4 id=\"索引下推-Mysql5-6之后\"><a href=\"#索引下推-Mysql5-6之后\" class=\"headerlink\" title=\"索引下推(Mysql5.6之后)\"></a>索引下推(Mysql5.6之后)</h4><p>在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数<br>name like “zhang%” and age&gt;10,会对匹配的数据进行回表查询，如果有索引下推机制，那么会先过滤掉age&lt;10的数据，在执行回表查询，提高检索速度</p>\n<p>alter table T engine=InnoDB 是用来释放 delete 操作引起的页的空洞,也就是碎片空间 操作时候尽量避免当前表的dml 操作.<br>表数据很大情况 建议使用 Percona Toolkit 工具来执行</p>\n","excerpt":"","more":"<h4 id=\"索引常见模型\"><a href=\"#索引常见模型\" class=\"headerlink\" title=\"索引常见模型\"></a>索引常见模型</h4><ul>\n<li>哈希表<ul>\n<li>适用于只有等值查询的场景</li>\n<li>哈希冲突的处理办法：链表</li>\n</ul>\n</li>\n<li>有序数组<ul>\n<li>在等值查询和范围查询场景中性能都非常优秀</li>\n<li>只适用于静态存储引擎</li>\n<li>在更新数据时，需要挪动后面所有的记录，成本高</li>\n</ul>\n</li>\n<li>搜索树</li>\n</ul>\n<h4 id=\"InnoDB索引模型\"><a href=\"#InnoDB索引模型\" class=\"headerlink\" title=\"InnoDB索引模型\"></a>InnoDB索引模型</h4><p>在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表</p>\n<p>每一个索引在InnoDB里面对应一棵B+树</p>\n<p>主键索引的叶子节点存的整行数据，主键索引也称为聚簇索引(clustered index)</p>\n<p>非主键索引的叶子节点内容是主键的值，非主键索引也被称为二级索引(secondary index)</p>\n<h4 id=\"主键索引和普通索引的查询区别\"><a href=\"#主键索引和普通索引的查询区别\" class=\"headerlink\" title=\"主键索引和普通索引的查询区别\"></a>主键索引和普通索引的查询区别</h4><ul>\n<li>基于非主键索引的查询需要多扫描一棵索引数，扫描主键索引</li>\n<li>回到主键索引树搜索的过程，我们称为回表</li>\n</ul>\n<h4 id=\"索引维护\"><a href=\"#索引维护\" class=\"headerlink\" title=\"索引维护\"></a>索引维护</h4><p>在插入数据时，索引的数据也会变化</p>\n<p>如果插入的数据对应的数据页已经满了，根据B+树的算法，需要申请一个新的数据页，然后挪动部分数据到新的数据页中，该过程称为页分裂</p>\n<p>页分裂影响性能而且也影响数据页的利用率</p>\n<p>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也越小</p>\n<p>从性能和存储空间考虑，自增主键比没有使用自增主键合理</p>\n<h4 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h4><p>select id from table where k between 3 and 5;<br>索引K 已经“覆盖了”我们查询需求，我们称之为覆盖索引<br>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引为一个常用的性能优化手段</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE `tuser` (</div><div class=\"line\">    `id` int(11) NOT NULL,</div><div class=\"line\">    `id_card` varchar(32) DEFAULT NULL,</div><div class=\"line\">    `name` varchar(32) DEFAULT NULL,</div><div class=\"line\">    `age` int(11) DEFAULT NULL,</div><div class=\"line\">    `ismale` tinyint(1) DEFAULT NULL,</div><div class=\"line\">    PRIMARY KEY (`id`),</div><div class=\"line\">    KEY `id_card` (`id_card`),</div><div class=\"line\">    KEY `name_age` (`name`,`age`)</div><div class=\"line\">    ) ENGINE=InnoDB;</div></pre></td></tr></table></figure></p>\n<p>如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间</p>\n<h4 id=\"最左前缀原则\"><a href=\"#最左前缀原则\" class=\"headerlink\" title=\"最左前缀原则\"></a>最左前缀原则</h4><ul>\n<li>B+树这种索引结构，可利用索引的“最左前缀”，来定位记录</li>\n<li>最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符</li>\n<li>最左前缀评估标准，索引的复用能力</li>\n</ul>\n<p>建立联合索引时，如果安排索引内的字段顺序？</p>\n<ul>\n<li>如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的</li>\n<li>在联合索引时，建立单个索引考虑的原则为空间</li>\n</ul>\n<h4 id=\"索引下推-Mysql5-6之后\"><a href=\"#索引下推-Mysql5-6之后\" class=\"headerlink\" title=\"索引下推(Mysql5.6之后)\"></a>索引下推(Mysql5.6之后)</h4><p>在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数<br>name like “zhang%” and age&gt;10,会对匹配的数据进行回表查询，如果有索引下推机制，那么会先过滤掉age&lt;10的数据，在执行回表查询，提高检索速度</p>\n<p>alter table T engine=InnoDB 是用来释放 delete 操作引起的页的空洞,也就是碎片空间 操作时候尽量避免当前表的dml 操作.<br>表数据很大情况 建议使用 Percona Toolkit 工具来执行</p>\n"},{"title":"全局锁、表级锁和行锁","date":"2018-12-27T14:44:05.000Z","_content":"#### 锁分类\n- 全局锁\n- 表级锁\n- 行锁\n\n\n#### 全局锁\n全局锁就是对整个数据库实例加锁\n命令\n```\nflush tables with read lock\n```\n使用该命令后其他线程的执行语句都会被阻塞：数据更新语句(数据的增删改)和数据定义语句(建表和修改表结构等)和更新事务的提交语句\n\n**应用**：全库逻辑备份\n- innodb引擎， mysqldump 使用参数-single-transaction，导数据时会启动一个事务，来确保一致性视图\n- myisam引擎，不支持事务，需要使用FTWRL命令\n\n\n#### 表级锁\n##### 表锁\n\n语句: \n```\nlock tables xxx read/write;\nunlock tables;\n```\n表锁是最常用的处理并发的方式，而对于innodb这种行锁的引擎，一般不会使用lock tables命令来控制并发，因为锁住整个表的影响太大\n\n##### 元数据锁(meta data lock, MDL)\nMDL不需要显示使用，在访问一个表时会自动加上，MDL的作用，保证读写的正确性\n\n- 在对一个表做增删改查操作，加MDL读锁，当要对表做结构变更操作，加MDL写锁\n- 读锁之间不互斥，可以有多个线程对一张表增删改查\n- 读写锁之间，写锁之间互斥，用来保证变更表结构操作的安全性,如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完成后才能开始执行\n\n##### 安全给小表加字段\n1. 需要解决长事务，事务不提交，就会一直占用MDL锁，mysql中的information_schema库中INNODB_TRX表中记录着当前执行中的事务\n2. 变更热点表，在alter table语句里面设置等待时间，如果在等待时间没有拿到也不会阻塞\n    ```\n    alter table xxx nowait add column ...\n    alter table yyy wait n add column ...\n    ```\n\n#### 行锁\n行锁是针对数据表中的行记录的锁\n\nmysql行锁是在引擎层自己实现的，并不是所有引擎都支持行锁，如myisam引擎不支持行锁，只能使用表锁，任何时刻只能有一个更新在执行，影响业务并发度\n\n##### 两阶段锁\n在innodb事务中，行锁是在需要的时候才加上，但并不是不需要了立刻释放，而是要等到事务结束时才释放\n\n**如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放**\n##### 死锁和死锁检测\n\n死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态\n\n出现死锁，解决策略：\n- 直接进入等待，直到超时，超时时间可以通过参数`innodb_lock_wait_timeout`来设置，默认值为50s\n- 发起死锁检测，发现死锁后，主动回滚死锁链条中的某个事物，让其他事物得以继续执行，通过参数`innodb_deadlock_detect`设置为on，来开启死锁检测\n\n如果所有事务都要更新同一行，这时死锁检测将消耗大量cpu资源，因此出现cpu利用率很高，但每秒执行不了多少事务\n\n解决方案：\n- 控制并发，在数据库服务端控制并发，需要修改mysql源码，要求高\n- 业务上，将更新一行改为逻辑上的多行来减少锁冲突\n- 减少死锁的主要方向，控制访问相同资源的并发事务量\n\ninnodb行级锁是通过锁索引记录实现的，如果更新的列没有建索引会锁住整个表的\n\n","source":"_posts/yw-mysql-lock.md","raw":"---\ntitle: 全局锁、表级锁和行锁\ndate: 2018-12-27 22:44:05\ntags:\n  - Lock\ncategories:\n  - Mysql\n---\n#### 锁分类\n- 全局锁\n- 表级锁\n- 行锁\n\n\n#### 全局锁\n全局锁就是对整个数据库实例加锁\n命令\n```\nflush tables with read lock\n```\n使用该命令后其他线程的执行语句都会被阻塞：数据更新语句(数据的增删改)和数据定义语句(建表和修改表结构等)和更新事务的提交语句\n\n**应用**：全库逻辑备份\n- innodb引擎， mysqldump 使用参数-single-transaction，导数据时会启动一个事务，来确保一致性视图\n- myisam引擎，不支持事务，需要使用FTWRL命令\n\n\n#### 表级锁\n##### 表锁\n\n语句: \n```\nlock tables xxx read/write;\nunlock tables;\n```\n表锁是最常用的处理并发的方式，而对于innodb这种行锁的引擎，一般不会使用lock tables命令来控制并发，因为锁住整个表的影响太大\n\n##### 元数据锁(meta data lock, MDL)\nMDL不需要显示使用，在访问一个表时会自动加上，MDL的作用，保证读写的正确性\n\n- 在对一个表做增删改查操作，加MDL读锁，当要对表做结构变更操作，加MDL写锁\n- 读锁之间不互斥，可以有多个线程对一张表增删改查\n- 读写锁之间，写锁之间互斥，用来保证变更表结构操作的安全性,如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完成后才能开始执行\n\n##### 安全给小表加字段\n1. 需要解决长事务，事务不提交，就会一直占用MDL锁，mysql中的information_schema库中INNODB_TRX表中记录着当前执行中的事务\n2. 变更热点表，在alter table语句里面设置等待时间，如果在等待时间没有拿到也不会阻塞\n    ```\n    alter table xxx nowait add column ...\n    alter table yyy wait n add column ...\n    ```\n\n#### 行锁\n行锁是针对数据表中的行记录的锁\n\nmysql行锁是在引擎层自己实现的，并不是所有引擎都支持行锁，如myisam引擎不支持行锁，只能使用表锁，任何时刻只能有一个更新在执行，影响业务并发度\n\n##### 两阶段锁\n在innodb事务中，行锁是在需要的时候才加上，但并不是不需要了立刻释放，而是要等到事务结束时才释放\n\n**如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放**\n##### 死锁和死锁检测\n\n死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态\n\n出现死锁，解决策略：\n- 直接进入等待，直到超时，超时时间可以通过参数`innodb_lock_wait_timeout`来设置，默认值为50s\n- 发起死锁检测，发现死锁后，主动回滚死锁链条中的某个事物，让其他事物得以继续执行，通过参数`innodb_deadlock_detect`设置为on，来开启死锁检测\n\n如果所有事务都要更新同一行，这时死锁检测将消耗大量cpu资源，因此出现cpu利用率很高，但每秒执行不了多少事务\n\n解决方案：\n- 控制并发，在数据库服务端控制并发，需要修改mysql源码，要求高\n- 业务上，将更新一行改为逻辑上的多行来减少锁冲突\n- 减少死锁的主要方向，控制访问相同资源的并发事务量\n\ninnodb行级锁是通过锁索引记录实现的，如果更新的列没有建索引会锁住整个表的\n\n","slug":"yw-mysql-lock","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zm007ect8umzuesjs6","content":"<h4 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h4><ul>\n<li>全局锁</li>\n<li>表级锁</li>\n<li>行锁</li>\n</ul>\n<h4 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h4><p>全局锁就是对整个数据库实例加锁<br>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flush tables with read lock</div></pre></td></tr></table></figure></p>\n<p>使用该命令后其他线程的执行语句都会被阻塞：数据更新语句(数据的增删改)和数据定义语句(建表和修改表结构等)和更新事务的提交语句</p>\n<p><strong>应用</strong>：全库逻辑备份</p>\n<ul>\n<li>innodb引擎， mysqldump 使用参数-single-transaction，导数据时会启动一个事务，来确保一致性视图</li>\n<li>myisam引擎，不支持事务，需要使用FTWRL命令</li>\n</ul>\n<h4 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h4><h5 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h5><p>语句:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lock tables xxx read/write;</div><div class=\"line\">unlock tables;</div></pre></td></tr></table></figure></p>\n<p>表锁是最常用的处理并发的方式，而对于innodb这种行锁的引擎，一般不会使用lock tables命令来控制并发，因为锁住整个表的影响太大</p>\n<h5 id=\"元数据锁-meta-data-lock-MDL\"><a href=\"#元数据锁-meta-data-lock-MDL\" class=\"headerlink\" title=\"元数据锁(meta data lock, MDL)\"></a>元数据锁(meta data lock, MDL)</h5><p>MDL不需要显示使用，在访问一个表时会自动加上，MDL的作用，保证读写的正确性</p>\n<ul>\n<li>在对一个表做增删改查操作，加MDL读锁，当要对表做结构变更操作，加MDL写锁</li>\n<li>读锁之间不互斥，可以有多个线程对一张表增删改查</li>\n<li>读写锁之间，写锁之间互斥，用来保证变更表结构操作的安全性,如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完成后才能开始执行</li>\n</ul>\n<h5 id=\"安全给小表加字段\"><a href=\"#安全给小表加字段\" class=\"headerlink\" title=\"安全给小表加字段\"></a>安全给小表加字段</h5><ol>\n<li>需要解决长事务，事务不提交，就会一直占用MDL锁，mysql中的information_schema库中INNODB_TRX表中记录着当前执行中的事务</li>\n<li>变更热点表，在alter table语句里面设置等待时间，如果在等待时间没有拿到也不会阻塞 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table xxx nowait add column ...</div><div class=\"line\">alter table yyy wait n add column ...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h4><p>行锁是针对数据表中的行记录的锁</p>\n<p>mysql行锁是在引擎层自己实现的，并不是所有引擎都支持行锁，如myisam引擎不支持行锁，只能使用表锁，任何时刻只能有一个更新在执行，影响业务并发度</p>\n<h5 id=\"两阶段锁\"><a href=\"#两阶段锁\" class=\"headerlink\" title=\"两阶段锁\"></a>两阶段锁</h5><p>在innodb事务中，行锁是在需要的时候才加上，但并不是不需要了立刻释放，而是要等到事务结束时才释放</p>\n<p><strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放</strong></p>\n<h5 id=\"死锁和死锁检测\"><a href=\"#死锁和死锁检测\" class=\"headerlink\" title=\"死锁和死锁检测\"></a>死锁和死锁检测</h5><p>死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态</p>\n<p>出现死锁，解决策略：</p>\n<ul>\n<li>直接进入等待，直到超时，超时时间可以通过参数<code>innodb_lock_wait_timeout</code>来设置，默认值为50s</li>\n<li>发起死锁检测，发现死锁后，主动回滚死锁链条中的某个事物，让其他事物得以继续执行，通过参数<code>innodb_deadlock_detect</code>设置为on，来开启死锁检测</li>\n</ul>\n<p>如果所有事务都要更新同一行，这时死锁检测将消耗大量cpu资源，因此出现cpu利用率很高，但每秒执行不了多少事务</p>\n<p>解决方案：</p>\n<ul>\n<li>控制并发，在数据库服务端控制并发，需要修改mysql源码，要求高</li>\n<li>业务上，将更新一行改为逻辑上的多行来减少锁冲突</li>\n<li>减少死锁的主要方向，控制访问相同资源的并发事务量</li>\n</ul>\n<p>innodb行级锁是通过锁索引记录实现的，如果更新的列没有建索引会锁住整个表的</p>\n","excerpt":"","more":"<h4 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h4><ul>\n<li>全局锁</li>\n<li>表级锁</li>\n<li>行锁</li>\n</ul>\n<h4 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h4><p>全局锁就是对整个数据库实例加锁<br>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flush tables with read lock</div></pre></td></tr></table></figure></p>\n<p>使用该命令后其他线程的执行语句都会被阻塞：数据更新语句(数据的增删改)和数据定义语句(建表和修改表结构等)和更新事务的提交语句</p>\n<p><strong>应用</strong>：全库逻辑备份</p>\n<ul>\n<li>innodb引擎， mysqldump 使用参数-single-transaction，导数据时会启动一个事务，来确保一致性视图</li>\n<li>myisam引擎，不支持事务，需要使用FTWRL命令</li>\n</ul>\n<h4 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h4><h5 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h5><p>语句:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lock tables xxx read/write;</div><div class=\"line\">unlock tables;</div></pre></td></tr></table></figure></p>\n<p>表锁是最常用的处理并发的方式，而对于innodb这种行锁的引擎，一般不会使用lock tables命令来控制并发，因为锁住整个表的影响太大</p>\n<h5 id=\"元数据锁-meta-data-lock-MDL\"><a href=\"#元数据锁-meta-data-lock-MDL\" class=\"headerlink\" title=\"元数据锁(meta data lock, MDL)\"></a>元数据锁(meta data lock, MDL)</h5><p>MDL不需要显示使用，在访问一个表时会自动加上，MDL的作用，保证读写的正确性</p>\n<ul>\n<li>在对一个表做增删改查操作，加MDL读锁，当要对表做结构变更操作，加MDL写锁</li>\n<li>读锁之间不互斥，可以有多个线程对一张表增删改查</li>\n<li>读写锁之间，写锁之间互斥，用来保证变更表结构操作的安全性,如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完成后才能开始执行</li>\n</ul>\n<h5 id=\"安全给小表加字段\"><a href=\"#安全给小表加字段\" class=\"headerlink\" title=\"安全给小表加字段\"></a>安全给小表加字段</h5><ol>\n<li>需要解决长事务，事务不提交，就会一直占用MDL锁，mysql中的information_schema库中INNODB_TRX表中记录着当前执行中的事务</li>\n<li>变更热点表，在alter table语句里面设置等待时间，如果在等待时间没有拿到也不会阻塞 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table xxx nowait add column ...</div><div class=\"line\">alter table yyy wait n add column ...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h4><p>行锁是针对数据表中的行记录的锁</p>\n<p>mysql行锁是在引擎层自己实现的，并不是所有引擎都支持行锁，如myisam引擎不支持行锁，只能使用表锁，任何时刻只能有一个更新在执行，影响业务并发度</p>\n<h5 id=\"两阶段锁\"><a href=\"#两阶段锁\" class=\"headerlink\" title=\"两阶段锁\"></a>两阶段锁</h5><p>在innodb事务中，行锁是在需要的时候才加上，但并不是不需要了立刻释放，而是要等到事务结束时才释放</p>\n<p><strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放</strong></p>\n<h5 id=\"死锁和死锁检测\"><a href=\"#死锁和死锁检测\" class=\"headerlink\" title=\"死锁和死锁检测\"></a>死锁和死锁检测</h5><p>死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态</p>\n<p>出现死锁，解决策略：</p>\n<ul>\n<li>直接进入等待，直到超时，超时时间可以通过参数<code>innodb_lock_wait_timeout</code>来设置，默认值为50s</li>\n<li>发起死锁检测，发现死锁后，主动回滚死锁链条中的某个事物，让其他事物得以继续执行，通过参数<code>innodb_deadlock_detect</code>设置为on，来开启死锁检测</li>\n</ul>\n<p>如果所有事务都要更新同一行，这时死锁检测将消耗大量cpu资源，因此出现cpu利用率很高，但每秒执行不了多少事务</p>\n<p>解决方案：</p>\n<ul>\n<li>控制并发，在数据库服务端控制并发，需要修改mysql源码，要求高</li>\n<li>业务上，将更新一行改为逻辑上的多行来减少锁冲突</li>\n<li>减少死锁的主要方向，控制访问相同资源的并发事务量</li>\n</ul>\n<p>innodb行级锁是通过锁索引记录实现的，如果更新的列没有建索引会锁住整个表的</p>\n"},{"title":"Order by工作原理","date":"2018-12-28T14:46:51.000Z","_content":"#### 全字段排序\nmysql会给每个线程分配一块内存用于排序，称为sort_buffer\n\nsort_buffer_size 是mysql为排序开辟的内存大小(sort_buffer)大小，如果要排序的数据量小于sort_buffer_size，排序在内存中完成，如果排序数据量太大，大于该值，则需要用磁盘临时文件辅助排序\n\n#### rowid排序\n全字段排序只对原表数据读取一次，剩下的都在sort_buffer和临时文件中进行，如果查询返回的字段很多，那么sort_buffer里面存放的字段数太多，内存里放下的数据行数就很少，需要分成很多个临时文件，排序的性能会受影响，这时需要使用rowid排序\n\nmax_length_for_sort_data 字段用来控制排序的行数据的长度的参数，如果单行的长度超过这个值，mysql会换一种算法，即将查询的列和主键id放入sort_buffer中\n\n这种算法需要多访问一次表的主键索引\n\n如果内存大，mysql就会多利用内存，尽量减少磁盘访问\n\n**写入有序数据，通过索引本身就是写入数据就是有序的，那么order by 就不需要排序了，直接就是对应的数据**\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/yw-mysql-order-by.md","raw":"---\ntitle: Order by工作原理\ndate: 2018-12-28 22:46:51\ntags:\n  - 排序\ncategories:\n  - Mysql\n---\n#### 全字段排序\nmysql会给每个线程分配一块内存用于排序，称为sort_buffer\n\nsort_buffer_size 是mysql为排序开辟的内存大小(sort_buffer)大小，如果要排序的数据量小于sort_buffer_size，排序在内存中完成，如果排序数据量太大，大于该值，则需要用磁盘临时文件辅助排序\n\n#### rowid排序\n全字段排序只对原表数据读取一次，剩下的都在sort_buffer和临时文件中进行，如果查询返回的字段很多，那么sort_buffer里面存放的字段数太多，内存里放下的数据行数就很少，需要分成很多个临时文件，排序的性能会受影响，这时需要使用rowid排序\n\nmax_length_for_sort_data 字段用来控制排序的行数据的长度的参数，如果单行的长度超过这个值，mysql会换一种算法，即将查询的列和主键id放入sort_buffer中\n\n这种算法需要多访问一次表的主键索引\n\n如果内存大，mysql就会多利用内存，尽量减少磁盘访问\n\n**写入有序数据，通过索引本身就是写入数据就是有序的，那么order by 就不需要排序了，直接就是对应的数据**\n\n\n\n\n\n\n\n\n\n\n\n","slug":"yw-mysql-order-by","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zo007gct8uabf04dk4","content":"<h4 id=\"全字段排序\"><a href=\"#全字段排序\" class=\"headerlink\" title=\"全字段排序\"></a>全字段排序</h4><p>mysql会给每个线程分配一块内存用于排序，称为sort_buffer</p>\n<p>sort_buffer_size 是mysql为排序开辟的内存大小(sort_buffer)大小，如果要排序的数据量小于sort_buffer_size，排序在内存中完成，如果排序数据量太大，大于该值，则需要用磁盘临时文件辅助排序</p>\n<h4 id=\"rowid排序\"><a href=\"#rowid排序\" class=\"headerlink\" title=\"rowid排序\"></a>rowid排序</h4><p>全字段排序只对原表数据读取一次，剩下的都在sort_buffer和临时文件中进行，如果查询返回的字段很多，那么sort_buffer里面存放的字段数太多，内存里放下的数据行数就很少，需要分成很多个临时文件，排序的性能会受影响，这时需要使用rowid排序</p>\n<p>max_length_for_sort_data 字段用来控制排序的行数据的长度的参数，如果单行的长度超过这个值，mysql会换一种算法，即将查询的列和主键id放入sort_buffer中</p>\n<p>这种算法需要多访问一次表的主键索引</p>\n<p>如果内存大，mysql就会多利用内存，尽量减少磁盘访问</p>\n<p><strong>写入有序数据，通过索引本身就是写入数据就是有序的，那么order by 就不需要排序了，直接就是对应的数据</strong></p>\n","excerpt":"","more":"<h4 id=\"全字段排序\"><a href=\"#全字段排序\" class=\"headerlink\" title=\"全字段排序\"></a>全字段排序</h4><p>mysql会给每个线程分配一块内存用于排序，称为sort_buffer</p>\n<p>sort_buffer_size 是mysql为排序开辟的内存大小(sort_buffer)大小，如果要排序的数据量小于sort_buffer_size，排序在内存中完成，如果排序数据量太大，大于该值，则需要用磁盘临时文件辅助排序</p>\n<h4 id=\"rowid排序\"><a href=\"#rowid排序\" class=\"headerlink\" title=\"rowid排序\"></a>rowid排序</h4><p>全字段排序只对原表数据读取一次，剩下的都在sort_buffer和临时文件中进行，如果查询返回的字段很多，那么sort_buffer里面存放的字段数太多，内存里放下的数据行数就很少，需要分成很多个临时文件，排序的性能会受影响，这时需要使用rowid排序</p>\n<p>max_length_for_sort_data 字段用来控制排序的行数据的长度的参数，如果单行的长度超过这个值，mysql会换一种算法，即将查询的列和主键id放入sort_buffer中</p>\n<p>这种算法需要多访问一次表的主键索引</p>\n<p>如果内存大，mysql就会多利用内存，尽量减少磁盘访问</p>\n<p><strong>写入有序数据，通过索引本身就是写入数据就是有序的，那么order by 就不需要排序了，直接就是对应的数据</strong></p>\n"},{"title":"Redo log 和 Binlog","date":"2018-12-25T11:43:38.000Z","_content":"WAL(Write-Ahead-Logging),先写日志，再写磁盘\n\n- redo log(重做日志)\n    - 存储引擎层面\n    - 存储容量大小固定，循环写\n    - checkpoint 当前要擦除的位置，擦除记录前需要将数据更新到数据文件中\n    - write-pos 当前写入记录的位置\n    - 功能：保证InnoDB即使数据库发生异常重启，之前提交的记录也不会丢失(crash-safe)\n    - 插件式，innodb引擎特有\n    - 物流日志-记录在某个数据页上做了什么修改\n- binlog(归档日志)\n    - Server层面\n    - 逻辑日志，记录的是这个语句的原始逻辑，sql语句是什么样子的\n\n\n执行器和引擎执行update操作流程：\n\n1. 先取出该查询，如果在内存中则直接返回给执行器，否则先从磁盘读入内存，然后返回\n2. 执行器拿到引擎给的行数据，执行相关操作，再调用引擎接口写入这行新数据\n3. 引擎将这行新数据更新到内存中，同时将这个更新记录到redo log中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务\n4. 执行器生成这个操作的binlog，将binlog写入磁盘\n5. 执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改写提交(commit)状态，更新完成\n\n流程如下：\n```\n获取数据 ——> 返回数据 ——> 执行逻辑 ——> 写入新行 ——> 新行更新到内存 ——> 写入redo log处于prepare状态 ——> 写binlog ——> 提交事务redo log处于commit状态完成\n```\n\nredo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致\n\n数据一致性保持理解：\n\n1 prepare阶段 \n2 写binlog \n3 commit\n\n当在2之前崩溃时\n重启恢复：后发现没有commit，回滚。备份恢复：没有binlog 一致\n当在3之前崩溃\n重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。备份：有binlog. 一致\n\n**参数配置**\ninnodb_flush_log_at_trx_commit 参数设置成1时，表示每次事务的redo log都直接持久化到磁盘，保证mysql异常重启后数据不丢失\nsync_binlog参数设置成1时，表示每次事务的binlog都持久化到磁盘，保证mysql异常重启后binlog不丢失\n\n","source":"_posts/yw-mysql-redo-binlog.md","raw":"---\ntitle: Redo log 和 Binlog\ndate: 2018-12-25 19:43:38\ntags:\n  - binlog\ncategories:\n  - Mysql\n---\nWAL(Write-Ahead-Logging),先写日志，再写磁盘\n\n- redo log(重做日志)\n    - 存储引擎层面\n    - 存储容量大小固定，循环写\n    - checkpoint 当前要擦除的位置，擦除记录前需要将数据更新到数据文件中\n    - write-pos 当前写入记录的位置\n    - 功能：保证InnoDB即使数据库发生异常重启，之前提交的记录也不会丢失(crash-safe)\n    - 插件式，innodb引擎特有\n    - 物流日志-记录在某个数据页上做了什么修改\n- binlog(归档日志)\n    - Server层面\n    - 逻辑日志，记录的是这个语句的原始逻辑，sql语句是什么样子的\n\n\n执行器和引擎执行update操作流程：\n\n1. 先取出该查询，如果在内存中则直接返回给执行器，否则先从磁盘读入内存，然后返回\n2. 执行器拿到引擎给的行数据，执行相关操作，再调用引擎接口写入这行新数据\n3. 引擎将这行新数据更新到内存中，同时将这个更新记录到redo log中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务\n4. 执行器生成这个操作的binlog，将binlog写入磁盘\n5. 执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改写提交(commit)状态，更新完成\n\n流程如下：\n```\n获取数据 ——> 返回数据 ——> 执行逻辑 ——> 写入新行 ——> 新行更新到内存 ——> 写入redo log处于prepare状态 ——> 写binlog ——> 提交事务redo log处于commit状态完成\n```\n\nredo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致\n\n数据一致性保持理解：\n\n1 prepare阶段 \n2 写binlog \n3 commit\n\n当在2之前崩溃时\n重启恢复：后发现没有commit，回滚。备份恢复：没有binlog 一致\n当在3之前崩溃\n重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。备份：有binlog. 一致\n\n**参数配置**\ninnodb_flush_log_at_trx_commit 参数设置成1时，表示每次事务的redo log都直接持久化到磁盘，保证mysql异常重启后数据不丢失\nsync_binlog参数设置成1时，表示每次事务的binlog都持久化到磁盘，保证mysql异常重启后binlog不丢失\n\n","slug":"yw-mysql-redo-binlog","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zq007jct8uhtjbyjsw","content":"<p>WAL(Write-Ahead-Logging),先写日志，再写磁盘</p>\n<ul>\n<li>redo log(重做日志)<ul>\n<li>存储引擎层面</li>\n<li>存储容量大小固定，循环写</li>\n<li>checkpoint 当前要擦除的位置，擦除记录前需要将数据更新到数据文件中</li>\n<li>write-pos 当前写入记录的位置</li>\n<li>功能：保证InnoDB即使数据库发生异常重启，之前提交的记录也不会丢失(crash-safe)</li>\n<li>插件式，innodb引擎特有</li>\n<li>物流日志-记录在某个数据页上做了什么修改</li>\n</ul>\n</li>\n<li>binlog(归档日志)<ul>\n<li>Server层面</li>\n<li>逻辑日志，记录的是这个语句的原始逻辑，sql语句是什么样子的</li>\n</ul>\n</li>\n</ul>\n<p>执行器和引擎执行update操作流程：</p>\n<ol>\n<li>先取出该查询，如果在内存中则直接返回给执行器，否则先从磁盘读入内存，然后返回</li>\n<li>执行器拿到引擎给的行数据，执行相关操作，再调用引擎接口写入这行新数据</li>\n<li>引擎将这行新数据更新到内存中，同时将这个更新记录到redo log中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务</li>\n<li>执行器生成这个操作的binlog，将binlog写入磁盘</li>\n<li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改写提交(commit)状态，更新完成</li>\n</ol>\n<p>流程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">获取数据 ——&gt; 返回数据 ——&gt; 执行逻辑 ——&gt; 写入新行 ——&gt; 新行更新到内存 ——&gt; 写入redo log处于prepare状态 ——&gt; 写binlog ——&gt; 提交事务redo log处于commit状态完成</div></pre></td></tr></table></figure></p>\n<p>redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致</p>\n<p>数据一致性保持理解：</p>\n<p>1 prepare阶段<br>2 写binlog<br>3 commit</p>\n<p>当在2之前崩溃时<br>重启恢复：后发现没有commit，回滚。备份恢复：没有binlog 一致<br>当在3之前崩溃<br>重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。备份：有binlog. 一致</p>\n<p><strong>参数配置</strong><br>innodb_flush_log_at_trx_commit 参数设置成1时，表示每次事务的redo log都直接持久化到磁盘，保证mysql异常重启后数据不丢失<br>sync_binlog参数设置成1时，表示每次事务的binlog都持久化到磁盘，保证mysql异常重启后binlog不丢失</p>\n","excerpt":"","more":"<p>WAL(Write-Ahead-Logging),先写日志，再写磁盘</p>\n<ul>\n<li>redo log(重做日志)<ul>\n<li>存储引擎层面</li>\n<li>存储容量大小固定，循环写</li>\n<li>checkpoint 当前要擦除的位置，擦除记录前需要将数据更新到数据文件中</li>\n<li>write-pos 当前写入记录的位置</li>\n<li>功能：保证InnoDB即使数据库发生异常重启，之前提交的记录也不会丢失(crash-safe)</li>\n<li>插件式，innodb引擎特有</li>\n<li>物流日志-记录在某个数据页上做了什么修改</li>\n</ul>\n</li>\n<li>binlog(归档日志)<ul>\n<li>Server层面</li>\n<li>逻辑日志，记录的是这个语句的原始逻辑，sql语句是什么样子的</li>\n</ul>\n</li>\n</ul>\n<p>执行器和引擎执行update操作流程：</p>\n<ol>\n<li>先取出该查询，如果在内存中则直接返回给执行器，否则先从磁盘读入内存，然后返回</li>\n<li>执行器拿到引擎给的行数据，执行相关操作，再调用引擎接口写入这行新数据</li>\n<li>引擎将这行新数据更新到内存中，同时将这个更新记录到redo log中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务</li>\n<li>执行器生成这个操作的binlog，将binlog写入磁盘</li>\n<li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改写提交(commit)状态，更新完成</li>\n</ol>\n<p>流程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">获取数据 ——&gt; 返回数据 ——&gt; 执行逻辑 ——&gt; 写入新行 ——&gt; 新行更新到内存 ——&gt; 写入redo log处于prepare状态 ——&gt; 写binlog ——&gt; 提交事务redo log处于commit状态完成</div></pre></td></tr></table></figure></p>\n<p>redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致</p>\n<p>数据一致性保持理解：</p>\n<p>1 prepare阶段<br>2 写binlog<br>3 commit</p>\n<p>当在2之前崩溃时<br>重启恢复：后发现没有commit，回滚。备份恢复：没有binlog 一致<br>当在3之前崩溃<br>重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。备份：有binlog. 一致</p>\n<p><strong>参数配置</strong><br>innodb_flush_log_at_trx_commit 参数设置成1时，表示每次事务的redo log都直接持久化到磁盘，保证mysql异常重启后数据不丢失<br>sync_binlog参数设置成1时，表示每次事务的binlog都持久化到磁盘，保证mysql异常重启后binlog不丢失</p>\n"},{"title":"Mysql 出现You can't specify target table for update in FROM clause错误的解决方法","date":"2018-12-03T12:22:02.000Z","_content":"#### 问题描述：\n在同一个sql语句中，先select同一个表的某些值，然后再update这个表\n\n如执行如下sql语句：\n```python\nupdate logistic_statistic set fluid_id='cca03b6a372045f2891fef62d9524652' where id in (\n  select id from logistic_statistic where company= '新能源有限公司');\n```\n执行报错：\n```python\nError : You can't specify target table 'logistic_statistic' for update in FROM clause\n```\n\n#### 解决方法：\nselect的结果再通过一个中间表select多一次，就可以避免这个错误\n\n执行如下sql语句：\n```python\nupdate logistic_statistic set fluid_id=\"cca03b6a372045f2891fef62d9524652\" where id in ( \n  select other_id from ( \n    SELECT id as other_id from logistic_statistic where company= '新能源有限公司') as a ;\n  );\n```\n\n\n\n\n\n","source":"_posts/yw-mysql-question.md","raw":"---\ntitle: Mysql 出现You can't specify target table for update in FROM clause错误的解决方法\ndate: 2018-12-03 20:22:02\ntags:\n  - Mysql\ncategories:\n  - Mysql\n---\n#### 问题描述：\n在同一个sql语句中，先select同一个表的某些值，然后再update这个表\n\n如执行如下sql语句：\n```python\nupdate logistic_statistic set fluid_id='cca03b6a372045f2891fef62d9524652' where id in (\n  select id from logistic_statistic where company= '新能源有限公司');\n```\n执行报错：\n```python\nError : You can't specify target table 'logistic_statistic' for update in FROM clause\n```\n\n#### 解决方法：\nselect的结果再通过一个中间表select多一次，就可以避免这个错误\n\n执行如下sql语句：\n```python\nupdate logistic_statistic set fluid_id=\"cca03b6a372045f2891fef62d9524652\" where id in ( \n  select other_id from ( \n    SELECT id as other_id from logistic_statistic where company= '新能源有限公司') as a ;\n  );\n```\n\n\n\n\n\n","slug":"yw-mysql-question","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zr007lct8ug2hohwew","content":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>在同一个sql语句中，先select同一个表的某些值，然后再update这个表</p>\n<p>如执行如下sql语句：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">update logistic_statistic set fluid_id=<span class=\"string\">'cca03b6a372045f2891fef62d9524652'</span> where id <span class=\"keyword\">in</span> (</div><div class=\"line\">  select id <span class=\"keyword\">from</span> logistic_statistic where company= <span class=\"string\">'新能源有限公司'</span>);</div></pre></td></tr></table></figure></p>\n<p>执行报错：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error : You can<span class=\"string\">'t specify target table '</span>logistic_statistic<span class=\"string\">' for update in FROM clause</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4><p>select的结果再通过一个中间表select多一次，就可以避免这个错误</p>\n<p>执行如下sql语句：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">update logistic_statistic set fluid_id=<span class=\"string\">\"cca03b6a372045f2891fef62d9524652\"</span> where id <span class=\"keyword\">in</span> ( </div><div class=\"line\">  select other_id <span class=\"keyword\">from</span> ( </div><div class=\"line\">    SELECT id <span class=\"keyword\">as</span> other_id <span class=\"keyword\">from</span> logistic_statistic where company= <span class=\"string\">'新能源有限公司'</span>) <span class=\"keyword\">as</span> a ;</div><div class=\"line\">  );</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>在同一个sql语句中，先select同一个表的某些值，然后再update这个表</p>\n<p>如执行如下sql语句：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">update logistic_statistic set fluid_id=<span class=\"string\">'cca03b6a372045f2891fef62d9524652'</span> where id <span class=\"keyword\">in</span> (</div><div class=\"line\">  select id <span class=\"keyword\">from</span> logistic_statistic where company= <span class=\"string\">'新能源有限公司'</span>);</div></pre></td></tr></table></figure></p>\n<p>执行报错：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error : You can<span class=\"string\">'t specify target table '</span>logistic_statistic<span class=\"string\">' for update in FROM clause</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4><p>select的结果再通过一个中间表select多一次，就可以避免这个错误</p>\n<p>执行如下sql语句：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">update logistic_statistic set fluid_id=<span class=\"string\">\"cca03b6a372045f2891fef62d9524652\"</span> where id <span class=\"keyword\">in</span> ( </div><div class=\"line\">  select other_id <span class=\"keyword\">from</span> ( </div><div class=\"line\">    SELECT id <span class=\"keyword\">as</span> other_id <span class=\"keyword\">from</span> logistic_statistic where company= <span class=\"string\">'新能源有限公司'</span>) <span class=\"keyword\">as</span> a ;</div><div class=\"line\">  );</div></pre></td></tr></table></figure></p>\n"},{"title":"索引选择","date":"2018-12-21T03:14:08.000Z","_content":"#### 优化器选择索引逻辑\n- 扫描行数\n- 使用临时表\n- 是否排序\n\n\n#### 基数\n一个索引上不同值的个数，称之为“基数(cardinality)”;基数越大，索引的区分度越好\n\nshow index from x 查看索引对应的基数\n\n- 采样统计， 通过设置参数innodb_stats_persistent来设置\n    ```\n    设置为on，表示统计信息会持久化存储，默认值N为20，M为10\n    设置为off, 表示统计信息只存储在内存中，默认值N为8，M为16\n    ```\nanalyze table t # 用于重新统计索引信息，当发现explain中rows值和实际情况差距比较大时，可以采用使用该命令来处理\n\n#### 索引选择异常和处理\n\n- 使用force index强制选择一个索引\n\t```\n    select * from t force index(a) where a between 1000 and 2000;\n    ```\n- 修改查询语句\n- 新建更合适的索引，来提供优化器来选择，或者删掉误用的索引\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/yw-mysql-select-index.md","raw":"---\ntitle: 索引选择\ndate: 2018-12-21 11:14:08\ntags:\n  - Index\ncategories:\n  - Mysql\n---\n#### 优化器选择索引逻辑\n- 扫描行数\n- 使用临时表\n- 是否排序\n\n\n#### 基数\n一个索引上不同值的个数，称之为“基数(cardinality)”;基数越大，索引的区分度越好\n\nshow index from x 查看索引对应的基数\n\n- 采样统计， 通过设置参数innodb_stats_persistent来设置\n    ```\n    设置为on，表示统计信息会持久化存储，默认值N为20，M为10\n    设置为off, 表示统计信息只存储在内存中，默认值N为8，M为16\n    ```\nanalyze table t # 用于重新统计索引信息，当发现explain中rows值和实际情况差距比较大时，可以采用使用该命令来处理\n\n#### 索引选择异常和处理\n\n- 使用force index强制选择一个索引\n\t```\n    select * from t force index(a) where a between 1000 and 2000;\n    ```\n- 修改查询语句\n- 新建更合适的索引，来提供优化器来选择，或者删掉误用的索引\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"yw-mysql-select-index","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zt007oct8um9m16gr9","content":"<h4 id=\"优化器选择索引逻辑\"><a href=\"#优化器选择索引逻辑\" class=\"headerlink\" title=\"优化器选择索引逻辑\"></a>优化器选择索引逻辑</h4><ul>\n<li>扫描行数</li>\n<li>使用临时表</li>\n<li>是否排序</li>\n</ul>\n<h4 id=\"基数\"><a href=\"#基数\" class=\"headerlink\" title=\"基数\"></a>基数</h4><p>一个索引上不同值的个数，称之为“基数(cardinality)”;基数越大，索引的区分度越好</p>\n<p>show index from x 查看索引对应的基数</p>\n<ul>\n<li>采样统计， 通过设置参数innodb_stats_persistent来设置  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">设置为on，表示统计信息会持久化存储，默认值N为20，M为10</div><div class=\"line\">设置为off, 表示统计信息只存储在内存中，默认值N为8，M为16</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>analyze table t # 用于重新统计索引信息，当发现explain中rows值和实际情况差距比较大时，可以采用使用该命令来处理</p>\n<h4 id=\"索引选择异常和处理\"><a href=\"#索引选择异常和处理\" class=\"headerlink\" title=\"索引选择异常和处理\"></a>索引选择异常和处理</h4><ul>\n<li><p>使用force index强制选择一个索引</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from t force index(a) where a between 1000 and 2000;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改查询语句</p>\n</li>\n<li>新建更合适的索引，来提供优化器来选择，或者删掉误用的索引</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"优化器选择索引逻辑\"><a href=\"#优化器选择索引逻辑\" class=\"headerlink\" title=\"优化器选择索引逻辑\"></a>优化器选择索引逻辑</h4><ul>\n<li>扫描行数</li>\n<li>使用临时表</li>\n<li>是否排序</li>\n</ul>\n<h4 id=\"基数\"><a href=\"#基数\" class=\"headerlink\" title=\"基数\"></a>基数</h4><p>一个索引上不同值的个数，称之为“基数(cardinality)”;基数越大，索引的区分度越好</p>\n<p>show index from x 查看索引对应的基数</p>\n<ul>\n<li>采样统计， 通过设置参数innodb_stats_persistent来设置  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">设置为on，表示统计信息会持久化存储，默认值N为20，M为10</div><div class=\"line\">设置为off, 表示统计信息只存储在内存中，默认值N为8，M为16</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>analyze table t # 用于重新统计索引信息，当发现explain中rows值和实际情况差距比较大时，可以采用使用该命令来处理</p>\n<h4 id=\"索引选择异常和处理\"><a href=\"#索引选择异常和处理\" class=\"headerlink\" title=\"索引选择异常和处理\"></a>索引选择异常和处理</h4><ul>\n<li><p>使用force index强制选择一个索引</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from t force index(a) where a between 1000 and 2000;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改查询语句</p>\n</li>\n<li>新建更合适的索引，来提供优化器来选择，或者删掉误用的索引</li>\n</ul>\n"},{"title":"运维 Mysql分析性能（存储过程）","date":"2017-04-08T14:24:31.000Z","_content":"#### 描述\n之前有一次故障问题，查看数据库慢查询日志，从日志和存储过程本身直接分析，不能得知问题点，之后通过profiling来分析，记录如下\n#### 分析\n0. 查看慢查询日志，发现，出现大量执行等待，使用profiling来分析语句问题点\n1. 先打开profiling： SET profiling=1;\n2. 手动执行有问题的语句： call  GetRoleList(75760);   \n3. SHOW profiles;  可以查看到每条对应SQL语句执行时间，对于执行慢的sql这部分是需要优化的;\n4. 执行完毕后，关闭 SET profiling=0;\n\n","source":"_posts/yw-mysql-store.md","raw":"---\ntitle: 运维 Mysql分析性能（存储过程）\ndate: 2017-04-08 22:24:31\ntags:\n  - Mysql\ncategories:\n  - Mysql\n---\n#### 描述\n之前有一次故障问题，查看数据库慢查询日志，从日志和存储过程本身直接分析，不能得知问题点，之后通过profiling来分析，记录如下\n#### 分析\n0. 查看慢查询日志，发现，出现大量执行等待，使用profiling来分析语句问题点\n1. 先打开profiling： SET profiling=1;\n2. 手动执行有问题的语句： call  GetRoleList(75760);   \n3. SHOW profiles;  可以查看到每条对应SQL语句执行时间，对于执行慢的sql这部分是需要优化的;\n4. 执行完毕后，关闭 SET profiling=0;\n\n","slug":"yw-mysql-store","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zu007rct8u5f64dpvi","content":"<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>之前有一次故障问题，查看数据库慢查询日志，从日志和存储过程本身直接分析，不能得知问题点，之后通过profiling来分析，记录如下</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><ol>\n<li>查看慢查询日志，发现，出现大量执行等待，使用profiling来分析语句问题点</li>\n<li>先打开profiling： SET profiling=1;</li>\n<li>手动执行有问题的语句： call  GetRoleList(75760);   </li>\n<li>SHOW profiles;  可以查看到每条对应SQL语句执行时间，对于执行慢的sql这部分是需要优化的;</li>\n<li>执行完毕后，关闭 SET profiling=0;</li>\n</ol>\n","excerpt":"","more":"<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>之前有一次故障问题，查看数据库慢查询日志，从日志和存储过程本身直接分析，不能得知问题点，之后通过profiling来分析，记录如下</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><ol>\n<li>查看慢查询日志，发现，出现大量执行等待，使用profiling来分析语句问题点</li>\n<li>先打开profiling： SET profiling=1;</li>\n<li>手动执行有问题的语句： call  GetRoleList(75760);   </li>\n<li>SHOW profiles;  可以查看到每条对应SQL语句执行时间，对于执行慢的sql这部分是需要优化的;</li>\n<li>执行完毕后，关闭 SET profiling=0;</li>\n</ol>\n"},{"title":"事务隔离","date":"2018-12-26T13:42:58.000Z","_content":"#### 事务\n事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持\n\n#### 事务的特性\n- 原子性\n- 一致性\n- 隔离性\n- 持久性\n\n#### 多事务同时执行引起的问题\n- 脏读\n- 不可重复读\n- 幻读\n\n#### 事务隔离级别\n- 读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到\n- 读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到\n- 可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的\n- 串行化(serializable) “写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突时，后访问的事务必须等前一个事务执行完成后，才能继续执行\n\n\n#### 配置事务方法\n```\n启动参数transaction-isolation\n```\n#### 事务隔离的实现\n每条记录在更新的时候都会同时记录一条回滚操作。通过回滚操作，都可以得到前一个状态的值\n\n同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。\n\n回滚日志在不需要的时候删除，当系统里没有比这个回滚日志更早的read-view时候，系统自动删除\n\n\n#### 尽量不要使用长事务\n长事务意味着系统里面会存在很老的事务视图，在事务提交之前，回滚日志必须保留，这就会导致大量占用存储空间\n\n#### 事务的启动方式\n- 显示启动事务\n    ```\n    begin transaction\n    do something\n    commit / rollback\n    ```\n- set autocommit=0，将这个线程的自动提交关掉，只要你执行一个查询语句，事务就启动了，接下来的查询都在事务中，如果是长连接，将导致意外的长事务，这样直到你主动执行commit或者rollback语句或者断开连接才释放，可以通过set autocommit=1来显式方式来启动事务\n    ```\n    begin tracsaction; #  不是一个事务的起点，在执行到它之后的第一个操作InnoDB语句，事务才真正启动\n    start transaction with consistent snapshot; # 马上启动一个事务\n     \n    commit;     # 提交事务\n    autocommit=1;\n    ```\n\n#### 事务隔离 or 不隔离\n如果是可重复读隔离级别，事务启动时会创建一个视图read-view，之后事务执行期间，即使有其他事务修改了数据，该事务看到的仍然跟启动时看到的一样，也就是在可重复读隔离级别下执行事务，不受外界影响\n```\nstart transaction with consistent snapshot;    # 执行该命令后马上启动一个事务\n```\n\nMysql中的两个“视图”：\n- 一个view，用于查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果\n- InnoDB在实现MCVV时用到的一致性读视图，即consistent read view，用于支持RC(Read Committed，读提交)和RR(Repeatable Read，可重复读)隔离级别的实现，作用在事务执行期间用来定义\"我能看到什么数据\"\n\n\n#### “快照”在MVCC里是怎么工作的\n在可重复读隔离级别下，事务在启动的时候就拍下快照，这个快照是基于整库\n\nInnodb里面每个事务有一个唯一的事务ID，叫作transaction id，它是在事务开始的时候向Innodb的事务系统申请的，是按申请顺序严格递增的\n\n每行数据也都都是有多个版本的，每次事务更新数据时，都会生成一个新的数据版本，而且把transaction id赋值给这个数据版本的事务id，记为row trx_id; 同时，旧的数据版本要保留，并且在新的数据版本中能够有信息可以直接拿到它\n\n数据表中一行记录，其实可能有多个版本(row)，每个版本有自己的rowtrx_id\n\nInnoDB利用了“所有数据都有多个版本”的特性，实现了“秒级创建快照的能力”\n\n更新数据都要先读后写，而这个读，只能读当前的值，称之为\"当前读\"；当前读总是读取已经提交完成的最新版本\n\n- 对于可重复读，查询只承认在事务启动前就已经提交完成的数据\n- 对于读提交，查询只承认在语句启动前就已经提交完成的数据\n","source":"_posts/yw-mysql-transaction.md","raw":"---\ntitle: 事务隔离\ndate: 2018-12-26 21:42:58\ntags:\n  - Transaction\ncategories:\n  - Mysql\n---\n#### 事务\n事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持\n\n#### 事务的特性\n- 原子性\n- 一致性\n- 隔离性\n- 持久性\n\n#### 多事务同时执行引起的问题\n- 脏读\n- 不可重复读\n- 幻读\n\n#### 事务隔离级别\n- 读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到\n- 读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到\n- 可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的\n- 串行化(serializable) “写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突时，后访问的事务必须等前一个事务执行完成后，才能继续执行\n\n\n#### 配置事务方法\n```\n启动参数transaction-isolation\n```\n#### 事务隔离的实现\n每条记录在更新的时候都会同时记录一条回滚操作。通过回滚操作，都可以得到前一个状态的值\n\n同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。\n\n回滚日志在不需要的时候删除，当系统里没有比这个回滚日志更早的read-view时候，系统自动删除\n\n\n#### 尽量不要使用长事务\n长事务意味着系统里面会存在很老的事务视图，在事务提交之前，回滚日志必须保留，这就会导致大量占用存储空间\n\n#### 事务的启动方式\n- 显示启动事务\n    ```\n    begin transaction\n    do something\n    commit / rollback\n    ```\n- set autocommit=0，将这个线程的自动提交关掉，只要你执行一个查询语句，事务就启动了，接下来的查询都在事务中，如果是长连接，将导致意外的长事务，这样直到你主动执行commit或者rollback语句或者断开连接才释放，可以通过set autocommit=1来显式方式来启动事务\n    ```\n    begin tracsaction; #  不是一个事务的起点，在执行到它之后的第一个操作InnoDB语句，事务才真正启动\n    start transaction with consistent snapshot; # 马上启动一个事务\n     \n    commit;     # 提交事务\n    autocommit=1;\n    ```\n\n#### 事务隔离 or 不隔离\n如果是可重复读隔离级别，事务启动时会创建一个视图read-view，之后事务执行期间，即使有其他事务修改了数据，该事务看到的仍然跟启动时看到的一样，也就是在可重复读隔离级别下执行事务，不受外界影响\n```\nstart transaction with consistent snapshot;    # 执行该命令后马上启动一个事务\n```\n\nMysql中的两个“视图”：\n- 一个view，用于查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果\n- InnoDB在实现MCVV时用到的一致性读视图，即consistent read view，用于支持RC(Read Committed，读提交)和RR(Repeatable Read，可重复读)隔离级别的实现，作用在事务执行期间用来定义\"我能看到什么数据\"\n\n\n#### “快照”在MVCC里是怎么工作的\n在可重复读隔离级别下，事务在启动的时候就拍下快照，这个快照是基于整库\n\nInnodb里面每个事务有一个唯一的事务ID，叫作transaction id，它是在事务开始的时候向Innodb的事务系统申请的，是按申请顺序严格递增的\n\n每行数据也都都是有多个版本的，每次事务更新数据时，都会生成一个新的数据版本，而且把transaction id赋值给这个数据版本的事务id，记为row trx_id; 同时，旧的数据版本要保留，并且在新的数据版本中能够有信息可以直接拿到它\n\n数据表中一行记录，其实可能有多个版本(row)，每个版本有自己的rowtrx_id\n\nInnoDB利用了“所有数据都有多个版本”的特性，实现了“秒级创建快照的能力”\n\n更新数据都要先读后写，而这个读，只能读当前的值，称之为\"当前读\"；当前读总是读取已经提交完成的最新版本\n\n- 对于可重复读，查询只承认在事务启动前就已经提交完成的数据\n- 对于读提交，查询只承认在语句启动前就已经提交完成的数据\n","slug":"yw-mysql-transaction","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zv007vct8ubebm8ccz","content":"<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持</p>\n<h4 id=\"事务的特性\"><a href=\"#事务的特性\" class=\"headerlink\" title=\"事务的特性\"></a>事务的特性</h4><ul>\n<li>原子性</li>\n<li>一致性</li>\n<li>隔离性</li>\n<li>持久性</li>\n</ul>\n<h4 id=\"多事务同时执行引起的问题\"><a href=\"#多事务同时执行引起的问题\" class=\"headerlink\" title=\"多事务同时执行引起的问题\"></a>多事务同时执行引起的问题</h4><ul>\n<li>脏读</li>\n<li>不可重复读</li>\n<li>幻读</li>\n</ul>\n<h4 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h4><ul>\n<li>读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到</li>\n<li>读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到</li>\n<li>可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的</li>\n<li>串行化(serializable) “写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突时，后访问的事务必须等前一个事务执行完成后，才能继续执行</li>\n</ul>\n<h4 id=\"配置事务方法\"><a href=\"#配置事务方法\" class=\"headerlink\" title=\"配置事务方法\"></a>配置事务方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动参数transaction-isolation</div></pre></td></tr></table></figure>\n<h4 id=\"事务隔离的实现\"><a href=\"#事务隔离的实现\" class=\"headerlink\" title=\"事务隔离的实现\"></a>事务隔离的实现</h4><p>每条记录在更新的时候都会同时记录一条回滚操作。通过回滚操作，都可以得到前一个状态的值</p>\n<p>同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。</p>\n<p>回滚日志在不需要的时候删除，当系统里没有比这个回滚日志更早的read-view时候，系统自动删除</p>\n<h4 id=\"尽量不要使用长事务\"><a href=\"#尽量不要使用长事务\" class=\"headerlink\" title=\"尽量不要使用长事务\"></a>尽量不要使用长事务</h4><p>长事务意味着系统里面会存在很老的事务视图，在事务提交之前，回滚日志必须保留，这就会导致大量占用存储空间</p>\n<h4 id=\"事务的启动方式\"><a href=\"#事务的启动方式\" class=\"headerlink\" title=\"事务的启动方式\"></a>事务的启动方式</h4><ul>\n<li><p>显示启动事务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">begin transaction</div><div class=\"line\">do something</div><div class=\"line\">commit / rollback</div></pre></td></tr></table></figure>\n</li>\n<li><p>set autocommit=0，将这个线程的自动提交关掉，只要你执行一个查询语句，事务就启动了，接下来的查询都在事务中，如果是长连接，将导致意外的长事务，这样直到你主动执行commit或者rollback语句或者断开连接才释放，可以通过set autocommit=1来显式方式来启动事务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">begin tracsaction; #  不是一个事务的起点，在执行到它之后的第一个操作InnoDB语句，事务才真正启动</div><div class=\"line\">start transaction with consistent snapshot; # 马上启动一个事务</div><div class=\"line\"> </div><div class=\"line\">commit;     # 提交事务</div><div class=\"line\">autocommit=1;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"事务隔离-or-不隔离\"><a href=\"#事务隔离-or-不隔离\" class=\"headerlink\" title=\"事务隔离 or 不隔离\"></a>事务隔离 or 不隔离</h4><p>如果是可重复读隔离级别，事务启动时会创建一个视图read-view，之后事务执行期间，即使有其他事务修改了数据，该事务看到的仍然跟启动时看到的一样，也就是在可重复读隔离级别下执行事务，不受外界影响<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">start transaction with consistent snapshot;    # 执行该命令后马上启动一个事务</div></pre></td></tr></table></figure></p>\n<p>Mysql中的两个“视图”：</p>\n<ul>\n<li>一个view，用于查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果</li>\n<li>InnoDB在实现MCVV时用到的一致性读视图，即consistent read view，用于支持RC(Read Committed，读提交)和RR(Repeatable Read，可重复读)隔离级别的实现，作用在事务执行期间用来定义”我能看到什么数据”</li>\n</ul>\n<h4 id=\"“快照”在MVCC里是怎么工作的\"><a href=\"#“快照”在MVCC里是怎么工作的\" class=\"headerlink\" title=\"“快照”在MVCC里是怎么工作的\"></a>“快照”在MVCC里是怎么工作的</h4><p>在可重复读隔离级别下，事务在启动的时候就拍下快照，这个快照是基于整库</p>\n<p>Innodb里面每个事务有一个唯一的事务ID，叫作transaction id，它是在事务开始的时候向Innodb的事务系统申请的，是按申请顺序严格递增的</p>\n<p>每行数据也都都是有多个版本的，每次事务更新数据时，都会生成一个新的数据版本，而且把transaction id赋值给这个数据版本的事务id，记为row trx_id; 同时，旧的数据版本要保留，并且在新的数据版本中能够有信息可以直接拿到它</p>\n<p>数据表中一行记录，其实可能有多个版本(row)，每个版本有自己的rowtrx_id</p>\n<p>InnoDB利用了“所有数据都有多个版本”的特性，实现了“秒级创建快照的能力”</p>\n<p>更新数据都要先读后写，而这个读，只能读当前的值，称之为”当前读”；当前读总是读取已经提交完成的最新版本</p>\n<ul>\n<li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据</li>\n<li>对于读提交，查询只承认在语句启动前就已经提交完成的数据</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持</p>\n<h4 id=\"事务的特性\"><a href=\"#事务的特性\" class=\"headerlink\" title=\"事务的特性\"></a>事务的特性</h4><ul>\n<li>原子性</li>\n<li>一致性</li>\n<li>隔离性</li>\n<li>持久性</li>\n</ul>\n<h4 id=\"多事务同时执行引起的问题\"><a href=\"#多事务同时执行引起的问题\" class=\"headerlink\" title=\"多事务同时执行引起的问题\"></a>多事务同时执行引起的问题</h4><ul>\n<li>脏读</li>\n<li>不可重复读</li>\n<li>幻读</li>\n</ul>\n<h4 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h4><ul>\n<li>读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到</li>\n<li>读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到</li>\n<li>可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的</li>\n<li>串行化(serializable) “写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突时，后访问的事务必须等前一个事务执行完成后，才能继续执行</li>\n</ul>\n<h4 id=\"配置事务方法\"><a href=\"#配置事务方法\" class=\"headerlink\" title=\"配置事务方法\"></a>配置事务方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动参数transaction-isolation</div></pre></td></tr></table></figure>\n<h4 id=\"事务隔离的实现\"><a href=\"#事务隔离的实现\" class=\"headerlink\" title=\"事务隔离的实现\"></a>事务隔离的实现</h4><p>每条记录在更新的时候都会同时记录一条回滚操作。通过回滚操作，都可以得到前一个状态的值</p>\n<p>同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。</p>\n<p>回滚日志在不需要的时候删除，当系统里没有比这个回滚日志更早的read-view时候，系统自动删除</p>\n<h4 id=\"尽量不要使用长事务\"><a href=\"#尽量不要使用长事务\" class=\"headerlink\" title=\"尽量不要使用长事务\"></a>尽量不要使用长事务</h4><p>长事务意味着系统里面会存在很老的事务视图，在事务提交之前，回滚日志必须保留，这就会导致大量占用存储空间</p>\n<h4 id=\"事务的启动方式\"><a href=\"#事务的启动方式\" class=\"headerlink\" title=\"事务的启动方式\"></a>事务的启动方式</h4><ul>\n<li><p>显示启动事务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">begin transaction</div><div class=\"line\">do something</div><div class=\"line\">commit / rollback</div></pre></td></tr></table></figure>\n</li>\n<li><p>set autocommit=0，将这个线程的自动提交关掉，只要你执行一个查询语句，事务就启动了，接下来的查询都在事务中，如果是长连接，将导致意外的长事务，这样直到你主动执行commit或者rollback语句或者断开连接才释放，可以通过set autocommit=1来显式方式来启动事务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">begin tracsaction; #  不是一个事务的起点，在执行到它之后的第一个操作InnoDB语句，事务才真正启动</div><div class=\"line\">start transaction with consistent snapshot; # 马上启动一个事务</div><div class=\"line\"> </div><div class=\"line\">commit;     # 提交事务</div><div class=\"line\">autocommit=1;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"事务隔离-or-不隔离\"><a href=\"#事务隔离-or-不隔离\" class=\"headerlink\" title=\"事务隔离 or 不隔离\"></a>事务隔离 or 不隔离</h4><p>如果是可重复读隔离级别，事务启动时会创建一个视图read-view，之后事务执行期间，即使有其他事务修改了数据，该事务看到的仍然跟启动时看到的一样，也就是在可重复读隔离级别下执行事务，不受外界影响<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">start transaction with consistent snapshot;    # 执行该命令后马上启动一个事务</div></pre></td></tr></table></figure></p>\n<p>Mysql中的两个“视图”：</p>\n<ul>\n<li>一个view，用于查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果</li>\n<li>InnoDB在实现MCVV时用到的一致性读视图，即consistent read view，用于支持RC(Read Committed，读提交)和RR(Repeatable Read，可重复读)隔离级别的实现，作用在事务执行期间用来定义”我能看到什么数据”</li>\n</ul>\n<h4 id=\"“快照”在MVCC里是怎么工作的\"><a href=\"#“快照”在MVCC里是怎么工作的\" class=\"headerlink\" title=\"“快照”在MVCC里是怎么工作的\"></a>“快照”在MVCC里是怎么工作的</h4><p>在可重复读隔离级别下，事务在启动的时候就拍下快照，这个快照是基于整库</p>\n<p>Innodb里面每个事务有一个唯一的事务ID，叫作transaction id，它是在事务开始的时候向Innodb的事务系统申请的，是按申请顺序严格递增的</p>\n<p>每行数据也都都是有多个版本的，每次事务更新数据时，都会生成一个新的数据版本，而且把transaction id赋值给这个数据版本的事务id，记为row trx_id; 同时，旧的数据版本要保留，并且在新的数据版本中能够有信息可以直接拿到它</p>\n<p>数据表中一行记录，其实可能有多个版本(row)，每个版本有自己的rowtrx_id</p>\n<p>InnoDB利用了“所有数据都有多个版本”的特性，实现了“秒级创建快照的能力”</p>\n<p>更新数据都要先读后写，而这个读，只能读当前的值，称之为”当前读”；当前读总是读取已经提交完成的最新版本</p>\n<ul>\n<li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据</li>\n<li>对于读提交，查询只承认在语句启动前就已经提交完成的数据</li>\n</ul>\n"},{"title":"普通索引和唯一索引的区别","date":"2018-12-20T12:11:46.000Z","_content":"#### 查询操作\n- 查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止\n- 唯一索引，找到第一个满足条件记录，停止检索\n\n#### 更新操作\nchange buffer:如果数据页没有在内存中，innodb会将更新操作缓存在change buffer中，这样不需要从磁盘中读取数据页；下次查询访问这个数据页时，将数据页读入内存，然后执行change buffer中和这个页有关的操作\n\n- 唯一索引更新操作不能使用change buffer，因为判断记录是否存在，必须将数据页读入内存，只有普通索引更新操作可以使用change buffer\n- change buffer使用的是buffer pool里的内存，大小可以通过参数**innodb_change_buffer_max_size**来设置\n\n#### 插入操作\n1. 记录要更新的目标页在内存中，此时插入操作基本一致，从内存中读取数据对应的位置，执行插入语句\n2. 记录要更新的目标页不在内存中\n    - 唯一索引，需要将数据页读入到内存，判断有没有冲突，执行语句\n    - 普通索引，将更新记录到change buffer，执行语句\n\n将数据从磁盘读入内存涉及到随机IO访问，成本高；change buffer减少了随机磁盘访问，所以对更新性能的提升更明显\n\n\n#### change buffer使用场景\n适用于写多读少的业务场景，写入后不立即读取，常见业务系统如日志、账单类系统\n\n如果业务更新后马上需要做查询，即更新先记录change buffer，之后查询这个数据页，会立刻触发merge操作，这样随机访问io次数不会减少，反而增加了change buffer的维护代价\n\n\n#### 索引选择\n- 查询性能方面无差异\n- 更新操作，因为有change buffer机制，所以普通索引更新操作性能更好\n\n\n#### change buffer && redo log\n- redo log 主要节省的是随机写磁盘IO消耗(转成顺序写)\n- change buffer主要节省的是随机读磁盘io的消耗\n\n","source":"_posts/yw-mysql-unique-index.md","raw":"---\ntitle: 普通索引和唯一索引的区别\ndate: 2018-12-20 20:11:46\ntags:\n  - Index\ncategories:\n  - Mysql\n---\n#### 查询操作\n- 查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止\n- 唯一索引，找到第一个满足条件记录，停止检索\n\n#### 更新操作\nchange buffer:如果数据页没有在内存中，innodb会将更新操作缓存在change buffer中，这样不需要从磁盘中读取数据页；下次查询访问这个数据页时，将数据页读入内存，然后执行change buffer中和这个页有关的操作\n\n- 唯一索引更新操作不能使用change buffer，因为判断记录是否存在，必须将数据页读入内存，只有普通索引更新操作可以使用change buffer\n- change buffer使用的是buffer pool里的内存，大小可以通过参数**innodb_change_buffer_max_size**来设置\n\n#### 插入操作\n1. 记录要更新的目标页在内存中，此时插入操作基本一致，从内存中读取数据对应的位置，执行插入语句\n2. 记录要更新的目标页不在内存中\n    - 唯一索引，需要将数据页读入到内存，判断有没有冲突，执行语句\n    - 普通索引，将更新记录到change buffer，执行语句\n\n将数据从磁盘读入内存涉及到随机IO访问，成本高；change buffer减少了随机磁盘访问，所以对更新性能的提升更明显\n\n\n#### change buffer使用场景\n适用于写多读少的业务场景，写入后不立即读取，常见业务系统如日志、账单类系统\n\n如果业务更新后马上需要做查询，即更新先记录change buffer，之后查询这个数据页，会立刻触发merge操作，这样随机访问io次数不会减少，反而增加了change buffer的维护代价\n\n\n#### 索引选择\n- 查询性能方面无差异\n- 更新操作，因为有change buffer机制，所以普通索引更新操作性能更好\n\n\n#### change buffer && redo log\n- redo log 主要节省的是随机写磁盘IO消耗(转成顺序写)\n- change buffer主要节省的是随机读磁盘io的消耗\n\n","slug":"yw-mysql-unique-index","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zx007yct8u0s6axk2k","content":"<h4 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h4><ul>\n<li>查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止</li>\n<li>唯一索引，找到第一个满足条件记录，停止检索</li>\n</ul>\n<h4 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h4><p>change buffer:如果数据页没有在内存中，innodb会将更新操作缓存在change buffer中，这样不需要从磁盘中读取数据页；下次查询访问这个数据页时，将数据页读入内存，然后执行change buffer中和这个页有关的操作</p>\n<ul>\n<li>唯一索引更新操作不能使用change buffer，因为判断记录是否存在，必须将数据页读入内存，只有普通索引更新操作可以使用change buffer</li>\n<li>change buffer使用的是buffer pool里的内存，大小可以通过参数<strong>innodb_change_buffer_max_size</strong>来设置</li>\n</ul>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><ol>\n<li>记录要更新的目标页在内存中，此时插入操作基本一致，从内存中读取数据对应的位置，执行插入语句</li>\n<li>记录要更新的目标页不在内存中<ul>\n<li>唯一索引，需要将数据页读入到内存，判断有没有冲突，执行语句</li>\n<li>普通索引，将更新记录到change buffer，执行语句</li>\n</ul>\n</li>\n</ol>\n<p>将数据从磁盘读入内存涉及到随机IO访问，成本高；change buffer减少了随机磁盘访问，所以对更新性能的提升更明显</p>\n<h4 id=\"change-buffer使用场景\"><a href=\"#change-buffer使用场景\" class=\"headerlink\" title=\"change buffer使用场景\"></a>change buffer使用场景</h4><p>适用于写多读少的业务场景，写入后不立即读取，常见业务系统如日志、账单类系统</p>\n<p>如果业务更新后马上需要做查询，即更新先记录change buffer，之后查询这个数据页，会立刻触发merge操作，这样随机访问io次数不会减少，反而增加了change buffer的维护代价</p>\n<h4 id=\"索引选择\"><a href=\"#索引选择\" class=\"headerlink\" title=\"索引选择\"></a>索引选择</h4><ul>\n<li>查询性能方面无差异</li>\n<li>更新操作，因为有change buffer机制，所以普通索引更新操作性能更好</li>\n</ul>\n<h4 id=\"change-buffer-amp-amp-redo-log\"><a href=\"#change-buffer-amp-amp-redo-log\" class=\"headerlink\" title=\"change buffer &amp;&amp; redo log\"></a>change buffer &amp;&amp; redo log</h4><ul>\n<li>redo log 主要节省的是随机写磁盘IO消耗(转成顺序写)</li>\n<li>change buffer主要节省的是随机读磁盘io的消耗</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h4><ul>\n<li>查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止</li>\n<li>唯一索引，找到第一个满足条件记录，停止检索</li>\n</ul>\n<h4 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h4><p>change buffer:如果数据页没有在内存中，innodb会将更新操作缓存在change buffer中，这样不需要从磁盘中读取数据页；下次查询访问这个数据页时，将数据页读入内存，然后执行change buffer中和这个页有关的操作</p>\n<ul>\n<li>唯一索引更新操作不能使用change buffer，因为判断记录是否存在，必须将数据页读入内存，只有普通索引更新操作可以使用change buffer</li>\n<li>change buffer使用的是buffer pool里的内存，大小可以通过参数<strong>innodb_change_buffer_max_size</strong>来设置</li>\n</ul>\n<h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><ol>\n<li>记录要更新的目标页在内存中，此时插入操作基本一致，从内存中读取数据对应的位置，执行插入语句</li>\n<li>记录要更新的目标页不在内存中<ul>\n<li>唯一索引，需要将数据页读入到内存，判断有没有冲突，执行语句</li>\n<li>普通索引，将更新记录到change buffer，执行语句</li>\n</ul>\n</li>\n</ol>\n<p>将数据从磁盘读入内存涉及到随机IO访问，成本高；change buffer减少了随机磁盘访问，所以对更新性能的提升更明显</p>\n<h4 id=\"change-buffer使用场景\"><a href=\"#change-buffer使用场景\" class=\"headerlink\" title=\"change buffer使用场景\"></a>change buffer使用场景</h4><p>适用于写多读少的业务场景，写入后不立即读取，常见业务系统如日志、账单类系统</p>\n<p>如果业务更新后马上需要做查询，即更新先记录change buffer，之后查询这个数据页，会立刻触发merge操作，这样随机访问io次数不会减少，反而增加了change buffer的维护代价</p>\n<h4 id=\"索引选择\"><a href=\"#索引选择\" class=\"headerlink\" title=\"索引选择\"></a>索引选择</h4><ul>\n<li>查询性能方面无差异</li>\n<li>更新操作，因为有change buffer机制，所以普通索引更新操作性能更好</li>\n</ul>\n<h4 id=\"change-buffer-amp-amp-redo-log\"><a href=\"#change-buffer-amp-amp-redo-log\" class=\"headerlink\" title=\"change buffer &amp;&amp; redo log\"></a>change buffer &amp;&amp; redo log</h4><ul>\n<li>redo log 主要节省的是随机写磁盘IO消耗(转成顺序写)</li>\n<li>change buffer主要节省的是随机读磁盘io的消耗</li>\n</ul>\n"},{"title":"Sersync+Rsync文件同步","date":"2019-01-10T13:58:34.000Z","_content":"\n#### 背景\n需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时同步到另外一台的同一目录中，这时就不能使用远程目录挂载方式完成了， 这里使用sersync+rsync来完成需求\n\n#### Sersync特点\n- c++编写，对linux系统文件系统产生的临时文件和重复的文件操作进行过滤，结合rsync同步的时候，节省了运行时耗和网络资源\n- 使用多线程进行同步，在同步较大文件时，能够保证多个服务器实时保持同步状态\n- 自带crontab功能，只需在xml配置文件中开启，隔一段时间整体同步一次\n- 自定义同步规则\n\n#### Rsync\n配置文件说明\n```python\nuid = root\ngid = root\nport = 873\nmax connections = 1000\ntimeout = 600\npid file = /var/run/rsyncd.pid\nlog file = /var/log/rsync.log\nlockfile = /var/run/rsyncd.lock\nmotd file = /etc/rsyncd/rsyncd.moth\nlog format = %t %a %m %f %b\n \n[yw_test]\npath = /data/yw_test\nignore errors = yes\nlist = no\nignore errors\nread only = no\nauth users = rsync\nsecrets file = /etc/rsync/rsyncd.secrets\n```\n启动\n```\nchmod 600 /etc/rsync/rsyncd.secrets\nrsync --daemon --config=/etc/rsync/rsyncd.conf\n```\n#### Sersync\n配置文件confxml.xml说明\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<head version=\"2.5\">\n    <host hostip=\"localhost\" port=\"8008\"></host>\n    <debug start=\"false\"/>\n    <fileSystem xfs=\"false\"/>\n    <!--监控事件的过程中过滤特定文件，和特定文件夹的文件 --> \n    <filter start=\"true\">\n\t<exclude expression=\"log.txt\"></exclude>\n\t<exclude expression=\"(.*)\\.svn\"></exclude>\n\t<exclude expression=\"(.*)\\.gz\"></exclude>\n    </filter>\n    <!--设置要监控的事件 --> \n    <inotify>\n\t<delete start=\"false\"/>\n\t<createFolder start=\"true\"/>\n\t<createFile start=\"true\"/>\n\t<closeWrite start=\"true\"/>\n\t<moveFrom start=\"true\"/>\n\t<moveTo start=\"true\"/>\n\t<attrib start=\"false\"/>\n\t<modify start=\"false\"/>\n    </inotify>\n  \n    <sersync>\n     <!--设定监控目录--> \n\t<localpath watch=\"/data/test\">\n\t\t<!--指定远端rsync的地址和模块名-->\n\t    <remote ip=\"192.168.0.1\" name=\"yw_test\"/>   \n\t</localpath>\n\t<rsync>\n\t    <!--commonParams params=\"-rczgop\"/-->\n\t    <commonParams params=\"-artuz\"/>\n\t    <!--是否启用验证，并指定密码存放文件 --> \n\t    <auth start=\"true\" users=\"rsync\" passwordfile=\"/etc/rsync_client.pass \"/>\n\t    <userDefinedPort start=\"false\" port=\"873\"/><!-- port=874 -->\n\t    <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n\t    <ssh start=\"false\"/>\n\t</rsync>\n\t<failLog path=\"/tmp/rsync_fail_log.log\" timeToExecute=\"10\"/>\n\t<!--default every 60mins execute once-->\n\t<!--是否启用执行完整rsync，并指定执行周期 -->     \n\t<crontab start=\"true\" schedule=\"5\"><!--5mins-->\n\t    <crontabfilter start=\"true\">\n\t\t<exclude expression=\"log.txt\"></exclude>\n\t\t<exclude expression=\"(.*)\\.svn\"></exclude>\n\t\t<exclude expression=\"(.*)\\.gz\"></exclude>\n\t\t<exclude expression=\"info/*\"></exclude>\n\t    </crontabfilter>\n\t</crontab>\n\t<plugin start=\"false\" name=\"command\"/>\n    </sersync>\n  \n    <plugin name=\"command\">\n\t<param prefix=\"/bin/sh\" suffix=\"\" ignoreError=\"true\"/>\t<!--prefix /opt/tongbu/mmm.sh suffix-->\n\t<filter start=\"false\">\n\t    <include expression=\"(.*)\\.php\"/>\n\t    <include expression=\"(.*)\\.sh\"/>\n\t</filter>\n    </plugin>\n \n    <plugin name=\"socket\">\n\t<localpath watch=\"/opt/tongbu\">\n\t    <deshost ip=\"192.168.138.20\" port=\"8009\"/>\n\t</localpath>\n    </plugin>\n    <plugin name=\"refreshCDN\">\n\t<localpath watch=\"/data0/htdocs/cms.xoyo.com/site/\">\n\t    <cdninfo domainname=\"ccms.chinacache.com\" port=\"80\" username=\"xxxx\" passwd=\"xxxx\"/>\n\t    <sendurl base=\"http://pic.xoyo.com/cms\"/>\n\t    <regexurl regex=\"false\" match=\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"/>\n\t</localpath>\n    </plugin>\n</head>\n```\n\n启动\n```\nchmod 600 /etc/rsync_client.pass \n/etc/rsync/sersync2 -r -d -o /etc/rsync/confxml.xml\n \n-d:启用守护进程模式\n-r:在监控前，将监控目录与远程主机用rsync命令推送一遍\n-n: 指定开启守护线程的数量，默认为10个\n-o:指定配置文件，默认使用confxml.xml文件\n \n```\n","source":"_posts/yw-sersync.md","raw":"---\ntitle: Sersync+Rsync文件同步\ndate: 2019-01-10 21:58:34\ntags:\n  - sersync\ncategories:\n  - 运维\n---\n\n#### 背景\n需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时同步到另外一台的同一目录中，这时就不能使用远程目录挂载方式完成了， 这里使用sersync+rsync来完成需求\n\n#### Sersync特点\n- c++编写，对linux系统文件系统产生的临时文件和重复的文件操作进行过滤，结合rsync同步的时候，节省了运行时耗和网络资源\n- 使用多线程进行同步，在同步较大文件时，能够保证多个服务器实时保持同步状态\n- 自带crontab功能，只需在xml配置文件中开启，隔一段时间整体同步一次\n- 自定义同步规则\n\n#### Rsync\n配置文件说明\n```python\nuid = root\ngid = root\nport = 873\nmax connections = 1000\ntimeout = 600\npid file = /var/run/rsyncd.pid\nlog file = /var/log/rsync.log\nlockfile = /var/run/rsyncd.lock\nmotd file = /etc/rsyncd/rsyncd.moth\nlog format = %t %a %m %f %b\n \n[yw_test]\npath = /data/yw_test\nignore errors = yes\nlist = no\nignore errors\nread only = no\nauth users = rsync\nsecrets file = /etc/rsync/rsyncd.secrets\n```\n启动\n```\nchmod 600 /etc/rsync/rsyncd.secrets\nrsync --daemon --config=/etc/rsync/rsyncd.conf\n```\n#### Sersync\n配置文件confxml.xml说明\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<head version=\"2.5\">\n    <host hostip=\"localhost\" port=\"8008\"></host>\n    <debug start=\"false\"/>\n    <fileSystem xfs=\"false\"/>\n    <!--监控事件的过程中过滤特定文件，和特定文件夹的文件 --> \n    <filter start=\"true\">\n\t<exclude expression=\"log.txt\"></exclude>\n\t<exclude expression=\"(.*)\\.svn\"></exclude>\n\t<exclude expression=\"(.*)\\.gz\"></exclude>\n    </filter>\n    <!--设置要监控的事件 --> \n    <inotify>\n\t<delete start=\"false\"/>\n\t<createFolder start=\"true\"/>\n\t<createFile start=\"true\"/>\n\t<closeWrite start=\"true\"/>\n\t<moveFrom start=\"true\"/>\n\t<moveTo start=\"true\"/>\n\t<attrib start=\"false\"/>\n\t<modify start=\"false\"/>\n    </inotify>\n  \n    <sersync>\n     <!--设定监控目录--> \n\t<localpath watch=\"/data/test\">\n\t\t<!--指定远端rsync的地址和模块名-->\n\t    <remote ip=\"192.168.0.1\" name=\"yw_test\"/>   \n\t</localpath>\n\t<rsync>\n\t    <!--commonParams params=\"-rczgop\"/-->\n\t    <commonParams params=\"-artuz\"/>\n\t    <!--是否启用验证，并指定密码存放文件 --> \n\t    <auth start=\"true\" users=\"rsync\" passwordfile=\"/etc/rsync_client.pass \"/>\n\t    <userDefinedPort start=\"false\" port=\"873\"/><!-- port=874 -->\n\t    <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n\t    <ssh start=\"false\"/>\n\t</rsync>\n\t<failLog path=\"/tmp/rsync_fail_log.log\" timeToExecute=\"10\"/>\n\t<!--default every 60mins execute once-->\n\t<!--是否启用执行完整rsync，并指定执行周期 -->     \n\t<crontab start=\"true\" schedule=\"5\"><!--5mins-->\n\t    <crontabfilter start=\"true\">\n\t\t<exclude expression=\"log.txt\"></exclude>\n\t\t<exclude expression=\"(.*)\\.svn\"></exclude>\n\t\t<exclude expression=\"(.*)\\.gz\"></exclude>\n\t\t<exclude expression=\"info/*\"></exclude>\n\t    </crontabfilter>\n\t</crontab>\n\t<plugin start=\"false\" name=\"command\"/>\n    </sersync>\n  \n    <plugin name=\"command\">\n\t<param prefix=\"/bin/sh\" suffix=\"\" ignoreError=\"true\"/>\t<!--prefix /opt/tongbu/mmm.sh suffix-->\n\t<filter start=\"false\">\n\t    <include expression=\"(.*)\\.php\"/>\n\t    <include expression=\"(.*)\\.sh\"/>\n\t</filter>\n    </plugin>\n \n    <plugin name=\"socket\">\n\t<localpath watch=\"/opt/tongbu\">\n\t    <deshost ip=\"192.168.138.20\" port=\"8009\"/>\n\t</localpath>\n    </plugin>\n    <plugin name=\"refreshCDN\">\n\t<localpath watch=\"/data0/htdocs/cms.xoyo.com/site/\">\n\t    <cdninfo domainname=\"ccms.chinacache.com\" port=\"80\" username=\"xxxx\" passwd=\"xxxx\"/>\n\t    <sendurl base=\"http://pic.xoyo.com/cms\"/>\n\t    <regexurl regex=\"false\" match=\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"/>\n\t</localpath>\n    </plugin>\n</head>\n```\n\n启动\n```\nchmod 600 /etc/rsync_client.pass \n/etc/rsync/sersync2 -r -d -o /etc/rsync/confxml.xml\n \n-d:启用守护进程模式\n-r:在监控前，将监控目录与远程主机用rsync命令推送一遍\n-n: 指定开启守护线程的数量，默认为10个\n-o:指定配置文件，默认使用confxml.xml文件\n \n```\n","slug":"yw-sersync","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zy0080ct8ubv5zfumh","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时同步到另外一台的同一目录中，这时就不能使用远程目录挂载方式完成了， 这里使用sersync+rsync来完成需求</p>\n<h4 id=\"Sersync特点\"><a href=\"#Sersync特点\" class=\"headerlink\" title=\"Sersync特点\"></a>Sersync特点</h4><ul>\n<li>c++编写，对linux系统文件系统产生的临时文件和重复的文件操作进行过滤，结合rsync同步的时候，节省了运行时耗和网络资源</li>\n<li>使用多线程进行同步，在同步较大文件时，能够保证多个服务器实时保持同步状态</li>\n<li>自带crontab功能，只需在xml配置文件中开启，隔一段时间整体同步一次</li>\n<li>自定义同步规则</li>\n</ul>\n<h4 id=\"Rsync\"><a href=\"#Rsync\" class=\"headerlink\" title=\"Rsync\"></a>Rsync</h4><p>配置文件说明<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">uid = root</div><div class=\"line\">gid = root</div><div class=\"line\">port = <span class=\"number\">873</span></div><div class=\"line\">max connections = <span class=\"number\">1000</span></div><div class=\"line\">timeout = <span class=\"number\">600</span></div><div class=\"line\">pid file = /var/run/rsyncd.pid</div><div class=\"line\">log file = /var/log/rsync.log</div><div class=\"line\">lockfile = /var/run/rsyncd.lock</div><div class=\"line\">motd file = /etc/rsyncd/rsyncd.moth</div><div class=\"line\">log format = %t %a %m %f %b</div><div class=\"line\"> </div><div class=\"line\">[yw_test]</div><div class=\"line\">path = /data/yw_test</div><div class=\"line\">ignore errors = yes</div><div class=\"line\">list = no</div><div class=\"line\">ignore errors</div><div class=\"line\">read only = no</div><div class=\"line\">auth users = rsync</div><div class=\"line\">secrets file = /etc/rsync/rsyncd.secrets</div></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 /etc/rsync/rsyncd.secrets</div><div class=\"line\">rsync --daemon --config=/etc/rsync/rsyncd.conf</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sersync\"><a href=\"#Sersync\" class=\"headerlink\" title=\"Sersync\"></a>Sersync</h4><p>配置文件confxml.xml说明<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">version</span>=<span class=\"string\">\"2.5\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">hostip</span>=<span class=\"string\">\"localhost\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8008\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">debug</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSystem</span> <span class=\"attr\">xfs</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--监控事件的过程中过滤特定文件，和特定文件夹的文件 --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"log.txt\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.svn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.gz\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置要监控的事件 --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">inotify</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">createFolder</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">createFile</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">closeWrite</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">moveFrom</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">moveTo</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">attrib</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modify</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">inotify</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sersync</span>&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!--设定监控目录--&gt;</span> </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">\"/data/test\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--指定远端rsync的地址和模块名--&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">remote</span> <span class=\"attr\">ip</span>=<span class=\"string\">\"192.168.0.1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"yw_test\"</span>/&gt;</span>   </div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">rsync</span>&gt;</span></div><div class=\"line\">\t    <span class=\"comment\">&lt;!--commonParams params=\"-rczgop\"/--&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">commonParams</span> <span class=\"attr\">params</span>=<span class=\"string\">\"-artuz\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"comment\">&lt;!--是否启用验证，并指定密码存放文件 --&gt;</span> </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">auth</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">users</span>=<span class=\"string\">\"rsync\"</span> <span class=\"attr\">passwordfile</span>=<span class=\"string\">\"/etc/rsync_client.pass \"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">userDefinedPort</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"873\"</span>/&gt;</span><span class=\"comment\">&lt;!-- port=874 --&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">timeout</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">time</span>=<span class=\"string\">\"100\"</span>/&gt;</span><span class=\"comment\">&lt;!-- timeout=100 --&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">ssh</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">rsync</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">failLog</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/tmp/rsync_fail_log.log\"</span> <span class=\"attr\">timeToExecute</span>=<span class=\"string\">\"10\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--default every 60mins execute once--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--是否启用执行完整rsync，并指定执行周期 --&gt;</span>     </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">crontab</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">schedule</span>=<span class=\"string\">\"5\"</span>&gt;</span><span class=\"comment\">&lt;!--5mins--&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">crontabfilter</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"log.txt\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.svn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.gz\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"info/*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">crontabfilter</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">crontab</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"command\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sersync</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"command\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"/bin/sh\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">ignoreError</span>=<span class=\"string\">\"true\"</span>/&gt;</span>\t<span class=\"comment\">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.php\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.sh\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"socket\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">\"/opt/tongbu\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">deshost</span> <span class=\"attr\">ip</span>=<span class=\"string\">\"192.168.138.20\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8009\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"refreshCDN\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">\"/data0/htdocs/cms.xoyo.com/site/\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">cdninfo</span> <span class=\"attr\">domainname</span>=<span class=\"string\">\"ccms.chinacache.com\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">username</span>=<span class=\"string\">\"xxxx\"</span> <span class=\"attr\">passwd</span>=<span class=\"string\">\"xxxx\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">sendurl</span> <span class=\"attr\">base</span>=<span class=\"string\">\"http://pic.xoyo.com/cms\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">regexurl</span> <span class=\"attr\">regex</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">match</span>=<span class=\"string\">\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 /etc/rsync_client.pass </div><div class=\"line\">/etc/rsync/sersync2 -r -d -o /etc/rsync/confxml.xml</div><div class=\"line\"> </div><div class=\"line\">-d:启用守护进程模式</div><div class=\"line\">-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</div><div class=\"line\">-n: 指定开启守护线程的数量，默认为10个</div><div class=\"line\">-o:指定配置文件，默认使用confxml.xml文件</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时同步到另外一台的同一目录中，这时就不能使用远程目录挂载方式完成了， 这里使用sersync+rsync来完成需求</p>\n<h4 id=\"Sersync特点\"><a href=\"#Sersync特点\" class=\"headerlink\" title=\"Sersync特点\"></a>Sersync特点</h4><ul>\n<li>c++编写，对linux系统文件系统产生的临时文件和重复的文件操作进行过滤，结合rsync同步的时候，节省了运行时耗和网络资源</li>\n<li>使用多线程进行同步，在同步较大文件时，能够保证多个服务器实时保持同步状态</li>\n<li>自带crontab功能，只需在xml配置文件中开启，隔一段时间整体同步一次</li>\n<li>自定义同步规则</li>\n</ul>\n<h4 id=\"Rsync\"><a href=\"#Rsync\" class=\"headerlink\" title=\"Rsync\"></a>Rsync</h4><p>配置文件说明<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">uid = root</div><div class=\"line\">gid = root</div><div class=\"line\">port = <span class=\"number\">873</span></div><div class=\"line\">max connections = <span class=\"number\">1000</span></div><div class=\"line\">timeout = <span class=\"number\">600</span></div><div class=\"line\">pid file = /var/run/rsyncd.pid</div><div class=\"line\">log file = /var/log/rsync.log</div><div class=\"line\">lockfile = /var/run/rsyncd.lock</div><div class=\"line\">motd file = /etc/rsyncd/rsyncd.moth</div><div class=\"line\">log format = %t %a %m %f %b</div><div class=\"line\"> </div><div class=\"line\">[yw_test]</div><div class=\"line\">path = /data/yw_test</div><div class=\"line\">ignore errors = yes</div><div class=\"line\">list = no</div><div class=\"line\">ignore errors</div><div class=\"line\">read only = no</div><div class=\"line\">auth users = rsync</div><div class=\"line\">secrets file = /etc/rsync/rsyncd.secrets</div></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 /etc/rsync/rsyncd.secrets</div><div class=\"line\">rsync --daemon --config=/etc/rsync/rsyncd.conf</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sersync\"><a href=\"#Sersync\" class=\"headerlink\" title=\"Sersync\"></a>Sersync</h4><p>配置文件confxml.xml说明<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">version</span>=<span class=\"string\">\"2.5\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">hostip</span>=<span class=\"string\">\"localhost\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8008\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">debug</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSystem</span> <span class=\"attr\">xfs</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--监控事件的过程中过滤特定文件，和特定文件夹的文件 --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"log.txt\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.svn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.gz\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置要监控的事件 --&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">inotify</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">createFolder</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">createFile</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">closeWrite</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">moveFrom</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">moveTo</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">attrib</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modify</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">inotify</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sersync</span>&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!--设定监控目录--&gt;</span> </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">\"/data/test\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--指定远端rsync的地址和模块名--&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">remote</span> <span class=\"attr\">ip</span>=<span class=\"string\">\"192.168.0.1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"yw_test\"</span>/&gt;</span>   </div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">rsync</span>&gt;</span></div><div class=\"line\">\t    <span class=\"comment\">&lt;!--commonParams params=\"-rczgop\"/--&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">commonParams</span> <span class=\"attr\">params</span>=<span class=\"string\">\"-artuz\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"comment\">&lt;!--是否启用验证，并指定密码存放文件 --&gt;</span> </div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">auth</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">users</span>=<span class=\"string\">\"rsync\"</span> <span class=\"attr\">passwordfile</span>=<span class=\"string\">\"/etc/rsync_client.pass \"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">userDefinedPort</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"873\"</span>/&gt;</span><span class=\"comment\">&lt;!-- port=874 --&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">timeout</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">time</span>=<span class=\"string\">\"100\"</span>/&gt;</span><span class=\"comment\">&lt;!-- timeout=100 --&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">ssh</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">rsync</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">failLog</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/tmp/rsync_fail_log.log\"</span> <span class=\"attr\">timeToExecute</span>=<span class=\"string\">\"10\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--default every 60mins execute once--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--是否启用执行完整rsync，并指定执行周期 --&gt;</span>     </div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">crontab</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">schedule</span>=<span class=\"string\">\"5\"</span>&gt;</span><span class=\"comment\">&lt;!--5mins--&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">crontabfilter</span> <span class=\"attr\">start</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"log.txt\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.svn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.gz\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"info/*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">crontabfilter</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">crontab</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"command\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sersync</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"command\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"/bin/sh\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">ignoreError</span>=<span class=\"string\">\"true\"</span>/&gt;</span>\t<span class=\"comment\">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">start</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.php\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"(.*)\\.sh\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"socket\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">\"/opt/tongbu\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">deshost</span> <span class=\"attr\">ip</span>=<span class=\"string\">\"192.168.138.20\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8009\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">name</span>=<span class=\"string\">\"refreshCDN\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">localpath</span> <span class=\"attr\">watch</span>=<span class=\"string\">\"/data0/htdocs/cms.xoyo.com/site/\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">cdninfo</span> <span class=\"attr\">domainname</span>=<span class=\"string\">\"ccms.chinacache.com\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">username</span>=<span class=\"string\">\"xxxx\"</span> <span class=\"attr\">passwd</span>=<span class=\"string\">\"xxxx\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">sendurl</span> <span class=\"attr\">base</span>=<span class=\"string\">\"http://pic.xoyo.com/cms\"</span>/&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">regexurl</span> <span class=\"attr\">regex</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">match</span>=<span class=\"string\">\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">localpath</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 /etc/rsync_client.pass </div><div class=\"line\">/etc/rsync/sersync2 -r -d -o /etc/rsync/confxml.xml</div><div class=\"line\"> </div><div class=\"line\">-d:启用守护进程模式</div><div class=\"line\">-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</div><div class=\"line\">-n: 指定开启守护线程的数量，默认为10个</div><div class=\"line\">-o:指定配置文件，默认使用confxml.xml文件</div></pre></td></tr></table></figure></p>\n"},{"title":"运维 Linux中密码策略","date":"2017-04-05T14:02:10.000Z","_content":"#### 需求\n1. 密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。\n2. 密码定期更改，最长不超过90天。\n3. 用户不能重复使用5次内已使用的口令。\n4. 尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上。\n\n#### 实现\n安装 PAM 的 cracklib 模块，cracklib 能提供额外的密码检查能力\n\n1. 密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。\n修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_cracklib.so” 字段\n```\npassword    requisite     pam_cracklib.so retry=3 difok=3 minlen=8 lcredit=-1 dcredit=-1 ocredit=-1\n```\n\n2. 密码定期更改，最长不超过90天\n\n\t配置文件中 /etc/login.defs 修改配置文件\n```\nPASS_MAX_DAYS   90\nPASS_MIN_DAYS   0\nPASS_MIN_LEN    5\nPASS_WARN_AGE   7\n```\n\t通过chage -l xxx(用户名)  查看定期修改的时间\n\n3. 用户不能重复使用5次内已使用的口令\n修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_unix.so” 字段\n```\npassword    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=5\n```\n\t通过/etc/security/opasswd中查看禁止使用近期用过的5个密码\n\n4. 尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上\n查看系统中是否含有pam_tally2.so模块，如果没有，则需要使用pam_tally.so模块\nfind /lib* -iname \"pam_tally2.so\"\nfind /lib* -iname \"pam_tally.so\"\n在配置文件中/etc/pam.d/sshd中的第二行，如下添加内容\n```\nauth       required     pam_tally2.so deny=5 unlock_time=1200\n```\n    查看用户错误登陆次数：\n    pam_tally2 --user xxx (用户名)\n\n    ```\n    pam_cracklib.so比较重要和难于理解的是它的一些参数和计数方法，其常用参数包括:\n    debug：将调试信息写入日志；\n    type=xxx：当添加/修改密码时，系统给出的缺省提示符是“New UNIX password:”以及“Retype UNIX\n    password:”，而使用该参数可以自定义输入密码的提示符，比如指定type=your own word；\n    retry=N：定义登录/修改密码失败时，可以重试的次数；\n    Difok=N：定义新密码中必须有几个字符要与旧密码不同。但是如果新密码中有1/2以上的字符与旧密码不同时，该新密码将被接受；\n    minlen=N：定义用户密码的最小长度；\n    dcredit=N：定义用户密码中必须包含多少个数字；\n    ucredit=N：定义用户密码中必须包含多少个大写字母；\n    lcredit=N：定义用户密码中必须包含多少个小些字母；\n    ocredit=N：定义用户密码中必须包含多少个特殊字符（除数字、字母之外）；\n    ```\n\n\n","source":"_posts/yw-pwd.md","raw":"---\ntitle: 运维 Linux中密码策略\ndate: 2017-04-05 22:02:10\ntags:\n  - password\ncategories:\n  - 运维\n---\n#### 需求\n1. 密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。\n2. 密码定期更改，最长不超过90天。\n3. 用户不能重复使用5次内已使用的口令。\n4. 尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上。\n\n#### 实现\n安装 PAM 的 cracklib 模块，cracklib 能提供额外的密码检查能力\n\n1. 密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。\n修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_cracklib.so” 字段\n```\npassword    requisite     pam_cracklib.so retry=3 difok=3 minlen=8 lcredit=-1 dcredit=-1 ocredit=-1\n```\n\n2. 密码定期更改，最长不超过90天\n\n\t配置文件中 /etc/login.defs 修改配置文件\n```\nPASS_MAX_DAYS   90\nPASS_MIN_DAYS   0\nPASS_MIN_LEN    5\nPASS_WARN_AGE   7\n```\n\t通过chage -l xxx(用户名)  查看定期修改的时间\n\n3. 用户不能重复使用5次内已使用的口令\n修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_unix.so” 字段\n```\npassword    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=5\n```\n\t通过/etc/security/opasswd中查看禁止使用近期用过的5个密码\n\n4. 尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上\n查看系统中是否含有pam_tally2.so模块，如果没有，则需要使用pam_tally.so模块\nfind /lib* -iname \"pam_tally2.so\"\nfind /lib* -iname \"pam_tally.so\"\n在配置文件中/etc/pam.d/sshd中的第二行，如下添加内容\n```\nauth       required     pam_tally2.so deny=5 unlock_time=1200\n```\n    查看用户错误登陆次数：\n    pam_tally2 --user xxx (用户名)\n\n    ```\n    pam_cracklib.so比较重要和难于理解的是它的一些参数和计数方法，其常用参数包括:\n    debug：将调试信息写入日志；\n    type=xxx：当添加/修改密码时，系统给出的缺省提示符是“New UNIX password:”以及“Retype UNIX\n    password:”，而使用该参数可以自定义输入密码的提示符，比如指定type=your own word；\n    retry=N：定义登录/修改密码失败时，可以重试的次数；\n    Difok=N：定义新密码中必须有几个字符要与旧密码不同。但是如果新密码中有1/2以上的字符与旧密码不同时，该新密码将被接受；\n    minlen=N：定义用户密码的最小长度；\n    dcredit=N：定义用户密码中必须包含多少个数字；\n    ucredit=N：定义用户密码中必须包含多少个大写字母；\n    lcredit=N：定义用户密码中必须包含多少个小些字母；\n    ocredit=N：定义用户密码中必须包含多少个特殊字符（除数字、字母之外）；\n    ```\n\n\n","slug":"yw-pwd","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j5zz0084ct8ubicnnoqe","content":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><ol>\n<li>密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。</li>\n<li>密码定期更改，最长不超过90天。</li>\n<li>用户不能重复使用5次内已使用的口令。</li>\n<li>尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上。</li>\n</ol>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>安装 PAM 的 cracklib 模块，cracklib 能提供额外的密码检查能力</p>\n<ol>\n<li><p>密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。<br>修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_cracklib.so” 字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">password    requisite     pam_cracklib.so retry=3 difok=3 minlen=8 lcredit=-1 dcredit=-1 ocredit=-1</div></pre></td></tr></table></figure>\n</li>\n<li><p>密码定期更改，最长不超过90天</p>\n<p> 配置文件中 /etc/login.defs 修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">PASS_MAX_DAYS   90</div><div class=\"line\">PASS_MIN_DAYS   0</div><div class=\"line\">PASS_MIN_LEN    5</div><div class=\"line\">PASS_WARN_AGE   7</div></pre></td></tr></table></figure>\n<p> 通过chage -l xxx(用户名)  查看定期修改的时间</p>\n</li>\n<li><p>用户不能重复使用5次内已使用的口令<br>修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_unix.so” 字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=5</div></pre></td></tr></table></figure>\n<p> 通过/etc/security/opasswd中查看禁止使用近期用过的5个密码</p>\n</li>\n<li><p>尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上<br>查看系统中是否含有pam_tally2.so模块，如果没有，则需要使用pam_tally.so模块<br>find /lib<em> -iname “pam_tally2.so”<br>find /lib</em> -iname “pam_tally.so”<br>在配置文件中/etc/pam.d/sshd中的第二行，如下添加内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">auth       required     pam_tally2.so deny=5 unlock_time=1200</div></pre></td></tr></table></figure>\n<p> 查看用户错误登陆次数：<br> pam_tally2 –user xxx (用户名)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">pam_cracklib.so比较重要和难于理解的是它的一些参数和计数方法，其常用参数包括:</div><div class=\"line\">debug：将调试信息写入日志；</div><div class=\"line\">type=xxx：当添加/修改密码时，系统给出的缺省提示符是“New UNIX password:”以及“Retype UNIX</div><div class=\"line\">password:”，而使用该参数可以自定义输入密码的提示符，比如指定type=your own word；</div><div class=\"line\">retry=N：定义登录/修改密码失败时，可以重试的次数；</div><div class=\"line\">Difok=N：定义新密码中必须有几个字符要与旧密码不同。但是如果新密码中有1/2以上的字符与旧密码不同时，该新密码将被接受；</div><div class=\"line\">minlen=N：定义用户密码的最小长度；</div><div class=\"line\">dcredit=N：定义用户密码中必须包含多少个数字；</div><div class=\"line\">ucredit=N：定义用户密码中必须包含多少个大写字母；</div><div class=\"line\">lcredit=N：定义用户密码中必须包含多少个小些字母；</div><div class=\"line\">ocredit=N：定义用户密码中必须包含多少个特殊字符（除数字、字母之外）；</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><ol>\n<li>密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。</li>\n<li>密码定期更改，最长不超过90天。</li>\n<li>用户不能重复使用5次内已使用的口令。</li>\n<li>尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上。</li>\n</ol>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>安装 PAM 的 cracklib 模块，cracklib 能提供额外的密码检查能力</p>\n<ol>\n<li><p>密码必须符合复杂度要求，字母、数字、特殊字符组成。长度大于8位。<br>修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_cracklib.so” 字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">password    requisite     pam_cracklib.so retry=3 difok=3 minlen=8 lcredit=-1 dcredit=-1 ocredit=-1</div></pre></td></tr></table></figure>\n</li>\n<li><p>密码定期更改，最长不超过90天</p>\n<p> 配置文件中 /etc/login.defs 修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">PASS_MAX_DAYS   90</div><div class=\"line\">PASS_MIN_DAYS   0</div><div class=\"line\">PASS_MIN_LEN    5</div><div class=\"line\">PASS_WARN_AGE   7</div></pre></td></tr></table></figure>\n<p> 通过chage -l xxx(用户名)  查看定期修改的时间</p>\n</li>\n<li><p>用户不能重复使用5次内已使用的口令<br>修改文件：/ect/pam.d/system-auth，找到同时有 “password” 和 “pam_unix.so” 字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=5</div></pre></td></tr></table></figure>\n<p> 通过/etc/security/opasswd中查看禁止使用近期用过的5个密码</p>\n</li>\n<li><p>尝试登陆失败错误次数，必须设置不能超过5次，超过5次后，暂时锁定20分钟或以上<br>查看系统中是否含有pam_tally2.so模块，如果没有，则需要使用pam_tally.so模块<br>find /lib<em> -iname “pam_tally2.so”<br>find /lib</em> -iname “pam_tally.so”<br>在配置文件中/etc/pam.d/sshd中的第二行，如下添加内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">auth       required     pam_tally2.so deny=5 unlock_time=1200</div></pre></td></tr></table></figure>\n<p> 查看用户错误登陆次数：<br> pam_tally2 –user xxx (用户名)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">pam_cracklib.so比较重要和难于理解的是它的一些参数和计数方法，其常用参数包括:</div><div class=\"line\">debug：将调试信息写入日志；</div><div class=\"line\">type=xxx：当添加/修改密码时，系统给出的缺省提示符是“New UNIX password:”以及“Retype UNIX</div><div class=\"line\">password:”，而使用该参数可以自定义输入密码的提示符，比如指定type=your own word；</div><div class=\"line\">retry=N：定义登录/修改密码失败时，可以重试的次数；</div><div class=\"line\">Difok=N：定义新密码中必须有几个字符要与旧密码不同。但是如果新密码中有1/2以上的字符与旧密码不同时，该新密码将被接受；</div><div class=\"line\">minlen=N：定义用户密码的最小长度；</div><div class=\"line\">dcredit=N：定义用户密码中必须包含多少个数字；</div><div class=\"line\">ucredit=N：定义用户密码中必须包含多少个大写字母；</div><div class=\"line\">lcredit=N：定义用户密码中必须包含多少个小些字母；</div><div class=\"line\">ocredit=N：定义用户密码中必须包含多少个特殊字符（除数字、字母之外）；</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Systemd服务","date":"2019-06-29T03:07:07.000Z","_content":"### 说明\nSystemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管理。\n\n#### systemctl\nsystemctl是 Systemd 的主命令，用于管理系统\n```\n# 重启系统\n$ sudo systemctl reboot\n \n# 关闭系统，切断电源\n$ sudo systemctl poweroff\n \n# CPU停止工作\n$ sudo systemctl halt\n \n# 暂停系统\n$ sudo systemctl suspend\n \n# 让系统进入冬眠状态\n$ sudo systemctl hibernate\n \n# 让系统进入交互式休眠状态\n$ sudo systemctl hybrid-sleep\n \n# 启动进入救援状态（单用户状态）\n$ sudo systemctl rescue\n```\n#### systemd-analyze\nsystemd-analyze命令用于查看启动耗时\n```\n# 查看启动耗时\n$ systemd-analyze\n \n# 查看每个服务的启动耗时\n$ systemd-analyze blame\n \n# 显示瀑布状的启动过程流\n$ systemd-analyze critical-chain\n \n# 显示指定服务的启动流\n$ systemd-analyze critical-chain atd.service\n```\n#### hostnamectl\nhostnamectl命令用于查看当前主机的信息\n```\n# 显示当前主机的信息\n$ hostnamectl\n \n# 设置主机名\n$ sudo hostnamectl set-hostname test01\n```\n#### timedatectl\ntimedatectl命令用于查看当前时区设置\n```\n# 查看当前时区设置\n$ timedatectl\n \n# 显示所有可用的时区\n$ timedatectl list-timezones                                                        \n# 设置当前时区\n$ sudo timedatectl set-timezone America/New_York\n$ sudo timedatectl set-time YYYY-MM-DD\n$ sudo timedatectl set-time HH:MM:SS\n```\n#### loginctl\nloginctl命令用于查看当前登录的用户\n```\n# 列出当前session\n$ loginctl list-sessions\n \n# 列出当前登录用户\n$ loginctl list-users\n \n# 列出显示指定用户的信息\n$ loginctl show-user test\n```\n\n### Unit\nSystemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）\n```\nService unit：系统服务\nTarget unit：多个 Unit 构成的一个组\nDevice Unit：硬件设备\nMount Unit：文件系统的挂载点\nAutomount Unit：自动挂载点\nPath Unit：文件或路径\nScope Unit：不是由 Systemd 启动的外部进程\nSlice Unit：进程组\nSnapshot Unit：Systemd 快照，可以切回某个快照\nSocket Unit：进程间通信的 socket\nSwap Unit：swap 文件\nTimer Unit：定时器\n```\nsystemctl list-units命令可以查看当前系统的所有 Unit \n```\n# 列出正在运行的 Unit\n$ systemctl list-units\n \n# 列出所有Unit，包括没有找到配置文件的或者启动失败的\n$ systemctl list-units --all\n \n# 列出所有没有运行的 Unit\n$ systemctl list-units --all --state=inactive\n \n# 列出所有加载失败的 Unit\n$ systemctl list-units --failed\n \n# 列出所有正在运行的、类型为 service 的 Unit\n$ systemctl list-units --type=service\n```\n\n#### Unit 的状态\nsystemctl status命令用于查看系统状态和单个 Unit 的状态\n```\n# 显示系统状态\n$ systemctl status\n \n# 显示单个 Unit 的状态\n$ sysystemctl status test.service\n  \n# 显示远程主机的某个 Unit 的状态\n$ systemctl -H root@localhost status httpd.service\n除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。\n  \n# 显示某个 Unit 是否正在运行\n$ systemctl is-active test.service\n \n# 显示某个 Unit 是否处于启动失败状态\n$ systemctl is-failed test.service\n \n# 显示某个 Unit 服务是否建立了启动链接\n$ systemctl is-enabled test.service\n```\n#### Unit 管理\n最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）\n```\n# 立即启动一个服务\n$ sudo systemctl start apache.service\n \n# 立即停止一个服务\n$ sudo systemctl stop apache.service\n \n# 重启一个服务\n$ sudo systemctl restart apache.service\n \n# 杀死一个服务的所有子进程\n$ sudo systemctl kill apache.service\n \n# 重新加载一个服务的配置文件\n$ sudo systemctl reload apache.service\n \n# 重载所有修改过的配置文件\n$ sudo systemctl daemon-reload\n \n# 显示某个 Unit 的所有底层参数\n$ systemctl show httpd.service\n \n# 显示某个 Unit 的指定属性的值\n$ systemctl show -p CPUShares httpd.service\n \n# 设置某个 Unit 的指定属性\n$ sudo systemctl set-property httpd.service CPUShares=500\n```\n#### 依赖关系\nUnit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B\nsystemctl list-dependencies命令列出一个 Unit 的所有依赖\n```\n$ systemctl list-dependencies nginx.service\n上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。\n \n$ systemctl list-dependencies --all nginx.service\n```\n\n### Unit 配置文件\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个Unit,Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n```\nsudo systemctl enable test.service \nCreated symlink from /etc/systemd/system/multi-user.target.wants/test.service to /usr/lib/systemd/system/test.service.\n```\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n```\nsudo systemctl disable test.service \n```\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n\n#### 配置文件的状态\nsystemctl list-unit-files命令用于列出所有配置文件\n```\n# 列出所有配置文件\n$ systemctl list-unit-files\nUNIT FILE              STATE\nchronyd.service        enabled\nclamd@.service         static\nclamd@scan.service     disabled\n \nenabled：已建立启动链接\ndisabled：没建立启动链接\nstatic：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖\nmasked：该配置文件被禁止建立启动链接\n \n# 列出指定类型的配置文件\n$ systemctl list-unit-files --type=service\n```\n从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令\n```\n systemctl status test.service\n```\n一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效\n```\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart httpd.service\n```\n#### 配置文件格式\nsystemctl cat命令可以查看配置文件的内容\n```\n$ systemctl cat test.service\n \n[Unit]\nDescription=Test Demo\nAfter=syslog.target network.target\n \n[Service]\nExecStart=/usr/bin/python2.7 /home/user/python/test.py\n \n[Install]\nWantedBy=multi-user.target\n```\n#### 配置文件说明\n[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下\n```\nDescription：简短描述\nDocumentation：文档地址\nRequires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\nWants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\nBindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\nBefore：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\nAfter：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\nConflicts：这里指定的 Unit 不能与当前 Unit 同时运行\nCondition...：当前 Unit 运行必须满足的条件，否则不会运行\nAssert...：当前 Unit 运行必须满足的条件，否则会报启动失败\n```\n[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下\n```\nWantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\nRequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\nAlias：当前 Unit 可用于启动的别名\nAlso：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n```\n[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下\n```\nType：定义启动时的进程行为。它有以下几种值。\nType=simple：默认值，执行ExecStart指定的命令，启动主进程\nType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\nType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\nType=dbus：当前服务通过D-Bus启动\nType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\nType=idle：若有其他任务执行完毕，当前服务才会运行\nExecStart：启动当前服务的命令\nExecStartPre：启动当前服务之前执行的命令\nExecStartPost：启动当前服务之后执行的命令\nExecReload：重启当前服务时执行的命令\nExecStop：停止当前服务时执行的命令\nExecStopPost：停止当其服务之后执行的命令\nRestartSec：自动重启当前服务间隔的秒数\nRestart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\nTimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\nEnvironment：指定环境变量\n```\n\n### 日志管理\nSystemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。\n```\n# 查看所有日志（默认情况下 ，只保存本次启动的日志）\n$ sudo journalctl\n \n# 查看内核日志（不显示应用日志）\n$ sudo journalctl -k\n \n# 查看系统本次启动的日志\n$ sudo journalctl -b\n$ sudo journalctl -b -0\n \n# 查看上一次启动的日志（需更改设置）\n$ sudo journalctl -b -1\n \n# 查看指定时间的日志\n$ sudo journalctl --since=\"2012-10-30 18:17:16\"\n$ sudo journalctl --since \"20 min ago\"\n$ sudo journalctl --since yesterday\n$ sudo journalctl --since \"2015-01-10\" --until \"2015-01-11 03:00\"\n$ sudo journalctl --since 09:00 --until \"1 hour ago\"\n \n# 显示尾部的最新10行日志\n$ sudo journalctl -n\n \n# 显示尾部指定行数的日志\n$ sudo journalctl -n 20\n \n# 实时滚动显示最新日志\n$ sudo journalctl -f\n \n# 查看指定服务的日志\n$ sudo journalctl /usr/lib/systemd/systemd\n \n# 查看某个路径的脚本的日志\n$ sudo journalctl /usr/bin/bash\n \n# 查看指定用户的日志\n$ sudo journalctl _UID=12 --since today\n \n# 查看某个 Unit 的日志\n$ sudo journalctl -u nginx.service\n$ sudo journalctl -u nginx.service --since today\n \n# 实时滚动显示某个 Unit 的最新日志\n$ sudo journalctl -u nginx.service -f\n \n# 合并显示多个 Unit 的日志\n$ journalctl -u nginx.service -u php-fpm.service --since today\n \n# 查看指定优先级（及其以上级别）的日志，共有8级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\n$ sudo journalctl -p err -b\n \n# 日志默认分页输出，--no-pager 改为正常的标准输出\n$ sudo journalctl --no-pager\n \n# 以 JSON 格式（单行）输出\n$ sudo journalctl -b -u nginx.service -o json\n \n# 以 JSON 格式（多行）输出，可读性更好\n$ sudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n \n# 显示日志占据的硬盘空间\n$ sudo journalctl --disk-usage\n \n# 指定日志文件占据的最大空间\n$ sudo journalctl --vacuum-size=1G\n \n# 指定日志文件保存多久\n$ sudo journalctl --vacuum-time=1years\n```\n### 开机启动\n对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。\n\n如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。\n```\n$ sudo systemctl enable httpd\n```\n上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。\n\n这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。\n\n### 修改配置文件后重启\n修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务\n```\n# 重新加载配置文件\n$ sudo systemctl daemon-reload\n \n# 重启相关服务\n$ sudo systemctl restart test.service\n```\n","source":"_posts/yw-systemd.md","raw":"---\ntitle: Systemd服务\ndate: 2019-06-29 11:07:07\ntags:\n  - systemd\ncategories:\n  - 运维\n---\n### 说明\nSystemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管理。\n\n#### systemctl\nsystemctl是 Systemd 的主命令，用于管理系统\n```\n# 重启系统\n$ sudo systemctl reboot\n \n# 关闭系统，切断电源\n$ sudo systemctl poweroff\n \n# CPU停止工作\n$ sudo systemctl halt\n \n# 暂停系统\n$ sudo systemctl suspend\n \n# 让系统进入冬眠状态\n$ sudo systemctl hibernate\n \n# 让系统进入交互式休眠状态\n$ sudo systemctl hybrid-sleep\n \n# 启动进入救援状态（单用户状态）\n$ sudo systemctl rescue\n```\n#### systemd-analyze\nsystemd-analyze命令用于查看启动耗时\n```\n# 查看启动耗时\n$ systemd-analyze\n \n# 查看每个服务的启动耗时\n$ systemd-analyze blame\n \n# 显示瀑布状的启动过程流\n$ systemd-analyze critical-chain\n \n# 显示指定服务的启动流\n$ systemd-analyze critical-chain atd.service\n```\n#### hostnamectl\nhostnamectl命令用于查看当前主机的信息\n```\n# 显示当前主机的信息\n$ hostnamectl\n \n# 设置主机名\n$ sudo hostnamectl set-hostname test01\n```\n#### timedatectl\ntimedatectl命令用于查看当前时区设置\n```\n# 查看当前时区设置\n$ timedatectl\n \n# 显示所有可用的时区\n$ timedatectl list-timezones                                                        \n# 设置当前时区\n$ sudo timedatectl set-timezone America/New_York\n$ sudo timedatectl set-time YYYY-MM-DD\n$ sudo timedatectl set-time HH:MM:SS\n```\n#### loginctl\nloginctl命令用于查看当前登录的用户\n```\n# 列出当前session\n$ loginctl list-sessions\n \n# 列出当前登录用户\n$ loginctl list-users\n \n# 列出显示指定用户的信息\n$ loginctl show-user test\n```\n\n### Unit\nSystemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）\n```\nService unit：系统服务\nTarget unit：多个 Unit 构成的一个组\nDevice Unit：硬件设备\nMount Unit：文件系统的挂载点\nAutomount Unit：自动挂载点\nPath Unit：文件或路径\nScope Unit：不是由 Systemd 启动的外部进程\nSlice Unit：进程组\nSnapshot Unit：Systemd 快照，可以切回某个快照\nSocket Unit：进程间通信的 socket\nSwap Unit：swap 文件\nTimer Unit：定时器\n```\nsystemctl list-units命令可以查看当前系统的所有 Unit \n```\n# 列出正在运行的 Unit\n$ systemctl list-units\n \n# 列出所有Unit，包括没有找到配置文件的或者启动失败的\n$ systemctl list-units --all\n \n# 列出所有没有运行的 Unit\n$ systemctl list-units --all --state=inactive\n \n# 列出所有加载失败的 Unit\n$ systemctl list-units --failed\n \n# 列出所有正在运行的、类型为 service 的 Unit\n$ systemctl list-units --type=service\n```\n\n#### Unit 的状态\nsystemctl status命令用于查看系统状态和单个 Unit 的状态\n```\n# 显示系统状态\n$ systemctl status\n \n# 显示单个 Unit 的状态\n$ sysystemctl status test.service\n  \n# 显示远程主机的某个 Unit 的状态\n$ systemctl -H root@localhost status httpd.service\n除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。\n  \n# 显示某个 Unit 是否正在运行\n$ systemctl is-active test.service\n \n# 显示某个 Unit 是否处于启动失败状态\n$ systemctl is-failed test.service\n \n# 显示某个 Unit 服务是否建立了启动链接\n$ systemctl is-enabled test.service\n```\n#### Unit 管理\n最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）\n```\n# 立即启动一个服务\n$ sudo systemctl start apache.service\n \n# 立即停止一个服务\n$ sudo systemctl stop apache.service\n \n# 重启一个服务\n$ sudo systemctl restart apache.service\n \n# 杀死一个服务的所有子进程\n$ sudo systemctl kill apache.service\n \n# 重新加载一个服务的配置文件\n$ sudo systemctl reload apache.service\n \n# 重载所有修改过的配置文件\n$ sudo systemctl daemon-reload\n \n# 显示某个 Unit 的所有底层参数\n$ systemctl show httpd.service\n \n# 显示某个 Unit 的指定属性的值\n$ systemctl show -p CPUShares httpd.service\n \n# 设置某个 Unit 的指定属性\n$ sudo systemctl set-property httpd.service CPUShares=500\n```\n#### 依赖关系\nUnit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B\nsystemctl list-dependencies命令列出一个 Unit 的所有依赖\n```\n$ systemctl list-dependencies nginx.service\n上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。\n \n$ systemctl list-dependencies --all nginx.service\n```\n\n### Unit 配置文件\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个Unit,Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n```\nsudo systemctl enable test.service \nCreated symlink from /etc/systemd/system/multi-user.target.wants/test.service to /usr/lib/systemd/system/test.service.\n```\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n```\nsudo systemctl disable test.service \n```\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n\n#### 配置文件的状态\nsystemctl list-unit-files命令用于列出所有配置文件\n```\n# 列出所有配置文件\n$ systemctl list-unit-files\nUNIT FILE              STATE\nchronyd.service        enabled\nclamd@.service         static\nclamd@scan.service     disabled\n \nenabled：已建立启动链接\ndisabled：没建立启动链接\nstatic：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖\nmasked：该配置文件被禁止建立启动链接\n \n# 列出指定类型的配置文件\n$ systemctl list-unit-files --type=service\n```\n从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令\n```\n systemctl status test.service\n```\n一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效\n```\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart httpd.service\n```\n#### 配置文件格式\nsystemctl cat命令可以查看配置文件的内容\n```\n$ systemctl cat test.service\n \n[Unit]\nDescription=Test Demo\nAfter=syslog.target network.target\n \n[Service]\nExecStart=/usr/bin/python2.7 /home/user/python/test.py\n \n[Install]\nWantedBy=multi-user.target\n```\n#### 配置文件说明\n[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下\n```\nDescription：简短描述\nDocumentation：文档地址\nRequires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\nWants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\nBindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\nBefore：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\nAfter：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\nConflicts：这里指定的 Unit 不能与当前 Unit 同时运行\nCondition...：当前 Unit 运行必须满足的条件，否则不会运行\nAssert...：当前 Unit 运行必须满足的条件，否则会报启动失败\n```\n[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下\n```\nWantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\nRequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\nAlias：当前 Unit 可用于启动的别名\nAlso：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n```\n[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下\n```\nType：定义启动时的进程行为。它有以下几种值。\nType=simple：默认值，执行ExecStart指定的命令，启动主进程\nType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\nType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\nType=dbus：当前服务通过D-Bus启动\nType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\nType=idle：若有其他任务执行完毕，当前服务才会运行\nExecStart：启动当前服务的命令\nExecStartPre：启动当前服务之前执行的命令\nExecStartPost：启动当前服务之后执行的命令\nExecReload：重启当前服务时执行的命令\nExecStop：停止当前服务时执行的命令\nExecStopPost：停止当其服务之后执行的命令\nRestartSec：自动重启当前服务间隔的秒数\nRestart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\nTimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\nEnvironment：指定环境变量\n```\n\n### 日志管理\nSystemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。\n```\n# 查看所有日志（默认情况下 ，只保存本次启动的日志）\n$ sudo journalctl\n \n# 查看内核日志（不显示应用日志）\n$ sudo journalctl -k\n \n# 查看系统本次启动的日志\n$ sudo journalctl -b\n$ sudo journalctl -b -0\n \n# 查看上一次启动的日志（需更改设置）\n$ sudo journalctl -b -1\n \n# 查看指定时间的日志\n$ sudo journalctl --since=\"2012-10-30 18:17:16\"\n$ sudo journalctl --since \"20 min ago\"\n$ sudo journalctl --since yesterday\n$ sudo journalctl --since \"2015-01-10\" --until \"2015-01-11 03:00\"\n$ sudo journalctl --since 09:00 --until \"1 hour ago\"\n \n# 显示尾部的最新10行日志\n$ sudo journalctl -n\n \n# 显示尾部指定行数的日志\n$ sudo journalctl -n 20\n \n# 实时滚动显示最新日志\n$ sudo journalctl -f\n \n# 查看指定服务的日志\n$ sudo journalctl /usr/lib/systemd/systemd\n \n# 查看某个路径的脚本的日志\n$ sudo journalctl /usr/bin/bash\n \n# 查看指定用户的日志\n$ sudo journalctl _UID=12 --since today\n \n# 查看某个 Unit 的日志\n$ sudo journalctl -u nginx.service\n$ sudo journalctl -u nginx.service --since today\n \n# 实时滚动显示某个 Unit 的最新日志\n$ sudo journalctl -u nginx.service -f\n \n# 合并显示多个 Unit 的日志\n$ journalctl -u nginx.service -u php-fpm.service --since today\n \n# 查看指定优先级（及其以上级别）的日志，共有8级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\n$ sudo journalctl -p err -b\n \n# 日志默认分页输出，--no-pager 改为正常的标准输出\n$ sudo journalctl --no-pager\n \n# 以 JSON 格式（单行）输出\n$ sudo journalctl -b -u nginx.service -o json\n \n# 以 JSON 格式（多行）输出，可读性更好\n$ sudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n \n# 显示日志占据的硬盘空间\n$ sudo journalctl --disk-usage\n \n# 指定日志文件占据的最大空间\n$ sudo journalctl --vacuum-size=1G\n \n# 指定日志文件保存多久\n$ sudo journalctl --vacuum-time=1years\n```\n### 开机启动\n对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。\n\n如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。\n```\n$ sudo systemctl enable httpd\n```\n上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。\n\n这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。\n\n### 修改配置文件后重启\n修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务\n```\n# 重新加载配置文件\n$ sudo systemctl daemon-reload\n \n# 重启相关服务\n$ sudo systemctl restart test.service\n```\n","slug":"yw-systemd","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j6010086ct8us0hjbzc7","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管理。</p>\n<h4 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h4><p>systemctl是 Systemd 的主命令，用于管理系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 重启系统</div><div class=\"line\">$ sudo systemctl reboot</div><div class=\"line\"> </div><div class=\"line\"># 关闭系统，切断电源</div><div class=\"line\">$ sudo systemctl poweroff</div><div class=\"line\"> </div><div class=\"line\"># CPU停止工作</div><div class=\"line\">$ sudo systemctl halt</div><div class=\"line\"> </div><div class=\"line\"># 暂停系统</div><div class=\"line\">$ sudo systemctl suspend</div><div class=\"line\"> </div><div class=\"line\"># 让系统进入冬眠状态</div><div class=\"line\">$ sudo systemctl hibernate</div><div class=\"line\"> </div><div class=\"line\"># 让系统进入交互式休眠状态</div><div class=\"line\">$ sudo systemctl hybrid-sleep</div><div class=\"line\"> </div><div class=\"line\"># 启动进入救援状态（单用户状态）</div><div class=\"line\">$ sudo systemctl rescue</div></pre></td></tr></table></figure></p>\n<h4 id=\"systemd-analyze\"><a href=\"#systemd-analyze\" class=\"headerlink\" title=\"systemd-analyze\"></a>systemd-analyze</h4><p>systemd-analyze命令用于查看启动耗时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看启动耗时</div><div class=\"line\">$ systemd-analyze</div><div class=\"line\"> </div><div class=\"line\"># 查看每个服务的启动耗时</div><div class=\"line\">$ systemd-analyze blame</div><div class=\"line\"> </div><div class=\"line\"># 显示瀑布状的启动过程流</div><div class=\"line\">$ systemd-analyze critical-chain</div><div class=\"line\"> </div><div class=\"line\"># 显示指定服务的启动流</div><div class=\"line\">$ systemd-analyze critical-chain atd.service</div></pre></td></tr></table></figure></p>\n<h4 id=\"hostnamectl\"><a href=\"#hostnamectl\" class=\"headerlink\" title=\"hostnamectl\"></a>hostnamectl</h4><p>hostnamectl命令用于查看当前主机的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 显示当前主机的信息</div><div class=\"line\">$ hostnamectl</div><div class=\"line\"> </div><div class=\"line\"># 设置主机名</div><div class=\"line\">$ sudo hostnamectl set-hostname test01</div></pre></td></tr></table></figure></p>\n<h4 id=\"timedatectl\"><a href=\"#timedatectl\" class=\"headerlink\" title=\"timedatectl\"></a>timedatectl</h4><p>timedatectl命令用于查看当前时区设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看当前时区设置</div><div class=\"line\">$ timedatectl</div><div class=\"line\"> </div><div class=\"line\"># 显示所有可用的时区</div><div class=\"line\">$ timedatectl list-timezones                                                        </div><div class=\"line\"># 设置当前时区</div><div class=\"line\">$ sudo timedatectl set-timezone America/New_York</div><div class=\"line\">$ sudo timedatectl set-time YYYY-MM-DD</div><div class=\"line\">$ sudo timedatectl set-time HH:MM:SS</div></pre></td></tr></table></figure></p>\n<h4 id=\"loginctl\"><a href=\"#loginctl\" class=\"headerlink\" title=\"loginctl\"></a>loginctl</h4><p>loginctl命令用于查看当前登录的用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 列出当前session</div><div class=\"line\">$ loginctl list-sessions</div><div class=\"line\"> </div><div class=\"line\"># 列出当前登录用户</div><div class=\"line\">$ loginctl list-users</div><div class=\"line\"> </div><div class=\"line\"># 列出显示指定用户的信息</div><div class=\"line\">$ loginctl show-user test</div></pre></td></tr></table></figure></p>\n<h3 id=\"Unit\"><a href=\"#Unit\" class=\"headerlink\" title=\"Unit\"></a>Unit</h3><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Service unit：系统服务</div><div class=\"line\">Target unit：多个 Unit 构成的一个组</div><div class=\"line\">Device Unit：硬件设备</div><div class=\"line\">Mount Unit：文件系统的挂载点</div><div class=\"line\">Automount Unit：自动挂载点</div><div class=\"line\">Path Unit：文件或路径</div><div class=\"line\">Scope Unit：不是由 Systemd 启动的外部进程</div><div class=\"line\">Slice Unit：进程组</div><div class=\"line\">Snapshot Unit：Systemd 快照，可以切回某个快照</div><div class=\"line\">Socket Unit：进程间通信的 socket</div><div class=\"line\">Swap Unit：swap 文件</div><div class=\"line\">Timer Unit：定时器</div></pre></td></tr></table></figure></p>\n<p>systemctl list-units命令可以查看当前系统的所有 Unit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 列出正在运行的 Unit</div><div class=\"line\">$ systemctl list-units</div><div class=\"line\"> </div><div class=\"line\"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</div><div class=\"line\">$ systemctl list-units --all</div><div class=\"line\"> </div><div class=\"line\"># 列出所有没有运行的 Unit</div><div class=\"line\">$ systemctl list-units --all --state=inactive</div><div class=\"line\"> </div><div class=\"line\"># 列出所有加载失败的 Unit</div><div class=\"line\">$ systemctl list-units --failed</div><div class=\"line\"> </div><div class=\"line\"># 列出所有正在运行的、类型为 service 的 Unit</div><div class=\"line\">$ systemctl list-units --type=service</div></pre></td></tr></table></figure></p>\n<h4 id=\"Unit-的状态\"><a href=\"#Unit-的状态\" class=\"headerlink\" title=\"Unit 的状态\"></a>Unit 的状态</h4><p>systemctl status命令用于查看系统状态和单个 Unit 的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 显示系统状态</div><div class=\"line\">$ systemctl status</div><div class=\"line\"> </div><div class=\"line\"># 显示单个 Unit 的状态</div><div class=\"line\">$ sysystemctl status test.service</div><div class=\"line\">  </div><div class=\"line\"># 显示远程主机的某个 Unit 的状态</div><div class=\"line\">$ systemctl -H root@localhost status httpd.service</div><div class=\"line\">除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</div><div class=\"line\">  </div><div class=\"line\"># 显示某个 Unit 是否正在运行</div><div class=\"line\">$ systemctl is-active test.service</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 是否处于启动失败状态</div><div class=\"line\">$ systemctl is-failed test.service</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 服务是否建立了启动链接</div><div class=\"line\">$ systemctl is-enabled test.service</div></pre></td></tr></table></figure></p>\n<h4 id=\"Unit-管理\"><a href=\"#Unit-管理\" class=\"headerlink\" title=\"Unit 管理\"></a>Unit 管理</h4><p>最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 立即启动一个服务</div><div class=\"line\">$ sudo systemctl start apache.service</div><div class=\"line\"> </div><div class=\"line\"># 立即停止一个服务</div><div class=\"line\">$ sudo systemctl stop apache.service</div><div class=\"line\"> </div><div class=\"line\"># 重启一个服务</div><div class=\"line\">$ sudo systemctl restart apache.service</div><div class=\"line\"> </div><div class=\"line\"># 杀死一个服务的所有子进程</div><div class=\"line\">$ sudo systemctl kill apache.service</div><div class=\"line\"> </div><div class=\"line\"># 重新加载一个服务的配置文件</div><div class=\"line\">$ sudo systemctl reload apache.service</div><div class=\"line\"> </div><div class=\"line\"># 重载所有修改过的配置文件</div><div class=\"line\">$ sudo systemctl daemon-reload</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 的所有底层参数</div><div class=\"line\">$ systemctl show httpd.service</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 的指定属性的值</div><div class=\"line\">$ systemctl show -p CPUShares httpd.service</div><div class=\"line\"> </div><div class=\"line\"># 设置某个 Unit 的指定属性</div><div class=\"line\">$ sudo systemctl set-property httpd.service CPUShares=500</div></pre></td></tr></table></figure></p>\n<h4 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h4><p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B<br>systemctl list-dependencies命令列出一个 Unit 的所有依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ systemctl list-dependencies nginx.service</div><div class=\"line\">上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。</div><div class=\"line\"> </div><div class=\"line\">$ systemctl list-dependencies --all nginx.service</div></pre></td></tr></table></figure></p>\n<h3 id=\"Unit-配置文件\"><a href=\"#Unit-配置文件\" class=\"headerlink\" title=\"Unit 配置文件\"></a>Unit 配置文件</h3><p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个Unit,Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。<br>systemctl enable命令用于在上面两个目录之间，建立符号链接关系。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl enable test.service </div><div class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/test.service to /usr/lib/systemd/system/test.service.</div></pre></td></tr></table></figure></p>\n<p>如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。<br>与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl disable test.service</div></pre></td></tr></table></figure></p>\n<p>配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。</p>\n<h4 id=\"配置文件的状态\"><a href=\"#配置文件的状态\" class=\"headerlink\" title=\"配置文件的状态\"></a>配置文件的状态</h4><p>systemctl list-unit-files命令用于列出所有配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 列出所有配置文件</div><div class=\"line\">$ systemctl list-unit-files</div><div class=\"line\">UNIT FILE              STATE</div><div class=\"line\">chronyd.service        enabled</div><div class=\"line\">clamd@.service         static</div><div class=\"line\">clamd@scan.service     disabled</div><div class=\"line\"> </div><div class=\"line\">enabled：已建立启动链接</div><div class=\"line\">disabled：没建立启动链接</div><div class=\"line\">static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖</div><div class=\"line\">masked：该配置文件被禁止建立启动链接</div><div class=\"line\"> </div><div class=\"line\"># 列出指定类型的配置文件</div><div class=\"line\">$ systemctl list-unit-files --type=service</div></pre></td></tr></table></figure></p>\n<p>从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl status test.service</div></pre></td></tr></table></figure></p>\n<p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo systemctl daemon-reload</div><div class=\"line\">$ sudo systemctl restart httpd.service</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件格式\"><a href=\"#配置文件格式\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h4><p>systemctl cat命令可以查看配置文件的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ systemctl cat test.service</div><div class=\"line\"> </div><div class=\"line\">[Unit]</div><div class=\"line\">Description=Test Demo</div><div class=\"line\">After=syslog.target network.target</div><div class=\"line\"> </div><div class=\"line\">[Service]</div><div class=\"line\">ExecStart=/usr/bin/python2.7 /home/user/python/test.py</div><div class=\"line\"> </div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件说明\"><a href=\"#配置文件说明\" class=\"headerlink\" title=\"配置文件说明\"></a>配置文件说明</h4><p>[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Description：简短描述</div><div class=\"line\">Documentation：文档地址</div><div class=\"line\">Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</div><div class=\"line\">Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</div><div class=\"line\">BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</div><div class=\"line\">Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</div><div class=\"line\">After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</div><div class=\"line\">Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</div><div class=\"line\">Condition...：当前 Unit 运行必须满足的条件，否则不会运行</div><div class=\"line\">Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败</div></pre></td></tr></table></figure></p>\n<p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中</div><div class=\"line\">RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中</div><div class=\"line\">Alias：当前 Unit 可用于启动的别名</div><div class=\"line\">Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</div></pre></td></tr></table></figure></p>\n<p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type：定义启动时的进程行为。它有以下几种值。</div><div class=\"line\">Type=simple：默认值，执行ExecStart指定的命令，启动主进程</div><div class=\"line\">Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</div><div class=\"line\">Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</div><div class=\"line\">Type=dbus：当前服务通过D-Bus启动</div><div class=\"line\">Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</div><div class=\"line\">Type=idle：若有其他任务执行完毕，当前服务才会运行</div><div class=\"line\">ExecStart：启动当前服务的命令</div><div class=\"line\">ExecStartPre：启动当前服务之前执行的命令</div><div class=\"line\">ExecStartPost：启动当前服务之后执行的命令</div><div class=\"line\">ExecReload：重启当前服务时执行的命令</div><div class=\"line\">ExecStop：停止当前服务时执行的命令</div><div class=\"line\">ExecStopPost：停止当其服务之后执行的命令</div><div class=\"line\">RestartSec：自动重启当前服务间隔的秒数</div><div class=\"line\">Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</div><div class=\"line\">TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</div><div class=\"line\">Environment：指定环境变量</div></pre></td></tr></table></figure></p>\n<h3 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a>日志管理</h3><p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</div><div class=\"line\">$ sudo journalctl</div><div class=\"line\"> </div><div class=\"line\"># 查看内核日志（不显示应用日志）</div><div class=\"line\">$ sudo journalctl -k</div><div class=\"line\"> </div><div class=\"line\"># 查看系统本次启动的日志</div><div class=\"line\">$ sudo journalctl -b</div><div class=\"line\">$ sudo journalctl -b -0</div><div class=\"line\"> </div><div class=\"line\"># 查看上一次启动的日志（需更改设置）</div><div class=\"line\">$ sudo journalctl -b -1</div><div class=\"line\"> </div><div class=\"line\"># 查看指定时间的日志</div><div class=\"line\">$ sudo journalctl --since=&quot;2012-10-30 18:17:16&quot;</div><div class=\"line\">$ sudo journalctl --since &quot;20 min ago&quot;</div><div class=\"line\">$ sudo journalctl --since yesterday</div><div class=\"line\">$ sudo journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot;</div><div class=\"line\">$ sudo journalctl --since 09:00 --until &quot;1 hour ago&quot;</div><div class=\"line\"> </div><div class=\"line\"># 显示尾部的最新10行日志</div><div class=\"line\">$ sudo journalctl -n</div><div class=\"line\"> </div><div class=\"line\"># 显示尾部指定行数的日志</div><div class=\"line\">$ sudo journalctl -n 20</div><div class=\"line\"> </div><div class=\"line\"># 实时滚动显示最新日志</div><div class=\"line\">$ sudo journalctl -f</div><div class=\"line\"> </div><div class=\"line\"># 查看指定服务的日志</div><div class=\"line\">$ sudo journalctl /usr/lib/systemd/systemd</div><div class=\"line\"> </div><div class=\"line\"># 查看某个路径的脚本的日志</div><div class=\"line\">$ sudo journalctl /usr/bin/bash</div><div class=\"line\"> </div><div class=\"line\"># 查看指定用户的日志</div><div class=\"line\">$ sudo journalctl _UID=12 --since today</div><div class=\"line\"> </div><div class=\"line\"># 查看某个 Unit 的日志</div><div class=\"line\">$ sudo journalctl -u nginx.service</div><div class=\"line\">$ sudo journalctl -u nginx.service --since today</div><div class=\"line\"> </div><div class=\"line\"># 实时滚动显示某个 Unit 的最新日志</div><div class=\"line\">$ sudo journalctl -u nginx.service -f</div><div class=\"line\"> </div><div class=\"line\"># 合并显示多个 Unit 的日志</div><div class=\"line\">$ journalctl -u nginx.service -u php-fpm.service --since today</div><div class=\"line\"> </div><div class=\"line\"># 查看指定优先级（及其以上级别）的日志，共有8级</div><div class=\"line\"># 0: emerg</div><div class=\"line\"># 1: alert</div><div class=\"line\"># 2: crit</div><div class=\"line\"># 3: err</div><div class=\"line\"># 4: warning</div><div class=\"line\"># 5: notice</div><div class=\"line\"># 6: info</div><div class=\"line\"># 7: debug</div><div class=\"line\">$ sudo journalctl -p err -b</div><div class=\"line\"> </div><div class=\"line\"># 日志默认分页输出，--no-pager 改为正常的标准输出</div><div class=\"line\">$ sudo journalctl --no-pager</div><div class=\"line\"> </div><div class=\"line\"># 以 JSON 格式（单行）输出</div><div class=\"line\">$ sudo journalctl -b -u nginx.service -o json</div><div class=\"line\"> </div><div class=\"line\"># 以 JSON 格式（多行）输出，可读性更好</div><div class=\"line\">$ sudo journalctl -b -u nginx.serviceqq</div><div class=\"line\"> -o json-pretty</div><div class=\"line\"> </div><div class=\"line\"># 显示日志占据的硬盘空间</div><div class=\"line\">$ sudo journalctl --disk-usage</div><div class=\"line\"> </div><div class=\"line\"># 指定日志文件占据的最大空间</div><div class=\"line\">$ sudo journalctl --vacuum-size=1G</div><div class=\"line\"> </div><div class=\"line\"># 指定日志文件保存多久</div><div class=\"line\">$ sudo journalctl --vacuum-time=1years</div></pre></td></tr></table></figure></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。</p>\n<p>如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo systemctl enable httpd</div></pre></td></tr></table></figure></p>\n<p>上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。</p>\n<p>这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>\n<h3 id=\"修改配置文件后重启\"><a href=\"#修改配置文件后重启\" class=\"headerlink\" title=\"修改配置文件后重启\"></a>修改配置文件后重启</h3><p>修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 重新加载配置文件</div><div class=\"line\">$ sudo systemctl daemon-reload</div><div class=\"line\"> </div><div class=\"line\"># 重启相关服务</div><div class=\"line\">$ sudo systemctl restart test.service</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管理。</p>\n<h4 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h4><p>systemctl是 Systemd 的主命令，用于管理系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 重启系统</div><div class=\"line\">$ sudo systemctl reboot</div><div class=\"line\"> </div><div class=\"line\"># 关闭系统，切断电源</div><div class=\"line\">$ sudo systemctl poweroff</div><div class=\"line\"> </div><div class=\"line\"># CPU停止工作</div><div class=\"line\">$ sudo systemctl halt</div><div class=\"line\"> </div><div class=\"line\"># 暂停系统</div><div class=\"line\">$ sudo systemctl suspend</div><div class=\"line\"> </div><div class=\"line\"># 让系统进入冬眠状态</div><div class=\"line\">$ sudo systemctl hibernate</div><div class=\"line\"> </div><div class=\"line\"># 让系统进入交互式休眠状态</div><div class=\"line\">$ sudo systemctl hybrid-sleep</div><div class=\"line\"> </div><div class=\"line\"># 启动进入救援状态（单用户状态）</div><div class=\"line\">$ sudo systemctl rescue</div></pre></td></tr></table></figure></p>\n<h4 id=\"systemd-analyze\"><a href=\"#systemd-analyze\" class=\"headerlink\" title=\"systemd-analyze\"></a>systemd-analyze</h4><p>systemd-analyze命令用于查看启动耗时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看启动耗时</div><div class=\"line\">$ systemd-analyze</div><div class=\"line\"> </div><div class=\"line\"># 查看每个服务的启动耗时</div><div class=\"line\">$ systemd-analyze blame</div><div class=\"line\"> </div><div class=\"line\"># 显示瀑布状的启动过程流</div><div class=\"line\">$ systemd-analyze critical-chain</div><div class=\"line\"> </div><div class=\"line\"># 显示指定服务的启动流</div><div class=\"line\">$ systemd-analyze critical-chain atd.service</div></pre></td></tr></table></figure></p>\n<h4 id=\"hostnamectl\"><a href=\"#hostnamectl\" class=\"headerlink\" title=\"hostnamectl\"></a>hostnamectl</h4><p>hostnamectl命令用于查看当前主机的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 显示当前主机的信息</div><div class=\"line\">$ hostnamectl</div><div class=\"line\"> </div><div class=\"line\"># 设置主机名</div><div class=\"line\">$ sudo hostnamectl set-hostname test01</div></pre></td></tr></table></figure></p>\n<h4 id=\"timedatectl\"><a href=\"#timedatectl\" class=\"headerlink\" title=\"timedatectl\"></a>timedatectl</h4><p>timedatectl命令用于查看当前时区设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看当前时区设置</div><div class=\"line\">$ timedatectl</div><div class=\"line\"> </div><div class=\"line\"># 显示所有可用的时区</div><div class=\"line\">$ timedatectl list-timezones                                                        </div><div class=\"line\"># 设置当前时区</div><div class=\"line\">$ sudo timedatectl set-timezone America/New_York</div><div class=\"line\">$ sudo timedatectl set-time YYYY-MM-DD</div><div class=\"line\">$ sudo timedatectl set-time HH:MM:SS</div></pre></td></tr></table></figure></p>\n<h4 id=\"loginctl\"><a href=\"#loginctl\" class=\"headerlink\" title=\"loginctl\"></a>loginctl</h4><p>loginctl命令用于查看当前登录的用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 列出当前session</div><div class=\"line\">$ loginctl list-sessions</div><div class=\"line\"> </div><div class=\"line\"># 列出当前登录用户</div><div class=\"line\">$ loginctl list-users</div><div class=\"line\"> </div><div class=\"line\"># 列出显示指定用户的信息</div><div class=\"line\">$ loginctl show-user test</div></pre></td></tr></table></figure></p>\n<h3 id=\"Unit\"><a href=\"#Unit\" class=\"headerlink\" title=\"Unit\"></a>Unit</h3><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Service unit：系统服务</div><div class=\"line\">Target unit：多个 Unit 构成的一个组</div><div class=\"line\">Device Unit：硬件设备</div><div class=\"line\">Mount Unit：文件系统的挂载点</div><div class=\"line\">Automount Unit：自动挂载点</div><div class=\"line\">Path Unit：文件或路径</div><div class=\"line\">Scope Unit：不是由 Systemd 启动的外部进程</div><div class=\"line\">Slice Unit：进程组</div><div class=\"line\">Snapshot Unit：Systemd 快照，可以切回某个快照</div><div class=\"line\">Socket Unit：进程间通信的 socket</div><div class=\"line\">Swap Unit：swap 文件</div><div class=\"line\">Timer Unit：定时器</div></pre></td></tr></table></figure></p>\n<p>systemctl list-units命令可以查看当前系统的所有 Unit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 列出正在运行的 Unit</div><div class=\"line\">$ systemctl list-units</div><div class=\"line\"> </div><div class=\"line\"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</div><div class=\"line\">$ systemctl list-units --all</div><div class=\"line\"> </div><div class=\"line\"># 列出所有没有运行的 Unit</div><div class=\"line\">$ systemctl list-units --all --state=inactive</div><div class=\"line\"> </div><div class=\"line\"># 列出所有加载失败的 Unit</div><div class=\"line\">$ systemctl list-units --failed</div><div class=\"line\"> </div><div class=\"line\"># 列出所有正在运行的、类型为 service 的 Unit</div><div class=\"line\">$ systemctl list-units --type=service</div></pre></td></tr></table></figure></p>\n<h4 id=\"Unit-的状态\"><a href=\"#Unit-的状态\" class=\"headerlink\" title=\"Unit 的状态\"></a>Unit 的状态</h4><p>systemctl status命令用于查看系统状态和单个 Unit 的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 显示系统状态</div><div class=\"line\">$ systemctl status</div><div class=\"line\"> </div><div class=\"line\"># 显示单个 Unit 的状态</div><div class=\"line\">$ sysystemctl status test.service</div><div class=\"line\">  </div><div class=\"line\"># 显示远程主机的某个 Unit 的状态</div><div class=\"line\">$ systemctl -H root@localhost status httpd.service</div><div class=\"line\">除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</div><div class=\"line\">  </div><div class=\"line\"># 显示某个 Unit 是否正在运行</div><div class=\"line\">$ systemctl is-active test.service</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 是否处于启动失败状态</div><div class=\"line\">$ systemctl is-failed test.service</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 服务是否建立了启动链接</div><div class=\"line\">$ systemctl is-enabled test.service</div></pre></td></tr></table></figure></p>\n<h4 id=\"Unit-管理\"><a href=\"#Unit-管理\" class=\"headerlink\" title=\"Unit 管理\"></a>Unit 管理</h4><p>最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 立即启动一个服务</div><div class=\"line\">$ sudo systemctl start apache.service</div><div class=\"line\"> </div><div class=\"line\"># 立即停止一个服务</div><div class=\"line\">$ sudo systemctl stop apache.service</div><div class=\"line\"> </div><div class=\"line\"># 重启一个服务</div><div class=\"line\">$ sudo systemctl restart apache.service</div><div class=\"line\"> </div><div class=\"line\"># 杀死一个服务的所有子进程</div><div class=\"line\">$ sudo systemctl kill apache.service</div><div class=\"line\"> </div><div class=\"line\"># 重新加载一个服务的配置文件</div><div class=\"line\">$ sudo systemctl reload apache.service</div><div class=\"line\"> </div><div class=\"line\"># 重载所有修改过的配置文件</div><div class=\"line\">$ sudo systemctl daemon-reload</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 的所有底层参数</div><div class=\"line\">$ systemctl show httpd.service</div><div class=\"line\"> </div><div class=\"line\"># 显示某个 Unit 的指定属性的值</div><div class=\"line\">$ systemctl show -p CPUShares httpd.service</div><div class=\"line\"> </div><div class=\"line\"># 设置某个 Unit 的指定属性</div><div class=\"line\">$ sudo systemctl set-property httpd.service CPUShares=500</div></pre></td></tr></table></figure></p>\n<h4 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h4><p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B<br>systemctl list-dependencies命令列出一个 Unit 的所有依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ systemctl list-dependencies nginx.service</div><div class=\"line\">上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。</div><div class=\"line\"> </div><div class=\"line\">$ systemctl list-dependencies --all nginx.service</div></pre></td></tr></table></figure></p>\n<h3 id=\"Unit-配置文件\"><a href=\"#Unit-配置文件\" class=\"headerlink\" title=\"Unit 配置文件\"></a>Unit 配置文件</h3><p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个Unit,Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。<br>systemctl enable命令用于在上面两个目录之间，建立符号链接关系。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl enable test.service </div><div class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/test.service to /usr/lib/systemd/system/test.service.</div></pre></td></tr></table></figure></p>\n<p>如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。<br>与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl disable test.service</div></pre></td></tr></table></figure></p>\n<p>配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。</p>\n<h4 id=\"配置文件的状态\"><a href=\"#配置文件的状态\" class=\"headerlink\" title=\"配置文件的状态\"></a>配置文件的状态</h4><p>systemctl list-unit-files命令用于列出所有配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 列出所有配置文件</div><div class=\"line\">$ systemctl list-unit-files</div><div class=\"line\">UNIT FILE              STATE</div><div class=\"line\">chronyd.service        enabled</div><div class=\"line\">clamd@.service         static</div><div class=\"line\">clamd@scan.service     disabled</div><div class=\"line\"> </div><div class=\"line\">enabled：已建立启动链接</div><div class=\"line\">disabled：没建立启动链接</div><div class=\"line\">static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖</div><div class=\"line\">masked：该配置文件被禁止建立启动链接</div><div class=\"line\"> </div><div class=\"line\"># 列出指定类型的配置文件</div><div class=\"line\">$ systemctl list-unit-files --type=service</div></pre></td></tr></table></figure></p>\n<p>从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl status test.service</div></pre></td></tr></table></figure></p>\n<p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo systemctl daemon-reload</div><div class=\"line\">$ sudo systemctl restart httpd.service</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件格式\"><a href=\"#配置文件格式\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h4><p>systemctl cat命令可以查看配置文件的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ systemctl cat test.service</div><div class=\"line\"> </div><div class=\"line\">[Unit]</div><div class=\"line\">Description=Test Demo</div><div class=\"line\">After=syslog.target network.target</div><div class=\"line\"> </div><div class=\"line\">[Service]</div><div class=\"line\">ExecStart=/usr/bin/python2.7 /home/user/python/test.py</div><div class=\"line\"> </div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件说明\"><a href=\"#配置文件说明\" class=\"headerlink\" title=\"配置文件说明\"></a>配置文件说明</h4><p>[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Description：简短描述</div><div class=\"line\">Documentation：文档地址</div><div class=\"line\">Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</div><div class=\"line\">Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</div><div class=\"line\">BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</div><div class=\"line\">Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</div><div class=\"line\">After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</div><div class=\"line\">Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</div><div class=\"line\">Condition...：当前 Unit 运行必须满足的条件，否则不会运行</div><div class=\"line\">Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败</div></pre></td></tr></table></figure></p>\n<p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中</div><div class=\"line\">RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中</div><div class=\"line\">Alias：当前 Unit 可用于启动的别名</div><div class=\"line\">Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</div></pre></td></tr></table></figure></p>\n<p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type：定义启动时的进程行为。它有以下几种值。</div><div class=\"line\">Type=simple：默认值，执行ExecStart指定的命令，启动主进程</div><div class=\"line\">Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</div><div class=\"line\">Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</div><div class=\"line\">Type=dbus：当前服务通过D-Bus启动</div><div class=\"line\">Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</div><div class=\"line\">Type=idle：若有其他任务执行完毕，当前服务才会运行</div><div class=\"line\">ExecStart：启动当前服务的命令</div><div class=\"line\">ExecStartPre：启动当前服务之前执行的命令</div><div class=\"line\">ExecStartPost：启动当前服务之后执行的命令</div><div class=\"line\">ExecReload：重启当前服务时执行的命令</div><div class=\"line\">ExecStop：停止当前服务时执行的命令</div><div class=\"line\">ExecStopPost：停止当其服务之后执行的命令</div><div class=\"line\">RestartSec：自动重启当前服务间隔的秒数</div><div class=\"line\">Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</div><div class=\"line\">TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</div><div class=\"line\">Environment：指定环境变量</div></pre></td></tr></table></figure></p>\n<h3 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a>日志管理</h3><p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</div><div class=\"line\">$ sudo journalctl</div><div class=\"line\"> </div><div class=\"line\"># 查看内核日志（不显示应用日志）</div><div class=\"line\">$ sudo journalctl -k</div><div class=\"line\"> </div><div class=\"line\"># 查看系统本次启动的日志</div><div class=\"line\">$ sudo journalctl -b</div><div class=\"line\">$ sudo journalctl -b -0</div><div class=\"line\"> </div><div class=\"line\"># 查看上一次启动的日志（需更改设置）</div><div class=\"line\">$ sudo journalctl -b -1</div><div class=\"line\"> </div><div class=\"line\"># 查看指定时间的日志</div><div class=\"line\">$ sudo journalctl --since=&quot;2012-10-30 18:17:16&quot;</div><div class=\"line\">$ sudo journalctl --since &quot;20 min ago&quot;</div><div class=\"line\">$ sudo journalctl --since yesterday</div><div class=\"line\">$ sudo journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot;</div><div class=\"line\">$ sudo journalctl --since 09:00 --until &quot;1 hour ago&quot;</div><div class=\"line\"> </div><div class=\"line\"># 显示尾部的最新10行日志</div><div class=\"line\">$ sudo journalctl -n</div><div class=\"line\"> </div><div class=\"line\"># 显示尾部指定行数的日志</div><div class=\"line\">$ sudo journalctl -n 20</div><div class=\"line\"> </div><div class=\"line\"># 实时滚动显示最新日志</div><div class=\"line\">$ sudo journalctl -f</div><div class=\"line\"> </div><div class=\"line\"># 查看指定服务的日志</div><div class=\"line\">$ sudo journalctl /usr/lib/systemd/systemd</div><div class=\"line\"> </div><div class=\"line\"># 查看某个路径的脚本的日志</div><div class=\"line\">$ sudo journalctl /usr/bin/bash</div><div class=\"line\"> </div><div class=\"line\"># 查看指定用户的日志</div><div class=\"line\">$ sudo journalctl _UID=12 --since today</div><div class=\"line\"> </div><div class=\"line\"># 查看某个 Unit 的日志</div><div class=\"line\">$ sudo journalctl -u nginx.service</div><div class=\"line\">$ sudo journalctl -u nginx.service --since today</div><div class=\"line\"> </div><div class=\"line\"># 实时滚动显示某个 Unit 的最新日志</div><div class=\"line\">$ sudo journalctl -u nginx.service -f</div><div class=\"line\"> </div><div class=\"line\"># 合并显示多个 Unit 的日志</div><div class=\"line\">$ journalctl -u nginx.service -u php-fpm.service --since today</div><div class=\"line\"> </div><div class=\"line\"># 查看指定优先级（及其以上级别）的日志，共有8级</div><div class=\"line\"># 0: emerg</div><div class=\"line\"># 1: alert</div><div class=\"line\"># 2: crit</div><div class=\"line\"># 3: err</div><div class=\"line\"># 4: warning</div><div class=\"line\"># 5: notice</div><div class=\"line\"># 6: info</div><div class=\"line\"># 7: debug</div><div class=\"line\">$ sudo journalctl -p err -b</div><div class=\"line\"> </div><div class=\"line\"># 日志默认分页输出，--no-pager 改为正常的标准输出</div><div class=\"line\">$ sudo journalctl --no-pager</div><div class=\"line\"> </div><div class=\"line\"># 以 JSON 格式（单行）输出</div><div class=\"line\">$ sudo journalctl -b -u nginx.service -o json</div><div class=\"line\"> </div><div class=\"line\"># 以 JSON 格式（多行）输出，可读性更好</div><div class=\"line\">$ sudo journalctl -b -u nginx.serviceqq</div><div class=\"line\"> -o json-pretty</div><div class=\"line\"> </div><div class=\"line\"># 显示日志占据的硬盘空间</div><div class=\"line\">$ sudo journalctl --disk-usage</div><div class=\"line\"> </div><div class=\"line\"># 指定日志文件占据的最大空间</div><div class=\"line\">$ sudo journalctl --vacuum-size=1G</div><div class=\"line\"> </div><div class=\"line\"># 指定日志文件保存多久</div><div class=\"line\">$ sudo journalctl --vacuum-time=1years</div></pre></td></tr></table></figure></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。</p>\n<p>如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo systemctl enable httpd</div></pre></td></tr></table></figure></p>\n<p>上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。</p>\n<p>这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>\n<h3 id=\"修改配置文件后重启\"><a href=\"#修改配置文件后重启\" class=\"headerlink\" title=\"修改配置文件后重启\"></a>修改配置文件后重启</h3><p>修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 重新加载配置文件</div><div class=\"line\">$ sudo systemctl daemon-reload</div><div class=\"line\"> </div><div class=\"line\"># 重启相关服务</div><div class=\"line\">$ sudo systemctl restart test.service</div></pre></td></tr></table></figure></p>\n"},{"title":"运维 Centos，Ubuntu下安装zabbix遇到的问题","date":"2017-03-06T14:15:20.000Z","_content":"\n#### Ubuntu\n在Ubuntu系统中，安装zabbix进行configure时会遇到以下4个主要问题\n```\n./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl\n \n1 configure: error: MySQL library not found\nthe problem is not installed mysql-devel\n#apt-get install libghc6-hsql-mysql-dev (ubuntu )\n \n2 configure: error: Jabber library not found\nthe problem is not installed jabber lib\n#apt-get install libphp-jabber\n#apt-get install libnet-jabber-loudmouth-perl\n#apt-get install jabber-dev\n#apt-get install libiksemel-dev (* this packet important)\n \n3 configure: error: Not found curl Library\nthe problem is not installed libcurl4-openssl-dev\n#apt-get install libcurl4-openssl-dev\n \n4 configure: error : Not found NET-SNMP library\n#apt-get install libsnmp-dev\n#apt-get install snmp  \n```\n#### CentOS\n在CentOS系统中，安装zabbix进行configure时会遇到以下4个主要问题\n```\n./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl\n \n1 configure: error: MySQL library not found\nthe problem is not installed mysql-devel\n#yum install mysql-devel\n#yum install mysql-server\n \n2 configure: error: Jabber library not found\nthe problem is not installed jabber lib\n#wget http://iksemel.googlecode.com/files/iksemel-1.4.tar.gz\n下载完成后解压、配置、安装：\ntar zxvf iksemel-1.4.tar.gz\ncd iksemel-1.4\nconfigure\nmake\nmake install\n \n之后对zabbix进行configure还是会遇到这个问题，那么将jabber目录指定即可：#./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber=/usr/local/ --with-libcurl\n \n3 configure: error: Not found curl Library\n#yum install curl-devel (此项未经测试)\n \n4 configure: error : Not found NET-SNMP library\nyum install net-snmp-devel\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/yw-zabbix.md","raw":"---\ntitle: 运维 Centos，Ubuntu下安装zabbix遇到的问题\ndate: 2017-03-06 22:15:20\ntags:\n  - Zabbix\ncategories:\n  - 运维\n---\n\n#### Ubuntu\n在Ubuntu系统中，安装zabbix进行configure时会遇到以下4个主要问题\n```\n./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl\n \n1 configure: error: MySQL library not found\nthe problem is not installed mysql-devel\n#apt-get install libghc6-hsql-mysql-dev (ubuntu )\n \n2 configure: error: Jabber library not found\nthe problem is not installed jabber lib\n#apt-get install libphp-jabber\n#apt-get install libnet-jabber-loudmouth-perl\n#apt-get install jabber-dev\n#apt-get install libiksemel-dev (* this packet important)\n \n3 configure: error: Not found curl Library\nthe problem is not installed libcurl4-openssl-dev\n#apt-get install libcurl4-openssl-dev\n \n4 configure: error : Not found NET-SNMP library\n#apt-get install libsnmp-dev\n#apt-get install snmp  \n```\n#### CentOS\n在CentOS系统中，安装zabbix进行configure时会遇到以下4个主要问题\n```\n./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl\n \n1 configure: error: MySQL library not found\nthe problem is not installed mysql-devel\n#yum install mysql-devel\n#yum install mysql-server\n \n2 configure: error: Jabber library not found\nthe problem is not installed jabber lib\n#wget http://iksemel.googlecode.com/files/iksemel-1.4.tar.gz\n下载完成后解压、配置、安装：\ntar zxvf iksemel-1.4.tar.gz\ncd iksemel-1.4\nconfigure\nmake\nmake install\n \n之后对zabbix进行configure还是会遇到这个问题，那么将jabber目录指定即可：#./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber=/usr/local/ --with-libcurl\n \n3 configure: error: Not found curl Library\n#yum install curl-devel (此项未经测试)\n \n4 configure: error : Not found NET-SNMP library\nyum install net-snmp-devel\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"yw-zabbix","published":1,"updated":"2019-07-04T23:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyl5j6040089ct8ujldlaq52","content":"<h4 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><p>在Ubuntu系统中，安装zabbix进行configure时会遇到以下4个主要问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl</div><div class=\"line\"> </div><div class=\"line\">1 configure: error: MySQL library not found</div><div class=\"line\">the problem is not installed mysql-devel</div><div class=\"line\">#apt-get install libghc6-hsql-mysql-dev (ubuntu )</div><div class=\"line\"> </div><div class=\"line\">2 configure: error: Jabber library not found</div><div class=\"line\">the problem is not installed jabber lib</div><div class=\"line\">#apt-get install libphp-jabber</div><div class=\"line\">#apt-get install libnet-jabber-loudmouth-perl</div><div class=\"line\">#apt-get install jabber-dev</div><div class=\"line\">#apt-get install libiksemel-dev (* this packet important)</div><div class=\"line\"> </div><div class=\"line\">3 configure: error: Not found curl Library</div><div class=\"line\">the problem is not installed libcurl4-openssl-dev</div><div class=\"line\">#apt-get install libcurl4-openssl-dev</div><div class=\"line\"> </div><div class=\"line\">4 configure: error : Not found NET-SNMP library</div><div class=\"line\">#apt-get install libsnmp-dev</div><div class=\"line\">#apt-get install snmp</div></pre></td></tr></table></figure></p>\n<h4 id=\"CentOS\"><a href=\"#CentOS\" class=\"headerlink\" title=\"CentOS\"></a>CentOS</h4><p>在CentOS系统中，安装zabbix进行configure时会遇到以下4个主要问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl</div><div class=\"line\"> </div><div class=\"line\">1 configure: error: MySQL library not found</div><div class=\"line\">the problem is not installed mysql-devel</div><div class=\"line\">#yum install mysql-devel</div><div class=\"line\">#yum install mysql-server</div><div class=\"line\"> </div><div class=\"line\">2 configure: error: Jabber library not found</div><div class=\"line\">the problem is not installed jabber lib</div><div class=\"line\">#wget http://iksemel.googlecode.com/files/iksemel-1.4.tar.gz</div><div class=\"line\">下载完成后解压、配置、安装：</div><div class=\"line\">tar zxvf iksemel-1.4.tar.gz</div><div class=\"line\">cd iksemel-1.4</div><div class=\"line\">configure</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\"> </div><div class=\"line\">之后对zabbix进行configure还是会遇到这个问题，那么将jabber目录指定即可：#./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber=/usr/local/ --with-libcurl</div><div class=\"line\"> </div><div class=\"line\">3 configure: error: Not found curl Library</div><div class=\"line\">#yum install curl-devel (此项未经测试)</div><div class=\"line\"> </div><div class=\"line\">4 configure: error : Not found NET-SNMP library</div><div class=\"line\">yum install net-snmp-devel</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><p>在Ubuntu系统中，安装zabbix进行configure时会遇到以下4个主要问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl</div><div class=\"line\"> </div><div class=\"line\">1 configure: error: MySQL library not found</div><div class=\"line\">the problem is not installed mysql-devel</div><div class=\"line\">#apt-get install libghc6-hsql-mysql-dev (ubuntu )</div><div class=\"line\"> </div><div class=\"line\">2 configure: error: Jabber library not found</div><div class=\"line\">the problem is not installed jabber lib</div><div class=\"line\">#apt-get install libphp-jabber</div><div class=\"line\">#apt-get install libnet-jabber-loudmouth-perl</div><div class=\"line\">#apt-get install jabber-dev</div><div class=\"line\">#apt-get install libiksemel-dev (* this packet important)</div><div class=\"line\"> </div><div class=\"line\">3 configure: error: Not found curl Library</div><div class=\"line\">the problem is not installed libcurl4-openssl-dev</div><div class=\"line\">#apt-get install libcurl4-openssl-dev</div><div class=\"line\"> </div><div class=\"line\">4 configure: error : Not found NET-SNMP library</div><div class=\"line\">#apt-get install libsnmp-dev</div><div class=\"line\">#apt-get install snmp</div></pre></td></tr></table></figure></p>\n<h4 id=\"CentOS\"><a href=\"#CentOS\" class=\"headerlink\" title=\"CentOS\"></a>CentOS</h4><p>在CentOS系统中，安装zabbix进行configure时会遇到以下4个主要问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber --with-libcurl</div><div class=\"line\"> </div><div class=\"line\">1 configure: error: MySQL library not found</div><div class=\"line\">the problem is not installed mysql-devel</div><div class=\"line\">#yum install mysql-devel</div><div class=\"line\">#yum install mysql-server</div><div class=\"line\"> </div><div class=\"line\">2 configure: error: Jabber library not found</div><div class=\"line\">the problem is not installed jabber lib</div><div class=\"line\">#wget http://iksemel.googlecode.com/files/iksemel-1.4.tar.gz</div><div class=\"line\">下载完成后解压、配置、安装：</div><div class=\"line\">tar zxvf iksemel-1.4.tar.gz</div><div class=\"line\">cd iksemel-1.4</div><div class=\"line\">configure</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\"> </div><div class=\"line\">之后对zabbix进行configure还是会遇到这个问题，那么将jabber目录指定即可：#./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber=/usr/local/ --with-libcurl</div><div class=\"line\"> </div><div class=\"line\">3 configure: error: Not found curl Library</div><div class=\"line\">#yum install curl-devel (此项未经测试)</div><div class=\"line\"> </div><div class=\"line\">4 configure: error : Not found NET-SNMP library</div><div class=\"line\">yum install net-snmp-devel</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyl5j5to0001ct8upqghmr36","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5uk000dct8uuvy94que"},{"post_id":"cjyl5j5tx0003ct8ufgbyv2zw","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5ur000jct8up1sn9891"},{"post_id":"cjyl5j5u50006ct8u31dql2rr","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5uw000pct8uoocx220y"},{"post_id":"cjyl5j5u80007ct8uw6hsyfiw","category_id":"cjyl5j5ut000lct8uw8tniq3l","_id":"cjyl5j5v7000wct8umul4busq"},{"post_id":"cjyl5j5ua0008ct8u4irucbzq","category_id":"cjyl5j5ux000rct8ulao3iaky","_id":"cjyl5j5vc0012ct8uvk5wukbs"},{"post_id":"cjyl5j5v9000zct8u30iqr30k","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5ve0016ct8uhwvykesr"},{"post_id":"cjyl5j5uh000cct8u2gluozuq","category_id":"cjyl5j5ut000lct8uw8tniq3l","_id":"cjyl5j5vg001act8uydhqbqhu"},{"post_id":"cjyl5j5vb0011ct8uyahutxay","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5vj001dct8u7vvfedpo"},{"post_id":"cjyl5j5vc0014ct8uwyk6kzmd","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5vm001fct8ualc23a2w"},{"post_id":"cjyl5j5ul000ect8ubjcrjqad","category_id":"cjyl5j5ux000rct8ulao3iaky","_id":"cjyl5j5vp001jct8uwe3b34cs"},{"post_id":"cjyl5j5ve0018ct8umtgs15fi","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5vr001mct8utdhb83nl"},{"post_id":"cjyl5j5vg001bct8ul7r9b7qx","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5vu001qct8ummy3mqpo"},{"post_id":"cjyl5j5uq000ict8ugfp9b0iz","category_id":"cjyl5j5vf0019ct8uf86lu2bl","_id":"cjyl5j5vw001uct8u5vshqwgf"},{"post_id":"cjyl5j5vn001hct8uenj1rb1c","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5vy001xct8u89ciwfnf"},{"post_id":"cjyl5j5ur000kct8ulnlkh0f9","category_id":"cjyl5j5vf0019ct8uf86lu2bl","_id":"cjyl5j5w00021ct8udjs7i4jj"},{"post_id":"cjyl5j5vp001kct8u9c3iitao","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5w20024ct8umt92k54g"},{"post_id":"cjyl5j5uu000nct8u4g1zibph","category_id":"cjyl5j5vf0019ct8uf86lu2bl","_id":"cjyl5j5w50028ct8urjb7fwdm"},{"post_id":"cjyl5j5uw000qct8uopfexg3s","category_id":"cjyl5j5vf0019ct8uf86lu2bl","_id":"cjyl5j5w6002bct8ubqu3kqzc"},{"post_id":"cjyl5j5v0000tct8uhpn57n2s","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5w8002fct8uz3pkf24e"},{"post_id":"cjyl5j5v3000vct8uyi1uiy1h","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5wf002kct8u1ewhb3nu"},{"post_id":"cjyl5j5vj001ect8udc28rnc6","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5wk002qct8uft87h82w"},{"post_id":"cjyl5j5wi002oct8uo38ezfwf","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5wn002vct8uhl416sq0"},{"post_id":"cjyl5j5vs001oct8un4h6zt13","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5wp002yct8uf7ueyz7b"},{"post_id":"cjyl5j5wk002rct8u9vz49cpo","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5wq0030ct8ugtfnwadv"},{"post_id":"cjyl5j5vu001sct8umk4rb88x","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5ws0035ct8utsst79i1"},{"post_id":"cjyl5j5vw001wct8uv38hxwyl","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5wu0039ct8uq1fn1xpo"},{"post_id":"cjyl5j5ws0036ct8uofae1lsx","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5ww003fct8uuca56r1y"},{"post_id":"cjyl5j5vz001zct8u9rf1b1f7","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5wz003jct8uq7hdxzvi"},{"post_id":"cjyl5j5wu0038ct8uw9lk2z0a","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5x1003mct8uiq8cbhzg"},{"post_id":"cjyl5j5w10023ct8uin7wgbzj","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5x6003qct8uqvalwi6e"},{"post_id":"cjyl5j5wx003gct8udgz1hu4u","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5xa003tct8uu69ef8bx"},{"post_id":"cjyl5j5wz003kct8updxmhu6v","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5xc003wct8u6r4hch87"},{"post_id":"cjyl5j5w20026ct8ucjb5wsnv","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5xf0040ct8uo3stss36"},{"post_id":"cjyl5j5x7003rct8uhgfa2l4p","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5xh0043ct8ux4b4yb35"},{"post_id":"cjyl5j5w50029ct8uvly3ksbu","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5xj0046ct8uhqyflwnv"},{"post_id":"cjyl5j5xa003uct8uucqn0sl4","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5xl0049ct8ugebkoucr"},{"post_id":"cjyl5j5xd003yct8uck042t7u","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5xn004cct8ur6twrek2"},{"post_id":"cjyl5j5w7002dct8u1y493hzg","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5xo004gct8ubqv7247p"},{"post_id":"cjyl5j5xf0041ct8uqxruez48","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5xs004kct8uxgbe8slc"},{"post_id":"cjyl5j5xh0044ct8ui9tiembb","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5xu004oct8u7luqalpv"},{"post_id":"cjyl5j5w8002gct8uosnr1mpc","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5xv004qct8ueyhckp6z"},{"post_id":"cjyl5j5xj0047ct8ufg9iwwg3","category_id":"cjyl5j5wg002nct8ufbwgt07d","_id":"cjyl5j5xx004uct8u7wkxca37"},{"post_id":"cjyl5j5xl004act8ubvio9v00","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5xy004xct8uw8510722"},{"post_id":"cjyl5j5wd002ict8uedd69nbd","category_id":"cjyl5j5xl0048ct8uobmdekp8","_id":"cjyl5j5y00050ct8uok6su0xj"},{"post_id":"cjyl5j5xn004dct8u5quvl9eo","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5y20054ct8u8e54puht"},{"post_id":"cjyl5j5xq004hct8uaxkdiskj","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5y40057ct8um0oxk22m"},{"post_id":"cjyl5j5wf002mct8ujste0swe","category_id":"cjyl5j5xl0048ct8uobmdekp8","_id":"cjyl5j5y7005bct8uvgnhfrh0"},{"post_id":"cjyl5j5xs004lct8u3c0ejuuf","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5yi005fct8uffludgob"},{"post_id":"cjyl5j5xu004pct8uubms3isx","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5yl005jct8upawd79dl"},{"post_id":"cjyl5j5wm002tct8uzea0ut4u","category_id":"cjyl5j5xu004nct8u4akxah62","_id":"cjyl5j5yn005lct8u1pum2rs7"},{"post_id":"cjyl5j5xw004sct8uvm40pk93","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5yq005qct8u8k19f5xf"},{"post_id":"cjyl5j5xx004wct8uz4bd9yhs","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5ys005sct8utlnyi1ba"},{"post_id":"cjyl5j5wo002wct8uhrumgqr3","category_id":"cjyl5j5xl0048ct8uobmdekp8","_id":"cjyl5j5yu005wct8uqq21b800"},{"post_id":"cjyl5j5y10053ct8uiudkzdy0","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5yw005zct8u3au75pph"},{"post_id":"cjyl5j5wp002zct8unjsqi1er","category_id":"cjyl5j5xu004nct8u4akxah62","_id":"cjyl5j5yx0062ct8ucryu8e44"},{"post_id":"cjyl5j5y20055ct8urzwp0asv","category_id":"cjyl5j5ux000rct8ulao3iaky","_id":"cjyl5j5yz0065ct8ul75re3zl"},{"post_id":"cjyl5j5y50059ct8upmoap2ee","category_id":"cjyl5j5ux000rct8ulao3iaky","_id":"cjyl5j5z10068ct8ugulp5ifb"},{"post_id":"cjyl5j5wr0032ct8utor161kf","category_id":"cjyl5j5xu004nct8u4akxah62","_id":"cjyl5j5z4006bct8uxe567v77"},{"post_id":"cjyl5j5y7005cct8u6157ada2","category_id":"cjyl5j5ux000rct8ulao3iaky","_id":"cjyl5j5z5006dct8ufw6ip6pc"},{"post_id":"cjyl5j5yk005hct8ubr95hbs9","category_id":"cjyl5j5ut000lct8uw8tniq3l","_id":"cjyl5j5z6006gct8u5qzt1a6z"},{"post_id":"cjyl5j5wv003dct8usv19jepa","category_id":"cjyl5j5xu004nct8u4akxah62","_id":"cjyl5j5z7006ict8uwji3xj3y"},{"post_id":"cjyl5j5yl005kct8uc4vts0lg","category_id":"cjyl5j5ut000lct8uw8tniq3l","_id":"cjyl5j5z9006lct8ueyy475qp"},{"post_id":"cjyl5j5yo005oct8ulu3wppv9","category_id":"cjyl5j5ut000lct8uw8tniq3l","_id":"cjyl5j5za006oct8uej4x33wj"},{"post_id":"cjyl5j5yq005rct8um80u7uoe","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5zb006sct8u0teq5722"},{"post_id":"cjyl5j5x2003nct8uph6rbjlq","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j5ze006vct8ugff1593m"},{"post_id":"cjyl5j5ys005tct8u8d2tdioj","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5zf006yct8u5llkzrqc"},{"post_id":"cjyl5j5yu005yct8uje38l86w","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zh0071ct8ue4d3iwuk"},{"post_id":"cjyl5j5xz004yct8ugqbao644","category_id":"cjyl5j5yu005uct8usey3qss5","_id":"cjyl5j5zi0073ct8ujw0uu4hk"},{"post_id":"cjyl5j5yw0060ct8u5l7nnalp","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zj0077ct8uty5cf58z"},{"post_id":"cjyl5j5yy0063ct8u26uzfd9a","category_id":"cjyl5j5vf0019ct8uf86lu2bl","_id":"cjyl5j5zk0079ct8uwk645uut"},{"post_id":"cjyl5j5yz0066ct8u9b6bjun9","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zm007cct8u1yustacz"},{"post_id":"cjyl5j5z20069ct8uu710fw38","category_id":"cjyl5j5vf0019ct8uf86lu2bl","_id":"cjyl5j5zo007fct8u241hm4xz"},{"post_id":"cjyl5j5z4006cct8u8n4jmi7t","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zq007ict8uquy2pgus"},{"post_id":"cjyl5j5z5006fct8u6qvmqomj","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zr007kct8uuwko4xly"},{"post_id":"cjyl5j5z6006hct8u45719pfv","category_id":"cjyl5j5u00004ct8u315lonl0","_id":"cjyl5j5zs007nct8ugkhohyt2"},{"post_id":"cjyl5j5z7006jct8u46ot8d51","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zu007qct8ua20vds5b"},{"post_id":"cjyl5j5z9006nct8u3qip6nih","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zv007tct8uq6zo58l5"},{"post_id":"cjyl5j5za006qct8u3616xqwq","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zx007xct8uz0rs211j"},{"post_id":"cjyl5j5zc006tct8ue2epknxb","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zy007zct8uj4o8yzb1"},{"post_id":"cjyl5j5ze006wct8ubjsi71g7","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j5zz0082ct8uhjqlmbt1"},{"post_id":"cjyl5j5zf006zct8usvltfgdf","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j6000085ct8uyltn078t"},{"post_id":"cjyl5j5zh0072ct8ueih3znll","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j6040088ct8urbdd7fjb"},{"post_id":"cjyl5j5zi0075ct8usxq3fu2a","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j605008bct8uzog0ja7o"},{"post_id":"cjyl5j5zj0078ct8u88rdvc41","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j606008dct8uuwqya04m"},{"post_id":"cjyl5j5zk007act8u9y7b83es","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j606008fct8uo34pxirv"},{"post_id":"cjyl5j5zm007ect8umzuesjs6","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j606008gct8uzi86pf2j"},{"post_id":"cjyl5j5zo007gct8uabf04dk4","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j606008jct8u1a4hk6ml"},{"post_id":"cjyl5j5zq007jct8uhtjbyjsw","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j606008kct8ug33n61ui"},{"post_id":"cjyl5j5zr007lct8ug2hohwew","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j607008mct8u26eh9wr7"},{"post_id":"cjyl5j5zt007oct8um9m16gr9","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j607008oct8uoij6wvcg"},{"post_id":"cjyl5j5zu007rct8u5f64dpvi","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j607008qct8ucvugqvhh"},{"post_id":"cjyl5j5zv007vct8ubebm8ccz","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j608008sct8ugiw9wfmw"},{"post_id":"cjyl5j5zx007yct8u0s6axk2k","category_id":"cjyl5j5yo005mct8ucqh5smag","_id":"cjyl5j608008uct8u7zvg3yer"},{"post_id":"cjyl5j5zy0080ct8ubv5zfumh","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j609008wct8uc04o65ii"},{"post_id":"cjyl5j5zz0084ct8ubicnnoqe","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j609008xct8uj47p6244"},{"post_id":"cjyl5j6010086ct8us0hjbzc7","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j60a0090ct8un0vxwnvl"},{"post_id":"cjyl5j6040089ct8ujldlaq52","category_id":"cjyl5j5w10022ct8ulhdrxzsn","_id":"cjyl5j60a0091ct8ui2lea2d5"}],"PostTag":[{"post_id":"cjyl5j5to0001ct8upqghmr36","tag_id":"cjyl5j5u40005ct8u7fmcnemj","_id":"cjyl5j5uh000bct8u59xxftc7"},{"post_id":"cjyl5j5tx0003ct8ufgbyv2zw","tag_id":"cjyl5j5u40005ct8u7fmcnemj","_id":"cjyl5j5up000hct8u6jp00moj"},{"post_id":"cjyl5j5u50006ct8u31dql2rr","tag_id":"cjyl5j5uo000gct8uya7eznd1","_id":"cjyl5j5uv000oct8ul7aa65yv"},{"post_id":"cjyl5j5u80007ct8uw6hsyfiw","tag_id":"cjyl5j5ut000mct8utprfer8x","_id":"cjyl5j5v3000uct8uxfc91njd"},{"post_id":"cjyl5j5ua0008ct8u4irucbzq","tag_id":"cjyl5j5uz000sct8uxups8wx3","_id":"cjyl5j5va0010ct8uwhumrvxl"},{"post_id":"cjyl5j5uh000cct8u2gluozuq","tag_id":"cjyl5j5v8000yct8ujv0nrucg","_id":"cjyl5j5ve0017ct8uno50xytf"},{"post_id":"cjyl5j5ul000ect8ubjcrjqad","tag_id":"cjyl5j5vd0015ct8u4iqy704o","_id":"cjyl5j5vr001lct8uwi3dfion"},{"post_id":"cjyl5j5ul000ect8ubjcrjqad","tag_id":"cjyl5j5vi001cct8uxdr2vrx1","_id":"cjyl5j5vt001pct8u7yc1rbcq"},{"post_id":"cjyl5j5uq000ict8ugfp9b0iz","tag_id":"cjyl5j5vo001ict8uegr4esku","_id":"cjyl5j5vv001tct8uqpwrf34p"},{"post_id":"cjyl5j5ur000kct8ulnlkh0f9","tag_id":"cjyl5j5vo001ict8uegr4esku","_id":"cjyl5j5w00020ct8usvhzwgwh"},{"post_id":"cjyl5j5uu000nct8u4g1zibph","tag_id":"cjyl5j5vo001ict8uegr4esku","_id":"cjyl5j5w50027ct8upprzn8n5"},{"post_id":"cjyl5j5uw000qct8uopfexg3s","tag_id":"cjyl5j5vo001ict8uegr4esku","_id":"cjyl5j5w8002ect8u8jk6b5oq"},{"post_id":"cjyl5j5v0000tct8uhpn57n2s","tag_id":"cjyl5j5w6002cct8u7r9w2tp0","_id":"cjyl5j5wf002lct8uf8ao33lc"},{"post_id":"cjyl5j5v3000vct8uyi1uiy1h","tag_id":"cjyl5j5we002jct8un6il0rfq","_id":"cjyl5j5ws0034ct8uspr8tqja"},{"post_id":"cjyl5j5v3000vct8uyi1uiy1h","tag_id":"cjyl5j5wk002pct8uhvnksehy","_id":"cjyl5j5wt0037ct8uc0nxch7f"},{"post_id":"cjyl5j5v3000vct8uyi1uiy1h","tag_id":"cjyl5j5wn002uct8u0cvuhwj7","_id":"cjyl5j5wv003cct8uh0gpwmmw"},{"post_id":"cjyl5j5v9000zct8u30iqr30k","tag_id":"cjyl5j5wr0031ct8uztc10iab","_id":"cjyl5j5ww003ect8uhl15qiiz"},{"post_id":"cjyl5j5vb0011ct8uyahutxay","tag_id":"cjyl5j5wv003act8u3ymt8msp","_id":"cjyl5j5x0003lct8ugsxou5z4"},{"post_id":"cjyl5j5vc0014ct8uwyk6kzmd","tag_id":"cjyl5j5wy003ict8u1ospsyt0","_id":"cjyl5j5xa003sct8uou6bbusx"},{"post_id":"cjyl5j5ve0018ct8umtgs15fi","tag_id":"cjyl5j5x6003pct8ug9npmna1","_id":"cjyl5j5xf003zct8u2kqzin1r"},{"post_id":"cjyl5j5vg001bct8ul7r9b7qx","tag_id":"cjyl5j5xc003xct8u0uljgxrb","_id":"cjyl5j5xo004ect8ulh5jn69k"},{"post_id":"cjyl5j5vg001bct8ul7r9b7qx","tag_id":"cjyl5j5xi0045ct8uj1kqkr4u","_id":"cjyl5j5xr004ict8ujthi7ut1"},{"post_id":"cjyl5j5vj001ect8udc28rnc6","tag_id":"cjyl5j5xm004bct8uiuohbljq","_id":"cjyl5j5xu004mct8u08r114o5"},{"post_id":"cjyl5j5vn001hct8uenj1rb1c","tag_id":"cjyl5j5xs004jct8uko7hiy0u","_id":"cjyl5j5xx004tct8ut9j1cs49"},{"post_id":"cjyl5j5vp001kct8u9c3iitao","tag_id":"cjyl5j5xv004rct8usxcqvfcz","_id":"cjyl5j5y10052ct8unmspx271"},{"post_id":"cjyl5j5vs001oct8un4h6zt13","tag_id":"cjyl5j5y0004zct8uhfx80o7d","_id":"cjyl5j5y6005act8ullhmyxnf"},{"post_id":"cjyl5j5y50059ct8upmoap2ee","tag_id":"cjyl5j5vd0015ct8u4iqy704o","_id":"cjyl5j5yi005ect8uuyx7mifk"},{"post_id":"cjyl5j5vu001sct8umk4rb88x","tag_id":"cjyl5j5y30056ct8uhs50cm9f","_id":"cjyl5j5yl005ict8ute12sjma"},{"post_id":"cjyl5j5vw001wct8uv38hxwyl","tag_id":"cjyl5j5yi005dct8ueg8zisdk","_id":"cjyl5j5yp005pct8ugr43u335"},{"post_id":"cjyl5j5vz001zct8u9rf1b1f7","tag_id":"cjyl5j5yo005nct8uy4pdzor2","_id":"cjyl5j5yu005xct8uo5ebsqik"},{"post_id":"cjyl5j5w10023ct8uin7wgbzj","tag_id":"cjyl5j5yu005vct8unfhlyj7k","_id":"cjyl5j5yy0064ct8ummzmh1ju"},{"post_id":"cjyl5j5w20026ct8ucjb5wsnv","tag_id":"cjyl5j5yx0061ct8u8bs91dc5","_id":"cjyl5j5z3006act8u1tjv75cg"},{"post_id":"cjyl5j5w50029ct8uvly3ksbu","tag_id":"cjyl5j5z10067ct8uvxk49rte","_id":"cjyl5j5z9006mct8u0bv58o3e"},{"post_id":"cjyl5j5w50029ct8uvly3ksbu","tag_id":"cjyl5j5z5006ect8u6ll8q2sk","_id":"cjyl5j5za006pct8urrfkh8tx"},{"post_id":"cjyl5j5w7002dct8u1y493hzg","tag_id":"cjyl5j5z8006kct8u2q8h9xvy","_id":"cjyl5j5zd006uct8us8t10apb"},{"post_id":"cjyl5j5w8002gct8uosnr1mpc","tag_id":"cjyl5j5zb006rct8ubf3yoep7","_id":"cjyl5j5zh0070ct8unh7fcf48"},{"post_id":"cjyl5j5wd002ict8uedd69nbd","tag_id":"cjyl5j5zf006xct8u86dehpu0","_id":"cjyl5j5zj0076ct8ur29iv3n8"},{"post_id":"cjyl5j5wf002mct8ujste0swe","tag_id":"cjyl5j5zi0074ct8u6bjtczi9","_id":"cjyl5j5zm007dct8u4h0z4awo"},{"post_id":"cjyl5j5wi002oct8uo38ezfwf","tag_id":"cjyl5j5zl007bct8ua8zcw37z","_id":"cjyl5j5zu007pct8uauerc15d"},{"post_id":"cjyl5j5wi002oct8uo38ezfwf","tag_id":"cjyl5j5zp007hct8u60qd8s2u","_id":"cjyl5j5zv007sct8uz53pqye7"},{"post_id":"cjyl5j5wk002rct8u9vz49cpo","tag_id":"cjyl5j5zs007mct8uuzu9rsr1","_id":"cjyl5j5zw007wct8usy1wap0n"},{"post_id":"cjyl5j5wm002tct8uzea0ut4u","tag_id":"cjyl5j5zv007uct8utn9u47jy","_id":"cjyl5j5zz0083ct8uwpv38odg"},{"post_id":"cjyl5j5wo002wct8uhrumgqr3","tag_id":"cjyl5j5zz0081ct8u9m3z9jzz","_id":"cjyl5j605008act8ujbdcr0gv"},{"post_id":"cjyl5j5wp002zct8unjsqi1er","tag_id":"cjyl5j6030087ct8uori881mw","_id":"cjyl5j606008ect8ueu4bkcxv"},{"post_id":"cjyl5j5wr0032ct8utor161kf","tag_id":"cjyl5j605008cct8uexqtweht","_id":"cjyl5j606008ict8u32w1z6kz"},{"post_id":"cjyl5j5ws0036ct8uofae1lsx","tag_id":"cjyl5j606008hct8udcuzj855","_id":"cjyl5j607008nct8udj6vakpb"},{"post_id":"cjyl5j5wu0038ct8uw9lk2z0a","tag_id":"cjyl5j607008lct8ufql4tler","_id":"cjyl5j608008rct8ubnzb2nks"},{"post_id":"cjyl5j5wv003dct8usv19jepa","tag_id":"cjyl5j607008pct8uvjfg7dek","_id":"cjyl5j609008vct8upd2o10sh"},{"post_id":"cjyl5j5wx003gct8udgz1hu4u","tag_id":"cjyl5j608008tct8u0wkqra8v","_id":"cjyl5j60a008zct8ucg2cayw4"},{"post_id":"cjyl5j5wz003kct8updxmhu6v","tag_id":"cjyl5j609008yct8uczw84hoj","_id":"cjyl5j60d0093ct8ucdicd98r"},{"post_id":"cjyl5j5x2003nct8uph6rbjlq","tag_id":"cjyl5j60a0092ct8u2c0yxdb4","_id":"cjyl5j60e0095ct8u1i1pug1q"},{"post_id":"cjyl5j5x7003rct8uhgfa2l4p","tag_id":"cjyl5j5yu005vct8unfhlyj7k","_id":"cjyl5j60e0097ct8u9hkv0pet"},{"post_id":"cjyl5j5xa003uct8uucqn0sl4","tag_id":"cjyl5j60e0096ct8ud7nvpy31","_id":"cjyl5j60f0099ct8u2m2qi59j"},{"post_id":"cjyl5j5xd003yct8uck042t7u","tag_id":"cjyl5j60e0098ct8uig7w3yq3","_id":"cjyl5j60f009bct8uognbc9a6"},{"post_id":"cjyl5j5xf0041ct8uqxruez48","tag_id":"cjyl5j5xs004jct8uko7hiy0u","_id":"cjyl5j60f009dct8uvpu1br1p"},{"post_id":"cjyl5j5xh0044ct8ui9tiembb","tag_id":"cjyl5j60f009cct8umn6bubfh","_id":"cjyl5j60g009fct8uq4ofhbv1"},{"post_id":"cjyl5j5xj0047ct8ufg9iwwg3","tag_id":"cjyl5j60f009ect8uw6phm2tw","_id":"cjyl5j60g009hct8umfny34c8"},{"post_id":"cjyl5j5xl004act8ubvio9v00","tag_id":"cjyl5j60g009gct8ubpmfq7qc","_id":"cjyl5j60g009jct8ups2749t4"},{"post_id":"cjyl5j5xn004dct8u5quvl9eo","tag_id":"cjyl5j60g009ict8uue3w7rfc","_id":"cjyl5j60h009lct8uozf63fmz"},{"post_id":"cjyl5j5xq004hct8uaxkdiskj","tag_id":"cjyl5j60g009kct8us0ksivk1","_id":"cjyl5j60h009oct8u81gl6i5m"},{"post_id":"cjyl5j5xq004hct8uaxkdiskj","tag_id":"cjyl5j60h009mct8uqk0cvmf8","_id":"cjyl5j60h009pct8uz2qo2xle"},{"post_id":"cjyl5j5xs004lct8u3c0ejuuf","tag_id":"cjyl5j60h009nct8udkf4uq1l","_id":"cjyl5j60h009rct8u0st76rll"},{"post_id":"cjyl5j5xu004pct8uubms3isx","tag_id":"cjyl5j60h009qct8u0zk52tbf","_id":"cjyl5j60i009tct8uqj5m91gl"},{"post_id":"cjyl5j5xw004sct8uvm40pk93","tag_id":"cjyl5j60i009sct8um0ho7mrg","_id":"cjyl5j60i009vct8u422p83u6"},{"post_id":"cjyl5j5xx004wct8uz4bd9yhs","tag_id":"cjyl5j60i009uct8uqzzqrl9a","_id":"cjyl5j60i009xct8u944u23ag"},{"post_id":"cjyl5j5xz004yct8ugqbao644","tag_id":"cjyl5j60i009wct8uut0of24p","_id":"cjyl5j60j009zct8uvapbxvyt"},{"post_id":"cjyl5j5y10053ct8uiudkzdy0","tag_id":"cjyl5j60i009sct8um0ho7mrg","_id":"cjyl5j60j00a1ct8u3er30iue"},{"post_id":"cjyl5j5y20055ct8urzwp0asv","tag_id":"cjyl5j5z10067ct8uvxk49rte","_id":"cjyl5j60k00a4ct8uvwvbdpnf"},{"post_id":"cjyl5j5y20055ct8urzwp0asv","tag_id":"cjyl5j60j00a2ct8ur3tcuca1","_id":"cjyl5j60k00a5ct8udztcwbs1"},{"post_id":"cjyl5j5y7005cct8u6157ada2","tag_id":"cjyl5j60k00a3ct8uaohybuq5","_id":"cjyl5j60l00a7ct8u31nypbf8"},{"post_id":"cjyl5j5yk005hct8ubr95hbs9","tag_id":"cjyl5j60l00a6ct8u2vdyrrbu","_id":"cjyl5j60m00a9ct8u6ubmjsdt"},{"post_id":"cjyl5j5yl005kct8uc4vts0lg","tag_id":"cjyl5j60g009kct8us0ksivk1","_id":"cjyl5j60n00acct8u1k76qzc8"},{"post_id":"cjyl5j5yl005kct8uc4vts0lg","tag_id":"cjyl5j60h009mct8uqk0cvmf8","_id":"cjyl5j60n00adct8ul4l5vuhi"},{"post_id":"cjyl5j5yo005oct8ulu3wppv9","tag_id":"cjyl5j60h009mct8uqk0cvmf8","_id":"cjyl5j60o00afct8uly9qvxhi"},{"post_id":"cjyl5j5yq005rct8um80u7uoe","tag_id":"cjyl5j60n00aect8ucorpp0s4","_id":"cjyl5j60o00ahct8ux9e190w1"},{"post_id":"cjyl5j5ys005tct8u8d2tdioj","tag_id":"cjyl5j60o00agct8uj1hwwlgw","_id":"cjyl5j60o00ajct8u88nwuw4u"},{"post_id":"cjyl5j5yu005yct8uje38l86w","tag_id":"cjyl5j60o00aict8u4iq9dfi4","_id":"cjyl5j60p00anct8uk75kcwl9"},{"post_id":"cjyl5j5yu005yct8uje38l86w","tag_id":"cjyl5j60p00akct8urnlbglf2","_id":"cjyl5j60q00aoct8u8fy5edig"},{"post_id":"cjyl5j5yu005yct8uje38l86w","tag_id":"cjyl5j60p00alct8u7z89jcxv","_id":"cjyl5j60q00aqct8uqkm1se8j"},{"post_id":"cjyl5j5yw0060ct8u5l7nnalp","tag_id":"cjyl5j60p00amct8uikjyg2pt","_id":"cjyl5j60q00arct8uy22svlpd"},{"post_id":"cjyl5j5yy0063ct8u26uzfd9a","tag_id":"cjyl5j60q00apct8ueqyy4p2z","_id":"cjyl5j60r00auct8uoj0nypnj"},{"post_id":"cjyl5j5yy0063ct8u26uzfd9a","tag_id":"cjyl5j60q00asct8ubfrvcduj","_id":"cjyl5j60r00avct8u78oavanf"},{"post_id":"cjyl5j5yz0066ct8u9b6bjun9","tag_id":"cjyl5j60r00atct8u09ldf2i2","_id":"cjyl5j60r00axct8ubv4wwaib"},{"post_id":"cjyl5j5z20069ct8uu710fw38","tag_id":"cjyl5j60r00awct8u9l8lnyfi","_id":"cjyl5j60s00azct8uu786n9pp"},{"post_id":"cjyl5j5z4006cct8u8n4jmi7t","tag_id":"cjyl5j60r00atct8u09ldf2i2","_id":"cjyl5j60s00b1ct8ue0zgf1z2"},{"post_id":"cjyl5j5z5006fct8u6qvmqomj","tag_id":"cjyl5j60s00b0ct8umu4j4z2r","_id":"cjyl5j60t00b3ct8udbqqpwop"},{"post_id":"cjyl5j5z6006hct8u45719pfv","tag_id":"cjyl5j60t00b2ct8ude69ati0","_id":"cjyl5j60t00b6ct8u91w4sbsw"},{"post_id":"cjyl5j5z6006hct8u45719pfv","tag_id":"cjyl5j60t00b4ct8ug4qkbgd7","_id":"cjyl5j60t00b7ct8u873vnlz9"},{"post_id":"cjyl5j5z7006jct8u46ot8d51","tag_id":"cjyl5j60t00b5ct8u29q7mh6s","_id":"cjyl5j60u00b9ct8uae04h13j"},{"post_id":"cjyl5j5z9006nct8u3qip6nih","tag_id":"cjyl5j60u00b8ct8uq6lz5wqm","_id":"cjyl5j60u00bbct8ug4hveu6o"},{"post_id":"cjyl5j5za006qct8u3616xqwq","tag_id":"cjyl5j60r00atct8u09ldf2i2","_id":"cjyl5j60v00bdct8u08qwqw6j"},{"post_id":"cjyl5j5zc006tct8ue2epknxb","tag_id":"cjyl5j60u00bcct8u61vdo2hb","_id":"cjyl5j60v00bfct8uzejnkiy5"},{"post_id":"cjyl5j5ze006wct8ubjsi71g7","tag_id":"cjyl5j60v00bect8u0inimumk","_id":"cjyl5j60v00bhct8uf27c12ks"},{"post_id":"cjyl5j5zf006zct8usvltfgdf","tag_id":"cjyl5j60v00bgct8urjhi3s06","_id":"cjyl5j60w00bjct8u5ymtvog2"},{"post_id":"cjyl5j5zh0072ct8ueih3znll","tag_id":"cjyl5j60w00bict8up4eksyzs","_id":"cjyl5j60w00blct8u58c9cqa6"},{"post_id":"cjyl5j5zi0075ct8usxq3fu2a","tag_id":"cjyl5j60w00bkct8ullmmr0jh","_id":"cjyl5j60x00bnct8ujxrhasz8"},{"post_id":"cjyl5j5zj0078ct8u88rdvc41","tag_id":"cjyl5j60w00bict8up4eksyzs","_id":"cjyl5j60x00bpct8u92ogwvk9"},{"post_id":"cjyl5j5zk007act8u9y7b83es","tag_id":"cjyl5j60w00bict8up4eksyzs","_id":"cjyl5j60y00brct8uljjnuv1s"},{"post_id":"cjyl5j5zm007ect8umzuesjs6","tag_id":"cjyl5j60x00bqct8ubaa1rao2","_id":"cjyl5j60y00btct8uekv5jnr9"},{"post_id":"cjyl5j5zo007gct8uabf04dk4","tag_id":"cjyl5j60y00bsct8upu7rgtdj","_id":"cjyl5j60z00bvct8uu9g6scna"},{"post_id":"cjyl5j5zq007jct8uhtjbyjsw","tag_id":"cjyl5j60y00buct8u1g6pim3j","_id":"cjyl5j60z00bxct8ur1kyuxg0"},{"post_id":"cjyl5j5zr007lct8ug2hohwew","tag_id":"cjyl5j60a0092ct8u2c0yxdb4","_id":"cjyl5j61000bzct8uvge4bm3o"},{"post_id":"cjyl5j5zt007oct8um9m16gr9","tag_id":"cjyl5j60w00bict8up4eksyzs","_id":"cjyl5j61100c1ct8unsdp6b9n"},{"post_id":"cjyl5j5zu007rct8u5f64dpvi","tag_id":"cjyl5j60a0092ct8u2c0yxdb4","_id":"cjyl5j61100c3ct8up19gkgbz"},{"post_id":"cjyl5j5zv007vct8ubebm8ccz","tag_id":"cjyl5j61100c2ct8u5gxujr3o","_id":"cjyl5j61100c5ct8uhk7m55gp"},{"post_id":"cjyl5j5zx007yct8u0s6axk2k","tag_id":"cjyl5j60w00bict8up4eksyzs","_id":"cjyl5j61200c7ct8u9umtuvzl"},{"post_id":"cjyl5j5zy0080ct8ubv5zfumh","tag_id":"cjyl5j61200c6ct8uh2rsw0a4","_id":"cjyl5j61200c9ct8uw1fy3gg9"},{"post_id":"cjyl5j5zz0084ct8ubicnnoqe","tag_id":"cjyl5j61200c8ct8uccbxaku5","_id":"cjyl5j61300cbct8ue8b8g2sx"},{"post_id":"cjyl5j6010086ct8us0hjbzc7","tag_id":"cjyl5j61200cact8uni02cwhs","_id":"cjyl5j61300cdct8u7108hh1q"},{"post_id":"cjyl5j6040089ct8ujldlaq52","tag_id":"cjyl5j61300ccct8u1yfpyyw3","_id":"cjyl5j61300cect8ujxnt6279"}],"Tag":[{"name":"Api","_id":"cjyl5j5u40005ct8u7fmcnemj"},{"name":"ConfigParser","_id":"cjyl5j5uo000gct8uya7eznd1"},{"name":"Itemloaders","_id":"cjyl5j5ut000mct8utprfer8x"},{"name":"Filters","_id":"cjyl5j5uz000sct8uxups8wx3"},{"name":"Selectors","_id":"cjyl5j5v8000yct8ujv0nrucg"},{"name":"DRF","_id":"cjyl5j5vd0015ct8u4iqy704o"},{"name":"Throtting","_id":"cjyl5j5vi001cct8uxdr2vrx1"},{"name":"Angularjs","_id":"cjyl5j5vo001ict8uegr4esku"},{"name":"Ansible","_id":"cjyl5j5w6002cct8u7r9w2tp0"},{"name":"Awk","_id":"cjyl5j5we002jct8un6il0rfq"},{"name":"Sort","_id":"cjyl5j5wk002pct8uhvnksehy"},{"name":"Uniq","_id":"cjyl5j5wn002uct8u0cvuhwj7"},{"name":"Celery","_id":"cjyl5j5wr0031ct8uztc10iab"},{"name":"Class","_id":"cjyl5j5wv003act8u3ymt8msp"},{"name":"Datetime","_id":"cjyl5j5wy003ict8u1ospsyt0"},{"name":"Collections","_id":"cjyl5j5x6003pct8ug9npmna1"},{"name":"Copy","_id":"cjyl5j5xc003xct8u0uljgxrb"},{"name":"Deepcopy","_id":"cjyl5j5xi0045ct8uj1kqkr4u"},{"name":"CPU","_id":"cjyl5j5xm004bct8uiuohbljq"},{"name":"Descriptor","_id":"cjyl5j5xs004jct8uko7hiy0u"},{"name":"Decorator","_id":"cjyl5j5xv004rct8usxcqvfcz"},{"name":"Channels","_id":"cjyl5j5y0004zct8uhfx80o7d"},{"name":"Auth","_id":"cjyl5j5y30056ct8uhs50cm9f"},{"name":"Forms","_id":"cjyl5j5yi005dct8ueg8zisdk"},{"name":"migrate","_id":"cjyl5j5yo005nct8uy4pdzor2"},{"name":"Logging","_id":"cjyl5j5yu005vct8unfhlyj7k"},{"name":"分页","_id":"cjyl5j5yx0061ct8u8bs91dc5"},{"name":"ORM","_id":"cjyl5j5z10067ct8uvxk49rte"},{"name":"Queryset","_id":"cjyl5j5z5006ect8u6ll8q2sk"},{"name":"Models","_id":"cjyl5j5z8006kct8u2q8h9xvy"},{"name":"Signals","_id":"cjyl5j5zb006rct8ubf3yoep7"},{"name":"Docker","_id":"cjyl5j5zf006xct8u86dehpu0"},{"name":"docker-compose","_id":"cjyl5j5zi0074ct8u6bjtczi9"},{"name":"TestCase","_id":"cjyl5j5zl007bct8ua8zcw37z"},{"name":"unittest","_id":"cjyl5j5zp007hct8u60qd8s2u"},{"name":"permisson","_id":"cjyl5j5zs007mct8uuzu9rsr1"},{"name":"Elasticsearch_dsl","_id":"cjyl5j5zv007uct8utn9u47jy"},{"name":"Network","_id":"cjyl5j5zz0081ct8u9m3z9jzz"},{"name":"ELK","_id":"cjyl5j6030087ct8uori881mw"},{"name":"Mongo-connector","_id":"cjyl5j605008cct8uexqtweht"},{"name":"Hexo","_id":"cjyl5j606008hct8udcuzj855"},{"name":"Fabric","_id":"cjyl5j607008lct8ufql4tler"},{"name":"Logstash-input-jdbc","_id":"cjyl5j607008pct8uvjfg7dek"},{"name":"Importlib","_id":"cjyl5j608008tct8u0wkqra8v"},{"name":"Mongo","_id":"cjyl5j609008yct8uczw84hoj"},{"name":"Mysql","_id":"cjyl5j60a0092ct8u2c0yxdb4"},{"name":"Mysqldb","_id":"cjyl5j60e0096ct8ud7nvpy31"},{"name":"asyncio","_id":"cjyl5j60e0098ct8uig7w3yq3"},{"name":"Contextlib","_id":"cjyl5j60f009cct8umn6bubfh"},{"name":"Djcelery","_id":"cjyl5j60f009ect8uw6phm2tw"},{"name":"property","_id":"cjyl5j60g009gct8ubpmfq7qc"},{"name":"class","_id":"cjyl5j60g009ict8uue3w7rfc"},{"name":"Selenium","_id":"cjyl5j60g009kct8us0ksivk1"},{"name":"Scrapy","_id":"cjyl5j60h009mct8uqk0cvmf8"},{"name":"Sqlalchemy","_id":"cjyl5j60h009nct8udkf4uq1l"},{"name":"Iptables","_id":"cjyl5j60h009qct8u0zk52tbf"},{"name":"Redis","_id":"cjyl5j60i009sct8um0ho7mrg"},{"name":"Re","_id":"cjyl5j60i009uct8uqzzqrl9a"},{"name":"RabbitMQ","_id":"cjyl5j60i009wct8uut0of24p"},{"name":"Serializer","_id":"cjyl5j60j00a2ct8ur3tcuca1"},{"name":"ModelSerializer","_id":"cjyl5j60k00a3ct8uaohybuq5"},{"name":"Architecture","_id":"cjyl5j60l00a6ct8u2vdyrrbu"},{"name":"Setuptools","_id":"cjyl5j60n00aect8ucorpp0s4"},{"name":"Threading","_id":"cjyl5j60o00agct8uj1hwwlgw"},{"name":"Vim","_id":"cjyl5j60o00aict8u4iq9dfi4"},{"name":"Pycharm","_id":"cjyl5j60p00akct8urnlbglf2"},{"name":"Items2","_id":"cjyl5j60p00alct8u7z89jcxv"},{"name":"Tmux","_id":"cjyl5j60p00amct8uikjyg2pt"},{"name":"vue","_id":"cjyl5j60q00apct8ueqyy4p2z"},{"name":"echarts","_id":"cjyl5j60q00asct8ubfrvcduj"},{"name":"Airflow","_id":"cjyl5j60r00atct8u09ldf2i2"},{"name":"Vue","_id":"cjyl5j60r00awct8u9l8lnyfi"},{"name":"Apollo","_id":"cjyl5j60s00b0ct8umu4j4z2r"},{"name":"Yeild","_id":"cjyl5j60t00b2ct8ude69ati0"},{"name":"Generator","_id":"cjyl5j60t00b4ct8ug4qkbgd7"},{"name":"chroot","_id":"cjyl5j60t00b5ct8u29q7mh6s"},{"name":"fg","_id":"cjyl5j60u00b8ct8uq6lz5wqm"},{"name":"Git","_id":"cjyl5j60u00bcct8u61vdo2hb"},{"name":"Jenkins","_id":"cjyl5j60v00bect8u0inimumk"},{"name":"count","_id":"cjyl5j60v00bgct8urjhi3s06"},{"name":"Index","_id":"cjyl5j60w00bict8up4eksyzs"},{"name":"Jvm","_id":"cjyl5j60w00bkct8ullmmr0jh"},{"name":"Lock","_id":"cjyl5j60x00bqct8ubaa1rao2"},{"name":"排序","_id":"cjyl5j60y00bsct8upu7rgtdj"},{"name":"binlog","_id":"cjyl5j60y00buct8u1g6pim3j"},{"name":"Transaction","_id":"cjyl5j61100c2ct8u5gxujr3o"},{"name":"sersync","_id":"cjyl5j61200c6ct8uh2rsw0a4"},{"name":"password","_id":"cjyl5j61200c8ct8uccbxaku5"},{"name":"systemd","_id":"cjyl5j61200cact8uni02cwhs"},{"name":"Zabbix","_id":"cjyl5j61300ccct8u1yfpyyw3"}]}}