<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2019-07-27T06:25:38.000Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Airflow动态生成Tasks和dags</title>
    <link href="https://ttxsgoto.github.io/2019/07/28/yw-airflow-dynamic-dags-tasks/"/>
    <id>https://ttxsgoto.github.io/2019/07/28/yw-airflow-dynamic-dags-tasks/</id>
    <published>2019-07-28T08:21:22.000Z</published>
    <updated>2019-07-27T06:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="动态生成task任务"><a href="#动态生成task任务" class="headerlink" title="动态生成task任务"></a>动态生成task任务</h4><p>现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资料后发现主要使用动态生成TaskInstance实例来完成<br>具体说明如下：</p>
<ul>
<li><p>将计算得到值使用Variables变量保存</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow variables --set keyName value</div></pre></td></tr></table></figure>
</li>
<li><p>动态生成TaskInstance实例</p>
</li>
<li>将计算得到的列表遍历task任务</li>
</ul>
<p>实例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> airflow</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> configuration <span class="keyword">as</span> conf</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DagBag, TaskInstance</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG, settings</div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"> </div><div class="line">main_dag_id = <span class="string">'DynamicWorkflow2'</span></div><div class="line"> </div><div class="line">args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'start_date'</span>: airflow.utils.dates.days_ago(<span class="number">2</span>),</div><div class="line">    <span class="string">'provide_context'</span>: <span class="keyword">True</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">dag = DAG(</div><div class="line">    main_dag_id,</div><div class="line">    schedule_interval=<span class="keyword">None</span>,</div><div class="line">    default_args=args)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    dynamicValue = <span class="number">1</span></div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group1"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group1 value is "</span> + str(variableValue))</div><div class="line"> </div><div class="line">    logging.info(<span class="string">"Setting the Airflow Variable DynamicWorkflow_Group1 to "</span> + str(dynamicValue))</div><div class="line">    os.system(<span class="string">'airflow variables --set DynamicWorkflow_Group1 '</span> + str(dynamicValue))</div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group1"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group1 value is "</span> + str(variableValue))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dynamicValue):</div><div class="line">        resetTasksStatus(<span class="string">'firstGroup_'</span> + str(i))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">resetTasksStatus</span><span class="params">(task_id)</span>:</span></div><div class="line">    dag_folder = conf.get(<span class="string">'core'</span>, <span class="string">'DAGS_FOLDER'</span>)</div><div class="line">    dagbag = DagBag(dag_folder)</div><div class="line">    check_dag = dagbag.dags[main_dag_id]</div><div class="line">    session = settings.Session()</div><div class="line">    execution_date = datetime.now()</div><div class="line">    my_task = check_dag.get_task(task_id)</div><div class="line">    ti = TaskInstance(my_task, execution_date)</div><div class="line">    state = ti.current_state()</div><div class="line">    logging.info(<span class="string">"Current state of "</span> + task_id + <span class="string">" is "</span> + str(state))</div><div class="line">    ti.set_state(<span class="keyword">None</span>, session)</div><div class="line">    state = ti.current_state()</div><div class="line">    logging.info(<span class="string">"Updated state of "</span> + task_id + <span class="string">" is "</span> + str(state))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bridge1</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    dynamicValue = <span class="number">2</span></div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group2"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group2 value is "</span> + str(variableValue))</div><div class="line"> </div><div class="line">    logging.info(<span class="string">"Setting the Airflow Variable DynamicWorkflow_Group2 to "</span> + str(dynamicValue))</div><div class="line">    os.system(<span class="string">'airflow variables --set DynamicWorkflow_Group2 '</span> + str(dynamicValue))</div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group2"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group2 value is "</span> + str(variableValue))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dynamicValue):</div><div class="line">        resetTasksStatus(<span class="string">'secondGroup_'</span> + str(i))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bridge2</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    dynamicValue = <span class="number">3</span></div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group3"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group3 value is "</span> + str(variableValue))</div><div class="line"> </div><div class="line">    logging.info(<span class="string">"Setting the Airflow Variable DynamicWorkflow_Group3 to "</span> + str(dynamicValue))</div><div class="line">    os.system(<span class="string">'airflow variables --set DynamicWorkflow_Group3 '</span> + str(dynamicValue))</div><div class="line"> </div><div class="line">    variableValue = Variable.get(<span class="string">"DynamicWorkflow_Group3"</span>)</div><div class="line">    logging.info(<span class="string">"Current DynamicWorkflow_Group3 value is "</span> + str(variableValue))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dynamicValue):</div><div class="line">        resetTasksStatus(<span class="string">'thirdGroup_'</span> + str(i))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    logging.info(<span class="string">"Ending"</span>)</div><div class="line"> </div><div class="line"> </div><div class="line">starting_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'start'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=start,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">bridge1_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'bridge1'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=bridge1,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">DynamicWorkflow_Group1 = Variable.get(<span class="string">"DynamicWorkflow_Group1"</span>)</div><div class="line">logging.info(<span class="string">"The current DynamicWorkflow_Group1 value is "</span> + str(DynamicWorkflow_Group1))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSomeWork</span><span class="params">(name, index, *args, **kwargs)</span>:</span></div><div class="line">    os.system(<span class="string">'touch /home/user/airflow/'</span> + str(name) + str(index) + <span class="string">'.txt'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(int(DynamicWorkflow_Group1)):</div><div class="line">    dynamicTask = PythonOperator(</div><div class="line">        task_id=<span class="string">'firstGroup_'</span> + str(index),</div><div class="line">        dag=dag,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">        python_callable=doSomeWork,</div><div class="line">        op_args=[<span class="string">'firstGroup'</span>, index],</div><div class="line">    )</div><div class="line"> </div><div class="line">    starting_task.set_downstream(dynamicTask)</div><div class="line">    dynamicTask.set_downstream(bridge1_task)</div><div class="line"> </div><div class="line">bridge2_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'bridge2'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=bridge2,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">DynamicWorkflow_Group2 = Variable.get(<span class="string">"DynamicWorkflow_Group2"</span>)</div><div class="line">logging.info(<span class="string">"The current DynamicWorkflow value is "</span> + str(DynamicWorkflow_Group2))</div><div class="line"> </div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(int(DynamicWorkflow_Group2)):</div><div class="line">    dynamicTask = PythonOperator(</div><div class="line">        task_id=<span class="string">'secondGroup_'</span> + str(index),</div><div class="line">        dag=dag,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">        python_callable=doSomeWork,</div><div class="line">        op_args=[<span class="string">'secondGroup'</span>, index])</div><div class="line">    bridge1_task &gt;&gt; dynamicTask</div><div class="line">    dynamicTask &gt;&gt; bridge2_task</div><div class="line"> </div><div class="line">ending_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'end'</span>,</div><div class="line">    dag=dag,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=end,</div><div class="line">    op_args=[])</div><div class="line"> </div><div class="line">DynamicWorkflow_Group3 = Variable.get(<span class="string">"DynamicWorkflow_Group3"</span>)</div><div class="line">logging.info(<span class="string">"The current DynamicWorkflow value is "</span> + str(DynamicWorkflow_Group3))</div><div class="line"> </div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(int(DynamicWorkflow_Group3)):</div><div class="line">    <span class="keyword">if</span> index &lt; (int(DynamicWorkflow_Group3) - <span class="number">1</span>):</div><div class="line">        dynamicTask = PythonOperator(</div><div class="line">            task_id=<span class="string">'thirdGroup_'</span> + str(index),</div><div class="line">            dag=dag,</div><div class="line">            provide_context=<span class="keyword">True</span>,</div><div class="line">            python_callable=doSomeWork,</div><div class="line">            op_args=[<span class="string">'thirdGroup'</span>, index])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        dynamicTask = BashOperator(</div><div class="line">            task_id=<span class="string">'thirdGroup_'</span> + str(index),</div><div class="line">            bash_command=<span class="string">'touch /home/user/airflow/thirdGroup_'</span> + str(index) + <span class="string">'.txt'</span>,</div><div class="line">            dag=dag)</div><div class="line"> </div><div class="line">    bridge2_task &gt;&gt; dynamicTask</div><div class="line">    dynamicTask &gt;&gt; ending_task</div><div class="line"> </div><div class="line">starting_task &gt;&gt; bridge1_task &gt;&gt; bridge2_task &gt;&gt; ending_task</div></pre></td></tr></table></figure></p>
<p>执行前：<br><img src="https://ttxsgoto.github.io/img/airflow/airflow01.png" alt=""><br>执行后<br><img src="https://ttxsgoto.github.io/img/airflow/airflow02.png" alt=""></p>
<h4 id="动态生成Dags"><a href="#动态生成Dags" class="headerlink" title="动态生成Dags"></a>动态生成Dags</h4><p>通过获取变量值，globals实现动态生成dags<br>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dag</span><span class="params">(dag_id,</span></span></div><div class="line">               schedule,</div><div class="line">               dag_number,</div><div class="line">               default_args):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello_world_py</span><span class="params">(*args)</span>:</span></div><div class="line">        print(<span class="string">'Hello World'</span>)</div><div class="line">        print(<span class="string">'This is DAG: &#123;&#125;'</span>.format(str(dag_number)))</div><div class="line"> </div><div class="line">    dag = DAG(dag_id,</div><div class="line">              schedule_interval=schedule,</div><div class="line">              default_args=default_args)</div><div class="line"> </div><div class="line">    <span class="keyword">with</span> dag:</div><div class="line">        t1 = PythonOperator(</div><div class="line">            task_id=<span class="string">'hello_world'</span>,</div><div class="line">            python_callable=hello_world_py,</div><div class="line">            dag_number=dag_number)</div><div class="line">        t2 = BashOperator(</div><div class="line">            task_id=<span class="string">'current_date'</span>,</div><div class="line">            bash_command=<span class="string">'date'</span></div><div class="line">        )</div><div class="line">        t1 &gt;&gt; t2</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> dag</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_api_data</span><span class="params">()</span>:</span></div><div class="line">    data = [<span class="string">'test01'</span>, <span class="string">'test02'</span>, <span class="string">'test03'</span>]</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dags</span><span class="params">(data=None)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(data)):</div><div class="line">        dag_id = <span class="string">'dynamic_day_&#123;&#125;'</span>.format(data[n])</div><div class="line">        default_args = &#123;<span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">                        <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">1</span>)&#125;</div><div class="line">        schedule = <span class="keyword">None</span></div><div class="line">        dag_number = n</div><div class="line">        globals()[dag_id] = create_dag(dag_id, schedule, dag_number, default_args)</div><div class="line"> </div><div class="line"> </div><div class="line">data = get_api_data()</div><div class="line">create_dags(data)</div></pre></td></tr></table></figure></p>
<p><img src="https://ttxsgoto.github.io/img/airflow/airflow03.png" alt=""></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/" target="_blank" rel="external">https://www.linkedin.com/pulse/dynamic-workflows-airflow-kyle-bridenstine/</a><br><a href="https://xbuba.com/questions/41517798" target="_blank" rel="external">https://xbuba.com/questions/41517798</a><br><a href="https://www.astronomer.io/guides/dynamically-generating-dags/" target="_blank" rel="external">https://www.astronomer.io/guides/dynamically-generating-dags/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;动态生成task任务&quot;&gt;&lt;a href=&quot;#动态生成task任务&quot; class=&quot;headerlink&quot; title=&quot;动态生成task任务&quot;&gt;&lt;/a&gt;动态生成task任务&lt;/h4&gt;&lt;p&gt;现在有这样的需求， 需要根据计算结果动态生成任务列表，来执行dags，查找资
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Airflow" scheme="https://ttxsgoto.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Airflow变量和执行器</title>
    <link href="https://ttxsgoto.github.io/2019/07/27/yw-airflow-operator/"/>
    <id>https://ttxsgoto.github.io/2019/07/27/yw-airflow-operator/</id>
    <published>2019-07-27T08:15:08.000Z</published>
    <updated>2019-07-27T06:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>最近在调研Airflow demo相关的问题和解决方案， 主要问题有：</p>
<ul>
<li>Dags中任务启动时，参数如何传递</li>
<li>Task任务之间的依赖关系，返回值如何被其他task使用</li>
<li>运行docker程序</li>
<li>Http API请求实现</li>
</ul>
<h4 id="具体说明"><a href="#具体说明" class="headerlink" title="具体说明"></a>具体说明</h4><h5 id="Dags中任务启动时，参数如何传递"><a href="#Dags中任务启动时，参数如何传递" class="headerlink" title="Dags中任务启动时，参数如何传递"></a>Dags中任务启动时，参数如何传递</h5><p>Airflow中可以使用Variables来定义变量来传递参数，该变量为全局变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置变量</span></div><div class="line">airflow variables --set keyName value <span class="comment"># 或者管理UI设置</span></div><div class="line"> </div><div class="line"><span class="comment"># 获取变量</span></div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line">message = Variable.get(<span class="string">'message'</span>)</div></pre></td></tr></table></figure></p>
<h5 id="Task任务之间的依赖关系，返回值如何被其他task使用"><a href="#Task任务之间的依赖关系，返回值如何被其他task使用" class="headerlink" title="Task任务之间的依赖关系，返回值如何被其他task使用"></a>Task任务之间的依赖关系，返回值如何被其他task使用</h5><p>通过xcom来返回给后面的task任务使用任务的返回值，使用kwargs[‘task_instance’].xcom_pull(task_ids=’run_task’)来获取run_task任务的返回值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta, datetime</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line"> </div><div class="line">default_args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'description'</span>: <span class="string">'Use of the Xcom'</span>,</div><div class="line">    <span class="string">'depend_on_past'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">3</span>),</div><div class="line">    <span class="string">'email_on_failure'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'email_on_retry'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'retries'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'retry_delay'</span>: timedelta(minutes=<span class="number">30</span>)</div><div class="line">    <span class="comment"># 'queue': 'bash_queue',</span></div><div class="line">    <span class="comment"># 'pool': 'backfill',</span></div><div class="line">    <span class="comment"># 'priority_weight': 10,</span></div><div class="line">    <span class="comment"># 'end_date': datetime(2016, 1, 1),</span></div><div class="line">    <span class="comment"># 'wait_for_downstream': False,</span></div><div class="line">    <span class="comment"># 'dag': dag,</span></div><div class="line">    <span class="comment"># 'adhoc':False,</span></div><div class="line">    <span class="comment"># 'sla': timedelta(hours=2),</span></div><div class="line">    <span class="comment"># 'execution_timeout': timedelta(seconds=300),</span></div><div class="line">    <span class="comment"># 'on_failure_callback': some_function,</span></div><div class="line">    <span class="comment"># 'on_success_callback': some_other_function,</span></div><div class="line">    <span class="comment"># 'on_retry_callback': another_function,</span></div><div class="line">    <span class="comment"># 'trigger_rule': u'all_success'</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">dag = DAG(</div><div class="line">    <span class="string">'xcom_demo'</span>,</div><div class="line">    default_args=default_args,</div><div class="line">    schedule_interval=<span class="keyword">None</span></div><div class="line">)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_this_func</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    message = Variable.get(<span class="string">'message'</span>)</div><div class="line">    print(<span class="string">'message------&gt;'</span>, message)</div><div class="line">    <span class="keyword">return</span> message</div><div class="line"> </div><div class="line"> </div><div class="line">run_task = PythonOperator(</div><div class="line">    task_id=<span class="string">'run_task'</span>,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=run_this_func,</div><div class="line">    dag=dag</div><div class="line">)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hello</span><span class="params">(**context)</span>:</span></div><div class="line">    before_data = context[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'run_task'</span>)</div><div class="line">    <span class="keyword">return</span> before_data</div><div class="line"> </div><div class="line"> </div><div class="line">hello_operator = PythonOperator(</div><div class="line">    task_id=<span class="string">'hello_task'</span>,</div><div class="line">    python_callable=print_hello,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    dag=dag,</div><div class="line">)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">three</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    frist_data = kwargs[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'run_task'</span>)</div><div class="line">    two_data = kwargs[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'hello_task'</span>)</div><div class="line">    <span class="keyword">return</span> frist_data, two_data</div><div class="line"> </div><div class="line"> </div><div class="line">last_operator = PythonOperator(</div><div class="line">    task_id=<span class="string">'last_task'</span>,</div><div class="line">    python_callable=three,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    dag=dag,</div><div class="line">)</div><div class="line"> </div><div class="line">run_task &gt;&gt; hello_operator &gt;&gt; last_operator  <span class="comment"># xcoms</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dag.cli()</div></pre></td></tr></table></figure></p>
<h5 id="运行docker程序"><a href="#运行docker程序" class="headerlink" title="运行docker程序"></a>运行docker程序</h5><p>执行器DockerOperator 完成docker运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="keyword">from</span> airflow.operators.docker_operator <span class="keyword">import</span> DockerOperator</div><div class="line"> </div><div class="line">default_args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'description'</span>: <span class="string">'Use of the DockerOperator'</span>,</div><div class="line">    <span class="string">'depend_on_past'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">3</span>),</div><div class="line">    <span class="string">'email_on_failure'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'email_on_retry'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'retries'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'retry_delay'</span>: timedelta(minutes=<span class="number">30</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">image = <span class="string">'docker.api:0.1.0'</span></div><div class="line">volumes = [<span class="string">'/home/user/data:/data'</span>]</div><div class="line">run_commend = <span class="string">'cd /data/ &amp;&amp; ./run.sh'</span></div><div class="line"><span class="keyword">with</span> DAG(<span class="string">'docker_demo'</span>, default_args=default_args, schedule_interval=<span class="keyword">None</span>, catchup=<span class="keyword">False</span>) <span class="keyword">as</span> dag:</div><div class="line">    t1 = BashOperator(</div><div class="line">        task_id=<span class="string">'print_current_date'</span>,</div><div class="line">        bash_command=<span class="string">'date'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t2 = DockerOperator(</div><div class="line">        task_id=<span class="string">'dpt_docker'</span>,</div><div class="line">        image=image,</div><div class="line">        auto_remove=<span class="keyword">True</span>,</div><div class="line">        command=run_commend,</div><div class="line">        force_pull=<span class="keyword">True</span>,</div><div class="line">        volumes=volumes,</div><div class="line">        <span class="comment"># network_mode='bridge'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t3 = BashOperator(</div><div class="line">        task_id=<span class="string">'print_hello'</span>,</div><div class="line">        bash_command=<span class="string">'echo "hello world"'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t1 &gt;&gt; t2 &gt;&gt; t3</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dag.cli()</div></pre></td></tr></table></figure></p>
<h5 id="Http-API请求实现"><a href="#Http-API请求实现" class="headerlink" title="Http API请求实现"></a>Http API请求实现</h5><p>执行器SimpleHttpOperator 完成http api请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.bash_operator <span class="keyword">import</span> BashOperator</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"><span class="keyword">from</span> airflow.utils.trigger_rule <span class="keyword">import</span> TriggerRule</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="keyword">from</span> airflow.operators.http_operator <span class="keyword">import</span> SimpleHttpOperator</div><div class="line"> </div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</div><div class="line"> </div><div class="line">default_args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</div><div class="line">    <span class="string">'description'</span>: <span class="string">'Use of the SimpleHttpOperator'</span>,</div><div class="line">    <span class="string">'depend_on_past'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'start_date'</span>: datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">3</span>),</div><div class="line">    <span class="string">'email_on_failure'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'email_on_retry'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'retries'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'retry_delay'</span>: timedelta(minutes=<span class="number">30</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">http_add = <span class="string">'http://127.0.0.1:8888'</span></div><div class="line">api = <span class="string">'/person/'</span></div><div class="line">url = <span class="string">'http://1027.0.0.1:8889'</span></div><div class="line">login_api = <span class="string">'/user/login/'</span></div><div class="line">get_task_api = <span class="string">'/task/'</span></div><div class="line">os.environ[</div><div class="line">    <span class="string">'AIRFLOW_CONN_HTTP_TEST'</span>] = http_add  <span class="comment"># 这里定义不同的接口规则,在SimpleHttpOperator中http_conn_id需要指定IRFLOW_CONN_*对应的内容,默认接口指向google的api</span></div><div class="line">os.environ[<span class="string">'AIRFLOW_CONN_TEST_HTTP'</span>] = url</div><div class="line"> </div><div class="line">token = <span class="string">''</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_http_data</span><span class="params">(**context)</span>:</span></div><div class="line">    token_data = context[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'post_login'</span>)</div><div class="line">    token_dict = json.loads(token_data)</div><div class="line">    token = token_dict[<span class="string">'data'</span>][<span class="string">'token'</span>]</div><div class="line">    Variable.set(<span class="string">'token'</span>, token)</div><div class="line">    <span class="keyword">return</span> token</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(**context)</span>:</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> token</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">with</span> DAG(<span class="string">'http_api_demo'</span>,</div><div class="line">         default_args=default_args,</div><div class="line">         schedule_interval=<span class="string">"5 * * * *"</span>,</div><div class="line">         catchup=<span class="keyword">False</span>) <span class="keyword">as</span> dag:</div><div class="line">    t1 = BashOperator(</div><div class="line">        task_id=<span class="string">'print_current_date'</span>,</div><div class="line">        bash_command=<span class="string">'date'</span></div><div class="line">    )</div><div class="line"> </div><div class="line">    t2 = SimpleHttpOperator(</div><div class="line">        task_id=<span class="string">'get_person'</span>,</div><div class="line">        http_conn_id=<span class="string">'http_test'</span>,</div><div class="line">        method=<span class="string">'GET'</span>,</div><div class="line">        headers=&#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;,</div><div class="line">        endpoint=api,</div><div class="line">        xcom_push=<span class="keyword">True</span>,  <span class="comment"># 将结果通过xcom传递给下一个task</span></div><div class="line">        response_check=<span class="keyword">lambda</span> response: <span class="keyword">True</span> <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> <span class="keyword">False</span>,</div><div class="line">    )</div><div class="line">    t3 = SimpleHttpOperator(</div><div class="line">        task_id=<span class="string">'post_login'</span>,</div><div class="line">        http_conn_id=<span class="string">'test_http'</span>,</div><div class="line">        method=<span class="string">'POST'</span>,</div><div class="line">        headers=&#123;</div><div class="line">            <span class="string">"X-Requested-With"</span>: <span class="string">'XMLHttpRequest'</span>,</div><div class="line">            <span class="string">"Accept"</span>: <span class="string">"application/json"</span>,</div><div class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/json; charset=UTF-8"</span></div><div class="line">        &#125;,</div><div class="line">        endpoint=login_api,</div><div class="line">        xcom_push=<span class="keyword">True</span>,  <span class="comment"># 将结果通过xcom传递给下一个task</span></div><div class="line">        response_check=<span class="keyword">lambda</span> response: <span class="keyword">True</span> <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> <span class="keyword">False</span>,</div><div class="line">        data=json.dumps(&#123;<span class="string">'username'</span>: <span class="string">'admin'</span>, <span class="string">'password'</span>: <span class="string">'admin'</span>&#125;),</div><div class="line">    )</div><div class="line">    <span class="comment"># PostgresOperator</span></div><div class="line">    t4 = SimpleHttpOperator(</div><div class="line">        task_id=<span class="string">'get_task'</span>,</div><div class="line">        http_conn_id=<span class="string">'test_http'</span>,</div><div class="line">        method=<span class="string">'GET'</span>,</div><div class="line">        headers=&#123;</div><div class="line">            <span class="string">"X-Requested-With"</span>: <span class="string">'XMLHttpRequest'</span>,</div><div class="line">            <span class="string">"Accept"</span>: <span class="string">"application/json"</span>,</div><div class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/json; charset=UTF-8"</span>,</div><div class="line">            <span class="string">"Authorization"</span>: <span class="string">'jwt &#123;&#125;'</span>.format(Variable.get(<span class="string">'token'</span>)),  <span class="comment"># 这里需要获取到login的token</span></div><div class="line">        &#125;,</div><div class="line">        endpoint=get_task_api,</div><div class="line">        xcom_push=<span class="keyword">True</span>,  <span class="comment"># 将结果通过xcom传递给下一个task</span></div><div class="line">        response_check=<span class="keyword">lambda</span> response: <span class="keyword">True</span> <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> <span class="keyword">False</span>,</div><div class="line">        trigger_rule=TriggerRule.NONE_FAILED</div><div class="line">    )</div><div class="line"> </div><div class="line">    t5 = PythonOperator(</div><div class="line">        task_id=<span class="string">'data_task'</span>,</div><div class="line">        python_callable=get_http_data,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">        <span class="comment"># trigger_rule=TriggerRule.ONE_SUCCESS</span></div><div class="line">    )</div><div class="line">    t6 = PythonOperator(</div><div class="line">        task_id=<span class="string">'test_data'</span>,</div><div class="line">        python_callable=get_data,</div><div class="line">        provide_context=<span class="keyword">True</span></div><div class="line">    )</div><div class="line">    t7 = PythonOperator(</div><div class="line">        task_id=<span class="string">'sleep_data'</span>,</div><div class="line">        python_callable=get_data,</div><div class="line">        provide_context=<span class="keyword">True</span>,</div><div class="line">    )</div><div class="line"> </div><div class="line">    t1 &gt;&gt; t2 &gt;&gt; t3 &gt;&gt; [t5, t6] &gt;&gt; t4 &gt;&gt; t7</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dag.cli()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;最近在调研Airflow demo相关的问题和解决方案， 主要问题有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dags中任务启动时，参数
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Airflow" scheme="https://ttxsgoto.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Airflow架构、安装部署</title>
    <link href="https://ttxsgoto.github.io/2019/07/26/yw-airflow-install/"/>
    <id>https://ttxsgoto.github.io/2019/07/26/yw-airflow-install/</id>
    <published>2019-07-26T07:50:35.000Z</published>
    <updated>2019-07-27T06:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Airflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务，只需要把任务的名字和运行方式提供给Airflow作为一个task就可以， 以代码的方式来定义任务执行流程，可操作性强。</p>
<h4 id="Airflow架构"><a href="#Airflow架构" class="headerlink" title="Airflow架构"></a>Airflow架构</h4><p>Airflow 是建立在元数据库上的队列系统。数据库存储队列任务的状态，调度器使用这些状态来确定如何将其它任务添加到队列的优先级。此功能由四个主要组件编排</p>
<ol>
<li>元数据库：这个数据库存储有关任务状态的信息。数据库使用在 SQLAlchemy 中实现的抽象层执行更新。该抽象层将 Airflow 剩余组件功能从数据库中干净地分离了出来。</li>
<li>调度器：调度器是一种使用 DAG 定义结合元数据中的任务状态来决定哪些任务需要被执行以及任务执行优先级的过程。调度器通常作为服务运行。</li>
<li>执行器：Excutor 是一个消息队列进程，它被绑定到调度器中，用于确定实际执行每个任务计划的工作进程。有不同类型的执行器，每个执行器都使用一个指定工作进程的类来执行任务。例如，LocalExecutor 使用与调度器进程在同一台机器上运行的并行进程执行任务。其他像 CeleryExecutor 的执行器使用存在于独立的工作机器集群中的工作进程执行任务。</li>
<li>Workers：这些是实际执行任务逻辑的进程，由正在使用的执行器确定。</li>
</ol>
<p>Airflow 的操作建立于存储任务状态和工作流的元数据库之上（即 DAG）。调度器和执行器将任务发送至队列，让 Worker 进程执行。WebServer 运行（经常与调度器在同一台机器上运行）并与数据库通信，在 Web UI 中呈现任务状态和任务执行日志。每个有色框表明每个组件都可以独立于其他组件存在，这取决于部署配置的类型。</p>
<h5 id="调度器操作"><a href="#调度器操作" class="headerlink" title="调度器操作"></a>调度器操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0. 从磁盘中加载可用的 DAG 定义（填充 DagBag）</div><div class="line">调度器running：</div><div class="line">  1. 调度器使用 DAG 定义来标识并且/或者初始化在元数据的 db 中的任何 DagRuns。</div><div class="line">  2. 调度器检查与活动 DagRun 关联的 TaskInstance 的状态，解析 TaskInstance 之间的任何依赖，标识需要被执行的 TaskInstance，然后将它们添加至 worker 队列，将新排列的 TaskInstance 状态更新为数据库中的“排队”状态。</div><div class="line">  3. 每个可用的 worker 从队列中取一个 TaskInstance，然后开始执行它，将此 TaskInstance 的数据库记录从“排队”更新为“运行”。</div><div class="line">  4. 一旦一个 TaskInstance 完成运行，关联的 worker 就会报告到队列并更新数据库中的 TaskInstance 的状态（例如“完成”、“失败”等）。</div><div class="line">  5. 调度器根据所有已完成的相关 TaskInstance 的状态更新所有活动 DagRuns 的状态（“运行”、“失败”、“完成”）。</div><div class="line">  6. 重复步骤 1-5</div></pre></td></tr></table></figure>
<h4 id="进程说明"><a href="#进程说明" class="headerlink" title="进程说明"></a>进程说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">airflow webserver -p 8090   # web管理页面， 如果添加-D 以后台进程启动</div><div class="line">airflow scheduler           # 调度进程</div><div class="line">airflow worker              # worker执行进程， -q 指定启用的quene</div><div class="line">airflow flower              # 监控celery进程</div></pre></td></tr></table></figure>
<h4 id="airflow-的守护进程是如何一起工作的"><a href="#airflow-的守护进程是如何一起工作的" class="headerlink" title="airflow 的守护进程是如何一起工作的"></a>airflow 的守护进程是如何一起工作的</h4><ol>
<li>调度器 scheduler 会间隔性的去轮询元数据库（Metastore）已注册的 DAG（有向无环图，可理解为作业流）是否需要被执行。如果一个具体的 DAG 根据其调度计划需要被执行，scheduler 守护进程就会先在元数据库创建一个 DagRun 的实例，并触发 DAG 内部的具体 task（任务，可以这样理解：DAG 包含一个或多个task），触发其实并不是真正的去执行任务，而是推送 task 消息至消息队列（即 broker）中，每一个 task 消息都包含此 task 的 DAG ID，task ID，及具体需要被执行的函数。如果 task 是要执行 bash 脚本，那么 task 消息还会包含 bash 脚本的代码。</li>
<li>用户可能在 webserver 上来控制 DAG，比如手动触发一个 DAG 去执行。当用户这样做的时候，一个DagRun 的实例将在元数据库被创建，scheduler 使同 #1 一样的方法去触发 DAG 中具体的 task 。</li>
<li>worker 守护进程将会监听消息队列，如果有消息就从消息队列中取出消息，当取出任务消息时，它会更新元数据中的 DagRun 实例的状态为正在运行，并尝试执行 DAG 中的 task，如果 DAG 执行成功，则更新任 DagRun 实例的状态为成功，否则更新状态为失败。</li>
</ol>
<h4 id="常用CLI命令行接口"><a href="#常用CLI命令行接口" class="headerlink" title="常用CLI命令行接口"></a>常用CLI命令行接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">airflow test DAG_ID TASK_ID EXECUTION_DAT  # 测试任务调用是否可用</div><div class="line">airflow list_dags   # 查看dags</div><div class="line">airflow list_tasks DAG_ID  # 查看对应dag的task</div><div class="line">airflow clear DAG_ID    # 移除dag_id元数据库中的taskinstance记录</div><div class="line">airflow resetdb     # 重载数据库，删表在新创建</div></pre></td></tr></table></figure>
<h4 id="部署说明"><a href="#部署说明" class="headerlink" title="部署说明"></a>部署说明</h4><ul>
<li>两台ubuntu 16.04 ,</li>
<li>192.168.0.10  (webserver,scheduler,worker,flower)</li>
<li><p>192.168.0.11  (worker)</p>
<p>说明 两台服务器airflow.cfg配置要一样，对应的dags文件路径也要相同</p>
</li>
</ul>
<h5 id="Environmental-dependence"><a href="#Environmental-dependence" class="headerlink" title="Environmental dependence"></a>Environmental dependence</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># python3.5 &amp;&amp; pip3</span></div><div class="line">sudo apt-get update</div><div class="line">ln -s /usr/bin/python3 /usr/bin/python</div><div class="line">sudo apt install python3-pip -y</div><div class="line">pip3 install --upgrade pip</div><div class="line"> </div><div class="line"><span class="comment"># Docker Install</span></div><div class="line">sudo apt-get install -y apt-transport-https ca-certificates</div><div class="line">sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:<span class="number">80</span> --recv-keys <span class="number">58118E89</span>F3A912897C070ADBF76221572C52609D</div><div class="line">echo <span class="string">"deb https://mirrors.tuna.tsinghua.edu.cn/docker/apt/repo ubuntu-trusty main"</span> \</div><div class="line">| sudo tee /etc/apt/sources.list.d/docker.list</div><div class="line">sudo apt-get update</div><div class="line">apt-cache policy docker-engine</div><div class="line">sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual</div><div class="line">sudo apt install -y docker.io</div></pre></td></tr></table></figure>
<h5 id="Install-Airflow"><a href="#Install-Airflow" class="headerlink" title="Install Airflow"></a>Install Airflow</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pip3 install apache-airflow</div><div class="line">pip3 install <span class="string">'apache-airflow[celery]'</span></div><div class="line">pip3 install -U werkzeug Jinja2</div><div class="line">pip3 install flask_bcrypt</div><div class="line"> </div><div class="line"><span class="comment">####</span></div><div class="line">修改对应的配置(dags路径)</div><div class="line">executor = CeleryExecutor</div><div class="line">demo_mode = <span class="keyword">False</span></div><div class="line">sql_alchemy_conn = mysql://root:admin@<span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>:<span class="number">3306</span>/airflow</div><div class="line">broker_url = pyamqp://airflow:airflow@<span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>:<span class="number">5672</span>/airflow</div><div class="line">sql_alchemy_conn = mysql://root:admin@<span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>:<span class="number">3306</span>/airflow</div></pre></td></tr></table></figure>
<h5 id="Run-Docker-Mysql-amp-amp-RabbitMQ"><a href="#Run-Docker-Mysql-amp-amp-RabbitMQ" class="headerlink" title="Run Docker(Mysql &amp;&amp; RabbitMQ)"></a>Run Docker(Mysql &amp;&amp; RabbitMQ)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- docker mysql</div><div class="line">    docker pull mysql</div><div class="line">    docker run -it -d --name airflow-mysql -v /data/airflow_mysql_data/:/var/lib/mysql/ -p <span class="number">3306</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=admin --restart=always -d mysql</div><div class="line"> </div><div class="line"> </div><div class="line">- docker rabbitmq</div><div class="line">    docker pull rabbitmq</div><div class="line">    docker run -it -d -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">15672</span>:<span class="number">15672</span> -v /data/airflow_rabbitmq_data:/var/lib/rabbitmq --restart=always --name airflow_rabbitmq rabbitmq</div><div class="line">    <span class="comment">#创建一个RabbitMQ用户</span></div><div class="line">    rabbitmqctl add_user airflow airflow</div><div class="line">    <span class="comment">#创建一个RabbitMQ虚拟主机</span></div><div class="line">    rabbitmqctl add_vhost airflow</div><div class="line">    <span class="comment">#将这个用户赋予admin的角色</span></div><div class="line">    rabbitmqctl set_user_tags airflow admin</div><div class="line">    <span class="comment">#允许这个用户访问这个虚拟主机</span></div><div class="line">    rabbitmqctl set_permissions -p airflow airflow <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></div><div class="line">    <span class="comment"># no usage</span></div><div class="line">    rabbitmq-plugins enable rabbitmq_management</div></pre></td></tr></table></figure>
<h5 id="Supervisor管理进程"><a href="#Supervisor管理进程" class="headerlink" title="Supervisor管理进程"></a>Supervisor管理进程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install supervisor</div><div class="line"> </div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>配置文件如下：</div><div class="line">[program:airflow_webserver]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow webserver</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_webserver.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_webserver.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">[program:airflow_scheduler]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow scheduler</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_scheduler.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_scheduler.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">[program:airflow_worker]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow worker</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">[program:airflow_flower]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow flower</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_flower.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_flower.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span>配置文件如下：</div><div class="line">[program:airflow_worker]</div><div class="line">directory=/home/ubuntu/airflow/</div><div class="line">command=/usr/local/bin/airflow worker</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">environment=AIRFLOW_HOME=<span class="string">"/home/ubuntu/airflow"</span>,HOME=<span class="string">"/home/ubuntu/"</span></div><div class="line">user=ubuntu</div><div class="line"> </div><div class="line">stdout_logfile=/var/log/supervisor/airflow_worker.out</div><div class="line">stdout_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stdout_logfile_backups=<span class="number">10</span></div><div class="line"> </div><div class="line">stderr_logfile=/var/log/supervisor/airflow_worker.err</div><div class="line">stderr_logfile_maxbytes=<span class="number">50</span>MB</div><div class="line">stderr_logfile_backups=<span class="number">10</span></div></pre></td></tr></table></figure>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol>
<li><p>locale.Error: unsupported locale setting</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">https://stackoverflow.com/questions/<span class="number">14547631</span>/python-locale-error-unsupported-locale-setting</div><div class="line">export LC_ALL=<span class="string">"en_US.UTF-8"</span></div><div class="line">export LC_CTYPE=<span class="string">"en_US.UTF-8"</span></div><div class="line">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>
</li>
<li><p>ImportError: No module named ‘MySQLdb’</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libmysqlclient-dev -y</div><div class="line">sudo pip3 install mysqlclient</div></pre></td></tr></table></figure>
</li>
<li><p>airflow.exceptions.AirflowException: No module named ‘flask_bcrypt’</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install flask_bcrypt</div></pre></td></tr></table></figure>
</li>
<li><p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe8 in position 3199: ordinal not in range(128)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">字符集问题</div><div class="line">/etc/default/locale </div><div class="line">LANG=<span class="string">"zh_CN.UTF-8"</span></div><div class="line">LANGUAGE=<span class="string">"zh_CN:zh"</span></div><div class="line">LC_ALL=<span class="string">"zh_CN.UTF-8"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a" target="_blank" rel="external">https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a</a><br><a href="https://blog.csdn.net/youzi_yun/article/details/90141362" target="_blank" rel="external">https://blog.csdn.net/youzi_yun/article/details/90141362</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;Airflow是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。Airflow独立于我们要运行的任务
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Airflow" scheme="https://ttxsgoto.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Vue echarts可视化</title>
    <link href="https://ttxsgoto.github.io/2019/07/03/vue-echarts/"/>
    <id>https://ttxsgoto.github.io/2019/07/03/vue-echarts/</id>
    <published>2019-07-03T12:00:47.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据</p>
<h3 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h3><ul>
<li>将图形封装为一个基础组件</li>
<li>按照对应的数据格式，填充到option中</li>
<li>多组数据通过for循环来完成</li>
</ul>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://ttxsgoto.github.io/img/vue/echarts/bar.png" alt=""><br><img src="https://ttxsgoto.github.io/img/vue/echarts/line.png" alt=""><br><img src="https://ttxsgoto.github.io/img/vue/echarts/pie.png" alt=""></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>chart.vue组件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div :id=<span class="string">"id"</span> :style=<span class="string">"style"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  import echarts from <span class="string">'echarts'</span></div><div class="line">  <span class="built_in">export</span> default &#123;</div><div class="line">    name: <span class="string">"Chart"</span>,</div><div class="line">    props: &#123;</div><div class="line">      id: &#123;</div><div class="line">        <span class="built_in">type</span>: String</div><div class="line">      &#125;,</div><div class="line">      width: &#123;</div><div class="line">        <span class="built_in">type</span>: String,</div><div class="line">        default: <span class="string">"100%"</span>,</div><div class="line">      &#125;,</div><div class="line">      height: &#123;</div><div class="line">        <span class="built_in">type</span>: String,</div><div class="line">        default: <span class="string">"300px"</span></div><div class="line">      &#125;,</div><div class="line">      option: &#123;</div><div class="line">        <span class="built_in">type</span>: Object,</div><div class="line">        required: <span class="literal">true</span>,</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">      <span class="function"><span class="title">style</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> &#123;</div><div class="line">          height: this.height,</div><div class="line">          width: this.width</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="title">data</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> &#123;</div><div class="line">          chart: <span class="string">""</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      <span class="function"><span class="title">init</span></span>() &#123;</div><div class="line">        this.chart = echarts.init(document.getElementById(this.id));</div><div class="line">        // this.chart.showLoading();</div><div class="line">        this.chart.setOption(this.option);</div><div class="line">        // this.chart.hideLoading();</div><div class="line">        window.addEventListener(<span class="string">"resize"</span>, this.chart.resize);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">      this.init();</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">      option: &#123;</div><div class="line">        handler(newVal, oldVal) &#123;</div><div class="line">          <span class="keyword">if</span> (this.chart) &#123;</div><div class="line">            <span class="keyword">if</span> (newVal) &#123;</div><div class="line">              this.chart.setOption(newVal);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              this.chart.setOption(oldVal);</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            this.init();</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        deep: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>echarts.vue</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped lang=<span class="string">"less"</span>&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"> </div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;Bar Num&lt;/h2&gt;</div><div class="line">      &lt;div v-for=<span class="string">"(item,index) in optionData"</span> :key=<span class="string">"item.series.name"</span>&gt;</div><div class="line">          &lt;Chart :id=<span class="string">"item.series.name"</span> :option=<span class="string">"item"</span> :width=<span class="string">"item._width"</span> :height=<span class="string">"item._height"</span>&gt;&lt;/Chart&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;h2&gt;Line Total num &amp;&amp; Num&lt;/h2&gt;</div><div class="line">      &lt;div v-for=<span class="string">"(item,index) in optionAllData"</span> :key=<span class="string">"item.title.text"</span>&gt;</div><div class="line">          &lt;Chart :id=<span class="string">"item.title.text"</span> :option=<span class="string">"item"</span> :width=<span class="string">"item._width"</span> :height=<span class="string">"item._height"</span>&gt;&lt;/Chart&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;h2&gt; Pie Num Chart&lt;/h2&gt;</div><div class="line">    &lt;Chart :id=<span class="string">"pieOption.title.text"</span> :option=<span class="string">"pieOption"</span> :width=<span class="string">"pieOption._width"</span> :height=<span class="string">"pieOption._height"</span>&gt;&lt;/Chart&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"> </div><div class="line">&lt;script&gt;</div><div class="line">import Chart from <span class="string">'./Chart.vue'</span></div><div class="line"> </div><div class="line"><span class="built_in">export</span> default &#123;</div><div class="line">  name: <span class="string">'echarts'</span>,</div><div class="line">  components: &#123;</div><div class="line">    Chart</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="title">data</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">      // 模拟后端返回的数据</div><div class="line">      dateTime: [<span class="string">"20190624"</span>, <span class="string">"20190625"</span>, <span class="string">"20190626"</span>, <span class="string">"20190627"</span>],</div><div class="line">      selectObject: &#123;</div><div class="line">        <span class="string">'TYPE01'</span>: [7, 5, 15, 10],</div><div class="line">        <span class="string">'TYPE02'</span>: [2, 5, 10, 8],</div><div class="line">      &#125;,</div><div class="line">      selectAllObject: &#123;</div><div class="line">        <span class="string">'TYPE03'</span>:&#123;</div><div class="line">          <span class="string">'total_num'</span>: [20, 20, 25, 30],</div><div class="line">          <span class="string">'error_num'</span>: [3, 5, 5, 10]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'TYPE04'</span>: &#123;</div><div class="line">          <span class="string">'total_num'</span>: [20, 20, 25, 30],</div><div class="line">          <span class="string">'error_num'</span>: [2, 5, 15, 8]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      optionData: [],</div><div class="line">      optionAllData: [],</div><div class="line"></div><div class="line">      // Pie数据</div><div class="line">      pieOption: &#123;</div><div class="line">        title : &#123;</div><div class="line">          text: <span class="string">'COLOUR TYPE'</span>,</div><div class="line">          // subtext: <span class="string">'-'</span>,</div><div class="line">          x:<span class="string">'center'</span></div><div class="line">        &#125;,</div><div class="line">        tooltip : &#123;</div><div class="line">            trigger: <span class="string">'item'</span>,</div><div class="line">            formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span></div><div class="line">        &#125;,</div><div class="line">        legend: &#123;</div><div class="line">            orient: <span class="string">'vertical'</span>,</div><div class="line">            left: <span class="string">'left'</span>,</div><div class="line">            data: [<span class="string">'RED'</span>,<span class="string">'BLUE'</span>,<span class="string">'YELLOW'</span>,<span class="string">'GREEN'</span>]</div><div class="line">        &#125;,</div><div class="line">        // 保存为图片设置</div><div class="line">        toolbox: &#123;</div><div class="line">          show: <span class="literal">true</span>,</div><div class="line">          feature: &#123;</div><div class="line">            saveAsImage: &#123;</div><div class="line">              show:<span class="literal">true</span>,</div><div class="line">              title: <span class="string">'Save image'</span>,</div><div class="line">              excludeComponents :[<span class="string">'toolbox'</span>],</div><div class="line">              pixelRatio: 2</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        series : [&#123;</div><div class="line">            name: <span class="string">'COLOUR TYPE'</span>,</div><div class="line">            <span class="built_in">type</span>: <span class="string">'pie'</span>,</div><div class="line">            radius : <span class="string">'55%'</span>,</div><div class="line">            center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</div><div class="line">            data:[</div><div class="line">                &#123;value:335, name:<span class="string">'RED'</span>&#125;,</div><div class="line">                &#123;value:310, name:<span class="string">'BLUE'</span>&#125;,</div><div class="line">                &#123;value:234, name:<span class="string">'YELLOW'</span>&#125;,</div><div class="line">                &#123;value:135, name:<span class="string">'GREEN'</span>&#125;,</div><div class="line">            ],</div><div class="line">            itemStyle: &#123;</div><div class="line">              emphasis: &#123;</div><div class="line">                shadowBlur: 10,</div><div class="line">                shadowOffsetX: 0,</div><div class="line">                shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;],</div><div class="line">          _width: <span class="string">"50%"</span>,</div><div class="line">          _height: <span class="string">'300px'</span></div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="title">created</span></span>() &#123;</div><div class="line">    this.initData();</div><div class="line">    this.initAllData();</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    <span class="function"><span class="title">initData</span></span>() &#123;</div><div class="line">      <span class="built_in">let</span> item_list = Object.keys(this.selectObject);</div><div class="line">      item_list.forEach((key)=&gt;&#123;</div><div class="line">        this.optionData.push(</div><div class="line">          &#123;</div><div class="line">            title: &#123;</div><div class="line">              text: key</div><div class="line">            &#125;,</div><div class="line">            toolbox: &#123;</div><div class="line">              show: <span class="literal">true</span>,</div><div class="line">              feature: &#123;</div><div class="line">                saveAsImage: &#123;</div><div class="line">                  show:<span class="literal">true</span>,</div><div class="line">                  title: <span class="string">'Save image'</span>,</div><div class="line">                  excludeComponents :[<span class="string">'toolbox'</span>],</div><div class="line">                  pixelRatio: 2</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            tooltip: &#123;</div><div class="line">              trigger: <span class="string">'axis'</span>,</div><div class="line">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class="line">                <span class="built_in">type</span>: <span class="string">'line'</span>, // 默认为直线，可选为：<span class="string">'line'</span> | <span class="string">'shadow'</span></div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            legend: &#123;</div><div class="line">              data: [key]</div><div class="line">            &#125;,</div><div class="line">            xAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">'category'</span>,</div><div class="line">                data: this.dateTime,</div><div class="line">                axisTick: &#123;</div><div class="line">                  alignWithLable: <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">              &#125;,</div><div class="line">            ],</div><div class="line">            yAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">"value"</span></div><div class="line">              &#125;</div><div class="line">            ],</div><div class="line">            series: &#123;</div><div class="line">              name: key,</div><div class="line">              <span class="built_in">type</span>: <span class="string">"bar"</span>, // bar, line</div><div class="line">              data: this.selectObject[key],</div><div class="line">              barWidth: <span class="string">'60%'</span></div><div class="line">            &#125;,</div><div class="line">            _width: <span class="string">"45%"</span>,</div><div class="line">            _height: <span class="string">'240px'</span></div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">    <span class="function"><span class="title">initAllData</span></span>() &#123;</div><div class="line">      <span class="built_in">let</span> item_list = Object.keys(this.selectAllObject);</div><div class="line">      item_list.forEach((key)=&gt;&#123;</div><div class="line">        <span class="built_in">let</span> type_list = Object.keys(this.selectAllObject[key]);</div><div class="line">        this.optionAllData.push(</div><div class="line">          &#123;</div><div class="line">            title: &#123;</div><div class="line">              text: key</div><div class="line">            &#125;,</div><div class="line">            toolbox: &#123;</div><div class="line">              show: <span class="literal">true</span>,</div><div class="line">              feature: &#123;</div><div class="line">                saveAsImage: &#123;</div><div class="line">                  show:<span class="literal">true</span>,</div><div class="line">                  title: <span class="string">'Save image'</span>,</div><div class="line">                  excludeComponents :[<span class="string">'toolbox'</span>],</div><div class="line">                  pixelRatio: 2</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            tooltip: &#123;</div><div class="line">              trigger: <span class="string">'axis'</span>,</div><div class="line">              axisPointer: &#123;  // 坐标轴指示器，坐标轴触发有效</div><div class="line">                <span class="built_in">type</span>: <span class="string">'line'</span>, // 默认为直线，可选为：<span class="string">'line'</span> | <span class="string">'shadow'</span></div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            legend: &#123;</div><div class="line">              data: type_list,</div><div class="line">            &#125;,</div><div class="line">            xAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">'category'</span>,</div><div class="line">                data: this.dateTime,</div><div class="line">                axisTick: &#123;</div><div class="line">                  alignWithLable: <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">              &#125;,</div><div class="line">            ],</div><div class="line">            yAxis: [</div><div class="line">              &#123;</div><div class="line">                <span class="built_in">type</span>: <span class="string">"value"</span></div><div class="line">              &#125;</div><div class="line">            ],</div><div class="line">            series: [</div><div class="line">              &#123;</div><div class="line">                name: type_list[0],</div><div class="line">                <span class="built_in">type</span>: <span class="string">"line"</span>, // bar, line</div><div class="line">                data: this.selectAllObject[key][type_list[0]],</div><div class="line">                barWidth: <span class="string">'60%'</span></div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                name: type_list[1],</div><div class="line">                <span class="built_in">type</span>: <span class="string">"line"</span>, // bar, line</div><div class="line">                data: this.selectAllObject[key][type_list[1]],</div><div class="line">                barWidth: <span class="string">'60%'</span></div><div class="line">              &#125;</div><div class="line">            ],</div><div class="line">            _width: <span class="string">"45%"</span>,</div><div class="line">            _height: <span class="string">'240px'</span></div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近项目中需要用到图形可视化，制作一系列的报表功能，查询资料后使用echarts来实现功能，主要需要实现根据数据渲染多组数据来展现对比数据&lt;
    
    </summary>
    
      <category term="Frontend" scheme="https://ttxsgoto.github.io/categories/Frontend/"/>
    
    
      <category term="vue" scheme="https://ttxsgoto.github.io/tags/vue/"/>
    
      <category term="echarts" scheme="https://ttxsgoto.github.io/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Vue 生命周期函数</title>
    <link href="https://ttxsgoto.github.io/2019/06/30/vue-life-cycle-function/"/>
    <id>https://ttxsgoto.github.io/2019/06/30/vue-life-cycle-function/</id>
    <published>2019-06-30T11:29:15.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录vue 生命周期函数的学习</p>
<h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 生命周期函数：就是vue实例在某一个时间点会自动执行的函数</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">"#root"</span>,</div><div class="line">    <span class="comment">//template: "",</span></div><div class="line">    data: &#123;</div><div class="line">        <span class="attr">message</span>: <span class="string">"hello world"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="string">'xxxxx'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 生命周期函数</span></div><div class="line">    <span class="comment">// 在实例初始化之后，数据观测 (data observer) 和 </span></div><div class="line">    <span class="comment">// event/watcher 事件配置之前被调用</span></div><div class="line">    beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeCreate'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：</span></div><div class="line">    <span class="comment">// 数据观测 (data observer)，属性和方法的运算，</span></div><div class="line">    <span class="comment">// watch/event 事件回调。</span></div><div class="line">    <span class="comment">// 然而，挂载阶段还没开始，$el 属性目前不可见</span></div><div class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'created'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 在挂载开始之前被调用：相关的 render 函数首次被调用。</span></div><div class="line">    beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 页面还没有挂载，自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeMount'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</span></div><div class="line">    mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 页面挂载后，自动执行</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'mounted'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 实例销毁之前调用。在这一步，实例仍然完全可用</span></div><div class="line">    beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">     	<span class="comment">// 当调用$destroy()方法时，还没有被销毁时，方法被触发</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeDestroy'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，</span></div><div class="line">    <span class="comment">// 所有的事件监听器会被移除，所有的子实例也会被销毁</span></div><div class="line">    destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 当调用$destroy()方法时，完全销毁时方法被触发</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'destroy'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    	<span class="comment">// 数据发生改变，还没有渲染之前执行该函数, vm.message= 'test'</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeUpdate'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 数据渲染之后执行该函数</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'updated'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录vue 生命周期函数的学习&lt;/p&gt;
&lt;h3 id=&quot;生命周期图示&quot;&gt;&lt;a href=&quot;#生命周期图示&quot; class=&quot;headerlink&quot; title=&quot;生命周期图示&quot;&gt;&lt;/a&gt;生命周期图示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://cn.vuejs.org/
    
    </summary>
    
      <category term="Frontend" scheme="https://ttxsgoto.github.io/categories/Frontend/"/>
    
    
      <category term="Vue" scheme="https://ttxsgoto.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Systemd服务</title>
    <link href="https://ttxsgoto.github.io/2019/06/29/yw-systemd/"/>
    <id>https://ttxsgoto.github.io/2019/06/29/yw-systemd/</id>
    <published>2019-06-29T03:07:07.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管理。</p>
<h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><p>systemctl是 Systemd 的主命令，用于管理系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 重启系统</div><div class="line">$ sudo systemctl reboot</div><div class="line"> </div><div class="line"># 关闭系统，切断电源</div><div class="line">$ sudo systemctl poweroff</div><div class="line"> </div><div class="line"># CPU停止工作</div><div class="line">$ sudo systemctl halt</div><div class="line"> </div><div class="line"># 暂停系统</div><div class="line">$ sudo systemctl suspend</div><div class="line"> </div><div class="line"># 让系统进入冬眠状态</div><div class="line">$ sudo systemctl hibernate</div><div class="line"> </div><div class="line"># 让系统进入交互式休眠状态</div><div class="line">$ sudo systemctl hybrid-sleep</div><div class="line"> </div><div class="line"># 启动进入救援状态（单用户状态）</div><div class="line">$ sudo systemctl rescue</div></pre></td></tr></table></figure></p>
<h4 id="systemd-analyze"><a href="#systemd-analyze" class="headerlink" title="systemd-analyze"></a>systemd-analyze</h4><p>systemd-analyze命令用于查看启动耗时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 查看启动耗时</div><div class="line">$ systemd-analyze</div><div class="line"> </div><div class="line"># 查看每个服务的启动耗时</div><div class="line">$ systemd-analyze blame</div><div class="line"> </div><div class="line"># 显示瀑布状的启动过程流</div><div class="line">$ systemd-analyze critical-chain</div><div class="line"> </div><div class="line"># 显示指定服务的启动流</div><div class="line">$ systemd-analyze critical-chain atd.service</div></pre></td></tr></table></figure></p>
<h4 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h4><p>hostnamectl命令用于查看当前主机的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 显示当前主机的信息</div><div class="line">$ hostnamectl</div><div class="line"> </div><div class="line"># 设置主机名</div><div class="line">$ sudo hostnamectl set-hostname test01</div></pre></td></tr></table></figure></p>
<h4 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h4><p>timedatectl命令用于查看当前时区设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 查看当前时区设置</div><div class="line">$ timedatectl</div><div class="line"> </div><div class="line"># 显示所有可用的时区</div><div class="line">$ timedatectl list-timezones                                                        </div><div class="line"># 设置当前时区</div><div class="line">$ sudo timedatectl set-timezone America/New_York</div><div class="line">$ sudo timedatectl set-time YYYY-MM-DD</div><div class="line">$ sudo timedatectl set-time HH:MM:SS</div></pre></td></tr></table></figure></p>
<h4 id="loginctl"><a href="#loginctl" class="headerlink" title="loginctl"></a>loginctl</h4><p>loginctl命令用于查看当前登录的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 列出当前session</div><div class="line">$ loginctl list-sessions</div><div class="line"> </div><div class="line"># 列出当前登录用户</div><div class="line">$ loginctl list-users</div><div class="line"> </div><div class="line"># 列出显示指定用户的信息</div><div class="line">$ loginctl show-user test</div></pre></td></tr></table></figure></p>
<h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Service unit：系统服务</div><div class="line">Target unit：多个 Unit 构成的一个组</div><div class="line">Device Unit：硬件设备</div><div class="line">Mount Unit：文件系统的挂载点</div><div class="line">Automount Unit：自动挂载点</div><div class="line">Path Unit：文件或路径</div><div class="line">Scope Unit：不是由 Systemd 启动的外部进程</div><div class="line">Slice Unit：进程组</div><div class="line">Snapshot Unit：Systemd 快照，可以切回某个快照</div><div class="line">Socket Unit：进程间通信的 socket</div><div class="line">Swap Unit：swap 文件</div><div class="line">Timer Unit：定时器</div></pre></td></tr></table></figure></p>
<p>systemctl list-units命令可以查看当前系统的所有 Unit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 列出正在运行的 Unit</div><div class="line">$ systemctl list-units</div><div class="line"> </div><div class="line"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</div><div class="line">$ systemctl list-units --all</div><div class="line"> </div><div class="line"># 列出所有没有运行的 Unit</div><div class="line">$ systemctl list-units --all --state=inactive</div><div class="line"> </div><div class="line"># 列出所有加载失败的 Unit</div><div class="line">$ systemctl list-units --failed</div><div class="line"> </div><div class="line"># 列出所有正在运行的、类型为 service 的 Unit</div><div class="line">$ systemctl list-units --type=service</div></pre></td></tr></table></figure></p>
<h4 id="Unit-的状态"><a href="#Unit-的状态" class="headerlink" title="Unit 的状态"></a>Unit 的状态</h4><p>systemctl status命令用于查看系统状态和单个 Unit 的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 显示系统状态</div><div class="line">$ systemctl status</div><div class="line"> </div><div class="line"># 显示单个 Unit 的状态</div><div class="line">$ sysystemctl status test.service</div><div class="line">  </div><div class="line"># 显示远程主机的某个 Unit 的状态</div><div class="line">$ systemctl -H root@localhost status httpd.service</div><div class="line">除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</div><div class="line">  </div><div class="line"># 显示某个 Unit 是否正在运行</div><div class="line">$ systemctl is-active test.service</div><div class="line"> </div><div class="line"># 显示某个 Unit 是否处于启动失败状态</div><div class="line">$ systemctl is-failed test.service</div><div class="line"> </div><div class="line"># 显示某个 Unit 服务是否建立了启动链接</div><div class="line">$ systemctl is-enabled test.service</div></pre></td></tr></table></figure></p>
<h4 id="Unit-管理"><a href="#Unit-管理" class="headerlink" title="Unit 管理"></a>Unit 管理</h4><p>最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 立即启动一个服务</div><div class="line">$ sudo systemctl start apache.service</div><div class="line"> </div><div class="line"># 立即停止一个服务</div><div class="line">$ sudo systemctl stop apache.service</div><div class="line"> </div><div class="line"># 重启一个服务</div><div class="line">$ sudo systemctl restart apache.service</div><div class="line"> </div><div class="line"># 杀死一个服务的所有子进程</div><div class="line">$ sudo systemctl kill apache.service</div><div class="line"> </div><div class="line"># 重新加载一个服务的配置文件</div><div class="line">$ sudo systemctl reload apache.service</div><div class="line"> </div><div class="line"># 重载所有修改过的配置文件</div><div class="line">$ sudo systemctl daemon-reload</div><div class="line"> </div><div class="line"># 显示某个 Unit 的所有底层参数</div><div class="line">$ systemctl show httpd.service</div><div class="line"> </div><div class="line"># 显示某个 Unit 的指定属性的值</div><div class="line">$ systemctl show -p CPUShares httpd.service</div><div class="line"> </div><div class="line"># 设置某个 Unit 的指定属性</div><div class="line">$ sudo systemctl set-property httpd.service CPUShares=500</div></pre></td></tr></table></figure></p>
<h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B<br>systemctl list-dependencies命令列出一个 Unit 的所有依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ systemctl list-dependencies nginx.service</div><div class="line">上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。</div><div class="line"> </div><div class="line">$ systemctl list-dependencies --all nginx.service</div></pre></td></tr></table></figure></p>
<h3 id="Unit-配置文件"><a href="#Unit-配置文件" class="headerlink" title="Unit 配置文件"></a>Unit 配置文件</h3><p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个Unit,Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。<br>systemctl enable命令用于在上面两个目录之间，建立符号链接关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl enable test.service </div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/test.service to /usr/lib/systemd/system/test.service.</div></pre></td></tr></table></figure></p>
<p>如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。<br>与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl disable test.service</div></pre></td></tr></table></figure></p>
<p>配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。</p>
<h4 id="配置文件的状态"><a href="#配置文件的状态" class="headerlink" title="配置文件的状态"></a>配置文件的状态</h4><p>systemctl list-unit-files命令用于列出所有配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 列出所有配置文件</div><div class="line">$ systemctl list-unit-files</div><div class="line">UNIT FILE              STATE</div><div class="line">chronyd.service        enabled</div><div class="line">clamd@.service         static</div><div class="line">clamd@scan.service     disabled</div><div class="line"> </div><div class="line">enabled：已建立启动链接</div><div class="line">disabled：没建立启动链接</div><div class="line">static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖</div><div class="line">masked：该配置文件被禁止建立启动链接</div><div class="line"> </div><div class="line"># 列出指定类型的配置文件</div><div class="line">$ systemctl list-unit-files --type=service</div></pre></td></tr></table></figure></p>
<p>从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status test.service</div></pre></td></tr></table></figure></p>
<p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl daemon-reload</div><div class="line">$ sudo systemctl restart httpd.service</div></pre></td></tr></table></figure></p>
<h4 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h4><p>systemctl cat命令可以查看配置文件的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ systemctl cat test.service</div><div class="line"> </div><div class="line">[Unit]</div><div class="line">Description=Test Demo</div><div class="line">After=syslog.target network.target</div><div class="line"> </div><div class="line">[Service]</div><div class="line">ExecStart=/usr/bin/python2.7 /home/user/python/test.py</div><div class="line"> </div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><p>[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Description：简短描述</div><div class="line">Documentation：文档地址</div><div class="line">Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</div><div class="line">Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</div><div class="line">BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</div><div class="line">Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</div><div class="line">After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</div><div class="line">Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</div><div class="line">Condition...：当前 Unit 运行必须满足的条件，否则不会运行</div><div class="line">Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败</div></pre></td></tr></table></figure></p>
<p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中</div><div class="line">RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中</div><div class="line">Alias：当前 Unit 可用于启动的别名</div><div class="line">Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</div></pre></td></tr></table></figure></p>
<p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Type：定义启动时的进程行为。它有以下几种值。</div><div class="line">Type=simple：默认值，执行ExecStart指定的命令，启动主进程</div><div class="line">Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</div><div class="line">Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</div><div class="line">Type=dbus：当前服务通过D-Bus启动</div><div class="line">Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</div><div class="line">Type=idle：若有其他任务执行完毕，当前服务才会运行</div><div class="line">ExecStart：启动当前服务的命令</div><div class="line">ExecStartPre：启动当前服务之前执行的命令</div><div class="line">ExecStartPost：启动当前服务之后执行的命令</div><div class="line">ExecReload：重启当前服务时执行的命令</div><div class="line">ExecStop：停止当前服务时执行的命令</div><div class="line">ExecStopPost：停止当其服务之后执行的命令</div><div class="line">RestartSec：自动重启当前服务间隔的秒数</div><div class="line">Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</div><div class="line">TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</div><div class="line">Environment：指定环境变量</div></pre></td></tr></table></figure></p>
<h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</div><div class="line">$ sudo journalctl</div><div class="line"> </div><div class="line"># 查看内核日志（不显示应用日志）</div><div class="line">$ sudo journalctl -k</div><div class="line"> </div><div class="line"># 查看系统本次启动的日志</div><div class="line">$ sudo journalctl -b</div><div class="line">$ sudo journalctl -b -0</div><div class="line"> </div><div class="line"># 查看上一次启动的日志（需更改设置）</div><div class="line">$ sudo journalctl -b -1</div><div class="line"> </div><div class="line"># 查看指定时间的日志</div><div class="line">$ sudo journalctl --since=&quot;2012-10-30 18:17:16&quot;</div><div class="line">$ sudo journalctl --since &quot;20 min ago&quot;</div><div class="line">$ sudo journalctl --since yesterday</div><div class="line">$ sudo journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot;</div><div class="line">$ sudo journalctl --since 09:00 --until &quot;1 hour ago&quot;</div><div class="line"> </div><div class="line"># 显示尾部的最新10行日志</div><div class="line">$ sudo journalctl -n</div><div class="line"> </div><div class="line"># 显示尾部指定行数的日志</div><div class="line">$ sudo journalctl -n 20</div><div class="line"> </div><div class="line"># 实时滚动显示最新日志</div><div class="line">$ sudo journalctl -f</div><div class="line"> </div><div class="line"># 查看指定服务的日志</div><div class="line">$ sudo journalctl /usr/lib/systemd/systemd</div><div class="line"> </div><div class="line"># 查看某个路径的脚本的日志</div><div class="line">$ sudo journalctl /usr/bin/bash</div><div class="line"> </div><div class="line"># 查看指定用户的日志</div><div class="line">$ sudo journalctl _UID=12 --since today</div><div class="line"> </div><div class="line"># 查看某个 Unit 的日志</div><div class="line">$ sudo journalctl -u nginx.service</div><div class="line">$ sudo journalctl -u nginx.service --since today</div><div class="line"> </div><div class="line"># 实时滚动显示某个 Unit 的最新日志</div><div class="line">$ sudo journalctl -u nginx.service -f</div><div class="line"> </div><div class="line"># 合并显示多个 Unit 的日志</div><div class="line">$ journalctl -u nginx.service -u php-fpm.service --since today</div><div class="line"> </div><div class="line"># 查看指定优先级（及其以上级别）的日志，共有8级</div><div class="line"># 0: emerg</div><div class="line"># 1: alert</div><div class="line"># 2: crit</div><div class="line"># 3: err</div><div class="line"># 4: warning</div><div class="line"># 5: notice</div><div class="line"># 6: info</div><div class="line"># 7: debug</div><div class="line">$ sudo journalctl -p err -b</div><div class="line"> </div><div class="line"># 日志默认分页输出，--no-pager 改为正常的标准输出</div><div class="line">$ sudo journalctl --no-pager</div><div class="line"> </div><div class="line"># 以 JSON 格式（单行）输出</div><div class="line">$ sudo journalctl -b -u nginx.service -o json</div><div class="line"> </div><div class="line"># 以 JSON 格式（多行）输出，可读性更好</div><div class="line">$ sudo journalctl -b -u nginx.serviceqq</div><div class="line"> -o json-pretty</div><div class="line"> </div><div class="line"># 显示日志占据的硬盘空间</div><div class="line">$ sudo journalctl --disk-usage</div><div class="line"> </div><div class="line"># 指定日志文件占据的最大空间</div><div class="line">$ sudo journalctl --vacuum-size=1G</div><div class="line"> </div><div class="line"># 指定日志文件保存多久</div><div class="line">$ sudo journalctl --vacuum-time=1years</div></pre></td></tr></table></figure></p>
<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。</p>
<p>如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl enable httpd</div></pre></td></tr></table></figure></p>
<p>上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。</p>
<p>这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>
<h3 id="修改配置文件后重启"><a href="#修改配置文件后重启" class="headerlink" title="修改配置文件后重启"></a>修改配置文件后重启</h3><p>修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 重新加载配置文件</div><div class="line">$ sudo systemctl daemon-reload</div><div class="line"> </div><div class="line"># 重启相关服务</div><div class="line">$ sudo systemctl restart test.service</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="systemd" scheme="https://ttxsgoto.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>Sersync+Rsync文件同步</title>
    <link href="https://ttxsgoto.github.io/2019/01/10/yw-sersync/"/>
    <id>https://ttxsgoto.github.io/2019/01/10/yw-sersync/</id>
    <published>2019-01-10T13:58:34.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时同步到另外一台的同一目录中，这时就不能使用远程目录挂载方式完成了， 这里使用sersync+rsync来完成需求</p>
<h4 id="Sersync特点"><a href="#Sersync特点" class="headerlink" title="Sersync特点"></a>Sersync特点</h4><ul>
<li>c++编写，对linux系统文件系统产生的临时文件和重复的文件操作进行过滤，结合rsync同步的时候，节省了运行时耗和网络资源</li>
<li>使用多线程进行同步，在同步较大文件时，能够保证多个服务器实时保持同步状态</li>
<li>自带crontab功能，只需在xml配置文件中开启，隔一段时间整体同步一次</li>
<li>自定义同步规则</li>
</ul>
<h4 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h4><p>配置文件说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">uid = root</div><div class="line">gid = root</div><div class="line">port = <span class="number">873</span></div><div class="line">max connections = <span class="number">1000</span></div><div class="line">timeout = <span class="number">600</span></div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">log file = /var/log/rsync.log</div><div class="line">lockfile = /var/run/rsyncd.lock</div><div class="line">motd file = /etc/rsyncd/rsyncd.moth</div><div class="line">log format = %t %a %m %f %b</div><div class="line"> </div><div class="line">[yw_test]</div><div class="line">path = /data/yw_test</div><div class="line">ignore errors = yes</div><div class="line">list = no</div><div class="line">ignore errors</div><div class="line">read only = no</div><div class="line">auth users = rsync</div><div class="line">secrets file = /etc/rsync/rsyncd.secrets</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 600 /etc/rsync/rsyncd.secrets</div><div class="line">rsync --daemon --config=/etc/rsync/rsyncd.conf</div></pre></td></tr></table></figure></p>
<h4 id="Sersync"><a href="#Sersync" class="headerlink" title="Sersync"></a>Sersync</h4><p>配置文件confxml.xml说明<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">host</span> <span class="attr">hostip</span>=<span class="string">"localhost"</span> <span class="attr">port</span>=<span class="string">"8008"</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">debug</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fileSystem</span> <span class="attr">xfs</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--监控事件的过程中过滤特定文件，和特定文件夹的文件 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"log.txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.svn"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.gz"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置要监控的事件 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">inotify</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">createFolder</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">createFile</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">closeWrite</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">moveFrom</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">moveTo</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">attrib</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">modify</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">inotify</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">sersync</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!--设定监控目录--&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/data/test"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--指定远端rsync的地址和模块名--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">remote</span> <span class="attr">ip</span>=<span class="string">"192.168.0.1"</span> <span class="attr">name</span>=<span class="string">"yw_test"</span>/&gt;</span>   </div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">rsync</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!--commonParams params="-rczgop"/--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">commonParams</span> <span class="attr">params</span>=<span class="string">"-artuz"</span>/&gt;</span></div><div class="line">	    <span class="comment">&lt;!--是否启用验证，并指定密码存放文件 --&gt;</span> </div><div class="line">	    <span class="tag">&lt;<span class="name">auth</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">users</span>=<span class="string">"rsync"</span> <span class="attr">passwordfile</span>=<span class="string">"/etc/rsync_client.pass "</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">userDefinedPort</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">port</span>=<span class="string">"873"</span>/&gt;</span><span class="comment">&lt;!-- port=874 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">timeout</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">time</span>=<span class="string">"100"</span>/&gt;</span><span class="comment">&lt;!-- timeout=100 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">ssh</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">rsync</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">failLog</span> <span class="attr">path</span>=<span class="string">"/tmp/rsync_fail_log.log"</span> <span class="attr">timeToExecute</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!--default every 60mins execute once--&gt;</span></div><div class="line">	<span class="comment">&lt;!--是否启用执行完整rsync，并指定执行周期 --&gt;</span>     </div><div class="line">	<span class="tag">&lt;<span class="name">crontab</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">schedule</span>=<span class="string">"5"</span>&gt;</span><span class="comment">&lt;!--5mins--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">crontabfilter</span> <span class="attr">start</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"log.txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.svn"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.gz"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"info/*"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;/<span class="name">crontabfilter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">crontab</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"command"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">sersync</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"command"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">prefix</span>=<span class="string">"/bin/sh"</span> <span class="attr">suffix</span>=<span class="string">""</span> <span class="attr">ignoreError</span>=<span class="string">"true"</span>/&gt;</span>	<span class="comment">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.php"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.sh"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"socket"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/opt/tongbu"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">deshost</span> <span class="attr">ip</span>=<span class="string">"192.168.138.20"</span> <span class="attr">port</span>=<span class="string">"8009"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"refreshCDN"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/data0/htdocs/cms.xoyo.com/site/"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">cdninfo</span> <span class="attr">domainname</span>=<span class="string">"ccms.chinacache.com"</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">username</span>=<span class="string">"xxxx"</span> <span class="attr">passwd</span>=<span class="string">"xxxx"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">sendurl</span> <span class="attr">base</span>=<span class="string">"http://pic.xoyo.com/cms"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">regexurl</span> <span class="attr">regex</span>=<span class="string">"false"</span> <span class="attr">match</span>=<span class="string">"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chmod 600 /etc/rsync_client.pass </div><div class="line">/etc/rsync/sersync2 -r -d -o /etc/rsync/confxml.xml</div><div class="line"> </div><div class="line">-d:启用守护进程模式</div><div class="line">-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</div><div class="line">-n: 指定开启守护线程的数量，默认为10个</div><div class="line">-o:指定配置文件，默认使用confxml.xml文件</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="sersync" scheme="https://ttxsgoto.github.io/tags/sersync/"/>
    
  </entry>
  
  <entry>
    <title>Apollo配置中心</title>
    <link href="https://ttxsgoto.github.io/2019/01/07/yw-apollo/"/>
    <id>https://ttxsgoto.github.io/2019/01/07/yw-apollo/</id>
    <published>2019-01-07T12:59:45.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>之前文章中说过发布流程(<a href="https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/">Jenkins+Gitlab+Harbor构建持续集成</a>),但这里有个问题——不同环境中的配置文件不一样，之前的方案只是把代码发布到机器上，不能“一刀切”使用相同的配置，我们现在使用携程框架部门研发的开源配置管理中心Apollo来完成配置文件分发</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>配置修改实时生效</li>
<li>灰度发布</li>
<li>分环节</li>
<li>分集群管理配置</li>
<li>权限</li>
<li>审核机制等</li>
</ul>
<p>apollo能够集中化管理应用不同环境，不同集群，修改配置后能够实时推送到应用，并具备规范的权限和流程治理特性</p>
<h4 id="4个维度管理k-v配置"><a href="#4个维度管理k-v配置" class="headerlink" title="4个维度管理k-v配置"></a>4个维度管理k-v配置</h4><ul>
<li>application(应用)</li>
<li>environment(环境)</li>
<li>cluster(集群)</li>
<li>namespace(命名空间)</li>
</ul>
<p>配置文件实时生效(热发布),用户在apollo修改完配置并发布后，客户端能实时(1s)接收到最新配置，并通知应用程序</p>
<h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><p>客户端(python)实现参照<br><a href="https://github.com/filamoon/pyapollo" target="_blank" rel="external">https://github.com/filamoon/pyapollo</a></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="external">https://github.com/ctripcorp/apollo</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="external">https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;之前文章中说过发布流程(&lt;a href=&quot;https://ttxsgoto.github.io/2019/01/04/yw-jenkins-
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Apollo" scheme="https://ttxsgoto.github.io/tags/Apollo/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Gitlab+Harbor构建持续集成</title>
    <link href="https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/"/>
    <id>https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/</id>
    <published>2019-01-04T12:41:44.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenkins工具，自动发布代码到对应环境中，然后进行测试，提高研发工作效率和减少运维人员重复工作</p>
<h4 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h4><h5 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h5><p>jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能<br>特点：</p>
<ul>
<li>分布式构建</li>
<li>大量三方插件</li>
<li>变更支持</li>
<li>消息通知</li>
</ul>
<h5 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h5><p>Gitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务<br>特点：</p>
<ul>
<li>代码仓库管理</li>
<li>多人协作</li>
<li>完善的用户、权限管理</li>
</ul>
<h5 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h5><p>Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器<br>特点：</p>
<ul>
<li>基于角色的访问控制</li>
<li>镜像复制</li>
<li>鉴权认证管理</li>
<li>用户管理，访问控制和活动审计</li>
<li>RESTful API</li>
</ul>
<h4 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h4><ol>
<li>通过Jenkins 生成的secret token来关联gitlab Webhooks设置url 和token，当代码有更新时，自动触发构建</li>
<li>将代码拉取到Jenkins运行节点中，通过基础镜像加dockerfile文件构建应用镜像，然后上传到Harbor服务器中</li>
<li>在测试服务器中拉取对应的镜像，然后运行起来</li>
<li>构建完成没有错误，发邮件通知相关人员</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>Jenkins系统设置中需要配置gitlab服务器地址和对应的gitlab api token用于Jenkins和gitlab交互通信</li>
<li>Jenkins任务构建可以指定在固定节点上构建， 构建节点和应用服务器之间必须有登录权限</li>
<li>Harbor镜像管理，需要有鉴权和认证设置</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenki
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Jenkins" scheme="https://ttxsgoto.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Count计数变慢</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-count/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-count/</id>
    <published>2018-12-28T14:48:50.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="count-实现方式"><a href="#count-实现方式" class="headerlink" title="count(*) 实现方式"></a>count(*) 实现方式</h4><p>不同的引擎，实现方式不同</p>
<ul>
<li>Myisam把一个表的总行存在磁盘上，执行时直接返回这个数</li>
<li>Innodb，需要把数据一行行的从引擎中读出来，然后累积计数，遍历全表</li>
</ul>
<h4 id="不同的count用法"><a href="#不同的count用法" class="headerlink" title="不同的count用法"></a>不同的count用法</h4><p>count()为聚合函数，对于返回的结果集，一行行判断，如果count函数的参数不为null，累计值加1，最终返回累计值</p>
<ul>
<li>count(*)</li>
<li>count(id)</li>
<li>count(字段)</li>
<li>count(1)</li>
</ul>
<p>这里count(*),count(id),count(1)返回满足条件的结果集的总行数，而count(字段)返回满足条件不为null的总数<br>性能比较原则：</p>
<ol>
<li>server层要做什么就给什么</li>
<li>innodb只给必要的值</li>
</ol>
<h4 id="效率排序"><a href="#效率排序" class="headerlink" title="效率排序"></a>效率排序</h4><p>count(字段)&lt; count(id)&lt;count(1)=count(*)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;count-实现方式&quot;&gt;&lt;a href=&quot;#count-实现方式&quot; class=&quot;headerlink&quot; title=&quot;count(*) 实现方式&quot;&gt;&lt;/a&gt;count(*) 实现方式&lt;/h4&gt;&lt;p&gt;不同的引擎，实现方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Myisam
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="count" scheme="https://ttxsgoto.github.io/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>Order by工作原理</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-order-by/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-order-by/</id>
    <published>2018-12-28T14:46:51.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h4><p>mysql会给每个线程分配一块内存用于排序，称为sort_buffer</p>
<p>sort_buffer_size 是mysql为排序开辟的内存大小(sort_buffer)大小，如果要排序的数据量小于sort_buffer_size，排序在内存中完成，如果排序数据量太大，大于该值，则需要用磁盘临时文件辅助排序</p>
<h4 id="rowid排序"><a href="#rowid排序" class="headerlink" title="rowid排序"></a>rowid排序</h4><p>全字段排序只对原表数据读取一次，剩下的都在sort_buffer和临时文件中进行，如果查询返回的字段很多，那么sort_buffer里面存放的字段数太多，内存里放下的数据行数就很少，需要分成很多个临时文件，排序的性能会受影响，这时需要使用rowid排序</p>
<p>max_length_for_sort_data 字段用来控制排序的行数据的长度的参数，如果单行的长度超过这个值，mysql会换一种算法，即将查询的列和主键id放入sort_buffer中</p>
<p>这种算法需要多访问一次表的主键索引</p>
<p>如果内存大，mysql就会多利用内存，尽量减少磁盘访问</p>
<p><strong>写入有序数据，通过索引本身就是写入数据就是有序的，那么order by 就不需要排序了，直接就是对应的数据</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;全字段排序&quot;&gt;&lt;a href=&quot;#全字段排序&quot; class=&quot;headerlink&quot; title=&quot;全字段排序&quot;&gt;&lt;/a&gt;全字段排序&lt;/h4&gt;&lt;p&gt;mysql会给每个线程分配一块内存用于排序，称为sort_buffer&lt;/p&gt;
&lt;p&gt;sort_buffer_siz
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="排序" scheme="https://ttxsgoto.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>字符串加索引</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-addindex-to-string/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-addindex-to-string/</id>
    <published>2018-12-28T12:41:50.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数</p>
<p>在建立索引时需要关注的是区分度，区分度越高越好</p>
<p>查看对应索引的区分度方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select count(distinct a) <span class="keyword">as</span> L <span class="keyword">from</span> user;</div><div class="line">select count(*) <span class="keyword">as</span> total <span class="keyword">from</span> user;</div><div class="line"> </div><div class="line">select count(distinct left(a, <span class="number">4</span>) <span class="keyword">as</span> L4,</div><div class="line">       count(distinct left(a, <span class="number">5</span>) <span class="keyword">as</span> L5,</div><div class="line"><span class="keyword">from</span> user</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：使用前缀索引就用不上覆盖索引查询对查询性能的优化，这是在选择是否使用前缀索引时需要考虑的因素</p>
<h4 id="倒序存储"><a href="#倒序存储" class="headerlink" title="倒序存储"></a>倒序存储</h4><p>对前面n位数都是重复的字段，可以使用倒序存储，将存储的内容倒序存储<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select field <span class="keyword">from</span> t where word=reverse(<span class="string">'input_string'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="使用hash字段"><a href="#使用hash字段" class="headerlink" title="使用hash字段"></a>使用hash字段</h4><p>在表中再创建一个整数字段，来保存字段的校验码，同时在这个字段创建索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table t add word_crc int unsigned, <span class="keyword">and</span> index(word_crc);</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>直接创建完整索引，这样可能会占用大量的空间</li>
<li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引</li>
<li>倒序存储，在创建前缀索引，用于绕过字符串本身前缀区分度不高的问题</li>
<li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，同时不支持范围扫描</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前缀索引&quot;&gt;&lt;a href=&quot;#前缀索引&quot; class=&quot;headerlink&quot; title=&quot;前缀索引&quot;&gt;&lt;/a&gt;前缀索引&lt;/h4&gt;&lt;p&gt;前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数&lt;/p&gt;
&lt;p&gt;在建立索引时需要关注的是区分度，区分度越高越好&lt;
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>全局锁、表级锁和行锁</title>
    <link href="https://ttxsgoto.github.io/2018/12/27/yw-mysql-lock/"/>
    <id>https://ttxsgoto.github.io/2018/12/27/yw-mysql-lock/</id>
    <published>2018-12-27T14:44:05.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h4><ul>
<li>全局锁</li>
<li>表级锁</li>
<li>行锁</li>
</ul>
<h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>全局锁就是对整个数据库实例加锁<br>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flush tables with read lock</div></pre></td></tr></table></figure></p>
<p>使用该命令后其他线程的执行语句都会被阻塞：数据更新语句(数据的增删改)和数据定义语句(建表和修改表结构等)和更新事务的提交语句</p>
<p><strong>应用</strong>：全库逻辑备份</p>
<ul>
<li>innodb引擎， mysqldump 使用参数-single-transaction，导数据时会启动一个事务，来确保一致性视图</li>
<li>myisam引擎，不支持事务，需要使用FTWRL命令</li>
</ul>
<h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><h5 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h5><p>语句:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lock tables xxx read/write;</div><div class="line">unlock tables;</div></pre></td></tr></table></figure></p>
<p>表锁是最常用的处理并发的方式，而对于innodb这种行锁的引擎，一般不会使用lock tables命令来控制并发，因为锁住整个表的影响太大</p>
<h5 id="元数据锁-meta-data-lock-MDL"><a href="#元数据锁-meta-data-lock-MDL" class="headerlink" title="元数据锁(meta data lock, MDL)"></a>元数据锁(meta data lock, MDL)</h5><p>MDL不需要显示使用，在访问一个表时会自动加上，MDL的作用，保证读写的正确性</p>
<ul>
<li>在对一个表做增删改查操作，加MDL读锁，当要对表做结构变更操作，加MDL写锁</li>
<li>读锁之间不互斥，可以有多个线程对一张表增删改查</li>
<li>读写锁之间，写锁之间互斥，用来保证变更表结构操作的安全性,如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完成后才能开始执行</li>
</ul>
<h5 id="安全给小表加字段"><a href="#安全给小表加字段" class="headerlink" title="安全给小表加字段"></a>安全给小表加字段</h5><ol>
<li>需要解决长事务，事务不提交，就会一直占用MDL锁，mysql中的information_schema库中INNODB_TRX表中记录着当前执行中的事务</li>
<li>变更热点表，在alter table语句里面设置等待时间，如果在等待时间没有拿到也不会阻塞 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table xxx nowait add column ...</div><div class="line">alter table yyy wait n add column ...</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>行锁是针对数据表中的行记录的锁</p>
<p>mysql行锁是在引擎层自己实现的，并不是所有引擎都支持行锁，如myisam引擎不支持行锁，只能使用表锁，任何时刻只能有一个更新在执行，影响业务并发度</p>
<h5 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h5><p>在innodb事务中，行锁是在需要的时候才加上，但并不是不需要了立刻释放，而是要等到事务结束时才释放</p>
<p><strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放</strong></p>
<h5 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h5><p>死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态</p>
<p>出现死锁，解决策略：</p>
<ul>
<li>直接进入等待，直到超时，超时时间可以通过参数<code>innodb_lock_wait_timeout</code>来设置，默认值为50s</li>
<li>发起死锁检测，发现死锁后，主动回滚死锁链条中的某个事物，让其他事物得以继续执行，通过参数<code>innodb_deadlock_detect</code>设置为on，来开启死锁检测</li>
</ul>
<p>如果所有事务都要更新同一行，这时死锁检测将消耗大量cpu资源，因此出现cpu利用率很高，但每秒执行不了多少事务</p>
<p>解决方案：</p>
<ul>
<li>控制并发，在数据库服务端控制并发，需要修改mysql源码，要求高</li>
<li>业务上，将更新一行改为逻辑上的多行来减少锁冲突</li>
<li>减少死锁的主要方向，控制访问相同资源的并发事务量</li>
</ul>
<p>innodb行级锁是通过锁索引记录实现的，如果更新的列没有建索引会锁住整个表的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;锁分类&quot;&gt;&lt;a href=&quot;#锁分类&quot; class=&quot;headerlink&quot; title=&quot;锁分类&quot;&gt;&lt;/a&gt;锁分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;全局锁&lt;/li&gt;
&lt;li&gt;表级锁&lt;/li&gt;
&lt;li&gt;行锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;全局锁&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Lock" scheme="https://ttxsgoto.github.io/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>事务隔离</title>
    <link href="https://ttxsgoto.github.io/2018/12/26/yw-mysql-transaction/"/>
    <id>https://ttxsgoto.github.io/2018/12/26/yw-mysql-transaction/</id>
    <published>2018-12-26T13:42:58.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持</p>
<h4 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h4><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h4 id="多事务同时执行引起的问题"><a href="#多事务同时执行引起的问题" class="headerlink" title="多事务同时执行引起的问题"></a>多事务同时执行引起的问题</h4><ul>
<li>脏读</li>
<li>不可重复读</li>
<li>幻读</li>
</ul>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><ul>
<li>读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到</li>
<li>读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到</li>
<li>可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的</li>
<li>串行化(serializable) “写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突时，后访问的事务必须等前一个事务执行完成后，才能继续执行</li>
</ul>
<h4 id="配置事务方法"><a href="#配置事务方法" class="headerlink" title="配置事务方法"></a>配置事务方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">启动参数transaction-isolation</div></pre></td></tr></table></figure>
<h4 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h4><p>每条记录在更新的时候都会同时记录一条回滚操作。通过回滚操作，都可以得到前一个状态的值</p>
<p>同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。</p>
<p>回滚日志在不需要的时候删除，当系统里没有比这个回滚日志更早的read-view时候，系统自动删除</p>
<h4 id="尽量不要使用长事务"><a href="#尽量不要使用长事务" class="headerlink" title="尽量不要使用长事务"></a>尽量不要使用长事务</h4><p>长事务意味着系统里面会存在很老的事务视图，在事务提交之前，回滚日志必须保留，这就会导致大量占用存储空间</p>
<h4 id="事务的启动方式"><a href="#事务的启动方式" class="headerlink" title="事务的启动方式"></a>事务的启动方式</h4><ul>
<li><p>显示启动事务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">begin transaction</div><div class="line">do something</div><div class="line">commit / rollback</div></pre></td></tr></table></figure>
</li>
<li><p>set autocommit=0，将这个线程的自动提交关掉，只要你执行一个查询语句，事务就启动了，接下来的查询都在事务中，如果是长连接，将导致意外的长事务，这样直到你主动执行commit或者rollback语句或者断开连接才释放，可以通过set autocommit=1来显式方式来启动事务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">begin tracsaction; #  不是一个事务的起点，在执行到它之后的第一个操作InnoDB语句，事务才真正启动</div><div class="line">start transaction with consistent snapshot; # 马上启动一个事务</div><div class="line"> </div><div class="line">commit;     # 提交事务</div><div class="line">autocommit=1;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="事务隔离-or-不隔离"><a href="#事务隔离-or-不隔离" class="headerlink" title="事务隔离 or 不隔离"></a>事务隔离 or 不隔离</h4><p>如果是可重复读隔离级别，事务启动时会创建一个视图read-view，之后事务执行期间，即使有其他事务修改了数据，该事务看到的仍然跟启动时看到的一样，也就是在可重复读隔离级别下执行事务，不受外界影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start transaction with consistent snapshot;    # 执行该命令后马上启动一个事务</div></pre></td></tr></table></figure></p>
<p>Mysql中的两个“视图”：</p>
<ul>
<li>一个view，用于查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果</li>
<li>InnoDB在实现MCVV时用到的一致性读视图，即consistent read view，用于支持RC(Read Committed，读提交)和RR(Repeatable Read，可重复读)隔离级别的实现，作用在事务执行期间用来定义”我能看到什么数据”</li>
</ul>
<h4 id="“快照”在MVCC里是怎么工作的"><a href="#“快照”在MVCC里是怎么工作的" class="headerlink" title="“快照”在MVCC里是怎么工作的"></a>“快照”在MVCC里是怎么工作的</h4><p>在可重复读隔离级别下，事务在启动的时候就拍下快照，这个快照是基于整库</p>
<p>Innodb里面每个事务有一个唯一的事务ID，叫作transaction id，它是在事务开始的时候向Innodb的事务系统申请的，是按申请顺序严格递增的</p>
<p>每行数据也都都是有多个版本的，每次事务更新数据时，都会生成一个新的数据版本，而且把transaction id赋值给这个数据版本的事务id，记为row trx_id; 同时，旧的数据版本要保留，并且在新的数据版本中能够有信息可以直接拿到它</p>
<p>数据表中一行记录，其实可能有多个版本(row)，每个版本有自己的rowtrx_id</p>
<p>InnoDB利用了“所有数据都有多个版本”的特性，实现了“秒级创建快照的能力”</p>
<p>更新数据都要先读后写，而这个读，只能读当前的值，称之为”当前读”；当前读总是读取已经提交完成的最新版本</p>
<ul>
<li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据</li>
<li>对于读提交，查询只承认在语句启动前就已经提交完成的数据</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h4&gt;&lt;p&gt;事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持&lt;/p&gt;
&lt;h4 id=&quot;事务的特性
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Transaction" scheme="https://ttxsgoto.github.io/tags/Transaction/"/>
    
  </entry>
  
  <entry>
    <title>Redo log 和 Binlog</title>
    <link href="https://ttxsgoto.github.io/2018/12/25/yw-mysql-redo-binlog/"/>
    <id>https://ttxsgoto.github.io/2018/12/25/yw-mysql-redo-binlog/</id>
    <published>2018-12-25T11:43:38.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>WAL(Write-Ahead-Logging),先写日志，再写磁盘</p>
<ul>
<li>redo log(重做日志)<ul>
<li>存储引擎层面</li>
<li>存储容量大小固定，循环写</li>
<li>checkpoint 当前要擦除的位置，擦除记录前需要将数据更新到数据文件中</li>
<li>write-pos 当前写入记录的位置</li>
<li>功能：保证InnoDB即使数据库发生异常重启，之前提交的记录也不会丢失(crash-safe)</li>
<li>插件式，innodb引擎特有</li>
<li>物流日志-记录在某个数据页上做了什么修改</li>
</ul>
</li>
<li>binlog(归档日志)<ul>
<li>Server层面</li>
<li>逻辑日志，记录的是这个语句的原始逻辑，sql语句是什么样子的</li>
</ul>
</li>
</ul>
<p>执行器和引擎执行update操作流程：</p>
<ol>
<li>先取出该查询，如果在内存中则直接返回给执行器，否则先从磁盘读入内存，然后返回</li>
<li>执行器拿到引擎给的行数据，执行相关操作，再调用引擎接口写入这行新数据</li>
<li>引擎将这行新数据更新到内存中，同时将这个更新记录到redo log中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务</li>
<li>执行器生成这个操作的binlog，将binlog写入磁盘</li>
<li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改写提交(commit)状态，更新完成</li>
</ol>
<p>流程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">获取数据 ——&gt; 返回数据 ——&gt; 执行逻辑 ——&gt; 写入新行 ——&gt; 新行更新到内存 ——&gt; 写入redo log处于prepare状态 ——&gt; 写binlog ——&gt; 提交事务redo log处于commit状态完成</div></pre></td></tr></table></figure></p>
<p>redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致</p>
<p>数据一致性保持理解：</p>
<p>1 prepare阶段<br>2 写binlog<br>3 commit</p>
<p>当在2之前崩溃时<br>重启恢复：后发现没有commit，回滚。备份恢复：没有binlog 一致<br>当在3之前崩溃<br>重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。备份：有binlog. 一致</p>
<p><strong>参数配置</strong><br>innodb_flush_log_at_trx_commit 参数设置成1时，表示每次事务的redo log都直接持久化到磁盘，保证mysql异常重启后数据不丢失<br>sync_binlog参数设置成1时，表示每次事务的binlog都持久化到磁盘，保证mysql异常重启后binlog不丢失</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WAL(Write-Ahead-Logging),先写日志，再写磁盘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redo log(重做日志)&lt;ul&gt;
&lt;li&gt;存储引擎层面&lt;/li&gt;
&lt;li&gt;存储容量大小固定，循环写&lt;/li&gt;
&lt;li&gt;checkpoint 当前要擦除的位置，擦除记录前需要将
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="binlog" scheme="https://ttxsgoto.github.io/tags/binlog/"/>
    
  </entry>
  
  <entry>
    <title>索引选择</title>
    <link href="https://ttxsgoto.github.io/2018/12/21/yw-mysql-select-index/"/>
    <id>https://ttxsgoto.github.io/2018/12/21/yw-mysql-select-index/</id>
    <published>2018-12-21T03:14:08.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="优化器选择索引逻辑"><a href="#优化器选择索引逻辑" class="headerlink" title="优化器选择索引逻辑"></a>优化器选择索引逻辑</h4><ul>
<li>扫描行数</li>
<li>使用临时表</li>
<li>是否排序</li>
</ul>
<h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><p>一个索引上不同值的个数，称之为“基数(cardinality)”;基数越大，索引的区分度越好</p>
<p>show index from x 查看索引对应的基数</p>
<ul>
<li>采样统计， 通过设置参数innodb_stats_persistent来设置  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">设置为on，表示统计信息会持久化存储，默认值N为20，M为10</div><div class="line">设置为off, 表示统计信息只存储在内存中，默认值N为8，M为16</div></pre></td></tr></table></figure>
</li>
</ul>
<p>analyze table t # 用于重新统计索引信息，当发现explain中rows值和实际情况差距比较大时，可以采用使用该命令来处理</p>
<h4 id="索引选择异常和处理"><a href="#索引选择异常和处理" class="headerlink" title="索引选择异常和处理"></a>索引选择异常和处理</h4><ul>
<li><p>使用force index强制选择一个索引</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from t force index(a) where a between 1000 and 2000;</div></pre></td></tr></table></figure>
</li>
<li><p>修改查询语句</p>
</li>
<li>新建更合适的索引，来提供优化器来选择，或者删掉误用的索引</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;优化器选择索引逻辑&quot;&gt;&lt;a href=&quot;#优化器选择索引逻辑&quot; class=&quot;headerlink&quot; title=&quot;优化器选择索引逻辑&quot;&gt;&lt;/a&gt;优化器选择索引逻辑&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;扫描行数&lt;/li&gt;
&lt;li&gt;使用临时表&lt;/li&gt;
&lt;li&gt;是否排序&lt;/l
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>普通索引和唯一索引的区别</title>
    <link href="https://ttxsgoto.github.io/2018/12/20/yw-mysql-unique-index/"/>
    <id>https://ttxsgoto.github.io/2018/12/20/yw-mysql-unique-index/</id>
    <published>2018-12-20T12:11:46.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><ul>
<li>查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止</li>
<li>唯一索引，找到第一个满足条件记录，停止检索</li>
</ul>
<h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><p>change buffer:如果数据页没有在内存中，innodb会将更新操作缓存在change buffer中，这样不需要从磁盘中读取数据页；下次查询访问这个数据页时，将数据页读入内存，然后执行change buffer中和这个页有关的操作</p>
<ul>
<li>唯一索引更新操作不能使用change buffer，因为判断记录是否存在，必须将数据页读入内存，只有普通索引更新操作可以使用change buffer</li>
<li>change buffer使用的是buffer pool里的内存，大小可以通过参数<strong>innodb_change_buffer_max_size</strong>来设置</li>
</ul>
<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><ol>
<li>记录要更新的目标页在内存中，此时插入操作基本一致，从内存中读取数据对应的位置，执行插入语句</li>
<li>记录要更新的目标页不在内存中<ul>
<li>唯一索引，需要将数据页读入到内存，判断有没有冲突，执行语句</li>
<li>普通索引，将更新记录到change buffer，执行语句</li>
</ul>
</li>
</ol>
<p>将数据从磁盘读入内存涉及到随机IO访问，成本高；change buffer减少了随机磁盘访问，所以对更新性能的提升更明显</p>
<h4 id="change-buffer使用场景"><a href="#change-buffer使用场景" class="headerlink" title="change buffer使用场景"></a>change buffer使用场景</h4><p>适用于写多读少的业务场景，写入后不立即读取，常见业务系统如日志、账单类系统</p>
<p>如果业务更新后马上需要做查询，即更新先记录change buffer，之后查询这个数据页，会立刻触发merge操作，这样随机访问io次数不会减少，反而增加了change buffer的维护代价</p>
<h4 id="索引选择"><a href="#索引选择" class="headerlink" title="索引选择"></a>索引选择</h4><ul>
<li>查询性能方面无差异</li>
<li>更新操作，因为有change buffer机制，所以普通索引更新操作性能更好</li>
</ul>
<h4 id="change-buffer-amp-amp-redo-log"><a href="#change-buffer-amp-amp-redo-log" class="headerlink" title="change buffer &amp;&amp; redo log"></a>change buffer &amp;&amp; redo log</h4><ul>
<li>redo log 主要节省的是随机写磁盘IO消耗(转成顺序写)</li>
<li>change buffer主要节省的是随机读磁盘io的消耗</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;查询操作&quot;&gt;&lt;a href=&quot;#查询操作&quot; class=&quot;headerlink&quot; title=&quot;查询操作&quot;&gt;&lt;/a&gt;查询操作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止&lt;/li&gt;
&lt;li&gt;唯一索引，找到第一个满足
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 出现You can&#39;t specify target table for update in FROM clause错误的解决方法</title>
    <link href="https://ttxsgoto.github.io/2018/12/03/yw-mysql-question/"/>
    <id>https://ttxsgoto.github.io/2018/12/03/yw-mysql-question/</id>
    <published>2018-12-03T12:22:02.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>在同一个sql语句中，先select同一个表的某些值，然后再update这个表</p>
<p>如执行如下sql语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update logistic_statistic set fluid_id=<span class="string">'cca03b6a372045f2891fef62d9524652'</span> where id <span class="keyword">in</span> (</div><div class="line">  select id <span class="keyword">from</span> logistic_statistic where company= <span class="string">'新能源有限公司'</span>);</div></pre></td></tr></table></figure></p>
<p>执行报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error : You can<span class="string">'t specify target table '</span>logistic_statistic<span class="string">' for update in FROM clause</span></div></pre></td></tr></table></figure></p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>select的结果再通过一个中间表select多一次，就可以避免这个错误</p>
<p>执行如下sql语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">update logistic_statistic set fluid_id=<span class="string">"cca03b6a372045f2891fef62d9524652"</span> where id <span class="keyword">in</span> ( </div><div class="line">  select other_id <span class="keyword">from</span> ( </div><div class="line">    SELECT id <span class="keyword">as</span> other_id <span class="keyword">from</span> logistic_statistic where company= <span class="string">'新能源有限公司'</span>) <span class="keyword">as</span> a ;</div><div class="line">  );</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h4&gt;&lt;p&gt;在同一个sql语句中，先select同一个表的某些值，然后再update这个表&lt;/p&gt;
&lt;p&gt;如执行如下sql语句：
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Django+Celery 计划任务</title>
    <link href="https://ttxsgoto.github.io/2018/10/24/python-django-celery/"/>
    <id>https://ttxsgoto.github.io/2018/10/24/python-django-celery/</id>
    <published>2018-10-24T14:38:48.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态</p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>想到使用计划任务来自动流转流程，因为项目本身是Django，这里使用djcelery来完成</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>项目依赖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install django-celery</div><div class="line">pip install flower</div></pre></td></tr></table></figure></p>
<p>settings.py配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">   ...</div><div class="line">   <span class="string">'djcelery'</span>,</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="keyword">import</span> djcelery</div><div class="line"> </div><div class="line">djcelery.setup_loader()</div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379/1'</span></div><div class="line">CELERYBEAT_SCHEDULER = <span class="string">'djcelery.schedulers.DatabaseScheduler'</span></div><div class="line"><span class="comment"># CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'    # 结果存储，存储到数据库</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/1'</span></div><div class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'application/json'</span>]</div><div class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></div><div class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line"> </div><div class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">3600</span>  <span class="comment"># celery任务执行结果的超时时间，</span></div><div class="line">CELERYD_FORCE_EXECV = <span class="keyword">True</span>  <span class="comment"># 有些情况下可以防止死锁</span></div><div class="line">CELERYD_PREFETCH_MULTIPLIER = <span class="number">1</span></div><div class="line">CELERYD_MAX_TASKS_PER_CHILD = <span class="number">100</span>   <span class="comment"># 每个worker最多执行万100个任务就会被销毁，可防止内存泄露</span></div><div class="line"><span class="comment"># CELERYD_CONCURRENCY = 10  # celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以</span></div></pre></td></tr></table></figure></p>
<p>接下来在settings.py的同级目录中新建 celery.py文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</div><div class="line"><span class="keyword">import</span> os</div><div class="line"> </div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"> </div><div class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'Server.settings'</span>)</div><div class="line"> </div><div class="line">app = Celery(<span class="string">'Server'</span>) <span class="comment">#, backend='redis', broker='redis://127.0.0.1:6379/1')</span></div><div class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>)</div><div class="line">app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</div></pre></td></tr></table></figure>
<p>修改<strong>init</strong>.py添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</div><div class="line">  </div><div class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</div></pre></td></tr></table></figure></p>
<p>在对应的app中添加tasks.py文件(这里必须为tasks.py文件，不然在admin中添加任务时找不到task)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task, task</div><div class="line">  </div><div class="line"><span class="meta">@shared_task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto_audit</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'func auto audit'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    print(<span class="string">'x + y = '</span>, x + y)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>在views.py中调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .tasks <span class="keyword">import</span> add</div><div class="line">  </div><div class="line">add.delay(<span class="number">3</span>, <span class="number">5</span>) <span class="comment">#发送消息，触发后台任务</span></div></pre></td></tr></table></figure></p>
<p>celery启动，当然实际环境中应该使用supervisor启动<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">python manage.py celery worker -l info  <span class="comment"># 启动 worker</span></div><div class="line">python manage.py celery beat -l info    <span class="comment"># 启动 beat</span></div><div class="line">python manage.py celery worker -B -l info  <span class="comment"># 启动 worker 和 beat</span></div><div class="line">python manage.py celery flower --address=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --port=<span class="number">5555</span> --basic_auth=admin:admin    <span class="comment"># 启动celery flower监控</span></div></pre></td></tr></table></figure></p>
<h4 id="Admin后台添加计划任务"><a href="#Admin后台添加计划任务" class="headerlink" title="Admin后台添加计划任务"></a>Admin后台添加计划任务</h4><p>在DJCELERY中Periodic tasks添加计划任务即可</p>
<h4 id="Flower监控celery"><a href="#Flower监控celery" class="headerlink" title="Flower监控celery"></a>Flower监控celery</h4><p>主要用于监控任务执行是否成功，和broker和worker对应的状态</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态&lt;/p&gt;
&lt;h4 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot;
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Djcelery" scheme="https://ttxsgoto.github.io/tags/Djcelery/"/>
    
  </entry>
  
  <entry>
    <title>运维 Redis进阶</title>
    <link href="https://ttxsgoto.github.io/2018/09/28/redis-advance/"/>
    <id>https://ttxsgoto.github.io/2018/09/28/redis-advance/</id>
    <published>2018-09-28T13:14:53.000Z</published>
    <updated>2019-07-04T23:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发</p>
<h4 id="使用redis目的"><a href="#使用redis目的" class="headerlink" title="使用redis目的"></a>使用redis目的</h4><ul>
<li>高性能：将数据缓存在redis中，访问数据从缓存中取，不直接访问数据库，提高页面响应效率</li>
<li>高并发：在大的并发情况下，直接操作缓存能够承受的请求远大于直接访问数据库，这时我们需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库</li>
</ul>
<h4 id="一般应用场景"><a href="#一般应用场景" class="headerlink" title="一般应用场景"></a>一般应用场景</h4><ul>
<li>缓存-热数据：需要执行耗时久，计算结果不频繁变动的sql查询</li>
<li>异步队列</li>
<li>计数器：如统计点击数，INCRBY</li>
<li>分布式锁与单线程机制</li>
<li>最新列表：使用LPUSH命令构建List</li>
<li>排行榜应用： 使用ZADD(有续集，sorted set)</li>
<li>位操作(大数据处理)</li>
</ul>
<h4 id="单线程的redis为什么快"><a href="#单线程的redis为什么快" class="headerlink" title="单线程的redis为什么快"></a>单线程的redis为什么快</h4><ul>
<li>纯内存操作</li>
<li>单线程操作，避免了频繁的上下文切换</li>
<li><p>采用非阻塞I/O多路复用机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在redis服务端，启用了I/O多路复用机制，将其置于队列中，然后文件事件分发器依次去队列中去取，转发到不同的事件处理器中处理</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="常见数据结构和使用场景"><a href="#常见数据结构和使用场景" class="headerlink" title="常见数据结构和使用场景"></a>常见数据结构和使用场景</h4><ul>
<li>String </li>
</ul>
<p>常用的命令： set、get、decr、incr、mget、mset<br>String 数据结构是简单的 Key-Value 类型，Value 可为字符和数值和其他类型的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置和获取key-value</span></div><div class="line">set mykey ttxsgoto</div><div class="line">get mykey</div><div class="line"> </div><div class="line"><span class="comment"># 原子递增</span></div><div class="line">set counter <span class="number">100</span></div><div class="line">incr counter ((integer) <span class="number">101</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 一次性存储和获取多个key对应的值,mget 命令返回由值组成的数组</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset a <span class="number">10</span> b <span class="number">20</span> c <span class="number">30</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a b c</div><div class="line"><span class="number">1</span>) <span class="string">"10"</span></div><div class="line"><span class="number">2</span>) <span class="string">"20"</span></div><div class="line"><span class="number">3</span>) <span class="string">"30"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</div><div class="line"><span class="number">1</span>) <span class="string">"ttxs"</span></div><div class="line"><span class="number">2</span>) <span class="string">"c"</span></div><div class="line"><span class="number">3</span>) <span class="string">"a"</span></div><div class="line"><span class="number">4</span>) <span class="string">"counter"</span></div><div class="line"><span class="number">5</span>) <span class="string">"b"</span></div><div class="line"><span class="number">6</span>) <span class="string">"mykey"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exists a</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exists x</div><div class="line">(integer) <span class="number">0</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; type a</div><div class="line">string</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> a</div><div class="line">(integer) <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="comment"># 设置过期时间</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get b</div><div class="line"><span class="string">"20"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; expire b <span class="number">5</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get b</div><div class="line">(nil)</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set bbb <span class="number">1000</span> ex <span class="number">100</span></div><div class="line">OK</div><div class="line"><span class="comment"># 查看过期时间</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ttl bbb</div><div class="line">(integer) <span class="number">95</span></div></pre></td></tr></table></figure></p>
<ul>
<li>Hash</li>
</ul>
<p>常用命令：hget、hset、 hmget、hmset、hgetall<br>Hash 是一个 String 类型的 Field 和 Value 的映射表，Hash 特别适合用于存储对象；后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由键值对组成</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmset user:<span class="number">1000</span> username antirez birthyear <span class="number">1977</span> verified <span class="number">1</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget user:<span class="number">1000</span> username</div><div class="line"><span class="string">"antirez"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall user:<span class="number">1000</span></div><div class="line"><span class="number">1</span>) <span class="string">"username"</span></div><div class="line"><span class="number">2</span>) <span class="string">"antirez"</span></div><div class="line"><span class="number">3</span>) <span class="string">"birthyear"</span></div><div class="line"><span class="number">4</span>) <span class="string">"1977"</span></div><div class="line"><span class="number">5</span>) <span class="string">"verified"</span></div><div class="line"><span class="number">6</span>) <span class="string">"1"</span></div><div class="line"> </div><div class="line"><span class="comment"># 返回多个值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmget user:<span class="number">1000</span> username birthyear xxx</div><div class="line"><span class="number">1</span>) <span class="string">"antirez"</span></div><div class="line"><span class="number">2</span>) <span class="string">"1977"</span></div><div class="line"><span class="number">3</span>) (nil)</div></pre></td></tr></table></figure></p>
<ul>
<li>List</li>
</ul>
<p>常用命令：lpush、rpush、lpop、rpop、lrange<br>List 就是链表，Redis List 的应用场景非常多，也是 Redis 最重要的数据结构之一<br>Redis List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销<br>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 List 实现分页查询</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lpush 向list的左边（头部）添加一个新元素</span></div><div class="line"><span class="comment"># rpush 向list的右边（尾部）添加一个新元素</span></div><div class="line"><span class="comment"># lrange 从list中取出一定范围的元素</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist A</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist B</div><div class="line">(integer) <span class="number">2</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush mylist first</div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="comment"># 写入多个值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="string">"foo bar"</span></div><div class="line">(integer) <span class="number">9</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="number">4</span>) <span class="string">"1"</span></div><div class="line"><span class="number">5</span>) <span class="string">"2"</span></div><div class="line"><span class="number">6</span>) <span class="string">"3"</span></div><div class="line"><span class="number">7</span>) <span class="string">"4"</span></div><div class="line"><span class="number">8</span>) <span class="string">"5"</span></div><div class="line"><span class="number">9</span>) <span class="string">"foo bar"</span></div><div class="line"> </div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist001 a b c</div><div class="line"><span class="comment"># 删除元素并同时返回删除的值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpop mylist001</div><div class="line"><span class="string">"c"</span></div><div class="line"> </div><div class="line"><span class="comment"># ltrim把list从左边截取指定长度</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ltrim mylist <span class="number">0</span> <span class="number">2</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="comment"># 查看list中元素的个数</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; llen mylist</div><div class="line">(integer) <span class="number">6</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> mylist</div><div class="line">(integer) <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>Set</li>
</ul>
<p>常用命令：sadd、spop、smembers、sunion<br>Set 对外提供的功能与 List 类似是一个列表的功能，特殊之处在于 Set 是可以自动排重<br>当你需要存储一个列表数据，又不希望出现重复数据时，可以使用Set，同时也支持交集、并集、差集操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd myset <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="comment"># 查看所有</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers myset</div><div class="line"><span class="number">1</span>) <span class="string">"1"</span></div><div class="line"><span class="number">2</span>) <span class="string">"2"</span></div><div class="line"><span class="number">3</span>) <span class="string">"3"</span></div><div class="line"><span class="comment"># 检查元素是否存在</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember myset <span class="number">1</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember myset <span class="number">4</span></div><div class="line">(integer) <span class="number">0</span></div></pre></td></tr></table></figure></p>
<ul>
<li>Sorted Set</li>
</ul>
<p>常用命令：zadd、zrange、zrem、zcard<br>和 Set 相比，Sorted Set 增加了一个权重参数 Score，使得集合中的元素能够按 Score 进行有序排列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># zadd 添加</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1940</span> <span class="string">"Alan Kay"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1957</span> <span class="string">"Sophie Wilson"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1953</span> <span class="string">"Richard Stallman"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1949</span> <span class="string">"Anita Borg"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1965</span> <span class="string">"Yukihiro Matsumoto"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1914</span> <span class="string">"Hedy Lamarr"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1916</span> <span class="string">"Claude Shannon"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1969</span> <span class="string">"Linus Torvalds"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1912</span> <span class="string">"Alan Turing"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="comment"># 查看数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange hackers <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">6</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">7</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">8</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">9</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"> </div><div class="line"><span class="comment"># 反向查看数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrange hackers <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">6</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">7</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">8</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">9</span>) <span class="string">"Alan Turing"</span></div><div class="line"> </div><div class="line"><span class="comment"># 查看对应的得分</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange hackers <span class="number">0</span> <span class="number">-1</span> withscores</div><div class="line"> <span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"> <span class="number">2</span>) <span class="string">"1912"</span></div><div class="line"> <span class="number">3</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"> <span class="number">4</span>) <span class="string">"1914"</span></div><div class="line"> <span class="number">5</span>) <span class="string">"Claude Shannon"</span></div><div class="line"> <span class="number">6</span>) <span class="string">"1916"</span></div><div class="line"> <span class="number">7</span>) <span class="string">"Alan Kay"</span></div><div class="line"> <span class="number">8</span>) <span class="string">"1940"</span></div><div class="line"> <span class="number">9</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">10</span>) <span class="string">"1949"</span></div><div class="line"><span class="number">11</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">12</span>) <span class="string">"1953"</span></div><div class="line"><span class="number">13</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">14</span>) <span class="string">"1957"</span></div><div class="line"><span class="number">15</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">16</span>) <span class="string">"1965"</span></div><div class="line"><span class="number">17</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"><span class="number">18</span>) <span class="string">"1969"</span></div><div class="line">  </div><div class="line"><span class="comment"># 小于1950的数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrangebyscore hackers -inf <span class="number">1950</span></div><div class="line"><span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div></pre></td></tr></table></figure></p>
<h4 id="过期策略以及内存淘汰机制"><a href="#过期策略以及内存淘汰机制" class="headerlink" title="过期策略以及内存淘汰机制"></a>过期策略以及内存淘汰机制</h4><p>redis采用的是定期删除+惰性删除策略</p>
<ul>
<li>定期删除：Redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 Key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机？假如 Redis 存了几十万个 Key ，每隔 100ms 就遍历所有的设置过期时间的 Key 的话，就会给 CPU 带来很大的负载</li>
<li><p>惰性删除 ：定期删除可能会导致很多过期 Key 到了时间并没有被删除掉。所以就有了惰性删除，也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除</p>
</li>
<li><p>内存淘汰机制： 在redis配置文件中配置 # maxmemory-policy volatile-lru<br>Redis 提供 6 种数据淘汰策略：</p>
</li>
</ul>
<pre><code>- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
- allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）
- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
- no-enviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错
</code></pre><h4 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h4><p>Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file，AOF）。</p>
<ul>
<li><p>RDB 快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save <span class="number">900</span> <span class="number">1</span>              <span class="comment">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class="line">save <span class="number">300</span> <span class="number">10</span>            <span class="comment">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class="line">save <span class="number">60</span> <span class="number">10000</span>        <span class="comment">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div></pre></td></tr></table></figure>
</li>
<li><p>AOF<br>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案<br>默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">appendonly yes</div></pre></td></tr></table></figure>
</li>
</ul>
<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。</p>
<p>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。</p>
<p>在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">appendfsync always     <span class="comment">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span></div><div class="line">appendfsync everysec  <span class="comment">#每秒钟同步一次，显示地将多个写命令同步到硬盘</span></div><div class="line">appendfsync no      <span class="comment">#让操作系统决定何时进行同步</span></div></pre></td></tr></table></figure></p>
<p>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。</p>
<ul>
<li>Redis 4.0 对于持久化机制的优化</li>
</ul>
<p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。</p>
<p>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。</p>
<p>这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。</p>
<p>当然缺点也是有的，AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>当缓存失效(过期)后引起系统性能急剧下降的情况</p>
<p>解决方案：</p>
<ul>
<li><p>更新锁机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对缓存更新操作进行加锁保护，保证只有一个线程进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么返回一个空值或者默认值</div></pre></td></tr></table></figure>
</li>
<li><p>后台更新机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">由后台线程更新缓存， 不是由业务来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存</div></pre></td></tr></table></figure>
</li>
<li><p>给缓存的失效时间加一个随机值，避免集体失效</p>
</li>
<li>使用双缓存，缓存A和B,A设置失效时间，B不设置失效  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 从缓存A读取数据，有就返回</div><div class="line">- A没有数据，直接从B读取数据，直接返回，并异步启动一个更新线程</div><div class="line">- 更新线程同时更新A，B的缓存数据</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>
<p>解决方案：</p>
<ul>
<li>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</li>
<li>采用异步更新策略，无论key是否取到值，都直接返回，如果查询返回的数据为空也缓存清理。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作</li>
</ul>
<h4 id="如何解决redis的并发竞争key问题"><a href="#如何解决redis的并发竞争key问题" class="headerlink" title="如何解决redis的并发竞争key问题"></a>如何解决redis的并发竞争key问题</h4><p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 Key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同</p>
<p>推荐方案： 分布式锁（ZooKeeper 和 Redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能），大家去抢锁，抢到锁就做set操作即可；</p>
<h4 id="redis和数据库双写一致性问题"><a href="#redis和数据库双写一致性问题" class="headerlink" title="redis和数据库双写一致性问题"></a>redis和数据库双写一致性问题</h4><p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="external">http://www.redis.cn/topics/data-types-intro.html#strings</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发&lt;/p&gt;
&lt;h4 id=&quot;使用redis目的&quot;&gt;&lt;a href=&quot;#使用redis目的&quot; class=&quot;headerlink&quot; title=&quot;使用redis目的&quot;&gt;&lt;/a&gt;使用redis
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Redis" scheme="https://ttxsgoto.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
