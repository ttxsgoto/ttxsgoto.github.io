<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttxsgoto&#39; Blog</title>
  <subtitle>好好学习 努力工作 享受生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttxsgoto.github.io/"/>
  <updated>2019-07-03T07:08:56.024Z</updated>
  <id>https://ttxsgoto.github.io/</id>
  
  <author>
    <name>ttxsgoto</name>
    <email>zhongqiang2014@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-echarts</title>
    <link href="https://ttxsgoto.github.io/2019/07/03/vue-echarts/"/>
    <id>https://ttxsgoto.github.io/2019/07/03/vue-echarts/</id>
    <published>2019-07-03T12:01:47.000Z</published>
    <updated>2019-07-03T07:08:56.024Z</updated>
    
    <content type="html"><![CDATA[<p>封装定义可视化组件chart.vue<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div :id="id" :style="style"&gt;</div><div class="line"></div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"> </div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">    export default &#123;</div><div class="line">      name: "Chart",</div><div class="line">      props: &#123;</div><div class="line">        id: &#123;</div><div class="line">          type: String</div><div class="line">        &#125;,</div><div class="line">        width: &#123;</div><div class="line">          type: String,</div><div class="line">          default: "100%",</div><div class="line">        &#125;,</div><div class="line">        height: &#123;</div><div class="line">          type: String,</div><div class="line">          default: "300px"</div><div class="line">        &#125;,</div><div class="line">        option: &#123;</div><div class="line">          type: Object,</div><div class="line">          required: true,</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      computed: &#123;</div><div class="line">        style() &#123;</div><div class="line">          return &#123;</div><div class="line">            height: this.height,</div><div class="line">            width: this.width</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      data() &#123;</div><div class="line">          return &#123;</div><div class="line">            chart: ""</div><div class="line">          &#125;;</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      methods: &#123;</div><div class="line">        init() &#123;</div><div class="line">          this.chart = this.echarts.init(document.getElementById(this.id));</div><div class="line">          // this.chart.showLoading();</div><div class="line">          this.chart.setOption(this.option);</div><div class="line">          // this.chart.hideLoading();</div><div class="line">          window.addEventListener("resize", this.chart.resize);</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      mounted: function () &#123;</div><div class="line">        this.init();</div><div class="line">      &#125;,</div><div class="line">      updated: function () &#123;</div><div class="line">      &#125;,</div><div class="line">      watch: &#123;</div><div class="line">        option: &#123;</div><div class="line">          handler(newVal, oldVal) &#123;</div><div class="line">            if (this.chart) &#123;</div><div class="line">              if (newVal) &#123;</div><div class="line">                this.chart.setOption(newVal);</div><div class="line">              &#125; else &#123;</div><div class="line">                this.chart.setOption(oldVal);</div><div class="line">              &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">              this.init();</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          deep: true</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;封装定义可视化组件chart.vue&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div
    
    </summary>
    
      <category term="Frontend" scheme="https://ttxsgoto.github.io/categories/Frontend/"/>
    
    
      <category term="vue" scheme="https://ttxsgoto.github.io/tags/vue/"/>
    
      <category term="echart" scheme="https://ttxsgoto.github.io/tags/echart/"/>
    
  </entry>
  
  <entry>
    <title>Sersync+Rsync文件同步</title>
    <link href="https://ttxsgoto.github.io/2019/01/10/yw-sersync/"/>
    <id>https://ttxsgoto.github.io/2019/01/10/yw-sersync/</id>
    <published>2019-01-10T13:58:34.000Z</published>
    <updated>2019-01-11T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时同步到另外一台的同一目录中，这时就不能使用远程目录挂载方式完成了， 这里使用sersync+rsync来完成需求</p>
<h4 id="Sersync特点"><a href="#Sersync特点" class="headerlink" title="Sersync特点"></a>Sersync特点</h4><ul>
<li>c++编写，对linux系统文件系统产生的临时文件和重复的文件操作进行过滤，结合rsync同步的时候，节省了运行时耗和网络资源</li>
<li>使用多线程进行同步，在同步较大文件时，能够保证多个服务器实时保持同步状态</li>
<li>自带crontab功能，只需在xml配置文件中开启，隔一段时间整体同步一次</li>
<li>自定义同步规则</li>
</ul>
<h4 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h4><p>配置文件说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">uid = root</div><div class="line">gid = root</div><div class="line">port = <span class="number">873</span></div><div class="line">max connections = <span class="number">1000</span></div><div class="line">timeout = <span class="number">600</span></div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">log file = /var/log/rsync.log</div><div class="line">lockfile = /var/run/rsyncd.lock</div><div class="line">motd file = /etc/rsyncd/rsyncd.moth</div><div class="line">log format = %t %a %m %f %b</div><div class="line"> </div><div class="line">[yw_test]</div><div class="line">path = /data/yw_test</div><div class="line">ignore errors = yes</div><div class="line">list = no</div><div class="line">ignore errors</div><div class="line">read only = no</div><div class="line">auth users = rsync</div><div class="line">secrets file = /etc/rsync/rsyncd.secrets</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 600 /etc/rsync/rsyncd.secrets</div><div class="line">rsync --daemon --config=/etc/rsync/rsyncd.conf</div></pre></td></tr></table></figure></p>
<h4 id="Sersync"><a href="#Sersync" class="headerlink" title="Sersync"></a>Sersync</h4><p>配置文件confxml.xml说明<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">host</span> <span class="attr">hostip</span>=<span class="string">"localhost"</span> <span class="attr">port</span>=<span class="string">"8008"</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">debug</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fileSystem</span> <span class="attr">xfs</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--监控事件的过程中过滤特定文件，和特定文件夹的文件 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"log.txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.svn"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.gz"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置要监控的事件 --&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">inotify</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">createFolder</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">createFile</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">closeWrite</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">moveFrom</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">moveTo</span> <span class="attr">start</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">attrib</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">modify</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">inotify</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">sersync</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!--设定监控目录--&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/data/test"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--指定远端rsync的地址和模块名--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">remote</span> <span class="attr">ip</span>=<span class="string">"192.168.0.1"</span> <span class="attr">name</span>=<span class="string">"yw_test"</span>/&gt;</span>   </div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">rsync</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!--commonParams params="-rczgop"/--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">commonParams</span> <span class="attr">params</span>=<span class="string">"-artuz"</span>/&gt;</span></div><div class="line">	    <span class="comment">&lt;!--是否启用验证，并指定密码存放文件 --&gt;</span> </div><div class="line">	    <span class="tag">&lt;<span class="name">auth</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">users</span>=<span class="string">"rsync"</span> <span class="attr">passwordfile</span>=<span class="string">"/etc/rsync_client.pass "</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">userDefinedPort</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">port</span>=<span class="string">"873"</span>/&gt;</span><span class="comment">&lt;!-- port=874 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">timeout</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">time</span>=<span class="string">"100"</span>/&gt;</span><span class="comment">&lt;!-- timeout=100 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">ssh</span> <span class="attr">start</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">rsync</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">failLog</span> <span class="attr">path</span>=<span class="string">"/tmp/rsync_fail_log.log"</span> <span class="attr">timeToExecute</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!--default every 60mins execute once--&gt;</span></div><div class="line">	<span class="comment">&lt;!--是否启用执行完整rsync，并指定执行周期 --&gt;</span>     </div><div class="line">	<span class="tag">&lt;<span class="name">crontab</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">schedule</span>=<span class="string">"5"</span>&gt;</span><span class="comment">&lt;!--5mins--&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">crontabfilter</span> <span class="attr">start</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"log.txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.svn"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"(.*)\.gz"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"info/*"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;/<span class="name">crontabfilter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">crontab</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">start</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"command"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">sersync</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"command"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">prefix</span>=<span class="string">"/bin/sh"</span> <span class="attr">suffix</span>=<span class="string">""</span> <span class="attr">ignoreError</span>=<span class="string">"true"</span>/&gt;</span>	<span class="comment">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.php"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.sh"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"socket"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/opt/tongbu"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">deshost</span> <span class="attr">ip</span>=<span class="string">"192.168.138.20"</span> <span class="attr">port</span>=<span class="string">"8009"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"refreshCDN"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/data0/htdocs/cms.xoyo.com/site/"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">cdninfo</span> <span class="attr">domainname</span>=<span class="string">"ccms.chinacache.com"</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">username</span>=<span class="string">"xxxx"</span> <span class="attr">passwd</span>=<span class="string">"xxxx"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">sendurl</span> <span class="attr">base</span>=<span class="string">"http://pic.xoyo.com/cms"</span>/&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">regexurl</span> <span class="attr">regex</span>=<span class="string">"false"</span> <span class="attr">match</span>=<span class="string">"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chmod 600 /etc/rsync_client.pass </div><div class="line">/etc/rsync/sersync2 -r -d -o /etc/rsync/confxml.xml</div><div class="line"> </div><div class="line">-d:启用守护进程模式</div><div class="line">-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</div><div class="line">-n: 指定开启守护线程的数量，默认为10个</div><div class="line">-o:指定配置文件，默认使用confxml.xml文件</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;需要将某台服务器目录实时同步到另外一台服务器上的某个目录下，其实本来可以通过远程目录挂载的方式完成， 但是现在的需求是某两台服务器的目录实时
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="sersync" scheme="https://ttxsgoto.github.io/tags/sersync/"/>
    
  </entry>
  
  <entry>
    <title>Apollo配置中心</title>
    <link href="https://ttxsgoto.github.io/2019/01/07/yw-apollo/"/>
    <id>https://ttxsgoto.github.io/2019/01/07/yw-apollo/</id>
    <published>2019-01-07T12:59:45.000Z</published>
    <updated>2019-01-07T08:08:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>之前文章中说过发布流程(<a href="https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/">Jenkins+Gitlab+Harbor构建持续集成</a>),但这里有个问题——不同环境中的配置文件不一样，之前的方案只是把代码发布到机器上，不能“一刀切”使用相同的配置，我们现在使用携程框架部门研发的开源配置管理中心Apollo来完成配置文件分发</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>配置修改实时生效</li>
<li>灰度发布</li>
<li>分环节</li>
<li>分集群管理配置</li>
<li>权限</li>
<li>审核机制等</li>
</ul>
<p>apollo能够集中化管理应用不同环境，不同集群，修改配置后能够实时推送到应用，并具备规范的权限和流程治理特性</p>
<h4 id="4个维度管理k-v配置"><a href="#4个维度管理k-v配置" class="headerlink" title="4个维度管理k-v配置"></a>4个维度管理k-v配置</h4><ul>
<li>application(应用)</li>
<li>environment(环境)</li>
<li>cluster(集群)</li>
<li>namespace(命名空间)</li>
</ul>
<p>配置文件实时生效(热发布),用户在apollo修改完配置并发布后，客户端能实时(1s)接收到最新配置，并通知应用程序</p>
<h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><p>客户端(python)实现参照<br><a href="https://github.com/filamoon/pyapollo" target="_blank" rel="external">https://github.com/filamoon/pyapollo</a></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="external">https://github.com/ctripcorp/apollo</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D</a></li>
<li><a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="external">https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;之前文章中说过发布流程(&lt;a href=&quot;https://ttxsgoto.github.io/2019/01/04/yw-jenkins-
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Apollo" scheme="https://ttxsgoto.github.io/tags/Apollo/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Gitlab+Harbor构建持续集成</title>
    <link href="https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/"/>
    <id>https://ttxsgoto.github.io/2019/01/04/yw-jenkins-ci/</id>
    <published>2019-01-04T12:41:44.000Z</published>
    <updated>2019-01-07T08:04:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenkins工具，自动发布代码到对应环境中，然后进行测试，提高研发工作效率和减少运维人员重复工作</p>
<h4 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h4><h5 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h5><p>jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能<br>特点：</p>
<ul>
<li>分布式构建</li>
<li>大量三方插件</li>
<li>变更支持</li>
<li>消息通知</li>
</ul>
<h5 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h5><p>Gitlab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务<br>特点：</p>
<ul>
<li>代码仓库管理</li>
<li>多人协作</li>
<li>完善的用户、权限管理</li>
</ul>
<h5 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h5><p>Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器<br>特点：</p>
<ul>
<li>基于角色的访问控制</li>
<li>镜像复制</li>
<li>鉴权认证管理</li>
<li>用户管理，访问控制和活动审计</li>
<li>RESTful API</li>
</ul>
<h4 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h4><ol>
<li>通过Jenkins 生成的secret token来关联gitlab Webhooks设置url 和token，当代码有更新时，自动触发构建</li>
<li>将代码拉取到Jenkins运行节点中，通过基础镜像加dockerfile文件构建应用镜像，然后上传到Harbor服务器中</li>
<li>在测试服务器中拉取对应的镜像，然后运行起来</li>
<li>构建完成没有错误，发邮件通知相关人员</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>Jenkins系统设置中需要配置gitlab服务器地址和对应的gitlab api token用于Jenkins和gitlab交互通信</li>
<li>Jenkins任务构建可以指定在固定节点上构建， 构建节点和应用服务器之间必须有登录权限</li>
<li>Harbor镜像管理，需要有鉴权和认证设置</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;最近研究了一下公司现有的发布流程，大致流程是这样：开发在开发完成代码后，提PR后，Merge代码， 不需要关注代码发布流程， 使用Jenki
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Jenkins" scheme="https://ttxsgoto.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Count计数变慢</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-count/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-count/</id>
    <published>2018-12-28T14:48:50.000Z</published>
    <updated>2018-12-28T01:51:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="count-实现方式"><a href="#count-实现方式" class="headerlink" title="count(*) 实现方式"></a>count(*) 实现方式</h4><p>不同的引擎，实现方式不同</p>
<ul>
<li>Myisam把一个表的总行存在磁盘上，执行时直接返回这个数</li>
<li>Innodb，需要把数据一行行的从引擎中读出来，然后累积计数，遍历全表</li>
</ul>
<h4 id="不同的count用法"><a href="#不同的count用法" class="headerlink" title="不同的count用法"></a>不同的count用法</h4><p>count()为聚合函数，对于返回的结果集，一行行判断，如果count函数的参数不为null，累计值加1，最终返回累计值</p>
<ul>
<li>count(*)</li>
<li>count(id)</li>
<li>count(字段)</li>
<li>count(1)</li>
</ul>
<p>这里count(*),count(id),count(1)返回满足条件的结果集的总行数，而count(字段)返回满足条件不为null的总数<br>性能比较原则：</p>
<ol>
<li>server层要做什么就给什么</li>
<li>innodb只给必要的值</li>
</ol>
<h4 id="效率排序"><a href="#效率排序" class="headerlink" title="效率排序"></a>效率排序</h4><p>count(字段)&lt; count(id)&lt;count(1)=count(*)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;count-实现方式&quot;&gt;&lt;a href=&quot;#count-实现方式&quot; class=&quot;headerlink&quot; title=&quot;count(*) 实现方式&quot;&gt;&lt;/a&gt;count(*) 实现方式&lt;/h4&gt;&lt;p&gt;不同的引擎，实现方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Myisam
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="count" scheme="https://ttxsgoto.github.io/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>Order by工作原理</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-order-by/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-order-by/</id>
    <published>2018-12-28T14:46:51.000Z</published>
    <updated>2018-12-28T01:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h4><p>mysql会给每个线程分配一块内存用于排序，称为sort_buffer</p>
<p>sort_buffer_size 是mysql为排序开辟的内存大小(sort_buffer)大小，如果要排序的数据量小于sort_buffer_size，排序在内存中完成，如果排序数据量太大，大于该值，则需要用磁盘临时文件辅助排序</p>
<h4 id="rowid排序"><a href="#rowid排序" class="headerlink" title="rowid排序"></a>rowid排序</h4><p>全字段排序只对原表数据读取一次，剩下的都在sort_buffer和临时文件中进行，如果查询返回的字段很多，那么sort_buffer里面存放的字段数太多，内存里放下的数据行数就很少，需要分成很多个临时文件，排序的性能会受影响，这时需要使用rowid排序</p>
<p>max_length_for_sort_data 字段用来控制排序的行数据的长度的参数，如果单行的长度超过这个值，mysql会换一种算法，即将查询的列和主键id放入sort_buffer中</p>
<p>这种算法需要多访问一次表的主键索引</p>
<p>如果内存大，mysql就会多利用内存，尽量减少磁盘访问</p>
<p><strong>写入有序数据，通过索引本身就是写入数据就是有序的，那么order by 就不需要排序了，直接就是对应的数据</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;全字段排序&quot;&gt;&lt;a href=&quot;#全字段排序&quot; class=&quot;headerlink&quot; title=&quot;全字段排序&quot;&gt;&lt;/a&gt;全字段排序&lt;/h4&gt;&lt;p&gt;mysql会给每个线程分配一块内存用于排序，称为sort_buffer&lt;/p&gt;
&lt;p&gt;sort_buffer_siz
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="排序" scheme="https://ttxsgoto.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>字符串加索引</title>
    <link href="https://ttxsgoto.github.io/2018/12/28/yw-mysql-addindex-to-string/"/>
    <id>https://ttxsgoto.github.io/2018/12/28/yw-mysql-addindex-to-string/</id>
    <published>2018-12-28T12:41:50.000Z</published>
    <updated>2018-12-28T01:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数</p>
<p>在建立索引时需要关注的是区分度，区分度越高越好</p>
<p>查看对应索引的区分度方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select count(distinct a) <span class="keyword">as</span> L <span class="keyword">from</span> user;</div><div class="line">select count(*) <span class="keyword">as</span> total <span class="keyword">from</span> user;</div><div class="line"> </div><div class="line">select count(distinct left(a, <span class="number">4</span>) <span class="keyword">as</span> L4,</div><div class="line">       count(distinct left(a, <span class="number">5</span>) <span class="keyword">as</span> L5,</div><div class="line"><span class="keyword">from</span> user</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：使用前缀索引就用不上覆盖索引查询对查询性能的优化，这是在选择是否使用前缀索引时需要考虑的因素</p>
<h4 id="倒序存储"><a href="#倒序存储" class="headerlink" title="倒序存储"></a>倒序存储</h4><p>对前面n位数都是重复的字段，可以使用倒序存储，将存储的内容倒序存储<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select field <span class="keyword">from</span> t where word=reverse(<span class="string">'input_string'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="使用hash字段"><a href="#使用hash字段" class="headerlink" title="使用hash字段"></a>使用hash字段</h4><p>在表中再创建一个整数字段，来保存字段的校验码，同时在这个字段创建索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table t add word_crc int unsigned, <span class="keyword">and</span> index(word_crc);</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>直接创建完整索引，这样可能会占用大量的空间</li>
<li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引</li>
<li>倒序存储，在创建前缀索引，用于绕过字符串本身前缀区分度不高的问题</li>
<li>创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，同时不支持范围扫描</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前缀索引&quot;&gt;&lt;a href=&quot;#前缀索引&quot; class=&quot;headerlink&quot; title=&quot;前缀索引&quot;&gt;&lt;/a&gt;前缀索引&lt;/h4&gt;&lt;p&gt;前缀字符长度索引，所占空间更小，同时会增加额外的记录扫描次数&lt;/p&gt;
&lt;p&gt;在建立索引时需要关注的是区分度，区分度越高越好&lt;
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>全局锁、表级锁和行锁</title>
    <link href="https://ttxsgoto.github.io/2018/12/27/yw-mysql-lock/"/>
    <id>https://ttxsgoto.github.io/2018/12/27/yw-mysql-lock/</id>
    <published>2018-12-27T14:44:05.000Z</published>
    <updated>2018-12-27T09:50:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h4><ul>
<li>全局锁</li>
<li>表级锁</li>
<li>行锁</li>
</ul>
<h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>全局锁就是对整个数据库实例加锁<br>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flush tables with read lock</div></pre></td></tr></table></figure></p>
<p>使用该命令后其他线程的执行语句都会被阻塞：数据更新语句(数据的增删改)和数据定义语句(建表和修改表结构等)和更新事务的提交语句</p>
<p><strong>应用</strong>：全库逻辑备份</p>
<ul>
<li>innodb引擎， mysqldump 使用参数-single-transaction，导数据时会启动一个事务，来确保一致性视图</li>
<li>myisam引擎，不支持事务，需要使用FTWRL命令</li>
</ul>
<h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><h5 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h5><p>语句:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lock tables xxx read/write;</div><div class="line">unlock tables;</div></pre></td></tr></table></figure></p>
<p>表锁是最常用的处理并发的方式，而对于innodb这种行锁的引擎，一般不会使用lock tables命令来控制并发，因为锁住整个表的影响太大</p>
<h5 id="元数据锁-meta-data-lock-MDL"><a href="#元数据锁-meta-data-lock-MDL" class="headerlink" title="元数据锁(meta data lock, MDL)"></a>元数据锁(meta data lock, MDL)</h5><p>MDL不需要显示使用，在访问一个表时会自动加上，MDL的作用，保证读写的正确性</p>
<ul>
<li>在对一个表做增删改查操作，加MDL读锁，当要对表做结构变更操作，加MDL写锁</li>
<li>读锁之间不互斥，可以有多个线程对一张表增删改查</li>
<li>读写锁之间，写锁之间互斥，用来保证变更表结构操作的安全性,如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完成后才能开始执行</li>
</ul>
<h5 id="安全给小表加字段"><a href="#安全给小表加字段" class="headerlink" title="安全给小表加字段"></a>安全给小表加字段</h5><ol>
<li>需要解决长事务，事务不提交，就会一直占用MDL锁，mysql中的information_schema库中INNODB_TRX表中记录着当前执行中的事务</li>
<li>变更热点表，在alter table语句里面设置等待时间，如果在等待时间没有拿到也不会阻塞 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table xxx nowait add column ...</div><div class="line">alter table yyy wait n add column ...</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>行锁是针对数据表中的行记录的锁</p>
<p>mysql行锁是在引擎层自己实现的，并不是所有引擎都支持行锁，如myisam引擎不支持行锁，只能使用表锁，任何时刻只能有一个更新在执行，影响业务并发度</p>
<h5 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h5><p>在innodb事务中，行锁是在需要的时候才加上，但并不是不需要了立刻释放，而是要等到事务结束时才释放</p>
<p><strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放</strong></p>
<h5 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h5><p>死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态</p>
<p>出现死锁，解决策略：</p>
<ul>
<li>直接进入等待，直到超时，超时时间可以通过参数<code>innodb_lock_wait_timeout</code>来设置，默认值为50s</li>
<li>发起死锁检测，发现死锁后，主动回滚死锁链条中的某个事物，让其他事物得以继续执行，通过参数<code>innodb_deadlock_detect</code>设置为on，来开启死锁检测</li>
</ul>
<p>如果所有事务都要更新同一行，这时死锁检测将消耗大量cpu资源，因此出现cpu利用率很高，但每秒执行不了多少事务</p>
<p>解决方案：</p>
<ul>
<li>控制并发，在数据库服务端控制并发，需要修改mysql源码，要求高</li>
<li>业务上，将更新一行改为逻辑上的多行来减少锁冲突</li>
<li>减少死锁的主要方向，控制访问相同资源的并发事务量</li>
</ul>
<p>innodb行级锁是通过锁索引记录实现的，如果更新的列没有建索引会锁住整个表的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;锁分类&quot;&gt;&lt;a href=&quot;#锁分类&quot; class=&quot;headerlink&quot; title=&quot;锁分类&quot;&gt;&lt;/a&gt;锁分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;全局锁&lt;/li&gt;
&lt;li&gt;表级锁&lt;/li&gt;
&lt;li&gt;行锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;全局锁&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Lock" scheme="https://ttxsgoto.github.io/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>事务隔离</title>
    <link href="https://ttxsgoto.github.io/2018/12/26/yw-mysql-transaction/"/>
    <id>https://ttxsgoto.github.io/2018/12/26/yw-mysql-transaction/</id>
    <published>2018-12-26T13:42:58.000Z</published>
    <updated>2018-12-27T09:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持</p>
<h4 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h4><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h4 id="多事务同时执行引起的问题"><a href="#多事务同时执行引起的问题" class="headerlink" title="多事务同时执行引起的问题"></a>多事务同时执行引起的问题</h4><ul>
<li>脏读</li>
<li>不可重复读</li>
<li>幻读</li>
</ul>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><ul>
<li>读未提交(read uncommitted) 一个事务还没提交时，它做的变更就能被别的事务看到</li>
<li>读提交(read committed) 一个事务提交之后，它做的变更才会被其他事务看到</li>
<li>可重复读(repeatable read) 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的</li>
<li>串行化(serializable) “写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突时，后访问的事务必须等前一个事务执行完成后，才能继续执行</li>
</ul>
<h4 id="配置事务方法"><a href="#配置事务方法" class="headerlink" title="配置事务方法"></a>配置事务方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">启动参数transaction-isolation</div></pre></td></tr></table></figure>
<h4 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h4><p>每条记录在更新的时候都会同时记录一条回滚操作。通过回滚操作，都可以得到前一个状态的值</p>
<p>同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。</p>
<p>回滚日志在不需要的时候删除，当系统里没有比这个回滚日志更早的read-view时候，系统自动删除</p>
<h4 id="尽量不要使用长事务"><a href="#尽量不要使用长事务" class="headerlink" title="尽量不要使用长事务"></a>尽量不要使用长事务</h4><p>长事务意味着系统里面会存在很老的事务视图，在事务提交之前，回滚日志必须保留，这就会导致大量占用存储空间</p>
<h4 id="事务的启动方式"><a href="#事务的启动方式" class="headerlink" title="事务的启动方式"></a>事务的启动方式</h4><ul>
<li><p>显示启动事务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">begin transaction</div><div class="line">do something</div><div class="line">commit / rollback</div></pre></td></tr></table></figure>
</li>
<li><p>set autocommit=0，将这个线程的自动提交关掉，只要你执行一个查询语句，事务就启动了，接下来的查询都在事务中，如果是长连接，将导致意外的长事务，这样直到你主动执行commit或者rollback语句或者断开连接才释放，可以通过set autocommit=1来显式方式来启动事务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">begin tracsaction; #  不是一个事务的起点，在执行到它之后的第一个操作InnoDB语句，事务才真正启动</div><div class="line">start transaction with consistent snapshot; # 马上启动一个事务</div><div class="line"> </div><div class="line">commit;     # 提交事务</div><div class="line">autocommit=1;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="事务隔离-or-不隔离"><a href="#事务隔离-or-不隔离" class="headerlink" title="事务隔离 or 不隔离"></a>事务隔离 or 不隔离</h4><p>如果是可重复读隔离级别，事务启动时会创建一个视图read-view，之后事务执行期间，即使有其他事务修改了数据，该事务看到的仍然跟启动时看到的一样，也就是在可重复读隔离级别下执行事务，不受外界影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start transaction with consistent snapshot;    # 执行该命令后马上启动一个事务</div></pre></td></tr></table></figure></p>
<p>Mysql中的两个“视图”：</p>
<ul>
<li>一个view，用于查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果</li>
<li>InnoDB在实现MCVV时用到的一致性读视图，即consistent read view，用于支持RC(Read Committed，读提交)和RR(Repeatable Read，可重复读)隔离级别的实现，作用在事务执行期间用来定义”我能看到什么数据”</li>
</ul>
<h4 id="“快照”在MVCC里是怎么工作的"><a href="#“快照”在MVCC里是怎么工作的" class="headerlink" title="“快照”在MVCC里是怎么工作的"></a>“快照”在MVCC里是怎么工作的</h4><p>在可重复读隔离级别下，事务在启动的时候就拍下快照，这个快照是基于整库</p>
<p>Innodb里面每个事务有一个唯一的事务ID，叫作transaction id，它是在事务开始的时候向Innodb的事务系统申请的，是按申请顺序严格递增的</p>
<p>每行数据也都都是有多个版本的，每次事务更新数据时，都会生成一个新的数据版本，而且把transaction id赋值给这个数据版本的事务id，记为row trx_id; 同时，旧的数据版本要保留，并且在新的数据版本中能够有信息可以直接拿到它</p>
<p>数据表中一行记录，其实可能有多个版本(row)，每个版本有自己的rowtrx_id</p>
<p>InnoDB利用了“所有数据都有多个版本”的特性，实现了“秒级创建快照的能力”</p>
<p>更新数据都要先读后写，而这个读，只能读当前的值，称之为”当前读”；当前读总是读取已经提交完成的最新版本</p>
<ul>
<li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据</li>
<li>对于读提交，查询只承认在语句启动前就已经提交完成的数据</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h4&gt;&lt;p&gt;事务是为了保证一组数据库操作，要么全部执行成功，要么全部执行不成功，InnoDB支持，Myisam不支持&lt;/p&gt;
&lt;h4 id=&quot;事务的特性
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Transaction" scheme="https://ttxsgoto.github.io/tags/Transaction/"/>
    
  </entry>
  
  <entry>
    <title>Redo log 和 Binlog</title>
    <link href="https://ttxsgoto.github.io/2018/12/25/yw-mysql-redo-binlog/"/>
    <id>https://ttxsgoto.github.io/2018/12/25/yw-mysql-redo-binlog/</id>
    <published>2018-12-25T11:43:38.000Z</published>
    <updated>2018-12-25T11:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>WAL(Write-Ahead-Logging),先写日志，再写磁盘</p>
<ul>
<li>redo log(重做日志)<ul>
<li>存储引擎层面</li>
<li>存储容量大小固定，循环写</li>
<li>checkpoint 当前要擦除的位置，擦除记录前需要将数据更新到数据文件中</li>
<li>write-pos 当前写入记录的位置</li>
<li>功能：保证InnoDB即使数据库发生异常重启，之前提交的记录也不会丢失(crash-safe)</li>
<li>插件式，innodb引擎特有</li>
<li>物流日志-记录在某个数据页上做了什么修改</li>
</ul>
</li>
<li>binlog(归档日志)<ul>
<li>Server层面</li>
<li>逻辑日志，记录的是这个语句的原始逻辑，sql语句是什么样子的</li>
</ul>
</li>
</ul>
<p>执行器和引擎执行update操作流程：</p>
<ol>
<li>先取出该查询，如果在内存中则直接返回给执行器，否则先从磁盘读入内存，然后返回</li>
<li>执行器拿到引擎给的行数据，执行相关操作，再调用引擎接口写入这行新数据</li>
<li>引擎将这行新数据更新到内存中，同时将这个更新记录到redo log中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务</li>
<li>执行器生成这个操作的binlog，将binlog写入磁盘</li>
<li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改写提交(commit)状态，更新完成</li>
</ol>
<p>流程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">获取数据 ——&gt; 返回数据 ——&gt; 执行逻辑 ——&gt; 写入新行 ——&gt; 新行更新到内存 ——&gt; 写入redo log处于prepare状态 ——&gt; 写binlog ——&gt; 提交事务redo log处于commit状态完成</div></pre></td></tr></table></figure></p>
<p>redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致</p>
<p>数据一致性保持理解：</p>
<p>1 prepare阶段<br>2 写binlog<br>3 commit</p>
<p>当在2之前崩溃时<br>重启恢复：后发现没有commit，回滚。备份恢复：没有binlog 一致<br>当在3之前崩溃<br>重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。备份：有binlog. 一致</p>
<p><strong>参数配置</strong><br>innodb_flush_log_at_trx_commit 参数设置成1时，表示每次事务的redo log都直接持久化到磁盘，保证mysql异常重启后数据不丢失<br>sync_binlog参数设置成1时，表示每次事务的binlog都持久化到磁盘，保证mysql异常重启后binlog不丢失</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WAL(Write-Ahead-Logging),先写日志，再写磁盘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redo log(重做日志)&lt;ul&gt;
&lt;li&gt;存储引擎层面&lt;/li&gt;
&lt;li&gt;存储容量大小固定，循环写&lt;/li&gt;
&lt;li&gt;checkpoint 当前要擦除的位置，擦除记录前需要将
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="binlog" scheme="https://ttxsgoto.github.io/tags/binlog/"/>
    
  </entry>
  
  <entry>
    <title>索引选择</title>
    <link href="https://ttxsgoto.github.io/2018/12/21/yw-mysql-select-index/"/>
    <id>https://ttxsgoto.github.io/2018/12/21/yw-mysql-select-index/</id>
    <published>2018-12-21T03:14:08.000Z</published>
    <updated>2018-12-21T03:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="优化器选择索引逻辑"><a href="#优化器选择索引逻辑" class="headerlink" title="优化器选择索引逻辑"></a>优化器选择索引逻辑</h4><ul>
<li>扫描行数</li>
<li>使用临时表</li>
<li>是否排序</li>
</ul>
<h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><p>一个索引上不同值的个数，称之为“基数(cardinality)”;基数越大，索引的区分度越好</p>
<p>show index from x 查看索引对应的基数</p>
<ul>
<li>采样统计， 通过设置参数innodb_stats_persistent来设置  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">设置为on，表示统计信息会持久化存储，默认值N为20，M为10</div><div class="line">设置为off, 表示统计信息只存储在内存中，默认值N为8，M为16</div></pre></td></tr></table></figure>
</li>
</ul>
<p>analyze table t # 用于重新统计索引信息，当发现explain中rows值和实际情况差距比较大时，可以采用使用该命令来处理</p>
<h4 id="索引选择异常和处理"><a href="#索引选择异常和处理" class="headerlink" title="索引选择异常和处理"></a>索引选择异常和处理</h4><ul>
<li><p>使用force index强制选择一个索引</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from t force index(a) where a between 1000 and 2000;</div></pre></td></tr></table></figure>
</li>
<li><p>修改查询语句</p>
</li>
<li>新建更合适的索引，来提供优化器来选择，或者删掉误用的索引</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;优化器选择索引逻辑&quot;&gt;&lt;a href=&quot;#优化器选择索引逻辑&quot; class=&quot;headerlink&quot; title=&quot;优化器选择索引逻辑&quot;&gt;&lt;/a&gt;优化器选择索引逻辑&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;扫描行数&lt;/li&gt;
&lt;li&gt;使用临时表&lt;/li&gt;
&lt;li&gt;是否排序&lt;/l
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>普通索引和唯一索引的区别</title>
    <link href="https://ttxsgoto.github.io/2018/12/20/yw-mysql-unique-index/"/>
    <id>https://ttxsgoto.github.io/2018/12/20/yw-mysql-unique-index/</id>
    <published>2018-12-20T12:11:46.000Z</published>
    <updated>2018-12-27T10:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><ul>
<li>查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止</li>
<li>唯一索引，找到第一个满足条件记录，停止检索</li>
</ul>
<h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><p>change buffer:如果数据页没有在内存中，innodb会将更新操作缓存在change buffer中，这样不需要从磁盘中读取数据页；下次查询访问这个数据页时，将数据页读入内存，然后执行change buffer中和这个页有关的操作</p>
<ul>
<li>唯一索引更新操作不能使用change buffer，因为判断记录是否存在，必须将数据页读入内存，只有普通索引更新操作可以使用change buffer</li>
<li>change buffer使用的是buffer pool里的内存，大小可以通过参数<strong>innodb_change_buffer_max_size</strong>来设置</li>
</ul>
<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><ol>
<li>记录要更新的目标页在内存中，此时插入操作基本一致，从内存中读取数据对应的位置，执行插入语句</li>
<li>记录要更新的目标页不在内存中<ul>
<li>唯一索引，需要将数据页读入到内存，判断有没有冲突，执行语句</li>
<li>普通索引，将更新记录到change buffer，执行语句</li>
</ul>
</li>
</ol>
<p>将数据从磁盘读入内存涉及到随机IO访问，成本高；change buffer减少了随机磁盘访问，所以对更新性能的提升更明显</p>
<h4 id="change-buffer使用场景"><a href="#change-buffer使用场景" class="headerlink" title="change buffer使用场景"></a>change buffer使用场景</h4><p>适用于写多读少的业务场景，写入后不立即读取，常见业务系统如日志、账单类系统</p>
<p>如果业务更新后马上需要做查询，即更新先记录change buffer，之后查询这个数据页，会立刻触发merge操作，这样随机访问io次数不会减少，反而增加了change buffer的维护代价</p>
<h4 id="索引选择"><a href="#索引选择" class="headerlink" title="索引选择"></a>索引选择</h4><ul>
<li>查询性能方面无差异</li>
<li>更新操作，因为有change buffer机制，所以普通索引更新操作性能更好</li>
</ul>
<h4 id="change-buffer-amp-amp-redo-log"><a href="#change-buffer-amp-amp-redo-log" class="headerlink" title="change buffer &amp;&amp; redo log"></a>change buffer &amp;&amp; redo log</h4><ul>
<li>redo log 主要节省的是随机写磁盘IO消耗(转成顺序写)</li>
<li>change buffer主要节省的是随机读磁盘io的消耗</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;查询操作&quot;&gt;&lt;a href=&quot;#查询操作&quot; class=&quot;headerlink&quot; title=&quot;查询操作&quot;&gt;&lt;/a&gt;查询操作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;查找到满足条件的第一个记录，在查找下一个记录，直到到不满足记录时停止&lt;/li&gt;
&lt;li&gt;唯一索引，找到第一个满足
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 出现You can&#39;t specify target table for update in FROM clause错误的解决方法</title>
    <link href="https://ttxsgoto.github.io/2018/12/03/yw-mysql-question/"/>
    <id>https://ttxsgoto.github.io/2018/12/03/yw-mysql-question/</id>
    <published>2018-12-03T12:22:02.000Z</published>
    <updated>2018-12-03T02:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>在同一个sql语句中，先select同一个表的某些值，然后再update这个表</p>
<p>如执行如下sql语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update logistic_statistic set fluid_id=<span class="string">'cca03b6a372045f2891fef62d9524652'</span> where id <span class="keyword">in</span> (</div><div class="line">  select id <span class="keyword">from</span> logistic_statistic where company= <span class="string">'新能源有限公司'</span>);</div></pre></td></tr></table></figure></p>
<p>执行报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error : You can<span class="string">'t specify target table '</span>logistic_statistic<span class="string">' for update in FROM clause</span></div></pre></td></tr></table></figure></p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>select的结果再通过一个中间表select多一次，就可以避免这个错误</p>
<p>执行如下sql语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">update logistic_statistic set fluid_id=<span class="string">"cca03b6a372045f2891fef62d9524652"</span> where id <span class="keyword">in</span> ( </div><div class="line">  select other_id <span class="keyword">from</span> ( </div><div class="line">    SELECT id <span class="keyword">as</span> other_id <span class="keyword">from</span> logistic_statistic where company= <span class="string">'新能源有限公司'</span>) <span class="keyword">as</span> a ;</div><div class="line">  );</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h4&gt;&lt;p&gt;在同一个sql语句中，先select同一个表的某些值，然后再update这个表&lt;/p&gt;
&lt;p&gt;如执行如下sql语句：
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Django+Celery 计划任务</title>
    <link href="https://ttxsgoto.github.io/2018/10/24/python-django-celery/"/>
    <id>https://ttxsgoto.github.io/2018/10/24/python-django-celery/</id>
    <published>2018-10-24T14:38:48.000Z</published>
    <updated>2018-10-25T02:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态</p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>想到使用计划任务来自动流转流程，因为项目本身是Django，这里使用djcelery来完成</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>项目依赖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install django-celery</div><div class="line">pip install flower</div></pre></td></tr></table></figure></p>
<p>settings.py配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">   ...</div><div class="line">   <span class="string">'djcelery'</span>,</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="keyword">import</span> djcelery</div><div class="line"> </div><div class="line">djcelery.setup_loader()</div><div class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379/1'</span></div><div class="line">CELERYBEAT_SCHEDULER = <span class="string">'djcelery.schedulers.DatabaseScheduler'</span></div><div class="line"><span class="comment"># CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'    # 结果存储，存储到数据库</span></div><div class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/1'</span></div><div class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'application/json'</span>]</div><div class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></div><div class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></div><div class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line"> </div><div class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">3600</span>  <span class="comment"># celery任务执行结果的超时时间，</span></div><div class="line">CELERYD_FORCE_EXECV = <span class="keyword">True</span>  <span class="comment"># 有些情况下可以防止死锁</span></div><div class="line">CELERYD_PREFETCH_MULTIPLIER = <span class="number">1</span></div><div class="line">CELERYD_MAX_TASKS_PER_CHILD = <span class="number">100</span>   <span class="comment"># 每个worker最多执行万100个任务就会被销毁，可防止内存泄露</span></div><div class="line"><span class="comment"># CELERYD_CONCURRENCY = 10  # celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以</span></div></pre></td></tr></table></figure></p>
<p>接下来在settings.py的同级目录中新建 celery.py文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</div><div class="line"><span class="keyword">import</span> os</div><div class="line"> </div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"> </div><div class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'Server.settings'</span>)</div><div class="line"> </div><div class="line">app = Celery(<span class="string">'Server'</span>) <span class="comment">#, backend='redis', broker='redis://127.0.0.1:6379/1')</span></div><div class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>)</div><div class="line">app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</div></pre></td></tr></table></figure>
<p>修改<strong>init</strong>.py添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</div><div class="line">  </div><div class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</div></pre></td></tr></table></figure></p>
<p>在对应的app中添加tasks.py文件(这里必须为tasks.py文件，不然在admin中添加任务时找不到task)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task, task</div><div class="line">  </div><div class="line"><span class="meta">@shared_task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto_audit</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'func auto audit'</span>)</div><div class="line"> </div><div class="line"><span class="meta">@task()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    print(<span class="string">'x + y = '</span>, x + y)</div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>在views.py中调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .tasks <span class="keyword">import</span> add</div><div class="line">  </div><div class="line">add.delay(<span class="number">3</span>, <span class="number">5</span>) <span class="comment">#发送消息，触发后台任务</span></div></pre></td></tr></table></figure></p>
<p>celery启动，当然实际环境中应该使用supervisor启动<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">python manage.py celery worker -l info  <span class="comment"># 启动 worker</span></div><div class="line">python manage.py celery beat -l info    <span class="comment"># 启动 beat</span></div><div class="line">python manage.py celery worker -B -l info  <span class="comment"># 启动 worker 和 beat</span></div><div class="line">python manage.py celery flower --address=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --port=<span class="number">5555</span> --basic_auth=admin:admin    <span class="comment"># 启动celery flower监控</span></div></pre></td></tr></table></figure></p>
<h4 id="Admin后台添加计划任务"><a href="#Admin后台添加计划任务" class="headerlink" title="Admin后台添加计划任务"></a>Admin后台添加计划任务</h4><p>在DJCELERY中Periodic tasks添加计划任务即可</p>
<h4 id="Flower监控celery"><a href="#Flower监控celery" class="headerlink" title="Flower监控celery"></a>Flower监控celery</h4><p>主要用于监控任务执行是否成功，和broker和worker对应的状态</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;需求为工作流审批，到达某状态后，超过一段时间没有审批，则流程自动审批到下一个状态&lt;/p&gt;
&lt;h4 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot;
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="Djcelery" scheme="https://ttxsgoto.github.io/tags/Djcelery/"/>
    
  </entry>
  
  <entry>
    <title>运维 Redis进阶</title>
    <link href="https://ttxsgoto.github.io/2018/09/28/redis-advance/"/>
    <id>https://ttxsgoto.github.io/2018/09/28/redis-advance/</id>
    <published>2018-09-28T13:14:53.000Z</published>
    <updated>2018-09-29T02:27:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发</p>
<h4 id="使用redis目的"><a href="#使用redis目的" class="headerlink" title="使用redis目的"></a>使用redis目的</h4><ul>
<li>高性能：将数据缓存在redis中，访问数据从缓存中取，不直接访问数据库，提高页面响应效率</li>
<li>高并发：在大的并发情况下，直接操作缓存能够承受的请求远大于直接访问数据库，这时我们需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库</li>
</ul>
<h4 id="一般应用场景"><a href="#一般应用场景" class="headerlink" title="一般应用场景"></a>一般应用场景</h4><ul>
<li>缓存-热数据：需要执行耗时久，计算结果不频繁变动的sql查询</li>
<li>异步队列</li>
<li>计数器：如统计点击数，INCRBY</li>
<li>分布式锁与单线程机制</li>
<li>最新列表：使用LPUSH命令构建List</li>
<li>排行榜应用： 使用ZADD(有续集，sorted set)</li>
<li>位操作(大数据处理)</li>
</ul>
<h4 id="单线程的redis为什么快"><a href="#单线程的redis为什么快" class="headerlink" title="单线程的redis为什么快"></a>单线程的redis为什么快</h4><ul>
<li>纯内存操作</li>
<li>单线程操作，避免了频繁的上下文切换</li>
<li><p>采用非阻塞I/O多路复用机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在redis服务端，启用了I/O多路复用机制，将其置于队列中，然后文件事件分发器依次去队列中去取，转发到不同的事件处理器中处理</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="常见数据结构和使用场景"><a href="#常见数据结构和使用场景" class="headerlink" title="常见数据结构和使用场景"></a>常见数据结构和使用场景</h4><ul>
<li>String </li>
</ul>
<p>常用的命令： set、get、decr、incr、mget、mset<br>String 数据结构是简单的 Key-Value 类型，Value 可为字符和数值和其他类型的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置和获取key-value</span></div><div class="line">set mykey ttxsgoto</div><div class="line">get mykey</div><div class="line"> </div><div class="line"><span class="comment"># 原子递增</span></div><div class="line">set counter <span class="number">100</span></div><div class="line">incr counter ((integer) <span class="number">101</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 一次性存储和获取多个key对应的值,mget 命令返回由值组成的数组</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset a <span class="number">10</span> b <span class="number">20</span> c <span class="number">30</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a b c</div><div class="line"><span class="number">1</span>) <span class="string">"10"</span></div><div class="line"><span class="number">2</span>) <span class="string">"20"</span></div><div class="line"><span class="number">3</span>) <span class="string">"30"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</div><div class="line"><span class="number">1</span>) <span class="string">"ttxs"</span></div><div class="line"><span class="number">2</span>) <span class="string">"c"</span></div><div class="line"><span class="number">3</span>) <span class="string">"a"</span></div><div class="line"><span class="number">4</span>) <span class="string">"counter"</span></div><div class="line"><span class="number">5</span>) <span class="string">"b"</span></div><div class="line"><span class="number">6</span>) <span class="string">"mykey"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exists a</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exists x</div><div class="line">(integer) <span class="number">0</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; type a</div><div class="line">string</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> a</div><div class="line">(integer) <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="comment"># 设置过期时间</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get b</div><div class="line"><span class="string">"20"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; expire b <span class="number">5</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get b</div><div class="line">(nil)</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set bbb <span class="number">1000</span> ex <span class="number">100</span></div><div class="line">OK</div><div class="line"><span class="comment"># 查看过期时间</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ttl bbb</div><div class="line">(integer) <span class="number">95</span></div></pre></td></tr></table></figure></p>
<ul>
<li>Hash</li>
</ul>
<p>常用命令：hget、hset、 hmget、hmset、hgetall<br>Hash 是一个 String 类型的 Field 和 Value 的映射表，Hash 特别适合用于存储对象；后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由键值对组成</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmset user:<span class="number">1000</span> username antirez birthyear <span class="number">1977</span> verified <span class="number">1</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget user:<span class="number">1000</span> username</div><div class="line"><span class="string">"antirez"</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall user:<span class="number">1000</span></div><div class="line"><span class="number">1</span>) <span class="string">"username"</span></div><div class="line"><span class="number">2</span>) <span class="string">"antirez"</span></div><div class="line"><span class="number">3</span>) <span class="string">"birthyear"</span></div><div class="line"><span class="number">4</span>) <span class="string">"1977"</span></div><div class="line"><span class="number">5</span>) <span class="string">"verified"</span></div><div class="line"><span class="number">6</span>) <span class="string">"1"</span></div><div class="line"> </div><div class="line"><span class="comment"># 返回多个值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmget user:<span class="number">1000</span> username birthyear xxx</div><div class="line"><span class="number">1</span>) <span class="string">"antirez"</span></div><div class="line"><span class="number">2</span>) <span class="string">"1977"</span></div><div class="line"><span class="number">3</span>) (nil)</div></pre></td></tr></table></figure></p>
<ul>
<li>List</li>
</ul>
<p>常用命令：lpush、rpush、lpop、rpop、lrange<br>List 就是链表，Redis List 的应用场景非常多，也是 Redis 最重要的数据结构之一<br>Redis List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销<br>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 List 实现分页查询</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lpush 向list的左边（头部）添加一个新元素</span></div><div class="line"><span class="comment"># rpush 向list的右边（尾部）添加一个新元素</span></div><div class="line"><span class="comment"># lrange 从list中取出一定范围的元素</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist A</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist B</div><div class="line">(integer) <span class="number">2</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush mylist first</div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="comment"># 写入多个值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="string">"foo bar"</span></div><div class="line">(integer) <span class="number">9</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="number">4</span>) <span class="string">"1"</span></div><div class="line"><span class="number">5</span>) <span class="string">"2"</span></div><div class="line"><span class="number">6</span>) <span class="string">"3"</span></div><div class="line"><span class="number">7</span>) <span class="string">"4"</span></div><div class="line"><span class="number">8</span>) <span class="string">"5"</span></div><div class="line"><span class="number">9</span>) <span class="string">"foo bar"</span></div><div class="line"> </div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush mylist001 a b c</div><div class="line"><span class="comment"># 删除元素并同时返回删除的值</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpop mylist001</div><div class="line"><span class="string">"c"</span></div><div class="line"> </div><div class="line"><span class="comment"># ltrim把list从左边截取指定长度</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ltrim mylist <span class="number">0</span> <span class="number">2</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"first"</span></div><div class="line"><span class="number">2</span>) <span class="string">"A"</span></div><div class="line"><span class="number">3</span>) <span class="string">"B"</span></div><div class="line"><span class="comment"># 查看list中元素的个数</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; llen mylist</div><div class="line">(integer) <span class="number">6</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> mylist</div><div class="line">(integer) <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>Set</li>
</ul>
<p>常用命令：sadd、spop、smembers、sunion<br>Set 对外提供的功能与 List 类似是一个列表的功能，特殊之处在于 Set 是可以自动排重<br>当你需要存储一个列表数据，又不希望出现重复数据时，可以使用Set，同时也支持交集、并集、差集操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd myset <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="comment"># 查看所有</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers myset</div><div class="line"><span class="number">1</span>) <span class="string">"1"</span></div><div class="line"><span class="number">2</span>) <span class="string">"2"</span></div><div class="line"><span class="number">3</span>) <span class="string">"3"</span></div><div class="line"><span class="comment"># 检查元素是否存在</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember myset <span class="number">1</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember myset <span class="number">4</span></div><div class="line">(integer) <span class="number">0</span></div></pre></td></tr></table></figure></p>
<ul>
<li>Sorted Set</li>
</ul>
<p>常用命令：zadd、zrange、zrem、zcard<br>和 Set 相比，Sorted Set 增加了一个权重参数 Score，使得集合中的元素能够按 Score 进行有序排列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># zadd 添加</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1940</span> <span class="string">"Alan Kay"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1957</span> <span class="string">"Sophie Wilson"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1953</span> <span class="string">"Richard Stallman"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1949</span> <span class="string">"Anita Borg"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1965</span> <span class="string">"Yukihiro Matsumoto"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1914</span> <span class="string">"Hedy Lamarr"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1916</span> <span class="string">"Claude Shannon"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1969</span> <span class="string">"Linus Torvalds"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd hackers <span class="number">1912</span> <span class="string">"Alan Turing"</span></div><div class="line">(integer) <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="comment"># 查看数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange hackers <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">6</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">7</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">8</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">9</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"> </div><div class="line"><span class="comment"># 反向查看数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrange hackers <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">6</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">7</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">8</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">9</span>) <span class="string">"Alan Turing"</span></div><div class="line"> </div><div class="line"><span class="comment"># 查看对应的得分</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange hackers <span class="number">0</span> <span class="number">-1</span> withscores</div><div class="line"> <span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"> <span class="number">2</span>) <span class="string">"1912"</span></div><div class="line"> <span class="number">3</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"> <span class="number">4</span>) <span class="string">"1914"</span></div><div class="line"> <span class="number">5</span>) <span class="string">"Claude Shannon"</span></div><div class="line"> <span class="number">6</span>) <span class="string">"1916"</span></div><div class="line"> <span class="number">7</span>) <span class="string">"Alan Kay"</span></div><div class="line"> <span class="number">8</span>) <span class="string">"1940"</span></div><div class="line"> <span class="number">9</span>) <span class="string">"Anita Borg"</span></div><div class="line"><span class="number">10</span>) <span class="string">"1949"</span></div><div class="line"><span class="number">11</span>) <span class="string">"Richard Stallman"</span></div><div class="line"><span class="number">12</span>) <span class="string">"1953"</span></div><div class="line"><span class="number">13</span>) <span class="string">"Sophie Wilson"</span></div><div class="line"><span class="number">14</span>) <span class="string">"1957"</span></div><div class="line"><span class="number">15</span>) <span class="string">"Yukihiro Matsumoto"</span></div><div class="line"><span class="number">16</span>) <span class="string">"1965"</span></div><div class="line"><span class="number">17</span>) <span class="string">"Linus Torvalds"</span></div><div class="line"><span class="number">18</span>) <span class="string">"1969"</span></div><div class="line">  </div><div class="line"><span class="comment"># 小于1950的数据</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrangebyscore hackers -inf <span class="number">1950</span></div><div class="line"><span class="number">1</span>) <span class="string">"Alan Turing"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Hedy Lamarr"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Claude Shannon"</span></div><div class="line"><span class="number">4</span>) <span class="string">"Alan Kay"</span></div><div class="line"><span class="number">5</span>) <span class="string">"Anita Borg"</span></div></pre></td></tr></table></figure></p>
<h4 id="过期策略以及内存淘汰机制"><a href="#过期策略以及内存淘汰机制" class="headerlink" title="过期策略以及内存淘汰机制"></a>过期策略以及内存淘汰机制</h4><p>redis采用的是定期删除+惰性删除策略</p>
<ul>
<li>定期删除：Redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 Key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机？假如 Redis 存了几十万个 Key ，每隔 100ms 就遍历所有的设置过期时间的 Key 的话，就会给 CPU 带来很大的负载</li>
<li><p>惰性删除 ：定期删除可能会导致很多过期 Key 到了时间并没有被删除掉。所以就有了惰性删除，也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除</p>
</li>
<li><p>内存淘汰机制： 在redis配置文件中配置 # maxmemory-policy volatile-lru<br>Redis 提供 6 种数据淘汰策略：</p>
</li>
</ul>
<pre><code>- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
- allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）
- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
- no-enviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错
</code></pre><h4 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h4><p>Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file，AOF）。</p>
<ul>
<li><p>RDB 快照持久化是 Redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save <span class="number">900</span> <span class="number">1</span>              <span class="comment">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class="line">save <span class="number">300</span> <span class="number">10</span>            <span class="comment">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div><div class="line">save <span class="number">60</span> <span class="number">10000</span>        <span class="comment">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span></div></pre></td></tr></table></figure>
</li>
<li><p>AOF<br>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案<br>默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">appendonly yes</div></pre></td></tr></table></figure>
</li>
</ul>
<p>开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。</p>
<p>AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。</p>
<p>在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">appendfsync always     <span class="comment">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span></div><div class="line">appendfsync everysec  <span class="comment">#每秒钟同步一次，显示地将多个写命令同步到硬盘</span></div><div class="line">appendfsync no      <span class="comment">#让操作系统决定何时进行同步</span></div></pre></td></tr></table></figure></p>
<p>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。</p>
<ul>
<li>Redis 4.0 对于持久化机制的优化</li>
</ul>
<p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。</p>
<p>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。</p>
<p>这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。</p>
<p>当然缺点也是有的，AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>当缓存失效(过期)后引起系统性能急剧下降的情况</p>
<p>解决方案：</p>
<ul>
<li><p>更新锁机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对缓存更新操作进行加锁保护，保证只有一个线程进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么返回一个空值或者默认值</div></pre></td></tr></table></figure>
</li>
<li><p>后台更新机制</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">由后台线程更新缓存， 不是由业务来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存</div></pre></td></tr></table></figure>
</li>
<li><p>给缓存的失效时间加一个随机值，避免集体失效</p>
</li>
<li>使用双缓存，缓存A和B,A设置失效时间，B不设置失效  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 从缓存A读取数据，有就返回</div><div class="line">- A没有数据，直接从B读取数据，直接返回，并异步启动一个更新线程</div><div class="line">- 更新线程同时更新A，B的缓存数据</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>
<p>解决方案：</p>
<ul>
<li>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</li>
<li>采用异步更新策略，无论key是否取到值，都直接返回，如果查询返回的数据为空也缓存清理。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作</li>
</ul>
<h4 id="如何解决redis的并发竞争key问题"><a href="#如何解决redis的并发竞争key问题" class="headerlink" title="如何解决redis的并发竞争key问题"></a>如何解决redis的并发竞争key问题</h4><p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 Key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同</p>
<p>推荐方案： 分布式锁（ZooKeeper 和 Redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能），大家去抢锁，抢到锁就做set操作即可；</p>
<h4 id="redis和数据库双写一致性问题"><a href="#redis和数据库双写一致性问题" class="headerlink" title="redis和数据库双写一致性问题"></a>redis和数据库双写一致性问题</h4><p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="external">http://www.redis.cn/topics/data-types-intro.html#strings</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis的数据存在内存中， 读写速度非常快，常用于缓存数据，来提高系统的高性能和高并发&lt;/p&gt;
&lt;h4 id=&quot;使用redis目的&quot;&gt;&lt;a href=&quot;#使用redis目的&quot; class=&quot;headerlink&quot; title=&quot;使用redis目的&quot;&gt;&lt;/a&gt;使用redis
    
    </summary>
    
      <category term="运维" scheme="https://ttxsgoto.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Redis" scheme="https://ttxsgoto.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Django mgirate 错误</title>
    <link href="https://ttxsgoto.github.io/2018/09/17/django-migrations-error/"/>
    <id>https://ttxsgoto.github.io/2018/09/17/django-migrations-error/</id>
    <published>2018-09-17T11:37:18.000Z</published>
    <updated>2018-09-17T12:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">1057</span>, <span class="keyword">in</span> _read_query_result</div><div class="line">    result.read()</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">1340</span>, <span class="keyword">in</span> read</div><div class="line">    first_packet = self.connection._read_packet()</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">1014</span>, <span class="keyword">in</span> _read_packet</div><div class="line">    packet.check_error()</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/connections.py"</span>, line <span class="number">393</span>, <span class="keyword">in</span> check_error</div><div class="line">    err.raise_mysql_exception(self._data)</div><div class="line">  File <span class="string">"/root/.virtualenvs/lib/python3.5/site-packages/pymysql/err.py"</span>, line <span class="number">107</span>, <span class="keyword">in</span> raise_mysql_exception</div><div class="line">    <span class="keyword">raise</span> errorclass(errno, errval)</div><div class="line">django.db.utils.IntegrityError: (<span class="number">1215</span>, <span class="string">'Cannot add foreign key constraint'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p>查看资料后，网上大体出现这样报错的原因有：</p>
<ul>
<li>外键对应的字段数据类型不一致</li>
<li>两张表的存储引擎不一致</li>
<li>设置外键时“删除时”设置为“SET NULL”</li>
</ul>
<p>发现这3点都不是引起我们报错的原因，首先我们的外键的字段都是UUID类型一样， 存储引擎也同样都是InnoDB,外键使用默认的django.db.models.deletion.CASCADE，这3点都不是造成错误的原因；</p>
<p>后来通过反复比较， 发现发现新建的表和建立外键的关系表中对应的字符集(default character set)和默认集合(default collation)这两者的类型不一致，导致外键关系创建不上,修改成一致后，再migrate，问题解决<br>所以 在这里应该再加一条，</p>
<ul>
<li>在导入新库时，对应的字符集和集合类型应该和原数据库一致</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在开发环境中，常把线上的数据库导入开发环境中， 这样本地数据库的字符集和集合类型有可能和线上的就不一致，导致上述问题；<br>上述问题的原因： 线上数据库在创建数据库时指定的字符集为(utf8mb4)集合类型为(utf8mb4_general_ci),而在本地创建数据库时指定的字符集类型为(utf8mb4)集合类型为(utf8mb4_bin); 尤其在多人协作时这样的问题更容易出现，所以这样的操作时，应先查看数据库对应的存储引擎、字符集和集合类型等信息，避免出现意想不到的错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;最近在工作中，django model添加表时，如果有外键，在migrate时常常出现如下报错：&lt;br&gt;&lt;figure cl
    
    </summary>
    
      <category term="Django" scheme="https://ttxsgoto.github.io/categories/Django/"/>
    
    
      <category term="migrate" scheme="https://ttxsgoto.github.io/tags/migrate/"/>
    
  </entry>
  
  <entry>
    <title>Mysql必知必会笔记</title>
    <link href="https://ttxsgoto.github.io/2018/09/16/mysql-queryset/"/>
    <id>https://ttxsgoto.github.io/2018/09/16/mysql-queryset/</id>
    <published>2018-09-16T11:02:58.000Z</published>
    <updated>2018-09-17T11:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：</p>
<p>其中使用的数据库结构和数据为<a href="http://forta.com/books/0672327120/" target="_blank" rel="external">http://forta.com/books/0672327120/</a> 中的SQL脚本</p>
<h4 id="计算次序"><a href="#计算次序" class="headerlink" title="计算次序"></a>计算次序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM products WHERE vend_id=1002 or vend_id =1003;</div><div class="line">SELECT * FROM products WHERE (vend_id=1002 or vend_id=1003) AND prod_price &gt;=10;</div><div class="line">SELECT * FROM products WHERE vend_id not in (1002, 1003) ORDER BY prod_name;</div><div class="line">SELECT * FROM products ;</div><div class="line">SELECT * FROM products WHERE prod_name like &apos;_ ton anv%&apos;;	# _ 只匹配单个字符而不是多个字符</div></pre></td></tr></table></figure>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM products ;</div><div class="line">SELECT * FROM products WHERE prod_name REGEXP &apos;.000&apos; ORDER BY prod_name;	# 匹配任意一个字符</div><div class="line">SELECT * FROM products WHERE prod_name regexp &apos;1000|2000&apos;;</div><div class="line">SELECT * FROM products WHERE prod_name regexp &apos;[123] ton&apos;;</div></pre></td></tr></table></figure>
<h4 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h4><p>拼接： 将值联结到一起构成单个值， 使用Concat()函数来来拼接两个列, 函数中为多个字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT CONCAT(vend_name, &apos; (&apos;, vend_country, &apos;) &apos;) AS vend_title FROM vendors order by vend_name;</div></pre></td></tr></table></figure></p>
<p>执行算术计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT prod_id, quantity, item_price, quantity*item_price as total_price FROM orderitems WHERE order_num=20005;</div></pre></td></tr></table></figure></p>
<h4 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">日期和时间处理函数</div><div class="line">ADDDATE(expr,days)	添加一个日期(天，周等)</div><div class="line">ADDTIME(expr1,expr2)	添加一个时间(时，分等)</div><div class="line">CURDATE()	返回当前日期</div><div class="line">CURTIME()	返回当前时间</div><div class="line">DATE(expr)	返回日期时间的日期部分</div><div class="line">DATEDIFF(expr1,expr2)	计算两个日期之差</div><div class="line">DATE_ADD(date,INTERVAL expr unit)	高度灵活的日期运算函数</div><div class="line">DATE_FORMAT(date,format)	返回一个格式化的日期或时间串</div><div class="line">DAY(date)	返回一个日期的天数部分</div><div class="line">DAYOFWEEK(date)	对于一个日期，返回对应的星期几</div><div class="line">HOUR(time)	返回一个时间的小时部分</div><div class="line">MINUTE(time)	返回一个时间的分钟部分</div><div class="line">MONTH(date)	返回一个日期的月份部分</div><div class="line">NOW()		返回当前日期和时间</div><div class="line">SECOND(time)	返回一个时间的秒部分</div><div class="line">TIME(expr)	返回一个日期时间的时间部分</div><div class="line">YEAR()		返回一个日期的年份部分</div><div class="line"> </div><div class="line">数值处理函数</div><div class="line">ABS(X)	返回一个数的绝对值</div><div class="line">COS(X)	返回一个角度的余弦</div><div class="line">EXP(X)	返回一个数的指数值</div><div class="line">MOD(N,M)	返回除操作的余数</div><div class="line">PI()	返回圆周率</div><div class="line">RAND()	返回一个随机数</div><div class="line">SIN(X)	返回一个角度的正弦</div><div class="line">SQRT(X)	返回一个数的平方根</div><div class="line">TAN(X)	返回一个角度的正切</div><div class="line"> </div><div class="line">SELECT * FROM orders;</div><div class="line">SELECT * from orders WHERE DATE(order_date) = &apos;2005-09-01&apos;;</div><div class="line">SELECT * FROM orders WHERE DATE(order_date) BETWEEN &apos;2005-09-01&apos; and &apos;2005-10-01&apos;;</div><div class="line">SELECT * from orders where YEAR(order_date)=2005 and MONTH(order_date) = 10;</div></pre></td></tr></table></figure>
<h4 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h4><ul>
<li>聚合函数<br>  运行在行组上，计算和返回单个值的函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">AVG([DISTINCT] expr)	返回某列的平均值</div><div class="line">COUNT(expr)	返回某列的行数</div><div class="line">MAX(expr)	返回某列的最大值</div><div class="line">MIN(expr)	返回某列的最小值</div><div class="line">SUM(expr)	返回某列值之和</div><div class="line"> </div><div class="line"> </div><div class="line">SELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class="line">SELECT COUNT(*) FROM customers;</div><div class="line">SELECT COUNT(cust_email) FROM customers;</div><div class="line">SELECT SUM(item_price* quantity) FROM orderitems WHERE order_num=20005;</div><div class="line">-- 集合不同值 DISTINCT</div><div class="line">SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id=1003;</div><div class="line">SELECT COUNT(*) AS num_items, MIN(prod_price), MAX(prod_price), AVG(prod_price) FROM products;</div></pre></td></tr></table></figure>
<h4 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h4><ul>
<li>分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算</li>
<li>WHERE 过滤行， HAVING 过滤分组</li>
<li>WHERE 在数据分组前进行过滤，having在数据分组后进行过滤</li>
<li>GROUP BY子句可以包含任何数目的列</li>
<li>如果在group by子句中嵌套了分组， 数据将在最后规定的分组上进行汇总</li>
<li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(单不能是聚集函数)</li>
<li>SELECT 语句中的每个列都必须在group by 子句中给出</li>
<li>如果分组列中具有null值，则null将作为一个分组返回，如果列中有多行null值，它们将分为一组</li>
<li>GROUP BY 子句必须出现在where子句之后，order by子句之前</li>
<li>使用 with rollup关键字， 可以得到每个分组汇总的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM orders;</div><div class="line">SELECT vend_id, COUNT(*) as num FROM products GROUP BY vend_id WITH ROLLUP;</div><div class="line">SELECT cust_id,COUNT(*) as order_count FROM orders GROUP BY cust_id HAVING order_count &gt;= 2;</div><div class="line">SELECT * FROM products;</div><div class="line">SELECT vend_id,COUNT(*) FROM products WHERE prod_price &gt;=10 GROUP BY vend_id HAVING COUNT(*) &gt;=2;</div></pre></td></tr></table></figure>
<p>SELECT子句及其顺序</p>
<table>
<thead>
<tr>
<th>子句</th>
<th>说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody>
<tr>
<td>SELECT</td>
<td>要返回的列或表达式</td>
<td>是</td>
</tr>
<tr>
<td>FROM</td>
<td>从中检索数据的表</td>
<td>仅在从表选择数据时使用</td>
</tr>
<tr>
<td>WHERE</td>
<td>行级过滤</td>
<td>否</td>
</tr>
<tr>
<td>GROUP BY</td>
<td>分组说明</td>
<td>仅在按组计算聚集时使用</td>
</tr>
<tr>
<td>HAVING</td>
<td>组级过滤</td>
<td>否</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>输出排序顺序</td>
<td>否</td>
</tr>
<tr>
<td>LIMIT</td>
<td>要检索的行数</td>
<td>否</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT order_num, SUM(quantity*item_price) AS total  FROM orderitems GROUP BY order_num HAVING total &gt;=50 ORDER BY total;</div></pre></td></tr></table></figure>
<h4 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h4><p>子查询：嵌套在其他查询中的查询<br>子查询进行过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM orderitems WHERE prod_id=&apos;TNT2&apos;;</div><div class="line">SELECT * FROM orders WHERE order_num in (20005, 20007);</div><div class="line">SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;);</div><div class="line">SELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id=&apos;TNT2&apos;));</div></pre></td></tr></table></figure></p>
<p>计算字段使用子查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT COUNT(*) AS orders FROM orders WHERE cust_id=10001;</div><div class="line"></div><div class="line">SELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_name;</div></pre></td></tr></table></figure>
<h4 id="联结表查询"><a href="#联结表查询" class="headerlink" title="联结表查询"></a>联结表查询</h4><ul>
<li>内部联结： 基于两个表之间的相等测试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;</div><div class="line">SELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id AND orderitems.prod_id = products.prod_id AND order_num=20005;</div><div class="line">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num AND prod_id = &apos;TNT2&apos;;</div></pre></td></tr></table></figure>
<h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><p>利用union操作符将多条select组合成一个结果集<br>使用场景：</p>
<pre><code>- 在单个查询中从不同的表返回类似结构的数据
- 对单个表执行多个查询，按单个查询返回数据
</code></pre><p> 规则：</p>
<ul>
<li>SELECT 语句之间使用UNION关键字连接</li>
<li>UNION每个查询必须包含相同的列、表达式或者聚集函数</li>
<li>列数据类型必须兼容，类型不必完全相同，但必须是DBMS可以隐含地转换类型</li>
<li>UNION 从查询结果中自动去除了重复的行，如果需要返回所有匹配行，可以使用UNION ALL来展示</li>
<li>UNION 只能使用一条ORDER BY 子句，必须出现在最后一条SELECT语句之后,作用于所有SELECT语句返回的结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5;</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;=5 UNION ALL SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002);</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 OR vend_id IN (1001, 1002);</div><div class="line">SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price&lt;=5 UNION SELECT  vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002) ORDER BY vend_id,prod_price;</div></pre></td></tr></table></figure>
<h4 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h4><ul>
<li>MyISAM引擎支持全文本搜索，InnoDB不支持</li>
<li>MATCH()指定被搜索的列</li>
<li>Against()指定要使用的搜索表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;rabbit&apos;);</div><div class="line">SELECT * FROM productnotes WHERE note_text like &quot;%rabbit%&quot;;</div><div class="line">SELECT * FROM productnotes WHERE MATCH(note_text) Against(&apos;anvils&apos;);</div></pre></td></tr></table></figure>
<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>视图是虚拟的表， 视图只包含使用时动态检索数据的查询</p>
<p>视图功能</p>
<pre><code>- 重用sql语句
- 简化复杂的sql操作
- 使用表的组成部分而不是整个表
- 保护数据
- 更改数据格式和表示 
</code></pre><p>基本语句</p>
<pre><code>- 创建使用 CREATE VIEW
- 查看创建视图的语句 SHOW CREATE VIEW viewname
- 删除视图， DROP VIEW viewname
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND </div><div class="line">orderitems.order_num = orders.order_num AND prod_id=&quot;TNT2&quot;;</div><div class="line">-- 创建视图</div><div class="line">CREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id=orders.cust_id AND</div><div class="line">orderitems.order_num = orders.order_num;</div><div class="line">SELECT cust_name, cust_contact FROM productcustomers;</div><div class="line">SELECT cust_name, cust_contact FROM productcustomers WHERE prod_id=&apos;TNT2&apos;;</div><div class="line">-- 重新格式化检索出的数据</div><div class="line">CREATE VIEW vendorlocations AS SELECT CONCAT(RTRIM(vend_name), &apos;(&apos;, RTRIM(vend_country), &apos;)&apos;) AS vend_title FROM vendors ORDER BY vend_name;</div><div class="line">SELECT * FROM vendorlocations;</div><div class="line">-- 视图过滤不想要的数据</div><div class="line">CREATE VIEW customeremiallist AS SELECT * FROM customers WHERE cust_email IS NOT NULL;</div><div class="line">SELECT * FROM customeremiallist;</div><div class="line">-- 使用视图与计算字段</div><div class="line">CREATE VIEW orderitemsexpanded AS SELECT order_num, prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems;</div><div class="line">SELECT * FROM orderitemsexpanded WHERE order_num=20005;</div><div class="line">-- 查看视图</div><div class="line">SHOW CREATE VIEW orderitemsexpanded;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了一下mysql基础知识， 主要集中在相关查询操作上，记录如下：&lt;/p&gt;
&lt;p&gt;其中使用的数据库结构和数据为&lt;a href=&quot;http://forta.com/books/0672327120/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://ttxsgoto.github.io/2018/08/25/rabbitmq/"/>
    <id>https://ttxsgoto.github.io/2018/08/25/rabbitmq/</id>
    <published>2018-08-25T07:22:15.000Z</published>
    <updated>2018-08-25T08:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：</p>
<h4 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h4><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持Ajax。</p>
<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p>RabbitMQ中的消息都只能存储在Queue中，生产者（下图中的P）生产消息并最终投递到Queue中，消费者（下图中的C）可以从Queue中获取消息并消费。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/01.png" alt=""><br>多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/02.png" alt=""></p>
<h4 id="Message-acknowledgment-确认机制"><a href="#Message-acknowledgment-确认机制" class="headerlink" title="Message acknowledgment(确认机制)"></a>Message acknowledgment(确认机制)</h4><p>在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。<br>这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑,另外pub message是没有ack的。<br>rabbitmq_producer_ack.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto"</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置指定队列名称，body往队列中发送消息</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">''</span>,</div><div class="line">                          routing_key=<span class="string">"ttxsgoto"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i))</div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_ack.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto"</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"ok"</span>)</div><div class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class="comment"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">"ttxsgoto"</span>,</div><div class="line">                      no_ack=<span class="keyword">False</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h4 id="Message-durability-持久化"><a href="#Message-durability-持久化" class="headerlink" title="Message durability(持久化)"></a>Message durability(持久化)</h4><p>如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。<br>rabbitmq_producer_ack_durable.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class="line"><span class="comment"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto01"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置指定队列名称，body往队列中发送消息</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">''</span>,</div><div class="line">                          routing_key=<span class="string">"ttxsgoto01"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_ack_durable.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto01"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"ok"</span>)</div><div class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class="comment"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">"ttxsgoto01"</span>,</div><div class="line">                      no_ack=<span class="keyword">False</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<p>说明：消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来；此时可以通过rabbitmq web管理页面看到队列ttxsgoto01的Parameters有一个D属性，表示durable=True</p>
<h4 id="Prefetch-count-每发送数"><a href="#Prefetch-count-每发送数" class="headerlink" title="Prefetch count(每发送数)"></a>Prefetch count(每发送数)</h4><p>如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个消息的处理时间不同，就有可能会导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息<br>rabbitmq_producer_ack_durable_qos.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># 消息队列是可以做持久化，如果我们在生产消息的时候就指定某条消息需要做持久化，那么RabbitMQ发现有问题时，就会将消息保存到硬盘，持久化下来</span></div><div class="line"><span class="comment"># 此时rabbitmq down掉时，再启动 队列和数据也都是存在的，如果不持久化，down掉后队列就没有了</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,指定队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto02"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置指定队列名称，body往队列中发送消息</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">''</span>,</div><div class="line">                          routing_key=<span class="string">"ttxsgoto02"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_ack_durable_qos.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 通过频道创建队列，如果有则忽略，没有则创建,队列持久化</span></div><div class="line">channel.queue_declare(queue=<span class="string">"ttxsgoto02"</span>, durable=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"ok"</span>)</div><div class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class="comment"># 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 表示谁来获取，不再按照奇偶数排列</span></div><div class="line">channel.basic_qos(prefetch_count=<span class="number">1</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">"ttxsgoto02"</span>,</div><div class="line">                      no_ack=<span class="keyword">False</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h4 id="Exchange-交换器"><a href="#Exchange-交换器" class="headerlink" title="Exchange(交换器)"></a>Exchange(交换器)</h4><p>在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际的情况是，生产者将消息发送到Exchange（交换器，下图中的X），由Exchange将消息路由到一个或多个Queue中（或者丢弃）。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/03.png" alt=""></p>
<h4 id="routing-key"><a href="#routing-key" class="headerlink" title="routing key"></a>routing key</h4><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。（routing key + exchange type + binding key）<br>在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。<br>RabbitMQ为routing key设定的长度限制为255 bytes</p>
<h4 id="Binding-绑定到Queue"><a href="#Binding-绑定到Queue" class="headerlink" title="Binding(绑定到Queue)"></a>Binding(绑定到Queue)</h4><p>RabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由到指定的Queue了。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/04.png" alt=""></p>
<h4 id="Binding-key"><a href="#Binding-key" class="headerlink" title="Binding key"></a>Binding key</h4><p>在绑定（Binding）Exchange与Queue的同时，一般会指定一个binding key；消费者将消息发送给Exchange时，一般会指定一个routing key；当binding key与routing key相匹配时，消息将会被路由到对应的Queue中。<br>在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key。<br>binding key 并不是在所有情况下都生效，它依赖于Exchange Type，比如fanout类型的Exchange就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。</p>
<h4 id="Exchange-Types"><a href="#Exchange-Types" class="headerlink" title="Exchange Types"></a>Exchange Types</h4><p>RabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种,一般headers使用较少，不做演示说明，下面分别进行介绍</p>
<h5 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h5><p>fanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/05.png" alt=""><br>上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。<br>rabbitmq_producer_fanout.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 指定exchange和对应的类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_fanout"</span>,</div><div class="line">                         exchange_type=<span class="string">'fanout'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 设置exchange，没有指定routing_key，队列随机</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">'test_fanout'</span>,</div><div class="line">                          routing_key=<span class="string">"abc"</span>,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_fanout.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = fanout ：任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_fanout"</span>,  <span class="comment"># 创建一个exchange</span></div><div class="line">                         exchange_type=<span class="string">"fanout"</span>)  <span class="comment"># 任何发送到fanout exchange的消息都会被转发到和exchange绑定的queue上</span></div><div class="line"> </div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line"> </div><div class="line"><span class="comment"># 绑定，exchange绑定后端队列</span></div><div class="line">channel.queue_bind(exchange=<span class="string">"test_fanout"</span>,</div><div class="line">                   queue=queue_name)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s"</span> % body)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="comment"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h5 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h5><p>direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。<br><img src="https://ttxsgoto.github.io/img/rabbitmq/06.png" alt=""><br>以上图的配置为例，我们以routingKey=”error”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；如果我们以routingKey=”info”或routingKey=”warning”来发送消息，则消息只会路由到Queue2。如果我们以其他routingKey发送消息，则消息不会路由到这两个Queue中。<br>rabbitmq_producer_direct.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class="line"><span class="comment"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class="line"><span class="comment"># 结论：当我们将发布者的key设置成Error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 指定exchange和对应的类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_direct"</span>,</div><div class="line">                         exchange_type=<span class="string">'direct'</span>)</div><div class="line">typeinfo = <span class="string">'info'</span></div><div class="line"> </div><div class="line"><span class="comment"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</div><div class="line">    channel.basic_publish(exchange=<span class="string">'test_direct'</span>,</div><div class="line">                          routing_key=typeinfo,</div><div class="line">                          body=<span class="string">"Hello World!--&#123;&#125;"</span>.format(i),</div><div class="line">                          properties=pika.BasicProperties(delivery_mode=<span class="number">2</span>, ))  <span class="comment"># 指定消息持久化</span></div><div class="line">    print(<span class="string">"Sent 'Hello World!' - &#123;&#125; "</span>.format(i))</div><div class="line"> </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_direct1.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class="line"><span class="comment"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_direct"</span>,  <span class="comment"># 创建一个exchange</span></div><div class="line">                         exchange_type=<span class="string">"direct"</span>)</div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line"> </div><div class="line">typeinfo = [<span class="string">'error'</span>, <span class="string">'info'</span>, ]</div><div class="line"> </div><div class="line"><span class="comment"># 绑定，exchange绑定后端队列</span></div><div class="line"><span class="keyword">for</span> type1 <span class="keyword">in</span> typeinfo:</div><div class="line">    channel.queue_bind(exchange=<span class="string">"test_direct"</span>, queue=queue_name, routing_key=type1)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s --- %s"</span> % (method.routing_key, body))</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="comment"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_direct2.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = direct：任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue上(关键字发送)</span></div><div class="line"><span class="comment"># 队列绑定关键字，发送者将数据关键字发送到消息Exchange，Exchange根据关键字判定应该将数据发送至指定队列</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_direct"</span>,  <span class="comment"># 创建一个exchange</span></div><div class="line">                         exchange_type=<span class="string">"direct"</span>)</div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line"> </div><div class="line">typeinfo = [<span class="string">'error'</span>, ]</div><div class="line"> </div><div class="line"><span class="comment"># 绑定，exchange绑定后端队列</span></div><div class="line"><span class="keyword">for</span> type1 <span class="keyword">in</span> typeinfo:</div><div class="line">    channel.queue_bind(exchange=<span class="string">"test_direct"</span>, queue=queue_name, routing_key=type1)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s --- %s"</span> % (method.routing_key, body))</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="comment"># ch.basic_ack(delivery_tag=method.delivery_tag)  # 向生产者发送消费完毕的确认消息，然后生产者将该条消息从队列中剔除</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<p>结论：当我们将发布者的key设置成error的时候两个队列对可以收到Exchange的消息，当我们将key设置成info后，只有订阅者1可以收到Exchange的消息。</p>
<h5 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h5><p>direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：</p>
<ul>
<li><p>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”</p>
</li>
<li><p>binding key与routing key一样也是句点号“. ”分隔的字符串</p>
</li>
<li><p>binding key中可以存在两种特殊字符“<em>”与“#”，用于做模糊匹配，其中“</em>”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）</p>
</li>
</ul>
<p><img src="https://ttxsgoto.github.io/img/rabbitmq/07.png" alt=""></p>
<p>以上图中的配置为例，routingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，routingKey=”lazy.orange.fox”的消息会路由到Q1，routingKey=”lazy.brown.fox”的消息会路由到Q2，routingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，因为它们没有匹配任何bindingKey。<br>rabbitmq_producer_topic.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class="line"><span class="comment"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入"路由值"和"关键字"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class="line"><span class="comment"># # ：表示可以匹配0个或多个单词</span></div><div class="line"><span class="comment"># * ：表示只能匹配一个单词</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 指定exchange和对应的类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_topic"</span>,</div><div class="line">                         exchange_type=<span class="string">'topic'</span>)</div><div class="line"> </div><div class="line">routing_key = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'anonymous'</span></div><div class="line">message = <span class="string">''</span>.join(sys.argv[<span class="number">2</span>:]) <span class="keyword">or</span> <span class="string">'Hello Chengdu!'</span></div><div class="line"> </div><div class="line"><span class="comment"># 设置exchange，没有指定routing_key，队列指定关键字</span></div><div class="line">channel.basic_publish(exchange=<span class="string">'test_topic'</span>, routing_key=routing_key, body=message)</div><div class="line"> </div><div class="line">print(<span class="string">" Sent routing_key:%s ——&gt; body:%s "</span> % (routing_key, message))</div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">connection.close()</div></pre></td></tr></table></figure></p>
<p>rabbitmq_consumer_topic.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="comment"># exchange type = topic：任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上(模糊匹配)</span></div><div class="line"><span class="comment"># 在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入"路由值"和"关键字"进行匹配，匹配成功，则将数据发送到指定队列</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> pika</div><div class="line"> </div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">5672</span>))</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个频道</span></div><div class="line">channel = connection.channel()</div><div class="line"> </div><div class="line"><span class="comment"># 创建一个exchange,并指定类型</span></div><div class="line">channel.exchange_declare(exchange=<span class="string">"test_topic"</span>,</div><div class="line">                         exchange_type=<span class="string">"topic"</span>)</div><div class="line"><span class="comment"># 随机创建队列</span></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">queue_name = result.method.queue</div><div class="line">binding_keys = sys.argv[<span class="number">1</span>:]</div><div class="line"> </div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> binding_keys:</div><div class="line">    sys.stderr.write(<span class="string">"Usage: %s [binding_key]...\n"</span> % sys.argv[<span class="number">0</span>])</div><div class="line">    sys.exit(<span class="number">0</span>)</div><div class="line"> </div><div class="line"><span class="keyword">for</span> binding_key <span class="keyword">in</span> binding_keys:</div><div class="line">    channel.queue_bind(exchange=<span class="string">"test_topic"</span>, queue=queue_name, routing_key=binding_key)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">"Received %s -----%s "</span> % (method.routing_key, body))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 从队列中取消息</span></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)  <span class="comment"># 如果no_ack=False,当消费者down掉，rabbitmq会重新将该任务添加到队列中</span></div><div class="line"> </div><div class="line">print(<span class="string">"Waiting for messages,To exit press CTRL + C"</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure></p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">添加用户：</div><div class="line">rabbitmqctl add_user abc abc</div><div class="line"> </div><div class="line">添加权限：</div><div class="line">rabbitmqctl set_permissions -p &quot;/&quot; abc &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</div><div class="line"> </div><div class="line">设置用户标签：</div><div class="line">rabbitmqctl set_user_tags abc administrator</div><div class="line"> </div><div class="line">删除用户：</div><div class="line">rabbitmqctl delete_user guest</div><div class="line"> </div><div class="line">修改密码：</div><div class="line">rabbitmqctl change_password   username  newpassword</div><div class="line"> </div><div class="line">list_users</div><div class="line">add_vhost   vhostpath</div><div class="line">rabbitmqctl list_user_permissions abc  </div><div class="line">list_queues </div><div class="line">list_exchanges</div><div class="line">list_bindings</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作需要，需要使用到RabbitMQ，于是理解了一下相关概念和代码测试了一下，记录如下：&lt;/p&gt;
&lt;h4 id=&quot;RabbitMQ简介&quot;&gt;&lt;a href=&quot;#RabbitMQ简介&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ简介&quot;&gt;&lt;/a&gt;Ra
    
    </summary>
    
      <category term="中间件" scheme="https://ttxsgoto.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="RabbitMQ" scheme="https://ttxsgoto.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Mysql索引02</title>
    <link href="https://ttxsgoto.github.io/2018/08/11/yw-mysql-index02/"/>
    <id>https://ttxsgoto.github.io/2018/08/11/yw-mysql-index02/</id>
    <published>2018-08-11T03:33:20.000Z</published>
    <updated>2018-12-26T07:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h4><ul>
<li>哈希表<ul>
<li>适用于只有等值查询的场景</li>
<li>哈希冲突的处理办法：链表</li>
</ul>
</li>
<li>有序数组<ul>
<li>在等值查询和范围查询场景中性能都非常优秀</li>
<li>只适用于静态存储引擎</li>
<li>在更新数据时，需要挪动后面所有的记录，成本高</li>
</ul>
</li>
<li>搜索树</li>
</ul>
<h4 id="InnoDB索引模型"><a href="#InnoDB索引模型" class="headerlink" title="InnoDB索引模型"></a>InnoDB索引模型</h4><p>在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表</p>
<p>每一个索引在InnoDB里面对应一棵B+树</p>
<p>主键索引的叶子节点存的整行数据，主键索引也称为聚簇索引(clustered index)</p>
<p>非主键索引的叶子节点内容是主键的值，非主键索引也被称为二级索引(secondary index)</p>
<h4 id="主键索引和普通索引的查询区别"><a href="#主键索引和普通索引的查询区别" class="headerlink" title="主键索引和普通索引的查询区别"></a>主键索引和普通索引的查询区别</h4><ul>
<li>基于非主键索引的查询需要多扫描一棵索引数，扫描主键索引</li>
<li>回到主键索引树搜索的过程，我们称为回表</li>
</ul>
<h4 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h4><p>在插入数据时，索引的数据也会变化</p>
<p>如果插入的数据对应的数据页已经满了，根据B+树的算法，需要申请一个新的数据页，然后挪动部分数据到新的数据页中，该过程称为页分裂</p>
<p>页分裂影响性能而且也影响数据页的利用率</p>
<p>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也越小</p>
<p>从性能和存储空间考虑，自增主键比没有使用自增主键合理</p>
<h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>select id from table where k between 3 and 5;<br>索引K 已经“覆盖了”我们查询需求，我们称之为覆盖索引<br>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引为一个常用的性能优化手段</p>
<p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `tuser` (</div><div class="line">    `id` int(11) NOT NULL,</div><div class="line">    `id_card` varchar(32) DEFAULT NULL,</div><div class="line">    `name` varchar(32) DEFAULT NULL,</div><div class="line">    `age` int(11) DEFAULT NULL,</div><div class="line">    `ismale` tinyint(1) DEFAULT NULL,</div><div class="line">    PRIMARY KEY (`id`),</div><div class="line">    KEY `id_card` (`id_card`),</div><div class="line">    KEY `name_age` (`name`,`age`)</div><div class="line">    ) ENGINE=InnoDB;</div></pre></td></tr></table></figure></p>
<p>如果现在有一个高频请求，要根据市民的身份证号查询他的姓名和年龄，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间</p>
<h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><ul>
<li>B+树这种索引结构，可利用索引的“最左前缀”，来定位记录</li>
<li>最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符</li>
<li>最左前缀评估标准，索引的复用能力</li>
</ul>
<p>建立联合索引时，如果安排索引内的字段顺序？</p>
<ul>
<li>如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的</li>
<li>在联合索引时，建立单个索引考虑的原则为空间</li>
</ul>
<h4 id="索引下推-Mysql5-6之后"><a href="#索引下推-Mysql5-6之后" class="headerlink" title="索引下推(Mysql5.6之后)"></a>索引下推(Mysql5.6之后)</h4><p>在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数<br>name like “zhang%” and age&gt;10,会对匹配的数据进行回表查询，如果有索引下推机制，那么会先过滤掉age&lt;10的数据，在执行回表查询，提高检索速度</p>
<p>alter table T engine=InnoDB 是用来释放 delete 操作引起的页的空洞,也就是碎片空间 操作时候尽量避免当前表的dml 操作.<br>表数据很大情况 建议使用 Percona Toolkit 工具来执行</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;索引常见模型&quot;&gt;&lt;a href=&quot;#索引常见模型&quot; class=&quot;headerlink&quot; title=&quot;索引常见模型&quot;&gt;&lt;/a&gt;索引常见模型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;哈希表&lt;ul&gt;
&lt;li&gt;适用于只有等值查询的场景&lt;/li&gt;
&lt;li&gt;哈希冲突的处理办法：链表&lt;/
    
    </summary>
    
      <category term="Mysql" scheme="https://ttxsgoto.github.io/categories/Mysql/"/>
    
    
      <category term="Index" scheme="https://ttxsgoto.github.io/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 基本用法</title>
    <link href="https://ttxsgoto.github.io/2018/08/10/python-asyncio-basic/"/>
    <id>https://ttxsgoto.github.io/2018/08/10/python-asyncio-basic/</id>
    <published>2018-08-10T03:58:11.000Z</published>
    <updated>2018-08-10T09:39:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>同时开启多个任务，但一次只执行一个，当执行的任务遇到阻塞，就切换到下一个任务继续执行，<br>以期节省阻塞所占用的时间</p>
<p>要实现异步处理，需要有挂起的操作，当一个任务需要等待 IO 结果的时候，可以挂起当前任务，转而去执行其他任务</p>
<ol>
<li>event_loop： 事件循环，把一些函数注册到这个事件循环中，当条件满足时，就执行对应的方法</li>
<li>coroutine： 协程，可以看做一个协程对象类型，把协程对象注册到事件循环中，满足条件时被调用； async关键字来定义一个方法，这个方法在调用时不会立刻执行，而是返回一个协程对象</li>
<li>task： 任务，它是对协程对象的进一步封装，包含了任务的各个状态</li>
<li>future： 代表即将执行或者还没有执行的任务的结果，可以等同与task</li>
<li>async： 用于定义协程， 协程函数不能直接调用，直接调用协程函数得到的是协程对象(<coroutine object="" execute="" at="" 0x10359c938="">)</coroutine></li>
<li>await：用来将阻塞方法进行挂起</li>
</ol>
<h4 id="await-后的对象必须为如下的格式"><a href="#await-后的对象必须为如下的格式" class="headerlink" title="await 后的对象必须为如下的格式"></a>await 后的对象必须为如下的格式</h4><ul>
<li>原生的coroutine对象</li>
<li>一个由types.coroutine()修饰的生成器，这个生成器可以返回 coroutine 对象</li>
<li>一个包含 __await 方法的对象返回的一个迭代器。</li>
</ul>
<h4 id="asyncio模块实例"><a href="#asyncio模块实例" class="headerlink" title="asyncio模块实例"></a>asyncio模块实例</h4><h5 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></div><div class="line">    print(<span class="string">'No. '</span>, x)</div><div class="line"> </div><div class="line">coroutine = execute(<span class="number">2</span>)</div><div class="line"> </div><div class="line">print(<span class="string">'Coroutine--&gt;'</span>, coroutine)    <span class="comment"># 协程对象</span></div><div class="line">print(<span class="string">'After calling execute'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 创建事件循环</span></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line"> </div><div class="line"><span class="comment"># 方法一:将coroutine封装成task对象</span></div><div class="line"><span class="comment"># task = loop.create_task(coroutine)</span></div><div class="line"><span class="comment"># 方法二:通过 asyncio 的 ensure_future() 方法, 将coroutine封装成task对象,这样可以不借助于loop来定义,</span></div><div class="line"><span class="comment">#即使没有声明loop也可以提前定义好task对象</span></div><div class="line">task = asyncio.ensure_future(coroutine)</div><div class="line">task.add_done_callback(callback)    <span class="comment"># task添加回调函数(通过task.result()获取返回值)</span></div><div class="line"> </div><div class="line">print(<span class="string">'Task:'</span>, task)  <span class="comment"># 查看任务task的状态</span></div><div class="line"><span class="comment"># Task: &lt;Task pending coro=&lt;execute() ...</span></div><div class="line"><span class="comment"># 将协程对象注册到事件循环中</span></div><div class="line">loop.run_until_complete(task)</div><div class="line"> </div><div class="line">print(<span class="string">'Task:'</span>, task)</div><div class="line"><span class="comment"># Task: &lt;Task finished coro=&lt;execute() done ...</span></div><div class="line">print(<span class="string">'Task result: '</span>, task.result()) <span class="comment"># task在fiinished状态时,直接读取task的result方法，得到返回值</span></div><div class="line"><span class="comment"># loop.run_until_complete(coroutine)</span></div><div class="line">print(<span class="string">'After calling loop'</span>)</div></pre></td></tr></table></figure>
<h5 id="多任务执行"><a href="#多任务执行" class="headerlink" title="多任务执行"></a>多任务执行</h5><p>定义一个task列表，然后使用asyncio的wait()方法即可执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">now = time.time()</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(number)</span>:</span></div><div class="line">    <span class="keyword">await</span> asyncio.sleep(number)</div><div class="line">    <span class="keyword">return</span> number</div><div class="line"> </div><div class="line">tasks = [asyncio.ensure_future(num(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</div><div class="line">print(<span class="string">'Tasks-'</span>, tasks)</div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))    <span class="comment"># asyncio.wait()用于执行tasks</span></div><div class="line">print(<span class="string">'Tasks-'</span>, tasks)</div><div class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</div><div class="line">    print(<span class="string">'Task Result: '</span>, task.result())</div><div class="line"> </div><div class="line">print(<span class="string">'time--&gt;'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>
<h5 id="协程嵌套"><a href="#协程嵌套" class="headerlink" title="协程嵌套"></a>协程嵌套</h5><p>即一个协程中await了另外一个协程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> </div><div class="line">now = time.time()</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(number)</span>:</span></div><div class="line">    <span class="keyword">await</span> asyncio.sleep(number)</div><div class="line">    <span class="keyword">return</span> number</div><div class="line"> </div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    tasks = [asyncio.ensure_future(num(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line"></div><div class="line">    <span class="comment"># _tasks = await asyncio.gather(*tasks) #  asyncio.gather创建协程对象,await的返回值就是协程运行的结果</span></div><div class="line">    _tasks, pending = <span class="keyword">await</span> asyncio.wait(tasks) <span class="comment"># asyncio.wait挂起协程,Returns two sets of Future: (done, pending).</span></div><div class="line">    print(<span class="string">'-----'</span>, _tasks )</div><div class="line"></div><div class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> _tasks: <span class="comment"># 在函数里面返回结果</span></div><div class="line">        print((<span class="string">'wait result task-&gt;'</span>, task.result()))</div><div class="line">        print(<span class="string">'gather result task-&gt;'</span>, task)</div><div class="line">    <span class="keyword">return</span> _tasks</div><div class="line"> </div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">results = loop.run_until_complete(main())</div><div class="line"> </div><div class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">    print((<span class="string">'wait result task-&gt;'</span>, result.result()))</div><div class="line">    <span class="comment"># print('gather result task-&gt;', result)</span></div><div class="line"> </div><div class="line">print(<span class="string">'TIME:'</span>, time.time() - now)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;async-await&quot;&gt;&lt;a href=&quot;#async-await&quot; class=&quot;headerlink&quot; title=&quot;async/await&quot;&gt;&lt;/a&gt;async/await&lt;/h3&gt;&lt;h4 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;head
    
    </summary>
    
      <category term="python" scheme="https://ttxsgoto.github.io/categories/python/"/>
    
    
      <category term="asyncio" scheme="https://ttxsgoto.github.io/tags/asyncio/"/>
    
  </entry>
  
</feed>
